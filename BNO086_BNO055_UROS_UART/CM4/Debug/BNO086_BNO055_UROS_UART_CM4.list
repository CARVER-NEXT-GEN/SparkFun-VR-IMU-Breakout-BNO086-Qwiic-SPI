
BNO086_BNO055_UROS_UART_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf58  08100298  08100298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0810d1f0  0810d1f0  0000e1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810d298  0810d298  0000e298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810d29c  0810d29c  0000e29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000090  10000000  0810d2a0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000580  10000090  0810d330  0000f090  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  10000610  0810d330  0000f610  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a6fe  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000037bd  00000000  00000000  000297be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001648  00000000  00000000  0002cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000112f  00000000  00000000  0002e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d596  00000000  00000000  0002f6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f70c  00000000  00000000  0006cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018dfc0  00000000  00000000  0008c399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0021a359  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000636c  00000000  00000000  0021a39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000008f  00000000  00000000  00220708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000090 	.word	0x10000090
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d1d8 	.word	0x0810d1d8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000094 	.word	0x10000094
 81002d4:	0810d1d8 	.word	0x0810d1d8

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	@ 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <BNO055_Init>:
volatile SharedMemory *const SRAM4_BNO055 = (SharedMemory*)(SHARED_MEMORY_ADDRESS_BNO055); // Definition in SRAM4.c

#if __CORTEX_M == 4  // Only for CM7 core

HAL_StatusTypeDef BNO055_Init(BNO055_t *bno, I2C_HandleTypeDef *hi2cx, uint8_t addr, OPRMode mode)
{
 8100c50:	b580      	push	{r7, lr}
 8100c52:	b08a      	sub	sp, #40	@ 0x28
 8100c54:	af04      	add	r7, sp, #16
 8100c56:	60f8      	str	r0, [r7, #12]
 8100c58:	60b9      	str	r1, [r7, #8]
 8100c5a:	4611      	mov	r1, r2
 8100c5c:	461a      	mov	r2, r3
 8100c5e:	460b      	mov	r3, r1
 8100c60:	71fb      	strb	r3, [r7, #7]
 8100c62:	4613      	mov	r3, r2
 8100c64:	71bb      	strb	r3, [r7, #6]
	uint8_t txbuffer;
	uint8_t rxbuffer;

	bno->hi2cx = hi2cx;
 8100c66:	68fb      	ldr	r3, [r7, #12]
 8100c68:	68ba      	ldr	r2, [r7, #8]
 8100c6a:	601a      	str	r2, [r3, #0]
	bno->address = BNO055_ADD_H;
 8100c6c:	68fb      	ldr	r3, [r7, #12]
 8100c6e:	2252      	movs	r2, #82	@ 0x52
 8100c70:	711a      	strb	r2, [r3, #4]
	if (addr == 0) bno->address = BNO055_ADD_L;
 8100c72:	79fb      	ldrb	r3, [r7, #7]
 8100c74:	2b00      	cmp	r3, #0
 8100c76:	d102      	bne.n	8100c7e <BNO055_Init+0x2e>
 8100c78:	68fb      	ldr	r3, [r7, #12]
 8100c7a:	2250      	movs	r2, #80	@ 0x50
 8100c7c:	711a      	strb	r2, [r3, #4]

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8100c7e:	68fb      	ldr	r3, [r7, #12]
 8100c80:	6818      	ldr	r0, [r3, #0]
 8100c82:	68fb      	ldr	r3, [r7, #12]
 8100c84:	791b      	ldrb	r3, [r3, #4]
 8100c86:	4619      	mov	r1, r3
 8100c88:	230a      	movs	r3, #10
 8100c8a:	9302      	str	r3, [sp, #8]
 8100c8c:	2301      	movs	r3, #1
 8100c8e:	9301      	str	r3, [sp, #4]
 8100c90:	f107 0316 	add.w	r3, r7, #22
 8100c94:	9300      	str	r3, [sp, #0]
 8100c96:	2301      	movs	r3, #1
 8100c98:	2200      	movs	r2, #0
 8100c9a:	f005 fe19 	bl	81068d0 <HAL_I2C_Mem_Read>
	if (rxbuffer != 0xA0) {
 8100c9e:	7dbb      	ldrb	r3, [r7, #22]
 8100ca0:	2ba0      	cmp	r3, #160	@ 0xa0
 8100ca2:	d018      	beq.n	8100cd6 <BNO055_Init+0x86>
		HAL_Delay(1000);
 8100ca4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100ca8:	f002 fd8a 	bl	81037c0 <HAL_Delay>
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8100cac:	68fb      	ldr	r3, [r7, #12]
 8100cae:	6818      	ldr	r0, [r3, #0]
 8100cb0:	68fb      	ldr	r3, [r7, #12]
 8100cb2:	791b      	ldrb	r3, [r3, #4]
 8100cb4:	4619      	mov	r1, r3
 8100cb6:	230a      	movs	r3, #10
 8100cb8:	9302      	str	r3, [sp, #8]
 8100cba:	2301      	movs	r3, #1
 8100cbc:	9301      	str	r3, [sp, #4]
 8100cbe:	f107 0316 	add.w	r3, r7, #22
 8100cc2:	9300      	str	r3, [sp, #0]
 8100cc4:	2301      	movs	r3, #1
 8100cc6:	2200      	movs	r2, #0
 8100cc8:	f005 fe02 	bl	81068d0 <HAL_I2C_Mem_Read>
		if (rxbuffer != 0xA0) return HAL_ERROR;
 8100ccc:	7dbb      	ldrb	r3, [r7, #22]
 8100cce:	2ba0      	cmp	r3, #160	@ 0xa0
 8100cd0:	d001      	beq.n	8100cd6 <BNO055_Init+0x86>
 8100cd2:	2301      	movs	r3, #1
 8100cd4:	e099      	b.n	8100e0a <BNO055_Init+0x1ba>
	}

	txbuffer = CONFIGMODE;
 8100cd6:	2300      	movs	r3, #0
 8100cd8:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 8100cda:	68fb      	ldr	r3, [r7, #12]
 8100cdc:	6818      	ldr	r0, [r3, #0]
 8100cde:	68fb      	ldr	r3, [r7, #12]
 8100ce0:	791b      	ldrb	r3, [r3, #4]
 8100ce2:	4619      	mov	r1, r3
 8100ce4:	230a      	movs	r3, #10
 8100ce6:	9302      	str	r3, [sp, #8]
 8100ce8:	2301      	movs	r3, #1
 8100cea:	9301      	str	r3, [sp, #4]
 8100cec:	f107 0317 	add.w	r3, r7, #23
 8100cf0:	9300      	str	r3, [sp, #0]
 8100cf2:	2301      	movs	r3, #1
 8100cf4:	223d      	movs	r2, #61	@ 0x3d
 8100cf6:	f005 fcd7 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100cfa:	200a      	movs	r0, #10
 8100cfc:	f002 fd60 	bl	81037c0 <HAL_Delay>

	txbuffer = 0x20;
 8100d00:	2320      	movs	r3, #32
 8100d02:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8100d04:	68fb      	ldr	r3, [r7, #12]
 8100d06:	6818      	ldr	r0, [r3, #0]
 8100d08:	68fb      	ldr	r3, [r7, #12]
 8100d0a:	791b      	ldrb	r3, [r3, #4]
 8100d0c:	4619      	mov	r1, r3
 8100d0e:	230a      	movs	r3, #10
 8100d10:	9302      	str	r3, [sp, #8]
 8100d12:	2301      	movs	r3, #1
 8100d14:	9301      	str	r3, [sp, #4]
 8100d16:	f107 0317 	add.w	r3, r7, #23
 8100d1a:	9300      	str	r3, [sp, #0]
 8100d1c:	2301      	movs	r3, #1
 8100d1e:	223f      	movs	r2, #63	@ 0x3f
 8100d20:	f005 fcc2 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8100d24:	201e      	movs	r0, #30
 8100d26:	f002 fd4b 	bl	81037c0 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(bno->hi2cx, bno->address, CHIP_ID, 1, &rxbuffer, 1, 10);
 8100d2a:	68fb      	ldr	r3, [r7, #12]
 8100d2c:	6818      	ldr	r0, [r3, #0]
 8100d2e:	68fb      	ldr	r3, [r7, #12]
 8100d30:	791b      	ldrb	r3, [r3, #4]
 8100d32:	4619      	mov	r1, r3
 8100d34:	230a      	movs	r3, #10
 8100d36:	9302      	str	r3, [sp, #8]
 8100d38:	2301      	movs	r3, #1
 8100d3a:	9301      	str	r3, [sp, #4]
 8100d3c:	f107 0316 	add.w	r3, r7, #22
 8100d40:	9300      	str	r3, [sp, #0]
 8100d42:	2301      	movs	r3, #1
 8100d44:	2200      	movs	r2, #0
 8100d46:	f005 fdc3 	bl	81068d0 <HAL_I2C_Mem_Read>
	} while (rxbuffer != 0xA0);
 8100d4a:	7dbb      	ldrb	r3, [r7, #22]
 8100d4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8100d4e:	d1ec      	bne.n	8100d2a <BNO055_Init+0xda>
	HAL_Delay(50);
 8100d50:	2032      	movs	r0, #50	@ 0x32
 8100d52:	f002 fd35 	bl	81037c0 <HAL_Delay>

	txbuffer = Normal_Mode;
 8100d56:	2300      	movs	r3, #0
 8100d58:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PWR_MODE, 1, &txbuffer, 1, 10);
 8100d5a:	68fb      	ldr	r3, [r7, #12]
 8100d5c:	6818      	ldr	r0, [r3, #0]
 8100d5e:	68fb      	ldr	r3, [r7, #12]
 8100d60:	791b      	ldrb	r3, [r3, #4]
 8100d62:	4619      	mov	r1, r3
 8100d64:	230a      	movs	r3, #10
 8100d66:	9302      	str	r3, [sp, #8]
 8100d68:	2301      	movs	r3, #1
 8100d6a:	9301      	str	r3, [sp, #4]
 8100d6c:	f107 0317 	add.w	r3, r7, #23
 8100d70:	9300      	str	r3, [sp, #0]
 8100d72:	2301      	movs	r3, #1
 8100d74:	223e      	movs	r2, #62	@ 0x3e
 8100d76:	f005 fc97 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100d7a:	200a      	movs	r0, #10
 8100d7c:	f002 fd20 	bl	81037c0 <HAL_Delay>

	txbuffer = Page_ID_00;
 8100d80:	2300      	movs	r3, #0
 8100d82:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, PAGE_ID, 1, &txbuffer, 1, 10);
 8100d84:	68fb      	ldr	r3, [r7, #12]
 8100d86:	6818      	ldr	r0, [r3, #0]
 8100d88:	68fb      	ldr	r3, [r7, #12]
 8100d8a:	791b      	ldrb	r3, [r3, #4]
 8100d8c:	4619      	mov	r1, r3
 8100d8e:	230a      	movs	r3, #10
 8100d90:	9302      	str	r3, [sp, #8]
 8100d92:	2301      	movs	r3, #1
 8100d94:	9301      	str	r3, [sp, #4]
 8100d96:	f107 0317 	add.w	r3, r7, #23
 8100d9a:	9300      	str	r3, [sp, #0]
 8100d9c:	2301      	movs	r3, #1
 8100d9e:	2207      	movs	r2, #7
 8100da0:	f005 fc82 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100da4:	200a      	movs	r0, #10
 8100da6:	f002 fd0b 	bl	81037c0 <HAL_Delay>

	txbuffer = 0x00;
 8100daa:	2300      	movs	r3, #0
 8100dac:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, SYS_TRIGGER, 1, &txbuffer, 1, 10);
 8100dae:	68fb      	ldr	r3, [r7, #12]
 8100db0:	6818      	ldr	r0, [r3, #0]
 8100db2:	68fb      	ldr	r3, [r7, #12]
 8100db4:	791b      	ldrb	r3, [r3, #4]
 8100db6:	4619      	mov	r1, r3
 8100db8:	230a      	movs	r3, #10
 8100dba:	9302      	str	r3, [sp, #8]
 8100dbc:	2301      	movs	r3, #1
 8100dbe:	9301      	str	r3, [sp, #4]
 8100dc0:	f107 0317 	add.w	r3, r7, #23
 8100dc4:	9300      	str	r3, [sp, #0]
 8100dc6:	2301      	movs	r3, #1
 8100dc8:	223f      	movs	r2, #63	@ 0x3f
 8100dca:	f005 fc6d 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8100dce:	200a      	movs	r0, #10
 8100dd0:	f002 fcf6 	bl	81037c0 <HAL_Delay>

	bno->mode = mode;
 8100dd4:	68fb      	ldr	r3, [r7, #12]
 8100dd6:	79ba      	ldrb	r2, [r7, #6]
 8100dd8:	715a      	strb	r2, [r3, #5]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8100dda:	68fb      	ldr	r3, [r7, #12]
 8100ddc:	6818      	ldr	r0, [r3, #0]
 8100dde:	68fb      	ldr	r3, [r7, #12]
 8100de0:	791b      	ldrb	r3, [r3, #4]
 8100de2:	4619      	mov	r1, r3
 8100de4:	68fb      	ldr	r3, [r7, #12]
 8100de6:	3305      	adds	r3, #5
 8100de8:	220a      	movs	r2, #10
 8100dea:	9202      	str	r2, [sp, #8]
 8100dec:	2201      	movs	r2, #1
 8100dee:	9201      	str	r2, [sp, #4]
 8100df0:	9300      	str	r3, [sp, #0]
 8100df2:	2301      	movs	r3, #1
 8100df4:	223d      	movs	r2, #61	@ 0x3d
 8100df6:	f005 fc57 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 8100dfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100dfe:	f002 fcdf 	bl	81037c0 <HAL_Delay>

	bno->flag = HAL_OK;
 8100e02:	68fb      	ldr	r3, [r7, #12]
 8100e04:	2200      	movs	r2, #0
 8100e06:	719a      	strb	r2, [r3, #6]

	return HAL_OK;
 8100e08:	2300      	movs	r3, #0
}
 8100e0a:	4618      	mov	r0, r3
 8100e0c:	3718      	adds	r7, #24
 8100e0e:	46bd      	mov	sp, r7
 8100e10:	bd80      	pop	{r7, pc}
 8100e12:	0000      	movs	r0, r0
 8100e14:	0000      	movs	r0, r0
	...

08100e18 <BNO055_Read_DMA>:
	}

}

void BNO055_Read_DMA(BNO055_t *bno, uint8_t fast_mode)
{
 8100e18:	b580      	push	{r7, lr}
 8100e1a:	b08a      	sub	sp, #40	@ 0x28
 8100e1c:	af04      	add	r7, sp, #16
 8100e1e:	6078      	str	r0, [r7, #4]
 8100e20:	460b      	mov	r3, r1
 8100e22:	70fb      	strb	r3, [r7, #3]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8100e24:	687b      	ldr	r3, [r7, #4]
 8100e26:	6818      	ldr	r0, [r3, #0]
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	791b      	ldrb	r3, [r3, #4]
 8100e2c:	4619      	mov	r1, r3
 8100e2e:	230a      	movs	r3, #10
 8100e30:	9302      	str	r3, [sp, #8]
 8100e32:	2301      	movs	r3, #1
 8100e34:	9301      	str	r3, [sp, #4]
 8100e36:	f107 030f 	add.w	r3, r7, #15
 8100e3a:	9300      	str	r3, [sp, #0]
 8100e3c:	2301      	movs	r3, #1
 8100e3e:	223d      	movs	r2, #61	@ 0x3d
 8100e40:	f005 fd46 	bl	81068d0 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8100e44:	687b      	ldr	r3, [r7, #4]
 8100e46:	795a      	ldrb	r2, [r3, #5]
 8100e48:	7bfb      	ldrb	r3, [r7, #15]
 8100e4a:	429a      	cmp	r2, r3
 8100e4c:	d00f      	beq.n	8100e6e <BNO055_Read_DMA+0x56>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8100e4e:	687b      	ldr	r3, [r7, #4]
 8100e50:	6818      	ldr	r0, [r3, #0]
 8100e52:	687b      	ldr	r3, [r7, #4]
 8100e54:	791b      	ldrb	r3, [r3, #4]
 8100e56:	4619      	mov	r1, r3
 8100e58:	687b      	ldr	r3, [r7, #4]
 8100e5a:	3305      	adds	r3, #5
 8100e5c:	220a      	movs	r2, #10
 8100e5e:	9202      	str	r2, [sp, #8]
 8100e60:	2201      	movs	r2, #1
 8100e62:	9201      	str	r2, [sp, #4]
 8100e64:	9300      	str	r3, [sp, #0]
 8100e66:	2301      	movs	r3, #1
 8100e68:	223d      	movs	r2, #61	@ 0x3d
 8100e6a:	f005 fc1d 	bl	81066a8 <HAL_I2C_Mem_Write>
	}

	const double scale = (1.0 / (1 << 14));
 8100e6e:	f04f 0200 	mov.w	r2, #0
 8100e72:	4bc3      	ldr	r3, [pc, #780]	@ (8101180 <BNO055_Read_DMA+0x368>)
 8100e74:	e9c7 2304 	strd	r2, r3, [r7, #16]

	bno->accel.x = ((double) bno->DataBuffer[0].i16) / 100.0;
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8100e7e:	4618      	mov	r0, r3
 8100e80:	f7ff fb7c 	bl	810057c <__aeabi_i2d>
 8100e84:	f04f 0200 	mov.w	r2, #0
 8100e88:	4bbe      	ldr	r3, [pc, #760]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 8100e8a:	f7ff fd0b 	bl	81008a4 <__aeabi_ddiv>
 8100e8e:	4602      	mov	r2, r0
 8100e90:	460b      	mov	r3, r1
 8100e92:	6879      	ldr	r1, [r7, #4]
 8100e94:	e9c1 2302 	strd	r2, r3, [r1, #8]
	bno->accel.y = ((double) bno->DataBuffer[1].i16) / 100.0;
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	@ 0xba
 8100e9e:	4618      	mov	r0, r3
 8100ea0:	f7ff fb6c 	bl	810057c <__aeabi_i2d>
 8100ea4:	f04f 0200 	mov.w	r2, #0
 8100ea8:	4bb6      	ldr	r3, [pc, #728]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 8100eaa:	f7ff fcfb 	bl	81008a4 <__aeabi_ddiv>
 8100eae:	4602      	mov	r2, r0
 8100eb0:	460b      	mov	r3, r1
 8100eb2:	6879      	ldr	r1, [r7, #4]
 8100eb4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	bno->accel.z = ((double) bno->DataBuffer[2].i16) / 100.0;
 8100eb8:	687b      	ldr	r3, [r7, #4]
 8100eba:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
 8100ebe:	4618      	mov	r0, r3
 8100ec0:	f7ff fb5c 	bl	810057c <__aeabi_i2d>
 8100ec4:	f04f 0200 	mov.w	r2, #0
 8100ec8:	4bae      	ldr	r3, [pc, #696]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 8100eca:	f7ff fceb 	bl	81008a4 <__aeabi_ddiv>
 8100ece:	4602      	mov	r2, r0
 8100ed0:	460b      	mov	r3, r1
 8100ed2:	6879      	ldr	r1, [r7, #4]
 8100ed4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	bno->mag.x = ((double) bno->DataBuffer[3].i16) / 16.0;
 8100ed8:	687b      	ldr	r3, [r7, #4]
 8100eda:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
 8100ede:	4618      	mov	r0, r3
 8100ee0:	f7ff fb4c 	bl	810057c <__aeabi_i2d>
 8100ee4:	f04f 0200 	mov.w	r2, #0
 8100ee8:	4ba7      	ldr	r3, [pc, #668]	@ (8101188 <BNO055_Read_DMA+0x370>)
 8100eea:	f7ff fcdb 	bl	81008a4 <__aeabi_ddiv>
 8100eee:	4602      	mov	r2, r0
 8100ef0:	460b      	mov	r3, r1
 8100ef2:	6879      	ldr	r1, [r7, #4]
 8100ef4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bno->mag.y = ((double) bno->DataBuffer[4].i16) / 16.0;
 8100ef8:	687b      	ldr	r3, [r7, #4]
 8100efa:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 8100efe:	4618      	mov	r0, r3
 8100f00:	f7ff fb3c 	bl	810057c <__aeabi_i2d>
 8100f04:	f04f 0200 	mov.w	r2, #0
 8100f08:	4b9f      	ldr	r3, [pc, #636]	@ (8101188 <BNO055_Read_DMA+0x370>)
 8100f0a:	f7ff fccb 	bl	81008a4 <__aeabi_ddiv>
 8100f0e:	4602      	mov	r2, r0
 8100f10:	460b      	mov	r3, r1
 8100f12:	6879      	ldr	r1, [r7, #4]
 8100f14:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bno->mag.z = ((double) bno->DataBuffer[5].i16) / 16.0;
 8100f18:	687b      	ldr	r3, [r7, #4]
 8100f1a:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	@ 0xc2
 8100f1e:	4618      	mov	r0, r3
 8100f20:	f7ff fb2c 	bl	810057c <__aeabi_i2d>
 8100f24:	f04f 0200 	mov.w	r2, #0
 8100f28:	4b97      	ldr	r3, [pc, #604]	@ (8101188 <BNO055_Read_DMA+0x370>)
 8100f2a:	f7ff fcbb 	bl	81008a4 <__aeabi_ddiv>
 8100f2e:	4602      	mov	r2, r0
 8100f30:	460b      	mov	r3, r1
 8100f32:	6879      	ldr	r1, [r7, #4]
 8100f34:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	bno->gyro.x = ((double) bno->DataBuffer[6].i16) * M_PI / (16.0 * 180.0);
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	@ 0xc4
 8100f3e:	4618      	mov	r0, r3
 8100f40:	f7ff fb1c 	bl	810057c <__aeabi_i2d>
 8100f44:	a38c      	add	r3, pc, #560	@ (adr r3, 8101178 <BNO055_Read_DMA+0x360>)
 8100f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100f4a:	f7ff fb81 	bl	8100650 <__aeabi_dmul>
 8100f4e:	4602      	mov	r2, r0
 8100f50:	460b      	mov	r3, r1
 8100f52:	4610      	mov	r0, r2
 8100f54:	4619      	mov	r1, r3
 8100f56:	f04f 0200 	mov.w	r2, #0
 8100f5a:	4b8c      	ldr	r3, [pc, #560]	@ (810118c <BNO055_Read_DMA+0x374>)
 8100f5c:	f7ff fca2 	bl	81008a4 <__aeabi_ddiv>
 8100f60:	4602      	mov	r2, r0
 8100f62:	460b      	mov	r3, r1
 8100f64:	6879      	ldr	r1, [r7, #4]
 8100f66:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	bno->gyro.y = ((double) bno->DataBuffer[7].i16) * M_PI / (16.0 * 180.0);
 8100f6a:	687b      	ldr	r3, [r7, #4]
 8100f6c:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	@ 0xc6
 8100f70:	4618      	mov	r0, r3
 8100f72:	f7ff fb03 	bl	810057c <__aeabi_i2d>
 8100f76:	a380      	add	r3, pc, #512	@ (adr r3, 8101178 <BNO055_Read_DMA+0x360>)
 8100f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100f7c:	f7ff fb68 	bl	8100650 <__aeabi_dmul>
 8100f80:	4602      	mov	r2, r0
 8100f82:	460b      	mov	r3, r1
 8100f84:	4610      	mov	r0, r2
 8100f86:	4619      	mov	r1, r3
 8100f88:	f04f 0200 	mov.w	r2, #0
 8100f8c:	4b7f      	ldr	r3, [pc, #508]	@ (810118c <BNO055_Read_DMA+0x374>)
 8100f8e:	f7ff fc89 	bl	81008a4 <__aeabi_ddiv>
 8100f92:	4602      	mov	r2, r0
 8100f94:	460b      	mov	r3, r1
 8100f96:	6879      	ldr	r1, [r7, #4]
 8100f98:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	bno->gyro.z = ((double) bno->DataBuffer[8].i16) * M_PI / (16.0 * 180.0);
 8100f9c:	687b      	ldr	r3, [r7, #4]
 8100f9e:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8100fa2:	4618      	mov	r0, r3
 8100fa4:	f7ff faea 	bl	810057c <__aeabi_i2d>
 8100fa8:	a373      	add	r3, pc, #460	@ (adr r3, 8101178 <BNO055_Read_DMA+0x360>)
 8100faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100fae:	f7ff fb4f 	bl	8100650 <__aeabi_dmul>
 8100fb2:	4602      	mov	r2, r0
 8100fb4:	460b      	mov	r3, r1
 8100fb6:	4610      	mov	r0, r2
 8100fb8:	4619      	mov	r1, r3
 8100fba:	f04f 0200 	mov.w	r2, #0
 8100fbe:	4b73      	ldr	r3, [pc, #460]	@ (810118c <BNO055_Read_DMA+0x374>)
 8100fc0:	f7ff fc70 	bl	81008a4 <__aeabi_ddiv>
 8100fc4:	4602      	mov	r2, r0
 8100fc6:	460b      	mov	r3, r1
 8100fc8:	6879      	ldr	r1, [r7, #4]
 8100fca:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	bno->euler.yaw = ((double) bno->DataBuffer[9].i16) * M_PI / (16.0 * 180.0);
 8100fce:	687b      	ldr	r3, [r7, #4]
 8100fd0:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8100fd4:	4618      	mov	r0, r3
 8100fd6:	f7ff fad1 	bl	810057c <__aeabi_i2d>
 8100fda:	a367      	add	r3, pc, #412	@ (adr r3, 8101178 <BNO055_Read_DMA+0x360>)
 8100fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100fe0:	f7ff fb36 	bl	8100650 <__aeabi_dmul>
 8100fe4:	4602      	mov	r2, r0
 8100fe6:	460b      	mov	r3, r1
 8100fe8:	4610      	mov	r0, r2
 8100fea:	4619      	mov	r1, r3
 8100fec:	f04f 0200 	mov.w	r2, #0
 8100ff0:	4b66      	ldr	r3, [pc, #408]	@ (810118c <BNO055_Read_DMA+0x374>)
 8100ff2:	f7ff fc57 	bl	81008a4 <__aeabi_ddiv>
 8100ff6:	4602      	mov	r2, r0
 8100ff8:	460b      	mov	r3, r1
 8100ffa:	6879      	ldr	r1, [r7, #4]
 8100ffc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bno->euler.roll = ((double) bno->DataBuffer[10].i16) * M_PI / (16.0 * 180.0);
 8101000:	687b      	ldr	r3, [r7, #4]
 8101002:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	@ 0xcc
 8101006:	4618      	mov	r0, r3
 8101008:	f7ff fab8 	bl	810057c <__aeabi_i2d>
 810100c:	a35a      	add	r3, pc, #360	@ (adr r3, 8101178 <BNO055_Read_DMA+0x360>)
 810100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101012:	f7ff fb1d 	bl	8100650 <__aeabi_dmul>
 8101016:	4602      	mov	r2, r0
 8101018:	460b      	mov	r3, r1
 810101a:	4610      	mov	r0, r2
 810101c:	4619      	mov	r1, r3
 810101e:	f04f 0200 	mov.w	r2, #0
 8101022:	4b5a      	ldr	r3, [pc, #360]	@ (810118c <BNO055_Read_DMA+0x374>)
 8101024:	f7ff fc3e 	bl	81008a4 <__aeabi_ddiv>
 8101028:	4602      	mov	r2, r0
 810102a:	460b      	mov	r3, r1
 810102c:	6879      	ldr	r1, [r7, #4]
 810102e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	bno->euler.pitch = ((double) bno->DataBuffer[11].i16) * M_PI / (16.0 * 180.0);
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 8101038:	4618      	mov	r0, r3
 810103a:	f7ff fa9f 	bl	810057c <__aeabi_i2d>
 810103e:	a34e      	add	r3, pc, #312	@ (adr r3, 8101178 <BNO055_Read_DMA+0x360>)
 8101040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101044:	f7ff fb04 	bl	8100650 <__aeabi_dmul>
 8101048:	4602      	mov	r2, r0
 810104a:	460b      	mov	r3, r1
 810104c:	4610      	mov	r0, r2
 810104e:	4619      	mov	r1, r3
 8101050:	f04f 0200 	mov.w	r2, #0
 8101054:	4b4d      	ldr	r3, [pc, #308]	@ (810118c <BNO055_Read_DMA+0x374>)
 8101056:	f7ff fc25 	bl	81008a4 <__aeabi_ddiv>
 810105a:	4602      	mov	r2, r0
 810105c:	460b      	mov	r3, r1
 810105e:	6879      	ldr	r1, [r7, #4]
 8101060:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	bno->quat.w = bno->DataBuffer[12].i16 * scale;
 8101064:	687b      	ldr	r3, [r7, #4]
 8101066:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 810106a:	4618      	mov	r0, r3
 810106c:	f7ff fa86 	bl	810057c <__aeabi_i2d>
 8101070:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101074:	f7ff faec 	bl	8100650 <__aeabi_dmul>
 8101078:	4602      	mov	r2, r0
 810107a:	460b      	mov	r3, r1
 810107c:	6879      	ldr	r1, [r7, #4]
 810107e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	bno->quat.x = bno->DataBuffer[13].i16 * scale;
 8101082:	687b      	ldr	r3, [r7, #4]
 8101084:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8101088:	4618      	mov	r0, r3
 810108a:	f7ff fa77 	bl	810057c <__aeabi_i2d>
 810108e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101092:	f7ff fadd 	bl	8100650 <__aeabi_dmul>
 8101096:	4602      	mov	r2, r0
 8101098:	460b      	mov	r3, r1
 810109a:	6879      	ldr	r1, [r7, #4]
 810109c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bno->quat.y = bno->DataBuffer[14].i16 * scale;
 81010a0:	687b      	ldr	r3, [r7, #4]
 81010a2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 81010a6:	4618      	mov	r0, r3
 81010a8:	f7ff fa68 	bl	810057c <__aeabi_i2d>
 81010ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81010b0:	f7ff face 	bl	8100650 <__aeabi_dmul>
 81010b4:	4602      	mov	r2, r0
 81010b6:	460b      	mov	r3, r1
 81010b8:	6879      	ldr	r1, [r7, #4]
 81010ba:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	bno->quat.z = bno->DataBuffer[15].i16 * scale;
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	f9b3 30d6 	ldrsh.w	r3, [r3, #214]	@ 0xd6
 81010c4:	4618      	mov	r0, r3
 81010c6:	f7ff fa59 	bl	810057c <__aeabi_i2d>
 81010ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81010ce:	f7ff fabf 	bl	8100650 <__aeabi_dmul>
 81010d2:	4602      	mov	r2, r0
 81010d4:	460b      	mov	r3, r1
 81010d6:	6879      	ldr	r1, [r7, #4]
 81010d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	if (!fast_mode) {
 81010dc:	78fb      	ldrb	r3, [r7, #3]
 81010de:	2b00      	cmp	r3, #0
 81010e0:	d17d      	bne.n	81011de <BNO055_Read_DMA+0x3c6>

		bno->lin_acc.x = ((double) bno->DataBuffer[16].i16) / 100.0;
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	f9b3 30d8 	ldrsh.w	r3, [r3, #216]	@ 0xd8
 81010e8:	4618      	mov	r0, r3
 81010ea:	f7ff fa47 	bl	810057c <__aeabi_i2d>
 81010ee:	f04f 0200 	mov.w	r2, #0
 81010f2:	4b24      	ldr	r3, [pc, #144]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 81010f4:	f7ff fbd6 	bl	81008a4 <__aeabi_ddiv>
 81010f8:	4602      	mov	r2, r0
 81010fa:	460b      	mov	r3, r1
 81010fc:	6879      	ldr	r1, [r7, #4]
 81010fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = ((double) bno->DataBuffer[17].i16) / 100.0;
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	f9b3 30da 	ldrsh.w	r3, [r3, #218]	@ 0xda
 8101108:	4618      	mov	r0, r3
 810110a:	f7ff fa37 	bl	810057c <__aeabi_i2d>
 810110e:	f04f 0200 	mov.w	r2, #0
 8101112:	4b1c      	ldr	r3, [pc, #112]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 8101114:	f7ff fbc6 	bl	81008a4 <__aeabi_ddiv>
 8101118:	4602      	mov	r2, r0
 810111a:	460b      	mov	r3, r1
 810111c:	6879      	ldr	r1, [r7, #4]
 810111e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = ((double) bno->DataBuffer[18].i16) / 100.0;
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	@ 0xdc
 8101128:	4618      	mov	r0, r3
 810112a:	f7ff fa27 	bl	810057c <__aeabi_i2d>
 810112e:	f04f 0200 	mov.w	r2, #0
 8101132:	4b14      	ldr	r3, [pc, #80]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 8101134:	f7ff fbb6 	bl	81008a4 <__aeabi_ddiv>
 8101138:	4602      	mov	r2, r0
 810113a:	460b      	mov	r3, r1
 810113c:	6879      	ldr	r1, [r7, #4]
 810113e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->grav.x = ((double) bno->DataBuffer[19].i16) / 100.0;
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	f9b3 30de 	ldrsh.w	r3, [r3, #222]	@ 0xde
 8101148:	4618      	mov	r0, r3
 810114a:	f7ff fa17 	bl	810057c <__aeabi_i2d>
 810114e:	f04f 0200 	mov.w	r2, #0
 8101152:	4b0c      	ldr	r3, [pc, #48]	@ (8101184 <BNO055_Read_DMA+0x36c>)
 8101154:	f7ff fba6 	bl	81008a4 <__aeabi_ddiv>
 8101158:	4602      	mov	r2, r0
 810115a:	460b      	mov	r3, r1
 810115c:	6879      	ldr	r1, [r7, #4]
 810115e:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		bno->grav.y = ((double) bno->DataBuffer[20].i16) / 100.0;
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	f9b3 30e0 	ldrsh.w	r3, [r3, #224]	@ 0xe0
 8101168:	4618      	mov	r0, r3
 810116a:	f7ff fa07 	bl	810057c <__aeabi_i2d>
 810116e:	f04f 0200 	mov.w	r2, #0
 8101172:	e00d      	b.n	8101190 <BNO055_Read_DMA+0x378>
 8101174:	f3af 8000 	nop.w
 8101178:	54442d18 	.word	0x54442d18
 810117c:	400921fb 	.word	0x400921fb
 8101180:	3f100000 	.word	0x3f100000
 8101184:	40590000 	.word	0x40590000
 8101188:	40300000 	.word	0x40300000
 810118c:	40a68000 	.word	0x40a68000
 8101190:	4b1c      	ldr	r3, [pc, #112]	@ (8101204 <BNO055_Read_DMA+0x3ec>)
 8101192:	f7ff fb87 	bl	81008a4 <__aeabi_ddiv>
 8101196:	4602      	mov	r2, r0
 8101198:	460b      	mov	r3, r1
 810119a:	6879      	ldr	r1, [r7, #4]
 810119c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
		bno->grav.z = ((double) bno->DataBuffer[21].i16) / 100.0;
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	f9b3 30e2 	ldrsh.w	r3, [r3, #226]	@ 0xe2
 81011a6:	4618      	mov	r0, r3
 81011a8:	f7ff f9e8 	bl	810057c <__aeabi_i2d>
 81011ac:	f04f 0200 	mov.w	r2, #0
 81011b0:	4b14      	ldr	r3, [pc, #80]	@ (8101204 <BNO055_Read_DMA+0x3ec>)
 81011b2:	f7ff fb77 	bl	81008a4 <__aeabi_ddiv>
 81011b6:	4602      	mov	r2, r0
 81011b8:	460b      	mov	r3, r1
 81011ba:	6879      	ldr	r1, [r7, #4]
 81011bc:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0

		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 44);
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	6818      	ldr	r0, [r3, #0]
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	791b      	ldrb	r3, [r3, #4]
 81011c8:	4619      	mov	r1, r3
 81011ca:	687b      	ldr	r3, [r7, #4]
 81011cc:	33b8      	adds	r3, #184	@ 0xb8
 81011ce:	222c      	movs	r2, #44	@ 0x2c
 81011d0:	9201      	str	r2, [sp, #4]
 81011d2:	9300      	str	r3, [sp, #0]
 81011d4:	2301      	movs	r3, #1
 81011d6:	2208      	movs	r2, #8
 81011d8:	f005 fc94 	bl	8106b04 <HAL_I2C_Mem_Read_DMA>
	} else {
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
	}
}
 81011dc:	e00d      	b.n	81011fa <BNO055_Read_DMA+0x3e2>
		HAL_I2C_Mem_Read_DMA(bno->hi2cx, bno->address, ACC_DATA_X_LSB, 1, bno->DataBuffer->u8, 32);
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	6818      	ldr	r0, [r3, #0]
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	791b      	ldrb	r3, [r3, #4]
 81011e6:	4619      	mov	r1, r3
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	33b8      	adds	r3, #184	@ 0xb8
 81011ec:	2220      	movs	r2, #32
 81011ee:	9201      	str	r2, [sp, #4]
 81011f0:	9300      	str	r3, [sp, #0]
 81011f2:	2301      	movs	r3, #1
 81011f4:	2208      	movs	r2, #8
 81011f6:	f005 fc85 	bl	8106b04 <HAL_I2C_Mem_Read_DMA>
}
 81011fa:	bf00      	nop
 81011fc:	3718      	adds	r7, #24
 81011fe:	46bd      	mov	sp, r7
 8101200:	bd80      	pop	{r7, pc}
 8101202:	bf00      	nop
 8101204:	40590000 	.word	0x40590000

08101208 <BNO055_SetOffsets>:
		HAL_Delay(20);
	}
}

void BNO055_SetOffsets(BNO055_t *bno, BNO055_Offsets *bno_offset)
{
 8101208:	b580      	push	{r7, lr}
 810120a:	b08e      	sub	sp, #56	@ 0x38
 810120c:	af04      	add	r7, sp, #16
 810120e:	6078      	str	r0, [r7, #4]
 8101210:	6039      	str	r1, [r7, #0]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8101212:	687b      	ldr	r3, [r7, #4]
 8101214:	6818      	ldr	r0, [r3, #0]
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	791b      	ldrb	r3, [r3, #4]
 810121a:	4619      	mov	r1, r3
 810121c:	230a      	movs	r3, #10
 810121e:	9302      	str	r3, [sp, #8]
 8101220:	2301      	movs	r3, #1
 8101222:	9301      	str	r3, [sp, #4]
 8101224:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8101228:	9300      	str	r3, [sp, #0]
 810122a:	2301      	movs	r3, #1
 810122c:	223d      	movs	r2, #61	@ 0x3d
 810122e:	f005 fb4f 	bl	81068d0 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 8101232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101236:	2b00      	cmp	r3, #0
 8101238:	d014      	beq.n	8101264 <BNO055_SetOffsets+0x5c>
		uint8_t txbuffer = CONFIGMODE;
 810123a:	2300      	movs	r3, #0
 810123c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	6818      	ldr	r0, [r3, #0]
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	791b      	ldrb	r3, [r3, #4]
 8101246:	4619      	mov	r1, r3
 8101248:	230a      	movs	r3, #10
 810124a:	9302      	str	r3, [sp, #8]
 810124c:	2301      	movs	r3, #1
 810124e:	9301      	str	r3, [sp, #4]
 8101250:	f107 030f 	add.w	r3, r7, #15
 8101254:	9300      	str	r3, [sp, #0]
 8101256:	2301      	movs	r3, #1
 8101258:	223d      	movs	r2, #61	@ 0x3d
 810125a:	f005 fa25 	bl	81066a8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 810125e:	2014      	movs	r0, #20
 8101260:	f002 faae 	bl	81037c0 <HAL_Delay>
	}

	uint8_t txbuffer[22];
	txbuffer[0] = bno_offset->accel_offset_x.u8[0];
 8101264:	683b      	ldr	r3, [r7, #0]
 8101266:	781b      	ldrb	r3, [r3, #0]
 8101268:	743b      	strb	r3, [r7, #16]
	txbuffer[1] = bno_offset->accel_offset_x.u8[1];
 810126a:	683b      	ldr	r3, [r7, #0]
 810126c:	785b      	ldrb	r3, [r3, #1]
 810126e:	747b      	strb	r3, [r7, #17]
	txbuffer[2] = bno_offset->accel_offset_y.u8[0];
 8101270:	683b      	ldr	r3, [r7, #0]
 8101272:	789b      	ldrb	r3, [r3, #2]
 8101274:	74bb      	strb	r3, [r7, #18]
	txbuffer[3] = bno_offset->accel_offset_y.u8[1];
 8101276:	683b      	ldr	r3, [r7, #0]
 8101278:	78db      	ldrb	r3, [r3, #3]
 810127a:	74fb      	strb	r3, [r7, #19]
	txbuffer[4] = bno_offset->accel_offset_z.u8[0];
 810127c:	683b      	ldr	r3, [r7, #0]
 810127e:	791b      	ldrb	r3, [r3, #4]
 8101280:	753b      	strb	r3, [r7, #20]
	txbuffer[5] = bno_offset->accel_offset_z.u8[1];
 8101282:	683b      	ldr	r3, [r7, #0]
 8101284:	795b      	ldrb	r3, [r3, #5]
 8101286:	757b      	strb	r3, [r7, #21]
	txbuffer[6] = bno_offset->mag_offset_x.u8[0];
 8101288:	683b      	ldr	r3, [r7, #0]
 810128a:	799b      	ldrb	r3, [r3, #6]
 810128c:	75bb      	strb	r3, [r7, #22]
	txbuffer[7] = bno_offset->mag_offset_x.u8[1];
 810128e:	683b      	ldr	r3, [r7, #0]
 8101290:	79db      	ldrb	r3, [r3, #7]
 8101292:	75fb      	strb	r3, [r7, #23]
	txbuffer[8] = bno_offset->mag_offset_y.u8[0];
 8101294:	683b      	ldr	r3, [r7, #0]
 8101296:	7a1b      	ldrb	r3, [r3, #8]
 8101298:	763b      	strb	r3, [r7, #24]
	txbuffer[9] = bno_offset->mag_offset_y.u8[1];
 810129a:	683b      	ldr	r3, [r7, #0]
 810129c:	7a5b      	ldrb	r3, [r3, #9]
 810129e:	767b      	strb	r3, [r7, #25]
	txbuffer[10] = bno_offset->mag_offset_z.u8[0];
 81012a0:	683b      	ldr	r3, [r7, #0]
 81012a2:	7a9b      	ldrb	r3, [r3, #10]
 81012a4:	76bb      	strb	r3, [r7, #26]
	txbuffer[11] = bno_offset->mag_offset_z.u8[1];
 81012a6:	683b      	ldr	r3, [r7, #0]
 81012a8:	7adb      	ldrb	r3, [r3, #11]
 81012aa:	76fb      	strb	r3, [r7, #27]
	txbuffer[12] = bno_offset->gyro_offset_x.u8[0];
 81012ac:	683b      	ldr	r3, [r7, #0]
 81012ae:	7b1b      	ldrb	r3, [r3, #12]
 81012b0:	773b      	strb	r3, [r7, #28]
	txbuffer[13] = bno_offset->gyro_offset_x.u8[1];
 81012b2:	683b      	ldr	r3, [r7, #0]
 81012b4:	7b5b      	ldrb	r3, [r3, #13]
 81012b6:	777b      	strb	r3, [r7, #29]
	txbuffer[14] = bno_offset->gyro_offset_y.u8[0];
 81012b8:	683b      	ldr	r3, [r7, #0]
 81012ba:	7b9b      	ldrb	r3, [r3, #14]
 81012bc:	77bb      	strb	r3, [r7, #30]
	txbuffer[15] = bno_offset->gyro_offset_y.u8[1];
 81012be:	683b      	ldr	r3, [r7, #0]
 81012c0:	7bdb      	ldrb	r3, [r3, #15]
 81012c2:	77fb      	strb	r3, [r7, #31]
	txbuffer[16] = bno_offset->gyro_offset_z.u8[0];
 81012c4:	683b      	ldr	r3, [r7, #0]
 81012c6:	7c1b      	ldrb	r3, [r3, #16]
 81012c8:	f887 3020 	strb.w	r3, [r7, #32]
	txbuffer[17] = bno_offset->gyro_offset_z.u8[1];
 81012cc:	683b      	ldr	r3, [r7, #0]
 81012ce:	7c5b      	ldrb	r3, [r3, #17]
 81012d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txbuffer[18] = bno_offset->accel_radius.u8[0];
 81012d4:	683b      	ldr	r3, [r7, #0]
 81012d6:	7c9b      	ldrb	r3, [r3, #18]
 81012d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txbuffer[19] = bno_offset->accel_radius.u8[1];
 81012dc:	683b      	ldr	r3, [r7, #0]
 81012de:	7cdb      	ldrb	r3, [r3, #19]
 81012e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txbuffer[20] = bno_offset->mag_radius.u8[0];
 81012e4:	683b      	ldr	r3, [r7, #0]
 81012e6:	7d1b      	ldrb	r3, [r3, #20]
 81012e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txbuffer[21] = bno_offset->mag_radius.u8[1];
 81012ec:	683b      	ldr	r3, [r7, #0]
 81012ee:	7d5b      	ldrb	r3, [r3, #21]
 81012f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, ACC_OFFSET_X_LSB, 1, txbuffer, 22, 10);
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	6818      	ldr	r0, [r3, #0]
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	791b      	ldrb	r3, [r3, #4]
 81012fc:	4619      	mov	r1, r3
 81012fe:	230a      	movs	r3, #10
 8101300:	9302      	str	r3, [sp, #8]
 8101302:	2316      	movs	r3, #22
 8101304:	9301      	str	r3, [sp, #4]
 8101306:	f107 0310 	add.w	r3, r7, #16
 810130a:	9300      	str	r3, [sp, #0]
 810130c:	2301      	movs	r3, #1
 810130e:	2255      	movs	r2, #85	@ 0x55
 8101310:	f005 f9ca 	bl	81066a8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	6818      	ldr	r0, [r3, #0]
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	791b      	ldrb	r3, [r3, #4]
 810131c:	4619      	mov	r1, r3
 810131e:	230a      	movs	r3, #10
 8101320:	9302      	str	r3, [sp, #8]
 8101322:	2301      	movs	r3, #1
 8101324:	9301      	str	r3, [sp, #4]
 8101326:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 810132a:	9300      	str	r3, [sp, #0]
 810132c:	2301      	movs	r3, #1
 810132e:	223d      	movs	r2, #61	@ 0x3d
 8101330:	f005 face 	bl	81068d0 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	795a      	ldrb	r2, [r3, #5]
 8101338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810133c:	429a      	cmp	r2, r3
 810133e:	d012      	beq.n	8101366 <BNO055_SetOffsets+0x15e>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	6818      	ldr	r0, [r3, #0]
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	791b      	ldrb	r3, [r3, #4]
 8101348:	4619      	mov	r1, r3
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	3305      	adds	r3, #5
 810134e:	220a      	movs	r2, #10
 8101350:	9202      	str	r2, [sp, #8]
 8101352:	2201      	movs	r2, #1
 8101354:	9201      	str	r2, [sp, #4]
 8101356:	9300      	str	r3, [sp, #0]
 8101358:	2301      	movs	r3, #1
 810135a:	223d      	movs	r2, #61	@ 0x3d
 810135c:	f005 f9a4 	bl	81066a8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 8101360:	2014      	movs	r0, #20
 8101362:	f002 fa2d 	bl	81037c0 <HAL_Delay>
	}
}
 8101366:	bf00      	nop
 8101368:	3728      	adds	r7, #40	@ 0x28
 810136a:	46bd      	mov	sp, r7
 810136c:	bd80      	pop	{r7, pc}

0810136e <BNO055_SetAxis>:

void BNO055_SetAxis(BNO055_t *bno, Remap_Config config, Remap_Sign sign)
{
 810136e:	b580      	push	{r7, lr}
 8101370:	b088      	sub	sp, #32
 8101372:	af04      	add	r7, sp, #16
 8101374:	6078      	str	r0, [r7, #4]
 8101376:	460b      	mov	r3, r1
 8101378:	70fb      	strb	r3, [r7, #3]
 810137a:	4613      	mov	r3, r2
 810137c:	70bb      	strb	r3, [r7, #2]
	uint8_t read_mode;
	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	6818      	ldr	r0, [r3, #0]
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	791b      	ldrb	r3, [r3, #4]
 8101386:	4619      	mov	r1, r3
 8101388:	230a      	movs	r3, #10
 810138a:	9302      	str	r3, [sp, #8]
 810138c:	2301      	movs	r3, #1
 810138e:	9301      	str	r3, [sp, #4]
 8101390:	f107 030f 	add.w	r3, r7, #15
 8101394:	9300      	str	r3, [sp, #0]
 8101396:	2301      	movs	r3, #1
 8101398:	223d      	movs	r2, #61	@ 0x3d
 810139a:	f005 fa99 	bl	81068d0 <HAL_I2C_Mem_Read>
	if (read_mode != CONFIGMODE) {
 810139e:	7bfb      	ldrb	r3, [r7, #15]
 81013a0:	2b00      	cmp	r3, #0
 81013a2:	d014      	beq.n	81013ce <BNO055_SetAxis+0x60>
		uint8_t txbuffer = CONFIGMODE;
 81013a4:	2300      	movs	r3, #0
 81013a6:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &txbuffer, 1, 10);
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	6818      	ldr	r0, [r3, #0]
 81013ac:	687b      	ldr	r3, [r7, #4]
 81013ae:	791b      	ldrb	r3, [r3, #4]
 81013b0:	4619      	mov	r1, r3
 81013b2:	230a      	movs	r3, #10
 81013b4:	9302      	str	r3, [sp, #8]
 81013b6:	2301      	movs	r3, #1
 81013b8:	9301      	str	r3, [sp, #4]
 81013ba:	f107 030d 	add.w	r3, r7, #13
 81013be:	9300      	str	r3, [sp, #0]
 81013c0:	2301      	movs	r3, #1
 81013c2:	223d      	movs	r2, #61	@ 0x3d
 81013c4:	f005 f970 	bl	81066a8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 81013c8:	2014      	movs	r0, #20
 81013ca:	f002 f9f9 	bl	81037c0 <HAL_Delay>
	}

	uint8_t txbuffer;

	txbuffer = config;
 81013ce:	78fb      	ldrb	r3, [r7, #3]
 81013d0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_CONFIG, 1, &txbuffer, 1, 10);
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	6818      	ldr	r0, [r3, #0]
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	791b      	ldrb	r3, [r3, #4]
 81013da:	4619      	mov	r1, r3
 81013dc:	230a      	movs	r3, #10
 81013de:	9302      	str	r3, [sp, #8]
 81013e0:	2301      	movs	r3, #1
 81013e2:	9301      	str	r3, [sp, #4]
 81013e4:	f107 030e 	add.w	r3, r7, #14
 81013e8:	9300      	str	r3, [sp, #0]
 81013ea:	2301      	movs	r3, #1
 81013ec:	2241      	movs	r2, #65	@ 0x41
 81013ee:	f005 f95b 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 81013f2:	2014      	movs	r0, #20
 81013f4:	f002 f9e4 	bl	81037c0 <HAL_Delay>

	txbuffer = sign;
 81013f8:	78bb      	ldrb	r3, [r7, #2]
 81013fa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(bno->hi2cx, bno->address, AXIS_MAP_SIGN, 1, &txbuffer, 1, 10);
 81013fc:	687b      	ldr	r3, [r7, #4]
 81013fe:	6818      	ldr	r0, [r3, #0]
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	791b      	ldrb	r3, [r3, #4]
 8101404:	4619      	mov	r1, r3
 8101406:	230a      	movs	r3, #10
 8101408:	9302      	str	r3, [sp, #8]
 810140a:	2301      	movs	r3, #1
 810140c:	9301      	str	r3, [sp, #4]
 810140e:	f107 030e 	add.w	r3, r7, #14
 8101412:	9300      	str	r3, [sp, #0]
 8101414:	2301      	movs	r3, #1
 8101416:	2242      	movs	r2, #66	@ 0x42
 8101418:	f005 f946 	bl	81066a8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 810141c:	2014      	movs	r0, #20
 810141e:	f002 f9cf 	bl	81037c0 <HAL_Delay>

	HAL_I2C_Mem_Read(bno->hi2cx, bno->address, OPR_MODE, 1, &read_mode, 1, 10);
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	6818      	ldr	r0, [r3, #0]
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	791b      	ldrb	r3, [r3, #4]
 810142a:	4619      	mov	r1, r3
 810142c:	230a      	movs	r3, #10
 810142e:	9302      	str	r3, [sp, #8]
 8101430:	2301      	movs	r3, #1
 8101432:	9301      	str	r3, [sp, #4]
 8101434:	f107 030f 	add.w	r3, r7, #15
 8101438:	9300      	str	r3, [sp, #0]
 810143a:	2301      	movs	r3, #1
 810143c:	223d      	movs	r2, #61	@ 0x3d
 810143e:	f005 fa47 	bl	81068d0 <HAL_I2C_Mem_Read>
	if (read_mode != bno->mode) {
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	795a      	ldrb	r2, [r3, #5]
 8101446:	7bfb      	ldrb	r3, [r7, #15]
 8101448:	429a      	cmp	r2, r3
 810144a:	d012      	beq.n	8101472 <BNO055_SetAxis+0x104>
		HAL_I2C_Mem_Write(bno->hi2cx, bno->address, OPR_MODE, 1, &bno->mode, 1, 10);
 810144c:	687b      	ldr	r3, [r7, #4]
 810144e:	6818      	ldr	r0, [r3, #0]
 8101450:	687b      	ldr	r3, [r7, #4]
 8101452:	791b      	ldrb	r3, [r3, #4]
 8101454:	4619      	mov	r1, r3
 8101456:	687b      	ldr	r3, [r7, #4]
 8101458:	3305      	adds	r3, #5
 810145a:	220a      	movs	r2, #10
 810145c:	9202      	str	r2, [sp, #8]
 810145e:	2201      	movs	r2, #1
 8101460:	9201      	str	r2, [sp, #4]
 8101462:	9300      	str	r3, [sp, #0]
 8101464:	2301      	movs	r3, #1
 8101466:	223d      	movs	r2, #61	@ 0x3d
 8101468:	f005 f91e 	bl	81066a8 <HAL_I2C_Mem_Write>
		HAL_Delay(20);
 810146c:	2014      	movs	r0, #20
 810146e:	f002 f9a7 	bl	81037c0 <HAL_Delay>
	}
}
 8101472:	bf00      	nop
 8101474:	3710      	adds	r7, #16
 8101476:	46bd      	mov	sp, r7
 8101478:	bd80      	pop	{r7, pc}
	...

0810147c <BNO055_SAVE_HSEM>:

void BNO055_SAVE_HSEM(BNO055_t *bno){
 810147c:	b580      	push	{r7, lr}
 810147e:	b082      	sub	sp, #8
 8101480:	af00      	add	r7, sp, #0
 8101482:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 8101484:	2001      	movs	r0, #1
 8101486:	f004 fffb 	bl	8106480 <HAL_HSEM_FastTake>
 810148a:	4603      	mov	r3, r0
 810148c:	2b00      	cmp	r3, #0
 810148e:	d175      	bne.n	810157c <BNO055_SAVE_HSEM+0x100>
		SRAM4_BNO055->Data[1] = bno->quat.x;
 8101490:	493c      	ldr	r1, [pc, #240]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8101498:	e9c1 2304 	strd	r2, r3, [r1, #16]
		SRAM4_BNO055->Data[2] = bno->quat.y;
 810149c:	4939      	ldr	r1, [pc, #228]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 81014a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		SRAM4_BNO055->Data[3] = bno->quat.z;
 81014a8:	4936      	ldr	r1, [pc, #216]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 81014b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
		SRAM4_BNO055->Data[4] = bno->quat.w;
 81014b4:	4933      	ldr	r1, [pc, #204]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 81014bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

		SRAM4_BNO055->Data[5] = bno->lin_acc.x;
 81014c0:	4930      	ldr	r1, [pc, #192]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014c2:	687b      	ldr	r3, [r7, #4]
 81014c4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 81014c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		SRAM4_BNO055->Data[6] = bno->lin_acc.y;
 81014cc:	492d      	ldr	r1, [pc, #180]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 81014d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		SRAM4_BNO055->Data[7] = bno->lin_acc.z;
 81014d8:	492a      	ldr	r1, [pc, #168]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 81014e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

		SRAM4_BNO055->Data[8] = bno->gyro.x;
 81014e4:	4927      	ldr	r1, [pc, #156]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 81014ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		SRAM4_BNO055->Data[9] = bno->gyro.y;
 81014f0:	4924      	ldr	r1, [pc, #144]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 81014f8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		SRAM4_BNO055->Data[10] = bno->gyro.z;
 81014fc:	4921      	ldr	r1, [pc, #132]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8101504:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

		SRAM4_BNO055->Data[11] = bno->mag.x;
 8101508:	491e      	ldr	r1, [pc, #120]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8101510:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		SRAM4_BNO055->Data[12] = bno->mag.y;
 8101514:	491b      	ldr	r1, [pc, #108]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 810151c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		SRAM4_BNO055->Data[13] = bno->mag.z;
 8101520:	4918      	ldr	r1, [pc, #96]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8101528:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

		SRAM4_BNO055->Data[14] = bno->accel.x;
 810152c:	4915      	ldr	r1, [pc, #84]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 810152e:	687b      	ldr	r3, [r7, #4]
 8101530:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8101534:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		SRAM4_BNO055->Data[15] = bno->accel.y;
 8101538:	4912      	ldr	r1, [pc, #72]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 810153a:	687b      	ldr	r3, [r7, #4]
 810153c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8101540:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		SRAM4_BNO055->Data[16] = bno->accel.z;
 8101544:	490f      	ldr	r1, [pc, #60]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 8101546:	687b      	ldr	r3, [r7, #4]
 8101548:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 810154c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

		SRAM4_BNO055->Data[17] = bno->euler.roll;
 8101550:	490c      	ldr	r1, [pc, #48]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8101558:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		SRAM4_BNO055->Data[18] = bno->euler.pitch;
 810155c:	4909      	ldr	r1, [pc, #36]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 810155e:	687b      	ldr	r3, [r7, #4]
 8101560:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8101564:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
		SRAM4_BNO055->Data[19] = bno->euler.yaw;
 8101568:	4906      	ldr	r1, [pc, #24]	@ (8101584 <BNO055_SAVE_HSEM+0x108>)
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8101570:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0


		HAL_HSEM_Release(HSEM_ID_1,0);
 8101574:	2100      	movs	r1, #0
 8101576:	2001      	movs	r0, #1
 8101578:	f004 ff9c 	bl	81064b4 <HAL_HSEM_Release>
	}
}
 810157c:	bf00      	nop
 810157e:	3708      	adds	r7, #8
 8101580:	46bd      	mov	sp, r7
 8101582:	bd80      	pop	{r7, pc}
 8101584:	38002000 	.word	0x38002000

08101588 <BNO086_Initialization>:
uint8_t accuracyAccel;
uint8_t accuracyGyro;
uint8_t accuracyMag;

int BNO086_Initialization(BNO086_t *bno)
{
 8101588:	b580      	push	{r7, lr}
 810158a:	b082      	sub	sp, #8
 810158c:	af00      	add	r7, sp, #0
 810158e:	6078      	str	r0, [r7, #4]

	CHIP_DESELECT(BNO086);
 8101590:	2201      	movs	r2, #1
 8101592:	2120      	movs	r1, #32
 8101594:	4827      	ldr	r0, [pc, #156]	@ (8101634 <BNO086_Initialization+0xac>)
 8101596:	f004 ff59 	bl	810644c <HAL_GPIO_WritePin>
	WAKE_HIGH();
 810159a:	2201      	movs	r2, #1
 810159c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81015a0:	4825      	ldr	r0, [pc, #148]	@ (8101638 <BNO086_Initialization+0xb0>)
 81015a2:	f004 ff53 	bl	810644c <HAL_GPIO_WritePin>
	RESET_HIGH();
 81015a6:	2201      	movs	r2, #1
 81015a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81015ac:	4822      	ldr	r0, [pc, #136]	@ (8101638 <BNO086_Initialization+0xb0>)
 81015ae:	f004 ff4d 	bl	810644c <HAL_GPIO_WritePin>

	CHIP_DESELECT(BNO086);
 81015b2:	2201      	movs	r2, #1
 81015b4:	2120      	movs	r1, #32
 81015b6:	481f      	ldr	r0, [pc, #124]	@ (8101634 <BNO086_Initialization+0xac>)
 81015b8:	f004 ff48 	bl	810644c <HAL_GPIO_WritePin>

	//Configure the BNO086 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 81015bc:	2201      	movs	r2, #1
 81015be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81015c2:	481d      	ldr	r0, [pc, #116]	@ (8101638 <BNO086_Initialization+0xb0>)
 81015c4:	f004 ff42 	bl	810644c <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO086
 81015c8:	2200      	movs	r2, #0
 81015ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81015ce:	481a      	ldr	r0, [pc, #104]	@ (8101638 <BNO086_Initialization+0xb0>)
 81015d0:	f004 ff3c 	bl	810644c <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 81015d4:	20c8      	movs	r0, #200	@ 0xc8
 81015d6:	f002 f8f3 	bl	81037c0 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 81015da:	2201      	movs	r2, #1
 81015dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81015e0:	4815      	ldr	r0, [pc, #84]	@ (8101638 <BNO086_Initialization+0xb0>)
 81015e2:	f004 ff33 	bl	810644c <HAL_GPIO_WritePin>

	BNO086_waitForSPI(); //Wait until INT pin goes low.
 81015e6:	f000 fd15 	bl	8102014 <BNO086_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO086 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO086_waitForSPI(); //Wait for assertion of INT before reading advert message.
 81015ea:	f000 fd13 	bl	8102014 <BNO086_waitForSPI>
	BNO086_receivePacket();
 81015ee:	f000 fd2f 	bl	8102050 <BNO086_receivePacket>

	//The BNO086 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO086_waitForSPI();  //Wait for assertion of INT before reading Init response
 81015f2:	f000 fd0f 	bl	8102014 <BNO086_waitForSPI>
	BNO086_receivePacket();
 81015f6:	f000 fd2b 	bl	8102050 <BNO086_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 81015fa:	4b10      	ldr	r3, [pc, #64]	@ (810163c <BNO086_Initialization+0xb4>)
 81015fc:	22f9      	movs	r2, #249	@ 0xf9
 81015fe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8101600:	4b0e      	ldr	r3, [pc, #56]	@ (810163c <BNO086_Initialization+0xb4>)
 8101602:	2200      	movs	r2, #0
 8101604:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO086_sendPacket(CHANNEL_CONTROL, 2);
 8101606:	2102      	movs	r1, #2
 8101608:	2002      	movs	r0, #2
 810160a:	f000 fd91 	bl	8102130 <BNO086_sendPacket>

	//Now we wait for response
	BNO086_waitForSPI();
 810160e:	f000 fd01 	bl	8102014 <BNO086_waitForSPI>
	if (BNO086_receivePacket() == 1)
 8101612:	f000 fd1d 	bl	8102050 <BNO086_receivePacket>
 8101616:	4603      	mov	r3, r0
 8101618:	2b01      	cmp	r3, #1
 810161a:	d105      	bne.n	8101628 <BNO086_Initialization+0xa0>
	{
//		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 810161c:	4b07      	ldr	r3, [pc, #28]	@ (810163c <BNO086_Initialization+0xb4>)
 810161e:	781b      	ldrb	r3, [r3, #0]
 8101620:	2bf8      	cmp	r3, #248	@ 0xf8
 8101622:	d101      	bne.n	8101628 <BNO086_Initialization+0xa0>
		{
//			printf("BNO086 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
			return (0);
 8101624:	2300      	movs	r3, #0
 8101626:	e000      	b.n	810162a <BNO086_Initialization+0xa2>
		}// Sensor OK
	}

//	printf("BNO086 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
	return (1); //Something went wrong
 8101628:	2301      	movs	r3, #1
}
 810162a:	4618      	mov	r0, r3
 810162c:	3708      	adds	r7, #8
 810162e:	46bd      	mov	sp, r7
 8101630:	bd80      	pop	{r7, pc}
 8101632:	bf00      	nop
 8101634:	58020400 	.word	0x58020400
 8101638:	58020c00 	.word	0x58020c00
 810163c:	100000b0 	.word	0x100000b0

08101640 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data) // Todo
{
 8101640:	b580      	push	{r7, lr}
 8101642:	b084      	sub	sp, #16
 8101644:	af02      	add	r7, sp, #8
 8101646:	4603      	mov	r3, r0
 8101648:	71fb      	strb	r3, [r7, #7]
//	CHIP_SELECT(BNO086);

    HAL_SPI_TransmitReceive(&hspi1, &data, &receivedData, 1, HAL_MAX_DELAY);
 810164a:	1df9      	adds	r1, r7, #7
 810164c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8101650:	9300      	str	r3, [sp, #0]
 8101652:	2301      	movs	r3, #1
 8101654:	4a04      	ldr	r2, [pc, #16]	@ (8101668 <SPI2_SendByte+0x28>)
 8101656:	4805      	ldr	r0, [pc, #20]	@ (810166c <SPI2_SendByte+0x2c>)
 8101658:	f009 fb0a 	bl	810ac70 <HAL_SPI_TransmitReceive>

    return receivedData;
 810165c:	4b02      	ldr	r3, [pc, #8]	@ (8101668 <SPI2_SendByte+0x28>)
 810165e:	781b      	ldrb	r3, [r3, #0]
}
 8101660:	4618      	mov	r0, r3
 8101662:	3708      	adds	r7, #8
 8101664:	46bd      	mov	sp, r7
 8101666:	bd80      	pop	{r7, pc}
 8101668:	10000175 	.word	0x10000175
 810166c:	10000400 	.word	0x10000400

08101670 <BNO086_dataAvailable>:


//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO086_dataAvailable(void)
{
 8101670:	b580      	push	{r7, lr}
 8101672:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO086_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO086_Arduino_Library/issues/13

	if (HAL_GPIO_ReadPin(INT_GPIO_Port, INT_Pin) == 1)
 8101674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8101678:	4811      	ldr	r0, [pc, #68]	@ (81016c0 <BNO086_dataAvailable+0x50>)
 810167a:	f004 fecf 	bl	810641c <HAL_GPIO_ReadPin>
 810167e:	4603      	mov	r3, r0
 8101680:	2b01      	cmp	r3, #1
 8101682:	d101      	bne.n	8101688 <BNO086_dataAvailable+0x18>
		return (0);
 8101684:	2300      	movs	r3, #0
 8101686:	e019      	b.n	81016bc <BNO086_dataAvailable+0x4c>

	if (BNO086_receivePacket() == 1)
 8101688:	f000 fce2 	bl	8102050 <BNO086_receivePacket>
 810168c:	4603      	mov	r3, r0
 810168e:	2b01      	cmp	r3, #1
 8101690:	d113      	bne.n	81016ba <BNO086_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8101692:	4b0c      	ldr	r3, [pc, #48]	@ (81016c4 <BNO086_dataAvailable+0x54>)
 8101694:	789b      	ldrb	r3, [r3, #2]
 8101696:	2b03      	cmp	r3, #3
 8101698:	d107      	bne.n	81016aa <BNO086_dataAvailable+0x3a>
 810169a:	4b0b      	ldr	r3, [pc, #44]	@ (81016c8 <BNO086_dataAvailable+0x58>)
 810169c:	781b      	ldrb	r3, [r3, #0]
 810169e:	2bfb      	cmp	r3, #251	@ 0xfb
 81016a0:	d103      	bne.n	81016aa <BNO086_dataAvailable+0x3a>
		{
			BNO086_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 81016a2:	f000 f82f 	bl	8101704 <BNO086_parseInputReport>
			return (1);
 81016a6:	2301      	movs	r3, #1
 81016a8:	e008      	b.n	81016bc <BNO086_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 81016aa:	4b06      	ldr	r3, [pc, #24]	@ (81016c4 <BNO086_dataAvailable+0x54>)
 81016ac:	789b      	ldrb	r3, [r3, #2]
 81016ae:	2b02      	cmp	r3, #2
 81016b0:	d103      	bne.n	81016ba <BNO086_dataAvailable+0x4a>
		{
			BNO086_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 81016b2:	f000 f80b 	bl	81016cc <BNO086_parseCommandReport>
			return (1);
 81016b6:	2301      	movs	r3, #1
 81016b8:	e000      	b.n	81016bc <BNO086_dataAvailable+0x4c>
		}
	}
	return (0);
 81016ba:	2300      	movs	r3, #0
}
 81016bc:	4618      	mov	r0, r3
 81016be:	bd80      	pop	{r7, pc}
 81016c0:	58021800 	.word	0x58021800
 81016c4:	100000ac 	.word	0x100000ac
 81016c8:	100000b0 	.word	0x100000b0

081016cc <BNO086_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO086_parseCommandReport(void)
{
 81016cc:	b480      	push	{r7}
 81016ce:	b083      	sub	sp, #12
 81016d0:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 81016d2:	4b0a      	ldr	r3, [pc, #40]	@ (81016fc <BNO086_parseCommandReport+0x30>)
 81016d4:	781b      	ldrb	r3, [r3, #0]
 81016d6:	2bf1      	cmp	r3, #241	@ 0xf1
 81016d8:	d109      	bne.n	81016ee <BNO086_parseCommandReport+0x22>
	{
		//The BNO086 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 81016da:	4b08      	ldr	r3, [pc, #32]	@ (81016fc <BNO086_parseCommandReport+0x30>)
 81016dc:	789b      	ldrb	r3, [r3, #2]
 81016de:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 81016e0:	79fb      	ldrb	r3, [r7, #7]
 81016e2:	2b07      	cmp	r3, #7
 81016e4:	d103      	bne.n	81016ee <BNO086_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 81016e6:	4b05      	ldr	r3, [pc, #20]	@ (81016fc <BNO086_parseCommandReport+0x30>)
 81016e8:	795a      	ldrb	r2, [r3, #5]
 81016ea:	4b05      	ldr	r3, [pc, #20]	@ (8101700 <BNO086_parseCommandReport+0x34>)
 81016ec:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	// additional feature reports may be strung together. Parse them all.
}
 81016ee:	bf00      	nop
 81016f0:	370c      	adds	r7, #12
 81016f2:	46bd      	mov	sp, r7
 81016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f8:	4770      	bx	lr
 81016fa:	bf00      	nop
 81016fc:	100000b0 	.word	0x100000b0
 8101700:	10000174 	.word	0x10000174

08101704 <BNO086_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO086_parseInputReport(void)
{
 8101704:	b480      	push	{r7}
 8101706:	b087      	sub	sp, #28
 8101708:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 810170a:	4b98      	ldr	r3, [pc, #608]	@ (810196c <BNO086_parseInputReport+0x268>)
 810170c:	785b      	ldrb	r3, [r3, #1]
 810170e:	021b      	lsls	r3, r3, #8
 8101710:	b21a      	sxth	r2, r3
 8101712:	4b96      	ldr	r3, [pc, #600]	@ (810196c <BNO086_parseInputReport+0x268>)
 8101714:	781b      	ldrb	r3, [r3, #0]
 8101716:	b21b      	sxth	r3, r3
 8101718:	4313      	orrs	r3, r2
 810171a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 810171c:	8a3b      	ldrh	r3, [r7, #16]
 810171e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8101722:	823b      	strh	r3, [r7, #16]
	//Ignore it for now.  catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8101724:	8a3b      	ldrh	r3, [r7, #16]
 8101726:	3b04      	subs	r3, #4
 8101728:	b29b      	uxth	r3, r3
 810172a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 810172c:	4b90      	ldr	r3, [pc, #576]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 810172e:	791b      	ldrb	r3, [r3, #4]
 8101730:	061a      	lsls	r2, r3, #24
 8101732:	4b8f      	ldr	r3, [pc, #572]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101734:	78db      	ldrb	r3, [r3, #3]
 8101736:	041b      	lsls	r3, r3, #16
 8101738:	431a      	orrs	r2, r3
 810173a:	4b8d      	ldr	r3, [pc, #564]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 810173c:	789b      	ldrb	r3, [r3, #2]
 810173e:	021b      	lsls	r3, r3, #8
 8101740:	4313      	orrs	r3, r2
 8101742:	4a8b      	ldr	r2, [pc, #556]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101744:	7852      	ldrb	r2, [r2, #1]
 8101746:	4313      	orrs	r3, r2
 8101748:	4a8a      	ldr	r2, [pc, #552]	@ (8101974 <BNO086_parseInputReport+0x270>)
 810174a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 810174c:	4b88      	ldr	r3, [pc, #544]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 810174e:	79db      	ldrb	r3, [r3, #7]
 8101750:	f003 0303 	and.w	r3, r3, #3
 8101754:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8101756:	4b86      	ldr	r3, [pc, #536]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101758:	7a9b      	ldrb	r3, [r3, #10]
 810175a:	021b      	lsls	r3, r3, #8
 810175c:	b21a      	sxth	r2, r3
 810175e:	4b84      	ldr	r3, [pc, #528]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101760:	7a5b      	ldrb	r3, [r3, #9]
 8101762:	b21b      	sxth	r3, r3
 8101764:	4313      	orrs	r3, r2
 8101766:	b21b      	sxth	r3, r3
 8101768:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 810176a:	4b81      	ldr	r3, [pc, #516]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 810176c:	7b1b      	ldrb	r3, [r3, #12]
 810176e:	021b      	lsls	r3, r3, #8
 8101770:	b21a      	sxth	r2, r3
 8101772:	4b7f      	ldr	r3, [pc, #508]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101774:	7adb      	ldrb	r3, [r3, #11]
 8101776:	b21b      	sxth	r3, r3
 8101778:	4313      	orrs	r3, r2
 810177a:	b21b      	sxth	r3, r3
 810177c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 810177e:	4b7c      	ldr	r3, [pc, #496]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101780:	7b9b      	ldrb	r3, [r3, #14]
 8101782:	021b      	lsls	r3, r3, #8
 8101784:	b21a      	sxth	r2, r3
 8101786:	4b7a      	ldr	r3, [pc, #488]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101788:	7b5b      	ldrb	r3, [r3, #13]
 810178a:	b21b      	sxth	r3, r3
 810178c:	4313      	orrs	r3, r2
 810178e:	b21b      	sxth	r3, r3
 8101790:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8101792:	2300      	movs	r3, #0
 8101794:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8101796:	2300      	movs	r3, #0
 8101798:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 810179a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 810179e:	2b0e      	cmp	r3, #14
 81017a0:	dd09      	ble.n	81017b6 <BNO086_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 81017a2:	4b73      	ldr	r3, [pc, #460]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 81017a4:	7c1b      	ldrb	r3, [r3, #16]
 81017a6:	021b      	lsls	r3, r3, #8
 81017a8:	b21a      	sxth	r2, r3
 81017aa:	4b71      	ldr	r3, [pc, #452]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 81017ac:	7bdb      	ldrb	r3, [r3, #15]
 81017ae:	b21b      	sxth	r3, r3
 81017b0:	4313      	orrs	r3, r2
 81017b2:	b21b      	sxth	r3, r3
 81017b4:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 81017b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 81017ba:	2b10      	cmp	r3, #16
 81017bc:	dd09      	ble.n	81017d2 <BNO086_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 81017be:	4b6c      	ldr	r3, [pc, #432]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 81017c0:	7c9b      	ldrb	r3, [r3, #18]
 81017c2:	021b      	lsls	r3, r3, #8
 81017c4:	b21a      	sxth	r2, r3
 81017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 81017c8:	7c5b      	ldrb	r3, [r3, #17]
 81017ca:	b21b      	sxth	r3, r3
 81017cc:	4313      	orrs	r3, r2
 81017ce:	b21b      	sxth	r3, r3
 81017d0:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 81017d2:	4b67      	ldr	r3, [pc, #412]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 81017d4:	795b      	ldrb	r3, [r3, #5]
 81017d6:	2b1e      	cmp	r3, #30
 81017d8:	dc46      	bgt.n	8101868 <BNO086_parseInputReport+0x164>
 81017da:	2b00      	cmp	r3, #0
 81017dc:	f340 80bf 	ble.w	810195e <BNO086_parseInputReport+0x25a>
 81017e0:	3b01      	subs	r3, #1
 81017e2:	2b1d      	cmp	r3, #29
 81017e4:	f200 80bb 	bhi.w	810195e <BNO086_parseInputReport+0x25a>
 81017e8:	a201      	add	r2, pc, #4	@ (adr r2, 81017f0 <BNO086_parseInputReport+0xec>)
 81017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017ee:	bf00      	nop
 81017f0:	0810186f 	.word	0x0810186f
 81017f4:	081018a7 	.word	0x081018a7
 81017f8:	081018c3 	.word	0x081018c3
 81017fc:	0810188b 	.word	0x0810188b
 8101800:	081018df 	.word	0x081018df
 8101804:	0810195f 	.word	0x0810195f
 8101808:	0810195f 	.word	0x0810195f
 810180c:	081018df 	.word	0x081018df
 8101810:	0810195f 	.word	0x0810195f
 8101814:	0810195f 	.word	0x0810195f
 8101818:	0810195f 	.word	0x0810195f
 810181c:	0810195f 	.word	0x0810195f
 8101820:	0810195f 	.word	0x0810195f
 8101824:	0810195f 	.word	0x0810195f
 8101828:	0810195f 	.word	0x0810195f
 810182c:	0810195f 	.word	0x0810195f
 8101830:	08101907 	.word	0x08101907
 8101834:	0810195f 	.word	0x0810195f
 8101838:	0810190f 	.word	0x0810190f
 810183c:	0810195f 	.word	0x0810195f
 8101840:	0810195f 	.word	0x0810195f
 8101844:	0810195f 	.word	0x0810195f
 8101848:	0810195f 	.word	0x0810195f
 810184c:	0810195f 	.word	0x0810195f
 8101850:	0810195f 	.word	0x0810195f
 8101854:	0810195f 	.word	0x0810195f
 8101858:	0810195f 	.word	0x0810195f
 810185c:	0810195f 	.word	0x0810195f
 8101860:	0810195f 	.word	0x0810195f
 8101864:	08101919 	.word	0x08101919
 8101868:	2bf1      	cmp	r3, #241	@ 0xf1
 810186a:	d06d      	beq.n	8101948 <BNO086_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	// additional feature reports may be strung together. Parse them all.
}
 810186c:	e077      	b.n	810195e <BNO086_parseInputReport+0x25a>
			accelAccuracy = status;
 810186e:	7bfb      	ldrb	r3, [r7, #15]
 8101870:	b29a      	uxth	r2, r3
 8101872:	4b41      	ldr	r3, [pc, #260]	@ (8101978 <BNO086_parseInputReport+0x274>)
 8101874:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8101876:	4a41      	ldr	r2, [pc, #260]	@ (810197c <BNO086_parseInputReport+0x278>)
 8101878:	89bb      	ldrh	r3, [r7, #12]
 810187a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 810187c:	4a40      	ldr	r2, [pc, #256]	@ (8101980 <BNO086_parseInputReport+0x27c>)
 810187e:	897b      	ldrh	r3, [r7, #10]
 8101880:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8101882:	4a40      	ldr	r2, [pc, #256]	@ (8101984 <BNO086_parseInputReport+0x280>)
 8101884:	893b      	ldrh	r3, [r7, #8]
 8101886:	8013      	strh	r3, [r2, #0]
			break;
 8101888:	e069      	b.n	810195e <BNO086_parseInputReport+0x25a>
			accelLinAccuracy = status;
 810188a:	7bfb      	ldrb	r3, [r7, #15]
 810188c:	b29a      	uxth	r2, r3
 810188e:	4b3e      	ldr	r3, [pc, #248]	@ (8101988 <BNO086_parseInputReport+0x284>)
 8101890:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8101892:	4a3e      	ldr	r2, [pc, #248]	@ (810198c <BNO086_parseInputReport+0x288>)
 8101894:	89bb      	ldrh	r3, [r7, #12]
 8101896:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8101898:	4a3d      	ldr	r2, [pc, #244]	@ (8101990 <BNO086_parseInputReport+0x28c>)
 810189a:	897b      	ldrh	r3, [r7, #10]
 810189c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 810189e:	4a3d      	ldr	r2, [pc, #244]	@ (8101994 <BNO086_parseInputReport+0x290>)
 81018a0:	893b      	ldrh	r3, [r7, #8]
 81018a2:	8013      	strh	r3, [r2, #0]
			break;
 81018a4:	e05b      	b.n	810195e <BNO086_parseInputReport+0x25a>
			gyroAccuracy = status;
 81018a6:	7bfb      	ldrb	r3, [r7, #15]
 81018a8:	b29a      	uxth	r2, r3
 81018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8101998 <BNO086_parseInputReport+0x294>)
 81018ac:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 81018ae:	4a3b      	ldr	r2, [pc, #236]	@ (810199c <BNO086_parseInputReport+0x298>)
 81018b0:	89bb      	ldrh	r3, [r7, #12]
 81018b2:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 81018b4:	4a3a      	ldr	r2, [pc, #232]	@ (81019a0 <BNO086_parseInputReport+0x29c>)
 81018b6:	897b      	ldrh	r3, [r7, #10]
 81018b8:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 81018ba:	4a3a      	ldr	r2, [pc, #232]	@ (81019a4 <BNO086_parseInputReport+0x2a0>)
 81018bc:	893b      	ldrh	r3, [r7, #8]
 81018be:	8013      	strh	r3, [r2, #0]
			break;
 81018c0:	e04d      	b.n	810195e <BNO086_parseInputReport+0x25a>
			magAccuracy = status;
 81018c2:	7bfb      	ldrb	r3, [r7, #15]
 81018c4:	b29a      	uxth	r2, r3
 81018c6:	4b38      	ldr	r3, [pc, #224]	@ (81019a8 <BNO086_parseInputReport+0x2a4>)
 81018c8:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 81018ca:	4a38      	ldr	r2, [pc, #224]	@ (81019ac <BNO086_parseInputReport+0x2a8>)
 81018cc:	89bb      	ldrh	r3, [r7, #12]
 81018ce:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 81018d0:	4a37      	ldr	r2, [pc, #220]	@ (81019b0 <BNO086_parseInputReport+0x2ac>)
 81018d2:	897b      	ldrh	r3, [r7, #10]
 81018d4:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 81018d6:	4a37      	ldr	r2, [pc, #220]	@ (81019b4 <BNO086_parseInputReport+0x2b0>)
 81018d8:	893b      	ldrh	r3, [r7, #8]
 81018da:	8013      	strh	r3, [r2, #0]
			break;
 81018dc:	e03f      	b.n	810195e <BNO086_parseInputReport+0x25a>
			quatAccuracy = status;
 81018de:	7bfb      	ldrb	r3, [r7, #15]
 81018e0:	b29a      	uxth	r2, r3
 81018e2:	4b35      	ldr	r3, [pc, #212]	@ (81019b8 <BNO086_parseInputReport+0x2b4>)
 81018e4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 81018e6:	4a35      	ldr	r2, [pc, #212]	@ (81019bc <BNO086_parseInputReport+0x2b8>)
 81018e8:	89bb      	ldrh	r3, [r7, #12]
 81018ea:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 81018ec:	4a34      	ldr	r2, [pc, #208]	@ (81019c0 <BNO086_parseInputReport+0x2bc>)
 81018ee:	897b      	ldrh	r3, [r7, #10]
 81018f0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 81018f2:	4a34      	ldr	r2, [pc, #208]	@ (81019c4 <BNO086_parseInputReport+0x2c0>)
 81018f4:	893b      	ldrh	r3, [r7, #8]
 81018f6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 81018f8:	4a33      	ldr	r2, [pc, #204]	@ (81019c8 <BNO086_parseInputReport+0x2c4>)
 81018fa:	8afb      	ldrh	r3, [r7, #22]
 81018fc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 81018fe:	4a33      	ldr	r2, [pc, #204]	@ (81019cc <BNO086_parseInputReport+0x2c8>)
 8101900:	8abb      	ldrh	r3, [r7, #20]
 8101902:	8013      	strh	r3, [r2, #0]
			break;
 8101904:	e02b      	b.n	810195e <BNO086_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8101906:	4a32      	ldr	r2, [pc, #200]	@ (81019d0 <BNO086_parseInputReport+0x2cc>)
 8101908:	893b      	ldrh	r3, [r7, #8]
 810190a:	8013      	strh	r3, [r2, #0]
			break;
 810190c:	e027      	b.n	810195e <BNO086_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 810190e:	4b18      	ldr	r3, [pc, #96]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101910:	7a5a      	ldrb	r2, [r3, #9]
 8101912:	4b30      	ldr	r3, [pc, #192]	@ (81019d4 <BNO086_parseInputReport+0x2d0>)
 8101914:	701a      	strb	r2, [r3, #0]
			break;
 8101916:	e022      	b.n	810195e <BNO086_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8101918:	4b15      	ldr	r3, [pc, #84]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 810191a:	7a9a      	ldrb	r2, [r3, #10]
 810191c:	4b2e      	ldr	r3, [pc, #184]	@ (81019d8 <BNO086_parseInputReport+0x2d4>)
 810191e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9.  - bring in array size
 8101920:	2300      	movs	r3, #0
 8101922:	74fb      	strb	r3, [r7, #19]
 8101924:	e00c      	b.n	8101940 <BNO086_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8101926:	7cfb      	ldrb	r3, [r7, #19]
 8101928:	f103 020b 	add.w	r2, r3, #11
 810192c:	4b2b      	ldr	r3, [pc, #172]	@ (81019dc <BNO086_parseInputReport+0x2d8>)
 810192e:	6819      	ldr	r1, [r3, #0]
 8101930:	7cfb      	ldrb	r3, [r7, #19]
 8101932:	440b      	add	r3, r1
 8101934:	490e      	ldr	r1, [pc, #56]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101936:	5c8a      	ldrb	r2, [r1, r2]
 8101938:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9.  - bring in array size
 810193a:	7cfb      	ldrb	r3, [r7, #19]
 810193c:	3301      	adds	r3, #1
 810193e:	74fb      	strb	r3, [r7, #19]
 8101940:	7cfb      	ldrb	r3, [r7, #19]
 8101942:	2b08      	cmp	r3, #8
 8101944:	d9ef      	bls.n	8101926 <BNO086_parseInputReport+0x222>
			break;
 8101946:	e00a      	b.n	810195e <BNO086_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8101948:	4b09      	ldr	r3, [pc, #36]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 810194a:	79db      	ldrb	r3, [r3, #7]
 810194c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 810194e:	79fb      	ldrb	r3, [r7, #7]
 8101950:	2b07      	cmp	r3, #7
 8101952:	d103      	bne.n	810195c <BNO086_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8101954:	4b06      	ldr	r3, [pc, #24]	@ (8101970 <BNO086_parseInputReport+0x26c>)
 8101956:	7a9a      	ldrb	r2, [r3, #10]
 8101958:	4b21      	ldr	r3, [pc, #132]	@ (81019e0 <BNO086_parseInputReport+0x2dc>)
 810195a:	701a      	strb	r2, [r3, #0]
			break;
 810195c:	bf00      	nop
}
 810195e:	bf00      	nop
 8101960:	371c      	adds	r7, #28
 8101962:	46bd      	mov	sp, r7
 8101964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101968:	4770      	bx	lr
 810196a:	bf00      	nop
 810196c:	100000ac 	.word	0x100000ac
 8101970:	100000b0 	.word	0x100000b0
 8101974:	10000168 	.word	0x10000168
 8101978:	1000013e 	.word	0x1000013e
 810197c:	10000138 	.word	0x10000138
 8101980:	1000013a 	.word	0x1000013a
 8101984:	1000013c 	.word	0x1000013c
 8101988:	10000146 	.word	0x10000146
 810198c:	10000140 	.word	0x10000140
 8101990:	10000142 	.word	0x10000142
 8101994:	10000144 	.word	0x10000144
 8101998:	1000014e 	.word	0x1000014e
 810199c:	10000148 	.word	0x10000148
 81019a0:	1000014a 	.word	0x1000014a
 81019a4:	1000014c 	.word	0x1000014c
 81019a8:	10000156 	.word	0x10000156
 81019ac:	10000150 	.word	0x10000150
 81019b0:	10000152 	.word	0x10000152
 81019b4:	10000154 	.word	0x10000154
 81019b8:	10000162 	.word	0x10000162
 81019bc:	10000158 	.word	0x10000158
 81019c0:	1000015a 	.word	0x1000015a
 81019c4:	1000015c 	.word	0x1000015c
 81019c8:	1000015e 	.word	0x1000015e
 81019cc:	10000160 	.word	0x10000160
 81019d0:	10000164 	.word	0x10000164
 81019d4:	1000016c 	.word	0x1000016c
 81019d8:	1000016d 	.word	0x1000016d
 81019dc:	10000170 	.word	0x10000170
 81019e0:	10000174 	.word	0x10000174

081019e4 <BNO086_getQuatI>:

//Return the rotation vector quaternion I
float BNO086_getQuatI()
{
 81019e4:	b580      	push	{r7, lr}
 81019e6:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatI, rotationVector_Q1);
 81019e8:	4b07      	ldr	r3, [pc, #28]	@ (8101a08 <BNO086_getQuatI+0x24>)
 81019ea:	881b      	ldrh	r3, [r3, #0]
 81019ec:	b21b      	sxth	r3, r3
 81019ee:	4a07      	ldr	r2, [pc, #28]	@ (8101a0c <BNO086_getQuatI+0x28>)
 81019f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 81019f4:	b2d2      	uxtb	r2, r2
 81019f6:	4611      	mov	r1, r2
 81019f8:	4618      	mov	r0, r3
 81019fa:	f000 f983 	bl	8101d04 <BNO086_qToFloat>
 81019fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8101a02:	eeb0 0a67 	vmov.f32	s0, s15
 8101a06:	bd80      	pop	{r7, pc}
 8101a08:	10000158 	.word	0x10000158
 8101a0c:	10000016 	.word	0x10000016

08101a10 <BNO086_getQuatJ>:

//Return the rotation vector quaternion J
float BNO086_getQuatJ()
{
 8101a10:	b580      	push	{r7, lr}
 8101a12:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatJ, rotationVector_Q1);
 8101a14:	4b07      	ldr	r3, [pc, #28]	@ (8101a34 <BNO086_getQuatJ+0x24>)
 8101a16:	881b      	ldrh	r3, [r3, #0]
 8101a18:	b21b      	sxth	r3, r3
 8101a1a:	4a07      	ldr	r2, [pc, #28]	@ (8101a38 <BNO086_getQuatJ+0x28>)
 8101a1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101a20:	b2d2      	uxtb	r2, r2
 8101a22:	4611      	mov	r1, r2
 8101a24:	4618      	mov	r0, r3
 8101a26:	f000 f96d 	bl	8101d04 <BNO086_qToFloat>
 8101a2a:	eef0 7a40 	vmov.f32	s15, s0
}
 8101a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8101a32:	bd80      	pop	{r7, pc}
 8101a34:	1000015a 	.word	0x1000015a
 8101a38:	10000016 	.word	0x10000016

08101a3c <BNO086_getQuatK>:

//Return the rotation vector quaternion K
float BNO086_getQuatK()
{
 8101a3c:	b580      	push	{r7, lr}
 8101a3e:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatK, rotationVector_Q1);
 8101a40:	4b07      	ldr	r3, [pc, #28]	@ (8101a60 <BNO086_getQuatK+0x24>)
 8101a42:	881b      	ldrh	r3, [r3, #0]
 8101a44:	b21b      	sxth	r3, r3
 8101a46:	4a07      	ldr	r2, [pc, #28]	@ (8101a64 <BNO086_getQuatK+0x28>)
 8101a48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101a4c:	b2d2      	uxtb	r2, r2
 8101a4e:	4611      	mov	r1, r2
 8101a50:	4618      	mov	r0, r3
 8101a52:	f000 f957 	bl	8101d04 <BNO086_qToFloat>
 8101a56:	eef0 7a40 	vmov.f32	s15, s0
}
 8101a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8101a5e:	bd80      	pop	{r7, pc}
 8101a60:	1000015c 	.word	0x1000015c
 8101a64:	10000016 	.word	0x10000016

08101a68 <BNO086_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO086_getQuatReal()
{
 8101a68:	b580      	push	{r7, lr}
 8101a6a:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatReal, rotationVector_Q1);
 8101a6c:	4b07      	ldr	r3, [pc, #28]	@ (8101a8c <BNO086_getQuatReal+0x24>)
 8101a6e:	881b      	ldrh	r3, [r3, #0]
 8101a70:	b21b      	sxth	r3, r3
 8101a72:	4a07      	ldr	r2, [pc, #28]	@ (8101a90 <BNO086_getQuatReal+0x28>)
 8101a74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101a78:	b2d2      	uxtb	r2, r2
 8101a7a:	4611      	mov	r1, r2
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	f000 f941 	bl	8101d04 <BNO086_qToFloat>
 8101a82:	eef0 7a40 	vmov.f32	s15, s0
}
 8101a86:	eeb0 0a67 	vmov.f32	s0, s15
 8101a8a:	bd80      	pop	{r7, pc}
 8101a8c:	1000015e 	.word	0x1000015e
 8101a90:	10000016 	.word	0x10000016

08101a94 <BNO086_getQuatAccuracy>:
	return BNO086_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO086_getQuatAccuracy()
{
 8101a94:	b480      	push	{r7}
 8101a96:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8101a98:	4b03      	ldr	r3, [pc, #12]	@ (8101aa8 <BNO086_getQuatAccuracy+0x14>)
 8101a9a:	881b      	ldrh	r3, [r3, #0]
 8101a9c:	b2db      	uxtb	r3, r3
}
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	46bd      	mov	sp, r7
 8101aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa6:	4770      	bx	lr
 8101aa8:	10000162 	.word	0x10000162

08101aac <BNO086_getAccelX>:

//Return the acceleration component
float BNO086_getAccelX()
{
 8101aac:	b580      	push	{r7, lr}
 8101aae:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawAccelX, accelerometer_Q1);
 8101ab0:	4b07      	ldr	r3, [pc, #28]	@ (8101ad0 <BNO086_getAccelX+0x24>)
 8101ab2:	881b      	ldrh	r3, [r3, #0]
 8101ab4:	b21b      	sxth	r3, r3
 8101ab6:	4a07      	ldr	r2, [pc, #28]	@ (8101ad4 <BNO086_getAccelX+0x28>)
 8101ab8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101abc:	b2d2      	uxtb	r2, r2
 8101abe:	4611      	mov	r1, r2
 8101ac0:	4618      	mov	r0, r3
 8101ac2:	f000 f91f 	bl	8101d04 <BNO086_qToFloat>
 8101ac6:	eef0 7a40 	vmov.f32	s15, s0
}
 8101aca:	eeb0 0a67 	vmov.f32	s0, s15
 8101ace:	bd80      	pop	{r7, pc}
 8101ad0:	10000138 	.word	0x10000138
 8101ad4:	10000018 	.word	0x10000018

08101ad8 <BNO086_getAccelY>:

//Return the acceleration component
float BNO086_getAccelY()
{
 8101ad8:	b580      	push	{r7, lr}
 8101ada:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawAccelY, accelerometer_Q1);
 8101adc:	4b07      	ldr	r3, [pc, #28]	@ (8101afc <BNO086_getAccelY+0x24>)
 8101ade:	881b      	ldrh	r3, [r3, #0]
 8101ae0:	b21b      	sxth	r3, r3
 8101ae2:	4a07      	ldr	r2, [pc, #28]	@ (8101b00 <BNO086_getAccelY+0x28>)
 8101ae4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101ae8:	b2d2      	uxtb	r2, r2
 8101aea:	4611      	mov	r1, r2
 8101aec:	4618      	mov	r0, r3
 8101aee:	f000 f909 	bl	8101d04 <BNO086_qToFloat>
 8101af2:	eef0 7a40 	vmov.f32	s15, s0
}
 8101af6:	eeb0 0a67 	vmov.f32	s0, s15
 8101afa:	bd80      	pop	{r7, pc}
 8101afc:	1000013a 	.word	0x1000013a
 8101b00:	10000018 	.word	0x10000018

08101b04 <BNO086_getAccelZ>:

//Return the acceleration component
float BNO086_getAccelZ()
{
 8101b04:	b580      	push	{r7, lr}
 8101b06:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawAccelZ, accelerometer_Q1);
 8101b08:	4b07      	ldr	r3, [pc, #28]	@ (8101b28 <BNO086_getAccelZ+0x24>)
 8101b0a:	881b      	ldrh	r3, [r3, #0]
 8101b0c:	b21b      	sxth	r3, r3
 8101b0e:	4a07      	ldr	r2, [pc, #28]	@ (8101b2c <BNO086_getAccelZ+0x28>)
 8101b10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101b14:	b2d2      	uxtb	r2, r2
 8101b16:	4611      	mov	r1, r2
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f000 f8f3 	bl	8101d04 <BNO086_qToFloat>
 8101b1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101b22:	eeb0 0a67 	vmov.f32	s0, s15
 8101b26:	bd80      	pop	{r7, pc}
 8101b28:	1000013c 	.word	0x1000013c
 8101b2c:	10000018 	.word	0x10000018

08101b30 <BNO086_getAccelAccuracy>:

//Return the acceleration component
uint8_t BNO086_getAccelAccuracy()
{
 8101b30:	b480      	push	{r7}
 8101b32:	af00      	add	r7, sp, #0
	return (accelAccuracy);
 8101b34:	4b03      	ldr	r3, [pc, #12]	@ (8101b44 <BNO086_getAccelAccuracy+0x14>)
 8101b36:	881b      	ldrh	r3, [r3, #0]
 8101b38:	b2db      	uxtb	r3, r3
}
 8101b3a:	4618      	mov	r0, r3
 8101b3c:	46bd      	mov	sp, r7
 8101b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b42:	4770      	bx	lr
 8101b44:	1000013e 	.word	0x1000013e

08101b48 <BNO086_getLinAccelX>:

// linear acceleration, i.e. minus gravity

//Return the acceleration component
float BNO086_getLinAccelX()
{
 8101b48:	b580      	push	{r7, lr}
 8101b4a:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawLinAccelX, linear_accelerometer_Q1);
 8101b4c:	4b07      	ldr	r3, [pc, #28]	@ (8101b6c <BNO086_getLinAccelX+0x24>)
 8101b4e:	881b      	ldrh	r3, [r3, #0]
 8101b50:	b21b      	sxth	r3, r3
 8101b52:	4a07      	ldr	r2, [pc, #28]	@ (8101b70 <BNO086_getLinAccelX+0x28>)
 8101b54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101b58:	b2d2      	uxtb	r2, r2
 8101b5a:	4611      	mov	r1, r2
 8101b5c:	4618      	mov	r0, r3
 8101b5e:	f000 f8d1 	bl	8101d04 <BNO086_qToFloat>
 8101b62:	eef0 7a40 	vmov.f32	s15, s0
}
 8101b66:	eeb0 0a67 	vmov.f32	s0, s15
 8101b6a:	bd80      	pop	{r7, pc}
 8101b6c:	10000140 	.word	0x10000140
 8101b70:	1000001a 	.word	0x1000001a

08101b74 <BNO086_getLinAccelY>:

//Return the acceleration component
float BNO086_getLinAccelY()
{
 8101b74:	b580      	push	{r7, lr}
 8101b76:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawLinAccelY, linear_accelerometer_Q1);
 8101b78:	4b07      	ldr	r3, [pc, #28]	@ (8101b98 <BNO086_getLinAccelY+0x24>)
 8101b7a:	881b      	ldrh	r3, [r3, #0]
 8101b7c:	b21b      	sxth	r3, r3
 8101b7e:	4a07      	ldr	r2, [pc, #28]	@ (8101b9c <BNO086_getLinAccelY+0x28>)
 8101b80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101b84:	b2d2      	uxtb	r2, r2
 8101b86:	4611      	mov	r1, r2
 8101b88:	4618      	mov	r0, r3
 8101b8a:	f000 f8bb 	bl	8101d04 <BNO086_qToFloat>
 8101b8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101b92:	eeb0 0a67 	vmov.f32	s0, s15
 8101b96:	bd80      	pop	{r7, pc}
 8101b98:	10000142 	.word	0x10000142
 8101b9c:	1000001a 	.word	0x1000001a

08101ba0 <BNO086_getLinAccelZ>:

//Return the acceleration component
float BNO086_getLinAccelZ()
{
 8101ba0:	b580      	push	{r7, lr}
 8101ba2:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawLinAccelZ, linear_accelerometer_Q1);
 8101ba4:	4b07      	ldr	r3, [pc, #28]	@ (8101bc4 <BNO086_getLinAccelZ+0x24>)
 8101ba6:	881b      	ldrh	r3, [r3, #0]
 8101ba8:	b21b      	sxth	r3, r3
 8101baa:	4a07      	ldr	r2, [pc, #28]	@ (8101bc8 <BNO086_getLinAccelZ+0x28>)
 8101bac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101bb0:	b2d2      	uxtb	r2, r2
 8101bb2:	4611      	mov	r1, r2
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	f000 f8a5 	bl	8101d04 <BNO086_qToFloat>
 8101bba:	eef0 7a40 	vmov.f32	s15, s0
}
 8101bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8101bc2:	bd80      	pop	{r7, pc}
 8101bc4:	10000144 	.word	0x10000144
 8101bc8:	1000001a 	.word	0x1000001a

08101bcc <BNO086_getGyroX>:
	return (accelLinAccuracy);
}

//Return the gyro component
float BNO086_getGyroX()
{
 8101bcc:	b580      	push	{r7, lr}
 8101bce:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawGyroX, gyro_Q1);
 8101bd0:	4b07      	ldr	r3, [pc, #28]	@ (8101bf0 <BNO086_getGyroX+0x24>)
 8101bd2:	881b      	ldrh	r3, [r3, #0]
 8101bd4:	b21b      	sxth	r3, r3
 8101bd6:	4a07      	ldr	r2, [pc, #28]	@ (8101bf4 <BNO086_getGyroX+0x28>)
 8101bd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101bdc:	b2d2      	uxtb	r2, r2
 8101bde:	4611      	mov	r1, r2
 8101be0:	4618      	mov	r0, r3
 8101be2:	f000 f88f 	bl	8101d04 <BNO086_qToFloat>
 8101be6:	eef0 7a40 	vmov.f32	s15, s0
}
 8101bea:	eeb0 0a67 	vmov.f32	s0, s15
 8101bee:	bd80      	pop	{r7, pc}
 8101bf0:	10000148 	.word	0x10000148
 8101bf4:	1000001c 	.word	0x1000001c

08101bf8 <BNO086_getGyroY>:

//Return the gyro component
float BNO086_getGyroY()
{
 8101bf8:	b580      	push	{r7, lr}
 8101bfa:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawGyroY, gyro_Q1);
 8101bfc:	4b07      	ldr	r3, [pc, #28]	@ (8101c1c <BNO086_getGyroY+0x24>)
 8101bfe:	881b      	ldrh	r3, [r3, #0]
 8101c00:	b21b      	sxth	r3, r3
 8101c02:	4a07      	ldr	r2, [pc, #28]	@ (8101c20 <BNO086_getGyroY+0x28>)
 8101c04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101c08:	b2d2      	uxtb	r2, r2
 8101c0a:	4611      	mov	r1, r2
 8101c0c:	4618      	mov	r0, r3
 8101c0e:	f000 f879 	bl	8101d04 <BNO086_qToFloat>
 8101c12:	eef0 7a40 	vmov.f32	s15, s0
}
 8101c16:	eeb0 0a67 	vmov.f32	s0, s15
 8101c1a:	bd80      	pop	{r7, pc}
 8101c1c:	1000014a 	.word	0x1000014a
 8101c20:	1000001c 	.word	0x1000001c

08101c24 <BNO086_getGyroZ>:

//Return the gyro component
float BNO086_getGyroZ()
{
 8101c24:	b580      	push	{r7, lr}
 8101c26:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawGyroZ, gyro_Q1);
 8101c28:	4b07      	ldr	r3, [pc, #28]	@ (8101c48 <BNO086_getGyroZ+0x24>)
 8101c2a:	881b      	ldrh	r3, [r3, #0]
 8101c2c:	b21b      	sxth	r3, r3
 8101c2e:	4a07      	ldr	r2, [pc, #28]	@ (8101c4c <BNO086_getGyroZ+0x28>)
 8101c30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101c34:	b2d2      	uxtb	r2, r2
 8101c36:	4611      	mov	r1, r2
 8101c38:	4618      	mov	r0, r3
 8101c3a:	f000 f863 	bl	8101d04 <BNO086_qToFloat>
 8101c3e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101c42:	eeb0 0a67 	vmov.f32	s0, s15
 8101c46:	bd80      	pop	{r7, pc}
 8101c48:	1000014c 	.word	0x1000014c
 8101c4c:	1000001c 	.word	0x1000001c

08101c50 <BNO086_getGyroAccuracy>:

//Return the gyro component
uint8_t BNO086_getGyroAccuracy()
{
 8101c50:	b480      	push	{r7}
 8101c52:	af00      	add	r7, sp, #0
	return (gyroAccuracy);
 8101c54:	4b03      	ldr	r3, [pc, #12]	@ (8101c64 <BNO086_getGyroAccuracy+0x14>)
 8101c56:	881b      	ldrh	r3, [r3, #0]
 8101c58:	b2db      	uxtb	r3, r3
}
 8101c5a:	4618      	mov	r0, r3
 8101c5c:	46bd      	mov	sp, r7
 8101c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c62:	4770      	bx	lr
 8101c64:	1000014e 	.word	0x1000014e

08101c68 <BNO086_getMagX>:

//Return the magnetometer component
float BNO086_getMagX()
{
 8101c68:	b580      	push	{r7, lr}
 8101c6a:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawMagX, magnetometer_Q1);
 8101c6c:	4b07      	ldr	r3, [pc, #28]	@ (8101c8c <BNO086_getMagX+0x24>)
 8101c6e:	881b      	ldrh	r3, [r3, #0]
 8101c70:	b21b      	sxth	r3, r3
 8101c72:	4a07      	ldr	r2, [pc, #28]	@ (8101c90 <BNO086_getMagX+0x28>)
 8101c74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101c78:	b2d2      	uxtb	r2, r2
 8101c7a:	4611      	mov	r1, r2
 8101c7c:	4618      	mov	r0, r3
 8101c7e:	f000 f841 	bl	8101d04 <BNO086_qToFloat>
 8101c82:	eef0 7a40 	vmov.f32	s15, s0
}
 8101c86:	eeb0 0a67 	vmov.f32	s0, s15
 8101c8a:	bd80      	pop	{r7, pc}
 8101c8c:	10000150 	.word	0x10000150
 8101c90:	1000001e 	.word	0x1000001e

08101c94 <BNO086_getMagY>:

//Return the magnetometer component
float BNO086_getMagY()
{
 8101c94:	b580      	push	{r7, lr}
 8101c96:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawMagY, magnetometer_Q1);
 8101c98:	4b07      	ldr	r3, [pc, #28]	@ (8101cb8 <BNO086_getMagY+0x24>)
 8101c9a:	881b      	ldrh	r3, [r3, #0]
 8101c9c:	b21b      	sxth	r3, r3
 8101c9e:	4a07      	ldr	r2, [pc, #28]	@ (8101cbc <BNO086_getMagY+0x28>)
 8101ca0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101ca4:	b2d2      	uxtb	r2, r2
 8101ca6:	4611      	mov	r1, r2
 8101ca8:	4618      	mov	r0, r3
 8101caa:	f000 f82b 	bl	8101d04 <BNO086_qToFloat>
 8101cae:	eef0 7a40 	vmov.f32	s15, s0
}
 8101cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8101cb6:	bd80      	pop	{r7, pc}
 8101cb8:	10000152 	.word	0x10000152
 8101cbc:	1000001e 	.word	0x1000001e

08101cc0 <BNO086_getMagZ>:

//Return the magnetometer component
float BNO086_getMagZ()
{
 8101cc0:	b580      	push	{r7, lr}
 8101cc2:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawMagZ, magnetometer_Q1);
 8101cc4:	4b07      	ldr	r3, [pc, #28]	@ (8101ce4 <BNO086_getMagZ+0x24>)
 8101cc6:	881b      	ldrh	r3, [r3, #0]
 8101cc8:	b21b      	sxth	r3, r3
 8101cca:	4a07      	ldr	r2, [pc, #28]	@ (8101ce8 <BNO086_getMagZ+0x28>)
 8101ccc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101cd0:	b2d2      	uxtb	r2, r2
 8101cd2:	4611      	mov	r1, r2
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f000 f815 	bl	8101d04 <BNO086_qToFloat>
 8101cda:	eef0 7a40 	vmov.f32	s15, s0
}
 8101cde:	eeb0 0a67 	vmov.f32	s0, s15
 8101ce2:	bd80      	pop	{r7, pc}
 8101ce4:	10000154 	.word	0x10000154
 8101ce8:	1000001e 	.word	0x1000001e

08101cec <BNO086_getMagAccuracy>:

//Return the mag component
uint8_t BNO086_getMagAccuracy()
{
 8101cec:	b480      	push	{r7}
 8101cee:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8101cf0:	4b03      	ldr	r3, [pc, #12]	@ (8101d00 <BNO086_getMagAccuracy+0x14>)
 8101cf2:	881b      	ldrh	r3, [r3, #0]
 8101cf4:	b2db      	uxtb	r3, r3
}
 8101cf6:	4618      	mov	r0, r3
 8101cf8:	46bd      	mov	sp, r7
 8101cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cfe:	4770      	bx	lr
 8101d00:	10000156 	.word	0x10000156

08101d04 <BNO086_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO086_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8101d04:	b580      	push	{r7, lr}
 8101d06:	ed2d 8b02 	vpush	{d8}
 8101d0a:	b082      	sub	sp, #8
 8101d0c:	af00      	add	r7, sp, #0
 8101d0e:	4603      	mov	r3, r0
 8101d10:	460a      	mov	r2, r1
 8101d12:	80fb      	strh	r3, [r7, #6]
 8101d14:	4613      	mov	r3, r2
 8101d16:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8101d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d1c:	ee07 3a90 	vmov	s15, r3
 8101d20:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8101d24:	797b      	ldrb	r3, [r7, #5]
 8101d26:	425b      	negs	r3, r3
 8101d28:	ee07 3a90 	vmov	s15, r3
 8101d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101d30:	eef0 0a67 	vmov.f32	s1, s15
 8101d34:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8101d38:	f00a f93c 	bl	810bfb4 <powf>
 8101d3c:	eef0 7a40 	vmov.f32	s15, s0
 8101d40:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8101d44:	eeb0 0a67 	vmov.f32	s0, s15
 8101d48:	3708      	adds	r7, #8
 8101d4a:	46bd      	mov	sp, r7
 8101d4c:	ecbd 8b02 	vpop	{d8}
 8101d50:	bd80      	pop	{r7, pc}

08101d52 <BNO086_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO086_enableRotationVector(uint16_t timeBetweenReports)
{
 8101d52:	b580      	push	{r7, lr}
 8101d54:	b082      	sub	sp, #8
 8101d56:	af00      	add	r7, sp, #0
 8101d58:	4603      	mov	r3, r0
 8101d5a:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8101d5c:	88fb      	ldrh	r3, [r7, #6]
 8101d5e:	2200      	movs	r2, #0
 8101d60:	4619      	mov	r1, r3
 8101d62:	2005      	movs	r0, #5
 8101d64:	f000 f866 	bl	8101e34 <BNO086_setFeatureCommand>
}
 8101d68:	bf00      	nop
 8101d6a:	3708      	adds	r7, #8
 8101d6c:	46bd      	mov	sp, r7
 8101d6e:	bd80      	pop	{r7, pc}

08101d70 <BNO086_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO086_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8101d70:	b580      	push	{r7, lr}
 8101d72:	b082      	sub	sp, #8
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	4603      	mov	r3, r0
 8101d78:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8101d7a:	88fb      	ldrh	r3, [r7, #6]
 8101d7c:	2200      	movs	r2, #0
 8101d7e:	4619      	mov	r1, r3
 8101d80:	2008      	movs	r0, #8
 8101d82:	f000 f857 	bl	8101e34 <BNO086_setFeatureCommand>
}
 8101d86:	bf00      	nop
 8101d88:	3708      	adds	r7, #8
 8101d8a:	46bd      	mov	sp, r7
 8101d8c:	bd80      	pop	{r7, pc}

08101d8e <BNO086_enableAccelerometer>:

//Sends the packet to enable the accelerometer
void BNO086_enableAccelerometer(uint16_t timeBetweenReports)
{
 8101d8e:	b580      	push	{r7, lr}
 8101d90:	b082      	sub	sp, #8
 8101d92:	af00      	add	r7, sp, #0
 8101d94:	4603      	mov	r3, r0
 8101d96:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_ACCELEROMETER, timeBetweenReports, 0);
 8101d98:	88fb      	ldrh	r3, [r7, #6]
 8101d9a:	2200      	movs	r2, #0
 8101d9c:	4619      	mov	r1, r3
 8101d9e:	2001      	movs	r0, #1
 8101da0:	f000 f848 	bl	8101e34 <BNO086_setFeatureCommand>
}
 8101da4:	bf00      	nop
 8101da6:	3708      	adds	r7, #8
 8101da8:	46bd      	mov	sp, r7
 8101daa:	bd80      	pop	{r7, pc}

08101dac <BNO086_enableLinearAccelerometer>:

//Sends the packet to enable the accelerometer
void BNO086_enableLinearAccelerometer(uint16_t timeBetweenReports)
{
 8101dac:	b580      	push	{r7, lr}
 8101dae:	b082      	sub	sp, #8
 8101db0:	af00      	add	r7, sp, #0
 8101db2:	4603      	mov	r3, r0
 8101db4:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_LINEAR_ACCELERATION, timeBetweenReports, 0);
 8101db6:	88fb      	ldrh	r3, [r7, #6]
 8101db8:	2200      	movs	r2, #0
 8101dba:	4619      	mov	r1, r3
 8101dbc:	2004      	movs	r0, #4
 8101dbe:	f000 f839 	bl	8101e34 <BNO086_setFeatureCommand>
}
 8101dc2:	bf00      	nop
 8101dc4:	3708      	adds	r7, #8
 8101dc6:	46bd      	mov	sp, r7
 8101dc8:	bd80      	pop	{r7, pc}

08101dca <BNO086_enableGyro>:

//Sends the packet to enable the gyro
void BNO086_enableGyro(uint16_t timeBetweenReports)
{
 8101dca:	b580      	push	{r7, lr}
 8101dcc:	b082      	sub	sp, #8
 8101dce:	af00      	add	r7, sp, #0
 8101dd0:	4603      	mov	r3, r0
 8101dd2:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
 8101dd4:	88fb      	ldrh	r3, [r7, #6]
 8101dd6:	2200      	movs	r2, #0
 8101dd8:	4619      	mov	r1, r3
 8101dda:	2002      	movs	r0, #2
 8101ddc:	f000 f82a 	bl	8101e34 <BNO086_setFeatureCommand>
}
 8101de0:	bf00      	nop
 8101de2:	3708      	adds	r7, #8
 8101de4:	46bd      	mov	sp, r7
 8101de6:	bd80      	pop	{r7, pc}

08101de8 <BNO086_enableMagnetometer>:

//Sends the packet to enable the magnetometer
void BNO086_enableMagnetometer(uint16_t timeBetweenReports)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	b082      	sub	sp, #8
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	4603      	mov	r3, r0
 8101df0:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8101df2:	88fb      	ldrh	r3, [r7, #6]
 8101df4:	2200      	movs	r2, #0
 8101df6:	4619      	mov	r1, r3
 8101df8:	2003      	movs	r0, #3
 8101dfa:	f000 f81b 	bl	8101e34 <BNO086_setFeatureCommand>
}
 8101dfe:	bf00      	nop
 8101e00:	3708      	adds	r7, #8
 8101e02:	46bd      	mov	sp, r7
 8101e04:	bd80      	pop	{r7, pc}

08101e06 <BNO086_calibrateAll>:
	BNO086_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO086_calibrateAll()
{
 8101e06:	b580      	push	{r7, lr}
 8101e08:	af00      	add	r7, sp, #0
	BNO086_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8101e0a:	2004      	movs	r0, #4
 8101e0c:	f000 f884 	bl	8101f18 <BNO086_sendCalibrateCommand>
}
 8101e10:	bf00      	nop
 8101e12:	bd80      	pop	{r7, pc}

08101e14 <BNO086_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO086_calibrationComplete()
{
 8101e14:	b480      	push	{r7}
 8101e16:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8101e18:	4b05      	ldr	r3, [pc, #20]	@ (8101e30 <BNO086_calibrationComplete+0x1c>)
 8101e1a:	781b      	ldrb	r3, [r3, #0]
 8101e1c:	2b00      	cmp	r3, #0
 8101e1e:	d101      	bne.n	8101e24 <BNO086_calibrationComplete+0x10>
		return (1);
 8101e20:	2301      	movs	r3, #1
 8101e22:	e000      	b.n	8101e26 <BNO086_calibrationComplete+0x12>
	return (0);
 8101e24:	2300      	movs	r3, #0
}
 8101e26:	4618      	mov	r0, r3
 8101e28:	46bd      	mov	sp, r7
 8101e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e2e:	4770      	bx	lr
 8101e30:	10000174 	.word	0x10000174

08101e34 <BNO086_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO086 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO086_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8101e34:	b580      	push	{r7, lr}
 8101e36:	b084      	sub	sp, #16
 8101e38:	af00      	add	r7, sp, #0
 8101e3a:	4603      	mov	r3, r0
 8101e3c:	60b9      	str	r1, [r7, #8]
 8101e3e:	607a      	str	r2, [r7, #4]
 8101e40:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8101e42:	4b24      	ldr	r3, [pc, #144]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e44:	22fd      	movs	r2, #253	@ 0xfd
 8101e46:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8101e48:	4a22      	ldr	r2, [pc, #136]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e4a:	7bfb      	ldrb	r3, [r7, #15]
 8101e4c:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8101e4e:	4b21      	ldr	r3, [pc, #132]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e50:	2200      	movs	r2, #0
 8101e52:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8101e54:	4b1f      	ldr	r3, [pc, #124]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e56:	2200      	movs	r2, #0
 8101e58:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8101e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e5c:	2200      	movs	r2, #0
 8101e5e:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8101e60:	68bb      	ldr	r3, [r7, #8]
 8101e62:	b2da      	uxtb	r2, r3
 8101e64:	4b1b      	ldr	r3, [pc, #108]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e66:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8101e68:	68bb      	ldr	r3, [r7, #8]
 8101e6a:	0a1b      	lsrs	r3, r3, #8
 8101e6c:	b2da      	uxtb	r2, r3
 8101e6e:	4b19      	ldr	r3, [pc, #100]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e70:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8101e72:	68bb      	ldr	r3, [r7, #8]
 8101e74:	0c1b      	lsrs	r3, r3, #16
 8101e76:	b2da      	uxtb	r2, r3
 8101e78:	4b16      	ldr	r3, [pc, #88]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e7a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8101e7c:	68bb      	ldr	r3, [r7, #8]
 8101e7e:	0e1b      	lsrs	r3, r3, #24
 8101e80:	b2da      	uxtb	r2, r3
 8101e82:	4b14      	ldr	r3, [pc, #80]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e84:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8101e86:	4b13      	ldr	r3, [pc, #76]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e88:	2200      	movs	r2, #0
 8101e8a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8101e8c:	4b11      	ldr	r3, [pc, #68]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e8e:	2200      	movs	r2, #0
 8101e90:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8101e92:	4b10      	ldr	r3, [pc, #64]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e94:	2200      	movs	r2, #0
 8101e96:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8101e98:	4b0e      	ldr	r3, [pc, #56]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101e9a:	2200      	movs	r2, #0
 8101e9c:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8101e9e:	687b      	ldr	r3, [r7, #4]
 8101ea0:	b2da      	uxtb	r2, r3
 8101ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101ea4:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	0a1b      	lsrs	r3, r3, #8
 8101eaa:	b2da      	uxtb	r2, r3
 8101eac:	4b09      	ldr	r3, [pc, #36]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101eae:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	0c1b      	lsrs	r3, r3, #16
 8101eb4:	b2da      	uxtb	r2, r3
 8101eb6:	4b07      	ldr	r3, [pc, #28]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101eb8:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	0e1b      	lsrs	r3, r3, #24
 8101ebe:	b2da      	uxtb	r2, r3
 8101ec0:	4b04      	ldr	r3, [pc, #16]	@ (8101ed4 <BNO086_setFeatureCommand+0xa0>)
 8101ec2:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO086_sendPacket(CHANNEL_CONTROL, 17);
 8101ec4:	2111      	movs	r1, #17
 8101ec6:	2002      	movs	r0, #2
 8101ec8:	f000 f932 	bl	8102130 <BNO086_sendPacket>
}
 8101ecc:	bf00      	nop
 8101ece:	3710      	adds	r7, #16
 8101ed0:	46bd      	mov	sp, r7
 8101ed2:	bd80      	pop	{r7, pc}
 8101ed4:	100000b0 	.word	0x100000b0

08101ed8 <BNO086_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO086_sendCommand(uint8_t command)
{
 8101ed8:	b580      	push	{r7, lr}
 8101eda:	b082      	sub	sp, #8
 8101edc:	af00      	add	r7, sp, #0
 8101ede:	4603      	mov	r3, r0
 8101ee0:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8101ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8101f10 <BNO086_sendCommand+0x38>)
 8101ee4:	22f2      	movs	r2, #242	@ 0xf2
 8101ee6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8101ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8101f14 <BNO086_sendCommand+0x3c>)
 8101eea:	781b      	ldrb	r3, [r3, #0]
 8101eec:	1c5a      	adds	r2, r3, #1
 8101eee:	b2d1      	uxtb	r1, r2
 8101ef0:	4a08      	ldr	r2, [pc, #32]	@ (8101f14 <BNO086_sendCommand+0x3c>)
 8101ef2:	7011      	strb	r1, [r2, #0]
 8101ef4:	4a06      	ldr	r2, [pc, #24]	@ (8101f10 <BNO086_sendCommand+0x38>)
 8101ef6:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8101ef8:	4a05      	ldr	r2, [pc, #20]	@ (8101f10 <BNO086_sendCommand+0x38>)
 8101efa:	79fb      	ldrb	r3, [r7, #7]
 8101efc:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO086_sendPacket(CHANNEL_CONTROL, 12);
 8101efe:	210c      	movs	r1, #12
 8101f00:	2002      	movs	r0, #2
 8101f02:	f000 f915 	bl	8102130 <BNO086_sendPacket>
}
 8101f06:	bf00      	nop
 8101f08:	3708      	adds	r7, #8
 8101f0a:	46bd      	mov	sp, r7
 8101f0c:	bd80      	pop	{r7, pc}
 8101f0e:	bf00      	nop
 8101f10:	100000b0 	.word	0x100000b0
 8101f14:	10000136 	.word	0x10000136

08101f18 <BNO086_sendCalibrateCommand>:

//This tells the BNO086 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO086_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b084      	sub	sp, #16
 8101f1c:	af00      	add	r7, sp, #0
 8101f1e:	4603      	mov	r3, r0
 8101f20:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101f22:	2303      	movs	r3, #3
 8101f24:	73fb      	strb	r3, [r7, #15]
 8101f26:	e006      	b.n	8101f36 <BNO086_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8101f28:	7bfb      	ldrb	r3, [r7, #15]
 8101f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f2c:	2100      	movs	r1, #0
 8101f2e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101f30:	7bfb      	ldrb	r3, [r7, #15]
 8101f32:	3301      	adds	r3, #1
 8101f34:	73fb      	strb	r3, [r7, #15]
 8101f36:	7bfb      	ldrb	r3, [r7, #15]
 8101f38:	2b0b      	cmp	r3, #11
 8101f3a:	d9f5      	bls.n	8101f28 <BNO086_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8101f3c:	79fb      	ldrb	r3, [r7, #7]
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	d103      	bne.n	8101f4a <BNO086_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8101f42:	4b17      	ldr	r3, [pc, #92]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f44:	2201      	movs	r2, #1
 8101f46:	70da      	strb	r2, [r3, #3]
 8101f48:	e020      	b.n	8101f8c <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8101f4a:	79fb      	ldrb	r3, [r7, #7]
 8101f4c:	2b01      	cmp	r3, #1
 8101f4e:	d103      	bne.n	8101f58 <BNO086_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8101f50:	4b13      	ldr	r3, [pc, #76]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f52:	2201      	movs	r2, #1
 8101f54:	711a      	strb	r2, [r3, #4]
 8101f56:	e019      	b.n	8101f8c <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8101f58:	79fb      	ldrb	r3, [r7, #7]
 8101f5a:	2b02      	cmp	r3, #2
 8101f5c:	d103      	bne.n	8101f66 <BNO086_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8101f5e:	4b10      	ldr	r3, [pc, #64]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f60:	2201      	movs	r2, #1
 8101f62:	715a      	strb	r2, [r3, #5]
 8101f64:	e012      	b.n	8101f8c <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8101f66:	79fb      	ldrb	r3, [r7, #7]
 8101f68:	2b03      	cmp	r3, #3
 8101f6a:	d103      	bne.n	8101f74 <BNO086_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8101f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f6e:	2201      	movs	r2, #1
 8101f70:	71da      	strb	r2, [r3, #7]
 8101f72:	e00b      	b.n	8101f8c <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8101f74:	79fb      	ldrb	r3, [r7, #7]
 8101f76:	2b04      	cmp	r3, #4
 8101f78:	d108      	bne.n	8101f8c <BNO086_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8101f7a:	4b09      	ldr	r3, [pc, #36]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f7c:	2201      	movs	r2, #1
 8101f7e:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8101f80:	4b07      	ldr	r3, [pc, #28]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f82:	2201      	movs	r2, #1
 8101f84:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8101f86:	4b06      	ldr	r3, [pc, #24]	@ (8101fa0 <BNO086_sendCalibrateCommand+0x88>)
 8101f88:	2201      	movs	r2, #1
 8101f8a:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8101f8c:	4b05      	ldr	r3, [pc, #20]	@ (8101fa4 <BNO086_sendCalibrateCommand+0x8c>)
 8101f8e:	2201      	movs	r2, #1
 8101f90:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO086_sendCommand(COMMAND_ME_CALIBRATE);
 8101f92:	2007      	movs	r0, #7
 8101f94:	f7ff ffa0 	bl	8101ed8 <BNO086_sendCommand>
}
 8101f98:	bf00      	nop
 8101f9a:	3710      	adds	r7, #16
 8101f9c:	46bd      	mov	sp, r7
 8101f9e:	bd80      	pop	{r7, pc}
 8101fa0:	100000b0 	.word	0x100000b0
 8101fa4:	10000174 	.word	0x10000174

08101fa8 <BNO086_requestCalibrationStatus>:

//Request ME Calibration Status from BNO086
//See page 51 of reference manual
void BNO086_requestCalibrationStatus()
{
 8101fa8:	b580      	push	{r7, lr}
 8101faa:	b082      	sub	sp, #8
 8101fac:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101fae:	2303      	movs	r3, #3
 8101fb0:	71fb      	strb	r3, [r7, #7]
 8101fb2:	e006      	b.n	8101fc2 <BNO086_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8101fb4:	79fb      	ldrb	r3, [r7, #7]
 8101fb6:	4a09      	ldr	r2, [pc, #36]	@ (8101fdc <BNO086_requestCalibrationStatus+0x34>)
 8101fb8:	2100      	movs	r1, #0
 8101fba:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101fbc:	79fb      	ldrb	r3, [r7, #7]
 8101fbe:	3301      	adds	r3, #1
 8101fc0:	71fb      	strb	r3, [r7, #7]
 8101fc2:	79fb      	ldrb	r3, [r7, #7]
 8101fc4:	2b0b      	cmp	r3, #11
 8101fc6:	d9f5      	bls.n	8101fb4 <BNO086_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8101fc8:	4b04      	ldr	r3, [pc, #16]	@ (8101fdc <BNO086_requestCalibrationStatus+0x34>)
 8101fca:	2201      	movs	r2, #1
 8101fcc:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO086_sendCommand(COMMAND_ME_CALIBRATE);
 8101fce:	2007      	movs	r0, #7
 8101fd0:	f7ff ff82 	bl	8101ed8 <BNO086_sendCommand>
}
 8101fd4:	bf00      	nop
 8101fd6:	3708      	adds	r7, #8
 8101fd8:	46bd      	mov	sp, r7
 8101fda:	bd80      	pop	{r7, pc}
 8101fdc:	100000b0 	.word	0x100000b0

08101fe0 <BNO086_saveCalibration>:

//This tells the BNO086 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO086_saveCalibration()
{
 8101fe0:	b580      	push	{r7, lr}
 8101fe2:	b082      	sub	sp, #8
 8101fe4:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101fe6:	2303      	movs	r3, #3
 8101fe8:	71fb      	strb	r3, [r7, #7]
 8101fea:	e006      	b.n	8101ffa <BNO086_saveCalibration+0x1a>
		shtpData[x] = 0;
 8101fec:	79fb      	ldrb	r3, [r7, #7]
 8101fee:	4a08      	ldr	r2, [pc, #32]	@ (8102010 <BNO086_saveCalibration+0x30>)
 8101ff0:	2100      	movs	r1, #0
 8101ff2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101ff4:	79fb      	ldrb	r3, [r7, #7]
 8101ff6:	3301      	adds	r3, #1
 8101ff8:	71fb      	strb	r3, [r7, #7]
 8101ffa:	79fb      	ldrb	r3, [r7, #7]
 8101ffc:	2b0b      	cmp	r3, #11
 8101ffe:	d9f5      	bls.n	8101fec <BNO086_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO086_sendCommand(COMMAND_DCD); //Save DCD command
 8102000:	2006      	movs	r0, #6
 8102002:	f7ff ff69 	bl	8101ed8 <BNO086_sendCommand>
}
 8102006:	bf00      	nop
 8102008:	3708      	adds	r7, #8
 810200a:	46bd      	mov	sp, r7
 810200c:	bd80      	pop	{r7, pc}
 810200e:	bf00      	nop
 8102010:	100000b0 	.word	0x100000b0

08102014 <BNO086_waitForSPI>:

//Blocking wait for BNO086 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO086_waitForSPI(void)
{
 8102014:	b580      	push	{r7, lr}
 8102016:	b082      	sub	sp, #8
 8102018:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 810201a:	2300      	movs	r3, #0
 810201c:	607b      	str	r3, [r7, #4]
 810201e:	e00c      	b.n	810203a <BNO086_waitForSPI+0x26>
	{
		if (HAL_GPIO_ReadPin(BNO086_INT_PORT, BNO086_INT_PIN) == 0)
 8102020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8102024:	4809      	ldr	r0, [pc, #36]	@ (810204c <BNO086_waitForSPI+0x38>)
 8102026:	f004 f9f9 	bl	810641c <HAL_GPIO_ReadPin>
 810202a:	4603      	mov	r3, r0
 810202c:	2b00      	cmp	r3, #0
 810202e:	d101      	bne.n	8102034 <BNO086_waitForSPI+0x20>
		{
//			printf("\nData available\n");
			return (1);
 8102030:	2301      	movs	r3, #1
 8102032:	e007      	b.n	8102044 <BNO086_waitForSPI+0x30>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	3301      	adds	r3, #1
 8102038:	607b      	str	r3, [r7, #4]
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102040:	d1ee      	bne.n	8102020 <BNO086_waitForSPI+0xc>
		}
//		printf("SPI Wait %d\n", counter);
	}
//	printf("\nData not available\n");
	return (0);
 8102042:	2300      	movs	r3, #0
}
 8102044:	4618      	mov	r0, r3
 8102046:	3708      	adds	r7, #8
 8102048:	46bd      	mov	sp, r7
 810204a:	bd80      	pop	{r7, pc}
 810204c:	58021800 	.word	0x58021800

08102050 <BNO086_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO086_receivePacket(void)
{
 8102050:	b580      	push	{r7, lr}
 8102052:	b084      	sub	sp, #16
 8102054:	af00      	add	r7, sp, #0
	uint8_t incoming;
	if (HAL_GPIO_ReadPin(BNO086_INT_PORT, BNO086_INT_PIN) == 1)
 8102056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810205a:	4831      	ldr	r0, [pc, #196]	@ (8102120 <BNO086_receivePacket+0xd0>)
 810205c:	f004 f9de 	bl	810641c <HAL_GPIO_ReadPin>
 8102060:	4603      	mov	r3, r0
 8102062:	2b01      	cmp	r3, #1
 8102064:	d101      	bne.n	810206a <BNO086_receivePacket+0x1a>
		return (0); //Data is not available
 8102066:	2300      	movs	r3, #0
 8102068:	e056      	b.n	8102118 <BNO086_receivePacket+0xc8>

	//Old way: if (BNO086_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO086); // Todo
 810206a:	2200      	movs	r2, #0
 810206c:	2120      	movs	r1, #32
 810206e:	482d      	ldr	r0, [pc, #180]	@ (8102124 <BNO086_receivePacket+0xd4>)
 8102070:	f004 f9ec 	bl	810644c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_RESET);

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8102074:	2000      	movs	r0, #0
 8102076:	f7ff fae3 	bl	8101640 <SPI2_SendByte>
 810207a:	4603      	mov	r3, r0
 810207c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 810207e:	2000      	movs	r0, #0
 8102080:	f7ff fade 	bl	8101640 <SPI2_SendByte>
 8102084:	4603      	mov	r3, r0
 8102086:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8102088:	2000      	movs	r0, #0
 810208a:	f7ff fad9 	bl	8101640 <SPI2_SendByte>
 810208e:	4603      	mov	r3, r0
 8102090:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8102092:	2000      	movs	r0, #0
 8102094:	f7ff fad4 	bl	8101640 <SPI2_SendByte>
 8102098:	4603      	mov	r3, r0
 810209a:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 810209c:	4a22      	ldr	r2, [pc, #136]	@ (8102128 <BNO086_receivePacket+0xd8>)
 810209e:	7b7b      	ldrb	r3, [r7, #13]
 81020a0:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 81020a2:	4a21      	ldr	r2, [pc, #132]	@ (8102128 <BNO086_receivePacket+0xd8>)
 81020a4:	7b3b      	ldrb	r3, [r7, #12]
 81020a6:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 81020a8:	4a1f      	ldr	r2, [pc, #124]	@ (8102128 <BNO086_receivePacket+0xd8>)
 81020aa:	7afb      	ldrb	r3, [r7, #11]
 81020ac:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 81020ae:	4a1e      	ldr	r2, [pc, #120]	@ (8102128 <BNO086_receivePacket+0xd8>)
 81020b0:	7abb      	ldrb	r3, [r7, #10]
 81020b2:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 81020b4:	7b3b      	ldrb	r3, [r7, #12]
 81020b6:	021b      	lsls	r3, r3, #8
 81020b8:	b21a      	sxth	r2, r3
 81020ba:	7b7b      	ldrb	r3, [r7, #13]
 81020bc:	b21b      	sxth	r3, r3
 81020be:	4313      	orrs	r3, r2
 81020c0:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 81020c2:	893b      	ldrh	r3, [r7, #8]
 81020c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81020c8:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	// catch this as an error and exit
	if (dataLength == 0)
 81020ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81020ce:	2b00      	cmp	r3, #0
 81020d0:	d101      	bne.n	81020d6 <BNO086_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 81020d2:	2300      	movs	r3, #0
 81020d4:	e020      	b.n	8102118 <BNO086_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 81020d6:	893b      	ldrh	r3, [r7, #8]
 81020d8:	3b04      	subs	r3, #4
 81020da:	b29b      	uxth	r3, r3
 81020dc:	813b      	strh	r3, [r7, #8]

//	printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 81020de:	2300      	movs	r3, #0
 81020e0:	81fb      	strh	r3, [r7, #14]
 81020e2:	e00e      	b.n	8102102 <BNO086_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 81020e4:	20ff      	movs	r0, #255	@ 0xff
 81020e6:	f7ff faab 	bl	8101640 <SPI2_SendByte>
 81020ea:	4603      	mov	r3, r0
 81020ec:	71fb      	strb	r3, [r7, #7]
//		printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO086 can respond with upto 270 bytes, avoid overflow
 81020ee:	89fb      	ldrh	r3, [r7, #14]
 81020f0:	2b7f      	cmp	r3, #127	@ 0x7f
 81020f2:	d803      	bhi.n	81020fc <BNO086_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 81020f4:	89fb      	ldrh	r3, [r7, #14]
 81020f6:	490d      	ldr	r1, [pc, #52]	@ (810212c <BNO086_receivePacket+0xdc>)
 81020f8:	79fa      	ldrb	r2, [r7, #7]
 81020fa:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 81020fc:	89fb      	ldrh	r3, [r7, #14]
 81020fe:	3301      	adds	r3, #1
 8102100:	81fb      	strh	r3, [r7, #14]
 8102102:	89fa      	ldrh	r2, [r7, #14]
 8102104:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8102108:	429a      	cmp	r2, r3
 810210a:	dbeb      	blt.n	81020e4 <BNO086_receivePacket+0x94>
	}
//	printf("\n");

	CHIP_DESELECT(BNO086); // Todo Release BNO086
 810210c:	2201      	movs	r2, #1
 810210e:	2120      	movs	r1, #32
 8102110:	4804      	ldr	r0, [pc, #16]	@ (8102124 <BNO086_receivePacket+0xd4>)
 8102112:	f004 f99b 	bl	810644c <HAL_GPIO_WritePin>
	return (1); //We're done!
 8102116:	2301      	movs	r3, #1
}
 8102118:	4618      	mov	r0, r3
 810211a:	3710      	adds	r7, #16
 810211c:	46bd      	mov	sp, r7
 810211e:	bd80      	pop	{r7, pc}
 8102120:	58021800 	.word	0x58021800
 8102124:	58020400 	.word	0x58020400
 8102128:	100000ac 	.word	0x100000ac
 810212c:	100000b0 	.word	0x100000b0

08102130 <BNO086_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
// - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO086_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8102130:	b580      	push	{r7, lr}
 8102132:	b084      	sub	sp, #16
 8102134:	af00      	add	r7, sp, #0
 8102136:	4603      	mov	r3, r0
 8102138:	460a      	mov	r2, r1
 810213a:	71fb      	strb	r3, [r7, #7]
 810213c:	4613      	mov	r3, r2
 810213e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8102140:	79bb      	ldrb	r3, [r7, #6]
 8102142:	3304      	adds	r3, #4
 8102144:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO086 to indicate it is available for communication
	if (BNO086_waitForSPI() == 0)
 8102146:	f7ff ff65 	bl	8102014 <BNO086_waitForSPI>
 810214a:	4603      	mov	r3, r0
 810214c:	2b00      	cmp	r3, #0
 810214e:	d101      	bne.n	8102154 <BNO086_sendPacket+0x24>
		return (0); //Data is not available
 8102150:	2300      	movs	r3, #0
 8102152:	e032      	b.n	81021ba <BNO086_sendPacket+0x8a>

	//BNO086 has max CLK of 3MHz, MSB first,
	//The BNO086 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO086); // Todo
 8102154:	2200      	movs	r2, #0
 8102156:	2120      	movs	r1, #32
 8102158:	481a      	ldr	r0, [pc, #104]	@ (81021c4 <BNO086_sendPacket+0x94>)
 810215a:	f004 f977 	bl	810644c <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 810215e:	7bbb      	ldrb	r3, [r7, #14]
 8102160:	4618      	mov	r0, r3
 8102162:	f7ff fa6d 	bl	8101640 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8102166:	7bbb      	ldrb	r3, [r7, #14]
 8102168:	121b      	asrs	r3, r3, #8
 810216a:	b2db      	uxtb	r3, r3
 810216c:	4618      	mov	r0, r3
 810216e:	f7ff fa67 	bl	8101640 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8102172:	79fb      	ldrb	r3, [r7, #7]
 8102174:	4618      	mov	r0, r3
 8102176:	f7ff fa63 	bl	8101640 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 810217a:	79fb      	ldrb	r3, [r7, #7]
 810217c:	4a12      	ldr	r2, [pc, #72]	@ (81021c8 <BNO086_sendPacket+0x98>)
 810217e:	5cd2      	ldrb	r2, [r2, r3]
 8102180:	1c51      	adds	r1, r2, #1
 8102182:	b2c8      	uxtb	r0, r1
 8102184:	4910      	ldr	r1, [pc, #64]	@ (81021c8 <BNO086_sendPacket+0x98>)
 8102186:	54c8      	strb	r0, [r1, r3]
 8102188:	4610      	mov	r0, r2
 810218a:	f7ff fa59 	bl	8101640 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 810218e:	2300      	movs	r3, #0
 8102190:	73fb      	strb	r3, [r7, #15]
 8102192:	e008      	b.n	81021a6 <BNO086_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8102194:	7bfb      	ldrb	r3, [r7, #15]
 8102196:	4a0d      	ldr	r2, [pc, #52]	@ (81021cc <BNO086_sendPacket+0x9c>)
 8102198:	5cd3      	ldrb	r3, [r2, r3]
 810219a:	4618      	mov	r0, r3
 810219c:	f7ff fa50 	bl	8101640 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 81021a0:	7bfb      	ldrb	r3, [r7, #15]
 81021a2:	3301      	adds	r3, #1
 81021a4:	73fb      	strb	r3, [r7, #15]
 81021a6:	7bfa      	ldrb	r2, [r7, #15]
 81021a8:	79bb      	ldrb	r3, [r7, #6]
 81021aa:	429a      	cmp	r2, r3
 81021ac:	d3f2      	bcc.n	8102194 <BNO086_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO086); // Todo
 81021ae:	2201      	movs	r2, #1
 81021b0:	2120      	movs	r1, #32
 81021b2:	4804      	ldr	r0, [pc, #16]	@ (81021c4 <BNO086_sendPacket+0x94>)
 81021b4:	f004 f94a 	bl	810644c <HAL_GPIO_WritePin>

	return (1);
 81021b8:	2301      	movs	r3, #1
}
 81021ba:	4618      	mov	r0, r3
 81021bc:	3710      	adds	r7, #16
 81021be:	46bd      	mov	sp, r7
 81021c0:	bd80      	pop	{r7, pc}
 81021c2:	bf00      	nop
 81021c4:	58020400 	.word	0x58020400
 81021c8:	10000130 	.word	0x10000130
 81021cc:	100000b0 	.word	0x100000b0

081021d0 <getRoll>:

float getRoll(uint8_t unit){
 81021d0:	b5b0      	push	{r4, r5, r7, lr}
 81021d2:	b08c      	sub	sp, #48	@ 0x30
 81021d4:	af00      	add	r7, sp, #0
 81021d6:	4603      	mov	r3, r0
 81021d8:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO086_getQuatI();
 81021da:	f7ff fc03 	bl	81019e4 <BNO086_getQuatI>
 81021de:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float dqy = BNO086_getQuatJ();
 81021e2:	f7ff fc15 	bl	8101a10 <BNO086_getQuatJ>
 81021e6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float dqz = BNO086_getQuatK();
 81021ea:	f7ff fc27 	bl	8101a3c <BNO086_getQuatK>
 81021ee:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqw = BNO086_getQuatReal();
 81021f2:	f7ff fc39 	bl	8101a68 <BNO086_getQuatReal>
 81021f6:	ed87 0a07 	vstr	s0, [r7, #28]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 81021fa:	edd7 7a07 	vldr	s15, [r7, #28]
 81021fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8102202:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8102206:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 810220e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102212:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102216:	ee37 7a27 	vadd.f32	s14, s14, s15
 810221a:	edd7 7a08 	vldr	s15, [r7, #32]
 810221e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102226:	ee17 0a90 	vmov	r0, s15
 810222a:	f7fe f9b9 	bl	81005a0 <__aeabi_f2d>
 810222e:	4602      	mov	r2, r0
 8102230:	460b      	mov	r3, r1
 8102232:	ec43 2b10 	vmov	d0, r2, r3
 8102236:	f009 fe89 	bl	810bf4c <sqrt>
 810223a:	ec53 2b10 	vmov	r2, r3, d0
 810223e:	4610      	mov	r0, r2
 8102240:	4619      	mov	r1, r3
 8102242:	f7fe fcb5 	bl	8100bb0 <__aeabi_d2f>
 8102246:	4603      	mov	r3, r0
 8102248:	61bb      	str	r3, [r7, #24]


	dqx = dqx / norm; //x
 810224a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 810224e:	ed97 7a06 	vldr	s14, [r7, #24]
 8102252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102256:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dqy = dqy / norm; //y
 810225a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 810225e:	ed97 7a06 	vldr	s14, [r7, #24]
 8102262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102266:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dqz = dqz / norm; //z
 810226a:	edd7 6a08 	vldr	s13, [r7, #32]
 810226e:	ed97 7a06 	vldr	s14, [r7, #24]
 8102272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102276:	edc7 7a08 	vstr	s15, [r7, #32]
	dqw = dqw / norm; //w
 810227a:	edd7 6a07 	vldr	s13, [r7, #28]
 810227e:	ed97 7a06 	vldr	s14, [r7, #24]
 8102282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102286:	edc7 7a07 	vstr	s15, [r7, #28]

	float ysqr = dqy * dqy;
 810228a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 810228e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102292:	edc7 7a05 	vstr	s15, [r7, #20]
	float t0 = +2.0 * (dqw * dqx + dqy * dqz);
 8102296:	ed97 7a07 	vldr	s14, [r7, #28]
 810229a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 81022a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 81022a6:	edd7 7a08 	vldr	s15, [r7, #32]
 81022aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 81022b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81022b6:	edc7 7a04 	vstr	s15, [r7, #16]
	float t1 = +1.0 - 2.0 * (dqx * dqx + ysqr);
 81022ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 81022be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81022c2:	edd7 7a05 	vldr	s15, [r7, #20]
 81022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 81022ca:	ee17 0a90 	vmov	r0, s15
 81022ce:	f7fe f967 	bl	81005a0 <__aeabi_f2d>
 81022d2:	4602      	mov	r2, r0
 81022d4:	460b      	mov	r3, r1
 81022d6:	f7fe f805 	bl	81002e4 <__adddf3>
 81022da:	4602      	mov	r2, r0
 81022dc:	460b      	mov	r3, r1
 81022de:	f04f 0000 	mov.w	r0, #0
 81022e2:	4925      	ldr	r1, [pc, #148]	@ (8102378 <getRoll+0x1a8>)
 81022e4:	f7fd fffc 	bl	81002e0 <__aeabi_dsub>
 81022e8:	4602      	mov	r2, r0
 81022ea:	460b      	mov	r3, r1
 81022ec:	4610      	mov	r0, r2
 81022ee:	4619      	mov	r1, r3
 81022f0:	f7fe fc5e 	bl	8100bb0 <__aeabi_d2f>
 81022f4:	4603      	mov	r3, r0
 81022f6:	60fb      	str	r3, [r7, #12]
	float roll = atan2(t0, t1);
 81022f8:	6938      	ldr	r0, [r7, #16]
 81022fa:	f7fe f951 	bl	81005a0 <__aeabi_f2d>
 81022fe:	4604      	mov	r4, r0
 8102300:	460d      	mov	r5, r1
 8102302:	68f8      	ldr	r0, [r7, #12]
 8102304:	f7fe f94c 	bl	81005a0 <__aeabi_f2d>
 8102308:	4602      	mov	r2, r0
 810230a:	460b      	mov	r3, r1
 810230c:	ec43 2b11 	vmov	d1, r2, r3
 8102310:	ec45 4b10 	vmov	d0, r4, r5
 8102314:	f009 fe18 	bl	810bf48 <atan2>
 8102318:	ec53 2b10 	vmov	r2, r3, d0
 810231c:	4610      	mov	r0, r2
 810231e:	4619      	mov	r1, r3
 8102320:	f7fe fc46 	bl	8100bb0 <__aeabi_d2f>
 8102324:	4603      	mov	r3, r0
 8102326:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if(unit == 1){
 8102328:	79fb      	ldrb	r3, [r7, #7]
 810232a:	2b01      	cmp	r3, #1
 810232c:	d118      	bne.n	8102360 <getRoll+0x190>
		roll = roll * 180.0 / M_PI;
 810232e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8102330:	f7fe f936 	bl	81005a0 <__aeabi_f2d>
 8102334:	f04f 0200 	mov.w	r2, #0
 8102338:	4b10      	ldr	r3, [pc, #64]	@ (810237c <getRoll+0x1ac>)
 810233a:	f7fe f989 	bl	8100650 <__aeabi_dmul>
 810233e:	4602      	mov	r2, r0
 8102340:	460b      	mov	r3, r1
 8102342:	4610      	mov	r0, r2
 8102344:	4619      	mov	r1, r3
 8102346:	a30a      	add	r3, pc, #40	@ (adr r3, 8102370 <getRoll+0x1a0>)
 8102348:	e9d3 2300 	ldrd	r2, r3, [r3]
 810234c:	f7fe faaa 	bl	81008a4 <__aeabi_ddiv>
 8102350:	4602      	mov	r2, r0
 8102352:	460b      	mov	r3, r1
 8102354:	4610      	mov	r0, r2
 8102356:	4619      	mov	r1, r3
 8102358:	f7fe fc2a 	bl	8100bb0 <__aeabi_d2f>
 810235c:	4603      	mov	r3, r0
 810235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	return (roll);
 8102360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102362:	ee07 3a90 	vmov	s15, r3
}
 8102366:	eeb0 0a67 	vmov.f32	s0, s15
 810236a:	3730      	adds	r7, #48	@ 0x30
 810236c:	46bd      	mov	sp, r7
 810236e:	bdb0      	pop	{r4, r5, r7, pc}
 8102370:	54442d18 	.word	0x54442d18
 8102374:	400921fb 	.word	0x400921fb
 8102378:	3ff00000 	.word	0x3ff00000
 810237c:	40668000 	.word	0x40668000

08102380 <getPitch>:

float getPitch(uint8_t unit){
 8102380:	b580      	push	{r7, lr}
 8102382:	b08a      	sub	sp, #40	@ 0x28
 8102384:	af00      	add	r7, sp, #0
 8102386:	4603      	mov	r3, r0
 8102388:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO086_getQuatI();
 810238a:	f7ff fb2b 	bl	81019e4 <BNO086_getQuatI>
 810238e:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqy = BNO086_getQuatJ();
 8102392:	f7ff fb3d 	bl	8101a10 <BNO086_getQuatJ>
 8102396:	ed87 0a06 	vstr	s0, [r7, #24]
	float dqz = BNO086_getQuatK();
 810239a:	f7ff fb4f 	bl	8101a3c <BNO086_getQuatK>
 810239e:	ed87 0a05 	vstr	s0, [r7, #20]
	float dqw = BNO086_getQuatReal();
 81023a2:	f7ff fb61 	bl	8101a68 <BNO086_getQuatReal>
 81023a6:	ed87 0a04 	vstr	s0, [r7, #16]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 81023aa:	edd7 7a04 	vldr	s15, [r7, #16]
 81023ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81023b2:	edd7 7a07 	vldr	s15, [r7, #28]
 81023b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81023ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 81023be:	edd7 7a06 	vldr	s15, [r7, #24]
 81023c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 81023ca:	edd7 7a05 	vldr	s15, [r7, #20]
 81023ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81023d6:	ee17 0a90 	vmov	r0, s15
 81023da:	f7fe f8e1 	bl	81005a0 <__aeabi_f2d>
 81023de:	4602      	mov	r2, r0
 81023e0:	460b      	mov	r3, r1
 81023e2:	ec43 2b10 	vmov	d0, r2, r3
 81023e6:	f009 fdb1 	bl	810bf4c <sqrt>
 81023ea:	ec53 2b10 	vmov	r2, r3, d0
 81023ee:	4610      	mov	r0, r2
 81023f0:	4619      	mov	r1, r3
 81023f2:	f7fe fbdd 	bl	8100bb0 <__aeabi_d2f>
 81023f6:	4603      	mov	r3, r0
 81023f8:	60fb      	str	r3, [r7, #12]


	dqx = dqx / norm; //x
 81023fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81023fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8102402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102406:	edc7 7a07 	vstr	s15, [r7, #28]
	dqy = dqy / norm; //y
 810240a:	edd7 6a06 	vldr	s13, [r7, #24]
 810240e:	ed97 7a03 	vldr	s14, [r7, #12]
 8102412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102416:	edc7 7a06 	vstr	s15, [r7, #24]
	dqz = dqz / norm; //z
 810241a:	edd7 6a05 	vldr	s13, [r7, #20]
 810241e:	ed97 7a03 	vldr	s14, [r7, #12]
 8102422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102426:	edc7 7a05 	vstr	s15, [r7, #20]
	dqw = dqw / norm; //w
 810242a:	edd7 6a04 	vldr	s13, [r7, #16]
 810242e:	ed97 7a03 	vldr	s14, [r7, #12]
 8102432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102436:	edc7 7a04 	vstr	s15, [r7, #16]
//
//	if(unit == 1){
//		pitch = pitch * 180.0 / M_PI;
//	}
	// Calculate pitch (y-axis rotation)
	float t2 = +2.0 * (dqw * dqy - dqz * dqx);
 810243a:	ed97 7a04 	vldr	s14, [r7, #16]
 810243e:	edd7 7a06 	vldr	s15, [r7, #24]
 8102442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102446:	edd7 6a05 	vldr	s13, [r7, #20]
 810244a:	edd7 7a07 	vldr	s15, [r7, #28]
 810244e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8102452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102456:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810245a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp t2 to stay within the asin range
	if (t2 > 1.0) t2 = 1.0;
 810245e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8102462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102466:	eef4 7ac7 	vcmpe.f32	s15, s14
 810246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810246e:	dd02      	ble.n	8102476 <getPitch+0xf6>
 8102470:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8102474:	627b      	str	r3, [r7, #36]	@ 0x24
	if (t2 < -1.0) t2 = -1.0;
 8102476:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 810247a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 810247e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102486:	d501      	bpl.n	810248c <getPitch+0x10c>
 8102488:	4b1d      	ldr	r3, [pc, #116]	@ (8102500 <getPitch+0x180>)
 810248a:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculate pitch
	float pitch = asin(t2);
 810248c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810248e:	f7fe f887 	bl	81005a0 <__aeabi_f2d>
 8102492:	4602      	mov	r2, r0
 8102494:	460b      	mov	r3, r1
 8102496:	ec43 2b10 	vmov	d0, r2, r3
 810249a:	f009 fd21 	bl	810bee0 <asin>
 810249e:	ec53 2b10 	vmov	r2, r3, d0
 81024a2:	4610      	mov	r0, r2
 81024a4:	4619      	mov	r1, r3
 81024a6:	f7fe fb83 	bl	8100bb0 <__aeabi_d2f>
 81024aa:	4603      	mov	r3, r0
 81024ac:	623b      	str	r3, [r7, #32]

	// Convert pitch to degrees if unit is set to 1
	if (unit == 1) {
 81024ae:	79fb      	ldrb	r3, [r7, #7]
 81024b0:	2b01      	cmp	r3, #1
 81024b2:	d118      	bne.n	81024e6 <getPitch+0x166>
		pitch = pitch * 180.0 / M_PI;
 81024b4:	6a38      	ldr	r0, [r7, #32]
 81024b6:	f7fe f873 	bl	81005a0 <__aeabi_f2d>
 81024ba:	f04f 0200 	mov.w	r2, #0
 81024be:	4b11      	ldr	r3, [pc, #68]	@ (8102504 <getPitch+0x184>)
 81024c0:	f7fe f8c6 	bl	8100650 <__aeabi_dmul>
 81024c4:	4602      	mov	r2, r0
 81024c6:	460b      	mov	r3, r1
 81024c8:	4610      	mov	r0, r2
 81024ca:	4619      	mov	r1, r3
 81024cc:	a30a      	add	r3, pc, #40	@ (adr r3, 81024f8 <getPitch+0x178>)
 81024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024d2:	f7fe f9e7 	bl	81008a4 <__aeabi_ddiv>
 81024d6:	4602      	mov	r2, r0
 81024d8:	460b      	mov	r3, r1
 81024da:	4610      	mov	r0, r2
 81024dc:	4619      	mov	r1, r3
 81024de:	f7fe fb67 	bl	8100bb0 <__aeabi_d2f>
 81024e2:	4603      	mov	r3, r0
 81024e4:	623b      	str	r3, [r7, #32]
	}

	return (pitch);
 81024e6:	6a3b      	ldr	r3, [r7, #32]
 81024e8:	ee07 3a90 	vmov	s15, r3
}
 81024ec:	eeb0 0a67 	vmov.f32	s0, s15
 81024f0:	3728      	adds	r7, #40	@ 0x28
 81024f2:	46bd      	mov	sp, r7
 81024f4:	bd80      	pop	{r7, pc}
 81024f6:	bf00      	nop
 81024f8:	54442d18 	.word	0x54442d18
 81024fc:	400921fb 	.word	0x400921fb
 8102500:	bf800000 	.word	0xbf800000
 8102504:	40668000 	.word	0x40668000

08102508 <getYaw>:

float getYaw(uint8_t unit){
 8102508:	b5b0      	push	{r4, r5, r7, lr}
 810250a:	b08c      	sub	sp, #48	@ 0x30
 810250c:	af00      	add	r7, sp, #0
 810250e:	4603      	mov	r3, r0
 8102510:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO086_getQuatI();
 8102512:	f7ff fa67 	bl	81019e4 <BNO086_getQuatI>
 8102516:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float dqy = BNO086_getQuatJ();
 810251a:	f7ff fa79 	bl	8101a10 <BNO086_getQuatJ>
 810251e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float dqz = BNO086_getQuatK();
 8102522:	f7ff fa8b 	bl	8101a3c <BNO086_getQuatK>
 8102526:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqw = BNO086_getQuatReal();
 810252a:	f7ff fa9d 	bl	8101a68 <BNO086_getQuatReal>
 810252e:	ed87 0a07 	vstr	s0, [r7, #28]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8102532:	edd7 7a07 	vldr	s15, [r7, #28]
 8102536:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810253a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810253e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8102542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102546:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 810254a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810254e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8102552:	edd7 7a08 	vldr	s15, [r7, #32]
 8102556:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810255e:	ee17 0a90 	vmov	r0, s15
 8102562:	f7fe f81d 	bl	81005a0 <__aeabi_f2d>
 8102566:	4602      	mov	r2, r0
 8102568:	460b      	mov	r3, r1
 810256a:	ec43 2b10 	vmov	d0, r2, r3
 810256e:	f009 fced 	bl	810bf4c <sqrt>
 8102572:	ec53 2b10 	vmov	r2, r3, d0
 8102576:	4610      	mov	r0, r2
 8102578:	4619      	mov	r1, r3
 810257a:	f7fe fb19 	bl	8100bb0 <__aeabi_d2f>
 810257e:	4603      	mov	r3, r0
 8102580:	61bb      	str	r3, [r7, #24]


	dqx = dqx / norm; //x
 8102582:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8102586:	ed97 7a06 	vldr	s14, [r7, #24]
 810258a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810258e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dqy = dqy / norm; //y
 8102592:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8102596:	ed97 7a06 	vldr	s14, [r7, #24]
 810259a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810259e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dqz = dqz / norm; //z
 81025a2:	edd7 6a08 	vldr	s13, [r7, #32]
 81025a6:	ed97 7a06 	vldr	s14, [r7, #24]
 81025aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81025ae:	edc7 7a08 	vstr	s15, [r7, #32]
	dqw = dqw / norm; //w
 81025b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81025b6:	ed97 7a06 	vldr	s14, [r7, #24]
 81025ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81025be:	edc7 7a07 	vstr	s15, [r7, #28]

	float ysqr = dqy * dqy;
 81025c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 81025c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81025ca:	edc7 7a05 	vstr	s15, [r7, #20]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 81025ce:	ed97 7a07 	vldr	s14, [r7, #28]
 81025d2:	edd7 7a08 	vldr	s15, [r7, #32]
 81025d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81025da:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 81025de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 81025e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 81025ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81025ee:	edc7 7a04 	vstr	s15, [r7, #16]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 81025f2:	edd7 7a08 	vldr	s15, [r7, #32]
 81025f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81025fa:	edd7 7a05 	vldr	s15, [r7, #20]
 81025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102602:	ee17 0a90 	vmov	r0, s15
 8102606:	f7fd ffcb 	bl	81005a0 <__aeabi_f2d>
 810260a:	4602      	mov	r2, r0
 810260c:	460b      	mov	r3, r1
 810260e:	f7fd fe69 	bl	81002e4 <__adddf3>
 8102612:	4602      	mov	r2, r0
 8102614:	460b      	mov	r3, r1
 8102616:	f04f 0000 	mov.w	r0, #0
 810261a:	4925      	ldr	r1, [pc, #148]	@ (81026b0 <getYaw+0x1a8>)
 810261c:	f7fd fe60 	bl	81002e0 <__aeabi_dsub>
 8102620:	4602      	mov	r2, r0
 8102622:	460b      	mov	r3, r1
 8102624:	4610      	mov	r0, r2
 8102626:	4619      	mov	r1, r3
 8102628:	f7fe fac2 	bl	8100bb0 <__aeabi_d2f>
 810262c:	4603      	mov	r3, r0
 810262e:	60fb      	str	r3, [r7, #12]
	float yaw = atan2(t3, t4);
 8102630:	6938      	ldr	r0, [r7, #16]
 8102632:	f7fd ffb5 	bl	81005a0 <__aeabi_f2d>
 8102636:	4604      	mov	r4, r0
 8102638:	460d      	mov	r5, r1
 810263a:	68f8      	ldr	r0, [r7, #12]
 810263c:	f7fd ffb0 	bl	81005a0 <__aeabi_f2d>
 8102640:	4602      	mov	r2, r0
 8102642:	460b      	mov	r3, r1
 8102644:	ec43 2b11 	vmov	d1, r2, r3
 8102648:	ec45 4b10 	vmov	d0, r4, r5
 810264c:	f009 fc7c 	bl	810bf48 <atan2>
 8102650:	ec53 2b10 	vmov	r2, r3, d0
 8102654:	4610      	mov	r0, r2
 8102656:	4619      	mov	r1, r3
 8102658:	f7fe faaa 	bl	8100bb0 <__aeabi_d2f>
 810265c:	4603      	mov	r3, r0
 810265e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if(unit == 1){
 8102660:	79fb      	ldrb	r3, [r7, #7]
 8102662:	2b01      	cmp	r3, #1
 8102664:	d118      	bne.n	8102698 <getYaw+0x190>
			yaw = yaw * 180.0 / M_PI;
 8102666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8102668:	f7fd ff9a 	bl	81005a0 <__aeabi_f2d>
 810266c:	f04f 0200 	mov.w	r2, #0
 8102670:	4b10      	ldr	r3, [pc, #64]	@ (81026b4 <getYaw+0x1ac>)
 8102672:	f7fd ffed 	bl	8100650 <__aeabi_dmul>
 8102676:	4602      	mov	r2, r0
 8102678:	460b      	mov	r3, r1
 810267a:	4610      	mov	r0, r2
 810267c:	4619      	mov	r1, r3
 810267e:	a30a      	add	r3, pc, #40	@ (adr r3, 81026a8 <getYaw+0x1a0>)
 8102680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102684:	f7fe f90e 	bl	81008a4 <__aeabi_ddiv>
 8102688:	4602      	mov	r2, r0
 810268a:	460b      	mov	r3, r1
 810268c:	4610      	mov	r0, r2
 810268e:	4619      	mov	r1, r3
 8102690:	f7fe fa8e 	bl	8100bb0 <__aeabi_d2f>
 8102694:	4603      	mov	r3, r0
 8102696:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

	return (yaw);
 8102698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810269a:	ee07 3a90 	vmov	s15, r3
}
 810269e:	eeb0 0a67 	vmov.f32	s0, s15
 81026a2:	3730      	adds	r7, #48	@ 0x30
 81026a4:	46bd      	mov	sp, r7
 81026a6:	bdb0      	pop	{r4, r5, r7, pc}
 81026a8:	54442d18 	.word	0x54442d18
 81026ac:	400921fb 	.word	0x400921fb
 81026b0:	3ff00000 	.word	0x3ff00000
 81026b4:	40668000 	.word	0x40668000

081026b8 <BNO086_getData>:

void BNO086_getData(BNO086_t *bno, RPY_UNIT rpy_unit){
 81026b8:	b580      	push	{r7, lr}
 81026ba:	b082      	sub	sp, #8
 81026bc:	af00      	add	r7, sp, #0
 81026be:	6078      	str	r0, [r7, #4]
 81026c0:	460b      	mov	r3, r1
 81026c2:	70fb      	strb	r3, [r7, #3]
	/* rpy_unit can be only 0 and 1  which
	 * rpy_unit = 0 set the roll,pitch and yaw unit as Radian
	 * rpy_unit = 1 set the roll,pitch and yaw unit as Degree */

		bno->quaternion.i = BNO086_getQuatI();
 81026c4:	f7ff f98e 	bl	81019e4 <BNO086_getQuatI>
 81026c8:	eef0 7a40 	vmov.f32	s15, s0
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = BNO086_getQuatJ();
 81026d2:	f7ff f99d 	bl	8101a10 <BNO086_getQuatJ>
 81026d6:	eef0 7a40 	vmov.f32	s15, s0
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = BNO086_getQuatK();
 81026e0:	f7ff f9ac 	bl	8101a3c <BNO086_getQuatK>
 81026e4:	eef0 7a40 	vmov.f32	s15, s0
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = BNO086_getQuatReal();
 81026ee:	f7ff f9bb 	bl	8101a68 <BNO086_getQuatReal>
 81026f2:	eef0 7a40 	vmov.f32	s15, s0
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->acceleration.x = BNO086_getAccelX();
 81026fc:	f7ff f9d6 	bl	8101aac <BNO086_getAccelX>
 8102700:	eef0 7a40 	vmov.f32	s15, s0
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = BNO086_getAccelY();
 810270a:	f7ff f9e5 	bl	8101ad8 <BNO086_getAccelY>
 810270e:	eef0 7a40 	vmov.f32	s15, s0
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = BNO086_getAccelZ();
 8102718:	f7ff f9f4 	bl	8101b04 <BNO086_getAccelZ>
 810271c:	eef0 7a40 	vmov.f32	s15, s0
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	edc3 7a06 	vstr	s15, [r3, #24]

		bno->linear_acceleration.x = BNO086_getLinAccelX();
 8102726:	f7ff fa0f 	bl	8101b48 <BNO086_getLinAccelX>
 810272a:	eef0 7a40 	vmov.f32	s15, s0
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = BNO086_getLinAccelY();
 8102734:	f7ff fa1e 	bl	8101b74 <BNO086_getLinAccelY>
 8102738:	eef0 7a40 	vmov.f32	s15, s0
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = BNO086_getLinAccelZ();
 8102742:	f7ff fa2d 	bl	8101ba0 <BNO086_getLinAccelZ>
 8102746:	eef0 7a40 	vmov.f32	s15, s0
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = BNO086_getGyroX();
 8102750:	f7ff fa3c 	bl	8101bcc <BNO086_getGyroX>
 8102754:	eef0 7a40 	vmov.f32	s15, s0
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = BNO086_getGyroY();
 810275e:	f7ff fa4b 	bl	8101bf8 <BNO086_getGyroY>
 8102762:	eef0 7a40 	vmov.f32	s15, s0
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = BNO086_getGyroZ();
 810276c:	f7ff fa5a 	bl	8101c24 <BNO086_getGyroZ>
 8102770:	eef0 7a40 	vmov.f32	s15, s0
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = BNO086_getMagX();
 810277a:	f7ff fa75 	bl	8101c68 <BNO086_getMagX>
 810277e:	eef0 7a40 	vmov.f32	s15, s0
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = BNO086_getMagY();
 8102788:	f7ff fa84 	bl	8101c94 <BNO086_getMagY>
 810278c:	eef0 7a40 	vmov.f32	s15, s0
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = BNO086_getMagZ();
 8102796:	f7ff fa93 	bl	8101cc0 <BNO086_getMagZ>
 810279a:	eef0 7a40 	vmov.f32	s15, s0
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->euler_angle.roll = getRoll(rpy_unit);
 81027a4:	78fb      	ldrb	r3, [r7, #3]
 81027a6:	4618      	mov	r0, r3
 81027a8:	f7ff fd12 	bl	81021d0 <getRoll>
 81027ac:	eef0 7a40 	vmov.f32	s15, s0
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = getPitch(rpy_unit);
 81027b6:	78fb      	ldrb	r3, [r7, #3]
 81027b8:	4618      	mov	r0, r3
 81027ba:	f7ff fde1 	bl	8102380 <getPitch>
 81027be:	eef0 7a40 	vmov.f32	s15, s0
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = getYaw(rpy_unit);
 81027c8:	78fb      	ldrb	r3, [r7, #3]
 81027ca:	4618      	mov	r0, r3
 81027cc:	f7ff fe9c 	bl	8102508 <getYaw>
 81027d0:	eef0 7a40 	vmov.f32	s15, s0
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48



}
 81027da:	bf00      	nop
 81027dc:	3708      	adds	r7, #8
 81027de:	46bd      	mov	sp, r7
 81027e0:	bd80      	pop	{r7, pc}

081027e2 <BNO086_SAVE_HSEM>:

void BNO086_SAVE_HSEM(BNO086_t *bno){
 81027e2:	b590      	push	{r4, r7, lr}
 81027e4:	b083      	sub	sp, #12
 81027e6:	af00      	add	r7, sp, #0
 81027e8:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 81027ea:	2000      	movs	r0, #0
 81027ec:	f003 fe48 	bl	8106480 <HAL_HSEM_FastTake>
 81027f0:	4603      	mov	r3, r0
 81027f2:	2b00      	cmp	r3, #0
 81027f4:	f040 80f6 	bne.w	81029e4 <BNO086_SAVE_HSEM+0x202>
		  SRAM4_BNO086->Data[0] = bno->euler_angle.roll;
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81027fc:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102800:	4618      	mov	r0, r3
 8102802:	f7fd fecd 	bl	81005a0 <__aeabi_f2d>
 8102806:	4602      	mov	r2, r0
 8102808:	460b      	mov	r3, r1
 810280a:	e9c4 2302 	strd	r2, r3, [r4, #8]
		  SRAM4_BNO086->Data[1] = bno->euler_angle.pitch;
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102812:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102816:	4618      	mov	r0, r3
 8102818:	f7fd fec2 	bl	81005a0 <__aeabi_f2d>
 810281c:	4602      	mov	r2, r0
 810281e:	460b      	mov	r3, r1
 8102820:	e9c4 2304 	strd	r2, r3, [r4, #16]
		  SRAM4_BNO086->Data[2] = bno->euler_angle.yaw;
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102828:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810282c:	4618      	mov	r0, r3
 810282e:	f7fd feb7 	bl	81005a0 <__aeabi_f2d>
 8102832:	4602      	mov	r2, r0
 8102834:	460b      	mov	r3, r1
 8102836:	e9c4 2306 	strd	r2, r3, [r4, #24]

		  SRAM4_BNO086->Data[0] = bno->quaternion.i;
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	681b      	ldr	r3, [r3, #0]
 810283e:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102842:	4618      	mov	r0, r3
 8102844:	f7fd feac 	bl	81005a0 <__aeabi_f2d>
 8102848:	4602      	mov	r2, r0
 810284a:	460b      	mov	r3, r1
 810284c:	e9c4 2302 	strd	r2, r3, [r4, #8]
		  SRAM4_BNO086->Data[1] = bno->quaternion.j;
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	685b      	ldr	r3, [r3, #4]
 8102854:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102858:	4618      	mov	r0, r3
 810285a:	f7fd fea1 	bl	81005a0 <__aeabi_f2d>
 810285e:	4602      	mov	r2, r0
 8102860:	460b      	mov	r3, r1
 8102862:	e9c4 2304 	strd	r2, r3, [r4, #16]
		  SRAM4_BNO086->Data[2] = bno->quaternion.k;
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	689b      	ldr	r3, [r3, #8]
 810286a:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810286e:	4618      	mov	r0, r3
 8102870:	f7fd fe96 	bl	81005a0 <__aeabi_f2d>
 8102874:	4602      	mov	r2, r0
 8102876:	460b      	mov	r3, r1
 8102878:	e9c4 2306 	strd	r2, r3, [r4, #24]
		  SRAM4_BNO086->Data[3] = bno->quaternion.w;
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	68db      	ldr	r3, [r3, #12]
 8102880:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102884:	4618      	mov	r0, r3
 8102886:	f7fd fe8b 	bl	81005a0 <__aeabi_f2d>
 810288a:	4602      	mov	r2, r0
 810288c:	460b      	mov	r3, r1
 810288e:	e9c4 2308 	strd	r2, r3, [r4, #32]

		  SRAM4_BNO086->Data[4] = bno->linear_acceleration.x;
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	69db      	ldr	r3, [r3, #28]
 8102896:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810289a:	4618      	mov	r0, r3
 810289c:	f7fd fe80 	bl	81005a0 <__aeabi_f2d>
 81028a0:	4602      	mov	r2, r0
 81028a2:	460b      	mov	r3, r1
 81028a4:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
		  SRAM4_BNO086->Data[5] = bno->linear_acceleration.y;
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	6a1b      	ldr	r3, [r3, #32]
 81028ac:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81028b0:	4618      	mov	r0, r3
 81028b2:	f7fd fe75 	bl	81005a0 <__aeabi_f2d>
 81028b6:	4602      	mov	r2, r0
 81028b8:	460b      	mov	r3, r1
 81028ba:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
		  SRAM4_BNO086->Data[6] = bno->linear_acceleration.z;
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81028c2:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81028c6:	4618      	mov	r0, r3
 81028c8:	f7fd fe6a 	bl	81005a0 <__aeabi_f2d>
 81028cc:	4602      	mov	r2, r0
 81028ce:	460b      	mov	r3, r1
 81028d0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38

		  SRAM4_BNO086->Data[7] = bno->angular_velocity.x;
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81028d8:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81028dc:	4618      	mov	r0, r3
 81028de:	f7fd fe5f 	bl	81005a0 <__aeabi_f2d>
 81028e2:	4602      	mov	r2, r0
 81028e4:	460b      	mov	r3, r1
 81028e6:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
		  SRAM4_BNO086->Data[8] = bno->angular_velocity.y;
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028ee:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81028f2:	4618      	mov	r0, r3
 81028f4:	f7fd fe54 	bl	81005a0 <__aeabi_f2d>
 81028f8:	4602      	mov	r2, r0
 81028fa:	460b      	mov	r3, r1
 81028fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		  SRAM4_BNO086->Data[9] = bno->angular_velocity.z;
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102904:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102908:	4618      	mov	r0, r3
 810290a:	f7fd fe49 	bl	81005a0 <__aeabi_f2d>
 810290e:	4602      	mov	r2, r0
 8102910:	460b      	mov	r3, r1
 8102912:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50

		  SRAM4_BNO086->Data[10] = bno->magnetometer.x;
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810291a:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810291e:	4618      	mov	r0, r3
 8102920:	f7fd fe3e 	bl	81005a0 <__aeabi_f2d>
 8102924:	4602      	mov	r2, r0
 8102926:	460b      	mov	r3, r1
 8102928:	e9c4 2316 	strd	r2, r3, [r4, #88]	@ 0x58
		  SRAM4_BNO086->Data[11] = bno->magnetometer.y;
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102930:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102934:	4618      	mov	r0, r3
 8102936:	f7fd fe33 	bl	81005a0 <__aeabi_f2d>
 810293a:	4602      	mov	r2, r0
 810293c:	460b      	mov	r3, r1
 810293e:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
		  SRAM4_BNO086->Data[12] = bno->magnetometer.z;
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102946:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810294a:	4618      	mov	r0, r3
 810294c:	f7fd fe28 	bl	81005a0 <__aeabi_f2d>
 8102950:	4602      	mov	r2, r0
 8102952:	460b      	mov	r3, r1
 8102954:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68

		  SRAM4_BNO086->Data[13] = bno->acceleration.x;
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	691b      	ldr	r3, [r3, #16]
 810295c:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102960:	4618      	mov	r0, r3
 8102962:	f7fd fe1d 	bl	81005a0 <__aeabi_f2d>
 8102966:	4602      	mov	r2, r0
 8102968:	460b      	mov	r3, r1
 810296a:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
		  SRAM4_BNO086->Data[14] = bno->acceleration.y;
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	695b      	ldr	r3, [r3, #20]
 8102972:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102976:	4618      	mov	r0, r3
 8102978:	f7fd fe12 	bl	81005a0 <__aeabi_f2d>
 810297c:	4602      	mov	r2, r0
 810297e:	460b      	mov	r3, r1
 8102980:	e9c4 231e 	strd	r2, r3, [r4, #120]	@ 0x78
		  SRAM4_BNO086->Data[15] = bno->acceleration.z;
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	699b      	ldr	r3, [r3, #24]
 8102988:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810298c:	4618      	mov	r0, r3
 810298e:	f7fd fe07 	bl	81005a0 <__aeabi_f2d>
 8102992:	4602      	mov	r2, r0
 8102994:	460b      	mov	r3, r1
 8102996:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80

		  SRAM4_BNO086->Data[16] = bno->euler_angle.roll;
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810299e:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81029a2:	4618      	mov	r0, r3
 81029a4:	f7fd fdfc 	bl	81005a0 <__aeabi_f2d>
 81029a8:	4602      	mov	r2, r0
 81029aa:	460b      	mov	r3, r1
 81029ac:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
		  SRAM4_BNO086->Data[17] = bno->euler_angle.pitch;
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81029b4:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81029b8:	4618      	mov	r0, r3
 81029ba:	f7fd fdf1 	bl	81005a0 <__aeabi_f2d>
 81029be:	4602      	mov	r2, r0
 81029c0:	460b      	mov	r3, r1
 81029c2:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90
		  SRAM4_BNO086->Data[18] = bno->euler_angle.yaw;
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81029ca:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 81029ce:	4618      	mov	r0, r3
 81029d0:	f7fd fde6 	bl	81005a0 <__aeabi_f2d>
 81029d4:	4602      	mov	r2, r0
 81029d6:	460b      	mov	r3, r1
 81029d8:	e9c4 2326 	strd	r2, r3, [r4, #152]	@ 0x98

		  HAL_HSEM_Release(HSEM_ID_0,0);
 81029dc:	2100      	movs	r1, #0
 81029de:	2000      	movs	r0, #0
 81029e0:	f003 fd68 	bl	81064b4 <HAL_HSEM_Release>
		}
}
 81029e4:	bf00      	nop
 81029e6:	370c      	adds	r7, #12
 81029e8:	46bd      	mov	sp, r7
 81029ea:	bd90      	pop	{r4, r7, pc}

081029ec <BNO086_Calibration>:

void BNO086_Calibration(BNO086_t *bno, CalibrateStatus *calib)
{
 81029ec:	b580      	push	{r7, lr}
 81029ee:	b084      	sub	sp, #16
 81029f0:	af00      	add	r7, sp, #0
 81029f2:	6078      	str	r0, [r7, #4]
 81029f4:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) {
 81029f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 81029fa:	4894      	ldr	r0, [pc, #592]	@ (8102c4c <BNO086_Calibration+0x260>)
 81029fc:	f003 fd0e 	bl	810641c <HAL_GPIO_ReadPin>
 8102a00:	4603      	mov	r3, r0
 8102a02:	2b01      	cmp	r3, #1
 8102a04:	f040 811e 	bne.w	8102c44 <BNO086_Calibration+0x258>

		mode = 1;
 8102a08:	4b91      	ldr	r3, [pc, #580]	@ (8102c50 <BNO086_Calibration+0x264>)
 8102a0a:	2201      	movs	r2, #1
 8102a0c:	801a      	strh	r2, [r3, #0]
		// Resets BNO086 to disable all output
		BNO086_Initialization(&bno);
 8102a0e:	1d3b      	adds	r3, r7, #4
 8102a10:	4618      	mov	r0, r3
 8102a12:	f7fe fdb9 	bl	8101588 <BNO086_Initialization>

		// Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
		// Enable Game Rotation Vector output
		// Enable Rotation Vector output
		// Enable Magnetic Field output
		BNO086_calibrateAll(); // Turn on calibration for Accel, Gyro, and Mag
 8102a16:	f7ff f9f6 	bl	8101e06 <BNO086_calibrateAll>
		BNO086_enableGameRotationVector(10000); // Send data update every 20ms (50Hz)
 8102a1a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8102a1e:	f7ff f9a7 	bl	8101d70 <BNO086_enableGameRotationVector>
//		BNO086_enableRotationVector(2500);
		BNO086_enableAccelerometer(2000);
 8102a22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8102a26:	f7ff f9b2 	bl	8101d8e <BNO086_enableAccelerometer>
		BNO086_enableGyro(2500);
 8102a2a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8102a2e:	f7ff f9cc 	bl	8101dca <BNO086_enableGyro>
		BNO086_enableMagnetometer(10000); // Send data update every 20ms (50Hz)
 8102a32:	f242 7010 	movw	r0, #10000	@ 0x2710
 8102a36:	f7ff f9d7 	bl	8101de8 <BNO086_enableMagnetometer>

		while (mode == 1 || mode == 2)
 8102a3a:	e0cf      	b.n	8102bdc <BNO086_Calibration+0x1f0>
		{
			if (BNO086_dataAvailable() == 1)
 8102a3c:	f7fe fe18 	bl	8101670 <BNO086_dataAvailable>
 8102a40:	4603      	mov	r3, r0
 8102a42:	2b01      	cmp	r3, #1
 8102a44:	f040 80c7 	bne.w	8102bd6 <BNO086_Calibration+0x1ea>
			{

				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8102a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8102a4c:	487f      	ldr	r0, [pc, #508]	@ (8102c4c <BNO086_Calibration+0x260>)
 8102a4e:	f003 fce5 	bl	810641c <HAL_GPIO_ReadPin>
 8102a52:	4603      	mov	r3, r0
 8102a54:	2b00      	cmp	r3, #0
 8102a56:	d102      	bne.n	8102a5e <BNO086_Calibration+0x72>
					mode = 2;
 8102a58:	4b7d      	ldr	r3, [pc, #500]	@ (8102c50 <BNO086_Calibration+0x264>)
 8102a5a:	2202      	movs	r2, #2
 8102a5c:	801a      	strh	r2, [r3, #0]
				}
				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET && mode == 2){
 8102a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8102a62:	487a      	ldr	r0, [pc, #488]	@ (8102c4c <BNO086_Calibration+0x260>)
 8102a64:	f003 fcda 	bl	810641c <HAL_GPIO_ReadPin>
 8102a68:	4603      	mov	r3, r0
 8102a6a:	2b01      	cmp	r3, #1
 8102a6c:	d107      	bne.n	8102a7e <BNO086_Calibration+0x92>
 8102a6e:	4b78      	ldr	r3, [pc, #480]	@ (8102c50 <BNO086_Calibration+0x264>)
 8102a70:	881b      	ldrh	r3, [r3, #0]
 8102a72:	2b02      	cmp	r3, #2
 8102a74:	d103      	bne.n	8102a7e <BNO086_Calibration+0x92>
					mode = 3;
 8102a76:	4b76      	ldr	r3, [pc, #472]	@ (8102c50 <BNO086_Calibration+0x264>)
 8102a78:	2203      	movs	r2, #3
 8102a7a:	801a      	strh	r2, [r3, #0]
					break;
 8102a7c:	e0b8      	b.n	8102bf0 <BNO086_Calibration+0x204>
				}
				BNO086_getData(&bno, UNIT_DEG);
 8102a7e:	1d3b      	adds	r3, r7, #4
 8102a80:	2101      	movs	r1, #1
 8102a82:	4618      	mov	r0, r3
 8102a84:	f7ff fe18 	bl	81026b8 <BNO086_getData>
				// Observing the status bit of the sensors output
				accuracyQuat = BNO086_getQuatAccuracy();
 8102a88:	f7ff f804 	bl	8101a94 <BNO086_getQuatAccuracy>
 8102a8c:	4603      	mov	r3, r0
 8102a8e:	461a      	mov	r2, r3
 8102a90:	4b70      	ldr	r3, [pc, #448]	@ (8102c54 <BNO086_Calibration+0x268>)
 8102a92:	701a      	strb	r2, [r3, #0]
				accuracyAccel = BNO086_getAccelAccuracy();
 8102a94:	f7ff f84c 	bl	8101b30 <BNO086_getAccelAccuracy>
 8102a98:	4603      	mov	r3, r0
 8102a9a:	461a      	mov	r2, r3
 8102a9c:	4b6e      	ldr	r3, [pc, #440]	@ (8102c58 <BNO086_Calibration+0x26c>)
 8102a9e:	701a      	strb	r2, [r3, #0]
				accuracyGyro = BNO086_getGyroAccuracy();
 8102aa0:	f7ff f8d6 	bl	8101c50 <BNO086_getGyroAccuracy>
 8102aa4:	4603      	mov	r3, r0
 8102aa6:	461a      	mov	r2, r3
 8102aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8102c5c <BNO086_Calibration+0x270>)
 8102aaa:	701a      	strb	r2, [r3, #0]
				accuracyMag = BNO086_getMagAccuracy();
 8102aac:	f7ff f91e 	bl	8101cec <BNO086_getMagAccuracy>
 8102ab0:	4603      	mov	r3, r0
 8102ab2:	461a      	mov	r2, r3
 8102ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8102c60 <BNO086_Calibration+0x274>)
 8102ab6:	701a      	strb	r2, [r3, #0]

				if (accuracyQuat == 0) calib->accuracyQuat = UNRELIABLE;
 8102ab8:	4b66      	ldr	r3, [pc, #408]	@ (8102c54 <BNO086_Calibration+0x268>)
 8102aba:	781b      	ldrb	r3, [r3, #0]
 8102abc:	2b00      	cmp	r3, #0
 8102abe:	d103      	bne.n	8102ac8 <BNO086_Calibration+0xdc>
 8102ac0:	683b      	ldr	r3, [r7, #0]
 8102ac2:	2201      	movs	r2, #1
 8102ac4:	701a      	strb	r2, [r3, #0]
 8102ac6:	e016      	b.n	8102af6 <BNO086_Calibration+0x10a>
				else if (accuracyQuat == 1) calib->accuracyQuat = LOW;
 8102ac8:	4b62      	ldr	r3, [pc, #392]	@ (8102c54 <BNO086_Calibration+0x268>)
 8102aca:	781b      	ldrb	r3, [r3, #0]
 8102acc:	2b01      	cmp	r3, #1
 8102ace:	d103      	bne.n	8102ad8 <BNO086_Calibration+0xec>
 8102ad0:	683b      	ldr	r3, [r7, #0]
 8102ad2:	2202      	movs	r2, #2
 8102ad4:	701a      	strb	r2, [r3, #0]
 8102ad6:	e00e      	b.n	8102af6 <BNO086_Calibration+0x10a>
				else if (accuracyQuat == 2) calib->accuracyQuat = MEDIUM;
 8102ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8102c54 <BNO086_Calibration+0x268>)
 8102ada:	781b      	ldrb	r3, [r3, #0]
 8102adc:	2b02      	cmp	r3, #2
 8102ade:	d103      	bne.n	8102ae8 <BNO086_Calibration+0xfc>
 8102ae0:	683b      	ldr	r3, [r7, #0]
 8102ae2:	2203      	movs	r2, #3
 8102ae4:	701a      	strb	r2, [r3, #0]
 8102ae6:	e006      	b.n	8102af6 <BNO086_Calibration+0x10a>
				else if (accuracyQuat == 3) calib->accuracyQuat = HIGH;
 8102ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8102c54 <BNO086_Calibration+0x268>)
 8102aea:	781b      	ldrb	r3, [r3, #0]
 8102aec:	2b03      	cmp	r3, #3
 8102aee:	d102      	bne.n	8102af6 <BNO086_Calibration+0x10a>
 8102af0:	683b      	ldr	r3, [r7, #0]
 8102af2:	2204      	movs	r2, #4
 8102af4:	701a      	strb	r2, [r3, #0]

				if (accuracyAccel == 0) calib->accuracyAccel = UNRELIABLE;
 8102af6:	4b58      	ldr	r3, [pc, #352]	@ (8102c58 <BNO086_Calibration+0x26c>)
 8102af8:	781b      	ldrb	r3, [r3, #0]
 8102afa:	2b00      	cmp	r3, #0
 8102afc:	d103      	bne.n	8102b06 <BNO086_Calibration+0x11a>
 8102afe:	683b      	ldr	r3, [r7, #0]
 8102b00:	2201      	movs	r2, #1
 8102b02:	705a      	strb	r2, [r3, #1]
 8102b04:	e016      	b.n	8102b34 <BNO086_Calibration+0x148>
				else if (accuracyAccel == 1) calib->accuracyAccel = LOW;
 8102b06:	4b54      	ldr	r3, [pc, #336]	@ (8102c58 <BNO086_Calibration+0x26c>)
 8102b08:	781b      	ldrb	r3, [r3, #0]
 8102b0a:	2b01      	cmp	r3, #1
 8102b0c:	d103      	bne.n	8102b16 <BNO086_Calibration+0x12a>
 8102b0e:	683b      	ldr	r3, [r7, #0]
 8102b10:	2202      	movs	r2, #2
 8102b12:	705a      	strb	r2, [r3, #1]
 8102b14:	e00e      	b.n	8102b34 <BNO086_Calibration+0x148>
				else if (accuracyAccel == 2) calib->accuracyAccel = MEDIUM;
 8102b16:	4b50      	ldr	r3, [pc, #320]	@ (8102c58 <BNO086_Calibration+0x26c>)
 8102b18:	781b      	ldrb	r3, [r3, #0]
 8102b1a:	2b02      	cmp	r3, #2
 8102b1c:	d103      	bne.n	8102b26 <BNO086_Calibration+0x13a>
 8102b1e:	683b      	ldr	r3, [r7, #0]
 8102b20:	2203      	movs	r2, #3
 8102b22:	705a      	strb	r2, [r3, #1]
 8102b24:	e006      	b.n	8102b34 <BNO086_Calibration+0x148>
				else if (accuracyAccel == 3) calib->accuracyAccel = HIGH;
 8102b26:	4b4c      	ldr	r3, [pc, #304]	@ (8102c58 <BNO086_Calibration+0x26c>)
 8102b28:	781b      	ldrb	r3, [r3, #0]
 8102b2a:	2b03      	cmp	r3, #3
 8102b2c:	d102      	bne.n	8102b34 <BNO086_Calibration+0x148>
 8102b2e:	683b      	ldr	r3, [r7, #0]
 8102b30:	2204      	movs	r2, #4
 8102b32:	705a      	strb	r2, [r3, #1]

				if (accuracyGyro == 0) calib->accuracyGyro = UNRELIABLE;
 8102b34:	4b49      	ldr	r3, [pc, #292]	@ (8102c5c <BNO086_Calibration+0x270>)
 8102b36:	781b      	ldrb	r3, [r3, #0]
 8102b38:	2b00      	cmp	r3, #0
 8102b3a:	d103      	bne.n	8102b44 <BNO086_Calibration+0x158>
 8102b3c:	683b      	ldr	r3, [r7, #0]
 8102b3e:	2201      	movs	r2, #1
 8102b40:	709a      	strb	r2, [r3, #2]
 8102b42:	e016      	b.n	8102b72 <BNO086_Calibration+0x186>
				else if (accuracyGyro == 1) calib->accuracyGyro = LOW;
 8102b44:	4b45      	ldr	r3, [pc, #276]	@ (8102c5c <BNO086_Calibration+0x270>)
 8102b46:	781b      	ldrb	r3, [r3, #0]
 8102b48:	2b01      	cmp	r3, #1
 8102b4a:	d103      	bne.n	8102b54 <BNO086_Calibration+0x168>
 8102b4c:	683b      	ldr	r3, [r7, #0]
 8102b4e:	2202      	movs	r2, #2
 8102b50:	709a      	strb	r2, [r3, #2]
 8102b52:	e00e      	b.n	8102b72 <BNO086_Calibration+0x186>
				else if (accuracyGyro == 2) calib->accuracyGyro = MEDIUM;
 8102b54:	4b41      	ldr	r3, [pc, #260]	@ (8102c5c <BNO086_Calibration+0x270>)
 8102b56:	781b      	ldrb	r3, [r3, #0]
 8102b58:	2b02      	cmp	r3, #2
 8102b5a:	d103      	bne.n	8102b64 <BNO086_Calibration+0x178>
 8102b5c:	683b      	ldr	r3, [r7, #0]
 8102b5e:	2203      	movs	r2, #3
 8102b60:	709a      	strb	r2, [r3, #2]
 8102b62:	e006      	b.n	8102b72 <BNO086_Calibration+0x186>
				else if (accuracyGyro == 3) calib->accuracyGyro = HIGH;
 8102b64:	4b3d      	ldr	r3, [pc, #244]	@ (8102c5c <BNO086_Calibration+0x270>)
 8102b66:	781b      	ldrb	r3, [r3, #0]
 8102b68:	2b03      	cmp	r3, #3
 8102b6a:	d102      	bne.n	8102b72 <BNO086_Calibration+0x186>
 8102b6c:	683b      	ldr	r3, [r7, #0]
 8102b6e:	2204      	movs	r2, #4
 8102b70:	709a      	strb	r2, [r3, #2]

				if (accuracyMag == 0) calib->accuracyMag = UNRELIABLE;
 8102b72:	4b3b      	ldr	r3, [pc, #236]	@ (8102c60 <BNO086_Calibration+0x274>)
 8102b74:	781b      	ldrb	r3, [r3, #0]
 8102b76:	2b00      	cmp	r3, #0
 8102b78:	d103      	bne.n	8102b82 <BNO086_Calibration+0x196>
 8102b7a:	683b      	ldr	r3, [r7, #0]
 8102b7c:	2201      	movs	r2, #1
 8102b7e:	70da      	strb	r2, [r3, #3]
 8102b80:	e016      	b.n	8102bb0 <BNO086_Calibration+0x1c4>
				else if (accuracyMag == 1) calib->accuracyMag = LOW;
 8102b82:	4b37      	ldr	r3, [pc, #220]	@ (8102c60 <BNO086_Calibration+0x274>)
 8102b84:	781b      	ldrb	r3, [r3, #0]
 8102b86:	2b01      	cmp	r3, #1
 8102b88:	d103      	bne.n	8102b92 <BNO086_Calibration+0x1a6>
 8102b8a:	683b      	ldr	r3, [r7, #0]
 8102b8c:	2202      	movs	r2, #2
 8102b8e:	70da      	strb	r2, [r3, #3]
 8102b90:	e00e      	b.n	8102bb0 <BNO086_Calibration+0x1c4>
				else if (accuracyMag == 2) calib->accuracyMag = MEDIUM;
 8102b92:	4b33      	ldr	r3, [pc, #204]	@ (8102c60 <BNO086_Calibration+0x274>)
 8102b94:	781b      	ldrb	r3, [r3, #0]
 8102b96:	2b02      	cmp	r3, #2
 8102b98:	d103      	bne.n	8102ba2 <BNO086_Calibration+0x1b6>
 8102b9a:	683b      	ldr	r3, [r7, #0]
 8102b9c:	2203      	movs	r2, #3
 8102b9e:	70da      	strb	r2, [r3, #3]
 8102ba0:	e006      	b.n	8102bb0 <BNO086_Calibration+0x1c4>
				else if (accuracyMag == 3) calib->accuracyMag = HIGH;
 8102ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8102c60 <BNO086_Calibration+0x274>)
 8102ba4:	781b      	ldrb	r3, [r3, #0]
 8102ba6:	2b03      	cmp	r3, #3
 8102ba8:	d102      	bne.n	8102bb0 <BNO086_Calibration+0x1c4>
 8102baa:	683b      	ldr	r3, [r7, #0]
 8102bac:	2204      	movs	r2, #4
 8102bae:	70da      	strb	r2, [r3, #3]



				// Turn the LED and buzzer on when both accuracy and sensorAccuracy are high
				if (accuracy == 3 && sensorAccuracy == 3)
 8102bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8102c64 <BNO086_Calibration+0x278>)
 8102bb2:	781b      	ldrb	r3, [r3, #0]
 8102bb4:	2b03      	cmp	r3, #3
 8102bb6:	d109      	bne.n	8102bcc <BNO086_Calibration+0x1e0>
 8102bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8102c68 <BNO086_Calibration+0x27c>)
 8102bba:	781b      	ldrb	r3, [r3, #0]
 8102bbc:	2b03      	cmp	r3, #3
 8102bbe:	d105      	bne.n	8102bcc <BNO086_Calibration+0x1e0>
				{
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8102bc0:	2201      	movs	r2, #1
 8102bc2:	2101      	movs	r1, #1
 8102bc4:	4829      	ldr	r0, [pc, #164]	@ (8102c6c <BNO086_Calibration+0x280>)
 8102bc6:	f003 fc41 	bl	810644c <HAL_GPIO_WritePin>
 8102bca:	e004      	b.n	8102bd6 <BNO086_Calibration+0x1ea>
				}
				else
				{
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102bcc:	2200      	movs	r2, #0
 8102bce:	2101      	movs	r1, #1
 8102bd0:	4826      	ldr	r0, [pc, #152]	@ (8102c6c <BNO086_Calibration+0x280>)
 8102bd2:	f003 fc3b 	bl	810644c <HAL_GPIO_WritePin>
				}
			}

			HAL_Delay(100);
 8102bd6:	2064      	movs	r0, #100	@ 0x64
 8102bd8:	f000 fdf2 	bl	81037c0 <HAL_Delay>
		while (mode == 1 || mode == 2)
 8102bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8102c50 <BNO086_Calibration+0x264>)
 8102bde:	881b      	ldrh	r3, [r3, #0]
 8102be0:	2b01      	cmp	r3, #1
 8102be2:	f43f af2b 	beq.w	8102a3c <BNO086_Calibration+0x50>
 8102be6:	4b1a      	ldr	r3, [pc, #104]	@ (8102c50 <BNO086_Calibration+0x264>)
 8102be8:	881b      	ldrh	r3, [r3, #0]
 8102bea:	2b02      	cmp	r3, #2
 8102bec:	f43f af26 	beq.w	8102a3c <BNO086_Calibration+0x50>
		}

		// End the loop when B1 pin is push to low, turn LED
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102bf0:	2200      	movs	r2, #0
 8102bf2:	2101      	movs	r1, #1
 8102bf4:	481d      	ldr	r0, [pc, #116]	@ (8102c6c <BNO086_Calibration+0x280>)
 8102bf6:	f003 fc29 	bl	810644c <HAL_GPIO_WritePin>

		// Save current dynamic calibration data (DCD) to memory
		BNO086_saveCalibration();
 8102bfa:	f7ff f9f1 	bl	8101fe0 <BNO086_saveCalibration>
		BNO086_requestCalibrationStatus();
 8102bfe:	f7ff f9d3 	bl	8101fa8 <BNO086_requestCalibrationStatus>

		// Wait for calibration response, timeout if no response
		int counter = 100;
 8102c02:	2364      	movs	r3, #100	@ 0x64
 8102c04:	60fb      	str	r3, [r7, #12]
		while (1)
		{
			if (--counter == 0) break;
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	3b01      	subs	r3, #1
 8102c0a:	60fb      	str	r3, [r7, #12]
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	d011      	beq.n	8102c36 <BNO086_Calibration+0x24a>
			if (BNO086_dataAvailable())
 8102c12:	f7fe fd2d 	bl	8101670 <BNO086_dataAvailable>
 8102c16:	4603      	mov	r3, r0
 8102c18:	2b00      	cmp	r3, #0
 8102c1a:	d008      	beq.n	8102c2e <BNO086_Calibration+0x242>
			{
				// Wait for ME Calibration Response Status byte to go to zero
				if (BNO086_calibrationComplete() == 1)
 8102c1c:	f7ff f8fa 	bl	8101e14 <BNO086_calibrationComplete>
 8102c20:	4603      	mov	r3, r0
 8102c22:	2b01      	cmp	r3, #1
 8102c24:	d103      	bne.n	8102c2e <BNO086_Calibration+0x242>
				{
					calib->CalibrationData = STORED_SUCCESSFULLY;
 8102c26:	683b      	ldr	r3, [r7, #0]
 8102c28:	2201      	movs	r2, #1
 8102c2a:	711a      	strb	r2, [r3, #4]
					break;
 8102c2c:	e004      	b.n	8102c38 <BNO086_Calibration+0x24c>
				}
			}
			HAL_Delay(10);
 8102c2e:	200a      	movs	r0, #10
 8102c30:	f000 fdc6 	bl	81037c0 <HAL_Delay>
			if (--counter == 0) break;
 8102c34:	e7e7      	b.n	8102c06 <BNO086_Calibration+0x21a>
 8102c36:	bf00      	nop
		}

		if (counter == 0)
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d102      	bne.n	8102c44 <BNO086_Calibration+0x258>
		{
			calib->CalibrationData = STORED_FAILED;
 8102c3e:	683b      	ldr	r3, [r7, #0]
 8102c40:	2202      	movs	r2, #2
 8102c42:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8102c44:	bf00      	nop
 8102c46:	3710      	adds	r7, #16
 8102c48:	46bd      	mov	sp, r7
 8102c4a:	bd80      	pop	{r7, pc}
 8102c4c:	58020800 	.word	0x58020800
 8102c50:	10000176 	.word	0x10000176
 8102c54:	1000017a 	.word	0x1000017a
 8102c58:	1000017b 	.word	0x1000017b
 8102c5c:	1000017c 	.word	0x1000017c
 8102c60:	1000017d 	.word	0x1000017d
 8102c64:	10000178 	.word	0x10000178
 8102c68:	10000179 	.word	0x10000179
 8102c6c:	58020400 	.word	0x58020400

08102c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8102c70:	b480      	push	{r7}
 8102c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8102c74:	4b09      	ldr	r3, [pc, #36]	@ (8102c9c <SystemInit+0x2c>)
 8102c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102c7a:	4a08      	ldr	r2, [pc, #32]	@ (8102c9c <SystemInit+0x2c>)
 8102c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8102c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8102c84:	4b05      	ldr	r3, [pc, #20]	@ (8102c9c <SystemInit+0x2c>)
 8102c86:	691b      	ldr	r3, [r3, #16]
 8102c88:	4a04      	ldr	r2, [pc, #16]	@ (8102c9c <SystemInit+0x2c>)
 8102c8a:	f043 0310 	orr.w	r3, r3, #16
 8102c8e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8102c90:	bf00      	nop
 8102c92:	46bd      	mov	sp, r7
 8102c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c98:	4770      	bx	lr
 8102c9a:	bf00      	nop
 8102c9c:	e000ed00 	.word	0xe000ed00

08102ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8102ca0:	b580      	push	{r7, lr}
 8102ca2:	b082      	sub	sp, #8
 8102ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8102ca6:	4b11      	ldr	r3, [pc, #68]	@ (8102cec <MX_DMA_Init+0x4c>)
 8102ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102cac:	4a0f      	ldr	r2, [pc, #60]	@ (8102cec <MX_DMA_Init+0x4c>)
 8102cae:	f043 0301 	orr.w	r3, r3, #1
 8102cb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8102cec <MX_DMA_Init+0x4c>)
 8102cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102cbc:	f003 0301 	and.w	r3, r3, #1
 8102cc0:	607b      	str	r3, [r7, #4]
 8102cc2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8102cc4:	2200      	movs	r2, #0
 8102cc6:	2100      	movs	r1, #0
 8102cc8:	200d      	movs	r0, #13
 8102cca:	f000 fe78 	bl	81039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8102cce:	200d      	movs	r0, #13
 8102cd0:	f000 fe8f 	bl	81039f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8102cd4:	2200      	movs	r2, #0
 8102cd6:	2100      	movs	r1, #0
 8102cd8:	200e      	movs	r0, #14
 8102cda:	f000 fe70 	bl	81039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8102cde:	200e      	movs	r0, #14
 8102ce0:	f000 fe87 	bl	81039f2 <HAL_NVIC_EnableIRQ>

}
 8102ce4:	bf00      	nop
 8102ce6:	3708      	adds	r7, #8
 8102ce8:	46bd      	mov	sp, r7
 8102cea:	bd80      	pop	{r7, pc}
 8102cec:	58024400 	.word	0x58024400

08102cf0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8102cf0:	b580      	push	{r7, lr}
 8102cf2:	b08a      	sub	sp, #40	@ 0x28
 8102cf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102cf6:	f107 0314 	add.w	r3, r7, #20
 8102cfa:	2200      	movs	r2, #0
 8102cfc:	601a      	str	r2, [r3, #0]
 8102cfe:	605a      	str	r2, [r3, #4]
 8102d00:	609a      	str	r2, [r3, #8]
 8102d02:	60da      	str	r2, [r3, #12]
 8102d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102d06:	4b4f      	ldr	r3, [pc, #316]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d0c:	4a4d      	ldr	r2, [pc, #308]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d0e:	f043 0304 	orr.w	r3, r3, #4
 8102d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d16:	4b4b      	ldr	r3, [pc, #300]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d1c:	f003 0304 	and.w	r3, r3, #4
 8102d20:	613b      	str	r3, [r7, #16]
 8102d22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102d24:	4b47      	ldr	r3, [pc, #284]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d2a:	4a46      	ldr	r2, [pc, #280]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d2c:	f043 0301 	orr.w	r3, r3, #1
 8102d30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d34:	4b43      	ldr	r3, [pc, #268]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d3a:	f003 0301 	and.w	r3, r3, #1
 8102d3e:	60fb      	str	r3, [r7, #12]
 8102d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102d42:	4b40      	ldr	r3, [pc, #256]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d48:	4a3e      	ldr	r2, [pc, #248]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d4a:	f043 0302 	orr.w	r3, r3, #2
 8102d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d52:	4b3c      	ldr	r3, [pc, #240]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d58:	f003 0302 	and.w	r3, r3, #2
 8102d5c:	60bb      	str	r3, [r7, #8]
 8102d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102d60:	4b38      	ldr	r3, [pc, #224]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d66:	4a37      	ldr	r2, [pc, #220]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d68:	f043 0308 	orr.w	r3, r3, #8
 8102d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d70:	4b34      	ldr	r3, [pc, #208]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d76:	f003 0308 	and.w	r3, r3, #8
 8102d7a:	607b      	str	r3, [r7, #4]
 8102d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102d7e:	4b31      	ldr	r3, [pc, #196]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d84:	4a2f      	ldr	r2, [pc, #188]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8102d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8102e44 <MX_GPIO_Init+0x154>)
 8102d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102d98:	603b      	str	r3, [r7, #0]
 8102d9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CS_Pin, GPIO_PIN_RESET);
 8102d9c:	2200      	movs	r2, #0
 8102d9e:	2121      	movs	r1, #33	@ 0x21
 8102da0:	4829      	ldr	r0, [pc, #164]	@ (8102e48 <MX_GPIO_Init+0x158>)
 8102da2:	f003 fb53 	bl	810644c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WAK_Pin|RST_Pin, GPIO_PIN_RESET);
 8102da6:	2200      	movs	r2, #0
 8102da8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8102dac:	4827      	ldr	r0, [pc, #156]	@ (8102e4c <MX_GPIO_Init+0x15c>)
 8102dae:	f003 fb4d 	bl	810644c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8102db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102db8:	2300      	movs	r3, #0
 8102dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8102dc0:	f107 0314 	add.w	r3, r7, #20
 8102dc4:	4619      	mov	r1, r3
 8102dc6:	4822      	ldr	r0, [pc, #136]	@ (8102e50 <MX_GPIO_Init+0x160>)
 8102dc8:	f003 f978 	bl	81060bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8102dcc:	2301      	movs	r3, #1
 8102dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102dd0:	2301      	movs	r3, #1
 8102dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102dd4:	2300      	movs	r3, #0
 8102dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102dd8:	2300      	movs	r3, #0
 8102dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8102ddc:	f107 0314 	add.w	r3, r7, #20
 8102de0:	4619      	mov	r1, r3
 8102de2:	4819      	ldr	r0, [pc, #100]	@ (8102e48 <MX_GPIO_Init+0x158>)
 8102de4:	f003 f96a 	bl	81060bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = WAK_Pin|RST_Pin;
 8102de8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8102dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102dee:	2301      	movs	r3, #1
 8102df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102df2:	2300      	movs	r3, #0
 8102df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102df6:	2303      	movs	r3, #3
 8102df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102dfa:	f107 0314 	add.w	r3, r7, #20
 8102dfe:	4619      	mov	r1, r3
 8102e00:	4812      	ldr	r0, [pc, #72]	@ (8102e4c <MX_GPIO_Init+0x15c>)
 8102e02:	f003 f95b 	bl	81060bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8102e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8102e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102e0c:	2300      	movs	r3, #0
 8102e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e10:	2300      	movs	r3, #0
 8102e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8102e14:	f107 0314 	add.w	r3, r7, #20
 8102e18:	4619      	mov	r1, r3
 8102e1a:	480e      	ldr	r0, [pc, #56]	@ (8102e54 <MX_GPIO_Init+0x164>)
 8102e1c:	f003 f94e 	bl	81060bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8102e20:	2320      	movs	r3, #32
 8102e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102e24:	2301      	movs	r3, #1
 8102e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e28:	2300      	movs	r3, #0
 8102e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102e2c:	2303      	movs	r3, #3
 8102e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8102e30:	f107 0314 	add.w	r3, r7, #20
 8102e34:	4619      	mov	r1, r3
 8102e36:	4804      	ldr	r0, [pc, #16]	@ (8102e48 <MX_GPIO_Init+0x158>)
 8102e38:	f003 f940 	bl	81060bc <HAL_GPIO_Init>

}
 8102e3c:	bf00      	nop
 8102e3e:	3728      	adds	r7, #40	@ 0x28
 8102e40:	46bd      	mov	sp, r7
 8102e42:	bd80      	pop	{r7, pc}
 8102e44:	58024400 	.word	0x58024400
 8102e48:	58020400 	.word	0x58020400
 8102e4c:	58020c00 	.word	0x58020c00
 8102e50:	58020800 	.word	0x58020800
 8102e54:	58021800 	.word	0x58021800

08102e58 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8102ed0 <MX_I2C1_Init+0x78>)
 8102e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0040154B;
 8102e62:	4b1a      	ldr	r3, [pc, #104]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e64:	4a1b      	ldr	r2, [pc, #108]	@ (8102ed4 <MX_I2C1_Init+0x7c>)
 8102e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102e68:	4b18      	ldr	r3, [pc, #96]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e6a:	2200      	movs	r2, #0
 8102e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102e6e:	4b17      	ldr	r3, [pc, #92]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e70:	2201      	movs	r2, #1
 8102e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102e74:	4b15      	ldr	r3, [pc, #84]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e76:	2200      	movs	r2, #0
 8102e78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102e7a:	4b14      	ldr	r3, [pc, #80]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e7c:	2200      	movs	r2, #0
 8102e7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102e80:	4b12      	ldr	r3, [pc, #72]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e82:	2200      	movs	r2, #0
 8102e84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102e86:	4b11      	ldr	r3, [pc, #68]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e88:	2200      	movs	r2, #0
 8102e8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e8e:	2200      	movs	r2, #0
 8102e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102e92:	480e      	ldr	r0, [pc, #56]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102e94:	f003 fb6c 	bl	8106570 <HAL_I2C_Init>
 8102e98:	4603      	mov	r3, r0
 8102e9a:	2b00      	cmp	r3, #0
 8102e9c:	d001      	beq.n	8102ea2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102e9e:	f000 f9c9 	bl	8103234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102ea2:	2100      	movs	r1, #0
 8102ea4:	4809      	ldr	r0, [pc, #36]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102ea6:	f005 ffb7 	bl	8108e18 <HAL_I2CEx_ConfigAnalogFilter>
 8102eaa:	4603      	mov	r3, r0
 8102eac:	2b00      	cmp	r3, #0
 8102eae:	d001      	beq.n	8102eb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102eb0:	f000 f9c0 	bl	8103234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102eb4:	2100      	movs	r1, #0
 8102eb6:	4805      	ldr	r0, [pc, #20]	@ (8102ecc <MX_I2C1_Init+0x74>)
 8102eb8:	f005 fff9 	bl	8108eae <HAL_I2CEx_ConfigDigitalFilter>
 8102ebc:	4603      	mov	r3, r0
 8102ebe:	2b00      	cmp	r3, #0
 8102ec0:	d001      	beq.n	8102ec6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8102ec2:	f000 f9b7 	bl	8103234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102ec6:	bf00      	nop
 8102ec8:	bd80      	pop	{r7, pc}
 8102eca:	bf00      	nop
 8102ecc:	10000180 	.word	0x10000180
 8102ed0:	40005400 	.word	0x40005400
 8102ed4:	0040154b 	.word	0x0040154b

08102ed8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8102ed8:	b580      	push	{r7, lr}
 8102eda:	b0ba      	sub	sp, #232	@ 0xe8
 8102edc:	af00      	add	r7, sp, #0
 8102ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ee0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102ee4:	2200      	movs	r2, #0
 8102ee6:	601a      	str	r2, [r3, #0]
 8102ee8:	605a      	str	r2, [r3, #4]
 8102eea:	609a      	str	r2, [r3, #8]
 8102eec:	60da      	str	r2, [r3, #12]
 8102eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102ef0:	f107 0310 	add.w	r3, r7, #16
 8102ef4:	22c0      	movs	r2, #192	@ 0xc0
 8102ef6:	2100      	movs	r1, #0
 8102ef8:	4618      	mov	r0, r3
 8102efa:	f008 ffbf 	bl	810be7c <memset>
  if(i2cHandle->Instance==I2C1)
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a5d      	ldr	r2, [pc, #372]	@ (8103078 <HAL_I2C_MspInit+0x1a0>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	f040 80b2 	bne.w	810306e <HAL_I2C_MspInit+0x196>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102f0a:	f04f 0208 	mov.w	r2, #8
 8102f0e:	f04f 0300 	mov.w	r3, #0
 8102f12:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102f16:	2300      	movs	r3, #0
 8102f18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102f1c:	f107 0310 	add.w	r3, r7, #16
 8102f20:	4618      	mov	r0, r3
 8102f22:	f006 fa13 	bl	810934c <HAL_RCCEx_PeriphCLKConfig>
 8102f26:	4603      	mov	r3, r0
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d001      	beq.n	8102f30 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8102f2c:	f000 f982 	bl	8103234 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102f30:	4b52      	ldr	r3, [pc, #328]	@ (810307c <HAL_I2C_MspInit+0x1a4>)
 8102f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f36:	4a51      	ldr	r2, [pc, #324]	@ (810307c <HAL_I2C_MspInit+0x1a4>)
 8102f38:	f043 0302 	orr.w	r3, r3, #2
 8102f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102f40:	4b4e      	ldr	r3, [pc, #312]	@ (810307c <HAL_I2C_MspInit+0x1a4>)
 8102f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f46:	f003 0302 	and.w	r3, r3, #2
 8102f4a:	60fb      	str	r3, [r7, #12]
 8102f4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102f4e:	23c0      	movs	r3, #192	@ 0xc0
 8102f50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102f54:	2312      	movs	r3, #18
 8102f56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8102f5a:	2301      	movs	r3, #1
 8102f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102f60:	2302      	movs	r3, #2
 8102f62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102f66:	2304      	movs	r3, #4
 8102f68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102f6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102f70:	4619      	mov	r1, r3
 8102f72:	4843      	ldr	r0, [pc, #268]	@ (8103080 <HAL_I2C_MspInit+0x1a8>)
 8102f74:	f003 f8a2 	bl	81060bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102f78:	4b40      	ldr	r3, [pc, #256]	@ (810307c <HAL_I2C_MspInit+0x1a4>)
 8102f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f7e:	4a3f      	ldr	r2, [pc, #252]	@ (810307c <HAL_I2C_MspInit+0x1a4>)
 8102f80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102f84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102f88:	4b3c      	ldr	r3, [pc, #240]	@ (810307c <HAL_I2C_MspInit+0x1a4>)
 8102f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102f92:	60bb      	str	r3, [r7, #8]
 8102f94:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8102f96:	4b3b      	ldr	r3, [pc, #236]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102f98:	4a3b      	ldr	r2, [pc, #236]	@ (8103088 <HAL_I2C_MspInit+0x1b0>)
 8102f9a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8102f9c:	4b39      	ldr	r3, [pc, #228]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102f9e:	2222      	movs	r2, #34	@ 0x22
 8102fa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102fa2:	4b38      	ldr	r3, [pc, #224]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fa4:	2240      	movs	r2, #64	@ 0x40
 8102fa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102fa8:	4b36      	ldr	r3, [pc, #216]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102faa:	2200      	movs	r2, #0
 8102fac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102fae:	4b35      	ldr	r3, [pc, #212]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102fb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102fb6:	4b33      	ldr	r3, [pc, #204]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fb8:	2200      	movs	r2, #0
 8102fba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102fbc:	4b31      	ldr	r3, [pc, #196]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fbe:	2200      	movs	r2, #0
 8102fc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8102fc2:	4b30      	ldr	r3, [pc, #192]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fc4:	2200      	movs	r2, #0
 8102fc6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8102fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8102fce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fd2:	2200      	movs	r2, #0
 8102fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8102fd6:	482b      	ldr	r0, [pc, #172]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fd8:	f000 fd3a 	bl	8103a50 <HAL_DMA_Init>
 8102fdc:	4603      	mov	r3, r0
 8102fde:	2b00      	cmp	r3, #0
 8102fe0:	d001      	beq.n	8102fe6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8102fe2:	f000 f927 	bl	8103234 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	4a26      	ldr	r2, [pc, #152]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fea:	639a      	str	r2, [r3, #56]	@ 0x38
 8102fec:	4a25      	ldr	r2, [pc, #148]	@ (8103084 <HAL_I2C_MspInit+0x1ac>)
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream3;
 8102ff2:	4b26      	ldr	r3, [pc, #152]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8102ff4:	4a26      	ldr	r2, [pc, #152]	@ (8103090 <HAL_I2C_MspInit+0x1b8>)
 8102ff6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8102ff8:	4b24      	ldr	r3, [pc, #144]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8102ffa:	2221      	movs	r2, #33	@ 0x21
 8102ffc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102ffe:	4b23      	ldr	r3, [pc, #140]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103000:	2200      	movs	r2, #0
 8103002:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103004:	4b21      	ldr	r3, [pc, #132]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103006:	2200      	movs	r2, #0
 8103008:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810300a:	4b20      	ldr	r3, [pc, #128]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 810300c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103010:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103012:	4b1e      	ldr	r3, [pc, #120]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103014:	2200      	movs	r2, #0
 8103016:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103018:	4b1c      	ldr	r3, [pc, #112]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 810301a:	2200      	movs	r2, #0
 810301c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 810301e:	4b1b      	ldr	r3, [pc, #108]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103020:	2200      	movs	r2, #0
 8103022:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8103024:	4b19      	ldr	r3, [pc, #100]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103026:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810302a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810302c:	4b17      	ldr	r3, [pc, #92]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 810302e:	2200      	movs	r2, #0
 8103030:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8103032:	4816      	ldr	r0, [pc, #88]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103034:	f000 fd0c 	bl	8103a50 <HAL_DMA_Init>
 8103038:	4603      	mov	r3, r0
 810303a:	2b00      	cmp	r3, #0
 810303c:	d001      	beq.n	8103042 <HAL_I2C_MspInit+0x16a>
    {
      Error_Handler();
 810303e:	f000 f8f9 	bl	8103234 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	4a11      	ldr	r2, [pc, #68]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 8103046:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103048:	4a10      	ldr	r2, [pc, #64]	@ (810308c <HAL_I2C_MspInit+0x1b4>)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 810304e:	2200      	movs	r2, #0
 8103050:	2100      	movs	r1, #0
 8103052:	201f      	movs	r0, #31
 8103054:	f000 fcb3 	bl	81039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8103058:	201f      	movs	r0, #31
 810305a:	f000 fcca 	bl	81039f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 810305e:	2200      	movs	r2, #0
 8103060:	2100      	movs	r1, #0
 8103062:	2020      	movs	r0, #32
 8103064:	f000 fcab 	bl	81039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8103068:	2020      	movs	r0, #32
 810306a:	f000 fcc2 	bl	81039f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 810306e:	bf00      	nop
 8103070:	37e8      	adds	r7, #232	@ 0xe8
 8103072:	46bd      	mov	sp, r7
 8103074:	bd80      	pop	{r7, pc}
 8103076:	bf00      	nop
 8103078:	40005400 	.word	0x40005400
 810307c:	58024400 	.word	0x58024400
 8103080:	58020400 	.word	0x58020400
 8103084:	100001d4 	.word	0x100001d4
 8103088:	40020040 	.word	0x40020040
 810308c:	1000024c 	.word	0x1000024c
 8103090:	40020058 	.word	0x40020058

08103094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8103094:	b580      	push	{r7, lr}
 8103096:	b082      	sub	sp, #8
 8103098:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810309a:	4b39      	ldr	r3, [pc, #228]	@ (8103180 <main+0xec>)
 810309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030a0:	4a37      	ldr	r2, [pc, #220]	@ (8103180 <main+0xec>)
 81030a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81030a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81030aa:	4b35      	ldr	r3, [pc, #212]	@ (8103180 <main+0xec>)
 81030ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81030b4:	607b      	str	r3, [r7, #4]
 81030b6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81030b8:	2001      	movs	r0, #1
 81030ba:	f003 fa0f 	bl	81064dc <HAL_HSEM_ActivateNotification>
//  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81030be:	f005 ffbd 	bl	810903c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81030c2:	2201      	movs	r2, #1
 81030c4:	2102      	movs	r1, #2
 81030c6:	2000      	movs	r0, #0
 81030c8:	f005 ff3e 	bl	8108f48 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81030cc:	4b2d      	ldr	r3, [pc, #180]	@ (8103184 <main+0xf0>)
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	091b      	lsrs	r3, r3, #4
 81030d2:	f003 030f 	and.w	r3, r3, #15
 81030d6:	2b07      	cmp	r3, #7
 81030d8:	d108      	bne.n	81030ec <main+0x58>
 81030da:	4b2b      	ldr	r3, [pc, #172]	@ (8103188 <main+0xf4>)
 81030dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81030e0:	4a29      	ldr	r2, [pc, #164]	@ (8103188 <main+0xf4>)
 81030e2:	f043 0301 	orr.w	r3, r3, #1
 81030e6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81030ea:	e007      	b.n	81030fc <main+0x68>
 81030ec:	4b26      	ldr	r3, [pc, #152]	@ (8103188 <main+0xf4>)
 81030ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81030f2:	4a25      	ldr	r2, [pc, #148]	@ (8103188 <main+0xf4>)
 81030f4:	f043 0301 	orr.w	r3, r3, #1
 81030f8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81030fc:	f000 faac 	bl	8103658 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8103100:	f7ff fdce 	bl	8102ca0 <MX_DMA_Init>
  MX_GPIO_Init();
 8103104:	f7ff fdf4 	bl	8102cf0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8103108:	f000 f89a 	bl	8103240 <MX_SPI1_Init>
  MX_TIM2_Init();
 810310c:	f000 fa08 	bl	8103520 <MX_TIM2_Init>
  MX_I2C1_Init();
 8103110:	f7ff fea2 	bl	8102e58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    // ================================================== BNO086 ==================================================//
  	BNO086_Calibration(&BNO086, &CALIBRATE);
 8103114:	491d      	ldr	r1, [pc, #116]	@ (810318c <main+0xf8>)
 8103116:	481e      	ldr	r0, [pc, #120]	@ (8103190 <main+0xfc>)
 8103118:	f7ff fc68 	bl	81029ec <BNO086_Calibration>
	BNO086_Initialization(&BNO086);
 810311c:	481c      	ldr	r0, [pc, #112]	@ (8103190 <main+0xfc>)
 810311e:	f7fe fa33 	bl	8101588 <BNO086_Initialization>
	BNO086_enableRotationVector(2500); //enable rotation vector at 400Hz (2500 microsecs)
 8103122:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8103126:	f7fe fe14 	bl	8101d52 <BNO086_enableRotationVector>
	//	  BNO086_enableGameRotationVector(11111); //enable Gaming Rotation vector at 90Hz (2500 microsecs)

	BNO086_enableAccelerometer(2000); //enable Accelerometer at 400Hz (2500 microsecs)
 810312a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 810312e:	f7fe fe2e 	bl	8101d8e <BNO086_enableAccelerometer>
	BNO086_enableLinearAccelerometer(2500); //enable Linear Accelerometer at 400Hz (2500 microsecs)
 8103132:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8103136:	f7fe fe39 	bl	8101dac <BNO086_enableLinearAccelerometer>
	BNO086_enableGyro(2500); //enable Gyrometer  at 400Hz (2500 microsecs)
 810313a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 810313e:	f7fe fe44 	bl	8101dca <BNO086_enableGyro>
	BNO086_enableMagnetometer(10000); //enable Magnetometer at 100Hz (10000 microsecs)
 8103142:	f242 7010 	movw	r0, #10000	@ 0x2710
 8103146:	f7fe fe4f 	bl	8101de8 <BNO086_enableMagnetometer>

	// ================================================== BNO055 ==================================================//
    HALCHECK(BNO055_Init(&BNO055, &hi2c1, 0, NDOF))
 810314a:	e002      	b.n	8103152 <main+0xbe>
 810314c:	2064      	movs	r0, #100	@ 0x64
 810314e:	f000 fb37 	bl	81037c0 <HAL_Delay>
 8103152:	230c      	movs	r3, #12
 8103154:	2200      	movs	r2, #0
 8103156:	490f      	ldr	r1, [pc, #60]	@ (8103194 <main+0x100>)
 8103158:	480f      	ldr	r0, [pc, #60]	@ (8103198 <main+0x104>)
 810315a:	f7fd fd79 	bl	8100c50 <BNO055_Init>
 810315e:	4603      	mov	r3, r0
 8103160:	2b00      	cmp	r3, #0
 8103162:	d1f3      	bne.n	810314c <main+0xb8>

    #ifdef BNO_CALIB_ON // For Calibration, Enable at Common/BNO055_I2C/BNO055_config.h
    BNO055_Calibrated(&BNO055, &BNO055_stat, &BNO055_off);
    #endif
    BNO055_SetOffsets(&BNO055, &BNO055_off);
 8103164:	490d      	ldr	r1, [pc, #52]	@ (810319c <main+0x108>)
 8103166:	480c      	ldr	r0, [pc, #48]	@ (8103198 <main+0x104>)
 8103168:	f7fe f84e 	bl	8101208 <BNO055_SetOffsets>
    BNO055_SetAxis(&BNO055, P0_Config, P0_Sign);
 810316c:	2204      	movs	r2, #4
 810316e:	2121      	movs	r1, #33	@ 0x21
 8103170:	4809      	ldr	r0, [pc, #36]	@ (8103198 <main+0x104>)
 8103172:	f7fe f8fc 	bl	810136e <BNO055_SetAxis>

    // ================================================== Timer Interrupt ==================================================//
    HAL_TIM_Base_Start_IT(&htim2);
 8103176:	480a      	ldr	r0, [pc, #40]	@ (81031a0 <main+0x10c>)
 8103178:	f008 f9f2 	bl	810b560 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810317c:	bf00      	nop
 810317e:	e7fd      	b.n	810317c <main+0xe8>
 8103180:	58024400 	.word	0x58024400
 8103184:	e000ed00 	.word	0xe000ed00
 8103188:	58026400 	.word	0x58026400
 810318c:	10000310 	.word	0x10000310
 8103190:	100002c4 	.word	0x100002c4
 8103194:	10000180 	.word	0x10000180
 8103198:	10000318 	.word	0x10000318
 810319c:	10000000 	.word	0x10000000
 81031a0:	10000488 	.word	0x10000488

081031a4 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81031a4:	b580      	push	{r7, lr}
 81031a6:	b082      	sub	sp, #8
 81031a8:	af00      	add	r7, sp, #0
 81031aa:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	4a12      	ldr	r2, [pc, #72]	@ (81031f8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 81031b0:	4293      	cmp	r3, r2
 81031b2:	d11c      	bne.n	81031ee <HAL_TIM_PeriodElapsedCallback+0x4a>
		HAL_HSEM_DeactivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81031b4:	2001      	movs	r0, #1
 81031b6:	f003 f9a3 	bl	8106500 <HAL_HSEM_DeactivateNotification>

		if(BNO086_dataAvailable() == 1){
 81031ba:	f7fe fa59 	bl	8101670 <BNO086_dataAvailable>
 81031be:	4603      	mov	r3, r0
 81031c0:	2b01      	cmp	r3, #1
 81031c2:	d106      	bne.n	81031d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
			BNO086_getData(&BNO086, UNIT_RAD);
 81031c4:	2100      	movs	r1, #0
 81031c6:	480d      	ldr	r0, [pc, #52]	@ (81031fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 81031c8:	f7ff fa76 	bl	81026b8 <BNO086_getData>
			BNO086_SAVE_HSEM(&BNO086);
 81031cc:	480b      	ldr	r0, [pc, #44]	@ (81031fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 81031ce:	f7ff fb08 	bl	81027e2 <BNO086_SAVE_HSEM>
		}

		HAL_HSEM_DeactivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 81031d2:	2002      	movs	r0, #2
 81031d4:	f003 f994 	bl	8106500 <HAL_HSEM_DeactivateNotification>
		if (BNO055.flag == HAL_OK)
 81031d8:	4b09      	ldr	r3, [pc, #36]	@ (8103200 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 81031da:	799b      	ldrb	r3, [r3, #6]
 81031dc:	2b00      	cmp	r3, #0
 81031de:	d106      	bne.n	81031ee <HAL_TIM_PeriodElapsedCallback+0x4a>
			{
				BNO055_Read_DMA(&BNO055, 0);
 81031e0:	2100      	movs	r1, #0
 81031e2:	4807      	ldr	r0, [pc, #28]	@ (8103200 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 81031e4:	f7fd fe18 	bl	8100e18 <BNO055_Read_DMA>
				BNO055.flag = HAL_BUSY;
 81031e8:	4b05      	ldr	r3, [pc, #20]	@ (8103200 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 81031ea:	2202      	movs	r2, #2
 81031ec:	719a      	strb	r2, [r3, #6]

		}
	}

}
 81031ee:	bf00      	nop
 81031f0:	3708      	adds	r7, #8
 81031f2:	46bd      	mov	sp, r7
 81031f4:	bd80      	pop	{r7, pc}
 81031f6:	bf00      	nop
 81031f8:	10000488 	.word	0x10000488
 81031fc:	100002c4 	.word	0x100002c4
 8103200:	10000318 	.word	0x10000318

08103204 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8103204:	b580      	push	{r7, lr}
 8103206:	b082      	sub	sp, #8
 8103208:	af00      	add	r7, sp, #0
 810320a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == BNO055.hi2cx->Instance) {
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681a      	ldr	r2, [r3, #0]
 8103210:	4b07      	ldr	r3, [pc, #28]	@ (8103230 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8103212:	681b      	ldr	r3, [r3, #0]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	429a      	cmp	r2, r3
 8103218:	d105      	bne.n	8103226 <HAL_I2C_MemRxCpltCallback+0x22>
		BNO055.flag = HAL_OK;
 810321a:	4b05      	ldr	r3, [pc, #20]	@ (8103230 <HAL_I2C_MemRxCpltCallback+0x2c>)
 810321c:	2200      	movs	r2, #0
 810321e:	719a      	strb	r2, [r3, #6]
		BNO055_SAVE_HSEM(&BNO055);
 8103220:	4803      	ldr	r0, [pc, #12]	@ (8103230 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8103222:	f7fe f92b 	bl	810147c <BNO055_SAVE_HSEM>

	}
}
 8103226:	bf00      	nop
 8103228:	3708      	adds	r7, #8
 810322a:	46bd      	mov	sp, r7
 810322c:	bd80      	pop	{r7, pc}
 810322e:	bf00      	nop
 8103230:	10000318 	.word	0x10000318

08103234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8103234:	b480      	push	{r7}
 8103236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8103238:	b672      	cpsid	i
}
 810323a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810323c:	bf00      	nop
 810323e:	e7fd      	b.n	810323c <Error_Handler+0x8>

08103240 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8103240:	b580      	push	{r7, lr}
 8103242:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8103244:	4b29      	ldr	r3, [pc, #164]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103246:	4a2a      	ldr	r2, [pc, #168]	@ (81032f0 <MX_SPI1_Init+0xb0>)
 8103248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810324a:	4b28      	ldr	r3, [pc, #160]	@ (81032ec <MX_SPI1_Init+0xac>)
 810324c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8103250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8103252:	4b26      	ldr	r3, [pc, #152]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103254:	2200      	movs	r2, #0
 8103256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8103258:	4b24      	ldr	r3, [pc, #144]	@ (81032ec <MX_SPI1_Init+0xac>)
 810325a:	2207      	movs	r2, #7
 810325c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 810325e:	4b23      	ldr	r3, [pc, #140]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8103264:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8103266:	4b21      	ldr	r3, [pc, #132]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103268:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810326c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810326e:	4b1f      	ldr	r3, [pc, #124]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103270:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8103274:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8103276:	4b1d      	ldr	r3, [pc, #116]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103278:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810327c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810327e:	4b1b      	ldr	r3, [pc, #108]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103280:	2200      	movs	r2, #0
 8103282:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8103284:	4b19      	ldr	r3, [pc, #100]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103286:	2200      	movs	r2, #0
 8103288:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810328a:	4b18      	ldr	r3, [pc, #96]	@ (81032ec <MX_SPI1_Init+0xac>)
 810328c:	2200      	movs	r2, #0
 810328e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8103290:	4b16      	ldr	r3, [pc, #88]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103292:	2200      	movs	r2, #0
 8103294:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8103296:	4b15      	ldr	r3, [pc, #84]	@ (81032ec <MX_SPI1_Init+0xac>)
 8103298:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810329c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810329e:	4b13      	ldr	r3, [pc, #76]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032a0:	2200      	movs	r2, #0
 81032a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81032a4:	4b11      	ldr	r3, [pc, #68]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032a6:	2200      	movs	r2, #0
 81032a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81032aa:	4b10      	ldr	r3, [pc, #64]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032ac:	2200      	movs	r2, #0
 81032ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81032b0:	4b0e      	ldr	r3, [pc, #56]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032b2:	2200      	movs	r2, #0
 81032b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81032b6:	4b0d      	ldr	r3, [pc, #52]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032b8:	2200      	movs	r2, #0
 81032ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81032bc:	4b0b      	ldr	r3, [pc, #44]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032be:	2200      	movs	r2, #0
 81032c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81032c2:	4b0a      	ldr	r3, [pc, #40]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032c4:	2200      	movs	r2, #0
 81032c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 81032c8:	4b08      	ldr	r3, [pc, #32]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81032ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81032d0:	4b06      	ldr	r3, [pc, #24]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032d2:	2200      	movs	r2, #0
 81032d4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81032d6:	4805      	ldr	r0, [pc, #20]	@ (81032ec <MX_SPI1_Init+0xac>)
 81032d8:	f007 fba6 	bl	810aa28 <HAL_SPI_Init>
 81032dc:	4603      	mov	r3, r0
 81032de:	2b00      	cmp	r3, #0
 81032e0:	d001      	beq.n	81032e6 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 81032e2:	f7ff ffa7 	bl	8103234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81032e6:	bf00      	nop
 81032e8:	bd80      	pop	{r7, pc}
 81032ea:	bf00      	nop
 81032ec:	10000400 	.word	0x10000400
 81032f0:	40013000 	.word	0x40013000

081032f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81032f4:	b580      	push	{r7, lr}
 81032f6:	b0bc      	sub	sp, #240	@ 0xf0
 81032f8:	af00      	add	r7, sp, #0
 81032fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81032fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8103300:	2200      	movs	r2, #0
 8103302:	601a      	str	r2, [r3, #0]
 8103304:	605a      	str	r2, [r3, #4]
 8103306:	609a      	str	r2, [r3, #8]
 8103308:	60da      	str	r2, [r3, #12]
 810330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810330c:	f107 0318 	add.w	r3, r7, #24
 8103310:	22c0      	movs	r2, #192	@ 0xc0
 8103312:	2100      	movs	r1, #0
 8103314:	4618      	mov	r0, r3
 8103316:	f008 fdb1 	bl	810be7c <memset>
  if(spiHandle->Instance==SPI1)
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	681b      	ldr	r3, [r3, #0]
 810331e:	4a38      	ldr	r2, [pc, #224]	@ (8103400 <HAL_SPI_MspInit+0x10c>)
 8103320:	4293      	cmp	r3, r2
 8103322:	d168      	bne.n	81033f6 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8103324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8103328:	f04f 0300 	mov.w	r3, #0
 810332c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8103330:	2300      	movs	r3, #0
 8103332:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103334:	f107 0318 	add.w	r3, r7, #24
 8103338:	4618      	mov	r0, r3
 810333a:	f006 f807 	bl	810934c <HAL_RCCEx_PeriphCLKConfig>
 810333e:	4603      	mov	r3, r0
 8103340:	2b00      	cmp	r3, #0
 8103342:	d001      	beq.n	8103348 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8103344:	f7ff ff76 	bl	8103234 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8103348:	4b2e      	ldr	r3, [pc, #184]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 810334a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810334e:	4a2d      	ldr	r2, [pc, #180]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 8103350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8103354:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103358:	4b2a      	ldr	r3, [pc, #168]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 810335a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810335e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103362:	617b      	str	r3, [r7, #20]
 8103364:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103366:	4b27      	ldr	r3, [pc, #156]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 8103368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810336c:	4a25      	ldr	r2, [pc, #148]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 810336e:	f043 0301 	orr.w	r3, r3, #1
 8103372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103376:	4b23      	ldr	r3, [pc, #140]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 8103378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810337c:	f003 0301 	and.w	r3, r3, #1
 8103380:	613b      	str	r3, [r7, #16]
 8103382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103384:	4b1f      	ldr	r3, [pc, #124]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 8103386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810338a:	4a1e      	ldr	r2, [pc, #120]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 810338c:	f043 0308 	orr.w	r3, r3, #8
 8103390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103394:	4b1b      	ldr	r3, [pc, #108]	@ (8103404 <HAL_SPI_MspInit+0x110>)
 8103396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810339a:	f003 0308 	and.w	r3, r3, #8
 810339e:	60fb      	str	r3, [r7, #12]
 81033a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81033a2:	2360      	movs	r3, #96	@ 0x60
 81033a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81033a8:	2302      	movs	r3, #2
 81033aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81033ae:	2300      	movs	r3, #0
 81033b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81033b4:	2300      	movs	r3, #0
 81033b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81033ba:	2305      	movs	r3, #5
 81033bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81033c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81033c4:	4619      	mov	r1, r3
 81033c6:	4810      	ldr	r0, [pc, #64]	@ (8103408 <HAL_SPI_MspInit+0x114>)
 81033c8:	f002 fe78 	bl	81060bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81033cc:	2380      	movs	r3, #128	@ 0x80
 81033ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81033d2:	2302      	movs	r3, #2
 81033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81033d8:	2300      	movs	r3, #0
 81033da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81033de:	2300      	movs	r3, #0
 81033e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81033e4:	2305      	movs	r3, #5
 81033e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81033ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81033ee:	4619      	mov	r1, r3
 81033f0:	4806      	ldr	r0, [pc, #24]	@ (810340c <HAL_SPI_MspInit+0x118>)
 81033f2:	f002 fe63 	bl	81060bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81033f6:	bf00      	nop
 81033f8:	37f0      	adds	r7, #240	@ 0xf0
 81033fa:	46bd      	mov	sp, r7
 81033fc:	bd80      	pop	{r7, pc}
 81033fe:	bf00      	nop
 8103400:	40013000 	.word	0x40013000
 8103404:	58024400 	.word	0x58024400
 8103408:	58020000 	.word	0x58020000
 810340c:	58020c00 	.word	0x58020c00

08103410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103410:	b580      	push	{r7, lr}
 8103412:	b082      	sub	sp, #8
 8103414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103416:	4b0d      	ldr	r3, [pc, #52]	@ (810344c <HAL_MspInit+0x3c>)
 8103418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810341c:	4a0b      	ldr	r2, [pc, #44]	@ (810344c <HAL_MspInit+0x3c>)
 810341e:	f043 0302 	orr.w	r3, r3, #2
 8103422:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103426:	4b09      	ldr	r3, [pc, #36]	@ (810344c <HAL_MspInit+0x3c>)
 8103428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810342c:	f003 0302 	and.w	r3, r3, #2
 8103430:	607b      	str	r3, [r7, #4]
 8103432:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8103434:	2200      	movs	r2, #0
 8103436:	2100      	movs	r1, #0
 8103438:	207e      	movs	r0, #126	@ 0x7e
 810343a:	f000 fac0 	bl	81039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810343e:	207e      	movs	r0, #126	@ 0x7e
 8103440:	f000 fad7 	bl	81039f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103444:	bf00      	nop
 8103446:	3708      	adds	r7, #8
 8103448:	46bd      	mov	sp, r7
 810344a:	bd80      	pop	{r7, pc}
 810344c:	58024400 	.word	0x58024400

08103450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103450:	b480      	push	{r7}
 8103452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8103454:	bf00      	nop
 8103456:	e7fd      	b.n	8103454 <NMI_Handler+0x4>

08103458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103458:	b480      	push	{r7}
 810345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810345c:	bf00      	nop
 810345e:	e7fd      	b.n	810345c <HardFault_Handler+0x4>

08103460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103460:	b480      	push	{r7}
 8103462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103464:	bf00      	nop
 8103466:	e7fd      	b.n	8103464 <MemManage_Handler+0x4>

08103468 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103468:	b480      	push	{r7}
 810346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810346c:	bf00      	nop
 810346e:	e7fd      	b.n	810346c <BusFault_Handler+0x4>

08103470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8103470:	b480      	push	{r7}
 8103472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103474:	bf00      	nop
 8103476:	e7fd      	b.n	8103474 <UsageFault_Handler+0x4>

08103478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8103478:	b480      	push	{r7}
 810347a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810347c:	bf00      	nop
 810347e:	46bd      	mov	sp, r7
 8103480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103484:	4770      	bx	lr

08103486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103486:	b480      	push	{r7}
 8103488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810348a:	bf00      	nop
 810348c:	46bd      	mov	sp, r7
 810348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103492:	4770      	bx	lr

08103494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8103494:	b480      	push	{r7}
 8103496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103498:	bf00      	nop
 810349a:	46bd      	mov	sp, r7
 810349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034a0:	4770      	bx	lr

081034a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81034a2:	b580      	push	{r7, lr}
 81034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81034a6:	f000 f96b 	bl	8103780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81034aa:	bf00      	nop
 81034ac:	bd80      	pop	{r7, pc}
	...

081034b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 81034b0:	b580      	push	{r7, lr}
 81034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 81034b4:	4802      	ldr	r0, [pc, #8]	@ (81034c0 <DMA1_Stream2_IRQHandler+0x10>)
 81034b6:	f001 fad5 	bl	8104a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 81034ba:	bf00      	nop
 81034bc:	bd80      	pop	{r7, pc}
 81034be:	bf00      	nop
 81034c0:	100001d4 	.word	0x100001d4

081034c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 81034c4:	b580      	push	{r7, lr}
 81034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81034c8:	4802      	ldr	r0, [pc, #8]	@ (81034d4 <DMA1_Stream3_IRQHandler+0x10>)
 81034ca:	f001 facb 	bl	8104a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 81034ce:	bf00      	nop
 81034d0:	bd80      	pop	{r7, pc}
 81034d2:	bf00      	nop
 81034d4:	1000024c 	.word	0x1000024c

081034d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81034d8:	b580      	push	{r7, lr}
 81034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81034dc:	4802      	ldr	r0, [pc, #8]	@ (81034e8 <TIM2_IRQHandler+0x10>)
 81034de:	f008 f8b7 	bl	810b650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81034e2:	bf00      	nop
 81034e4:	bd80      	pop	{r7, pc}
 81034e6:	bf00      	nop
 81034e8:	10000488 	.word	0x10000488

081034ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 81034ec:	b580      	push	{r7, lr}
 81034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 81034f0:	4802      	ldr	r0, [pc, #8]	@ (81034fc <I2C1_EV_IRQHandler+0x10>)
 81034f2:	f003 fbed 	bl	8106cd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 81034f6:	bf00      	nop
 81034f8:	bd80      	pop	{r7, pc}
 81034fa:	bf00      	nop
 81034fc:	10000180 	.word	0x10000180

08103500 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8103500:	b580      	push	{r7, lr}
 8103502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8103504:	4802      	ldr	r0, [pc, #8]	@ (8103510 <I2C1_ER_IRQHandler+0x10>)
 8103506:	f003 fbfd 	bl	8106d04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 810350a:	bf00      	nop
 810350c:	bd80      	pop	{r7, pc}
 810350e:	bf00      	nop
 8103510:	10000180 	.word	0x10000180

08103514 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8103514:	b580      	push	{r7, lr}
 8103516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8103518:	f003 f806 	bl	8106528 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810351c:	bf00      	nop
 810351e:	bd80      	pop	{r7, pc}

08103520 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8103520:	b580      	push	{r7, lr}
 8103522:	b088      	sub	sp, #32
 8103524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103526:	f107 0310 	add.w	r3, r7, #16
 810352a:	2200      	movs	r2, #0
 810352c:	601a      	str	r2, [r3, #0]
 810352e:	605a      	str	r2, [r3, #4]
 8103530:	609a      	str	r2, [r3, #8]
 8103532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103534:	1d3b      	adds	r3, r7, #4
 8103536:	2200      	movs	r2, #0
 8103538:	601a      	str	r2, [r3, #0]
 810353a:	605a      	str	r2, [r3, #4]
 810353c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810353e:	4b1d      	ldr	r3, [pc, #116]	@ (81035b4 <MX_TIM2_Init+0x94>)
 8103540:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8103544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8103546:	4b1b      	ldr	r3, [pc, #108]	@ (81035b4 <MX_TIM2_Init+0x94>)
 8103548:	22a9      	movs	r2, #169	@ 0xa9
 810354a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810354c:	4b19      	ldr	r3, [pc, #100]	@ (81035b4 <MX_TIM2_Init+0x94>)
 810354e:	2200      	movs	r2, #0
 8103550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8103552:	4b18      	ldr	r3, [pc, #96]	@ (81035b4 <MX_TIM2_Init+0x94>)
 8103554:	2263      	movs	r2, #99	@ 0x63
 8103556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103558:	4b16      	ldr	r3, [pc, #88]	@ (81035b4 <MX_TIM2_Init+0x94>)
 810355a:	2200      	movs	r2, #0
 810355c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810355e:	4b15      	ldr	r3, [pc, #84]	@ (81035b4 <MX_TIM2_Init+0x94>)
 8103560:	2200      	movs	r2, #0
 8103562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8103564:	4813      	ldr	r0, [pc, #76]	@ (81035b4 <MX_TIM2_Init+0x94>)
 8103566:	f007 ffa4 	bl	810b4b2 <HAL_TIM_Base_Init>
 810356a:	4603      	mov	r3, r0
 810356c:	2b00      	cmp	r3, #0
 810356e:	d001      	beq.n	8103574 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8103570:	f7ff fe60 	bl	8103234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8103578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 810357a:	f107 0310 	add.w	r3, r7, #16
 810357e:	4619      	mov	r1, r3
 8103580:	480c      	ldr	r0, [pc, #48]	@ (81035b4 <MX_TIM2_Init+0x94>)
 8103582:	f008 f96d 	bl	810b860 <HAL_TIM_ConfigClockSource>
 8103586:	4603      	mov	r3, r0
 8103588:	2b00      	cmp	r3, #0
 810358a:	d001      	beq.n	8103590 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 810358c:	f7ff fe52 	bl	8103234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8103590:	2320      	movs	r3, #32
 8103592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103594:	2300      	movs	r3, #0
 8103596:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8103598:	1d3b      	adds	r3, r7, #4
 810359a:	4619      	mov	r1, r3
 810359c:	4805      	ldr	r0, [pc, #20]	@ (81035b4 <MX_TIM2_Init+0x94>)
 810359e:	f008 fbc1 	bl	810bd24 <HAL_TIMEx_MasterConfigSynchronization>
 81035a2:	4603      	mov	r3, r0
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	d001      	beq.n	81035ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 81035a8:	f7ff fe44 	bl	8103234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81035ac:	bf00      	nop
 81035ae:	3720      	adds	r7, #32
 81035b0:	46bd      	mov	sp, r7
 81035b2:	bd80      	pop	{r7, pc}
 81035b4:	10000488 	.word	0x10000488

081035b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 81035b8:	b580      	push	{r7, lr}
 81035ba:	b084      	sub	sp, #16
 81035bc:	af00      	add	r7, sp, #0
 81035be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81035c8:	d116      	bne.n	81035f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 81035ca:	4b0d      	ldr	r3, [pc, #52]	@ (8103600 <HAL_TIM_Base_MspInit+0x48>)
 81035cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035d0:	4a0b      	ldr	r2, [pc, #44]	@ (8103600 <HAL_TIM_Base_MspInit+0x48>)
 81035d2:	f043 0301 	orr.w	r3, r3, #1
 81035d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81035da:	4b09      	ldr	r3, [pc, #36]	@ (8103600 <HAL_TIM_Base_MspInit+0x48>)
 81035dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81035e0:	f003 0301 	and.w	r3, r3, #1
 81035e4:	60fb      	str	r3, [r7, #12]
 81035e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 81035e8:	2200      	movs	r2, #0
 81035ea:	2100      	movs	r1, #0
 81035ec:	201c      	movs	r0, #28
 81035ee:	f000 f9e6 	bl	81039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81035f2:	201c      	movs	r0, #28
 81035f4:	f000 f9fd 	bl	81039f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 81035f8:	bf00      	nop
 81035fa:	3710      	adds	r7, #16
 81035fc:	46bd      	mov	sp, r7
 81035fe:	bd80      	pop	{r7, pc}
 8103600:	58024400 	.word	0x58024400

08103604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810363c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103608:	f7ff fb32 	bl	8102c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810360c:	480c      	ldr	r0, [pc, #48]	@ (8103640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810360e:	490d      	ldr	r1, [pc, #52]	@ (8103644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103610:	4a0d      	ldr	r2, [pc, #52]	@ (8103648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103614:	e002      	b.n	810361c <LoopCopyDataInit>

08103616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810361a:	3304      	adds	r3, #4

0810361c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810361c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810361e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103620:	d3f9      	bcc.n	8103616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8103622:	4a0a      	ldr	r2, [pc, #40]	@ (810364c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103624:	4c0a      	ldr	r4, [pc, #40]	@ (8103650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8103626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103628:	e001      	b.n	810362e <LoopFillZerobss>

0810362a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810362a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810362c:	3204      	adds	r2, #4

0810362e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810362e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103630:	d3fb      	bcc.n	810362a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103632:	f008 fc31 	bl	810be98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103636:	f7ff fd2d 	bl	8103094 <main>
  bx  lr
 810363a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810363c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103640:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103644:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 8103648:	0810d2a0 	.word	0x0810d2a0
  ldr r2, =_sbss
 810364c:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 8103650:	10000610 	.word	0x10000610

08103654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103654:	e7fe      	b.n	8103654 <ADC3_IRQHandler>
	...

08103658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103658:	b580      	push	{r7, lr}
 810365a:	b082      	sub	sp, #8
 810365c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810365e:	4b28      	ldr	r3, [pc, #160]	@ (8103700 <HAL_Init+0xa8>)
 8103660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103664:	4a26      	ldr	r2, [pc, #152]	@ (8103700 <HAL_Init+0xa8>)
 8103666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810366a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810366e:	4b24      	ldr	r3, [pc, #144]	@ (8103700 <HAL_Init+0xa8>)
 8103670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103678:	603b      	str	r3, [r7, #0]
 810367a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810367c:	4b21      	ldr	r3, [pc, #132]	@ (8103704 <HAL_Init+0xac>)
 810367e:	681b      	ldr	r3, [r3, #0]
 8103680:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103684:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103688:	4a1e      	ldr	r2, [pc, #120]	@ (8103704 <HAL_Init+0xac>)
 810368a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810368e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103690:	4b1c      	ldr	r3, [pc, #112]	@ (8103704 <HAL_Init+0xac>)
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	4a1b      	ldr	r2, [pc, #108]	@ (8103704 <HAL_Init+0xac>)
 8103696:	f043 0301 	orr.w	r3, r3, #1
 810369a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810369c:	2003      	movs	r0, #3
 810369e:	f000 f983 	bl	81039a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81036a2:	f005 fcd9 	bl	8109058 <HAL_RCC_GetSysClockFreq>
 81036a6:	4602      	mov	r2, r0
 81036a8:	4b15      	ldr	r3, [pc, #84]	@ (8103700 <HAL_Init+0xa8>)
 81036aa:	699b      	ldr	r3, [r3, #24]
 81036ac:	0a1b      	lsrs	r3, r3, #8
 81036ae:	f003 030f 	and.w	r3, r3, #15
 81036b2:	4915      	ldr	r1, [pc, #84]	@ (8103708 <HAL_Init+0xb0>)
 81036b4:	5ccb      	ldrb	r3, [r1, r3]
 81036b6:	f003 031f 	and.w	r3, r3, #31
 81036ba:	fa22 f303 	lsr.w	r3, r2, r3
 81036be:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81036c0:	4b0f      	ldr	r3, [pc, #60]	@ (8103700 <HAL_Init+0xa8>)
 81036c2:	699b      	ldr	r3, [r3, #24]
 81036c4:	f003 030f 	and.w	r3, r3, #15
 81036c8:	4a0f      	ldr	r2, [pc, #60]	@ (8103708 <HAL_Init+0xb0>)
 81036ca:	5cd3      	ldrb	r3, [r2, r3]
 81036cc:	f003 031f 	and.w	r3, r3, #31
 81036d0:	687a      	ldr	r2, [r7, #4]
 81036d2:	fa22 f303 	lsr.w	r3, r2, r3
 81036d6:	4a0d      	ldr	r2, [pc, #52]	@ (810370c <HAL_Init+0xb4>)
 81036d8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81036da:	4b0c      	ldr	r3, [pc, #48]	@ (810370c <HAL_Init+0xb4>)
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	4a0c      	ldr	r2, [pc, #48]	@ (8103710 <HAL_Init+0xb8>)
 81036e0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81036e2:	2000      	movs	r0, #0
 81036e4:	f000 f816 	bl	8103714 <HAL_InitTick>
 81036e8:	4603      	mov	r3, r0
 81036ea:	2b00      	cmp	r3, #0
 81036ec:	d001      	beq.n	81036f2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81036ee:	2301      	movs	r3, #1
 81036f0:	e002      	b.n	81036f8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81036f2:	f7ff fe8d 	bl	8103410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81036f6:	2300      	movs	r3, #0
}
 81036f8:	4618      	mov	r0, r3
 81036fa:	3708      	adds	r7, #8
 81036fc:	46bd      	mov	sp, r7
 81036fe:	bd80      	pop	{r7, pc}
 8103700:	58024400 	.word	0x58024400
 8103704:	40024400 	.word	0x40024400
 8103708:	0810d1f0 	.word	0x0810d1f0
 810370c:	10000024 	.word	0x10000024
 8103710:	10000020 	.word	0x10000020

08103714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103714:	b580      	push	{r7, lr}
 8103716:	b082      	sub	sp, #8
 8103718:	af00      	add	r7, sp, #0
 810371a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810371c:	4b15      	ldr	r3, [pc, #84]	@ (8103774 <HAL_InitTick+0x60>)
 810371e:	781b      	ldrb	r3, [r3, #0]
 8103720:	2b00      	cmp	r3, #0
 8103722:	d101      	bne.n	8103728 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103724:	2301      	movs	r3, #1
 8103726:	e021      	b.n	810376c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103728:	4b13      	ldr	r3, [pc, #76]	@ (8103778 <HAL_InitTick+0x64>)
 810372a:	681a      	ldr	r2, [r3, #0]
 810372c:	4b11      	ldr	r3, [pc, #68]	@ (8103774 <HAL_InitTick+0x60>)
 810372e:	781b      	ldrb	r3, [r3, #0]
 8103730:	4619      	mov	r1, r3
 8103732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8103736:	fbb3 f3f1 	udiv	r3, r3, r1
 810373a:	fbb2 f3f3 	udiv	r3, r2, r3
 810373e:	4618      	mov	r0, r3
 8103740:	f000 f965 	bl	8103a0e <HAL_SYSTICK_Config>
 8103744:	4603      	mov	r3, r0
 8103746:	2b00      	cmp	r3, #0
 8103748:	d001      	beq.n	810374e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810374a:	2301      	movs	r3, #1
 810374c:	e00e      	b.n	810376c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	2b0f      	cmp	r3, #15
 8103752:	d80a      	bhi.n	810376a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103754:	2200      	movs	r2, #0
 8103756:	6879      	ldr	r1, [r7, #4]
 8103758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810375c:	f000 f92f 	bl	81039be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103760:	4a06      	ldr	r2, [pc, #24]	@ (810377c <HAL_InitTick+0x68>)
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103766:	2300      	movs	r3, #0
 8103768:	e000      	b.n	810376c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810376a:	2301      	movs	r3, #1
}
 810376c:	4618      	mov	r0, r3
 810376e:	3708      	adds	r7, #8
 8103770:	46bd      	mov	sp, r7
 8103772:	bd80      	pop	{r7, pc}
 8103774:	1000002c 	.word	0x1000002c
 8103778:	10000020 	.word	0x10000020
 810377c:	10000028 	.word	0x10000028

08103780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103780:	b480      	push	{r7}
 8103782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103784:	4b06      	ldr	r3, [pc, #24]	@ (81037a0 <HAL_IncTick+0x20>)
 8103786:	781b      	ldrb	r3, [r3, #0]
 8103788:	461a      	mov	r2, r3
 810378a:	4b06      	ldr	r3, [pc, #24]	@ (81037a4 <HAL_IncTick+0x24>)
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	4413      	add	r3, r2
 8103790:	4a04      	ldr	r2, [pc, #16]	@ (81037a4 <HAL_IncTick+0x24>)
 8103792:	6013      	str	r3, [r2, #0]
}
 8103794:	bf00      	nop
 8103796:	46bd      	mov	sp, r7
 8103798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810379c:	4770      	bx	lr
 810379e:	bf00      	nop
 81037a0:	1000002c 	.word	0x1000002c
 81037a4:	100004d4 	.word	0x100004d4

081037a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81037a8:	b480      	push	{r7}
 81037aa:	af00      	add	r7, sp, #0
  return uwTick;
 81037ac:	4b03      	ldr	r3, [pc, #12]	@ (81037bc <HAL_GetTick+0x14>)
 81037ae:	681b      	ldr	r3, [r3, #0]
}
 81037b0:	4618      	mov	r0, r3
 81037b2:	46bd      	mov	sp, r7
 81037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037b8:	4770      	bx	lr
 81037ba:	bf00      	nop
 81037bc:	100004d4 	.word	0x100004d4

081037c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81037c0:	b580      	push	{r7, lr}
 81037c2:	b084      	sub	sp, #16
 81037c4:	af00      	add	r7, sp, #0
 81037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81037c8:	f7ff ffee 	bl	81037a8 <HAL_GetTick>
 81037cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81037d2:	68fb      	ldr	r3, [r7, #12]
 81037d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81037d8:	d005      	beq.n	81037e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81037da:	4b0a      	ldr	r3, [pc, #40]	@ (8103804 <HAL_Delay+0x44>)
 81037dc:	781b      	ldrb	r3, [r3, #0]
 81037de:	461a      	mov	r2, r3
 81037e0:	68fb      	ldr	r3, [r7, #12]
 81037e2:	4413      	add	r3, r2
 81037e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81037e6:	bf00      	nop
 81037e8:	f7ff ffde 	bl	81037a8 <HAL_GetTick>
 81037ec:	4602      	mov	r2, r0
 81037ee:	68bb      	ldr	r3, [r7, #8]
 81037f0:	1ad3      	subs	r3, r2, r3
 81037f2:	68fa      	ldr	r2, [r7, #12]
 81037f4:	429a      	cmp	r2, r3
 81037f6:	d8f7      	bhi.n	81037e8 <HAL_Delay+0x28>
  {
  }
}
 81037f8:	bf00      	nop
 81037fa:	bf00      	nop
 81037fc:	3710      	adds	r7, #16
 81037fe:	46bd      	mov	sp, r7
 8103800:	bd80      	pop	{r7, pc}
 8103802:	bf00      	nop
 8103804:	1000002c 	.word	0x1000002c

08103808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103808:	b480      	push	{r7}
 810380a:	b085      	sub	sp, #20
 810380c:	af00      	add	r7, sp, #0
 810380e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	f003 0307 	and.w	r3, r3, #7
 8103816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103818:	4b0c      	ldr	r3, [pc, #48]	@ (810384c <__NVIC_SetPriorityGrouping+0x44>)
 810381a:	68db      	ldr	r3, [r3, #12]
 810381c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810381e:	68ba      	ldr	r2, [r7, #8]
 8103820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103824:	4013      	ands	r3, r2
 8103826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810382c:	68bb      	ldr	r3, [r7, #8]
 810382e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810383a:	4a04      	ldr	r2, [pc, #16]	@ (810384c <__NVIC_SetPriorityGrouping+0x44>)
 810383c:	68bb      	ldr	r3, [r7, #8]
 810383e:	60d3      	str	r3, [r2, #12]
}
 8103840:	bf00      	nop
 8103842:	3714      	adds	r7, #20
 8103844:	46bd      	mov	sp, r7
 8103846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810384a:	4770      	bx	lr
 810384c:	e000ed00 	.word	0xe000ed00

08103850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103850:	b480      	push	{r7}
 8103852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103854:	4b04      	ldr	r3, [pc, #16]	@ (8103868 <__NVIC_GetPriorityGrouping+0x18>)
 8103856:	68db      	ldr	r3, [r3, #12]
 8103858:	0a1b      	lsrs	r3, r3, #8
 810385a:	f003 0307 	and.w	r3, r3, #7
}
 810385e:	4618      	mov	r0, r3
 8103860:	46bd      	mov	sp, r7
 8103862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103866:	4770      	bx	lr
 8103868:	e000ed00 	.word	0xe000ed00

0810386c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810386c:	b480      	push	{r7}
 810386e:	b083      	sub	sp, #12
 8103870:	af00      	add	r7, sp, #0
 8103872:	4603      	mov	r3, r0
 8103874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810387a:	2b00      	cmp	r3, #0
 810387c:	db0b      	blt.n	8103896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810387e:	88fb      	ldrh	r3, [r7, #6]
 8103880:	f003 021f 	and.w	r2, r3, #31
 8103884:	4907      	ldr	r1, [pc, #28]	@ (81038a4 <__NVIC_EnableIRQ+0x38>)
 8103886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810388a:	095b      	lsrs	r3, r3, #5
 810388c:	2001      	movs	r0, #1
 810388e:	fa00 f202 	lsl.w	r2, r0, r2
 8103892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103896:	bf00      	nop
 8103898:	370c      	adds	r7, #12
 810389a:	46bd      	mov	sp, r7
 810389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038a0:	4770      	bx	lr
 81038a2:	bf00      	nop
 81038a4:	e000e100 	.word	0xe000e100

081038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81038a8:	b480      	push	{r7}
 81038aa:	b083      	sub	sp, #12
 81038ac:	af00      	add	r7, sp, #0
 81038ae:	4603      	mov	r3, r0
 81038b0:	6039      	str	r1, [r7, #0]
 81038b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81038b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	db0a      	blt.n	81038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81038bc:	683b      	ldr	r3, [r7, #0]
 81038be:	b2da      	uxtb	r2, r3
 81038c0:	490c      	ldr	r1, [pc, #48]	@ (81038f4 <__NVIC_SetPriority+0x4c>)
 81038c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038c6:	0112      	lsls	r2, r2, #4
 81038c8:	b2d2      	uxtb	r2, r2
 81038ca:	440b      	add	r3, r1
 81038cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81038d0:	e00a      	b.n	81038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81038d2:	683b      	ldr	r3, [r7, #0]
 81038d4:	b2da      	uxtb	r2, r3
 81038d6:	4908      	ldr	r1, [pc, #32]	@ (81038f8 <__NVIC_SetPriority+0x50>)
 81038d8:	88fb      	ldrh	r3, [r7, #6]
 81038da:	f003 030f 	and.w	r3, r3, #15
 81038de:	3b04      	subs	r3, #4
 81038e0:	0112      	lsls	r2, r2, #4
 81038e2:	b2d2      	uxtb	r2, r2
 81038e4:	440b      	add	r3, r1
 81038e6:	761a      	strb	r2, [r3, #24]
}
 81038e8:	bf00      	nop
 81038ea:	370c      	adds	r7, #12
 81038ec:	46bd      	mov	sp, r7
 81038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f2:	4770      	bx	lr
 81038f4:	e000e100 	.word	0xe000e100
 81038f8:	e000ed00 	.word	0xe000ed00

081038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81038fc:	b480      	push	{r7}
 81038fe:	b089      	sub	sp, #36	@ 0x24
 8103900:	af00      	add	r7, sp, #0
 8103902:	60f8      	str	r0, [r7, #12]
 8103904:	60b9      	str	r1, [r7, #8]
 8103906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103908:	68fb      	ldr	r3, [r7, #12]
 810390a:	f003 0307 	and.w	r3, r3, #7
 810390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103910:	69fb      	ldr	r3, [r7, #28]
 8103912:	f1c3 0307 	rsb	r3, r3, #7
 8103916:	2b04      	cmp	r3, #4
 8103918:	bf28      	it	cs
 810391a:	2304      	movcs	r3, #4
 810391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810391e:	69fb      	ldr	r3, [r7, #28]
 8103920:	3304      	adds	r3, #4
 8103922:	2b06      	cmp	r3, #6
 8103924:	d902      	bls.n	810392c <NVIC_EncodePriority+0x30>
 8103926:	69fb      	ldr	r3, [r7, #28]
 8103928:	3b03      	subs	r3, #3
 810392a:	e000      	b.n	810392e <NVIC_EncodePriority+0x32>
 810392c:	2300      	movs	r3, #0
 810392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103934:	69bb      	ldr	r3, [r7, #24]
 8103936:	fa02 f303 	lsl.w	r3, r2, r3
 810393a:	43da      	mvns	r2, r3
 810393c:	68bb      	ldr	r3, [r7, #8]
 810393e:	401a      	ands	r2, r3
 8103940:	697b      	ldr	r3, [r7, #20]
 8103942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103944:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8103948:	697b      	ldr	r3, [r7, #20]
 810394a:	fa01 f303 	lsl.w	r3, r1, r3
 810394e:	43d9      	mvns	r1, r3
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103954:	4313      	orrs	r3, r2
         );
}
 8103956:	4618      	mov	r0, r3
 8103958:	3724      	adds	r7, #36	@ 0x24
 810395a:	46bd      	mov	sp, r7
 810395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103960:	4770      	bx	lr
	...

08103964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103964:	b580      	push	{r7, lr}
 8103966:	b082      	sub	sp, #8
 8103968:	af00      	add	r7, sp, #0
 810396a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	3b01      	subs	r3, #1
 8103970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103974:	d301      	bcc.n	810397a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103976:	2301      	movs	r3, #1
 8103978:	e00f      	b.n	810399a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810397a:	4a0a      	ldr	r2, [pc, #40]	@ (81039a4 <SysTick_Config+0x40>)
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	3b01      	subs	r3, #1
 8103980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103982:	210f      	movs	r1, #15
 8103984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103988:	f7ff ff8e 	bl	81038a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810398c:	4b05      	ldr	r3, [pc, #20]	@ (81039a4 <SysTick_Config+0x40>)
 810398e:	2200      	movs	r2, #0
 8103990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103992:	4b04      	ldr	r3, [pc, #16]	@ (81039a4 <SysTick_Config+0x40>)
 8103994:	2207      	movs	r2, #7
 8103996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103998:	2300      	movs	r3, #0
}
 810399a:	4618      	mov	r0, r3
 810399c:	3708      	adds	r7, #8
 810399e:	46bd      	mov	sp, r7
 81039a0:	bd80      	pop	{r7, pc}
 81039a2:	bf00      	nop
 81039a4:	e000e010 	.word	0xe000e010

081039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81039a8:	b580      	push	{r7, lr}
 81039aa:	b082      	sub	sp, #8
 81039ac:	af00      	add	r7, sp, #0
 81039ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81039b0:	6878      	ldr	r0, [r7, #4]
 81039b2:	f7ff ff29 	bl	8103808 <__NVIC_SetPriorityGrouping>
}
 81039b6:	bf00      	nop
 81039b8:	3708      	adds	r7, #8
 81039ba:	46bd      	mov	sp, r7
 81039bc:	bd80      	pop	{r7, pc}

081039be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81039be:	b580      	push	{r7, lr}
 81039c0:	b086      	sub	sp, #24
 81039c2:	af00      	add	r7, sp, #0
 81039c4:	4603      	mov	r3, r0
 81039c6:	60b9      	str	r1, [r7, #8]
 81039c8:	607a      	str	r2, [r7, #4]
 81039ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81039cc:	f7ff ff40 	bl	8103850 <__NVIC_GetPriorityGrouping>
 81039d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81039d2:	687a      	ldr	r2, [r7, #4]
 81039d4:	68b9      	ldr	r1, [r7, #8]
 81039d6:	6978      	ldr	r0, [r7, #20]
 81039d8:	f7ff ff90 	bl	81038fc <NVIC_EncodePriority>
 81039dc:	4602      	mov	r2, r0
 81039de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81039e2:	4611      	mov	r1, r2
 81039e4:	4618      	mov	r0, r3
 81039e6:	f7ff ff5f 	bl	81038a8 <__NVIC_SetPriority>
}
 81039ea:	bf00      	nop
 81039ec:	3718      	adds	r7, #24
 81039ee:	46bd      	mov	sp, r7
 81039f0:	bd80      	pop	{r7, pc}

081039f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81039f2:	b580      	push	{r7, lr}
 81039f4:	b082      	sub	sp, #8
 81039f6:	af00      	add	r7, sp, #0
 81039f8:	4603      	mov	r3, r0
 81039fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81039fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103a00:	4618      	mov	r0, r3
 8103a02:	f7ff ff33 	bl	810386c <__NVIC_EnableIRQ>
}
 8103a06:	bf00      	nop
 8103a08:	3708      	adds	r7, #8
 8103a0a:	46bd      	mov	sp, r7
 8103a0c:	bd80      	pop	{r7, pc}

08103a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103a0e:	b580      	push	{r7, lr}
 8103a10:	b082      	sub	sp, #8
 8103a12:	af00      	add	r7, sp, #0
 8103a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103a16:	6878      	ldr	r0, [r7, #4]
 8103a18:	f7ff ffa4 	bl	8103964 <SysTick_Config>
 8103a1c:	4603      	mov	r3, r0
}
 8103a1e:	4618      	mov	r0, r3
 8103a20:	3708      	adds	r7, #8
 8103a22:	46bd      	mov	sp, r7
 8103a24:	bd80      	pop	{r7, pc}
	...

08103a28 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103a28:	b480      	push	{r7}
 8103a2a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103a2c:	4b07      	ldr	r3, [pc, #28]	@ (8103a4c <HAL_GetCurrentCPUID+0x24>)
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	091b      	lsrs	r3, r3, #4
 8103a32:	f003 030f 	and.w	r3, r3, #15
 8103a36:	2b07      	cmp	r3, #7
 8103a38:	d101      	bne.n	8103a3e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103a3a:	2303      	movs	r3, #3
 8103a3c:	e000      	b.n	8103a40 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103a3e:	2301      	movs	r3, #1
  }
}
 8103a40:	4618      	mov	r0, r3
 8103a42:	46bd      	mov	sp, r7
 8103a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a48:	4770      	bx	lr
 8103a4a:	bf00      	nop
 8103a4c:	e000ed00 	.word	0xe000ed00

08103a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103a50:	b580      	push	{r7, lr}
 8103a52:	b086      	sub	sp, #24
 8103a54:	af00      	add	r7, sp, #0
 8103a56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103a58:	f7ff fea6 	bl	81037a8 <HAL_GetTick>
 8103a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d101      	bne.n	8103a68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103a64:	2301      	movs	r3, #1
 8103a66:	e314      	b.n	8104092 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	4a66      	ldr	r2, [pc, #408]	@ (8103c08 <HAL_DMA_Init+0x1b8>)
 8103a6e:	4293      	cmp	r3, r2
 8103a70:	d04a      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	4a65      	ldr	r2, [pc, #404]	@ (8103c0c <HAL_DMA_Init+0x1bc>)
 8103a78:	4293      	cmp	r3, r2
 8103a7a:	d045      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	4a63      	ldr	r2, [pc, #396]	@ (8103c10 <HAL_DMA_Init+0x1c0>)
 8103a82:	4293      	cmp	r3, r2
 8103a84:	d040      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	4a62      	ldr	r2, [pc, #392]	@ (8103c14 <HAL_DMA_Init+0x1c4>)
 8103a8c:	4293      	cmp	r3, r2
 8103a8e:	d03b      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	681b      	ldr	r3, [r3, #0]
 8103a94:	4a60      	ldr	r2, [pc, #384]	@ (8103c18 <HAL_DMA_Init+0x1c8>)
 8103a96:	4293      	cmp	r3, r2
 8103a98:	d036      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	681b      	ldr	r3, [r3, #0]
 8103a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8103c1c <HAL_DMA_Init+0x1cc>)
 8103aa0:	4293      	cmp	r3, r2
 8103aa2:	d031      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8103c20 <HAL_DMA_Init+0x1d0>)
 8103aaa:	4293      	cmp	r3, r2
 8103aac:	d02c      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8103c24 <HAL_DMA_Init+0x1d4>)
 8103ab4:	4293      	cmp	r3, r2
 8103ab6:	d027      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	4a5a      	ldr	r2, [pc, #360]	@ (8103c28 <HAL_DMA_Init+0x1d8>)
 8103abe:	4293      	cmp	r3, r2
 8103ac0:	d022      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	681b      	ldr	r3, [r3, #0]
 8103ac6:	4a59      	ldr	r2, [pc, #356]	@ (8103c2c <HAL_DMA_Init+0x1dc>)
 8103ac8:	4293      	cmp	r3, r2
 8103aca:	d01d      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	4a57      	ldr	r2, [pc, #348]	@ (8103c30 <HAL_DMA_Init+0x1e0>)
 8103ad2:	4293      	cmp	r3, r2
 8103ad4:	d018      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	4a56      	ldr	r2, [pc, #344]	@ (8103c34 <HAL_DMA_Init+0x1e4>)
 8103adc:	4293      	cmp	r3, r2
 8103ade:	d013      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	4a54      	ldr	r2, [pc, #336]	@ (8103c38 <HAL_DMA_Init+0x1e8>)
 8103ae6:	4293      	cmp	r3, r2
 8103ae8:	d00e      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	4a53      	ldr	r2, [pc, #332]	@ (8103c3c <HAL_DMA_Init+0x1ec>)
 8103af0:	4293      	cmp	r3, r2
 8103af2:	d009      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	4a51      	ldr	r2, [pc, #324]	@ (8103c40 <HAL_DMA_Init+0x1f0>)
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d004      	beq.n	8103b08 <HAL_DMA_Init+0xb8>
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	4a50      	ldr	r2, [pc, #320]	@ (8103c44 <HAL_DMA_Init+0x1f4>)
 8103b04:	4293      	cmp	r3, r2
 8103b06:	d101      	bne.n	8103b0c <HAL_DMA_Init+0xbc>
 8103b08:	2301      	movs	r3, #1
 8103b0a:	e000      	b.n	8103b0e <HAL_DMA_Init+0xbe>
 8103b0c:	2300      	movs	r3, #0
 8103b0e:	2b00      	cmp	r3, #0
 8103b10:	f000 813b 	beq.w	8103d8a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	2202      	movs	r2, #2
 8103b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	2200      	movs	r2, #0
 8103b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	4a37      	ldr	r2, [pc, #220]	@ (8103c08 <HAL_DMA_Init+0x1b8>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d04a      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a36      	ldr	r2, [pc, #216]	@ (8103c0c <HAL_DMA_Init+0x1bc>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d045      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a34      	ldr	r2, [pc, #208]	@ (8103c10 <HAL_DMA_Init+0x1c0>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	d040      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	4a33      	ldr	r2, [pc, #204]	@ (8103c14 <HAL_DMA_Init+0x1c4>)
 8103b48:	4293      	cmp	r3, r2
 8103b4a:	d03b      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	4a31      	ldr	r2, [pc, #196]	@ (8103c18 <HAL_DMA_Init+0x1c8>)
 8103b52:	4293      	cmp	r3, r2
 8103b54:	d036      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	4a30      	ldr	r2, [pc, #192]	@ (8103c1c <HAL_DMA_Init+0x1cc>)
 8103b5c:	4293      	cmp	r3, r2
 8103b5e:	d031      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	4a2e      	ldr	r2, [pc, #184]	@ (8103c20 <HAL_DMA_Init+0x1d0>)
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d02c      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8103c24 <HAL_DMA_Init+0x1d4>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d027      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	4a2b      	ldr	r2, [pc, #172]	@ (8103c28 <HAL_DMA_Init+0x1d8>)
 8103b7a:	4293      	cmp	r3, r2
 8103b7c:	d022      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	4a2a      	ldr	r2, [pc, #168]	@ (8103c2c <HAL_DMA_Init+0x1dc>)
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d01d      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	4a28      	ldr	r2, [pc, #160]	@ (8103c30 <HAL_DMA_Init+0x1e0>)
 8103b8e:	4293      	cmp	r3, r2
 8103b90:	d018      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	4a27      	ldr	r2, [pc, #156]	@ (8103c34 <HAL_DMA_Init+0x1e4>)
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d013      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	4a25      	ldr	r2, [pc, #148]	@ (8103c38 <HAL_DMA_Init+0x1e8>)
 8103ba2:	4293      	cmp	r3, r2
 8103ba4:	d00e      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a24      	ldr	r2, [pc, #144]	@ (8103c3c <HAL_DMA_Init+0x1ec>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d009      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	4a22      	ldr	r2, [pc, #136]	@ (8103c40 <HAL_DMA_Init+0x1f0>)
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d004      	beq.n	8103bc4 <HAL_DMA_Init+0x174>
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	4a21      	ldr	r2, [pc, #132]	@ (8103c44 <HAL_DMA_Init+0x1f4>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d108      	bne.n	8103bd6 <HAL_DMA_Init+0x186>
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	681a      	ldr	r2, [r3, #0]
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	f022 0201 	bic.w	r2, r2, #1
 8103bd2:	601a      	str	r2, [r3, #0]
 8103bd4:	e007      	b.n	8103be6 <HAL_DMA_Init+0x196>
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	681b      	ldr	r3, [r3, #0]
 8103bda:	681a      	ldr	r2, [r3, #0]
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	f022 0201 	bic.w	r2, r2, #1
 8103be4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103be6:	e02f      	b.n	8103c48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103be8:	f7ff fdde 	bl	81037a8 <HAL_GetTick>
 8103bec:	4602      	mov	r2, r0
 8103bee:	693b      	ldr	r3, [r7, #16]
 8103bf0:	1ad3      	subs	r3, r2, r3
 8103bf2:	2b05      	cmp	r3, #5
 8103bf4:	d928      	bls.n	8103c48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	2220      	movs	r2, #32
 8103bfa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	2203      	movs	r2, #3
 8103c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8103c04:	2301      	movs	r3, #1
 8103c06:	e244      	b.n	8104092 <HAL_DMA_Init+0x642>
 8103c08:	40020010 	.word	0x40020010
 8103c0c:	40020028 	.word	0x40020028
 8103c10:	40020040 	.word	0x40020040
 8103c14:	40020058 	.word	0x40020058
 8103c18:	40020070 	.word	0x40020070
 8103c1c:	40020088 	.word	0x40020088
 8103c20:	400200a0 	.word	0x400200a0
 8103c24:	400200b8 	.word	0x400200b8
 8103c28:	40020410 	.word	0x40020410
 8103c2c:	40020428 	.word	0x40020428
 8103c30:	40020440 	.word	0x40020440
 8103c34:	40020458 	.word	0x40020458
 8103c38:	40020470 	.word	0x40020470
 8103c3c:	40020488 	.word	0x40020488
 8103c40:	400204a0 	.word	0x400204a0
 8103c44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	f003 0301 	and.w	r3, r3, #1
 8103c52:	2b00      	cmp	r3, #0
 8103c54:	d1c8      	bne.n	8103be8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103c5e:	697a      	ldr	r2, [r7, #20]
 8103c60:	4b84      	ldr	r3, [pc, #528]	@ (8103e74 <HAL_DMA_Init+0x424>)
 8103c62:	4013      	ands	r3, r2
 8103c64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8103c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	691b      	ldr	r3, [r3, #16]
 8103c74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103c7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	699b      	ldr	r3, [r3, #24]
 8103c80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103c86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	6a1b      	ldr	r3, [r3, #32]
 8103c8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103c8e:	697a      	ldr	r2, [r7, #20]
 8103c90:	4313      	orrs	r3, r2
 8103c92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c98:	2b04      	cmp	r3, #4
 8103c9a:	d107      	bne.n	8103cac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103ca4:	4313      	orrs	r3, r2
 8103ca6:	697a      	ldr	r2, [r7, #20]
 8103ca8:	4313      	orrs	r3, r2
 8103caa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103cac:	4b72      	ldr	r3, [pc, #456]	@ (8103e78 <HAL_DMA_Init+0x428>)
 8103cae:	681b      	ldr	r3, [r3, #0]
 8103cb0:	0c1b      	lsrs	r3, r3, #16
 8103cb2:	041b      	lsls	r3, r3, #16
 8103cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103cb8:	d328      	bcc.n	8103d0c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	685b      	ldr	r3, [r3, #4]
 8103cbe:	2b28      	cmp	r3, #40	@ 0x28
 8103cc0:	d903      	bls.n	8103cca <HAL_DMA_Init+0x27a>
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	685b      	ldr	r3, [r3, #4]
 8103cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8103cc8:	d917      	bls.n	8103cfa <HAL_DMA_Init+0x2aa>
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	685b      	ldr	r3, [r3, #4]
 8103cce:	2b3e      	cmp	r3, #62	@ 0x3e
 8103cd0:	d903      	bls.n	8103cda <HAL_DMA_Init+0x28a>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	685b      	ldr	r3, [r3, #4]
 8103cd6:	2b42      	cmp	r3, #66	@ 0x42
 8103cd8:	d90f      	bls.n	8103cfa <HAL_DMA_Init+0x2aa>
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	685b      	ldr	r3, [r3, #4]
 8103cde:	2b46      	cmp	r3, #70	@ 0x46
 8103ce0:	d903      	bls.n	8103cea <HAL_DMA_Init+0x29a>
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	685b      	ldr	r3, [r3, #4]
 8103ce6:	2b48      	cmp	r3, #72	@ 0x48
 8103ce8:	d907      	bls.n	8103cfa <HAL_DMA_Init+0x2aa>
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	685b      	ldr	r3, [r3, #4]
 8103cee:	2b4e      	cmp	r3, #78	@ 0x4e
 8103cf0:	d905      	bls.n	8103cfe <HAL_DMA_Init+0x2ae>
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	685b      	ldr	r3, [r3, #4]
 8103cf6:	2b52      	cmp	r3, #82	@ 0x52
 8103cf8:	d801      	bhi.n	8103cfe <HAL_DMA_Init+0x2ae>
 8103cfa:	2301      	movs	r3, #1
 8103cfc:	e000      	b.n	8103d00 <HAL_DMA_Init+0x2b0>
 8103cfe:	2300      	movs	r3, #0
 8103d00:	2b00      	cmp	r3, #0
 8103d02:	d003      	beq.n	8103d0c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103d04:	697b      	ldr	r3, [r7, #20]
 8103d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103d0a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	697a      	ldr	r2, [r7, #20]
 8103d12:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	695b      	ldr	r3, [r3, #20]
 8103d1a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103d1c:	697b      	ldr	r3, [r7, #20]
 8103d1e:	f023 0307 	bic.w	r3, r3, #7
 8103d22:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103d28:	697a      	ldr	r2, [r7, #20]
 8103d2a:	4313      	orrs	r3, r2
 8103d2c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103d32:	2b04      	cmp	r3, #4
 8103d34:	d117      	bne.n	8103d66 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d3a:	697a      	ldr	r2, [r7, #20]
 8103d3c:	4313      	orrs	r3, r2
 8103d3e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d00e      	beq.n	8103d66 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103d48:	6878      	ldr	r0, [r7, #4]
 8103d4a:	f002 f82d 	bl	8105da8 <DMA_CheckFifoParam>
 8103d4e:	4603      	mov	r3, r0
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d008      	beq.n	8103d66 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	2240      	movs	r2, #64	@ 0x40
 8103d58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	2201      	movs	r2, #1
 8103d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8103d62:	2301      	movs	r3, #1
 8103d64:	e195      	b.n	8104092 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	697a      	ldr	r2, [r7, #20]
 8103d6c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103d6e:	6878      	ldr	r0, [r7, #4]
 8103d70:	f001 ff68 	bl	8105c44 <DMA_CalcBaseAndBitshift>
 8103d74:	4603      	mov	r3, r0
 8103d76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103d7c:	f003 031f 	and.w	r3, r3, #31
 8103d80:	223f      	movs	r2, #63	@ 0x3f
 8103d82:	409a      	lsls	r2, r3
 8103d84:	68bb      	ldr	r3, [r7, #8]
 8103d86:	609a      	str	r2, [r3, #8]
 8103d88:	e0cb      	b.n	8103f22 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	681b      	ldr	r3, [r3, #0]
 8103d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8103e7c <HAL_DMA_Init+0x42c>)
 8103d90:	4293      	cmp	r3, r2
 8103d92:	d022      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	4a39      	ldr	r2, [pc, #228]	@ (8103e80 <HAL_DMA_Init+0x430>)
 8103d9a:	4293      	cmp	r3, r2
 8103d9c:	d01d      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	4a38      	ldr	r2, [pc, #224]	@ (8103e84 <HAL_DMA_Init+0x434>)
 8103da4:	4293      	cmp	r3, r2
 8103da6:	d018      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	4a36      	ldr	r2, [pc, #216]	@ (8103e88 <HAL_DMA_Init+0x438>)
 8103dae:	4293      	cmp	r3, r2
 8103db0:	d013      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	681b      	ldr	r3, [r3, #0]
 8103db6:	4a35      	ldr	r2, [pc, #212]	@ (8103e8c <HAL_DMA_Init+0x43c>)
 8103db8:	4293      	cmp	r3, r2
 8103dba:	d00e      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	4a33      	ldr	r2, [pc, #204]	@ (8103e90 <HAL_DMA_Init+0x440>)
 8103dc2:	4293      	cmp	r3, r2
 8103dc4:	d009      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	4a32      	ldr	r2, [pc, #200]	@ (8103e94 <HAL_DMA_Init+0x444>)
 8103dcc:	4293      	cmp	r3, r2
 8103dce:	d004      	beq.n	8103dda <HAL_DMA_Init+0x38a>
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	4a30      	ldr	r2, [pc, #192]	@ (8103e98 <HAL_DMA_Init+0x448>)
 8103dd6:	4293      	cmp	r3, r2
 8103dd8:	d101      	bne.n	8103dde <HAL_DMA_Init+0x38e>
 8103dda:	2301      	movs	r3, #1
 8103ddc:	e000      	b.n	8103de0 <HAL_DMA_Init+0x390>
 8103dde:	2300      	movs	r3, #0
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	f000 8095 	beq.w	8103f10 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	681b      	ldr	r3, [r3, #0]
 8103dea:	4a24      	ldr	r2, [pc, #144]	@ (8103e7c <HAL_DMA_Init+0x42c>)
 8103dec:	4293      	cmp	r3, r2
 8103dee:	d021      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	4a22      	ldr	r2, [pc, #136]	@ (8103e80 <HAL_DMA_Init+0x430>)
 8103df6:	4293      	cmp	r3, r2
 8103df8:	d01c      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	681b      	ldr	r3, [r3, #0]
 8103dfe:	4a21      	ldr	r2, [pc, #132]	@ (8103e84 <HAL_DMA_Init+0x434>)
 8103e00:	4293      	cmp	r3, r2
 8103e02:	d017      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	4a1f      	ldr	r2, [pc, #124]	@ (8103e88 <HAL_DMA_Init+0x438>)
 8103e0a:	4293      	cmp	r3, r2
 8103e0c:	d012      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	4a1e      	ldr	r2, [pc, #120]	@ (8103e8c <HAL_DMA_Init+0x43c>)
 8103e14:	4293      	cmp	r3, r2
 8103e16:	d00d      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8103e90 <HAL_DMA_Init+0x440>)
 8103e1e:	4293      	cmp	r3, r2
 8103e20:	d008      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	4a1b      	ldr	r2, [pc, #108]	@ (8103e94 <HAL_DMA_Init+0x444>)
 8103e28:	4293      	cmp	r3, r2
 8103e2a:	d003      	beq.n	8103e34 <HAL_DMA_Init+0x3e4>
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	4a19      	ldr	r2, [pc, #100]	@ (8103e98 <HAL_DMA_Init+0x448>)
 8103e32:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	2202      	movs	r2, #2
 8103e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	2200      	movs	r2, #0
 8103e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103e4c:	697b      	ldr	r3, [r7, #20]
 8103e4e:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8103e52:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8103e56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	689b      	ldr	r3, [r3, #8]
 8103e5c:	2b40      	cmp	r3, #64	@ 0x40
 8103e5e:	d01d      	beq.n	8103e9c <HAL_DMA_Init+0x44c>
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	689b      	ldr	r3, [r3, #8]
 8103e64:	2b80      	cmp	r3, #128	@ 0x80
 8103e66:	d102      	bne.n	8103e6e <HAL_DMA_Init+0x41e>
 8103e68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103e6c:	e017      	b.n	8103e9e <HAL_DMA_Init+0x44e>
 8103e6e:	2300      	movs	r3, #0
 8103e70:	e015      	b.n	8103e9e <HAL_DMA_Init+0x44e>
 8103e72:	bf00      	nop
 8103e74:	fe10803f 	.word	0xfe10803f
 8103e78:	5c001000 	.word	0x5c001000
 8103e7c:	58025408 	.word	0x58025408
 8103e80:	5802541c 	.word	0x5802541c
 8103e84:	58025430 	.word	0x58025430
 8103e88:	58025444 	.word	0x58025444
 8103e8c:	58025458 	.word	0x58025458
 8103e90:	5802546c 	.word	0x5802546c
 8103e94:	58025480 	.word	0x58025480
 8103e98:	58025494 	.word	0x58025494
 8103e9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103e9e:	687a      	ldr	r2, [r7, #4]
 8103ea0:	68d2      	ldr	r2, [r2, #12]
 8103ea2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	691b      	ldr	r3, [r3, #16]
 8103eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	695b      	ldr	r3, [r3, #20]
 8103eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	699b      	ldr	r3, [r3, #24]
 8103eba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103ebc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	69db      	ldr	r3, [r3, #28]
 8103ec2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103ec4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	6a1b      	ldr	r3, [r3, #32]
 8103eca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103ecc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103ece:	697a      	ldr	r2, [r7, #20]
 8103ed0:	4313      	orrs	r3, r2
 8103ed2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	697a      	ldr	r2, [r7, #20]
 8103eda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	461a      	mov	r2, r3
 8103ee2:	4b6e      	ldr	r3, [pc, #440]	@ (810409c <HAL_DMA_Init+0x64c>)
 8103ee4:	4413      	add	r3, r2
 8103ee6:	4a6e      	ldr	r2, [pc, #440]	@ (81040a0 <HAL_DMA_Init+0x650>)
 8103ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8103eec:	091b      	lsrs	r3, r3, #4
 8103eee:	009a      	lsls	r2, r3, #2
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103ef4:	6878      	ldr	r0, [r7, #4]
 8103ef6:	f001 fea5 	bl	8105c44 <DMA_CalcBaseAndBitshift>
 8103efa:	4603      	mov	r3, r0
 8103efc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103f02:	f003 031f 	and.w	r3, r3, #31
 8103f06:	2201      	movs	r2, #1
 8103f08:	409a      	lsls	r2, r3
 8103f0a:	68fb      	ldr	r3, [r7, #12]
 8103f0c:	605a      	str	r2, [r3, #4]
 8103f0e:	e008      	b.n	8103f22 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	2240      	movs	r2, #64	@ 0x40
 8103f14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	2203      	movs	r2, #3
 8103f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8103f1e:	2301      	movs	r3, #1
 8103f20:	e0b7      	b.n	8104092 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	4a5f      	ldr	r2, [pc, #380]	@ (81040a4 <HAL_DMA_Init+0x654>)
 8103f28:	4293      	cmp	r3, r2
 8103f2a:	d072      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a5d      	ldr	r2, [pc, #372]	@ (81040a8 <HAL_DMA_Init+0x658>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d06d      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	4a5c      	ldr	r2, [pc, #368]	@ (81040ac <HAL_DMA_Init+0x65c>)
 8103f3c:	4293      	cmp	r3, r2
 8103f3e:	d068      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4a5a      	ldr	r2, [pc, #360]	@ (81040b0 <HAL_DMA_Init+0x660>)
 8103f46:	4293      	cmp	r3, r2
 8103f48:	d063      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	4a59      	ldr	r2, [pc, #356]	@ (81040b4 <HAL_DMA_Init+0x664>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d05e      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4a57      	ldr	r2, [pc, #348]	@ (81040b8 <HAL_DMA_Init+0x668>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d059      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	4a56      	ldr	r2, [pc, #344]	@ (81040bc <HAL_DMA_Init+0x66c>)
 8103f64:	4293      	cmp	r3, r2
 8103f66:	d054      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	4a54      	ldr	r2, [pc, #336]	@ (81040c0 <HAL_DMA_Init+0x670>)
 8103f6e:	4293      	cmp	r3, r2
 8103f70:	d04f      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	4a53      	ldr	r2, [pc, #332]	@ (81040c4 <HAL_DMA_Init+0x674>)
 8103f78:	4293      	cmp	r3, r2
 8103f7a:	d04a      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	4a51      	ldr	r2, [pc, #324]	@ (81040c8 <HAL_DMA_Init+0x678>)
 8103f82:	4293      	cmp	r3, r2
 8103f84:	d045      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	4a50      	ldr	r2, [pc, #320]	@ (81040cc <HAL_DMA_Init+0x67c>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d040      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	4a4e      	ldr	r2, [pc, #312]	@ (81040d0 <HAL_DMA_Init+0x680>)
 8103f96:	4293      	cmp	r3, r2
 8103f98:	d03b      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	4a4d      	ldr	r2, [pc, #308]	@ (81040d4 <HAL_DMA_Init+0x684>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d036      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a4b      	ldr	r2, [pc, #300]	@ (81040d8 <HAL_DMA_Init+0x688>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d031      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a4a      	ldr	r2, [pc, #296]	@ (81040dc <HAL_DMA_Init+0x68c>)
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d02c      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	4a48      	ldr	r2, [pc, #288]	@ (81040e0 <HAL_DMA_Init+0x690>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d027      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	4a47      	ldr	r2, [pc, #284]	@ (81040e4 <HAL_DMA_Init+0x694>)
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d022      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	4a45      	ldr	r2, [pc, #276]	@ (81040e8 <HAL_DMA_Init+0x698>)
 8103fd2:	4293      	cmp	r3, r2
 8103fd4:	d01d      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	4a44      	ldr	r2, [pc, #272]	@ (81040ec <HAL_DMA_Init+0x69c>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d018      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	4a42      	ldr	r2, [pc, #264]	@ (81040f0 <HAL_DMA_Init+0x6a0>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d013      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	4a41      	ldr	r2, [pc, #260]	@ (81040f4 <HAL_DMA_Init+0x6a4>)
 8103ff0:	4293      	cmp	r3, r2
 8103ff2:	d00e      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	4a3f      	ldr	r2, [pc, #252]	@ (81040f8 <HAL_DMA_Init+0x6a8>)
 8103ffa:	4293      	cmp	r3, r2
 8103ffc:	d009      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8103ffe:	687b      	ldr	r3, [r7, #4]
 8104000:	681b      	ldr	r3, [r3, #0]
 8104002:	4a3e      	ldr	r2, [pc, #248]	@ (81040fc <HAL_DMA_Init+0x6ac>)
 8104004:	4293      	cmp	r3, r2
 8104006:	d004      	beq.n	8104012 <HAL_DMA_Init+0x5c2>
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	4a3c      	ldr	r2, [pc, #240]	@ (8104100 <HAL_DMA_Init+0x6b0>)
 810400e:	4293      	cmp	r3, r2
 8104010:	d101      	bne.n	8104016 <HAL_DMA_Init+0x5c6>
 8104012:	2301      	movs	r3, #1
 8104014:	e000      	b.n	8104018 <HAL_DMA_Init+0x5c8>
 8104016:	2300      	movs	r3, #0
 8104018:	2b00      	cmp	r3, #0
 810401a:	d032      	beq.n	8104082 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 810401c:	6878      	ldr	r0, [r7, #4]
 810401e:	f001 ff3f 	bl	8105ea0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	689b      	ldr	r3, [r3, #8]
 8104026:	2b80      	cmp	r3, #128	@ 0x80
 8104028:	d102      	bne.n	8104030 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	2200      	movs	r2, #0
 810402e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	685a      	ldr	r2, [r3, #4]
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104038:	b2d2      	uxtb	r2, r2
 810403a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104040:	687a      	ldr	r2, [r7, #4]
 8104042:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104044:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	685b      	ldr	r3, [r3, #4]
 810404a:	2b00      	cmp	r3, #0
 810404c:	d010      	beq.n	8104070 <HAL_DMA_Init+0x620>
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	685b      	ldr	r3, [r3, #4]
 8104052:	2b08      	cmp	r3, #8
 8104054:	d80c      	bhi.n	8104070 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8104056:	6878      	ldr	r0, [r7, #4]
 8104058:	f001 ffbc 	bl	8105fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104060:	2200      	movs	r2, #0
 8104062:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104068:	687a      	ldr	r2, [r7, #4]
 810406a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810406c:	605a      	str	r2, [r3, #4]
 810406e:	e008      	b.n	8104082 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	2200      	movs	r2, #0
 8104074:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	2200      	movs	r2, #0
 810407a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	2200      	movs	r2, #0
 8104080:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	2200      	movs	r2, #0
 8104086:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	2201      	movs	r2, #1
 810408c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8104090:	2300      	movs	r3, #0
}
 8104092:	4618      	mov	r0, r3
 8104094:	3718      	adds	r7, #24
 8104096:	46bd      	mov	sp, r7
 8104098:	bd80      	pop	{r7, pc}
 810409a:	bf00      	nop
 810409c:	a7fdabf8 	.word	0xa7fdabf8
 81040a0:	cccccccd 	.word	0xcccccccd
 81040a4:	40020010 	.word	0x40020010
 81040a8:	40020028 	.word	0x40020028
 81040ac:	40020040 	.word	0x40020040
 81040b0:	40020058 	.word	0x40020058
 81040b4:	40020070 	.word	0x40020070
 81040b8:	40020088 	.word	0x40020088
 81040bc:	400200a0 	.word	0x400200a0
 81040c0:	400200b8 	.word	0x400200b8
 81040c4:	40020410 	.word	0x40020410
 81040c8:	40020428 	.word	0x40020428
 81040cc:	40020440 	.word	0x40020440
 81040d0:	40020458 	.word	0x40020458
 81040d4:	40020470 	.word	0x40020470
 81040d8:	40020488 	.word	0x40020488
 81040dc:	400204a0 	.word	0x400204a0
 81040e0:	400204b8 	.word	0x400204b8
 81040e4:	58025408 	.word	0x58025408
 81040e8:	5802541c 	.word	0x5802541c
 81040ec:	58025430 	.word	0x58025430
 81040f0:	58025444 	.word	0x58025444
 81040f4:	58025458 	.word	0x58025458
 81040f8:	5802546c 	.word	0x5802546c
 81040fc:	58025480 	.word	0x58025480
 8104100:	58025494 	.word	0x58025494

08104104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104104:	b580      	push	{r7, lr}
 8104106:	b086      	sub	sp, #24
 8104108:	af00      	add	r7, sp, #0
 810410a:	60f8      	str	r0, [r7, #12]
 810410c:	60b9      	str	r1, [r7, #8]
 810410e:	607a      	str	r2, [r7, #4]
 8104110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104112:	2300      	movs	r3, #0
 8104114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104116:	68fb      	ldr	r3, [r7, #12]
 8104118:	2b00      	cmp	r3, #0
 810411a:	d101      	bne.n	8104120 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 810411c:	2301      	movs	r3, #1
 810411e:	e226      	b.n	810456e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8104126:	2b01      	cmp	r3, #1
 8104128:	d101      	bne.n	810412e <HAL_DMA_Start_IT+0x2a>
 810412a:	2302      	movs	r3, #2
 810412c:	e21f      	b.n	810456e <HAL_DMA_Start_IT+0x46a>
 810412e:	68fb      	ldr	r3, [r7, #12]
 8104130:	2201      	movs	r2, #1
 8104132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8104136:	68fb      	ldr	r3, [r7, #12]
 8104138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810413c:	b2db      	uxtb	r3, r3
 810413e:	2b01      	cmp	r3, #1
 8104140:	f040 820a 	bne.w	8104558 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104144:	68fb      	ldr	r3, [r7, #12]
 8104146:	2202      	movs	r2, #2
 8104148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810414c:	68fb      	ldr	r3, [r7, #12]
 810414e:	2200      	movs	r2, #0
 8104150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	4a68      	ldr	r2, [pc, #416]	@ (81042f8 <HAL_DMA_Start_IT+0x1f4>)
 8104158:	4293      	cmp	r3, r2
 810415a:	d04a      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 810415c:	68fb      	ldr	r3, [r7, #12]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	4a66      	ldr	r2, [pc, #408]	@ (81042fc <HAL_DMA_Start_IT+0x1f8>)
 8104162:	4293      	cmp	r3, r2
 8104164:	d045      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	4a65      	ldr	r2, [pc, #404]	@ (8104300 <HAL_DMA_Start_IT+0x1fc>)
 810416c:	4293      	cmp	r3, r2
 810416e:	d040      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 8104170:	68fb      	ldr	r3, [r7, #12]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	4a63      	ldr	r2, [pc, #396]	@ (8104304 <HAL_DMA_Start_IT+0x200>)
 8104176:	4293      	cmp	r3, r2
 8104178:	d03b      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	4a62      	ldr	r2, [pc, #392]	@ (8104308 <HAL_DMA_Start_IT+0x204>)
 8104180:	4293      	cmp	r3, r2
 8104182:	d036      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	4a60      	ldr	r2, [pc, #384]	@ (810430c <HAL_DMA_Start_IT+0x208>)
 810418a:	4293      	cmp	r3, r2
 810418c:	d031      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 810418e:	68fb      	ldr	r3, [r7, #12]
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	4a5f      	ldr	r2, [pc, #380]	@ (8104310 <HAL_DMA_Start_IT+0x20c>)
 8104194:	4293      	cmp	r3, r2
 8104196:	d02c      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	4a5d      	ldr	r2, [pc, #372]	@ (8104314 <HAL_DMA_Start_IT+0x210>)
 810419e:	4293      	cmp	r3, r2
 81041a0:	d027      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	4a5c      	ldr	r2, [pc, #368]	@ (8104318 <HAL_DMA_Start_IT+0x214>)
 81041a8:	4293      	cmp	r3, r2
 81041aa:	d022      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	4a5a      	ldr	r2, [pc, #360]	@ (810431c <HAL_DMA_Start_IT+0x218>)
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d01d      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	4a59      	ldr	r2, [pc, #356]	@ (8104320 <HAL_DMA_Start_IT+0x21c>)
 81041bc:	4293      	cmp	r3, r2
 81041be:	d018      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	4a57      	ldr	r2, [pc, #348]	@ (8104324 <HAL_DMA_Start_IT+0x220>)
 81041c6:	4293      	cmp	r3, r2
 81041c8:	d013      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041ca:	68fb      	ldr	r3, [r7, #12]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	4a56      	ldr	r2, [pc, #344]	@ (8104328 <HAL_DMA_Start_IT+0x224>)
 81041d0:	4293      	cmp	r3, r2
 81041d2:	d00e      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	681b      	ldr	r3, [r3, #0]
 81041d8:	4a54      	ldr	r2, [pc, #336]	@ (810432c <HAL_DMA_Start_IT+0x228>)
 81041da:	4293      	cmp	r3, r2
 81041dc:	d009      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	4a53      	ldr	r2, [pc, #332]	@ (8104330 <HAL_DMA_Start_IT+0x22c>)
 81041e4:	4293      	cmp	r3, r2
 81041e6:	d004      	beq.n	81041f2 <HAL_DMA_Start_IT+0xee>
 81041e8:	68fb      	ldr	r3, [r7, #12]
 81041ea:	681b      	ldr	r3, [r3, #0]
 81041ec:	4a51      	ldr	r2, [pc, #324]	@ (8104334 <HAL_DMA_Start_IT+0x230>)
 81041ee:	4293      	cmp	r3, r2
 81041f0:	d108      	bne.n	8104204 <HAL_DMA_Start_IT+0x100>
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	681b      	ldr	r3, [r3, #0]
 81041f6:	681a      	ldr	r2, [r3, #0]
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	f022 0201 	bic.w	r2, r2, #1
 8104200:	601a      	str	r2, [r3, #0]
 8104202:	e007      	b.n	8104214 <HAL_DMA_Start_IT+0x110>
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	681a      	ldr	r2, [r3, #0]
 810420a:	68fb      	ldr	r3, [r7, #12]
 810420c:	681b      	ldr	r3, [r3, #0]
 810420e:	f022 0201 	bic.w	r2, r2, #1
 8104212:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104214:	683b      	ldr	r3, [r7, #0]
 8104216:	687a      	ldr	r2, [r7, #4]
 8104218:	68b9      	ldr	r1, [r7, #8]
 810421a:	68f8      	ldr	r0, [r7, #12]
 810421c:	f001 fb66 	bl	81058ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	4a34      	ldr	r2, [pc, #208]	@ (81042f8 <HAL_DMA_Start_IT+0x1f4>)
 8104226:	4293      	cmp	r3, r2
 8104228:	d04a      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 810422a:	68fb      	ldr	r3, [r7, #12]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	4a33      	ldr	r2, [pc, #204]	@ (81042fc <HAL_DMA_Start_IT+0x1f8>)
 8104230:	4293      	cmp	r3, r2
 8104232:	d045      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	4a31      	ldr	r2, [pc, #196]	@ (8104300 <HAL_DMA_Start_IT+0x1fc>)
 810423a:	4293      	cmp	r3, r2
 810423c:	d040      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	4a30      	ldr	r2, [pc, #192]	@ (8104304 <HAL_DMA_Start_IT+0x200>)
 8104244:	4293      	cmp	r3, r2
 8104246:	d03b      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104248:	68fb      	ldr	r3, [r7, #12]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	4a2e      	ldr	r2, [pc, #184]	@ (8104308 <HAL_DMA_Start_IT+0x204>)
 810424e:	4293      	cmp	r3, r2
 8104250:	d036      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104252:	68fb      	ldr	r3, [r7, #12]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	4a2d      	ldr	r2, [pc, #180]	@ (810430c <HAL_DMA_Start_IT+0x208>)
 8104258:	4293      	cmp	r3, r2
 810425a:	d031      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 810425c:	68fb      	ldr	r3, [r7, #12]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	4a2b      	ldr	r2, [pc, #172]	@ (8104310 <HAL_DMA_Start_IT+0x20c>)
 8104262:	4293      	cmp	r3, r2
 8104264:	d02c      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104266:	68fb      	ldr	r3, [r7, #12]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	4a2a      	ldr	r2, [pc, #168]	@ (8104314 <HAL_DMA_Start_IT+0x210>)
 810426c:	4293      	cmp	r3, r2
 810426e:	d027      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	4a28      	ldr	r2, [pc, #160]	@ (8104318 <HAL_DMA_Start_IT+0x214>)
 8104276:	4293      	cmp	r3, r2
 8104278:	d022      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 810427a:	68fb      	ldr	r3, [r7, #12]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	4a27      	ldr	r2, [pc, #156]	@ (810431c <HAL_DMA_Start_IT+0x218>)
 8104280:	4293      	cmp	r3, r2
 8104282:	d01d      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	4a25      	ldr	r2, [pc, #148]	@ (8104320 <HAL_DMA_Start_IT+0x21c>)
 810428a:	4293      	cmp	r3, r2
 810428c:	d018      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 810428e:	68fb      	ldr	r3, [r7, #12]
 8104290:	681b      	ldr	r3, [r3, #0]
 8104292:	4a24      	ldr	r2, [pc, #144]	@ (8104324 <HAL_DMA_Start_IT+0x220>)
 8104294:	4293      	cmp	r3, r2
 8104296:	d013      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 8104298:	68fb      	ldr	r3, [r7, #12]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	4a22      	ldr	r2, [pc, #136]	@ (8104328 <HAL_DMA_Start_IT+0x224>)
 810429e:	4293      	cmp	r3, r2
 81042a0:	d00e      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 81042a2:	68fb      	ldr	r3, [r7, #12]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	4a21      	ldr	r2, [pc, #132]	@ (810432c <HAL_DMA_Start_IT+0x228>)
 81042a8:	4293      	cmp	r3, r2
 81042aa:	d009      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 81042ac:	68fb      	ldr	r3, [r7, #12]
 81042ae:	681b      	ldr	r3, [r3, #0]
 81042b0:	4a1f      	ldr	r2, [pc, #124]	@ (8104330 <HAL_DMA_Start_IT+0x22c>)
 81042b2:	4293      	cmp	r3, r2
 81042b4:	d004      	beq.n	81042c0 <HAL_DMA_Start_IT+0x1bc>
 81042b6:	68fb      	ldr	r3, [r7, #12]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	4a1e      	ldr	r2, [pc, #120]	@ (8104334 <HAL_DMA_Start_IT+0x230>)
 81042bc:	4293      	cmp	r3, r2
 81042be:	d101      	bne.n	81042c4 <HAL_DMA_Start_IT+0x1c0>
 81042c0:	2301      	movs	r3, #1
 81042c2:	e000      	b.n	81042c6 <HAL_DMA_Start_IT+0x1c2>
 81042c4:	2300      	movs	r3, #0
 81042c6:	2b00      	cmp	r3, #0
 81042c8:	d036      	beq.n	8104338 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042ca:	68fb      	ldr	r3, [r7, #12]
 81042cc:	681b      	ldr	r3, [r3, #0]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	f023 021e 	bic.w	r2, r3, #30
 81042d4:	68fb      	ldr	r3, [r7, #12]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	f042 0216 	orr.w	r2, r2, #22
 81042dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81042de:	68fb      	ldr	r3, [r7, #12]
 81042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d03e      	beq.n	8104364 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81042e6:	68fb      	ldr	r3, [r7, #12]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	681a      	ldr	r2, [r3, #0]
 81042ec:	68fb      	ldr	r3, [r7, #12]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	f042 0208 	orr.w	r2, r2, #8
 81042f4:	601a      	str	r2, [r3, #0]
 81042f6:	e035      	b.n	8104364 <HAL_DMA_Start_IT+0x260>
 81042f8:	40020010 	.word	0x40020010
 81042fc:	40020028 	.word	0x40020028
 8104300:	40020040 	.word	0x40020040
 8104304:	40020058 	.word	0x40020058
 8104308:	40020070 	.word	0x40020070
 810430c:	40020088 	.word	0x40020088
 8104310:	400200a0 	.word	0x400200a0
 8104314:	400200b8 	.word	0x400200b8
 8104318:	40020410 	.word	0x40020410
 810431c:	40020428 	.word	0x40020428
 8104320:	40020440 	.word	0x40020440
 8104324:	40020458 	.word	0x40020458
 8104328:	40020470 	.word	0x40020470
 810432c:	40020488 	.word	0x40020488
 8104330:	400204a0 	.word	0x400204a0
 8104334:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104338:	68fb      	ldr	r3, [r7, #12]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	f023 020e 	bic.w	r2, r3, #14
 8104342:	68fb      	ldr	r3, [r7, #12]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	f042 020a 	orr.w	r2, r2, #10
 810434a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810434c:	68fb      	ldr	r3, [r7, #12]
 810434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104350:	2b00      	cmp	r3, #0
 8104352:	d007      	beq.n	8104364 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	681a      	ldr	r2, [r3, #0]
 810435a:	68fb      	ldr	r3, [r7, #12]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	f042 0204 	orr.w	r2, r2, #4
 8104362:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104364:	68fb      	ldr	r3, [r7, #12]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	4a83      	ldr	r2, [pc, #524]	@ (8104578 <HAL_DMA_Start_IT+0x474>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d072      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 810436e:	68fb      	ldr	r3, [r7, #12]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	4a82      	ldr	r2, [pc, #520]	@ (810457c <HAL_DMA_Start_IT+0x478>)
 8104374:	4293      	cmp	r3, r2
 8104376:	d06d      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	4a80      	ldr	r2, [pc, #512]	@ (8104580 <HAL_DMA_Start_IT+0x47c>)
 810437e:	4293      	cmp	r3, r2
 8104380:	d068      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104382:	68fb      	ldr	r3, [r7, #12]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	4a7f      	ldr	r2, [pc, #508]	@ (8104584 <HAL_DMA_Start_IT+0x480>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d063      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 810438c:	68fb      	ldr	r3, [r7, #12]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	4a7d      	ldr	r2, [pc, #500]	@ (8104588 <HAL_DMA_Start_IT+0x484>)
 8104392:	4293      	cmp	r3, r2
 8104394:	d05e      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104396:	68fb      	ldr	r3, [r7, #12]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	4a7c      	ldr	r2, [pc, #496]	@ (810458c <HAL_DMA_Start_IT+0x488>)
 810439c:	4293      	cmp	r3, r2
 810439e:	d059      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043a0:	68fb      	ldr	r3, [r7, #12]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4a7a      	ldr	r2, [pc, #488]	@ (8104590 <HAL_DMA_Start_IT+0x48c>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d054      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043aa:	68fb      	ldr	r3, [r7, #12]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	4a79      	ldr	r2, [pc, #484]	@ (8104594 <HAL_DMA_Start_IT+0x490>)
 81043b0:	4293      	cmp	r3, r2
 81043b2:	d04f      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043b4:	68fb      	ldr	r3, [r7, #12]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	4a77      	ldr	r2, [pc, #476]	@ (8104598 <HAL_DMA_Start_IT+0x494>)
 81043ba:	4293      	cmp	r3, r2
 81043bc:	d04a      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	4a76      	ldr	r2, [pc, #472]	@ (810459c <HAL_DMA_Start_IT+0x498>)
 81043c4:	4293      	cmp	r3, r2
 81043c6:	d045      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043c8:	68fb      	ldr	r3, [r7, #12]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	4a74      	ldr	r2, [pc, #464]	@ (81045a0 <HAL_DMA_Start_IT+0x49c>)
 81043ce:	4293      	cmp	r3, r2
 81043d0:	d040      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043d2:	68fb      	ldr	r3, [r7, #12]
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	4a73      	ldr	r2, [pc, #460]	@ (81045a4 <HAL_DMA_Start_IT+0x4a0>)
 81043d8:	4293      	cmp	r3, r2
 81043da:	d03b      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043dc:	68fb      	ldr	r3, [r7, #12]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	4a71      	ldr	r2, [pc, #452]	@ (81045a8 <HAL_DMA_Start_IT+0x4a4>)
 81043e2:	4293      	cmp	r3, r2
 81043e4:	d036      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043e6:	68fb      	ldr	r3, [r7, #12]
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	4a70      	ldr	r2, [pc, #448]	@ (81045ac <HAL_DMA_Start_IT+0x4a8>)
 81043ec:	4293      	cmp	r3, r2
 81043ee:	d031      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043f0:	68fb      	ldr	r3, [r7, #12]
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	4a6e      	ldr	r2, [pc, #440]	@ (81045b0 <HAL_DMA_Start_IT+0x4ac>)
 81043f6:	4293      	cmp	r3, r2
 81043f8:	d02c      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	4a6d      	ldr	r2, [pc, #436]	@ (81045b4 <HAL_DMA_Start_IT+0x4b0>)
 8104400:	4293      	cmp	r3, r2
 8104402:	d027      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	681b      	ldr	r3, [r3, #0]
 8104408:	4a6b      	ldr	r2, [pc, #428]	@ (81045b8 <HAL_DMA_Start_IT+0x4b4>)
 810440a:	4293      	cmp	r3, r2
 810440c:	d022      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	4a6a      	ldr	r2, [pc, #424]	@ (81045bc <HAL_DMA_Start_IT+0x4b8>)
 8104414:	4293      	cmp	r3, r2
 8104416:	d01d      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104418:	68fb      	ldr	r3, [r7, #12]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	4a68      	ldr	r2, [pc, #416]	@ (81045c0 <HAL_DMA_Start_IT+0x4bc>)
 810441e:	4293      	cmp	r3, r2
 8104420:	d018      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104422:	68fb      	ldr	r3, [r7, #12]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	4a67      	ldr	r2, [pc, #412]	@ (81045c4 <HAL_DMA_Start_IT+0x4c0>)
 8104428:	4293      	cmp	r3, r2
 810442a:	d013      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 810442c:	68fb      	ldr	r3, [r7, #12]
 810442e:	681b      	ldr	r3, [r3, #0]
 8104430:	4a65      	ldr	r2, [pc, #404]	@ (81045c8 <HAL_DMA_Start_IT+0x4c4>)
 8104432:	4293      	cmp	r3, r2
 8104434:	d00e      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104436:	68fb      	ldr	r3, [r7, #12]
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	4a64      	ldr	r2, [pc, #400]	@ (81045cc <HAL_DMA_Start_IT+0x4c8>)
 810443c:	4293      	cmp	r3, r2
 810443e:	d009      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 8104440:	68fb      	ldr	r3, [r7, #12]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	4a62      	ldr	r2, [pc, #392]	@ (81045d0 <HAL_DMA_Start_IT+0x4cc>)
 8104446:	4293      	cmp	r3, r2
 8104448:	d004      	beq.n	8104454 <HAL_DMA_Start_IT+0x350>
 810444a:	68fb      	ldr	r3, [r7, #12]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	4a61      	ldr	r2, [pc, #388]	@ (81045d4 <HAL_DMA_Start_IT+0x4d0>)
 8104450:	4293      	cmp	r3, r2
 8104452:	d101      	bne.n	8104458 <HAL_DMA_Start_IT+0x354>
 8104454:	2301      	movs	r3, #1
 8104456:	e000      	b.n	810445a <HAL_DMA_Start_IT+0x356>
 8104458:	2300      	movs	r3, #0
 810445a:	2b00      	cmp	r3, #0
 810445c:	d01a      	beq.n	8104494 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104468:	2b00      	cmp	r3, #0
 810446a:	d007      	beq.n	810447c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104470:	681a      	ldr	r2, [r3, #0]
 8104472:	68fb      	ldr	r3, [r7, #12]
 8104474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104476:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810447a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104480:	2b00      	cmp	r3, #0
 8104482:	d007      	beq.n	8104494 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104484:	68fb      	ldr	r3, [r7, #12]
 8104486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104488:	681a      	ldr	r2, [r3, #0]
 810448a:	68fb      	ldr	r3, [r7, #12]
 810448c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810448e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104492:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104494:	68fb      	ldr	r3, [r7, #12]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	4a37      	ldr	r2, [pc, #220]	@ (8104578 <HAL_DMA_Start_IT+0x474>)
 810449a:	4293      	cmp	r3, r2
 810449c:	d04a      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 810449e:	68fb      	ldr	r3, [r7, #12]
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	4a36      	ldr	r2, [pc, #216]	@ (810457c <HAL_DMA_Start_IT+0x478>)
 81044a4:	4293      	cmp	r3, r2
 81044a6:	d045      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	4a34      	ldr	r2, [pc, #208]	@ (8104580 <HAL_DMA_Start_IT+0x47c>)
 81044ae:	4293      	cmp	r3, r2
 81044b0:	d040      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044b2:	68fb      	ldr	r3, [r7, #12]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	4a33      	ldr	r2, [pc, #204]	@ (8104584 <HAL_DMA_Start_IT+0x480>)
 81044b8:	4293      	cmp	r3, r2
 81044ba:	d03b      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044bc:	68fb      	ldr	r3, [r7, #12]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4a31      	ldr	r2, [pc, #196]	@ (8104588 <HAL_DMA_Start_IT+0x484>)
 81044c2:	4293      	cmp	r3, r2
 81044c4:	d036      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044c6:	68fb      	ldr	r3, [r7, #12]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	4a30      	ldr	r2, [pc, #192]	@ (810458c <HAL_DMA_Start_IT+0x488>)
 81044cc:	4293      	cmp	r3, r2
 81044ce:	d031      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044d0:	68fb      	ldr	r3, [r7, #12]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	4a2e      	ldr	r2, [pc, #184]	@ (8104590 <HAL_DMA_Start_IT+0x48c>)
 81044d6:	4293      	cmp	r3, r2
 81044d8:	d02c      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044da:	68fb      	ldr	r3, [r7, #12]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	4a2d      	ldr	r2, [pc, #180]	@ (8104594 <HAL_DMA_Start_IT+0x490>)
 81044e0:	4293      	cmp	r3, r2
 81044e2:	d027      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044e4:	68fb      	ldr	r3, [r7, #12]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	4a2b      	ldr	r2, [pc, #172]	@ (8104598 <HAL_DMA_Start_IT+0x494>)
 81044ea:	4293      	cmp	r3, r2
 81044ec:	d022      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a2a      	ldr	r2, [pc, #168]	@ (810459c <HAL_DMA_Start_IT+0x498>)
 81044f4:	4293      	cmp	r3, r2
 81044f6:	d01d      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	4a28      	ldr	r2, [pc, #160]	@ (81045a0 <HAL_DMA_Start_IT+0x49c>)
 81044fe:	4293      	cmp	r3, r2
 8104500:	d018      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	4a27      	ldr	r2, [pc, #156]	@ (81045a4 <HAL_DMA_Start_IT+0x4a0>)
 8104508:	4293      	cmp	r3, r2
 810450a:	d013      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 810450c:	68fb      	ldr	r3, [r7, #12]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	4a25      	ldr	r2, [pc, #148]	@ (81045a8 <HAL_DMA_Start_IT+0x4a4>)
 8104512:	4293      	cmp	r3, r2
 8104514:	d00e      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 8104516:	68fb      	ldr	r3, [r7, #12]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	4a24      	ldr	r2, [pc, #144]	@ (81045ac <HAL_DMA_Start_IT+0x4a8>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d009      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4a22      	ldr	r2, [pc, #136]	@ (81045b0 <HAL_DMA_Start_IT+0x4ac>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d004      	beq.n	8104534 <HAL_DMA_Start_IT+0x430>
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4a21      	ldr	r2, [pc, #132]	@ (81045b4 <HAL_DMA_Start_IT+0x4b0>)
 8104530:	4293      	cmp	r3, r2
 8104532:	d108      	bne.n	8104546 <HAL_DMA_Start_IT+0x442>
 8104534:	68fb      	ldr	r3, [r7, #12]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	681a      	ldr	r2, [r3, #0]
 810453a:	68fb      	ldr	r3, [r7, #12]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	f042 0201 	orr.w	r2, r2, #1
 8104542:	601a      	str	r2, [r3, #0]
 8104544:	e012      	b.n	810456c <HAL_DMA_Start_IT+0x468>
 8104546:	68fb      	ldr	r3, [r7, #12]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	681a      	ldr	r2, [r3, #0]
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	f042 0201 	orr.w	r2, r2, #1
 8104554:	601a      	str	r2, [r3, #0]
 8104556:	e009      	b.n	810456c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104558:	68fb      	ldr	r3, [r7, #12]
 810455a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810455e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104560:	68fb      	ldr	r3, [r7, #12]
 8104562:	2200      	movs	r2, #0
 8104564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8104568:	2301      	movs	r3, #1
 810456a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 810456c:	7dfb      	ldrb	r3, [r7, #23]
}
 810456e:	4618      	mov	r0, r3
 8104570:	3718      	adds	r7, #24
 8104572:	46bd      	mov	sp, r7
 8104574:	bd80      	pop	{r7, pc}
 8104576:	bf00      	nop
 8104578:	40020010 	.word	0x40020010
 810457c:	40020028 	.word	0x40020028
 8104580:	40020040 	.word	0x40020040
 8104584:	40020058 	.word	0x40020058
 8104588:	40020070 	.word	0x40020070
 810458c:	40020088 	.word	0x40020088
 8104590:	400200a0 	.word	0x400200a0
 8104594:	400200b8 	.word	0x400200b8
 8104598:	40020410 	.word	0x40020410
 810459c:	40020428 	.word	0x40020428
 81045a0:	40020440 	.word	0x40020440
 81045a4:	40020458 	.word	0x40020458
 81045a8:	40020470 	.word	0x40020470
 81045ac:	40020488 	.word	0x40020488
 81045b0:	400204a0 	.word	0x400204a0
 81045b4:	400204b8 	.word	0x400204b8
 81045b8:	58025408 	.word	0x58025408
 81045bc:	5802541c 	.word	0x5802541c
 81045c0:	58025430 	.word	0x58025430
 81045c4:	58025444 	.word	0x58025444
 81045c8:	58025458 	.word	0x58025458
 81045cc:	5802546c 	.word	0x5802546c
 81045d0:	58025480 	.word	0x58025480
 81045d4:	58025494 	.word	0x58025494

081045d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81045d8:	b580      	push	{r7, lr}
 81045da:	b084      	sub	sp, #16
 81045dc:	af00      	add	r7, sp, #0
 81045de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	2b00      	cmp	r3, #0
 81045e4:	d101      	bne.n	81045ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81045e6:	2301      	movs	r3, #1
 81045e8:	e237      	b.n	8104a5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81045f0:	b2db      	uxtb	r3, r3
 81045f2:	2b02      	cmp	r3, #2
 81045f4:	d004      	beq.n	8104600 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	2280      	movs	r2, #128	@ 0x80
 81045fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81045fc:	2301      	movs	r3, #1
 81045fe:	e22c      	b.n	8104a5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	4a5c      	ldr	r2, [pc, #368]	@ (8104778 <HAL_DMA_Abort_IT+0x1a0>)
 8104606:	4293      	cmp	r3, r2
 8104608:	d04a      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	681b      	ldr	r3, [r3, #0]
 810460e:	4a5b      	ldr	r2, [pc, #364]	@ (810477c <HAL_DMA_Abort_IT+0x1a4>)
 8104610:	4293      	cmp	r3, r2
 8104612:	d045      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	4a59      	ldr	r2, [pc, #356]	@ (8104780 <HAL_DMA_Abort_IT+0x1a8>)
 810461a:	4293      	cmp	r3, r2
 810461c:	d040      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	681b      	ldr	r3, [r3, #0]
 8104622:	4a58      	ldr	r2, [pc, #352]	@ (8104784 <HAL_DMA_Abort_IT+0x1ac>)
 8104624:	4293      	cmp	r3, r2
 8104626:	d03b      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	681b      	ldr	r3, [r3, #0]
 810462c:	4a56      	ldr	r2, [pc, #344]	@ (8104788 <HAL_DMA_Abort_IT+0x1b0>)
 810462e:	4293      	cmp	r3, r2
 8104630:	d036      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	681b      	ldr	r3, [r3, #0]
 8104636:	4a55      	ldr	r2, [pc, #340]	@ (810478c <HAL_DMA_Abort_IT+0x1b4>)
 8104638:	4293      	cmp	r3, r2
 810463a:	d031      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	4a53      	ldr	r2, [pc, #332]	@ (8104790 <HAL_DMA_Abort_IT+0x1b8>)
 8104642:	4293      	cmp	r3, r2
 8104644:	d02c      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	4a52      	ldr	r2, [pc, #328]	@ (8104794 <HAL_DMA_Abort_IT+0x1bc>)
 810464c:	4293      	cmp	r3, r2
 810464e:	d027      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	681b      	ldr	r3, [r3, #0]
 8104654:	4a50      	ldr	r2, [pc, #320]	@ (8104798 <HAL_DMA_Abort_IT+0x1c0>)
 8104656:	4293      	cmp	r3, r2
 8104658:	d022      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	4a4f      	ldr	r2, [pc, #316]	@ (810479c <HAL_DMA_Abort_IT+0x1c4>)
 8104660:	4293      	cmp	r3, r2
 8104662:	d01d      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	681b      	ldr	r3, [r3, #0]
 8104668:	4a4d      	ldr	r2, [pc, #308]	@ (81047a0 <HAL_DMA_Abort_IT+0x1c8>)
 810466a:	4293      	cmp	r3, r2
 810466c:	d018      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	4a4c      	ldr	r2, [pc, #304]	@ (81047a4 <HAL_DMA_Abort_IT+0x1cc>)
 8104674:	4293      	cmp	r3, r2
 8104676:	d013      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	681b      	ldr	r3, [r3, #0]
 810467c:	4a4a      	ldr	r2, [pc, #296]	@ (81047a8 <HAL_DMA_Abort_IT+0x1d0>)
 810467e:	4293      	cmp	r3, r2
 8104680:	d00e      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	4a49      	ldr	r2, [pc, #292]	@ (81047ac <HAL_DMA_Abort_IT+0x1d4>)
 8104688:	4293      	cmp	r3, r2
 810468a:	d009      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	4a47      	ldr	r2, [pc, #284]	@ (81047b0 <HAL_DMA_Abort_IT+0x1d8>)
 8104692:	4293      	cmp	r3, r2
 8104694:	d004      	beq.n	81046a0 <HAL_DMA_Abort_IT+0xc8>
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	4a46      	ldr	r2, [pc, #280]	@ (81047b4 <HAL_DMA_Abort_IT+0x1dc>)
 810469c:	4293      	cmp	r3, r2
 810469e:	d101      	bne.n	81046a4 <HAL_DMA_Abort_IT+0xcc>
 81046a0:	2301      	movs	r3, #1
 81046a2:	e000      	b.n	81046a6 <HAL_DMA_Abort_IT+0xce>
 81046a4:	2300      	movs	r3, #0
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	f000 8086 	beq.w	81047b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	2204      	movs	r2, #4
 81046b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	4a2f      	ldr	r2, [pc, #188]	@ (8104778 <HAL_DMA_Abort_IT+0x1a0>)
 81046ba:	4293      	cmp	r3, r2
 81046bc:	d04a      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	681b      	ldr	r3, [r3, #0]
 81046c2:	4a2e      	ldr	r2, [pc, #184]	@ (810477c <HAL_DMA_Abort_IT+0x1a4>)
 81046c4:	4293      	cmp	r3, r2
 81046c6:	d045      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	4a2c      	ldr	r2, [pc, #176]	@ (8104780 <HAL_DMA_Abort_IT+0x1a8>)
 81046ce:	4293      	cmp	r3, r2
 81046d0:	d040      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	681b      	ldr	r3, [r3, #0]
 81046d6:	4a2b      	ldr	r2, [pc, #172]	@ (8104784 <HAL_DMA_Abort_IT+0x1ac>)
 81046d8:	4293      	cmp	r3, r2
 81046da:	d03b      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	4a29      	ldr	r2, [pc, #164]	@ (8104788 <HAL_DMA_Abort_IT+0x1b0>)
 81046e2:	4293      	cmp	r3, r2
 81046e4:	d036      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	4a28      	ldr	r2, [pc, #160]	@ (810478c <HAL_DMA_Abort_IT+0x1b4>)
 81046ec:	4293      	cmp	r3, r2
 81046ee:	d031      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	681b      	ldr	r3, [r3, #0]
 81046f4:	4a26      	ldr	r2, [pc, #152]	@ (8104790 <HAL_DMA_Abort_IT+0x1b8>)
 81046f6:	4293      	cmp	r3, r2
 81046f8:	d02c      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	4a25      	ldr	r2, [pc, #148]	@ (8104794 <HAL_DMA_Abort_IT+0x1bc>)
 8104700:	4293      	cmp	r3, r2
 8104702:	d027      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	4a23      	ldr	r2, [pc, #140]	@ (8104798 <HAL_DMA_Abort_IT+0x1c0>)
 810470a:	4293      	cmp	r3, r2
 810470c:	d022      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 810470e:	687b      	ldr	r3, [r7, #4]
 8104710:	681b      	ldr	r3, [r3, #0]
 8104712:	4a22      	ldr	r2, [pc, #136]	@ (810479c <HAL_DMA_Abort_IT+0x1c4>)
 8104714:	4293      	cmp	r3, r2
 8104716:	d01d      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	4a20      	ldr	r2, [pc, #128]	@ (81047a0 <HAL_DMA_Abort_IT+0x1c8>)
 810471e:	4293      	cmp	r3, r2
 8104720:	d018      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	4a1f      	ldr	r2, [pc, #124]	@ (81047a4 <HAL_DMA_Abort_IT+0x1cc>)
 8104728:	4293      	cmp	r3, r2
 810472a:	d013      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	4a1d      	ldr	r2, [pc, #116]	@ (81047a8 <HAL_DMA_Abort_IT+0x1d0>)
 8104732:	4293      	cmp	r3, r2
 8104734:	d00e      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	4a1c      	ldr	r2, [pc, #112]	@ (81047ac <HAL_DMA_Abort_IT+0x1d4>)
 810473c:	4293      	cmp	r3, r2
 810473e:	d009      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	4a1a      	ldr	r2, [pc, #104]	@ (81047b0 <HAL_DMA_Abort_IT+0x1d8>)
 8104746:	4293      	cmp	r3, r2
 8104748:	d004      	beq.n	8104754 <HAL_DMA_Abort_IT+0x17c>
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	4a19      	ldr	r2, [pc, #100]	@ (81047b4 <HAL_DMA_Abort_IT+0x1dc>)
 8104750:	4293      	cmp	r3, r2
 8104752:	d108      	bne.n	8104766 <HAL_DMA_Abort_IT+0x18e>
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	681a      	ldr	r2, [r3, #0]
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	f022 0201 	bic.w	r2, r2, #1
 8104762:	601a      	str	r2, [r3, #0]
 8104764:	e178      	b.n	8104a58 <HAL_DMA_Abort_IT+0x480>
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	681a      	ldr	r2, [r3, #0]
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	681b      	ldr	r3, [r3, #0]
 8104770:	f022 0201 	bic.w	r2, r2, #1
 8104774:	601a      	str	r2, [r3, #0]
 8104776:	e16f      	b.n	8104a58 <HAL_DMA_Abort_IT+0x480>
 8104778:	40020010 	.word	0x40020010
 810477c:	40020028 	.word	0x40020028
 8104780:	40020040 	.word	0x40020040
 8104784:	40020058 	.word	0x40020058
 8104788:	40020070 	.word	0x40020070
 810478c:	40020088 	.word	0x40020088
 8104790:	400200a0 	.word	0x400200a0
 8104794:	400200b8 	.word	0x400200b8
 8104798:	40020410 	.word	0x40020410
 810479c:	40020428 	.word	0x40020428
 81047a0:	40020440 	.word	0x40020440
 81047a4:	40020458 	.word	0x40020458
 81047a8:	40020470 	.word	0x40020470
 81047ac:	40020488 	.word	0x40020488
 81047b0:	400204a0 	.word	0x400204a0
 81047b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	681b      	ldr	r3, [r3, #0]
 81047bc:	681a      	ldr	r2, [r3, #0]
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	f022 020e 	bic.w	r2, r2, #14
 81047c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a6c      	ldr	r2, [pc, #432]	@ (8104980 <HAL_DMA_Abort_IT+0x3a8>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d04a      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a6b      	ldr	r2, [pc, #428]	@ (8104984 <HAL_DMA_Abort_IT+0x3ac>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d045      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a69      	ldr	r2, [pc, #420]	@ (8104988 <HAL_DMA_Abort_IT+0x3b0>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d040      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	4a68      	ldr	r2, [pc, #416]	@ (810498c <HAL_DMA_Abort_IT+0x3b4>)
 81047ec:	4293      	cmp	r3, r2
 81047ee:	d03b      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	4a66      	ldr	r2, [pc, #408]	@ (8104990 <HAL_DMA_Abort_IT+0x3b8>)
 81047f6:	4293      	cmp	r3, r2
 81047f8:	d036      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	4a65      	ldr	r2, [pc, #404]	@ (8104994 <HAL_DMA_Abort_IT+0x3bc>)
 8104800:	4293      	cmp	r3, r2
 8104802:	d031      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	4a63      	ldr	r2, [pc, #396]	@ (8104998 <HAL_DMA_Abort_IT+0x3c0>)
 810480a:	4293      	cmp	r3, r2
 810480c:	d02c      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	681b      	ldr	r3, [r3, #0]
 8104812:	4a62      	ldr	r2, [pc, #392]	@ (810499c <HAL_DMA_Abort_IT+0x3c4>)
 8104814:	4293      	cmp	r3, r2
 8104816:	d027      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	4a60      	ldr	r2, [pc, #384]	@ (81049a0 <HAL_DMA_Abort_IT+0x3c8>)
 810481e:	4293      	cmp	r3, r2
 8104820:	d022      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	4a5f      	ldr	r2, [pc, #380]	@ (81049a4 <HAL_DMA_Abort_IT+0x3cc>)
 8104828:	4293      	cmp	r3, r2
 810482a:	d01d      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	681b      	ldr	r3, [r3, #0]
 8104830:	4a5d      	ldr	r2, [pc, #372]	@ (81049a8 <HAL_DMA_Abort_IT+0x3d0>)
 8104832:	4293      	cmp	r3, r2
 8104834:	d018      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	4a5c      	ldr	r2, [pc, #368]	@ (81049ac <HAL_DMA_Abort_IT+0x3d4>)
 810483c:	4293      	cmp	r3, r2
 810483e:	d013      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	4a5a      	ldr	r2, [pc, #360]	@ (81049b0 <HAL_DMA_Abort_IT+0x3d8>)
 8104846:	4293      	cmp	r3, r2
 8104848:	d00e      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	4a59      	ldr	r2, [pc, #356]	@ (81049b4 <HAL_DMA_Abort_IT+0x3dc>)
 8104850:	4293      	cmp	r3, r2
 8104852:	d009      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	4a57      	ldr	r2, [pc, #348]	@ (81049b8 <HAL_DMA_Abort_IT+0x3e0>)
 810485a:	4293      	cmp	r3, r2
 810485c:	d004      	beq.n	8104868 <HAL_DMA_Abort_IT+0x290>
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	4a56      	ldr	r2, [pc, #344]	@ (81049bc <HAL_DMA_Abort_IT+0x3e4>)
 8104864:	4293      	cmp	r3, r2
 8104866:	d108      	bne.n	810487a <HAL_DMA_Abort_IT+0x2a2>
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	681a      	ldr	r2, [r3, #0]
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	f022 0201 	bic.w	r2, r2, #1
 8104876:	601a      	str	r2, [r3, #0]
 8104878:	e007      	b.n	810488a <HAL_DMA_Abort_IT+0x2b2>
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	681a      	ldr	r2, [r3, #0]
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	f022 0201 	bic.w	r2, r2, #1
 8104888:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	681b      	ldr	r3, [r3, #0]
 810488e:	4a3c      	ldr	r2, [pc, #240]	@ (8104980 <HAL_DMA_Abort_IT+0x3a8>)
 8104890:	4293      	cmp	r3, r2
 8104892:	d072      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	681b      	ldr	r3, [r3, #0]
 8104898:	4a3a      	ldr	r2, [pc, #232]	@ (8104984 <HAL_DMA_Abort_IT+0x3ac>)
 810489a:	4293      	cmp	r3, r2
 810489c:	d06d      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 810489e:	687b      	ldr	r3, [r7, #4]
 81048a0:	681b      	ldr	r3, [r3, #0]
 81048a2:	4a39      	ldr	r2, [pc, #228]	@ (8104988 <HAL_DMA_Abort_IT+0x3b0>)
 81048a4:	4293      	cmp	r3, r2
 81048a6:	d068      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	681b      	ldr	r3, [r3, #0]
 81048ac:	4a37      	ldr	r2, [pc, #220]	@ (810498c <HAL_DMA_Abort_IT+0x3b4>)
 81048ae:	4293      	cmp	r3, r2
 81048b0:	d063      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	4a36      	ldr	r2, [pc, #216]	@ (8104990 <HAL_DMA_Abort_IT+0x3b8>)
 81048b8:	4293      	cmp	r3, r2
 81048ba:	d05e      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	4a34      	ldr	r2, [pc, #208]	@ (8104994 <HAL_DMA_Abort_IT+0x3bc>)
 81048c2:	4293      	cmp	r3, r2
 81048c4:	d059      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	681b      	ldr	r3, [r3, #0]
 81048ca:	4a33      	ldr	r2, [pc, #204]	@ (8104998 <HAL_DMA_Abort_IT+0x3c0>)
 81048cc:	4293      	cmp	r3, r2
 81048ce:	d054      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	681b      	ldr	r3, [r3, #0]
 81048d4:	4a31      	ldr	r2, [pc, #196]	@ (810499c <HAL_DMA_Abort_IT+0x3c4>)
 81048d6:	4293      	cmp	r3, r2
 81048d8:	d04f      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	4a30      	ldr	r2, [pc, #192]	@ (81049a0 <HAL_DMA_Abort_IT+0x3c8>)
 81048e0:	4293      	cmp	r3, r2
 81048e2:	d04a      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	4a2e      	ldr	r2, [pc, #184]	@ (81049a4 <HAL_DMA_Abort_IT+0x3cc>)
 81048ea:	4293      	cmp	r3, r2
 81048ec:	d045      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	681b      	ldr	r3, [r3, #0]
 81048f2:	4a2d      	ldr	r2, [pc, #180]	@ (81049a8 <HAL_DMA_Abort_IT+0x3d0>)
 81048f4:	4293      	cmp	r3, r2
 81048f6:	d040      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	4a2b      	ldr	r2, [pc, #172]	@ (81049ac <HAL_DMA_Abort_IT+0x3d4>)
 81048fe:	4293      	cmp	r3, r2
 8104900:	d03b      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	4a2a      	ldr	r2, [pc, #168]	@ (81049b0 <HAL_DMA_Abort_IT+0x3d8>)
 8104908:	4293      	cmp	r3, r2
 810490a:	d036      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	4a28      	ldr	r2, [pc, #160]	@ (81049b4 <HAL_DMA_Abort_IT+0x3dc>)
 8104912:	4293      	cmp	r3, r2
 8104914:	d031      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	4a27      	ldr	r2, [pc, #156]	@ (81049b8 <HAL_DMA_Abort_IT+0x3e0>)
 810491c:	4293      	cmp	r3, r2
 810491e:	d02c      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	4a25      	ldr	r2, [pc, #148]	@ (81049bc <HAL_DMA_Abort_IT+0x3e4>)
 8104926:	4293      	cmp	r3, r2
 8104928:	d027      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	4a24      	ldr	r2, [pc, #144]	@ (81049c0 <HAL_DMA_Abort_IT+0x3e8>)
 8104930:	4293      	cmp	r3, r2
 8104932:	d022      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	4a22      	ldr	r2, [pc, #136]	@ (81049c4 <HAL_DMA_Abort_IT+0x3ec>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d01d      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a21      	ldr	r2, [pc, #132]	@ (81049c8 <HAL_DMA_Abort_IT+0x3f0>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d018      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	4a1f      	ldr	r2, [pc, #124]	@ (81049cc <HAL_DMA_Abort_IT+0x3f4>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d013      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	4a1e      	ldr	r2, [pc, #120]	@ (81049d0 <HAL_DMA_Abort_IT+0x3f8>)
 8104958:	4293      	cmp	r3, r2
 810495a:	d00e      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	4a1c      	ldr	r2, [pc, #112]	@ (81049d4 <HAL_DMA_Abort_IT+0x3fc>)
 8104962:	4293      	cmp	r3, r2
 8104964:	d009      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	4a1b      	ldr	r2, [pc, #108]	@ (81049d8 <HAL_DMA_Abort_IT+0x400>)
 810496c:	4293      	cmp	r3, r2
 810496e:	d004      	beq.n	810497a <HAL_DMA_Abort_IT+0x3a2>
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	4a19      	ldr	r2, [pc, #100]	@ (81049dc <HAL_DMA_Abort_IT+0x404>)
 8104976:	4293      	cmp	r3, r2
 8104978:	d132      	bne.n	81049e0 <HAL_DMA_Abort_IT+0x408>
 810497a:	2301      	movs	r3, #1
 810497c:	e031      	b.n	81049e2 <HAL_DMA_Abort_IT+0x40a>
 810497e:	bf00      	nop
 8104980:	40020010 	.word	0x40020010
 8104984:	40020028 	.word	0x40020028
 8104988:	40020040 	.word	0x40020040
 810498c:	40020058 	.word	0x40020058
 8104990:	40020070 	.word	0x40020070
 8104994:	40020088 	.word	0x40020088
 8104998:	400200a0 	.word	0x400200a0
 810499c:	400200b8 	.word	0x400200b8
 81049a0:	40020410 	.word	0x40020410
 81049a4:	40020428 	.word	0x40020428
 81049a8:	40020440 	.word	0x40020440
 81049ac:	40020458 	.word	0x40020458
 81049b0:	40020470 	.word	0x40020470
 81049b4:	40020488 	.word	0x40020488
 81049b8:	400204a0 	.word	0x400204a0
 81049bc:	400204b8 	.word	0x400204b8
 81049c0:	58025408 	.word	0x58025408
 81049c4:	5802541c 	.word	0x5802541c
 81049c8:	58025430 	.word	0x58025430
 81049cc:	58025444 	.word	0x58025444
 81049d0:	58025458 	.word	0x58025458
 81049d4:	5802546c 	.word	0x5802546c
 81049d8:	58025480 	.word	0x58025480
 81049dc:	58025494 	.word	0x58025494
 81049e0:	2300      	movs	r3, #0
 81049e2:	2b00      	cmp	r3, #0
 81049e4:	d028      	beq.n	8104a38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81049ea:	681a      	ldr	r2, [r3, #0]
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81049f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81049f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a00:	f003 031f 	and.w	r3, r3, #31
 8104a04:	2201      	movs	r2, #1
 8104a06:	409a      	lsls	r2, r3
 8104a08:	68fb      	ldr	r3, [r7, #12]
 8104a0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104a10:	687a      	ldr	r2, [r7, #4]
 8104a12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104a14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104a1a:	2b00      	cmp	r3, #0
 8104a1c:	d00c      	beq.n	8104a38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104a22:	681a      	ldr	r2, [r3, #0]
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104a2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104a32:	687a      	ldr	r2, [r7, #4]
 8104a34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8104a36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	2201      	movs	r2, #1
 8104a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	2200      	movs	r2, #0
 8104a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d003      	beq.n	8104a58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a54:	6878      	ldr	r0, [r7, #4]
 8104a56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8104a58:	2300      	movs	r3, #0
}
 8104a5a:	4618      	mov	r0, r3
 8104a5c:	3710      	adds	r7, #16
 8104a5e:	46bd      	mov	sp, r7
 8104a60:	bd80      	pop	{r7, pc}
 8104a62:	bf00      	nop

08104a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104a64:	b580      	push	{r7, lr}
 8104a66:	b08a      	sub	sp, #40	@ 0x28
 8104a68:	af00      	add	r7, sp, #0
 8104a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8104a6c:	2300      	movs	r3, #0
 8104a6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104a70:	4b67      	ldr	r3, [pc, #412]	@ (8104c10 <HAL_DMA_IRQHandler+0x1ac>)
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	4a67      	ldr	r2, [pc, #412]	@ (8104c14 <HAL_DMA_IRQHandler+0x1b0>)
 8104a76:	fba2 2303 	umull	r2, r3, r2, r3
 8104a7a:	0a9b      	lsrs	r3, r3, #10
 8104a7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104a84:	687b      	ldr	r3, [r7, #4]
 8104a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8104a8a:	6a3b      	ldr	r3, [r7, #32]
 8104a8c:	681b      	ldr	r3, [r3, #0]
 8104a8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8104a90:	69fb      	ldr	r3, [r7, #28]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8104c18 <HAL_DMA_IRQHandler+0x1b4>)
 8104a9c:	4293      	cmp	r3, r2
 8104a9e:	d04a      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	4a5d      	ldr	r2, [pc, #372]	@ (8104c1c <HAL_DMA_IRQHandler+0x1b8>)
 8104aa6:	4293      	cmp	r3, r2
 8104aa8:	d045      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	4a5c      	ldr	r2, [pc, #368]	@ (8104c20 <HAL_DMA_IRQHandler+0x1bc>)
 8104ab0:	4293      	cmp	r3, r2
 8104ab2:	d040      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104ab4:	687b      	ldr	r3, [r7, #4]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	4a5a      	ldr	r2, [pc, #360]	@ (8104c24 <HAL_DMA_IRQHandler+0x1c0>)
 8104aba:	4293      	cmp	r3, r2
 8104abc:	d03b      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	4a59      	ldr	r2, [pc, #356]	@ (8104c28 <HAL_DMA_IRQHandler+0x1c4>)
 8104ac4:	4293      	cmp	r3, r2
 8104ac6:	d036      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	4a57      	ldr	r2, [pc, #348]	@ (8104c2c <HAL_DMA_IRQHandler+0x1c8>)
 8104ace:	4293      	cmp	r3, r2
 8104ad0:	d031      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	4a56      	ldr	r2, [pc, #344]	@ (8104c30 <HAL_DMA_IRQHandler+0x1cc>)
 8104ad8:	4293      	cmp	r3, r2
 8104ada:	d02c      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	4a54      	ldr	r2, [pc, #336]	@ (8104c34 <HAL_DMA_IRQHandler+0x1d0>)
 8104ae2:	4293      	cmp	r3, r2
 8104ae4:	d027      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	4a53      	ldr	r2, [pc, #332]	@ (8104c38 <HAL_DMA_IRQHandler+0x1d4>)
 8104aec:	4293      	cmp	r3, r2
 8104aee:	d022      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104af0:	687b      	ldr	r3, [r7, #4]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	4a51      	ldr	r2, [pc, #324]	@ (8104c3c <HAL_DMA_IRQHandler+0x1d8>)
 8104af6:	4293      	cmp	r3, r2
 8104af8:	d01d      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104afa:	687b      	ldr	r3, [r7, #4]
 8104afc:	681b      	ldr	r3, [r3, #0]
 8104afe:	4a50      	ldr	r2, [pc, #320]	@ (8104c40 <HAL_DMA_IRQHandler+0x1dc>)
 8104b00:	4293      	cmp	r3, r2
 8104b02:	d018      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	4a4e      	ldr	r2, [pc, #312]	@ (8104c44 <HAL_DMA_IRQHandler+0x1e0>)
 8104b0a:	4293      	cmp	r3, r2
 8104b0c:	d013      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	4a4d      	ldr	r2, [pc, #308]	@ (8104c48 <HAL_DMA_IRQHandler+0x1e4>)
 8104b14:	4293      	cmp	r3, r2
 8104b16:	d00e      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8104c4c <HAL_DMA_IRQHandler+0x1e8>)
 8104b1e:	4293      	cmp	r3, r2
 8104b20:	d009      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	4a4a      	ldr	r2, [pc, #296]	@ (8104c50 <HAL_DMA_IRQHandler+0x1ec>)
 8104b28:	4293      	cmp	r3, r2
 8104b2a:	d004      	beq.n	8104b36 <HAL_DMA_IRQHandler+0xd2>
 8104b2c:	687b      	ldr	r3, [r7, #4]
 8104b2e:	681b      	ldr	r3, [r3, #0]
 8104b30:	4a48      	ldr	r2, [pc, #288]	@ (8104c54 <HAL_DMA_IRQHandler+0x1f0>)
 8104b32:	4293      	cmp	r3, r2
 8104b34:	d101      	bne.n	8104b3a <HAL_DMA_IRQHandler+0xd6>
 8104b36:	2301      	movs	r3, #1
 8104b38:	e000      	b.n	8104b3c <HAL_DMA_IRQHandler+0xd8>
 8104b3a:	2300      	movs	r3, #0
 8104b3c:	2b00      	cmp	r3, #0
 8104b3e:	f000 842b 	beq.w	8105398 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104b46:	f003 031f 	and.w	r3, r3, #31
 8104b4a:	2208      	movs	r2, #8
 8104b4c:	409a      	lsls	r2, r3
 8104b4e:	69bb      	ldr	r3, [r7, #24]
 8104b50:	4013      	ands	r3, r2
 8104b52:	2b00      	cmp	r3, #0
 8104b54:	f000 80a2 	beq.w	8104c9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8104c18 <HAL_DMA_IRQHandler+0x1b4>)
 8104b5e:	4293      	cmp	r3, r2
 8104b60:	d04a      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	4a2d      	ldr	r2, [pc, #180]	@ (8104c1c <HAL_DMA_IRQHandler+0x1b8>)
 8104b68:	4293      	cmp	r3, r2
 8104b6a:	d045      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	4a2b      	ldr	r2, [pc, #172]	@ (8104c20 <HAL_DMA_IRQHandler+0x1bc>)
 8104b72:	4293      	cmp	r3, r2
 8104b74:	d040      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8104c24 <HAL_DMA_IRQHandler+0x1c0>)
 8104b7c:	4293      	cmp	r3, r2
 8104b7e:	d03b      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	681b      	ldr	r3, [r3, #0]
 8104b84:	4a28      	ldr	r2, [pc, #160]	@ (8104c28 <HAL_DMA_IRQHandler+0x1c4>)
 8104b86:	4293      	cmp	r3, r2
 8104b88:	d036      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	4a27      	ldr	r2, [pc, #156]	@ (8104c2c <HAL_DMA_IRQHandler+0x1c8>)
 8104b90:	4293      	cmp	r3, r2
 8104b92:	d031      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	4a25      	ldr	r2, [pc, #148]	@ (8104c30 <HAL_DMA_IRQHandler+0x1cc>)
 8104b9a:	4293      	cmp	r3, r2
 8104b9c:	d02c      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	4a24      	ldr	r2, [pc, #144]	@ (8104c34 <HAL_DMA_IRQHandler+0x1d0>)
 8104ba4:	4293      	cmp	r3, r2
 8104ba6:	d027      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	4a22      	ldr	r2, [pc, #136]	@ (8104c38 <HAL_DMA_IRQHandler+0x1d4>)
 8104bae:	4293      	cmp	r3, r2
 8104bb0:	d022      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	4a21      	ldr	r2, [pc, #132]	@ (8104c3c <HAL_DMA_IRQHandler+0x1d8>)
 8104bb8:	4293      	cmp	r3, r2
 8104bba:	d01d      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8104c40 <HAL_DMA_IRQHandler+0x1dc>)
 8104bc2:	4293      	cmp	r3, r2
 8104bc4:	d018      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	4a1e      	ldr	r2, [pc, #120]	@ (8104c44 <HAL_DMA_IRQHandler+0x1e0>)
 8104bcc:	4293      	cmp	r3, r2
 8104bce:	d013      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8104c48 <HAL_DMA_IRQHandler+0x1e4>)
 8104bd6:	4293      	cmp	r3, r2
 8104bd8:	d00e      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104bda:	687b      	ldr	r3, [r7, #4]
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	4a1b      	ldr	r2, [pc, #108]	@ (8104c4c <HAL_DMA_IRQHandler+0x1e8>)
 8104be0:	4293      	cmp	r3, r2
 8104be2:	d009      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	4a19      	ldr	r2, [pc, #100]	@ (8104c50 <HAL_DMA_IRQHandler+0x1ec>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d004      	beq.n	8104bf8 <HAL_DMA_IRQHandler+0x194>
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	4a18      	ldr	r2, [pc, #96]	@ (8104c54 <HAL_DMA_IRQHandler+0x1f0>)
 8104bf4:	4293      	cmp	r3, r2
 8104bf6:	d12f      	bne.n	8104c58 <HAL_DMA_IRQHandler+0x1f4>
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	f003 0304 	and.w	r3, r3, #4
 8104c02:	2b00      	cmp	r3, #0
 8104c04:	bf14      	ite	ne
 8104c06:	2301      	movne	r3, #1
 8104c08:	2300      	moveq	r3, #0
 8104c0a:	b2db      	uxtb	r3, r3
 8104c0c:	e02e      	b.n	8104c6c <HAL_DMA_IRQHandler+0x208>
 8104c0e:	bf00      	nop
 8104c10:	10000020 	.word	0x10000020
 8104c14:	1b4e81b5 	.word	0x1b4e81b5
 8104c18:	40020010 	.word	0x40020010
 8104c1c:	40020028 	.word	0x40020028
 8104c20:	40020040 	.word	0x40020040
 8104c24:	40020058 	.word	0x40020058
 8104c28:	40020070 	.word	0x40020070
 8104c2c:	40020088 	.word	0x40020088
 8104c30:	400200a0 	.word	0x400200a0
 8104c34:	400200b8 	.word	0x400200b8
 8104c38:	40020410 	.word	0x40020410
 8104c3c:	40020428 	.word	0x40020428
 8104c40:	40020440 	.word	0x40020440
 8104c44:	40020458 	.word	0x40020458
 8104c48:	40020470 	.word	0x40020470
 8104c4c:	40020488 	.word	0x40020488
 8104c50:	400204a0 	.word	0x400204a0
 8104c54:	400204b8 	.word	0x400204b8
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	681b      	ldr	r3, [r3, #0]
 8104c5e:	f003 0308 	and.w	r3, r3, #8
 8104c62:	2b00      	cmp	r3, #0
 8104c64:	bf14      	ite	ne
 8104c66:	2301      	movne	r3, #1
 8104c68:	2300      	moveq	r3, #0
 8104c6a:	b2db      	uxtb	r3, r3
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	d015      	beq.n	8104c9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	681a      	ldr	r2, [r3, #0]
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	f022 0204 	bic.w	r2, r2, #4
 8104c7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104c84:	f003 031f 	and.w	r3, r3, #31
 8104c88:	2208      	movs	r2, #8
 8104c8a:	409a      	lsls	r2, r3
 8104c8c:	6a3b      	ldr	r3, [r7, #32]
 8104c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c94:	f043 0201 	orr.w	r2, r3, #1
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104ca0:	f003 031f 	and.w	r3, r3, #31
 8104ca4:	69ba      	ldr	r2, [r7, #24]
 8104ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8104caa:	f003 0301 	and.w	r3, r3, #1
 8104cae:	2b00      	cmp	r3, #0
 8104cb0:	d06e      	beq.n	8104d90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	681b      	ldr	r3, [r3, #0]
 8104cb6:	4a69      	ldr	r2, [pc, #420]	@ (8104e5c <HAL_DMA_IRQHandler+0x3f8>)
 8104cb8:	4293      	cmp	r3, r2
 8104cba:	d04a      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	4a67      	ldr	r2, [pc, #412]	@ (8104e60 <HAL_DMA_IRQHandler+0x3fc>)
 8104cc2:	4293      	cmp	r3, r2
 8104cc4:	d045      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	681b      	ldr	r3, [r3, #0]
 8104cca:	4a66      	ldr	r2, [pc, #408]	@ (8104e64 <HAL_DMA_IRQHandler+0x400>)
 8104ccc:	4293      	cmp	r3, r2
 8104cce:	d040      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	681b      	ldr	r3, [r3, #0]
 8104cd4:	4a64      	ldr	r2, [pc, #400]	@ (8104e68 <HAL_DMA_IRQHandler+0x404>)
 8104cd6:	4293      	cmp	r3, r2
 8104cd8:	d03b      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	4a63      	ldr	r2, [pc, #396]	@ (8104e6c <HAL_DMA_IRQHandler+0x408>)
 8104ce0:	4293      	cmp	r3, r2
 8104ce2:	d036      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	681b      	ldr	r3, [r3, #0]
 8104ce8:	4a61      	ldr	r2, [pc, #388]	@ (8104e70 <HAL_DMA_IRQHandler+0x40c>)
 8104cea:	4293      	cmp	r3, r2
 8104cec:	d031      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	4a60      	ldr	r2, [pc, #384]	@ (8104e74 <HAL_DMA_IRQHandler+0x410>)
 8104cf4:	4293      	cmp	r3, r2
 8104cf6:	d02c      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	4a5e      	ldr	r2, [pc, #376]	@ (8104e78 <HAL_DMA_IRQHandler+0x414>)
 8104cfe:	4293      	cmp	r3, r2
 8104d00:	d027      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	4a5d      	ldr	r2, [pc, #372]	@ (8104e7c <HAL_DMA_IRQHandler+0x418>)
 8104d08:	4293      	cmp	r3, r2
 8104d0a:	d022      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	681b      	ldr	r3, [r3, #0]
 8104d10:	4a5b      	ldr	r2, [pc, #364]	@ (8104e80 <HAL_DMA_IRQHandler+0x41c>)
 8104d12:	4293      	cmp	r3, r2
 8104d14:	d01d      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8104e84 <HAL_DMA_IRQHandler+0x420>)
 8104d1c:	4293      	cmp	r3, r2
 8104d1e:	d018      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	4a58      	ldr	r2, [pc, #352]	@ (8104e88 <HAL_DMA_IRQHandler+0x424>)
 8104d26:	4293      	cmp	r3, r2
 8104d28:	d013      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	681b      	ldr	r3, [r3, #0]
 8104d2e:	4a57      	ldr	r2, [pc, #348]	@ (8104e8c <HAL_DMA_IRQHandler+0x428>)
 8104d30:	4293      	cmp	r3, r2
 8104d32:	d00e      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	4a55      	ldr	r2, [pc, #340]	@ (8104e90 <HAL_DMA_IRQHandler+0x42c>)
 8104d3a:	4293      	cmp	r3, r2
 8104d3c:	d009      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	4a54      	ldr	r2, [pc, #336]	@ (8104e94 <HAL_DMA_IRQHandler+0x430>)
 8104d44:	4293      	cmp	r3, r2
 8104d46:	d004      	beq.n	8104d52 <HAL_DMA_IRQHandler+0x2ee>
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	4a52      	ldr	r2, [pc, #328]	@ (8104e98 <HAL_DMA_IRQHandler+0x434>)
 8104d4e:	4293      	cmp	r3, r2
 8104d50:	d10a      	bne.n	8104d68 <HAL_DMA_IRQHandler+0x304>
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	695b      	ldr	r3, [r3, #20]
 8104d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104d5c:	2b00      	cmp	r3, #0
 8104d5e:	bf14      	ite	ne
 8104d60:	2301      	movne	r3, #1
 8104d62:	2300      	moveq	r3, #0
 8104d64:	b2db      	uxtb	r3, r3
 8104d66:	e003      	b.n	8104d70 <HAL_DMA_IRQHandler+0x30c>
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	2300      	movs	r3, #0
 8104d70:	2b00      	cmp	r3, #0
 8104d72:	d00d      	beq.n	8104d90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104d78:	f003 031f 	and.w	r3, r3, #31
 8104d7c:	2201      	movs	r2, #1
 8104d7e:	409a      	lsls	r2, r3
 8104d80:	6a3b      	ldr	r3, [r7, #32]
 8104d82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d88:	f043 0202 	orr.w	r2, r3, #2
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104d94:	f003 031f 	and.w	r3, r3, #31
 8104d98:	2204      	movs	r2, #4
 8104d9a:	409a      	lsls	r2, r3
 8104d9c:	69bb      	ldr	r3, [r7, #24]
 8104d9e:	4013      	ands	r3, r2
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	f000 808f 	beq.w	8104ec4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	681b      	ldr	r3, [r3, #0]
 8104daa:	4a2c      	ldr	r2, [pc, #176]	@ (8104e5c <HAL_DMA_IRQHandler+0x3f8>)
 8104dac:	4293      	cmp	r3, r2
 8104dae:	d04a      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	681b      	ldr	r3, [r3, #0]
 8104db4:	4a2a      	ldr	r2, [pc, #168]	@ (8104e60 <HAL_DMA_IRQHandler+0x3fc>)
 8104db6:	4293      	cmp	r3, r2
 8104db8:	d045      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	4a29      	ldr	r2, [pc, #164]	@ (8104e64 <HAL_DMA_IRQHandler+0x400>)
 8104dc0:	4293      	cmp	r3, r2
 8104dc2:	d040      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	4a27      	ldr	r2, [pc, #156]	@ (8104e68 <HAL_DMA_IRQHandler+0x404>)
 8104dca:	4293      	cmp	r3, r2
 8104dcc:	d03b      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	681b      	ldr	r3, [r3, #0]
 8104dd2:	4a26      	ldr	r2, [pc, #152]	@ (8104e6c <HAL_DMA_IRQHandler+0x408>)
 8104dd4:	4293      	cmp	r3, r2
 8104dd6:	d036      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	4a24      	ldr	r2, [pc, #144]	@ (8104e70 <HAL_DMA_IRQHandler+0x40c>)
 8104dde:	4293      	cmp	r3, r2
 8104de0:	d031      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	681b      	ldr	r3, [r3, #0]
 8104de6:	4a23      	ldr	r2, [pc, #140]	@ (8104e74 <HAL_DMA_IRQHandler+0x410>)
 8104de8:	4293      	cmp	r3, r2
 8104dea:	d02c      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	4a21      	ldr	r2, [pc, #132]	@ (8104e78 <HAL_DMA_IRQHandler+0x414>)
 8104df2:	4293      	cmp	r3, r2
 8104df4:	d027      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	4a20      	ldr	r2, [pc, #128]	@ (8104e7c <HAL_DMA_IRQHandler+0x418>)
 8104dfc:	4293      	cmp	r3, r2
 8104dfe:	d022      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	4a1e      	ldr	r2, [pc, #120]	@ (8104e80 <HAL_DMA_IRQHandler+0x41c>)
 8104e06:	4293      	cmp	r3, r2
 8104e08:	d01d      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8104e84 <HAL_DMA_IRQHandler+0x420>)
 8104e10:	4293      	cmp	r3, r2
 8104e12:	d018      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	4a1b      	ldr	r2, [pc, #108]	@ (8104e88 <HAL_DMA_IRQHandler+0x424>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d013      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a1a      	ldr	r2, [pc, #104]	@ (8104e8c <HAL_DMA_IRQHandler+0x428>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d00e      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a18      	ldr	r2, [pc, #96]	@ (8104e90 <HAL_DMA_IRQHandler+0x42c>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d009      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a17      	ldr	r2, [pc, #92]	@ (8104e94 <HAL_DMA_IRQHandler+0x430>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d004      	beq.n	8104e46 <HAL_DMA_IRQHandler+0x3e2>
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	4a15      	ldr	r2, [pc, #84]	@ (8104e98 <HAL_DMA_IRQHandler+0x434>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d12a      	bne.n	8104e9c <HAL_DMA_IRQHandler+0x438>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	f003 0302 	and.w	r3, r3, #2
 8104e50:	2b00      	cmp	r3, #0
 8104e52:	bf14      	ite	ne
 8104e54:	2301      	movne	r3, #1
 8104e56:	2300      	moveq	r3, #0
 8104e58:	b2db      	uxtb	r3, r3
 8104e5a:	e023      	b.n	8104ea4 <HAL_DMA_IRQHandler+0x440>
 8104e5c:	40020010 	.word	0x40020010
 8104e60:	40020028 	.word	0x40020028
 8104e64:	40020040 	.word	0x40020040
 8104e68:	40020058 	.word	0x40020058
 8104e6c:	40020070 	.word	0x40020070
 8104e70:	40020088 	.word	0x40020088
 8104e74:	400200a0 	.word	0x400200a0
 8104e78:	400200b8 	.word	0x400200b8
 8104e7c:	40020410 	.word	0x40020410
 8104e80:	40020428 	.word	0x40020428
 8104e84:	40020440 	.word	0x40020440
 8104e88:	40020458 	.word	0x40020458
 8104e8c:	40020470 	.word	0x40020470
 8104e90:	40020488 	.word	0x40020488
 8104e94:	400204a0 	.word	0x400204a0
 8104e98:	400204b8 	.word	0x400204b8
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	2300      	movs	r3, #0
 8104ea4:	2b00      	cmp	r3, #0
 8104ea6:	d00d      	beq.n	8104ec4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104eac:	f003 031f 	and.w	r3, r3, #31
 8104eb0:	2204      	movs	r2, #4
 8104eb2:	409a      	lsls	r2, r3
 8104eb4:	6a3b      	ldr	r3, [r7, #32]
 8104eb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104ebc:	f043 0204 	orr.w	r2, r3, #4
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104ec8:	f003 031f 	and.w	r3, r3, #31
 8104ecc:	2210      	movs	r2, #16
 8104ece:	409a      	lsls	r2, r3
 8104ed0:	69bb      	ldr	r3, [r7, #24]
 8104ed2:	4013      	ands	r3, r2
 8104ed4:	2b00      	cmp	r3, #0
 8104ed6:	f000 80a6 	beq.w	8105026 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	4a85      	ldr	r2, [pc, #532]	@ (81050f4 <HAL_DMA_IRQHandler+0x690>)
 8104ee0:	4293      	cmp	r3, r2
 8104ee2:	d04a      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	4a83      	ldr	r2, [pc, #524]	@ (81050f8 <HAL_DMA_IRQHandler+0x694>)
 8104eea:	4293      	cmp	r3, r2
 8104eec:	d045      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	4a82      	ldr	r2, [pc, #520]	@ (81050fc <HAL_DMA_IRQHandler+0x698>)
 8104ef4:	4293      	cmp	r3, r2
 8104ef6:	d040      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	4a80      	ldr	r2, [pc, #512]	@ (8105100 <HAL_DMA_IRQHandler+0x69c>)
 8104efe:	4293      	cmp	r3, r2
 8104f00:	d03b      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	4a7f      	ldr	r2, [pc, #508]	@ (8105104 <HAL_DMA_IRQHandler+0x6a0>)
 8104f08:	4293      	cmp	r3, r2
 8104f0a:	d036      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	681b      	ldr	r3, [r3, #0]
 8104f10:	4a7d      	ldr	r2, [pc, #500]	@ (8105108 <HAL_DMA_IRQHandler+0x6a4>)
 8104f12:	4293      	cmp	r3, r2
 8104f14:	d031      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	4a7c      	ldr	r2, [pc, #496]	@ (810510c <HAL_DMA_IRQHandler+0x6a8>)
 8104f1c:	4293      	cmp	r3, r2
 8104f1e:	d02c      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	4a7a      	ldr	r2, [pc, #488]	@ (8105110 <HAL_DMA_IRQHandler+0x6ac>)
 8104f26:	4293      	cmp	r3, r2
 8104f28:	d027      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	4a79      	ldr	r2, [pc, #484]	@ (8105114 <HAL_DMA_IRQHandler+0x6b0>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d022      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	4a77      	ldr	r2, [pc, #476]	@ (8105118 <HAL_DMA_IRQHandler+0x6b4>)
 8104f3a:	4293      	cmp	r3, r2
 8104f3c:	d01d      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	4a76      	ldr	r2, [pc, #472]	@ (810511c <HAL_DMA_IRQHandler+0x6b8>)
 8104f44:	4293      	cmp	r3, r2
 8104f46:	d018      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	4a74      	ldr	r2, [pc, #464]	@ (8105120 <HAL_DMA_IRQHandler+0x6bc>)
 8104f4e:	4293      	cmp	r3, r2
 8104f50:	d013      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	4a73      	ldr	r2, [pc, #460]	@ (8105124 <HAL_DMA_IRQHandler+0x6c0>)
 8104f58:	4293      	cmp	r3, r2
 8104f5a:	d00e      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	4a71      	ldr	r2, [pc, #452]	@ (8105128 <HAL_DMA_IRQHandler+0x6c4>)
 8104f62:	4293      	cmp	r3, r2
 8104f64:	d009      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	4a70      	ldr	r2, [pc, #448]	@ (810512c <HAL_DMA_IRQHandler+0x6c8>)
 8104f6c:	4293      	cmp	r3, r2
 8104f6e:	d004      	beq.n	8104f7a <HAL_DMA_IRQHandler+0x516>
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	4a6e      	ldr	r2, [pc, #440]	@ (8105130 <HAL_DMA_IRQHandler+0x6cc>)
 8104f76:	4293      	cmp	r3, r2
 8104f78:	d10a      	bne.n	8104f90 <HAL_DMA_IRQHandler+0x52c>
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	681b      	ldr	r3, [r3, #0]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	f003 0308 	and.w	r3, r3, #8
 8104f84:	2b00      	cmp	r3, #0
 8104f86:	bf14      	ite	ne
 8104f88:	2301      	movne	r3, #1
 8104f8a:	2300      	moveq	r3, #0
 8104f8c:	b2db      	uxtb	r3, r3
 8104f8e:	e009      	b.n	8104fa4 <HAL_DMA_IRQHandler+0x540>
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	f003 0304 	and.w	r3, r3, #4
 8104f9a:	2b00      	cmp	r3, #0
 8104f9c:	bf14      	ite	ne
 8104f9e:	2301      	movne	r3, #1
 8104fa0:	2300      	moveq	r3, #0
 8104fa2:	b2db      	uxtb	r3, r3
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d03e      	beq.n	8105026 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104fac:	f003 031f 	and.w	r3, r3, #31
 8104fb0:	2210      	movs	r2, #16
 8104fb2:	409a      	lsls	r2, r3
 8104fb4:	6a3b      	ldr	r3, [r7, #32]
 8104fb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	681b      	ldr	r3, [r3, #0]
 8104fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8104fc2:	2b00      	cmp	r3, #0
 8104fc4:	d018      	beq.n	8104ff8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	681b      	ldr	r3, [r3, #0]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8104fd0:	2b00      	cmp	r3, #0
 8104fd2:	d108      	bne.n	8104fe6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104fd8:	2b00      	cmp	r3, #0
 8104fda:	d024      	beq.n	8105026 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104fe0:	6878      	ldr	r0, [r7, #4]
 8104fe2:	4798      	blx	r3
 8104fe4:	e01f      	b.n	8105026 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	d01b      	beq.n	8105026 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104ff2:	6878      	ldr	r0, [r7, #4]
 8104ff4:	4798      	blx	r3
 8104ff6:	e016      	b.n	8105026 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105002:	2b00      	cmp	r3, #0
 8105004:	d107      	bne.n	8105016 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	681a      	ldr	r2, [r3, #0]
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	f022 0208 	bic.w	r2, r2, #8
 8105014:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810501a:	2b00      	cmp	r3, #0
 810501c:	d003      	beq.n	8105026 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105022:	6878      	ldr	r0, [r7, #4]
 8105024:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810502a:	f003 031f 	and.w	r3, r3, #31
 810502e:	2220      	movs	r2, #32
 8105030:	409a      	lsls	r2, r3
 8105032:	69bb      	ldr	r3, [r7, #24]
 8105034:	4013      	ands	r3, r2
 8105036:	2b00      	cmp	r3, #0
 8105038:	f000 8110 	beq.w	810525c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	4a2c      	ldr	r2, [pc, #176]	@ (81050f4 <HAL_DMA_IRQHandler+0x690>)
 8105042:	4293      	cmp	r3, r2
 8105044:	d04a      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	681b      	ldr	r3, [r3, #0]
 810504a:	4a2b      	ldr	r2, [pc, #172]	@ (81050f8 <HAL_DMA_IRQHandler+0x694>)
 810504c:	4293      	cmp	r3, r2
 810504e:	d045      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	4a29      	ldr	r2, [pc, #164]	@ (81050fc <HAL_DMA_IRQHandler+0x698>)
 8105056:	4293      	cmp	r3, r2
 8105058:	d040      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	681b      	ldr	r3, [r3, #0]
 810505e:	4a28      	ldr	r2, [pc, #160]	@ (8105100 <HAL_DMA_IRQHandler+0x69c>)
 8105060:	4293      	cmp	r3, r2
 8105062:	d03b      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	4a26      	ldr	r2, [pc, #152]	@ (8105104 <HAL_DMA_IRQHandler+0x6a0>)
 810506a:	4293      	cmp	r3, r2
 810506c:	d036      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	4a25      	ldr	r2, [pc, #148]	@ (8105108 <HAL_DMA_IRQHandler+0x6a4>)
 8105074:	4293      	cmp	r3, r2
 8105076:	d031      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	681b      	ldr	r3, [r3, #0]
 810507c:	4a23      	ldr	r2, [pc, #140]	@ (810510c <HAL_DMA_IRQHandler+0x6a8>)
 810507e:	4293      	cmp	r3, r2
 8105080:	d02c      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	681b      	ldr	r3, [r3, #0]
 8105086:	4a22      	ldr	r2, [pc, #136]	@ (8105110 <HAL_DMA_IRQHandler+0x6ac>)
 8105088:	4293      	cmp	r3, r2
 810508a:	d027      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	4a20      	ldr	r2, [pc, #128]	@ (8105114 <HAL_DMA_IRQHandler+0x6b0>)
 8105092:	4293      	cmp	r3, r2
 8105094:	d022      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	4a1f      	ldr	r2, [pc, #124]	@ (8105118 <HAL_DMA_IRQHandler+0x6b4>)
 810509c:	4293      	cmp	r3, r2
 810509e:	d01d      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	4a1d      	ldr	r2, [pc, #116]	@ (810511c <HAL_DMA_IRQHandler+0x6b8>)
 81050a6:	4293      	cmp	r3, r2
 81050a8:	d018      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4a1c      	ldr	r2, [pc, #112]	@ (8105120 <HAL_DMA_IRQHandler+0x6bc>)
 81050b0:	4293      	cmp	r3, r2
 81050b2:	d013      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	4a1a      	ldr	r2, [pc, #104]	@ (8105124 <HAL_DMA_IRQHandler+0x6c0>)
 81050ba:	4293      	cmp	r3, r2
 81050bc:	d00e      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 81050be:	687b      	ldr	r3, [r7, #4]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	4a19      	ldr	r2, [pc, #100]	@ (8105128 <HAL_DMA_IRQHandler+0x6c4>)
 81050c4:	4293      	cmp	r3, r2
 81050c6:	d009      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	4a17      	ldr	r2, [pc, #92]	@ (810512c <HAL_DMA_IRQHandler+0x6c8>)
 81050ce:	4293      	cmp	r3, r2
 81050d0:	d004      	beq.n	81050dc <HAL_DMA_IRQHandler+0x678>
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	4a16      	ldr	r2, [pc, #88]	@ (8105130 <HAL_DMA_IRQHandler+0x6cc>)
 81050d8:	4293      	cmp	r3, r2
 81050da:	d12b      	bne.n	8105134 <HAL_DMA_IRQHandler+0x6d0>
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	681b      	ldr	r3, [r3, #0]
 81050e2:	f003 0310 	and.w	r3, r3, #16
 81050e6:	2b00      	cmp	r3, #0
 81050e8:	bf14      	ite	ne
 81050ea:	2301      	movne	r3, #1
 81050ec:	2300      	moveq	r3, #0
 81050ee:	b2db      	uxtb	r3, r3
 81050f0:	e02a      	b.n	8105148 <HAL_DMA_IRQHandler+0x6e4>
 81050f2:	bf00      	nop
 81050f4:	40020010 	.word	0x40020010
 81050f8:	40020028 	.word	0x40020028
 81050fc:	40020040 	.word	0x40020040
 8105100:	40020058 	.word	0x40020058
 8105104:	40020070 	.word	0x40020070
 8105108:	40020088 	.word	0x40020088
 810510c:	400200a0 	.word	0x400200a0
 8105110:	400200b8 	.word	0x400200b8
 8105114:	40020410 	.word	0x40020410
 8105118:	40020428 	.word	0x40020428
 810511c:	40020440 	.word	0x40020440
 8105120:	40020458 	.word	0x40020458
 8105124:	40020470 	.word	0x40020470
 8105128:	40020488 	.word	0x40020488
 810512c:	400204a0 	.word	0x400204a0
 8105130:	400204b8 	.word	0x400204b8
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	f003 0302 	and.w	r3, r3, #2
 810513e:	2b00      	cmp	r3, #0
 8105140:	bf14      	ite	ne
 8105142:	2301      	movne	r3, #1
 8105144:	2300      	moveq	r3, #0
 8105146:	b2db      	uxtb	r3, r3
 8105148:	2b00      	cmp	r3, #0
 810514a:	f000 8087 	beq.w	810525c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105152:	f003 031f 	and.w	r3, r3, #31
 8105156:	2220      	movs	r2, #32
 8105158:	409a      	lsls	r2, r3
 810515a:	6a3b      	ldr	r3, [r7, #32]
 810515c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8105164:	b2db      	uxtb	r3, r3
 8105166:	2b04      	cmp	r3, #4
 8105168:	d139      	bne.n	81051de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	681a      	ldr	r2, [r3, #0]
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	f022 0216 	bic.w	r2, r2, #22
 8105178:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	695a      	ldr	r2, [r3, #20]
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8105188:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810518e:	2b00      	cmp	r3, #0
 8105190:	d103      	bne.n	810519a <HAL_DMA_IRQHandler+0x736>
 8105192:	687b      	ldr	r3, [r7, #4]
 8105194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105196:	2b00      	cmp	r3, #0
 8105198:	d007      	beq.n	81051aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	681a      	ldr	r2, [r3, #0]
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	f022 0208 	bic.w	r2, r2, #8
 81051a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81051ae:	f003 031f 	and.w	r3, r3, #31
 81051b2:	223f      	movs	r2, #63	@ 0x3f
 81051b4:	409a      	lsls	r2, r3
 81051b6:	6a3b      	ldr	r3, [r7, #32]
 81051b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	2201      	movs	r2, #1
 81051be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	2200      	movs	r2, #0
 81051c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81051ce:	2b00      	cmp	r3, #0
 81051d0:	f000 834a 	beq.w	8105868 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81051d8:	6878      	ldr	r0, [r7, #4]
 81051da:	4798      	blx	r3
          }
          return;
 81051dc:	e344      	b.n	8105868 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	681b      	ldr	r3, [r3, #0]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81051e8:	2b00      	cmp	r3, #0
 81051ea:	d018      	beq.n	810521e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	681b      	ldr	r3, [r3, #0]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81051f6:	2b00      	cmp	r3, #0
 81051f8:	d108      	bne.n	810520c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81051fe:	2b00      	cmp	r3, #0
 8105200:	d02c      	beq.n	810525c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105206:	6878      	ldr	r0, [r7, #4]
 8105208:	4798      	blx	r3
 810520a:	e027      	b.n	810525c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105210:	2b00      	cmp	r3, #0
 8105212:	d023      	beq.n	810525c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105218:	6878      	ldr	r0, [r7, #4]
 810521a:	4798      	blx	r3
 810521c:	e01e      	b.n	810525c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	681b      	ldr	r3, [r3, #0]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105228:	2b00      	cmp	r3, #0
 810522a:	d10f      	bne.n	810524c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	681a      	ldr	r2, [r3, #0]
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	681b      	ldr	r3, [r3, #0]
 8105236:	f022 0210 	bic.w	r2, r2, #16
 810523a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	2201      	movs	r2, #1
 8105240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	2200      	movs	r2, #0
 8105248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105250:	2b00      	cmp	r3, #0
 8105252:	d003      	beq.n	810525c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105258:	6878      	ldr	r0, [r7, #4]
 810525a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105260:	2b00      	cmp	r3, #0
 8105262:	f000 8306 	beq.w	8105872 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810526a:	f003 0301 	and.w	r3, r3, #1
 810526e:	2b00      	cmp	r3, #0
 8105270:	f000 8088 	beq.w	8105384 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	2204      	movs	r2, #4
 8105278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	4a7a      	ldr	r2, [pc, #488]	@ (810546c <HAL_DMA_IRQHandler+0xa08>)
 8105282:	4293      	cmp	r3, r2
 8105284:	d04a      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	4a79      	ldr	r2, [pc, #484]	@ (8105470 <HAL_DMA_IRQHandler+0xa0c>)
 810528c:	4293      	cmp	r3, r2
 810528e:	d045      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	681b      	ldr	r3, [r3, #0]
 8105294:	4a77      	ldr	r2, [pc, #476]	@ (8105474 <HAL_DMA_IRQHandler+0xa10>)
 8105296:	4293      	cmp	r3, r2
 8105298:	d040      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 810529a:	687b      	ldr	r3, [r7, #4]
 810529c:	681b      	ldr	r3, [r3, #0]
 810529e:	4a76      	ldr	r2, [pc, #472]	@ (8105478 <HAL_DMA_IRQHandler+0xa14>)
 81052a0:	4293      	cmp	r3, r2
 81052a2:	d03b      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	4a74      	ldr	r2, [pc, #464]	@ (810547c <HAL_DMA_IRQHandler+0xa18>)
 81052aa:	4293      	cmp	r3, r2
 81052ac:	d036      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	4a73      	ldr	r2, [pc, #460]	@ (8105480 <HAL_DMA_IRQHandler+0xa1c>)
 81052b4:	4293      	cmp	r3, r2
 81052b6:	d031      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	4a71      	ldr	r2, [pc, #452]	@ (8105484 <HAL_DMA_IRQHandler+0xa20>)
 81052be:	4293      	cmp	r3, r2
 81052c0:	d02c      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	4a70      	ldr	r2, [pc, #448]	@ (8105488 <HAL_DMA_IRQHandler+0xa24>)
 81052c8:	4293      	cmp	r3, r2
 81052ca:	d027      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	4a6e      	ldr	r2, [pc, #440]	@ (810548c <HAL_DMA_IRQHandler+0xa28>)
 81052d2:	4293      	cmp	r3, r2
 81052d4:	d022      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	4a6d      	ldr	r2, [pc, #436]	@ (8105490 <HAL_DMA_IRQHandler+0xa2c>)
 81052dc:	4293      	cmp	r3, r2
 81052de:	d01d      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	4a6b      	ldr	r2, [pc, #428]	@ (8105494 <HAL_DMA_IRQHandler+0xa30>)
 81052e6:	4293      	cmp	r3, r2
 81052e8:	d018      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	4a6a      	ldr	r2, [pc, #424]	@ (8105498 <HAL_DMA_IRQHandler+0xa34>)
 81052f0:	4293      	cmp	r3, r2
 81052f2:	d013      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	681b      	ldr	r3, [r3, #0]
 81052f8:	4a68      	ldr	r2, [pc, #416]	@ (810549c <HAL_DMA_IRQHandler+0xa38>)
 81052fa:	4293      	cmp	r3, r2
 81052fc:	d00e      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	4a67      	ldr	r2, [pc, #412]	@ (81054a0 <HAL_DMA_IRQHandler+0xa3c>)
 8105304:	4293      	cmp	r3, r2
 8105306:	d009      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	4a65      	ldr	r2, [pc, #404]	@ (81054a4 <HAL_DMA_IRQHandler+0xa40>)
 810530e:	4293      	cmp	r3, r2
 8105310:	d004      	beq.n	810531c <HAL_DMA_IRQHandler+0x8b8>
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	4a64      	ldr	r2, [pc, #400]	@ (81054a8 <HAL_DMA_IRQHandler+0xa44>)
 8105318:	4293      	cmp	r3, r2
 810531a:	d108      	bne.n	810532e <HAL_DMA_IRQHandler+0x8ca>
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	681a      	ldr	r2, [r3, #0]
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	681b      	ldr	r3, [r3, #0]
 8105326:	f022 0201 	bic.w	r2, r2, #1
 810532a:	601a      	str	r2, [r3, #0]
 810532c:	e007      	b.n	810533e <HAL_DMA_IRQHandler+0x8da>
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	681a      	ldr	r2, [r3, #0]
 8105334:	687b      	ldr	r3, [r7, #4]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	f022 0201 	bic.w	r2, r2, #1
 810533c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810533e:	68fb      	ldr	r3, [r7, #12]
 8105340:	3301      	adds	r3, #1
 8105342:	60fb      	str	r3, [r7, #12]
 8105344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105346:	429a      	cmp	r2, r3
 8105348:	d307      	bcc.n	810535a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	681b      	ldr	r3, [r3, #0]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	f003 0301 	and.w	r3, r3, #1
 8105354:	2b00      	cmp	r3, #0
 8105356:	d1f2      	bne.n	810533e <HAL_DMA_IRQHandler+0x8da>
 8105358:	e000      	b.n	810535c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810535a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	f003 0301 	and.w	r3, r3, #1
 8105366:	2b00      	cmp	r3, #0
 8105368:	d004      	beq.n	8105374 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	2203      	movs	r2, #3
 810536e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8105372:	e003      	b.n	810537c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	2201      	movs	r2, #1
 8105378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	2200      	movs	r2, #0
 8105380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105388:	2b00      	cmp	r3, #0
 810538a:	f000 8272 	beq.w	8105872 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105392:	6878      	ldr	r0, [r7, #4]
 8105394:	4798      	blx	r3
 8105396:	e26c      	b.n	8105872 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	4a43      	ldr	r2, [pc, #268]	@ (81054ac <HAL_DMA_IRQHandler+0xa48>)
 810539e:	4293      	cmp	r3, r2
 81053a0:	d022      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	681b      	ldr	r3, [r3, #0]
 81053a6:	4a42      	ldr	r2, [pc, #264]	@ (81054b0 <HAL_DMA_IRQHandler+0xa4c>)
 81053a8:	4293      	cmp	r3, r2
 81053aa:	d01d      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053ac:	687b      	ldr	r3, [r7, #4]
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	4a40      	ldr	r2, [pc, #256]	@ (81054b4 <HAL_DMA_IRQHandler+0xa50>)
 81053b2:	4293      	cmp	r3, r2
 81053b4:	d018      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	4a3f      	ldr	r2, [pc, #252]	@ (81054b8 <HAL_DMA_IRQHandler+0xa54>)
 81053bc:	4293      	cmp	r3, r2
 81053be:	d013      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	4a3d      	ldr	r2, [pc, #244]	@ (81054bc <HAL_DMA_IRQHandler+0xa58>)
 81053c6:	4293      	cmp	r3, r2
 81053c8:	d00e      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	4a3c      	ldr	r2, [pc, #240]	@ (81054c0 <HAL_DMA_IRQHandler+0xa5c>)
 81053d0:	4293      	cmp	r3, r2
 81053d2:	d009      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	4a3a      	ldr	r2, [pc, #232]	@ (81054c4 <HAL_DMA_IRQHandler+0xa60>)
 81053da:	4293      	cmp	r3, r2
 81053dc:	d004      	beq.n	81053e8 <HAL_DMA_IRQHandler+0x984>
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	4a39      	ldr	r2, [pc, #228]	@ (81054c8 <HAL_DMA_IRQHandler+0xa64>)
 81053e4:	4293      	cmp	r3, r2
 81053e6:	d101      	bne.n	81053ec <HAL_DMA_IRQHandler+0x988>
 81053e8:	2301      	movs	r3, #1
 81053ea:	e000      	b.n	81053ee <HAL_DMA_IRQHandler+0x98a>
 81053ec:	2300      	movs	r3, #0
 81053ee:	2b00      	cmp	r3, #0
 81053f0:	f000 823f 	beq.w	8105872 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105400:	f003 031f 	and.w	r3, r3, #31
 8105404:	2204      	movs	r2, #4
 8105406:	409a      	lsls	r2, r3
 8105408:	697b      	ldr	r3, [r7, #20]
 810540a:	4013      	ands	r3, r2
 810540c:	2b00      	cmp	r3, #0
 810540e:	f000 80cd 	beq.w	81055ac <HAL_DMA_IRQHandler+0xb48>
 8105412:	693b      	ldr	r3, [r7, #16]
 8105414:	f003 0304 	and.w	r3, r3, #4
 8105418:	2b00      	cmp	r3, #0
 810541a:	f000 80c7 	beq.w	81055ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105422:	f003 031f 	and.w	r3, r3, #31
 8105426:	2204      	movs	r2, #4
 8105428:	409a      	lsls	r2, r3
 810542a:	69fb      	ldr	r3, [r7, #28]
 810542c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810542e:	693b      	ldr	r3, [r7, #16]
 8105430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105434:	2b00      	cmp	r3, #0
 8105436:	d049      	beq.n	81054cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105438:	693b      	ldr	r3, [r7, #16]
 810543a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810543e:	2b00      	cmp	r3, #0
 8105440:	d109      	bne.n	8105456 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105446:	2b00      	cmp	r3, #0
 8105448:	f000 8210 	beq.w	810586c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105450:	6878      	ldr	r0, [r7, #4]
 8105452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105454:	e20a      	b.n	810586c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810545a:	2b00      	cmp	r3, #0
 810545c:	f000 8206 	beq.w	810586c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105464:	6878      	ldr	r0, [r7, #4]
 8105466:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105468:	e200      	b.n	810586c <HAL_DMA_IRQHandler+0xe08>
 810546a:	bf00      	nop
 810546c:	40020010 	.word	0x40020010
 8105470:	40020028 	.word	0x40020028
 8105474:	40020040 	.word	0x40020040
 8105478:	40020058 	.word	0x40020058
 810547c:	40020070 	.word	0x40020070
 8105480:	40020088 	.word	0x40020088
 8105484:	400200a0 	.word	0x400200a0
 8105488:	400200b8 	.word	0x400200b8
 810548c:	40020410 	.word	0x40020410
 8105490:	40020428 	.word	0x40020428
 8105494:	40020440 	.word	0x40020440
 8105498:	40020458 	.word	0x40020458
 810549c:	40020470 	.word	0x40020470
 81054a0:	40020488 	.word	0x40020488
 81054a4:	400204a0 	.word	0x400204a0
 81054a8:	400204b8 	.word	0x400204b8
 81054ac:	58025408 	.word	0x58025408
 81054b0:	5802541c 	.word	0x5802541c
 81054b4:	58025430 	.word	0x58025430
 81054b8:	58025444 	.word	0x58025444
 81054bc:	58025458 	.word	0x58025458
 81054c0:	5802546c 	.word	0x5802546c
 81054c4:	58025480 	.word	0x58025480
 81054c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81054cc:	693b      	ldr	r3, [r7, #16]
 81054ce:	f003 0320 	and.w	r3, r3, #32
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d160      	bne.n	8105598 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	4a7f      	ldr	r2, [pc, #508]	@ (81056d8 <HAL_DMA_IRQHandler+0xc74>)
 81054dc:	4293      	cmp	r3, r2
 81054de:	d04a      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	681b      	ldr	r3, [r3, #0]
 81054e4:	4a7d      	ldr	r2, [pc, #500]	@ (81056dc <HAL_DMA_IRQHandler+0xc78>)
 81054e6:	4293      	cmp	r3, r2
 81054e8:	d045      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	681b      	ldr	r3, [r3, #0]
 81054ee:	4a7c      	ldr	r2, [pc, #496]	@ (81056e0 <HAL_DMA_IRQHandler+0xc7c>)
 81054f0:	4293      	cmp	r3, r2
 81054f2:	d040      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	681b      	ldr	r3, [r3, #0]
 81054f8:	4a7a      	ldr	r2, [pc, #488]	@ (81056e4 <HAL_DMA_IRQHandler+0xc80>)
 81054fa:	4293      	cmp	r3, r2
 81054fc:	d03b      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	681b      	ldr	r3, [r3, #0]
 8105502:	4a79      	ldr	r2, [pc, #484]	@ (81056e8 <HAL_DMA_IRQHandler+0xc84>)
 8105504:	4293      	cmp	r3, r2
 8105506:	d036      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	681b      	ldr	r3, [r3, #0]
 810550c:	4a77      	ldr	r2, [pc, #476]	@ (81056ec <HAL_DMA_IRQHandler+0xc88>)
 810550e:	4293      	cmp	r3, r2
 8105510:	d031      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	681b      	ldr	r3, [r3, #0]
 8105516:	4a76      	ldr	r2, [pc, #472]	@ (81056f0 <HAL_DMA_IRQHandler+0xc8c>)
 8105518:	4293      	cmp	r3, r2
 810551a:	d02c      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 810551c:	687b      	ldr	r3, [r7, #4]
 810551e:	681b      	ldr	r3, [r3, #0]
 8105520:	4a74      	ldr	r2, [pc, #464]	@ (81056f4 <HAL_DMA_IRQHandler+0xc90>)
 8105522:	4293      	cmp	r3, r2
 8105524:	d027      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	4a73      	ldr	r2, [pc, #460]	@ (81056f8 <HAL_DMA_IRQHandler+0xc94>)
 810552c:	4293      	cmp	r3, r2
 810552e:	d022      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	4a71      	ldr	r2, [pc, #452]	@ (81056fc <HAL_DMA_IRQHandler+0xc98>)
 8105536:	4293      	cmp	r3, r2
 8105538:	d01d      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	4a70      	ldr	r2, [pc, #448]	@ (8105700 <HAL_DMA_IRQHandler+0xc9c>)
 8105540:	4293      	cmp	r3, r2
 8105542:	d018      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	4a6e      	ldr	r2, [pc, #440]	@ (8105704 <HAL_DMA_IRQHandler+0xca0>)
 810554a:	4293      	cmp	r3, r2
 810554c:	d013      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	4a6d      	ldr	r2, [pc, #436]	@ (8105708 <HAL_DMA_IRQHandler+0xca4>)
 8105554:	4293      	cmp	r3, r2
 8105556:	d00e      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	4a6b      	ldr	r2, [pc, #428]	@ (810570c <HAL_DMA_IRQHandler+0xca8>)
 810555e:	4293      	cmp	r3, r2
 8105560:	d009      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	681b      	ldr	r3, [r3, #0]
 8105566:	4a6a      	ldr	r2, [pc, #424]	@ (8105710 <HAL_DMA_IRQHandler+0xcac>)
 8105568:	4293      	cmp	r3, r2
 810556a:	d004      	beq.n	8105576 <HAL_DMA_IRQHandler+0xb12>
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	4a68      	ldr	r2, [pc, #416]	@ (8105714 <HAL_DMA_IRQHandler+0xcb0>)
 8105572:	4293      	cmp	r3, r2
 8105574:	d108      	bne.n	8105588 <HAL_DMA_IRQHandler+0xb24>
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	681a      	ldr	r2, [r3, #0]
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	f022 0208 	bic.w	r2, r2, #8
 8105584:	601a      	str	r2, [r3, #0]
 8105586:	e007      	b.n	8105598 <HAL_DMA_IRQHandler+0xb34>
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	681a      	ldr	r2, [r3, #0]
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	f022 0204 	bic.w	r2, r2, #4
 8105596:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810559c:	2b00      	cmp	r3, #0
 810559e:	f000 8165 	beq.w	810586c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055a6:	6878      	ldr	r0, [r7, #4]
 81055a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81055aa:	e15f      	b.n	810586c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81055b0:	f003 031f 	and.w	r3, r3, #31
 81055b4:	2202      	movs	r2, #2
 81055b6:	409a      	lsls	r2, r3
 81055b8:	697b      	ldr	r3, [r7, #20]
 81055ba:	4013      	ands	r3, r2
 81055bc:	2b00      	cmp	r3, #0
 81055be:	f000 80c5 	beq.w	810574c <HAL_DMA_IRQHandler+0xce8>
 81055c2:	693b      	ldr	r3, [r7, #16]
 81055c4:	f003 0302 	and.w	r3, r3, #2
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	f000 80bf 	beq.w	810574c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81055d2:	f003 031f 	and.w	r3, r3, #31
 81055d6:	2202      	movs	r2, #2
 81055d8:	409a      	lsls	r2, r3
 81055da:	69fb      	ldr	r3, [r7, #28]
 81055dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81055de:	693b      	ldr	r3, [r7, #16]
 81055e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81055e4:	2b00      	cmp	r3, #0
 81055e6:	d018      	beq.n	810561a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81055e8:	693b      	ldr	r3, [r7, #16]
 81055ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81055ee:	2b00      	cmp	r3, #0
 81055f0:	d109      	bne.n	8105606 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81055f6:	2b00      	cmp	r3, #0
 81055f8:	f000 813a 	beq.w	8105870 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105600:	6878      	ldr	r0, [r7, #4]
 8105602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105604:	e134      	b.n	8105870 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810560a:	2b00      	cmp	r3, #0
 810560c:	f000 8130 	beq.w	8105870 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105614:	6878      	ldr	r0, [r7, #4]
 8105616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105618:	e12a      	b.n	8105870 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810561a:	693b      	ldr	r3, [r7, #16]
 810561c:	f003 0320 	and.w	r3, r3, #32
 8105620:	2b00      	cmp	r3, #0
 8105622:	f040 8089 	bne.w	8105738 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	4a2b      	ldr	r2, [pc, #172]	@ (81056d8 <HAL_DMA_IRQHandler+0xc74>)
 810562c:	4293      	cmp	r3, r2
 810562e:	d04a      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	4a29      	ldr	r2, [pc, #164]	@ (81056dc <HAL_DMA_IRQHandler+0xc78>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d045      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	4a28      	ldr	r2, [pc, #160]	@ (81056e0 <HAL_DMA_IRQHandler+0xc7c>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d040      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	4a26      	ldr	r2, [pc, #152]	@ (81056e4 <HAL_DMA_IRQHandler+0xc80>)
 810564a:	4293      	cmp	r3, r2
 810564c:	d03b      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	4a25      	ldr	r2, [pc, #148]	@ (81056e8 <HAL_DMA_IRQHandler+0xc84>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d036      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	4a23      	ldr	r2, [pc, #140]	@ (81056ec <HAL_DMA_IRQHandler+0xc88>)
 810565e:	4293      	cmp	r3, r2
 8105660:	d031      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	4a22      	ldr	r2, [pc, #136]	@ (81056f0 <HAL_DMA_IRQHandler+0xc8c>)
 8105668:	4293      	cmp	r3, r2
 810566a:	d02c      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	4a20      	ldr	r2, [pc, #128]	@ (81056f4 <HAL_DMA_IRQHandler+0xc90>)
 8105672:	4293      	cmp	r3, r2
 8105674:	d027      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	4a1f      	ldr	r2, [pc, #124]	@ (81056f8 <HAL_DMA_IRQHandler+0xc94>)
 810567c:	4293      	cmp	r3, r2
 810567e:	d022      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	4a1d      	ldr	r2, [pc, #116]	@ (81056fc <HAL_DMA_IRQHandler+0xc98>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d01d      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a1c      	ldr	r2, [pc, #112]	@ (8105700 <HAL_DMA_IRQHandler+0xc9c>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d018      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a1a      	ldr	r2, [pc, #104]	@ (8105704 <HAL_DMA_IRQHandler+0xca0>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d013      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a19      	ldr	r2, [pc, #100]	@ (8105708 <HAL_DMA_IRQHandler+0xca4>)
 81056a4:	4293      	cmp	r3, r2
 81056a6:	d00e      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	4a17      	ldr	r2, [pc, #92]	@ (810570c <HAL_DMA_IRQHandler+0xca8>)
 81056ae:	4293      	cmp	r3, r2
 81056b0:	d009      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4a16      	ldr	r2, [pc, #88]	@ (8105710 <HAL_DMA_IRQHandler+0xcac>)
 81056b8:	4293      	cmp	r3, r2
 81056ba:	d004      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xc62>
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	4a14      	ldr	r2, [pc, #80]	@ (8105714 <HAL_DMA_IRQHandler+0xcb0>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d128      	bne.n	8105718 <HAL_DMA_IRQHandler+0xcb4>
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	681a      	ldr	r2, [r3, #0]
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	681b      	ldr	r3, [r3, #0]
 81056d0:	f022 0214 	bic.w	r2, r2, #20
 81056d4:	601a      	str	r2, [r3, #0]
 81056d6:	e027      	b.n	8105728 <HAL_DMA_IRQHandler+0xcc4>
 81056d8:	40020010 	.word	0x40020010
 81056dc:	40020028 	.word	0x40020028
 81056e0:	40020040 	.word	0x40020040
 81056e4:	40020058 	.word	0x40020058
 81056e8:	40020070 	.word	0x40020070
 81056ec:	40020088 	.word	0x40020088
 81056f0:	400200a0 	.word	0x400200a0
 81056f4:	400200b8 	.word	0x400200b8
 81056f8:	40020410 	.word	0x40020410
 81056fc:	40020428 	.word	0x40020428
 8105700:	40020440 	.word	0x40020440
 8105704:	40020458 	.word	0x40020458
 8105708:	40020470 	.word	0x40020470
 810570c:	40020488 	.word	0x40020488
 8105710:	400204a0 	.word	0x400204a0
 8105714:	400204b8 	.word	0x400204b8
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	681a      	ldr	r2, [r3, #0]
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	f022 020a 	bic.w	r2, r2, #10
 8105726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	2201      	movs	r2, #1
 810572c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	2200      	movs	r2, #0
 8105734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810573c:	2b00      	cmp	r3, #0
 810573e:	f000 8097 	beq.w	8105870 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105746:	6878      	ldr	r0, [r7, #4]
 8105748:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810574a:	e091      	b.n	8105870 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105750:	f003 031f 	and.w	r3, r3, #31
 8105754:	2208      	movs	r2, #8
 8105756:	409a      	lsls	r2, r3
 8105758:	697b      	ldr	r3, [r7, #20]
 810575a:	4013      	ands	r3, r2
 810575c:	2b00      	cmp	r3, #0
 810575e:	f000 8088 	beq.w	8105872 <HAL_DMA_IRQHandler+0xe0e>
 8105762:	693b      	ldr	r3, [r7, #16]
 8105764:	f003 0308 	and.w	r3, r3, #8
 8105768:	2b00      	cmp	r3, #0
 810576a:	f000 8082 	beq.w	8105872 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	681b      	ldr	r3, [r3, #0]
 8105772:	4a41      	ldr	r2, [pc, #260]	@ (8105878 <HAL_DMA_IRQHandler+0xe14>)
 8105774:	4293      	cmp	r3, r2
 8105776:	d04a      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	681b      	ldr	r3, [r3, #0]
 810577c:	4a3f      	ldr	r2, [pc, #252]	@ (810587c <HAL_DMA_IRQHandler+0xe18>)
 810577e:	4293      	cmp	r3, r2
 8105780:	d045      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	4a3e      	ldr	r2, [pc, #248]	@ (8105880 <HAL_DMA_IRQHandler+0xe1c>)
 8105788:	4293      	cmp	r3, r2
 810578a:	d040      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	681b      	ldr	r3, [r3, #0]
 8105790:	4a3c      	ldr	r2, [pc, #240]	@ (8105884 <HAL_DMA_IRQHandler+0xe20>)
 8105792:	4293      	cmp	r3, r2
 8105794:	d03b      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	4a3b      	ldr	r2, [pc, #236]	@ (8105888 <HAL_DMA_IRQHandler+0xe24>)
 810579c:	4293      	cmp	r3, r2
 810579e:	d036      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	4a39      	ldr	r2, [pc, #228]	@ (810588c <HAL_DMA_IRQHandler+0xe28>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d031      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	4a38      	ldr	r2, [pc, #224]	@ (8105890 <HAL_DMA_IRQHandler+0xe2c>)
 81057b0:	4293      	cmp	r3, r2
 81057b2:	d02c      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	4a36      	ldr	r2, [pc, #216]	@ (8105894 <HAL_DMA_IRQHandler+0xe30>)
 81057ba:	4293      	cmp	r3, r2
 81057bc:	d027      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	681b      	ldr	r3, [r3, #0]
 81057c2:	4a35      	ldr	r2, [pc, #212]	@ (8105898 <HAL_DMA_IRQHandler+0xe34>)
 81057c4:	4293      	cmp	r3, r2
 81057c6:	d022      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057c8:	687b      	ldr	r3, [r7, #4]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	4a33      	ldr	r2, [pc, #204]	@ (810589c <HAL_DMA_IRQHandler+0xe38>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d01d      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	4a32      	ldr	r2, [pc, #200]	@ (81058a0 <HAL_DMA_IRQHandler+0xe3c>)
 81057d8:	4293      	cmp	r3, r2
 81057da:	d018      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	4a30      	ldr	r2, [pc, #192]	@ (81058a4 <HAL_DMA_IRQHandler+0xe40>)
 81057e2:	4293      	cmp	r3, r2
 81057e4:	d013      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	4a2f      	ldr	r2, [pc, #188]	@ (81058a8 <HAL_DMA_IRQHandler+0xe44>)
 81057ec:	4293      	cmp	r3, r2
 81057ee:	d00e      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	4a2d      	ldr	r2, [pc, #180]	@ (81058ac <HAL_DMA_IRQHandler+0xe48>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d009      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a2c      	ldr	r2, [pc, #176]	@ (81058b0 <HAL_DMA_IRQHandler+0xe4c>)
 8105800:	4293      	cmp	r3, r2
 8105802:	d004      	beq.n	810580e <HAL_DMA_IRQHandler+0xdaa>
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	4a2a      	ldr	r2, [pc, #168]	@ (81058b4 <HAL_DMA_IRQHandler+0xe50>)
 810580a:	4293      	cmp	r3, r2
 810580c:	d108      	bne.n	8105820 <HAL_DMA_IRQHandler+0xdbc>
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	681b      	ldr	r3, [r3, #0]
 8105812:	681a      	ldr	r2, [r3, #0]
 8105814:	687b      	ldr	r3, [r7, #4]
 8105816:	681b      	ldr	r3, [r3, #0]
 8105818:	f022 021c 	bic.w	r2, r2, #28
 810581c:	601a      	str	r2, [r3, #0]
 810581e:	e007      	b.n	8105830 <HAL_DMA_IRQHandler+0xdcc>
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	681a      	ldr	r2, [r3, #0]
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	f022 020e 	bic.w	r2, r2, #14
 810582e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105834:	f003 031f 	and.w	r3, r3, #31
 8105838:	2201      	movs	r2, #1
 810583a:	409a      	lsls	r2, r3
 810583c:	69fb      	ldr	r3, [r7, #28]
 810583e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	2201      	movs	r2, #1
 8105844:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	2201      	movs	r2, #1
 810584a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	2200      	movs	r2, #0
 8105852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810585a:	2b00      	cmp	r3, #0
 810585c:	d009      	beq.n	8105872 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105862:	6878      	ldr	r0, [r7, #4]
 8105864:	4798      	blx	r3
 8105866:	e004      	b.n	8105872 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105868:	bf00      	nop
 810586a:	e002      	b.n	8105872 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810586c:	bf00      	nop
 810586e:	e000      	b.n	8105872 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105870:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105872:	3728      	adds	r7, #40	@ 0x28
 8105874:	46bd      	mov	sp, r7
 8105876:	bd80      	pop	{r7, pc}
 8105878:	40020010 	.word	0x40020010
 810587c:	40020028 	.word	0x40020028
 8105880:	40020040 	.word	0x40020040
 8105884:	40020058 	.word	0x40020058
 8105888:	40020070 	.word	0x40020070
 810588c:	40020088 	.word	0x40020088
 8105890:	400200a0 	.word	0x400200a0
 8105894:	400200b8 	.word	0x400200b8
 8105898:	40020410 	.word	0x40020410
 810589c:	40020428 	.word	0x40020428
 81058a0:	40020440 	.word	0x40020440
 81058a4:	40020458 	.word	0x40020458
 81058a8:	40020470 	.word	0x40020470
 81058ac:	40020488 	.word	0x40020488
 81058b0:	400204a0 	.word	0x400204a0
 81058b4:	400204b8 	.word	0x400204b8

081058b8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 81058b8:	b480      	push	{r7}
 81058ba:	b083      	sub	sp, #12
 81058bc:	af00      	add	r7, sp, #0
 81058be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81058c6:	b2db      	uxtb	r3, r3
}
 81058c8:	4618      	mov	r0, r3
 81058ca:	370c      	adds	r7, #12
 81058cc:	46bd      	mov	sp, r7
 81058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058d2:	4770      	bx	lr

081058d4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 81058d4:	b480      	push	{r7}
 81058d6:	b083      	sub	sp, #12
 81058d8:	af00      	add	r7, sp, #0
 81058da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 81058e0:	4618      	mov	r0, r3
 81058e2:	370c      	adds	r7, #12
 81058e4:	46bd      	mov	sp, r7
 81058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058ea:	4770      	bx	lr

081058ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81058ec:	b480      	push	{r7}
 81058ee:	b087      	sub	sp, #28
 81058f0:	af00      	add	r7, sp, #0
 81058f2:	60f8      	str	r0, [r7, #12]
 81058f4:	60b9      	str	r1, [r7, #8]
 81058f6:	607a      	str	r2, [r7, #4]
 81058f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81058fa:	68fb      	ldr	r3, [r7, #12]
 81058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81058fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105904:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	681b      	ldr	r3, [r3, #0]
 810590a:	4a7f      	ldr	r2, [pc, #508]	@ (8105b08 <DMA_SetConfig+0x21c>)
 810590c:	4293      	cmp	r3, r2
 810590e:	d072      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105910:	68fb      	ldr	r3, [r7, #12]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	4a7d      	ldr	r2, [pc, #500]	@ (8105b0c <DMA_SetConfig+0x220>)
 8105916:	4293      	cmp	r3, r2
 8105918:	d06d      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 810591a:	68fb      	ldr	r3, [r7, #12]
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	4a7c      	ldr	r2, [pc, #496]	@ (8105b10 <DMA_SetConfig+0x224>)
 8105920:	4293      	cmp	r3, r2
 8105922:	d068      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105924:	68fb      	ldr	r3, [r7, #12]
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	4a7a      	ldr	r2, [pc, #488]	@ (8105b14 <DMA_SetConfig+0x228>)
 810592a:	4293      	cmp	r3, r2
 810592c:	d063      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	4a79      	ldr	r2, [pc, #484]	@ (8105b18 <DMA_SetConfig+0x22c>)
 8105934:	4293      	cmp	r3, r2
 8105936:	d05e      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105938:	68fb      	ldr	r3, [r7, #12]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	4a77      	ldr	r2, [pc, #476]	@ (8105b1c <DMA_SetConfig+0x230>)
 810593e:	4293      	cmp	r3, r2
 8105940:	d059      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105942:	68fb      	ldr	r3, [r7, #12]
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	4a76      	ldr	r2, [pc, #472]	@ (8105b20 <DMA_SetConfig+0x234>)
 8105948:	4293      	cmp	r3, r2
 810594a:	d054      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 810594c:	68fb      	ldr	r3, [r7, #12]
 810594e:	681b      	ldr	r3, [r3, #0]
 8105950:	4a74      	ldr	r2, [pc, #464]	@ (8105b24 <DMA_SetConfig+0x238>)
 8105952:	4293      	cmp	r3, r2
 8105954:	d04f      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	4a73      	ldr	r2, [pc, #460]	@ (8105b28 <DMA_SetConfig+0x23c>)
 810595c:	4293      	cmp	r3, r2
 810595e:	d04a      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105960:	68fb      	ldr	r3, [r7, #12]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	4a71      	ldr	r2, [pc, #452]	@ (8105b2c <DMA_SetConfig+0x240>)
 8105966:	4293      	cmp	r3, r2
 8105968:	d045      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 810596a:	68fb      	ldr	r3, [r7, #12]
 810596c:	681b      	ldr	r3, [r3, #0]
 810596e:	4a70      	ldr	r2, [pc, #448]	@ (8105b30 <DMA_SetConfig+0x244>)
 8105970:	4293      	cmp	r3, r2
 8105972:	d040      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105974:	68fb      	ldr	r3, [r7, #12]
 8105976:	681b      	ldr	r3, [r3, #0]
 8105978:	4a6e      	ldr	r2, [pc, #440]	@ (8105b34 <DMA_SetConfig+0x248>)
 810597a:	4293      	cmp	r3, r2
 810597c:	d03b      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 810597e:	68fb      	ldr	r3, [r7, #12]
 8105980:	681b      	ldr	r3, [r3, #0]
 8105982:	4a6d      	ldr	r2, [pc, #436]	@ (8105b38 <DMA_SetConfig+0x24c>)
 8105984:	4293      	cmp	r3, r2
 8105986:	d036      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105988:	68fb      	ldr	r3, [r7, #12]
 810598a:	681b      	ldr	r3, [r3, #0]
 810598c:	4a6b      	ldr	r2, [pc, #428]	@ (8105b3c <DMA_SetConfig+0x250>)
 810598e:	4293      	cmp	r3, r2
 8105990:	d031      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 8105992:	68fb      	ldr	r3, [r7, #12]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	4a6a      	ldr	r2, [pc, #424]	@ (8105b40 <DMA_SetConfig+0x254>)
 8105998:	4293      	cmp	r3, r2
 810599a:	d02c      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 810599c:	68fb      	ldr	r3, [r7, #12]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	4a68      	ldr	r2, [pc, #416]	@ (8105b44 <DMA_SetConfig+0x258>)
 81059a2:	4293      	cmp	r3, r2
 81059a4:	d027      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059a6:	68fb      	ldr	r3, [r7, #12]
 81059a8:	681b      	ldr	r3, [r3, #0]
 81059aa:	4a67      	ldr	r2, [pc, #412]	@ (8105b48 <DMA_SetConfig+0x25c>)
 81059ac:	4293      	cmp	r3, r2
 81059ae:	d022      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059b0:	68fb      	ldr	r3, [r7, #12]
 81059b2:	681b      	ldr	r3, [r3, #0]
 81059b4:	4a65      	ldr	r2, [pc, #404]	@ (8105b4c <DMA_SetConfig+0x260>)
 81059b6:	4293      	cmp	r3, r2
 81059b8:	d01d      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059ba:	68fb      	ldr	r3, [r7, #12]
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	4a64      	ldr	r2, [pc, #400]	@ (8105b50 <DMA_SetConfig+0x264>)
 81059c0:	4293      	cmp	r3, r2
 81059c2:	d018      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059c4:	68fb      	ldr	r3, [r7, #12]
 81059c6:	681b      	ldr	r3, [r3, #0]
 81059c8:	4a62      	ldr	r2, [pc, #392]	@ (8105b54 <DMA_SetConfig+0x268>)
 81059ca:	4293      	cmp	r3, r2
 81059cc:	d013      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059ce:	68fb      	ldr	r3, [r7, #12]
 81059d0:	681b      	ldr	r3, [r3, #0]
 81059d2:	4a61      	ldr	r2, [pc, #388]	@ (8105b58 <DMA_SetConfig+0x26c>)
 81059d4:	4293      	cmp	r3, r2
 81059d6:	d00e      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059d8:	68fb      	ldr	r3, [r7, #12]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	4a5f      	ldr	r2, [pc, #380]	@ (8105b5c <DMA_SetConfig+0x270>)
 81059de:	4293      	cmp	r3, r2
 81059e0:	d009      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059e2:	68fb      	ldr	r3, [r7, #12]
 81059e4:	681b      	ldr	r3, [r3, #0]
 81059e6:	4a5e      	ldr	r2, [pc, #376]	@ (8105b60 <DMA_SetConfig+0x274>)
 81059e8:	4293      	cmp	r3, r2
 81059ea:	d004      	beq.n	81059f6 <DMA_SetConfig+0x10a>
 81059ec:	68fb      	ldr	r3, [r7, #12]
 81059ee:	681b      	ldr	r3, [r3, #0]
 81059f0:	4a5c      	ldr	r2, [pc, #368]	@ (8105b64 <DMA_SetConfig+0x278>)
 81059f2:	4293      	cmp	r3, r2
 81059f4:	d101      	bne.n	81059fa <DMA_SetConfig+0x10e>
 81059f6:	2301      	movs	r3, #1
 81059f8:	e000      	b.n	81059fc <DMA_SetConfig+0x110>
 81059fa:	2300      	movs	r3, #0
 81059fc:	2b00      	cmp	r3, #0
 81059fe:	d00d      	beq.n	8105a1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105a00:	68fb      	ldr	r3, [r7, #12]
 8105a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105a04:	68fa      	ldr	r2, [r7, #12]
 8105a06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8105a08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8105a0a:	68fb      	ldr	r3, [r7, #12]
 8105a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d004      	beq.n	8105a1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105a12:	68fb      	ldr	r3, [r7, #12]
 8105a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105a16:	68fa      	ldr	r2, [r7, #12]
 8105a18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8105a1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105a1c:	68fb      	ldr	r3, [r7, #12]
 8105a1e:	681b      	ldr	r3, [r3, #0]
 8105a20:	4a39      	ldr	r2, [pc, #228]	@ (8105b08 <DMA_SetConfig+0x21c>)
 8105a22:	4293      	cmp	r3, r2
 8105a24:	d04a      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a26:	68fb      	ldr	r3, [r7, #12]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	4a38      	ldr	r2, [pc, #224]	@ (8105b0c <DMA_SetConfig+0x220>)
 8105a2c:	4293      	cmp	r3, r2
 8105a2e:	d045      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a30:	68fb      	ldr	r3, [r7, #12]
 8105a32:	681b      	ldr	r3, [r3, #0]
 8105a34:	4a36      	ldr	r2, [pc, #216]	@ (8105b10 <DMA_SetConfig+0x224>)
 8105a36:	4293      	cmp	r3, r2
 8105a38:	d040      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a3a:	68fb      	ldr	r3, [r7, #12]
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	4a35      	ldr	r2, [pc, #212]	@ (8105b14 <DMA_SetConfig+0x228>)
 8105a40:	4293      	cmp	r3, r2
 8105a42:	d03b      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a44:	68fb      	ldr	r3, [r7, #12]
 8105a46:	681b      	ldr	r3, [r3, #0]
 8105a48:	4a33      	ldr	r2, [pc, #204]	@ (8105b18 <DMA_SetConfig+0x22c>)
 8105a4a:	4293      	cmp	r3, r2
 8105a4c:	d036      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a4e:	68fb      	ldr	r3, [r7, #12]
 8105a50:	681b      	ldr	r3, [r3, #0]
 8105a52:	4a32      	ldr	r2, [pc, #200]	@ (8105b1c <DMA_SetConfig+0x230>)
 8105a54:	4293      	cmp	r3, r2
 8105a56:	d031      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a58:	68fb      	ldr	r3, [r7, #12]
 8105a5a:	681b      	ldr	r3, [r3, #0]
 8105a5c:	4a30      	ldr	r2, [pc, #192]	@ (8105b20 <DMA_SetConfig+0x234>)
 8105a5e:	4293      	cmp	r3, r2
 8105a60:	d02c      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a62:	68fb      	ldr	r3, [r7, #12]
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	4a2f      	ldr	r2, [pc, #188]	@ (8105b24 <DMA_SetConfig+0x238>)
 8105a68:	4293      	cmp	r3, r2
 8105a6a:	d027      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a6c:	68fb      	ldr	r3, [r7, #12]
 8105a6e:	681b      	ldr	r3, [r3, #0]
 8105a70:	4a2d      	ldr	r2, [pc, #180]	@ (8105b28 <DMA_SetConfig+0x23c>)
 8105a72:	4293      	cmp	r3, r2
 8105a74:	d022      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a76:	68fb      	ldr	r3, [r7, #12]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8105b2c <DMA_SetConfig+0x240>)
 8105a7c:	4293      	cmp	r3, r2
 8105a7e:	d01d      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a80:	68fb      	ldr	r3, [r7, #12]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	4a2a      	ldr	r2, [pc, #168]	@ (8105b30 <DMA_SetConfig+0x244>)
 8105a86:	4293      	cmp	r3, r2
 8105a88:	d018      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a8a:	68fb      	ldr	r3, [r7, #12]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	4a29      	ldr	r2, [pc, #164]	@ (8105b34 <DMA_SetConfig+0x248>)
 8105a90:	4293      	cmp	r3, r2
 8105a92:	d013      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	4a27      	ldr	r2, [pc, #156]	@ (8105b38 <DMA_SetConfig+0x24c>)
 8105a9a:	4293      	cmp	r3, r2
 8105a9c:	d00e      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105a9e:	68fb      	ldr	r3, [r7, #12]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	4a26      	ldr	r2, [pc, #152]	@ (8105b3c <DMA_SetConfig+0x250>)
 8105aa4:	4293      	cmp	r3, r2
 8105aa6:	d009      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105aa8:	68fb      	ldr	r3, [r7, #12]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	4a24      	ldr	r2, [pc, #144]	@ (8105b40 <DMA_SetConfig+0x254>)
 8105aae:	4293      	cmp	r3, r2
 8105ab0:	d004      	beq.n	8105abc <DMA_SetConfig+0x1d0>
 8105ab2:	68fb      	ldr	r3, [r7, #12]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	4a23      	ldr	r2, [pc, #140]	@ (8105b44 <DMA_SetConfig+0x258>)
 8105ab8:	4293      	cmp	r3, r2
 8105aba:	d101      	bne.n	8105ac0 <DMA_SetConfig+0x1d4>
 8105abc:	2301      	movs	r3, #1
 8105abe:	e000      	b.n	8105ac2 <DMA_SetConfig+0x1d6>
 8105ac0:	2300      	movs	r3, #0
 8105ac2:	2b00      	cmp	r3, #0
 8105ac4:	d059      	beq.n	8105b7a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105ac6:	68fb      	ldr	r3, [r7, #12]
 8105ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105aca:	f003 031f 	and.w	r3, r3, #31
 8105ace:	223f      	movs	r2, #63	@ 0x3f
 8105ad0:	409a      	lsls	r2, r3
 8105ad2:	697b      	ldr	r3, [r7, #20]
 8105ad4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8105ad6:	68fb      	ldr	r3, [r7, #12]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	681a      	ldr	r2, [r3, #0]
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8105ae4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8105ae6:	68fb      	ldr	r3, [r7, #12]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	683a      	ldr	r2, [r7, #0]
 8105aec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105aee:	68fb      	ldr	r3, [r7, #12]
 8105af0:	689b      	ldr	r3, [r3, #8]
 8105af2:	2b40      	cmp	r3, #64	@ 0x40
 8105af4:	d138      	bne.n	8105b68 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	687a      	ldr	r2, [r7, #4]
 8105afc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	681b      	ldr	r3, [r3, #0]
 8105b02:	68ba      	ldr	r2, [r7, #8]
 8105b04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105b06:	e086      	b.n	8105c16 <DMA_SetConfig+0x32a>
 8105b08:	40020010 	.word	0x40020010
 8105b0c:	40020028 	.word	0x40020028
 8105b10:	40020040 	.word	0x40020040
 8105b14:	40020058 	.word	0x40020058
 8105b18:	40020070 	.word	0x40020070
 8105b1c:	40020088 	.word	0x40020088
 8105b20:	400200a0 	.word	0x400200a0
 8105b24:	400200b8 	.word	0x400200b8
 8105b28:	40020410 	.word	0x40020410
 8105b2c:	40020428 	.word	0x40020428
 8105b30:	40020440 	.word	0x40020440
 8105b34:	40020458 	.word	0x40020458
 8105b38:	40020470 	.word	0x40020470
 8105b3c:	40020488 	.word	0x40020488
 8105b40:	400204a0 	.word	0x400204a0
 8105b44:	400204b8 	.word	0x400204b8
 8105b48:	58025408 	.word	0x58025408
 8105b4c:	5802541c 	.word	0x5802541c
 8105b50:	58025430 	.word	0x58025430
 8105b54:	58025444 	.word	0x58025444
 8105b58:	58025458 	.word	0x58025458
 8105b5c:	5802546c 	.word	0x5802546c
 8105b60:	58025480 	.word	0x58025480
 8105b64:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8105b68:	68fb      	ldr	r3, [r7, #12]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	68ba      	ldr	r2, [r7, #8]
 8105b6e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8105b70:	68fb      	ldr	r3, [r7, #12]
 8105b72:	681b      	ldr	r3, [r3, #0]
 8105b74:	687a      	ldr	r2, [r7, #4]
 8105b76:	60da      	str	r2, [r3, #12]
}
 8105b78:	e04d      	b.n	8105c16 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105b7a:	68fb      	ldr	r3, [r7, #12]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	4a29      	ldr	r2, [pc, #164]	@ (8105c24 <DMA_SetConfig+0x338>)
 8105b80:	4293      	cmp	r3, r2
 8105b82:	d022      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105b84:	68fb      	ldr	r3, [r7, #12]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	4a27      	ldr	r2, [pc, #156]	@ (8105c28 <DMA_SetConfig+0x33c>)
 8105b8a:	4293      	cmp	r3, r2
 8105b8c:	d01d      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105b8e:	68fb      	ldr	r3, [r7, #12]
 8105b90:	681b      	ldr	r3, [r3, #0]
 8105b92:	4a26      	ldr	r2, [pc, #152]	@ (8105c2c <DMA_SetConfig+0x340>)
 8105b94:	4293      	cmp	r3, r2
 8105b96:	d018      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105b98:	68fb      	ldr	r3, [r7, #12]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	4a24      	ldr	r2, [pc, #144]	@ (8105c30 <DMA_SetConfig+0x344>)
 8105b9e:	4293      	cmp	r3, r2
 8105ba0:	d013      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105ba2:	68fb      	ldr	r3, [r7, #12]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	4a23      	ldr	r2, [pc, #140]	@ (8105c34 <DMA_SetConfig+0x348>)
 8105ba8:	4293      	cmp	r3, r2
 8105baa:	d00e      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105bac:	68fb      	ldr	r3, [r7, #12]
 8105bae:	681b      	ldr	r3, [r3, #0]
 8105bb0:	4a21      	ldr	r2, [pc, #132]	@ (8105c38 <DMA_SetConfig+0x34c>)
 8105bb2:	4293      	cmp	r3, r2
 8105bb4:	d009      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105bb6:	68fb      	ldr	r3, [r7, #12]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	4a20      	ldr	r2, [pc, #128]	@ (8105c3c <DMA_SetConfig+0x350>)
 8105bbc:	4293      	cmp	r3, r2
 8105bbe:	d004      	beq.n	8105bca <DMA_SetConfig+0x2de>
 8105bc0:	68fb      	ldr	r3, [r7, #12]
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8105c40 <DMA_SetConfig+0x354>)
 8105bc6:	4293      	cmp	r3, r2
 8105bc8:	d101      	bne.n	8105bce <DMA_SetConfig+0x2e2>
 8105bca:	2301      	movs	r3, #1
 8105bcc:	e000      	b.n	8105bd0 <DMA_SetConfig+0x2e4>
 8105bce:	2300      	movs	r3, #0
 8105bd0:	2b00      	cmp	r3, #0
 8105bd2:	d020      	beq.n	8105c16 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105bd4:	68fb      	ldr	r3, [r7, #12]
 8105bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105bd8:	f003 031f 	and.w	r3, r3, #31
 8105bdc:	2201      	movs	r2, #1
 8105bde:	409a      	lsls	r2, r3
 8105be0:	693b      	ldr	r3, [r7, #16]
 8105be2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8105be4:	68fb      	ldr	r3, [r7, #12]
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	683a      	ldr	r2, [r7, #0]
 8105bea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105bec:	68fb      	ldr	r3, [r7, #12]
 8105bee:	689b      	ldr	r3, [r3, #8]
 8105bf0:	2b40      	cmp	r3, #64	@ 0x40
 8105bf2:	d108      	bne.n	8105c06 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8105bf4:	68fb      	ldr	r3, [r7, #12]
 8105bf6:	681b      	ldr	r3, [r3, #0]
 8105bf8:	687a      	ldr	r2, [r7, #4]
 8105bfa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8105bfc:	68fb      	ldr	r3, [r7, #12]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	68ba      	ldr	r2, [r7, #8]
 8105c02:	60da      	str	r2, [r3, #12]
}
 8105c04:	e007      	b.n	8105c16 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8105c06:	68fb      	ldr	r3, [r7, #12]
 8105c08:	681b      	ldr	r3, [r3, #0]
 8105c0a:	68ba      	ldr	r2, [r7, #8]
 8105c0c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8105c0e:	68fb      	ldr	r3, [r7, #12]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	687a      	ldr	r2, [r7, #4]
 8105c14:	60da      	str	r2, [r3, #12]
}
 8105c16:	bf00      	nop
 8105c18:	371c      	adds	r7, #28
 8105c1a:	46bd      	mov	sp, r7
 8105c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c20:	4770      	bx	lr
 8105c22:	bf00      	nop
 8105c24:	58025408 	.word	0x58025408
 8105c28:	5802541c 	.word	0x5802541c
 8105c2c:	58025430 	.word	0x58025430
 8105c30:	58025444 	.word	0x58025444
 8105c34:	58025458 	.word	0x58025458
 8105c38:	5802546c 	.word	0x5802546c
 8105c3c:	58025480 	.word	0x58025480
 8105c40:	58025494 	.word	0x58025494

08105c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8105c44:	b480      	push	{r7}
 8105c46:	b085      	sub	sp, #20
 8105c48:	af00      	add	r7, sp, #0
 8105c4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	681b      	ldr	r3, [r3, #0]
 8105c50:	4a43      	ldr	r2, [pc, #268]	@ (8105d60 <DMA_CalcBaseAndBitshift+0x11c>)
 8105c52:	4293      	cmp	r3, r2
 8105c54:	d04a      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c56:	687b      	ldr	r3, [r7, #4]
 8105c58:	681b      	ldr	r3, [r3, #0]
 8105c5a:	4a42      	ldr	r2, [pc, #264]	@ (8105d64 <DMA_CalcBaseAndBitshift+0x120>)
 8105c5c:	4293      	cmp	r3, r2
 8105c5e:	d045      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	4a40      	ldr	r2, [pc, #256]	@ (8105d68 <DMA_CalcBaseAndBitshift+0x124>)
 8105c66:	4293      	cmp	r3, r2
 8105c68:	d040      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8105d6c <DMA_CalcBaseAndBitshift+0x128>)
 8105c70:	4293      	cmp	r3, r2
 8105c72:	d03b      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	4a3d      	ldr	r2, [pc, #244]	@ (8105d70 <DMA_CalcBaseAndBitshift+0x12c>)
 8105c7a:	4293      	cmp	r3, r2
 8105c7c:	d036      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	4a3c      	ldr	r2, [pc, #240]	@ (8105d74 <DMA_CalcBaseAndBitshift+0x130>)
 8105c84:	4293      	cmp	r3, r2
 8105c86:	d031      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8105d78 <DMA_CalcBaseAndBitshift+0x134>)
 8105c8e:	4293      	cmp	r3, r2
 8105c90:	d02c      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	681b      	ldr	r3, [r3, #0]
 8105c96:	4a39      	ldr	r2, [pc, #228]	@ (8105d7c <DMA_CalcBaseAndBitshift+0x138>)
 8105c98:	4293      	cmp	r3, r2
 8105c9a:	d027      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	681b      	ldr	r3, [r3, #0]
 8105ca0:	4a37      	ldr	r2, [pc, #220]	@ (8105d80 <DMA_CalcBaseAndBitshift+0x13c>)
 8105ca2:	4293      	cmp	r3, r2
 8105ca4:	d022      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105ca6:	687b      	ldr	r3, [r7, #4]
 8105ca8:	681b      	ldr	r3, [r3, #0]
 8105caa:	4a36      	ldr	r2, [pc, #216]	@ (8105d84 <DMA_CalcBaseAndBitshift+0x140>)
 8105cac:	4293      	cmp	r3, r2
 8105cae:	d01d      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105cb0:	687b      	ldr	r3, [r7, #4]
 8105cb2:	681b      	ldr	r3, [r3, #0]
 8105cb4:	4a34      	ldr	r2, [pc, #208]	@ (8105d88 <DMA_CalcBaseAndBitshift+0x144>)
 8105cb6:	4293      	cmp	r3, r2
 8105cb8:	d018      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	4a33      	ldr	r2, [pc, #204]	@ (8105d8c <DMA_CalcBaseAndBitshift+0x148>)
 8105cc0:	4293      	cmp	r3, r2
 8105cc2:	d013      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	4a31      	ldr	r2, [pc, #196]	@ (8105d90 <DMA_CalcBaseAndBitshift+0x14c>)
 8105cca:	4293      	cmp	r3, r2
 8105ccc:	d00e      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	681b      	ldr	r3, [r3, #0]
 8105cd2:	4a30      	ldr	r2, [pc, #192]	@ (8105d94 <DMA_CalcBaseAndBitshift+0x150>)
 8105cd4:	4293      	cmp	r3, r2
 8105cd6:	d009      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8105d98 <DMA_CalcBaseAndBitshift+0x154>)
 8105cde:	4293      	cmp	r3, r2
 8105ce0:	d004      	beq.n	8105cec <DMA_CalcBaseAndBitshift+0xa8>
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8105d9c <DMA_CalcBaseAndBitshift+0x158>)
 8105ce8:	4293      	cmp	r3, r2
 8105cea:	d101      	bne.n	8105cf0 <DMA_CalcBaseAndBitshift+0xac>
 8105cec:	2301      	movs	r3, #1
 8105cee:	e000      	b.n	8105cf2 <DMA_CalcBaseAndBitshift+0xae>
 8105cf0:	2300      	movs	r3, #0
 8105cf2:	2b00      	cmp	r3, #0
 8105cf4:	d026      	beq.n	8105d44 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	b2db      	uxtb	r3, r3
 8105cfc:	3b10      	subs	r3, #16
 8105cfe:	4a28      	ldr	r2, [pc, #160]	@ (8105da0 <DMA_CalcBaseAndBitshift+0x15c>)
 8105d00:	fba2 2303 	umull	r2, r3, r2, r3
 8105d04:	091b      	lsrs	r3, r3, #4
 8105d06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8105d08:	68fb      	ldr	r3, [r7, #12]
 8105d0a:	f003 0307 	and.w	r3, r3, #7
 8105d0e:	4a25      	ldr	r2, [pc, #148]	@ (8105da4 <DMA_CalcBaseAndBitshift+0x160>)
 8105d10:	5cd3      	ldrb	r3, [r2, r3]
 8105d12:	461a      	mov	r2, r3
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8105d18:	68fb      	ldr	r3, [r7, #12]
 8105d1a:	2b03      	cmp	r3, #3
 8105d1c:	d909      	bls.n	8105d32 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8105d26:	f023 0303 	bic.w	r3, r3, #3
 8105d2a:	1d1a      	adds	r2, r3, #4
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8105d30:	e00e      	b.n	8105d50 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8105d3a:	f023 0303 	bic.w	r3, r3, #3
 8105d3e:	687a      	ldr	r2, [r7, #4]
 8105d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8105d42:	e005      	b.n	8105d50 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8105d54:	4618      	mov	r0, r3
 8105d56:	3714      	adds	r7, #20
 8105d58:	46bd      	mov	sp, r7
 8105d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d5e:	4770      	bx	lr
 8105d60:	40020010 	.word	0x40020010
 8105d64:	40020028 	.word	0x40020028
 8105d68:	40020040 	.word	0x40020040
 8105d6c:	40020058 	.word	0x40020058
 8105d70:	40020070 	.word	0x40020070
 8105d74:	40020088 	.word	0x40020088
 8105d78:	400200a0 	.word	0x400200a0
 8105d7c:	400200b8 	.word	0x400200b8
 8105d80:	40020410 	.word	0x40020410
 8105d84:	40020428 	.word	0x40020428
 8105d88:	40020440 	.word	0x40020440
 8105d8c:	40020458 	.word	0x40020458
 8105d90:	40020470 	.word	0x40020470
 8105d94:	40020488 	.word	0x40020488
 8105d98:	400204a0 	.word	0x400204a0
 8105d9c:	400204b8 	.word	0x400204b8
 8105da0:	aaaaaaab 	.word	0xaaaaaaab
 8105da4:	0810d200 	.word	0x0810d200

08105da8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8105da8:	b480      	push	{r7}
 8105daa:	b085      	sub	sp, #20
 8105dac:	af00      	add	r7, sp, #0
 8105dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105db0:	2300      	movs	r3, #0
 8105db2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	699b      	ldr	r3, [r3, #24]
 8105db8:	2b00      	cmp	r3, #0
 8105dba:	d120      	bne.n	8105dfe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105dc0:	2b03      	cmp	r3, #3
 8105dc2:	d858      	bhi.n	8105e76 <DMA_CheckFifoParam+0xce>
 8105dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8105dcc <DMA_CheckFifoParam+0x24>)
 8105dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105dca:	bf00      	nop
 8105dcc:	08105ddd 	.word	0x08105ddd
 8105dd0:	08105def 	.word	0x08105def
 8105dd4:	08105ddd 	.word	0x08105ddd
 8105dd8:	08105e77 	.word	0x08105e77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105de4:	2b00      	cmp	r3, #0
 8105de6:	d048      	beq.n	8105e7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8105de8:	2301      	movs	r3, #1
 8105dea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105dec:	e045      	b.n	8105e7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105df2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8105df6:	d142      	bne.n	8105e7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8105df8:	2301      	movs	r3, #1
 8105dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105dfc:	e03f      	b.n	8105e7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	699b      	ldr	r3, [r3, #24]
 8105e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105e06:	d123      	bne.n	8105e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105e0c:	2b03      	cmp	r3, #3
 8105e0e:	d838      	bhi.n	8105e82 <DMA_CheckFifoParam+0xda>
 8105e10:	a201      	add	r2, pc, #4	@ (adr r2, 8105e18 <DMA_CheckFifoParam+0x70>)
 8105e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e16:	bf00      	nop
 8105e18:	08105e29 	.word	0x08105e29
 8105e1c:	08105e2f 	.word	0x08105e2f
 8105e20:	08105e29 	.word	0x08105e29
 8105e24:	08105e41 	.word	0x08105e41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8105e28:	2301      	movs	r3, #1
 8105e2a:	73fb      	strb	r3, [r7, #15]
        break;
 8105e2c:	e030      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105e36:	2b00      	cmp	r3, #0
 8105e38:	d025      	beq.n	8105e86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8105e3a:	2301      	movs	r3, #1
 8105e3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105e3e:	e022      	b.n	8105e86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8105e48:	d11f      	bne.n	8105e8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8105e4a:	2301      	movs	r3, #1
 8105e4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105e4e:	e01c      	b.n	8105e8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105e54:	2b02      	cmp	r3, #2
 8105e56:	d902      	bls.n	8105e5e <DMA_CheckFifoParam+0xb6>
 8105e58:	2b03      	cmp	r3, #3
 8105e5a:	d003      	beq.n	8105e64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8105e5c:	e018      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8105e5e:	2301      	movs	r3, #1
 8105e60:	73fb      	strb	r3, [r7, #15]
        break;
 8105e62:	e015      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105e6c:	2b00      	cmp	r3, #0
 8105e6e:	d00e      	beq.n	8105e8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8105e70:	2301      	movs	r3, #1
 8105e72:	73fb      	strb	r3, [r7, #15]
    break;
 8105e74:	e00b      	b.n	8105e8e <DMA_CheckFifoParam+0xe6>
        break;
 8105e76:	bf00      	nop
 8105e78:	e00a      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        break;
 8105e7a:	bf00      	nop
 8105e7c:	e008      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        break;
 8105e7e:	bf00      	nop
 8105e80:	e006      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        break;
 8105e82:	bf00      	nop
 8105e84:	e004      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        break;
 8105e86:	bf00      	nop
 8105e88:	e002      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
        break;
 8105e8a:	bf00      	nop
 8105e8c:	e000      	b.n	8105e90 <DMA_CheckFifoParam+0xe8>
    break;
 8105e8e:	bf00      	nop
    }
  }

  return status;
 8105e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e92:	4618      	mov	r0, r3
 8105e94:	3714      	adds	r7, #20
 8105e96:	46bd      	mov	sp, r7
 8105e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e9c:	4770      	bx	lr
 8105e9e:	bf00      	nop

08105ea0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8105ea0:	b480      	push	{r7}
 8105ea2:	b085      	sub	sp, #20
 8105ea4:	af00      	add	r7, sp, #0
 8105ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	4a3a      	ldr	r2, [pc, #232]	@ (8105f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8105eb4:	4293      	cmp	r3, r2
 8105eb6:	d022      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	4a38      	ldr	r2, [pc, #224]	@ (8105fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8105ebe:	4293      	cmp	r3, r2
 8105ec0:	d01d      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	4a37      	ldr	r2, [pc, #220]	@ (8105fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d018      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	4a35      	ldr	r2, [pc, #212]	@ (8105fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8105ed2:	4293      	cmp	r3, r2
 8105ed4:	d013      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	4a34      	ldr	r2, [pc, #208]	@ (8105fac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8105edc:	4293      	cmp	r3, r2
 8105ede:	d00e      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a32      	ldr	r2, [pc, #200]	@ (8105fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d009      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	4a31      	ldr	r2, [pc, #196]	@ (8105fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8105ef0:	4293      	cmp	r3, r2
 8105ef2:	d004      	beq.n	8105efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8105fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8105efa:	4293      	cmp	r3, r2
 8105efc:	d101      	bne.n	8105f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8105efe:	2301      	movs	r3, #1
 8105f00:	e000      	b.n	8105f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8105f02:	2300      	movs	r3, #0
 8105f04:	2b00      	cmp	r3, #0
 8105f06:	d01c      	beq.n	8105f42 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	b2db      	uxtb	r3, r3
 8105f0e:	3b08      	subs	r3, #8
 8105f10:	4a2a      	ldr	r2, [pc, #168]	@ (8105fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8105f12:	fba2 2303 	umull	r2, r3, r2, r3
 8105f16:	091b      	lsrs	r3, r3, #4
 8105f18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8105f1a:	68fb      	ldr	r3, [r7, #12]
 8105f1c:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8105f20:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8105f24:	009b      	lsls	r3, r3, #2
 8105f26:	461a      	mov	r2, r3
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	4a24      	ldr	r2, [pc, #144]	@ (8105fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8105f30:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8105f32:	68fb      	ldr	r3, [r7, #12]
 8105f34:	f003 031f 	and.w	r3, r3, #31
 8105f38:	2201      	movs	r2, #1
 8105f3a:	409a      	lsls	r2, r3
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8105f40:	e026      	b.n	8105f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	b2db      	uxtb	r3, r3
 8105f48:	3b10      	subs	r3, #16
 8105f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8105fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8105f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8105f50:	091b      	lsrs	r3, r3, #4
 8105f52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8105f54:	68bb      	ldr	r3, [r7, #8]
 8105f56:	4a1c      	ldr	r2, [pc, #112]	@ (8105fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8105f58:	4293      	cmp	r3, r2
 8105f5a:	d806      	bhi.n	8105f6a <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8105f5c:	68bb      	ldr	r3, [r7, #8]
 8105f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8105fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8105f60:	4293      	cmp	r3, r2
 8105f62:	d902      	bls.n	8105f6a <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8105f64:	68fb      	ldr	r3, [r7, #12]
 8105f66:	3308      	adds	r3, #8
 8105f68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8105f70:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8105f74:	009b      	lsls	r3, r3, #2
 8105f76:	461a      	mov	r2, r3
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	4a14      	ldr	r2, [pc, #80]	@ (8105fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8105f80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8105f82:	68fb      	ldr	r3, [r7, #12]
 8105f84:	f003 031f 	and.w	r3, r3, #31
 8105f88:	2201      	movs	r2, #1
 8105f8a:	409a      	lsls	r2, r3
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8105f90:	bf00      	nop
 8105f92:	3714      	adds	r7, #20
 8105f94:	46bd      	mov	sp, r7
 8105f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f9a:	4770      	bx	lr
 8105f9c:	58025408 	.word	0x58025408
 8105fa0:	5802541c 	.word	0x5802541c
 8105fa4:	58025430 	.word	0x58025430
 8105fa8:	58025444 	.word	0x58025444
 8105fac:	58025458 	.word	0x58025458
 8105fb0:	5802546c 	.word	0x5802546c
 8105fb4:	58025480 	.word	0x58025480
 8105fb8:	58025494 	.word	0x58025494
 8105fbc:	cccccccd 	.word	0xcccccccd
 8105fc0:	58025880 	.word	0x58025880
 8105fc4:	aaaaaaab 	.word	0xaaaaaaab
 8105fc8:	400204b8 	.word	0x400204b8
 8105fcc:	4002040f 	.word	0x4002040f
 8105fd0:	40020880 	.word	0x40020880

08105fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8105fd4:	b480      	push	{r7}
 8105fd6:	b085      	sub	sp, #20
 8105fd8:	af00      	add	r7, sp, #0
 8105fda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	685b      	ldr	r3, [r3, #4]
 8105fe0:	b2db      	uxtb	r3, r3
 8105fe2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8105fe4:	68fb      	ldr	r3, [r7, #12]
 8105fe6:	2b00      	cmp	r3, #0
 8105fe8:	d04a      	beq.n	8106080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8105fea:	68fb      	ldr	r3, [r7, #12]
 8105fec:	2b08      	cmp	r3, #8
 8105fee:	d847      	bhi.n	8106080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	4a25      	ldr	r2, [pc, #148]	@ (810608c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8105ff6:	4293      	cmp	r3, r2
 8105ff8:	d022      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	4a24      	ldr	r2, [pc, #144]	@ (8106090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d01d      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	681b      	ldr	r3, [r3, #0]
 8106008:	4a22      	ldr	r2, [pc, #136]	@ (8106094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810600a:	4293      	cmp	r3, r2
 810600c:	d018      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	4a21      	ldr	r2, [pc, #132]	@ (8106098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106014:	4293      	cmp	r3, r2
 8106016:	d013      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	4a1f      	ldr	r2, [pc, #124]	@ (810609c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810601e:	4293      	cmp	r3, r2
 8106020:	d00e      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	4a1e      	ldr	r2, [pc, #120]	@ (81060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106028:	4293      	cmp	r3, r2
 810602a:	d009      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	4a1c      	ldr	r2, [pc, #112]	@ (81060a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106032:	4293      	cmp	r3, r2
 8106034:	d004      	beq.n	8106040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	4a1b      	ldr	r2, [pc, #108]	@ (81060a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 810603c:	4293      	cmp	r3, r2
 810603e:	d101      	bne.n	8106044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106040:	2301      	movs	r3, #1
 8106042:	e000      	b.n	8106046 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106044:	2300      	movs	r3, #0
 8106046:	2b00      	cmp	r3, #0
 8106048:	d00a      	beq.n	8106060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810604a:	68fa      	ldr	r2, [r7, #12]
 810604c:	4b17      	ldr	r3, [pc, #92]	@ (81060ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810604e:	4413      	add	r3, r2
 8106050:	009b      	lsls	r3, r3, #2
 8106052:	461a      	mov	r2, r3
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	4a15      	ldr	r2, [pc, #84]	@ (81060b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 810605c:	671a      	str	r2, [r3, #112]	@ 0x70
 810605e:	e009      	b.n	8106074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106060:	68fa      	ldr	r2, [r7, #12]
 8106062:	4b14      	ldr	r3, [pc, #80]	@ (81060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106064:	4413      	add	r3, r2
 8106066:	009b      	lsls	r3, r3, #2
 8106068:	461a      	mov	r2, r3
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810606e:	687b      	ldr	r3, [r7, #4]
 8106070:	4a11      	ldr	r2, [pc, #68]	@ (81060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106072:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106074:	68fb      	ldr	r3, [r7, #12]
 8106076:	3b01      	subs	r3, #1
 8106078:	2201      	movs	r2, #1
 810607a:	409a      	lsls	r2, r3
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8106080:	bf00      	nop
 8106082:	3714      	adds	r7, #20
 8106084:	46bd      	mov	sp, r7
 8106086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810608a:	4770      	bx	lr
 810608c:	58025408 	.word	0x58025408
 8106090:	5802541c 	.word	0x5802541c
 8106094:	58025430 	.word	0x58025430
 8106098:	58025444 	.word	0x58025444
 810609c:	58025458 	.word	0x58025458
 81060a0:	5802546c 	.word	0x5802546c
 81060a4:	58025480 	.word	0x58025480
 81060a8:	58025494 	.word	0x58025494
 81060ac:	1600963f 	.word	0x1600963f
 81060b0:	58025940 	.word	0x58025940
 81060b4:	1000823f 	.word	0x1000823f
 81060b8:	40020940 	.word	0x40020940

081060bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81060bc:	b480      	push	{r7}
 81060be:	b089      	sub	sp, #36	@ 0x24
 81060c0:	af00      	add	r7, sp, #0
 81060c2:	6078      	str	r0, [r7, #4]
 81060c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81060c6:	2300      	movs	r3, #0
 81060c8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81060ca:	4b89      	ldr	r3, [pc, #548]	@ (81062f0 <HAL_GPIO_Init+0x234>)
 81060cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81060ce:	e194      	b.n	81063fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81060d0:	683b      	ldr	r3, [r7, #0]
 81060d2:	681a      	ldr	r2, [r3, #0]
 81060d4:	2101      	movs	r1, #1
 81060d6:	69fb      	ldr	r3, [r7, #28]
 81060d8:	fa01 f303 	lsl.w	r3, r1, r3
 81060dc:	4013      	ands	r3, r2
 81060de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81060e0:	693b      	ldr	r3, [r7, #16]
 81060e2:	2b00      	cmp	r3, #0
 81060e4:	f000 8186 	beq.w	81063f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81060e8:	683b      	ldr	r3, [r7, #0]
 81060ea:	685b      	ldr	r3, [r3, #4]
 81060ec:	f003 0303 	and.w	r3, r3, #3
 81060f0:	2b01      	cmp	r3, #1
 81060f2:	d005      	beq.n	8106100 <HAL_GPIO_Init+0x44>
 81060f4:	683b      	ldr	r3, [r7, #0]
 81060f6:	685b      	ldr	r3, [r3, #4]
 81060f8:	f003 0303 	and.w	r3, r3, #3
 81060fc:	2b02      	cmp	r3, #2
 81060fe:	d130      	bne.n	8106162 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	689b      	ldr	r3, [r3, #8]
 8106104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106106:	69fb      	ldr	r3, [r7, #28]
 8106108:	005b      	lsls	r3, r3, #1
 810610a:	2203      	movs	r2, #3
 810610c:	fa02 f303 	lsl.w	r3, r2, r3
 8106110:	43db      	mvns	r3, r3
 8106112:	69ba      	ldr	r2, [r7, #24]
 8106114:	4013      	ands	r3, r2
 8106116:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106118:	683b      	ldr	r3, [r7, #0]
 810611a:	68da      	ldr	r2, [r3, #12]
 810611c:	69fb      	ldr	r3, [r7, #28]
 810611e:	005b      	lsls	r3, r3, #1
 8106120:	fa02 f303 	lsl.w	r3, r2, r3
 8106124:	69ba      	ldr	r2, [r7, #24]
 8106126:	4313      	orrs	r3, r2
 8106128:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	69ba      	ldr	r2, [r7, #24]
 810612e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	685b      	ldr	r3, [r3, #4]
 8106134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106136:	2201      	movs	r2, #1
 8106138:	69fb      	ldr	r3, [r7, #28]
 810613a:	fa02 f303 	lsl.w	r3, r2, r3
 810613e:	43db      	mvns	r3, r3
 8106140:	69ba      	ldr	r2, [r7, #24]
 8106142:	4013      	ands	r3, r2
 8106144:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106146:	683b      	ldr	r3, [r7, #0]
 8106148:	685b      	ldr	r3, [r3, #4]
 810614a:	091b      	lsrs	r3, r3, #4
 810614c:	f003 0201 	and.w	r2, r3, #1
 8106150:	69fb      	ldr	r3, [r7, #28]
 8106152:	fa02 f303 	lsl.w	r3, r2, r3
 8106156:	69ba      	ldr	r2, [r7, #24]
 8106158:	4313      	orrs	r3, r2
 810615a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	69ba      	ldr	r2, [r7, #24]
 8106160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106162:	683b      	ldr	r3, [r7, #0]
 8106164:	685b      	ldr	r3, [r3, #4]
 8106166:	f003 0303 	and.w	r3, r3, #3
 810616a:	2b03      	cmp	r3, #3
 810616c:	d017      	beq.n	810619e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	68db      	ldr	r3, [r3, #12]
 8106172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106174:	69fb      	ldr	r3, [r7, #28]
 8106176:	005b      	lsls	r3, r3, #1
 8106178:	2203      	movs	r2, #3
 810617a:	fa02 f303 	lsl.w	r3, r2, r3
 810617e:	43db      	mvns	r3, r3
 8106180:	69ba      	ldr	r2, [r7, #24]
 8106182:	4013      	ands	r3, r2
 8106184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106186:	683b      	ldr	r3, [r7, #0]
 8106188:	689a      	ldr	r2, [r3, #8]
 810618a:	69fb      	ldr	r3, [r7, #28]
 810618c:	005b      	lsls	r3, r3, #1
 810618e:	fa02 f303 	lsl.w	r3, r2, r3
 8106192:	69ba      	ldr	r2, [r7, #24]
 8106194:	4313      	orrs	r3, r2
 8106196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	69ba      	ldr	r2, [r7, #24]
 810619c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810619e:	683b      	ldr	r3, [r7, #0]
 81061a0:	685b      	ldr	r3, [r3, #4]
 81061a2:	f003 0303 	and.w	r3, r3, #3
 81061a6:	2b02      	cmp	r3, #2
 81061a8:	d123      	bne.n	81061f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81061aa:	69fb      	ldr	r3, [r7, #28]
 81061ac:	08da      	lsrs	r2, r3, #3
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	3208      	adds	r2, #8
 81061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81061b8:	69fb      	ldr	r3, [r7, #28]
 81061ba:	f003 0307 	and.w	r3, r3, #7
 81061be:	009b      	lsls	r3, r3, #2
 81061c0:	220f      	movs	r2, #15
 81061c2:	fa02 f303 	lsl.w	r3, r2, r3
 81061c6:	43db      	mvns	r3, r3
 81061c8:	69ba      	ldr	r2, [r7, #24]
 81061ca:	4013      	ands	r3, r2
 81061cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81061ce:	683b      	ldr	r3, [r7, #0]
 81061d0:	691a      	ldr	r2, [r3, #16]
 81061d2:	69fb      	ldr	r3, [r7, #28]
 81061d4:	f003 0307 	and.w	r3, r3, #7
 81061d8:	009b      	lsls	r3, r3, #2
 81061da:	fa02 f303 	lsl.w	r3, r2, r3
 81061de:	69ba      	ldr	r2, [r7, #24]
 81061e0:	4313      	orrs	r3, r2
 81061e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81061e4:	69fb      	ldr	r3, [r7, #28]
 81061e6:	08da      	lsrs	r2, r3, #3
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	3208      	adds	r2, #8
 81061ec:	69b9      	ldr	r1, [r7, #24]
 81061ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81061f8:	69fb      	ldr	r3, [r7, #28]
 81061fa:	005b      	lsls	r3, r3, #1
 81061fc:	2203      	movs	r2, #3
 81061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8106202:	43db      	mvns	r3, r3
 8106204:	69ba      	ldr	r2, [r7, #24]
 8106206:	4013      	ands	r3, r2
 8106208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810620a:	683b      	ldr	r3, [r7, #0]
 810620c:	685b      	ldr	r3, [r3, #4]
 810620e:	f003 0203 	and.w	r2, r3, #3
 8106212:	69fb      	ldr	r3, [r7, #28]
 8106214:	005b      	lsls	r3, r3, #1
 8106216:	fa02 f303 	lsl.w	r3, r2, r3
 810621a:	69ba      	ldr	r2, [r7, #24]
 810621c:	4313      	orrs	r3, r2
 810621e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	69ba      	ldr	r2, [r7, #24]
 8106224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106226:	683b      	ldr	r3, [r7, #0]
 8106228:	685b      	ldr	r3, [r3, #4]
 810622a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810622e:	2b00      	cmp	r3, #0
 8106230:	f000 80e0 	beq.w	81063f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106234:	4b2f      	ldr	r3, [pc, #188]	@ (81062f4 <HAL_GPIO_Init+0x238>)
 8106236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810623a:	4a2e      	ldr	r2, [pc, #184]	@ (81062f4 <HAL_GPIO_Init+0x238>)
 810623c:	f043 0302 	orr.w	r3, r3, #2
 8106240:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106244:	4b2b      	ldr	r3, [pc, #172]	@ (81062f4 <HAL_GPIO_Init+0x238>)
 8106246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810624a:	f003 0302 	and.w	r3, r3, #2
 810624e:	60fb      	str	r3, [r7, #12]
 8106250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106252:	4a29      	ldr	r2, [pc, #164]	@ (81062f8 <HAL_GPIO_Init+0x23c>)
 8106254:	69fb      	ldr	r3, [r7, #28]
 8106256:	089b      	lsrs	r3, r3, #2
 8106258:	3302      	adds	r3, #2
 810625a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810625e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106260:	69fb      	ldr	r3, [r7, #28]
 8106262:	f003 0303 	and.w	r3, r3, #3
 8106266:	009b      	lsls	r3, r3, #2
 8106268:	220f      	movs	r2, #15
 810626a:	fa02 f303 	lsl.w	r3, r2, r3
 810626e:	43db      	mvns	r3, r3
 8106270:	69ba      	ldr	r2, [r7, #24]
 8106272:	4013      	ands	r3, r2
 8106274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	4a20      	ldr	r2, [pc, #128]	@ (81062fc <HAL_GPIO_Init+0x240>)
 810627a:	4293      	cmp	r3, r2
 810627c:	d052      	beq.n	8106324 <HAL_GPIO_Init+0x268>
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	4a1f      	ldr	r2, [pc, #124]	@ (8106300 <HAL_GPIO_Init+0x244>)
 8106282:	4293      	cmp	r3, r2
 8106284:	d031      	beq.n	81062ea <HAL_GPIO_Init+0x22e>
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	4a1e      	ldr	r2, [pc, #120]	@ (8106304 <HAL_GPIO_Init+0x248>)
 810628a:	4293      	cmp	r3, r2
 810628c:	d02b      	beq.n	81062e6 <HAL_GPIO_Init+0x22a>
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	4a1d      	ldr	r2, [pc, #116]	@ (8106308 <HAL_GPIO_Init+0x24c>)
 8106292:	4293      	cmp	r3, r2
 8106294:	d025      	beq.n	81062e2 <HAL_GPIO_Init+0x226>
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	4a1c      	ldr	r2, [pc, #112]	@ (810630c <HAL_GPIO_Init+0x250>)
 810629a:	4293      	cmp	r3, r2
 810629c:	d01f      	beq.n	81062de <HAL_GPIO_Init+0x222>
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	4a1b      	ldr	r2, [pc, #108]	@ (8106310 <HAL_GPIO_Init+0x254>)
 81062a2:	4293      	cmp	r3, r2
 81062a4:	d019      	beq.n	81062da <HAL_GPIO_Init+0x21e>
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	4a1a      	ldr	r2, [pc, #104]	@ (8106314 <HAL_GPIO_Init+0x258>)
 81062aa:	4293      	cmp	r3, r2
 81062ac:	d013      	beq.n	81062d6 <HAL_GPIO_Init+0x21a>
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	4a19      	ldr	r2, [pc, #100]	@ (8106318 <HAL_GPIO_Init+0x25c>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d00d      	beq.n	81062d2 <HAL_GPIO_Init+0x216>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	4a18      	ldr	r2, [pc, #96]	@ (810631c <HAL_GPIO_Init+0x260>)
 81062ba:	4293      	cmp	r3, r2
 81062bc:	d007      	beq.n	81062ce <HAL_GPIO_Init+0x212>
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	4a17      	ldr	r2, [pc, #92]	@ (8106320 <HAL_GPIO_Init+0x264>)
 81062c2:	4293      	cmp	r3, r2
 81062c4:	d101      	bne.n	81062ca <HAL_GPIO_Init+0x20e>
 81062c6:	2309      	movs	r3, #9
 81062c8:	e02d      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062ca:	230a      	movs	r3, #10
 81062cc:	e02b      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062ce:	2308      	movs	r3, #8
 81062d0:	e029      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062d2:	2307      	movs	r3, #7
 81062d4:	e027      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062d6:	2306      	movs	r3, #6
 81062d8:	e025      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062da:	2305      	movs	r3, #5
 81062dc:	e023      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062de:	2304      	movs	r3, #4
 81062e0:	e021      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062e2:	2303      	movs	r3, #3
 81062e4:	e01f      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062e6:	2302      	movs	r3, #2
 81062e8:	e01d      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062ea:	2301      	movs	r3, #1
 81062ec:	e01b      	b.n	8106326 <HAL_GPIO_Init+0x26a>
 81062ee:	bf00      	nop
 81062f0:	580000c0 	.word	0x580000c0
 81062f4:	58024400 	.word	0x58024400
 81062f8:	58000400 	.word	0x58000400
 81062fc:	58020000 	.word	0x58020000
 8106300:	58020400 	.word	0x58020400
 8106304:	58020800 	.word	0x58020800
 8106308:	58020c00 	.word	0x58020c00
 810630c:	58021000 	.word	0x58021000
 8106310:	58021400 	.word	0x58021400
 8106314:	58021800 	.word	0x58021800
 8106318:	58021c00 	.word	0x58021c00
 810631c:	58022000 	.word	0x58022000
 8106320:	58022400 	.word	0x58022400
 8106324:	2300      	movs	r3, #0
 8106326:	69fa      	ldr	r2, [r7, #28]
 8106328:	f002 0203 	and.w	r2, r2, #3
 810632c:	0092      	lsls	r2, r2, #2
 810632e:	4093      	lsls	r3, r2
 8106330:	69ba      	ldr	r2, [r7, #24]
 8106332:	4313      	orrs	r3, r2
 8106334:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106336:	4938      	ldr	r1, [pc, #224]	@ (8106418 <HAL_GPIO_Init+0x35c>)
 8106338:	69fb      	ldr	r3, [r7, #28]
 810633a:	089b      	lsrs	r3, r3, #2
 810633c:	3302      	adds	r3, #2
 810633e:	69ba      	ldr	r2, [r7, #24]
 8106340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810634c:	693b      	ldr	r3, [r7, #16]
 810634e:	43db      	mvns	r3, r3
 8106350:	69ba      	ldr	r2, [r7, #24]
 8106352:	4013      	ands	r3, r2
 8106354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8106356:	683b      	ldr	r3, [r7, #0]
 8106358:	685b      	ldr	r3, [r3, #4]
 810635a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810635e:	2b00      	cmp	r3, #0
 8106360:	d003      	beq.n	810636a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106362:	69ba      	ldr	r2, [r7, #24]
 8106364:	693b      	ldr	r3, [r7, #16]
 8106366:	4313      	orrs	r3, r2
 8106368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810636a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810636e:	69bb      	ldr	r3, [r7, #24]
 8106370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106376:	685b      	ldr	r3, [r3, #4]
 8106378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810637a:	693b      	ldr	r3, [r7, #16]
 810637c:	43db      	mvns	r3, r3
 810637e:	69ba      	ldr	r2, [r7, #24]
 8106380:	4013      	ands	r3, r2
 8106382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106384:	683b      	ldr	r3, [r7, #0]
 8106386:	685b      	ldr	r3, [r3, #4]
 8106388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810638c:	2b00      	cmp	r3, #0
 810638e:	d003      	beq.n	8106398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106390:	69ba      	ldr	r2, [r7, #24]
 8106392:	693b      	ldr	r3, [r7, #16]
 8106394:	4313      	orrs	r3, r2
 8106396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810639c:	69bb      	ldr	r3, [r7, #24]
 810639e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81063a0:	697b      	ldr	r3, [r7, #20]
 81063a2:	685b      	ldr	r3, [r3, #4]
 81063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81063a6:	693b      	ldr	r3, [r7, #16]
 81063a8:	43db      	mvns	r3, r3
 81063aa:	69ba      	ldr	r2, [r7, #24]
 81063ac:	4013      	ands	r3, r2
 81063ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81063b0:	683b      	ldr	r3, [r7, #0]
 81063b2:	685b      	ldr	r3, [r3, #4]
 81063b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	d003      	beq.n	81063c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81063bc:	69ba      	ldr	r2, [r7, #24]
 81063be:	693b      	ldr	r3, [r7, #16]
 81063c0:	4313      	orrs	r3, r2
 81063c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81063c4:	697b      	ldr	r3, [r7, #20]
 81063c6:	69ba      	ldr	r2, [r7, #24]
 81063c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81063ca:	697b      	ldr	r3, [r7, #20]
 81063cc:	681b      	ldr	r3, [r3, #0]
 81063ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81063d0:	693b      	ldr	r3, [r7, #16]
 81063d2:	43db      	mvns	r3, r3
 81063d4:	69ba      	ldr	r2, [r7, #24]
 81063d6:	4013      	ands	r3, r2
 81063d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81063da:	683b      	ldr	r3, [r7, #0]
 81063dc:	685b      	ldr	r3, [r3, #4]
 81063de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81063e2:	2b00      	cmp	r3, #0
 81063e4:	d003      	beq.n	81063ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81063e6:	69ba      	ldr	r2, [r7, #24]
 81063e8:	693b      	ldr	r3, [r7, #16]
 81063ea:	4313      	orrs	r3, r2
 81063ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81063ee:	697b      	ldr	r3, [r7, #20]
 81063f0:	69ba      	ldr	r2, [r7, #24]
 81063f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81063f4:	69fb      	ldr	r3, [r7, #28]
 81063f6:	3301      	adds	r3, #1
 81063f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81063fa:	683b      	ldr	r3, [r7, #0]
 81063fc:	681a      	ldr	r2, [r3, #0]
 81063fe:	69fb      	ldr	r3, [r7, #28]
 8106400:	fa22 f303 	lsr.w	r3, r2, r3
 8106404:	2b00      	cmp	r3, #0
 8106406:	f47f ae63 	bne.w	81060d0 <HAL_GPIO_Init+0x14>
  }
}
 810640a:	bf00      	nop
 810640c:	bf00      	nop
 810640e:	3724      	adds	r7, #36	@ 0x24
 8106410:	46bd      	mov	sp, r7
 8106412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106416:	4770      	bx	lr
 8106418:	58000400 	.word	0x58000400

0810641c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810641c:	b480      	push	{r7}
 810641e:	b085      	sub	sp, #20
 8106420:	af00      	add	r7, sp, #0
 8106422:	6078      	str	r0, [r7, #4]
 8106424:	460b      	mov	r3, r1
 8106426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	691a      	ldr	r2, [r3, #16]
 810642c:	887b      	ldrh	r3, [r7, #2]
 810642e:	4013      	ands	r3, r2
 8106430:	2b00      	cmp	r3, #0
 8106432:	d002      	beq.n	810643a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8106434:	2301      	movs	r3, #1
 8106436:	73fb      	strb	r3, [r7, #15]
 8106438:	e001      	b.n	810643e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 810643a:	2300      	movs	r3, #0
 810643c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 810643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8106440:	4618      	mov	r0, r3
 8106442:	3714      	adds	r7, #20
 8106444:	46bd      	mov	sp, r7
 8106446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810644a:	4770      	bx	lr

0810644c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810644c:	b480      	push	{r7}
 810644e:	b083      	sub	sp, #12
 8106450:	af00      	add	r7, sp, #0
 8106452:	6078      	str	r0, [r7, #4]
 8106454:	460b      	mov	r3, r1
 8106456:	807b      	strh	r3, [r7, #2]
 8106458:	4613      	mov	r3, r2
 810645a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810645c:	787b      	ldrb	r3, [r7, #1]
 810645e:	2b00      	cmp	r3, #0
 8106460:	d003      	beq.n	810646a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106462:	887a      	ldrh	r2, [r7, #2]
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106468:	e003      	b.n	8106472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810646a:	887b      	ldrh	r3, [r7, #2]
 810646c:	041a      	lsls	r2, r3, #16
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	619a      	str	r2, [r3, #24]
}
 8106472:	bf00      	nop
 8106474:	370c      	adds	r7, #12
 8106476:	46bd      	mov	sp, r7
 8106478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810647c:	4770      	bx	lr
	...

08106480 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106480:	b480      	push	{r7}
 8106482:	b083      	sub	sp, #12
 8106484:	af00      	add	r7, sp, #0
 8106486:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8106488:	4a08      	ldr	r2, [pc, #32]	@ (81064ac <HAL_HSEM_FastTake+0x2c>)
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	3320      	adds	r3, #32
 810648e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106492:	4a07      	ldr	r2, [pc, #28]	@ (81064b0 <HAL_HSEM_FastTake+0x30>)
 8106494:	4293      	cmp	r3, r2
 8106496:	d101      	bne.n	810649c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8106498:	2300      	movs	r3, #0
 810649a:	e000      	b.n	810649e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 810649c:	2301      	movs	r3, #1
}
 810649e:	4618      	mov	r0, r3
 81064a0:	370c      	adds	r7, #12
 81064a2:	46bd      	mov	sp, r7
 81064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064a8:	4770      	bx	lr
 81064aa:	bf00      	nop
 81064ac:	58026400 	.word	0x58026400
 81064b0:	80000100 	.word	0x80000100

081064b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81064b4:	b480      	push	{r7}
 81064b6:	b083      	sub	sp, #12
 81064b8:	af00      	add	r7, sp, #0
 81064ba:	6078      	str	r0, [r7, #4]
 81064bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81064be:	4906      	ldr	r1, [pc, #24]	@ (81064d8 <HAL_HSEM_Release+0x24>)
 81064c0:	683b      	ldr	r3, [r7, #0]
 81064c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81064cc:	bf00      	nop
 81064ce:	370c      	adds	r7, #12
 81064d0:	46bd      	mov	sp, r7
 81064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064d6:	4770      	bx	lr
 81064d8:	58026400 	.word	0x58026400

081064dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81064dc:	b480      	push	{r7}
 81064de:	b083      	sub	sp, #12
 81064e0:	af00      	add	r7, sp, #0
 81064e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81064e4:	4b05      	ldr	r3, [pc, #20]	@ (81064fc <HAL_HSEM_ActivateNotification+0x20>)
 81064e6:	681a      	ldr	r2, [r3, #0]
 81064e8:	4904      	ldr	r1, [pc, #16]	@ (81064fc <HAL_HSEM_ActivateNotification+0x20>)
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	4313      	orrs	r3, r2
 81064ee:	600b      	str	r3, [r1, #0]
#endif
}
 81064f0:	bf00      	nop
 81064f2:	370c      	adds	r7, #12
 81064f4:	46bd      	mov	sp, r7
 81064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064fa:	4770      	bx	lr
 81064fc:	58026510 	.word	0x58026510

08106500 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
 8106500:	b480      	push	{r7}
 8106502:	b083      	sub	sp, #12
 8106504:	af00      	add	r7, sp, #0
 8106506:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
 8106508:	4b06      	ldr	r3, [pc, #24]	@ (8106524 <HAL_HSEM_DeactivateNotification+0x24>)
 810650a:	681a      	ldr	r2, [r3, #0]
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	43db      	mvns	r3, r3
 8106510:	4904      	ldr	r1, [pc, #16]	@ (8106524 <HAL_HSEM_DeactivateNotification+0x24>)
 8106512:	4013      	ands	r3, r2
 8106514:	600b      	str	r3, [r1, #0]
#endif
}
 8106516:	bf00      	nop
 8106518:	370c      	adds	r7, #12
 810651a:	46bd      	mov	sp, r7
 810651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106520:	4770      	bx	lr
 8106522:	bf00      	nop
 8106524:	58026510 	.word	0x58026510

08106528 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8106528:	b580      	push	{r7, lr}
 810652a:	b082      	sub	sp, #8
 810652c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810652e:	4b0a      	ldr	r3, [pc, #40]	@ (8106558 <HAL_HSEM_IRQHandler+0x30>)
 8106530:	68db      	ldr	r3, [r3, #12]
 8106532:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8106534:	4b08      	ldr	r3, [pc, #32]	@ (8106558 <HAL_HSEM_IRQHandler+0x30>)
 8106536:	681a      	ldr	r2, [r3, #0]
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	43db      	mvns	r3, r3
 810653c:	4906      	ldr	r1, [pc, #24]	@ (8106558 <HAL_HSEM_IRQHandler+0x30>)
 810653e:	4013      	ands	r3, r2
 8106540:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8106542:	4a05      	ldr	r2, [pc, #20]	@ (8106558 <HAL_HSEM_IRQHandler+0x30>)
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8106548:	6878      	ldr	r0, [r7, #4]
 810654a:	f000 f807 	bl	810655c <HAL_HSEM_FreeCallback>
}
 810654e:	bf00      	nop
 8106550:	3708      	adds	r7, #8
 8106552:	46bd      	mov	sp, r7
 8106554:	bd80      	pop	{r7, pc}
 8106556:	bf00      	nop
 8106558:	58026510 	.word	0x58026510

0810655c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810655c:	b480      	push	{r7}
 810655e:	b083      	sub	sp, #12
 8106560:	af00      	add	r7, sp, #0
 8106562:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8106564:	bf00      	nop
 8106566:	370c      	adds	r7, #12
 8106568:	46bd      	mov	sp, r7
 810656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810656e:	4770      	bx	lr

08106570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106570:	b580      	push	{r7, lr}
 8106572:	b082      	sub	sp, #8
 8106574:	af00      	add	r7, sp, #0
 8106576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2b00      	cmp	r3, #0
 810657c:	d101      	bne.n	8106582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810657e:	2301      	movs	r3, #1
 8106580:	e08d      	b.n	810669e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106588:	b2db      	uxtb	r3, r3
 810658a:	2b00      	cmp	r3, #0
 810658c:	d106      	bne.n	810659c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	2200      	movs	r2, #0
 8106592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106596:	6878      	ldr	r0, [r7, #4]
 8106598:	f7fc fc9e 	bl	8102ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	2224      	movs	r2, #36	@ 0x24
 81065a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	681b      	ldr	r3, [r3, #0]
 81065a8:	681a      	ldr	r2, [r3, #0]
 81065aa:	687b      	ldr	r3, [r7, #4]
 81065ac:	681b      	ldr	r3, [r3, #0]
 81065ae:	f022 0201 	bic.w	r2, r2, #1
 81065b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	685a      	ldr	r2, [r3, #4]
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	681b      	ldr	r3, [r3, #0]
 81065bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 81065c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	689a      	ldr	r2, [r3, #8]
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	681b      	ldr	r3, [r3, #0]
 81065cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81065d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	68db      	ldr	r3, [r3, #12]
 81065d6:	2b01      	cmp	r3, #1
 81065d8:	d107      	bne.n	81065ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	689a      	ldr	r2, [r3, #8]
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	681b      	ldr	r3, [r3, #0]
 81065e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81065e6:	609a      	str	r2, [r3, #8]
 81065e8:	e006      	b.n	81065f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	689a      	ldr	r2, [r3, #8]
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 81065f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	68db      	ldr	r3, [r3, #12]
 81065fc:	2b02      	cmp	r3, #2
 81065fe:	d108      	bne.n	8106612 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	685a      	ldr	r2, [r3, #4]
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810660e:	605a      	str	r2, [r3, #4]
 8106610:	e007      	b.n	8106622 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	685a      	ldr	r2, [r3, #4]
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	681b      	ldr	r3, [r3, #0]
 810661c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8106620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	681b      	ldr	r3, [r3, #0]
 8106626:	685b      	ldr	r3, [r3, #4]
 8106628:	687a      	ldr	r2, [r7, #4]
 810662a:	6812      	ldr	r2, [r2, #0]
 810662c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8106630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8106634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	681b      	ldr	r3, [r3, #0]
 810663a:	68da      	ldr	r2, [r3, #12]
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	691a      	ldr	r2, [r3, #16]
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	695b      	ldr	r3, [r3, #20]
 810664e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	699b      	ldr	r3, [r3, #24]
 8106656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	681b      	ldr	r3, [r3, #0]
 810665c:	430a      	orrs	r2, r1
 810665e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	69d9      	ldr	r1, [r3, #28]
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	6a1a      	ldr	r2, [r3, #32]
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	681b      	ldr	r3, [r3, #0]
 810666c:	430a      	orrs	r2, r1
 810666e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	681b      	ldr	r3, [r3, #0]
 8106674:	681a      	ldr	r2, [r3, #0]
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	f042 0201 	orr.w	r2, r2, #1
 810667e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	2200      	movs	r2, #0
 8106684:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	2220      	movs	r2, #32
 810668a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	2200      	movs	r2, #0
 8106692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	2200      	movs	r2, #0
 8106698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810669c:	2300      	movs	r3, #0
}
 810669e:	4618      	mov	r0, r3
 81066a0:	3708      	adds	r7, #8
 81066a2:	46bd      	mov	sp, r7
 81066a4:	bd80      	pop	{r7, pc}
	...

081066a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81066a8:	b580      	push	{r7, lr}
 81066aa:	b088      	sub	sp, #32
 81066ac:	af02      	add	r7, sp, #8
 81066ae:	60f8      	str	r0, [r7, #12]
 81066b0:	4608      	mov	r0, r1
 81066b2:	4611      	mov	r1, r2
 81066b4:	461a      	mov	r2, r3
 81066b6:	4603      	mov	r3, r0
 81066b8:	817b      	strh	r3, [r7, #10]
 81066ba:	460b      	mov	r3, r1
 81066bc:	813b      	strh	r3, [r7, #8]
 81066be:	4613      	mov	r3, r2
 81066c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81066c2:	68fb      	ldr	r3, [r7, #12]
 81066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81066c8:	b2db      	uxtb	r3, r3
 81066ca:	2b20      	cmp	r3, #32
 81066cc:	f040 80f9 	bne.w	81068c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81066d0:	6a3b      	ldr	r3, [r7, #32]
 81066d2:	2b00      	cmp	r3, #0
 81066d4:	d002      	beq.n	81066dc <HAL_I2C_Mem_Write+0x34>
 81066d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81066d8:	2b00      	cmp	r3, #0
 81066da:	d105      	bne.n	81066e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81066dc:	68fb      	ldr	r3, [r7, #12]
 81066de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81066e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 81066e4:	2301      	movs	r3, #1
 81066e6:	e0ed      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81066e8:	68fb      	ldr	r3, [r7, #12]
 81066ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81066ee:	2b01      	cmp	r3, #1
 81066f0:	d101      	bne.n	81066f6 <HAL_I2C_Mem_Write+0x4e>
 81066f2:	2302      	movs	r3, #2
 81066f4:	e0e6      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
 81066f6:	68fb      	ldr	r3, [r7, #12]
 81066f8:	2201      	movs	r2, #1
 81066fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81066fe:	f7fd f853 	bl	81037a8 <HAL_GetTick>
 8106702:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106704:	697b      	ldr	r3, [r7, #20]
 8106706:	9300      	str	r3, [sp, #0]
 8106708:	2319      	movs	r3, #25
 810670a:	2201      	movs	r2, #1
 810670c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8106710:	68f8      	ldr	r0, [r7, #12]
 8106712:	f002 f8a9 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 8106716:	4603      	mov	r3, r0
 8106718:	2b00      	cmp	r3, #0
 810671a:	d001      	beq.n	8106720 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 810671c:	2301      	movs	r3, #1
 810671e:	e0d1      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8106720:	68fb      	ldr	r3, [r7, #12]
 8106722:	2221      	movs	r2, #33	@ 0x21
 8106724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106728:	68fb      	ldr	r3, [r7, #12]
 810672a:	2240      	movs	r2, #64	@ 0x40
 810672c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106730:	68fb      	ldr	r3, [r7, #12]
 8106732:	2200      	movs	r2, #0
 8106734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106736:	68fb      	ldr	r3, [r7, #12]
 8106738:	6a3a      	ldr	r2, [r7, #32]
 810673a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810673c:	68fb      	ldr	r3, [r7, #12]
 810673e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8106740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8106742:	68fb      	ldr	r3, [r7, #12]
 8106744:	2200      	movs	r2, #0
 8106746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106748:	88f8      	ldrh	r0, [r7, #6]
 810674a:	893a      	ldrh	r2, [r7, #8]
 810674c:	8979      	ldrh	r1, [r7, #10]
 810674e:	697b      	ldr	r3, [r7, #20]
 8106750:	9301      	str	r3, [sp, #4]
 8106752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106754:	9300      	str	r3, [sp, #0]
 8106756:	4603      	mov	r3, r0
 8106758:	68f8      	ldr	r0, [r7, #12]
 810675a:	f001 f871 	bl	8107840 <I2C_RequestMemoryWrite>
 810675e:	4603      	mov	r3, r0
 8106760:	2b00      	cmp	r3, #0
 8106762:	d005      	beq.n	8106770 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106764:	68fb      	ldr	r3, [r7, #12]
 8106766:	2200      	movs	r2, #0
 8106768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 810676c:	2301      	movs	r3, #1
 810676e:	e0a9      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106770:	68fb      	ldr	r3, [r7, #12]
 8106772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106774:	b29b      	uxth	r3, r3
 8106776:	2bff      	cmp	r3, #255	@ 0xff
 8106778:	d90e      	bls.n	8106798 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810677a:	68fb      	ldr	r3, [r7, #12]
 810677c:	22ff      	movs	r2, #255	@ 0xff
 810677e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106780:	68fb      	ldr	r3, [r7, #12]
 8106782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106784:	b2da      	uxtb	r2, r3
 8106786:	8979      	ldrh	r1, [r7, #10]
 8106788:	2300      	movs	r3, #0
 810678a:	9300      	str	r3, [sp, #0]
 810678c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8106790:	68f8      	ldr	r0, [r7, #12]
 8106792:	f002 fa2d 	bl	8108bf0 <I2C_TransferConfig>
 8106796:	e00f      	b.n	81067b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106798:	68fb      	ldr	r3, [r7, #12]
 810679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810679c:	b29a      	uxth	r2, r3
 810679e:	68fb      	ldr	r3, [r7, #12]
 81067a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81067a2:	68fb      	ldr	r3, [r7, #12]
 81067a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81067a6:	b2da      	uxtb	r2, r3
 81067a8:	8979      	ldrh	r1, [r7, #10]
 81067aa:	2300      	movs	r3, #0
 81067ac:	9300      	str	r3, [sp, #0]
 81067ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81067b2:	68f8      	ldr	r0, [r7, #12]
 81067b4:	f002 fa1c 	bl	8108bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81067b8:	697a      	ldr	r2, [r7, #20]
 81067ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81067bc:	68f8      	ldr	r0, [r7, #12]
 81067be:	f002 f8ac 	bl	810891a <I2C_WaitOnTXISFlagUntilTimeout>
 81067c2:	4603      	mov	r3, r0
 81067c4:	2b00      	cmp	r3, #0
 81067c6:	d001      	beq.n	81067cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81067c8:	2301      	movs	r3, #1
 81067ca:	e07b      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81067cc:	68fb      	ldr	r3, [r7, #12]
 81067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81067d0:	781a      	ldrb	r2, [r3, #0]
 81067d2:	68fb      	ldr	r3, [r7, #12]
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81067d8:	68fb      	ldr	r3, [r7, #12]
 81067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81067dc:	1c5a      	adds	r2, r3, #1
 81067de:	68fb      	ldr	r3, [r7, #12]
 81067e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81067e2:	68fb      	ldr	r3, [r7, #12]
 81067e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81067e6:	b29b      	uxth	r3, r3
 81067e8:	3b01      	subs	r3, #1
 81067ea:	b29a      	uxth	r2, r3
 81067ec:	68fb      	ldr	r3, [r7, #12]
 81067ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81067f0:	68fb      	ldr	r3, [r7, #12]
 81067f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81067f4:	3b01      	subs	r3, #1
 81067f6:	b29a      	uxth	r2, r3
 81067f8:	68fb      	ldr	r3, [r7, #12]
 81067fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81067fc:	68fb      	ldr	r3, [r7, #12]
 81067fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106800:	b29b      	uxth	r3, r3
 8106802:	2b00      	cmp	r3, #0
 8106804:	d034      	beq.n	8106870 <HAL_I2C_Mem_Write+0x1c8>
 8106806:	68fb      	ldr	r3, [r7, #12]
 8106808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810680a:	2b00      	cmp	r3, #0
 810680c:	d130      	bne.n	8106870 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810680e:	697b      	ldr	r3, [r7, #20]
 8106810:	9300      	str	r3, [sp, #0]
 8106812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106814:	2200      	movs	r2, #0
 8106816:	2180      	movs	r1, #128	@ 0x80
 8106818:	68f8      	ldr	r0, [r7, #12]
 810681a:	f002 f825 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 810681e:	4603      	mov	r3, r0
 8106820:	2b00      	cmp	r3, #0
 8106822:	d001      	beq.n	8106828 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8106824:	2301      	movs	r3, #1
 8106826:	e04d      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106828:	68fb      	ldr	r3, [r7, #12]
 810682a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810682c:	b29b      	uxth	r3, r3
 810682e:	2bff      	cmp	r3, #255	@ 0xff
 8106830:	d90e      	bls.n	8106850 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106832:	68fb      	ldr	r3, [r7, #12]
 8106834:	22ff      	movs	r2, #255	@ 0xff
 8106836:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8106838:	68fb      	ldr	r3, [r7, #12]
 810683a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810683c:	b2da      	uxtb	r2, r3
 810683e:	8979      	ldrh	r1, [r7, #10]
 8106840:	2300      	movs	r3, #0
 8106842:	9300      	str	r3, [sp, #0]
 8106844:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8106848:	68f8      	ldr	r0, [r7, #12]
 810684a:	f002 f9d1 	bl	8108bf0 <I2C_TransferConfig>
 810684e:	e00f      	b.n	8106870 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106850:	68fb      	ldr	r3, [r7, #12]
 8106852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106854:	b29a      	uxth	r2, r3
 8106856:	68fb      	ldr	r3, [r7, #12]
 8106858:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810685a:	68fb      	ldr	r3, [r7, #12]
 810685c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810685e:	b2da      	uxtb	r2, r3
 8106860:	8979      	ldrh	r1, [r7, #10]
 8106862:	2300      	movs	r3, #0
 8106864:	9300      	str	r3, [sp, #0]
 8106866:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810686a:	68f8      	ldr	r0, [r7, #12]
 810686c:	f002 f9c0 	bl	8108bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8106870:	68fb      	ldr	r3, [r7, #12]
 8106872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106874:	b29b      	uxth	r3, r3
 8106876:	2b00      	cmp	r3, #0
 8106878:	d19e      	bne.n	81067b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810687a:	697a      	ldr	r2, [r7, #20]
 810687c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810687e:	68f8      	ldr	r0, [r7, #12]
 8106880:	f002 f892 	bl	81089a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8106884:	4603      	mov	r3, r0
 8106886:	2b00      	cmp	r3, #0
 8106888:	d001      	beq.n	810688e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810688a:	2301      	movs	r3, #1
 810688c:	e01a      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810688e:	68fb      	ldr	r3, [r7, #12]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	2220      	movs	r2, #32
 8106894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106896:	68fb      	ldr	r3, [r7, #12]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	6859      	ldr	r1, [r3, #4]
 810689c:	68fb      	ldr	r3, [r7, #12]
 810689e:	681a      	ldr	r2, [r3, #0]
 81068a0:	4b0a      	ldr	r3, [pc, #40]	@ (81068cc <HAL_I2C_Mem_Write+0x224>)
 81068a2:	400b      	ands	r3, r1
 81068a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81068a6:	68fb      	ldr	r3, [r7, #12]
 81068a8:	2220      	movs	r2, #32
 81068aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81068ae:	68fb      	ldr	r3, [r7, #12]
 81068b0:	2200      	movs	r2, #0
 81068b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81068b6:	68fb      	ldr	r3, [r7, #12]
 81068b8:	2200      	movs	r2, #0
 81068ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81068be:	2300      	movs	r3, #0
 81068c0:	e000      	b.n	81068c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81068c2:	2302      	movs	r3, #2
  }
}
 81068c4:	4618      	mov	r0, r3
 81068c6:	3718      	adds	r7, #24
 81068c8:	46bd      	mov	sp, r7
 81068ca:	bd80      	pop	{r7, pc}
 81068cc:	fe00e800 	.word	0xfe00e800

081068d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81068d0:	b580      	push	{r7, lr}
 81068d2:	b088      	sub	sp, #32
 81068d4:	af02      	add	r7, sp, #8
 81068d6:	60f8      	str	r0, [r7, #12]
 81068d8:	4608      	mov	r0, r1
 81068da:	4611      	mov	r1, r2
 81068dc:	461a      	mov	r2, r3
 81068de:	4603      	mov	r3, r0
 81068e0:	817b      	strh	r3, [r7, #10]
 81068e2:	460b      	mov	r3, r1
 81068e4:	813b      	strh	r3, [r7, #8]
 81068e6:	4613      	mov	r3, r2
 81068e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81068ea:	68fb      	ldr	r3, [r7, #12]
 81068ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81068f0:	b2db      	uxtb	r3, r3
 81068f2:	2b20      	cmp	r3, #32
 81068f4:	f040 80fd 	bne.w	8106af2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81068f8:	6a3b      	ldr	r3, [r7, #32]
 81068fa:	2b00      	cmp	r3, #0
 81068fc:	d002      	beq.n	8106904 <HAL_I2C_Mem_Read+0x34>
 81068fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8106900:	2b00      	cmp	r3, #0
 8106902:	d105      	bne.n	8106910 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106904:	68fb      	ldr	r3, [r7, #12]
 8106906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810690a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 810690c:	2301      	movs	r3, #1
 810690e:	e0f1      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106910:	68fb      	ldr	r3, [r7, #12]
 8106912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106916:	2b01      	cmp	r3, #1
 8106918:	d101      	bne.n	810691e <HAL_I2C_Mem_Read+0x4e>
 810691a:	2302      	movs	r3, #2
 810691c:	e0ea      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
 810691e:	68fb      	ldr	r3, [r7, #12]
 8106920:	2201      	movs	r2, #1
 8106922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106926:	f7fc ff3f 	bl	81037a8 <HAL_GetTick>
 810692a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810692c:	697b      	ldr	r3, [r7, #20]
 810692e:	9300      	str	r3, [sp, #0]
 8106930:	2319      	movs	r3, #25
 8106932:	2201      	movs	r2, #1
 8106934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8106938:	68f8      	ldr	r0, [r7, #12]
 810693a:	f001 ff95 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 810693e:	4603      	mov	r3, r0
 8106940:	2b00      	cmp	r3, #0
 8106942:	d001      	beq.n	8106948 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8106944:	2301      	movs	r3, #1
 8106946:	e0d5      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8106948:	68fb      	ldr	r3, [r7, #12]
 810694a:	2222      	movs	r2, #34	@ 0x22
 810694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106950:	68fb      	ldr	r3, [r7, #12]
 8106952:	2240      	movs	r2, #64	@ 0x40
 8106954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106958:	68fb      	ldr	r3, [r7, #12]
 810695a:	2200      	movs	r2, #0
 810695c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810695e:	68fb      	ldr	r3, [r7, #12]
 8106960:	6a3a      	ldr	r2, [r7, #32]
 8106962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8106964:	68fb      	ldr	r3, [r7, #12]
 8106966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8106968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810696a:	68fb      	ldr	r3, [r7, #12]
 810696c:	2200      	movs	r2, #0
 810696e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106970:	88f8      	ldrh	r0, [r7, #6]
 8106972:	893a      	ldrh	r2, [r7, #8]
 8106974:	8979      	ldrh	r1, [r7, #10]
 8106976:	697b      	ldr	r3, [r7, #20]
 8106978:	9301      	str	r3, [sp, #4]
 810697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810697c:	9300      	str	r3, [sp, #0]
 810697e:	4603      	mov	r3, r0
 8106980:	68f8      	ldr	r0, [r7, #12]
 8106982:	f000 ffb1 	bl	81078e8 <I2C_RequestMemoryRead>
 8106986:	4603      	mov	r3, r0
 8106988:	2b00      	cmp	r3, #0
 810698a:	d005      	beq.n	8106998 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810698c:	68fb      	ldr	r3, [r7, #12]
 810698e:	2200      	movs	r2, #0
 8106990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8106994:	2301      	movs	r3, #1
 8106996:	e0ad      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106998:	68fb      	ldr	r3, [r7, #12]
 810699a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810699c:	b29b      	uxth	r3, r3
 810699e:	2bff      	cmp	r3, #255	@ 0xff
 81069a0:	d90e      	bls.n	81069c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81069a2:	68fb      	ldr	r3, [r7, #12]
 81069a4:	22ff      	movs	r2, #255	@ 0xff
 81069a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81069a8:	68fb      	ldr	r3, [r7, #12]
 81069aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81069ac:	b2da      	uxtb	r2, r3
 81069ae:	8979      	ldrh	r1, [r7, #10]
 81069b0:	4b52      	ldr	r3, [pc, #328]	@ (8106afc <HAL_I2C_Mem_Read+0x22c>)
 81069b2:	9300      	str	r3, [sp, #0]
 81069b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81069b8:	68f8      	ldr	r0, [r7, #12]
 81069ba:	f002 f919 	bl	8108bf0 <I2C_TransferConfig>
 81069be:	e00f      	b.n	81069e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81069c0:	68fb      	ldr	r3, [r7, #12]
 81069c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81069c4:	b29a      	uxth	r2, r3
 81069c6:	68fb      	ldr	r3, [r7, #12]
 81069c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81069ca:	68fb      	ldr	r3, [r7, #12]
 81069cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81069ce:	b2da      	uxtb	r2, r3
 81069d0:	8979      	ldrh	r1, [r7, #10]
 81069d2:	4b4a      	ldr	r3, [pc, #296]	@ (8106afc <HAL_I2C_Mem_Read+0x22c>)
 81069d4:	9300      	str	r3, [sp, #0]
 81069d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81069da:	68f8      	ldr	r0, [r7, #12]
 81069dc:	f002 f908 	bl	8108bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81069e0:	697b      	ldr	r3, [r7, #20]
 81069e2:	9300      	str	r3, [sp, #0]
 81069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81069e6:	2200      	movs	r2, #0
 81069e8:	2104      	movs	r1, #4
 81069ea:	68f8      	ldr	r0, [r7, #12]
 81069ec:	f001 ff3c 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 81069f0:	4603      	mov	r3, r0
 81069f2:	2b00      	cmp	r3, #0
 81069f4:	d001      	beq.n	81069fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81069f6:	2301      	movs	r3, #1
 81069f8:	e07c      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81069fa:	68fb      	ldr	r3, [r7, #12]
 81069fc:	681b      	ldr	r3, [r3, #0]
 81069fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106a00:	68fb      	ldr	r3, [r7, #12]
 8106a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106a04:	b2d2      	uxtb	r2, r2
 8106a06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106a08:	68fb      	ldr	r3, [r7, #12]
 8106a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106a0c:	1c5a      	adds	r2, r3, #1
 8106a0e:	68fb      	ldr	r3, [r7, #12]
 8106a10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8106a12:	68fb      	ldr	r3, [r7, #12]
 8106a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106a16:	3b01      	subs	r3, #1
 8106a18:	b29a      	uxth	r2, r3
 8106a1a:	68fb      	ldr	r3, [r7, #12]
 8106a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8106a1e:	68fb      	ldr	r3, [r7, #12]
 8106a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106a22:	b29b      	uxth	r3, r3
 8106a24:	3b01      	subs	r3, #1
 8106a26:	b29a      	uxth	r2, r3
 8106a28:	68fb      	ldr	r3, [r7, #12]
 8106a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106a2c:	68fb      	ldr	r3, [r7, #12]
 8106a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106a30:	b29b      	uxth	r3, r3
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	d034      	beq.n	8106aa0 <HAL_I2C_Mem_Read+0x1d0>
 8106a36:	68fb      	ldr	r3, [r7, #12]
 8106a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106a3a:	2b00      	cmp	r3, #0
 8106a3c:	d130      	bne.n	8106aa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106a3e:	697b      	ldr	r3, [r7, #20]
 8106a40:	9300      	str	r3, [sp, #0]
 8106a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106a44:	2200      	movs	r2, #0
 8106a46:	2180      	movs	r1, #128	@ 0x80
 8106a48:	68f8      	ldr	r0, [r7, #12]
 8106a4a:	f001 ff0d 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 8106a4e:	4603      	mov	r3, r0
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	d001      	beq.n	8106a58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8106a54:	2301      	movs	r3, #1
 8106a56:	e04d      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106a58:	68fb      	ldr	r3, [r7, #12]
 8106a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106a5c:	b29b      	uxth	r3, r3
 8106a5e:	2bff      	cmp	r3, #255	@ 0xff
 8106a60:	d90e      	bls.n	8106a80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106a62:	68fb      	ldr	r3, [r7, #12]
 8106a64:	22ff      	movs	r2, #255	@ 0xff
 8106a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106a6c:	b2da      	uxtb	r2, r3
 8106a6e:	8979      	ldrh	r1, [r7, #10]
 8106a70:	2300      	movs	r3, #0
 8106a72:	9300      	str	r3, [sp, #0]
 8106a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8106a78:	68f8      	ldr	r0, [r7, #12]
 8106a7a:	f002 f8b9 	bl	8108bf0 <I2C_TransferConfig>
 8106a7e:	e00f      	b.n	8106aa0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106a80:	68fb      	ldr	r3, [r7, #12]
 8106a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106a84:	b29a      	uxth	r2, r3
 8106a86:	68fb      	ldr	r3, [r7, #12]
 8106a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8106a8a:	68fb      	ldr	r3, [r7, #12]
 8106a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106a8e:	b2da      	uxtb	r2, r3
 8106a90:	8979      	ldrh	r1, [r7, #10]
 8106a92:	2300      	movs	r3, #0
 8106a94:	9300      	str	r3, [sp, #0]
 8106a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8106a9a:	68f8      	ldr	r0, [r7, #12]
 8106a9c:	f002 f8a8 	bl	8108bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8106aa0:	68fb      	ldr	r3, [r7, #12]
 8106aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106aa4:	b29b      	uxth	r3, r3
 8106aa6:	2b00      	cmp	r3, #0
 8106aa8:	d19a      	bne.n	81069e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106aaa:	697a      	ldr	r2, [r7, #20]
 8106aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106aae:	68f8      	ldr	r0, [r7, #12]
 8106ab0:	f001 ff7a 	bl	81089a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8106ab4:	4603      	mov	r3, r0
 8106ab6:	2b00      	cmp	r3, #0
 8106ab8:	d001      	beq.n	8106abe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8106aba:	2301      	movs	r3, #1
 8106abc:	e01a      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106abe:	68fb      	ldr	r3, [r7, #12]
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	2220      	movs	r2, #32
 8106ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106ac6:	68fb      	ldr	r3, [r7, #12]
 8106ac8:	681b      	ldr	r3, [r3, #0]
 8106aca:	6859      	ldr	r1, [r3, #4]
 8106acc:	68fb      	ldr	r3, [r7, #12]
 8106ace:	681a      	ldr	r2, [r3, #0]
 8106ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8106b00 <HAL_I2C_Mem_Read+0x230>)
 8106ad2:	400b      	ands	r3, r1
 8106ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106ad6:	68fb      	ldr	r3, [r7, #12]
 8106ad8:	2220      	movs	r2, #32
 8106ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106ade:	68fb      	ldr	r3, [r7, #12]
 8106ae0:	2200      	movs	r2, #0
 8106ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106ae6:	68fb      	ldr	r3, [r7, #12]
 8106ae8:	2200      	movs	r2, #0
 8106aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8106aee:	2300      	movs	r3, #0
 8106af0:	e000      	b.n	8106af4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8106af2:	2302      	movs	r3, #2
  }
}
 8106af4:	4618      	mov	r0, r3
 8106af6:	3718      	adds	r7, #24
 8106af8:	46bd      	mov	sp, r7
 8106afa:	bd80      	pop	{r7, pc}
 8106afc:	80002400 	.word	0x80002400
 8106b00:	fe00e800 	.word	0xfe00e800

08106b04 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8106b04:	b580      	push	{r7, lr}
 8106b06:	b088      	sub	sp, #32
 8106b08:	af02      	add	r7, sp, #8
 8106b0a:	60f8      	str	r0, [r7, #12]
 8106b0c:	4608      	mov	r0, r1
 8106b0e:	4611      	mov	r1, r2
 8106b10:	461a      	mov	r2, r3
 8106b12:	4603      	mov	r3, r0
 8106b14:	817b      	strh	r3, [r7, #10]
 8106b16:	460b      	mov	r3, r1
 8106b18:	813b      	strh	r3, [r7, #8]
 8106b1a:	4613      	mov	r3, r2
 8106b1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106b1e:	68fb      	ldr	r3, [r7, #12]
 8106b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106b24:	b2db      	uxtb	r3, r3
 8106b26:	2b20      	cmp	r3, #32
 8106b28:	f040 80c2 	bne.w	8106cb0 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8106b2c:	6a3b      	ldr	r3, [r7, #32]
 8106b2e:	2b00      	cmp	r3, #0
 8106b30:	d002      	beq.n	8106b38 <HAL_I2C_Mem_Read_DMA+0x34>
 8106b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8106b34:	2b00      	cmp	r3, #0
 8106b36:	d105      	bne.n	8106b44 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106b38:	68fb      	ldr	r3, [r7, #12]
 8106b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106b3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8106b40:	2301      	movs	r3, #1
 8106b42:	e0b6      	b.n	8106cb2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8106b44:	68fb      	ldr	r3, [r7, #12]
 8106b46:	681b      	ldr	r3, [r3, #0]
 8106b48:	699b      	ldr	r3, [r3, #24]
 8106b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106b52:	d101      	bne.n	8106b58 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8106b54:	2302      	movs	r3, #2
 8106b56:	e0ac      	b.n	8106cb2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106b58:	68fb      	ldr	r3, [r7, #12]
 8106b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106b5e:	2b01      	cmp	r3, #1
 8106b60:	d101      	bne.n	8106b66 <HAL_I2C_Mem_Read_DMA+0x62>
 8106b62:	2302      	movs	r3, #2
 8106b64:	e0a5      	b.n	8106cb2 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8106b66:	68fb      	ldr	r3, [r7, #12]
 8106b68:	2201      	movs	r2, #1
 8106b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8106b6e:	68fb      	ldr	r3, [r7, #12]
 8106b70:	2222      	movs	r2, #34	@ 0x22
 8106b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8106b76:	68fb      	ldr	r3, [r7, #12]
 8106b78:	2240      	movs	r2, #64	@ 0x40
 8106b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8106b7e:	68fb      	ldr	r3, [r7, #12]
 8106b80:	2200      	movs	r2, #0
 8106b82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8106b84:	68fb      	ldr	r3, [r7, #12]
 8106b86:	6a3a      	ldr	r2, [r7, #32]
 8106b88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8106b8a:	68fb      	ldr	r3, [r7, #12]
 8106b8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8106b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8106b90:	68fb      	ldr	r3, [r7, #12]
 8106b92:	4a4a      	ldr	r2, [pc, #296]	@ (8106cbc <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8106b94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8106b96:	68fb      	ldr	r3, [r7, #12]
 8106b98:	4a49      	ldr	r2, [pc, #292]	@ (8106cc0 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8106b9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8106b9c:	897a      	ldrh	r2, [r7, #10]
 8106b9e:	68fb      	ldr	r3, [r7, #12]
 8106ba0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106ba2:	68fb      	ldr	r3, [r7, #12]
 8106ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106ba6:	b29b      	uxth	r3, r3
 8106ba8:	2bff      	cmp	r3, #255	@ 0xff
 8106baa:	d903      	bls.n	8106bb4 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106bac:	68fb      	ldr	r3, [r7, #12]
 8106bae:	22ff      	movs	r2, #255	@ 0xff
 8106bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8106bb2:	e004      	b.n	8106bbe <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106bb4:	68fb      	ldr	r3, [r7, #12]
 8106bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106bb8:	b29a      	uxth	r2, r3
 8106bba:	68fb      	ldr	r3, [r7, #12]
 8106bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8106bbe:	88fb      	ldrh	r3, [r7, #6]
 8106bc0:	2b01      	cmp	r3, #1
 8106bc2:	d109      	bne.n	8106bd8 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8106bc4:	893b      	ldrh	r3, [r7, #8]
 8106bc6:	b2da      	uxtb	r2, r3
 8106bc8:	68fb      	ldr	r3, [r7, #12]
 8106bca:	681b      	ldr	r3, [r3, #0]
 8106bcc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8106bce:	68fb      	ldr	r3, [r7, #12]
 8106bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8106bd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8106bd6:	e00b      	b.n	8106bf0 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8106bd8:	893b      	ldrh	r3, [r7, #8]
 8106bda:	0a1b      	lsrs	r3, r3, #8
 8106bdc:	b29b      	uxth	r3, r3
 8106bde:	b2da      	uxtb	r2, r3
 8106be0:	68fb      	ldr	r3, [r7, #12]
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8106be6:	893b      	ldrh	r3, [r7, #8]
 8106be8:	b2db      	uxtb	r3, r3
 8106bea:	461a      	mov	r2, r3
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8106bf0:	68fb      	ldr	r3, [r7, #12]
 8106bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106bf4:	2b00      	cmp	r3, #0
 8106bf6:	d020      	beq.n	8106c3a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8106bf8:	68fb      	ldr	r3, [r7, #12]
 8106bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106bfc:	4a31      	ldr	r2, [pc, #196]	@ (8106cc4 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8106bfe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8106c00:	68fb      	ldr	r3, [r7, #12]
 8106c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106c04:	4a30      	ldr	r2, [pc, #192]	@ (8106cc8 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8106c06:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8106c08:	68fb      	ldr	r3, [r7, #12]
 8106c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106c0c:	2200      	movs	r2, #0
 8106c0e:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8106c10:	68fb      	ldr	r3, [r7, #12]
 8106c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106c14:	2200      	movs	r2, #0
 8106c16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8106c18:	68fb      	ldr	r3, [r7, #12]
 8106c1a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8106c1c:	68fb      	ldr	r3, [r7, #12]
 8106c1e:	681b      	ldr	r3, [r3, #0]
 8106c20:	3324      	adds	r3, #36	@ 0x24
 8106c22:	4619      	mov	r1, r3
 8106c24:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8106c26:	68fb      	ldr	r3, [r7, #12]
 8106c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8106c2a:	f7fd fa6b 	bl	8104104 <HAL_DMA_Start_IT>
 8106c2e:	4603      	mov	r3, r0
 8106c30:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8106c32:	7dfb      	ldrb	r3, [r7, #23]
 8106c34:	2b00      	cmp	r3, #0
 8106c36:	d127      	bne.n	8106c88 <HAL_I2C_Mem_Read_DMA+0x184>
 8106c38:	e013      	b.n	8106c62 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106c3a:	68fb      	ldr	r3, [r7, #12]
 8106c3c:	2220      	movs	r2, #32
 8106c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106c42:	68fb      	ldr	r3, [r7, #12]
 8106c44:	2200      	movs	r2, #0
 8106c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8106c4a:	68fb      	ldr	r3, [r7, #12]
 8106c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106c4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8106c56:	68fb      	ldr	r3, [r7, #12]
 8106c58:	2200      	movs	r2, #0
 8106c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8106c5e:	2301      	movs	r3, #1
 8106c60:	e027      	b.n	8106cb2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8106c62:	88fb      	ldrh	r3, [r7, #6]
 8106c64:	b2da      	uxtb	r2, r3
 8106c66:	8979      	ldrh	r1, [r7, #10]
 8106c68:	4b18      	ldr	r3, [pc, #96]	@ (8106ccc <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8106c6a:	9300      	str	r3, [sp, #0]
 8106c6c:	2300      	movs	r3, #0
 8106c6e:	68f8      	ldr	r0, [r7, #12]
 8106c70:	f001 ffbe 	bl	8108bf0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106c74:	68fb      	ldr	r3, [r7, #12]
 8106c76:	2200      	movs	r2, #0
 8106c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8106c7c:	2101      	movs	r1, #1
 8106c7e:	68f8      	ldr	r0, [r7, #12]
 8106c80:	f001 ffe8 	bl	8108c54 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8106c84:	2300      	movs	r3, #0
 8106c86:	e014      	b.n	8106cb2 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	2220      	movs	r2, #32
 8106c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106c90:	68fb      	ldr	r3, [r7, #12]
 8106c92:	2200      	movs	r2, #0
 8106c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8106c98:	68fb      	ldr	r3, [r7, #12]
 8106c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106c9c:	f043 0210 	orr.w	r2, r3, #16
 8106ca0:	68fb      	ldr	r3, [r7, #12]
 8106ca2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8106ca4:	68fb      	ldr	r3, [r7, #12]
 8106ca6:	2200      	movs	r2, #0
 8106ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8106cac:	2301      	movs	r3, #1
 8106cae:	e000      	b.n	8106cb2 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8106cb0:	2302      	movs	r3, #2
  }
}
 8106cb2:	4618      	mov	r0, r3
 8106cb4:	3718      	adds	r7, #24
 8106cb6:	46bd      	mov	sp, r7
 8106cb8:	bd80      	pop	{r7, pc}
 8106cba:	bf00      	nop
 8106cbc:	ffff0000 	.word	0xffff0000
 8106cc0:	08107241 	.word	0x08107241
 8106cc4:	08108523 	.word	0x08108523
 8106cc8:	081085b9 	.word	0x081085b9
 8106ccc:	80002000 	.word	0x80002000

08106cd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8106cd0:	b580      	push	{r7, lr}
 8106cd2:	b084      	sub	sp, #16
 8106cd4:	af00      	add	r7, sp, #0
 8106cd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	681b      	ldr	r3, [r3, #0]
 8106cdc:	699b      	ldr	r3, [r3, #24]
 8106cde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	681b      	ldr	r3, [r3, #0]
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106cec:	2b00      	cmp	r3, #0
 8106cee:	d005      	beq.n	8106cfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106cf4:	68ba      	ldr	r2, [r7, #8]
 8106cf6:	68f9      	ldr	r1, [r7, #12]
 8106cf8:	6878      	ldr	r0, [r7, #4]
 8106cfa:	4798      	blx	r3
  }
}
 8106cfc:	bf00      	nop
 8106cfe:	3710      	adds	r7, #16
 8106d00:	46bd      	mov	sp, r7
 8106d02:	bd80      	pop	{r7, pc}

08106d04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106d04:	b580      	push	{r7, lr}
 8106d06:	b086      	sub	sp, #24
 8106d08:	af00      	add	r7, sp, #0
 8106d0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	681b      	ldr	r3, [r3, #0]
 8106d10:	699b      	ldr	r3, [r3, #24]
 8106d12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	681b      	ldr	r3, [r3, #0]
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8106d1c:	697b      	ldr	r3, [r7, #20]
 8106d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106d22:	2b00      	cmp	r3, #0
 8106d24:	d00f      	beq.n	8106d46 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106d26:	693b      	ldr	r3, [r7, #16]
 8106d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8106d2c:	2b00      	cmp	r3, #0
 8106d2e:	d00a      	beq.n	8106d46 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106d34:	f043 0201 	orr.w	r2, r3, #1
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8106d44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8106d46:	697b      	ldr	r3, [r7, #20]
 8106d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106d4c:	2b00      	cmp	r3, #0
 8106d4e:	d00f      	beq.n	8106d70 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106d50:	693b      	ldr	r3, [r7, #16]
 8106d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8106d56:	2b00      	cmp	r3, #0
 8106d58:	d00a      	beq.n	8106d70 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106d5e:	f043 0208 	orr.w	r2, r3, #8
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	681b      	ldr	r3, [r3, #0]
 8106d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8106d6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8106d70:	697b      	ldr	r3, [r7, #20]
 8106d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8106d76:	2b00      	cmp	r3, #0
 8106d78:	d00f      	beq.n	8106d9a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106d7a:	693b      	ldr	r3, [r7, #16]
 8106d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8106d80:	2b00      	cmp	r3, #0
 8106d82:	d00a      	beq.n	8106d9a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106d88:	f043 0202 	orr.w	r2, r3, #2
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	681b      	ldr	r3, [r3, #0]
 8106d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106d98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106d9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8106da0:	68fb      	ldr	r3, [r7, #12]
 8106da2:	f003 030b 	and.w	r3, r3, #11
 8106da6:	2b00      	cmp	r3, #0
 8106da8:	d003      	beq.n	8106db2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8106daa:	68f9      	ldr	r1, [r7, #12]
 8106dac:	6878      	ldr	r0, [r7, #4]
 8106dae:	f001 fa7d 	bl	81082ac <I2C_ITError>
  }
}
 8106db2:	bf00      	nop
 8106db4:	3718      	adds	r7, #24
 8106db6:	46bd      	mov	sp, r7
 8106db8:	bd80      	pop	{r7, pc}

08106dba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106dba:	b480      	push	{r7}
 8106dbc:	b083      	sub	sp, #12
 8106dbe:	af00      	add	r7, sp, #0
 8106dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8106dc2:	bf00      	nop
 8106dc4:	370c      	adds	r7, #12
 8106dc6:	46bd      	mov	sp, r7
 8106dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dcc:	4770      	bx	lr

08106dce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106dce:	b480      	push	{r7}
 8106dd0:	b083      	sub	sp, #12
 8106dd2:	af00      	add	r7, sp, #0
 8106dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8106dd6:	bf00      	nop
 8106dd8:	370c      	adds	r7, #12
 8106dda:	46bd      	mov	sp, r7
 8106ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106de0:	4770      	bx	lr

08106de2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106de2:	b480      	push	{r7}
 8106de4:	b083      	sub	sp, #12
 8106de6:	af00      	add	r7, sp, #0
 8106de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8106dea:	bf00      	nop
 8106dec:	370c      	adds	r7, #12
 8106dee:	46bd      	mov	sp, r7
 8106df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106df4:	4770      	bx	lr

08106df6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106df6:	b480      	push	{r7}
 8106df8:	b083      	sub	sp, #12
 8106dfa:	af00      	add	r7, sp, #0
 8106dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8106dfe:	bf00      	nop
 8106e00:	370c      	adds	r7, #12
 8106e02:	46bd      	mov	sp, r7
 8106e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e08:	4770      	bx	lr

08106e0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8106e0a:	b480      	push	{r7}
 8106e0c:	b083      	sub	sp, #12
 8106e0e:	af00      	add	r7, sp, #0
 8106e10:	6078      	str	r0, [r7, #4]
 8106e12:	460b      	mov	r3, r1
 8106e14:	70fb      	strb	r3, [r7, #3]
 8106e16:	4613      	mov	r3, r2
 8106e18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8106e1a:	bf00      	nop
 8106e1c:	370c      	adds	r7, #12
 8106e1e:	46bd      	mov	sp, r7
 8106e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e24:	4770      	bx	lr

08106e26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106e26:	b480      	push	{r7}
 8106e28:	b083      	sub	sp, #12
 8106e2a:	af00      	add	r7, sp, #0
 8106e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8106e2e:	bf00      	nop
 8106e30:	370c      	adds	r7, #12
 8106e32:	46bd      	mov	sp, r7
 8106e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e38:	4770      	bx	lr

08106e3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106e3a:	b480      	push	{r7}
 8106e3c:	b083      	sub	sp, #12
 8106e3e:	af00      	add	r7, sp, #0
 8106e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8106e42:	bf00      	nop
 8106e44:	370c      	adds	r7, #12
 8106e46:	46bd      	mov	sp, r7
 8106e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e4c:	4770      	bx	lr

08106e4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8106e4e:	b480      	push	{r7}
 8106e50:	b083      	sub	sp, #12
 8106e52:	af00      	add	r7, sp, #0
 8106e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8106e56:	bf00      	nop
 8106e58:	370c      	adds	r7, #12
 8106e5a:	46bd      	mov	sp, r7
 8106e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e60:	4770      	bx	lr

08106e62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106e62:	b480      	push	{r7}
 8106e64:	b083      	sub	sp, #12
 8106e66:	af00      	add	r7, sp, #0
 8106e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8106e6a:	bf00      	nop
 8106e6c:	370c      	adds	r7, #12
 8106e6e:	46bd      	mov	sp, r7
 8106e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e74:	4770      	bx	lr

08106e76 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8106e76:	b580      	push	{r7, lr}
 8106e78:	b086      	sub	sp, #24
 8106e7a:	af00      	add	r7, sp, #0
 8106e7c:	60f8      	str	r0, [r7, #12]
 8106e7e:	60b9      	str	r1, [r7, #8]
 8106e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8106e82:	68fb      	ldr	r3, [r7, #12]
 8106e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8106e88:	68bb      	ldr	r3, [r7, #8]
 8106e8a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8106e8c:	68fb      	ldr	r3, [r7, #12]
 8106e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106e92:	2b01      	cmp	r3, #1
 8106e94:	d101      	bne.n	8106e9a <I2C_Slave_ISR_IT+0x24>
 8106e96:	2302      	movs	r3, #2
 8106e98:	e0e2      	b.n	8107060 <I2C_Slave_ISR_IT+0x1ea>
 8106e9a:	68fb      	ldr	r3, [r7, #12]
 8106e9c:	2201      	movs	r2, #1
 8106e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8106ea2:	693b      	ldr	r3, [r7, #16]
 8106ea4:	f003 0320 	and.w	r3, r3, #32
 8106ea8:	2b00      	cmp	r3, #0
 8106eaa:	d009      	beq.n	8106ec0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8106eb2:	2b00      	cmp	r3, #0
 8106eb4:	d004      	beq.n	8106ec0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8106eb6:	6939      	ldr	r1, [r7, #16]
 8106eb8:	68f8      	ldr	r0, [r7, #12]
 8106eba:	f000 ff4f 	bl	8107d5c <I2C_ITSlaveCplt>
 8106ebe:	e0ca      	b.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8106ec0:	693b      	ldr	r3, [r7, #16]
 8106ec2:	f003 0310 	and.w	r3, r3, #16
 8106ec6:	2b00      	cmp	r3, #0
 8106ec8:	d04b      	beq.n	8106f62 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8106ed0:	2b00      	cmp	r3, #0
 8106ed2:	d046      	beq.n	8106f62 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8106ed4:	68fb      	ldr	r3, [r7, #12]
 8106ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106ed8:	b29b      	uxth	r3, r3
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d128      	bne.n	8106f30 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106ee4:	b2db      	uxtb	r3, r3
 8106ee6:	2b28      	cmp	r3, #40	@ 0x28
 8106ee8:	d108      	bne.n	8106efc <I2C_Slave_ISR_IT+0x86>
 8106eea:	697b      	ldr	r3, [r7, #20]
 8106eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106ef0:	d104      	bne.n	8106efc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8106ef2:	6939      	ldr	r1, [r7, #16]
 8106ef4:	68f8      	ldr	r0, [r7, #12]
 8106ef6:	f001 f985 	bl	8108204 <I2C_ITListenCplt>
 8106efa:	e031      	b.n	8106f60 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106f02:	b2db      	uxtb	r3, r3
 8106f04:	2b29      	cmp	r3, #41	@ 0x29
 8106f06:	d10e      	bne.n	8106f26 <I2C_Slave_ISR_IT+0xb0>
 8106f08:	697b      	ldr	r3, [r7, #20]
 8106f0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8106f0e:	d00a      	beq.n	8106f26 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106f10:	68fb      	ldr	r3, [r7, #12]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	2210      	movs	r2, #16
 8106f16:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8106f18:	68f8      	ldr	r0, [r7, #12]
 8106f1a:	f001 fade 	bl	81084da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8106f1e:	68f8      	ldr	r0, [r7, #12]
 8106f20:	f000 fdf7 	bl	8107b12 <I2C_ITSlaveSeqCplt>
 8106f24:	e01c      	b.n	8106f60 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106f26:	68fb      	ldr	r3, [r7, #12]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	2210      	movs	r2, #16
 8106f2c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8106f2e:	e08f      	b.n	8107050 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106f30:	68fb      	ldr	r3, [r7, #12]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	2210      	movs	r2, #16
 8106f36:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8106f38:	68fb      	ldr	r3, [r7, #12]
 8106f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106f3c:	f043 0204 	orr.w	r2, r3, #4
 8106f40:	68fb      	ldr	r3, [r7, #12]
 8106f42:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8106f44:	697b      	ldr	r3, [r7, #20]
 8106f46:	2b00      	cmp	r3, #0
 8106f48:	d003      	beq.n	8106f52 <I2C_Slave_ISR_IT+0xdc>
 8106f4a:	697b      	ldr	r3, [r7, #20]
 8106f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106f50:	d17e      	bne.n	8107050 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8106f52:	68fb      	ldr	r3, [r7, #12]
 8106f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106f56:	4619      	mov	r1, r3
 8106f58:	68f8      	ldr	r0, [r7, #12]
 8106f5a:	f001 f9a7 	bl	81082ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8106f5e:	e077      	b.n	8107050 <I2C_Slave_ISR_IT+0x1da>
 8106f60:	e076      	b.n	8107050 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8106f62:	693b      	ldr	r3, [r7, #16]
 8106f64:	f003 0304 	and.w	r3, r3, #4
 8106f68:	2b00      	cmp	r3, #0
 8106f6a:	d02f      	beq.n	8106fcc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8106f72:	2b00      	cmp	r3, #0
 8106f74:	d02a      	beq.n	8106fcc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8106f76:	68fb      	ldr	r3, [r7, #12]
 8106f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106f7a:	b29b      	uxth	r3, r3
 8106f7c:	2b00      	cmp	r3, #0
 8106f7e:	d018      	beq.n	8106fb2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106f80:	68fb      	ldr	r3, [r7, #12]
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106f86:	68fb      	ldr	r3, [r7, #12]
 8106f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106f8a:	b2d2      	uxtb	r2, r2
 8106f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106f8e:	68fb      	ldr	r3, [r7, #12]
 8106f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106f92:	1c5a      	adds	r2, r3, #1
 8106f94:	68fb      	ldr	r3, [r7, #12]
 8106f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8106f98:	68fb      	ldr	r3, [r7, #12]
 8106f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8106f9c:	3b01      	subs	r3, #1
 8106f9e:	b29a      	uxth	r2, r3
 8106fa0:	68fb      	ldr	r3, [r7, #12]
 8106fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8106fa4:	68fb      	ldr	r3, [r7, #12]
 8106fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106fa8:	b29b      	uxth	r3, r3
 8106faa:	3b01      	subs	r3, #1
 8106fac:	b29a      	uxth	r2, r3
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8106fb2:	68fb      	ldr	r3, [r7, #12]
 8106fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106fb6:	b29b      	uxth	r3, r3
 8106fb8:	2b00      	cmp	r3, #0
 8106fba:	d14b      	bne.n	8107054 <I2C_Slave_ISR_IT+0x1de>
 8106fbc:	697b      	ldr	r3, [r7, #20]
 8106fbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8106fc2:	d047      	beq.n	8107054 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8106fc4:	68f8      	ldr	r0, [r7, #12]
 8106fc6:	f000 fda4 	bl	8107b12 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8106fca:	e043      	b.n	8107054 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8106fcc:	693b      	ldr	r3, [r7, #16]
 8106fce:	f003 0308 	and.w	r3, r3, #8
 8106fd2:	2b00      	cmp	r3, #0
 8106fd4:	d009      	beq.n	8106fea <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8106fdc:	2b00      	cmp	r3, #0
 8106fde:	d004      	beq.n	8106fea <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8106fe0:	6939      	ldr	r1, [r7, #16]
 8106fe2:	68f8      	ldr	r0, [r7, #12]
 8106fe4:	f000 fcd4 	bl	8107990 <I2C_ITAddrCplt>
 8106fe8:	e035      	b.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8106fea:	693b      	ldr	r3, [r7, #16]
 8106fec:	f003 0302 	and.w	r3, r3, #2
 8106ff0:	2b00      	cmp	r3, #0
 8106ff2:	d030      	beq.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8106ffa:	2b00      	cmp	r3, #0
 8106ffc:	d02b      	beq.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8106ffe:	68fb      	ldr	r3, [r7, #12]
 8107000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107002:	b29b      	uxth	r3, r3
 8107004:	2b00      	cmp	r3, #0
 8107006:	d018      	beq.n	810703a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8107008:	68fb      	ldr	r3, [r7, #12]
 810700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810700c:	781a      	ldrb	r2, [r3, #0]
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	681b      	ldr	r3, [r3, #0]
 8107012:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107014:	68fb      	ldr	r3, [r7, #12]
 8107016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107018:	1c5a      	adds	r2, r3, #1
 810701a:	68fb      	ldr	r3, [r7, #12]
 810701c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 810701e:	68fb      	ldr	r3, [r7, #12]
 8107020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107022:	b29b      	uxth	r3, r3
 8107024:	3b01      	subs	r3, #1
 8107026:	b29a      	uxth	r2, r3
 8107028:	68fb      	ldr	r3, [r7, #12]
 810702a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810702c:	68fb      	ldr	r3, [r7, #12]
 810702e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107030:	3b01      	subs	r3, #1
 8107032:	b29a      	uxth	r2, r3
 8107034:	68fb      	ldr	r3, [r7, #12]
 8107036:	851a      	strh	r2, [r3, #40]	@ 0x28
 8107038:	e00d      	b.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 810703a:	697b      	ldr	r3, [r7, #20]
 810703c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107040:	d002      	beq.n	8107048 <I2C_Slave_ISR_IT+0x1d2>
 8107042:	697b      	ldr	r3, [r7, #20]
 8107044:	2b00      	cmp	r3, #0
 8107046:	d106      	bne.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107048:	68f8      	ldr	r0, [r7, #12]
 810704a:	f000 fd62 	bl	8107b12 <I2C_ITSlaveSeqCplt>
 810704e:	e002      	b.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8107050:	bf00      	nop
 8107052:	e000      	b.n	8107056 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8107054:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107056:	68fb      	ldr	r3, [r7, #12]
 8107058:	2200      	movs	r2, #0
 810705a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810705e:	2300      	movs	r3, #0
}
 8107060:	4618      	mov	r0, r3
 8107062:	3718      	adds	r7, #24
 8107064:	46bd      	mov	sp, r7
 8107066:	bd80      	pop	{r7, pc}

08107068 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8107068:	b580      	push	{r7, lr}
 810706a:	b088      	sub	sp, #32
 810706c:	af02      	add	r7, sp, #8
 810706e:	60f8      	str	r0, [r7, #12]
 8107070:	60b9      	str	r1, [r7, #8]
 8107072:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8107074:	68fb      	ldr	r3, [r7, #12]
 8107076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810707a:	2b01      	cmp	r3, #1
 810707c:	d101      	bne.n	8107082 <I2C_Master_ISR_DMA+0x1a>
 810707e:	2302      	movs	r3, #2
 8107080:	e0d9      	b.n	8107236 <I2C_Master_ISR_DMA+0x1ce>
 8107082:	68fb      	ldr	r3, [r7, #12]
 8107084:	2201      	movs	r2, #1
 8107086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 810708a:	68bb      	ldr	r3, [r7, #8]
 810708c:	f003 0310 	and.w	r3, r3, #16
 8107090:	2b00      	cmp	r3, #0
 8107092:	d016      	beq.n	81070c2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 810709a:	2b00      	cmp	r3, #0
 810709c:	d011      	beq.n	81070c2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810709e:	68fb      	ldr	r3, [r7, #12]
 81070a0:	681b      	ldr	r3, [r3, #0]
 81070a2:	2210      	movs	r2, #16
 81070a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81070a6:	68fb      	ldr	r3, [r7, #12]
 81070a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81070aa:	f043 0204 	orr.w	r2, r3, #4
 81070ae:	68fb      	ldr	r3, [r7, #12]
 81070b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 81070b2:	2120      	movs	r1, #32
 81070b4:	68f8      	ldr	r0, [r7, #12]
 81070b6:	f001 fdcd 	bl	8108c54 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81070ba:	68f8      	ldr	r0, [r7, #12]
 81070bc:	f001 fa0d 	bl	81084da <I2C_Flush_TXDR>
 81070c0:	e0b4      	b.n	810722c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 81070c2:	68bb      	ldr	r3, [r7, #8]
 81070c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81070c8:	2b00      	cmp	r3, #0
 81070ca:	d071      	beq.n	81071b0 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 81070d2:	2b00      	cmp	r3, #0
 81070d4:	d06c      	beq.n	81071b0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 81070d6:	68fb      	ldr	r3, [r7, #12]
 81070d8:	681b      	ldr	r3, [r3, #0]
 81070da:	681a      	ldr	r2, [r3, #0]
 81070dc:	68fb      	ldr	r3, [r7, #12]
 81070de:	681b      	ldr	r3, [r3, #0]
 81070e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81070e4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 81070e6:	68fb      	ldr	r3, [r7, #12]
 81070e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81070ea:	b29b      	uxth	r3, r3
 81070ec:	2b00      	cmp	r3, #0
 81070ee:	d04e      	beq.n	810718e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 81070f0:	68fb      	ldr	r3, [r7, #12]
 81070f2:	681b      	ldr	r3, [r3, #0]
 81070f4:	685b      	ldr	r3, [r3, #4]
 81070f6:	b29b      	uxth	r3, r3
 81070f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81070fc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81070fe:	68fb      	ldr	r3, [r7, #12]
 8107100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107102:	b29b      	uxth	r3, r3
 8107104:	2bff      	cmp	r3, #255	@ 0xff
 8107106:	d906      	bls.n	8107116 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8107108:	68fb      	ldr	r3, [r7, #12]
 810710a:	22ff      	movs	r2, #255	@ 0xff
 810710c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 810710e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107112:	617b      	str	r3, [r7, #20]
 8107114:	e010      	b.n	8107138 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8107116:	68fb      	ldr	r3, [r7, #12]
 8107118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810711a:	b29a      	uxth	r2, r3
 810711c:	68fb      	ldr	r3, [r7, #12]
 810711e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107120:	68fb      	ldr	r3, [r7, #12]
 8107122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107124:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8107128:	d003      	beq.n	8107132 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 810712a:	68fb      	ldr	r3, [r7, #12]
 810712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810712e:	617b      	str	r3, [r7, #20]
 8107130:	e002      	b.n	8107138 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8107132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107136:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8107138:	68fb      	ldr	r3, [r7, #12]
 810713a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810713c:	b2da      	uxtb	r2, r3
 810713e:	8a79      	ldrh	r1, [r7, #18]
 8107140:	2300      	movs	r3, #0
 8107142:	9300      	str	r3, [sp, #0]
 8107144:	697b      	ldr	r3, [r7, #20]
 8107146:	68f8      	ldr	r0, [r7, #12]
 8107148:	f001 fd52 	bl	8108bf0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 810714c:	68fb      	ldr	r3, [r7, #12]
 810714e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107150:	b29a      	uxth	r2, r3
 8107152:	68fb      	ldr	r3, [r7, #12]
 8107154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107156:	1ad3      	subs	r3, r2, r3
 8107158:	b29a      	uxth	r2, r3
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810715e:	68fb      	ldr	r3, [r7, #12]
 8107160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107164:	b2db      	uxtb	r3, r3
 8107166:	2b22      	cmp	r3, #34	@ 0x22
 8107168:	d108      	bne.n	810717c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 810716a:	68fb      	ldr	r3, [r7, #12]
 810716c:	681b      	ldr	r3, [r3, #0]
 810716e:	681a      	ldr	r2, [r3, #0]
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8107178:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 810717a:	e057      	b.n	810722c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 810717c:	68fb      	ldr	r3, [r7, #12]
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	681a      	ldr	r2, [r3, #0]
 8107182:	68fb      	ldr	r3, [r7, #12]
 8107184:	681b      	ldr	r3, [r3, #0]
 8107186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810718a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 810718c:	e04e      	b.n	810722c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 810718e:	68fb      	ldr	r3, [r7, #12]
 8107190:	681b      	ldr	r3, [r3, #0]
 8107192:	685b      	ldr	r3, [r3, #4]
 8107194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810719c:	d003      	beq.n	81071a6 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 810719e:	68f8      	ldr	r0, [r7, #12]
 81071a0:	f000 fc7a 	bl	8107a98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 81071a4:	e042      	b.n	810722c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 81071a6:	2140      	movs	r1, #64	@ 0x40
 81071a8:	68f8      	ldr	r0, [r7, #12]
 81071aa:	f001 f87f 	bl	81082ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 81071ae:	e03d      	b.n	810722c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 81071b0:	68bb      	ldr	r3, [r7, #8]
 81071b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81071b6:	2b00      	cmp	r3, #0
 81071b8:	d028      	beq.n	810720c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 81071c0:	2b00      	cmp	r3, #0
 81071c2:	d023      	beq.n	810720c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 81071c4:	68fb      	ldr	r3, [r7, #12]
 81071c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81071c8:	b29b      	uxth	r3, r3
 81071ca:	2b00      	cmp	r3, #0
 81071cc:	d119      	bne.n	8107202 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 81071ce:	68fb      	ldr	r3, [r7, #12]
 81071d0:	681b      	ldr	r3, [r3, #0]
 81071d2:	685b      	ldr	r3, [r3, #4]
 81071d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81071d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81071dc:	d025      	beq.n	810722a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 81071de:	68fb      	ldr	r3, [r7, #12]
 81071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81071e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 81071e6:	d108      	bne.n	81071fa <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81071e8:	68fb      	ldr	r3, [r7, #12]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	685a      	ldr	r2, [r3, #4]
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	681b      	ldr	r3, [r3, #0]
 81071f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81071f6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 81071f8:	e017      	b.n	810722a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 81071fa:	68f8      	ldr	r0, [r7, #12]
 81071fc:	f000 fc4c 	bl	8107a98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8107200:	e013      	b.n	810722a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8107202:	2140      	movs	r1, #64	@ 0x40
 8107204:	68f8      	ldr	r0, [r7, #12]
 8107206:	f001 f851 	bl	81082ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 810720a:	e00e      	b.n	810722a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 810720c:	68bb      	ldr	r3, [r7, #8]
 810720e:	f003 0320 	and.w	r3, r3, #32
 8107212:	2b00      	cmp	r3, #0
 8107214:	d00a      	beq.n	810722c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107216:	687b      	ldr	r3, [r7, #4]
 8107218:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 810721c:	2b00      	cmp	r3, #0
 810721e:	d005      	beq.n	810722c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8107220:	68b9      	ldr	r1, [r7, #8]
 8107222:	68f8      	ldr	r0, [r7, #12]
 8107224:	f000 fcd2 	bl	8107bcc <I2C_ITMasterCplt>
 8107228:	e000      	b.n	810722c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 810722a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810722c:	68fb      	ldr	r3, [r7, #12]
 810722e:	2200      	movs	r2, #0
 8107230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8107234:	2300      	movs	r3, #0
}
 8107236:	4618      	mov	r0, r3
 8107238:	3718      	adds	r7, #24
 810723a:	46bd      	mov	sp, r7
 810723c:	bd80      	pop	{r7, pc}
	...

08107240 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8107240:	b580      	push	{r7, lr}
 8107242:	b088      	sub	sp, #32
 8107244:	af02      	add	r7, sp, #8
 8107246:	60f8      	str	r0, [r7, #12]
 8107248:	60b9      	str	r1, [r7, #8]
 810724a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 810724c:	4b8d      	ldr	r3, [pc, #564]	@ (8107484 <I2C_Mem_ISR_DMA+0x244>)
 810724e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107256:	2b01      	cmp	r3, #1
 8107258:	d101      	bne.n	810725e <I2C_Mem_ISR_DMA+0x1e>
 810725a:	2302      	movs	r3, #2
 810725c:	e10e      	b.n	810747c <I2C_Mem_ISR_DMA+0x23c>
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	2201      	movs	r2, #1
 8107262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8107266:	68bb      	ldr	r3, [r7, #8]
 8107268:	f003 0310 	and.w	r3, r3, #16
 810726c:	2b00      	cmp	r3, #0
 810726e:	d016      	beq.n	810729e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8107276:	2b00      	cmp	r3, #0
 8107278:	d011      	beq.n	810729e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	2210      	movs	r2, #16
 8107280:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107286:	f043 0204 	orr.w	r2, r3, #4
 810728a:	68fb      	ldr	r3, [r7, #12]
 810728c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810728e:	2120      	movs	r1, #32
 8107290:	68f8      	ldr	r0, [r7, #12]
 8107292:	f001 fcdf 	bl	8108c54 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107296:	68f8      	ldr	r0, [r7, #12]
 8107298:	f001 f91f 	bl	81084da <I2C_Flush_TXDR>
 810729c:	e0e9      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 810729e:	68bb      	ldr	r3, [r7, #8]
 81072a0:	f003 0302 	and.w	r3, r3, #2
 81072a4:	2b00      	cmp	r3, #0
 81072a6:	d00e      	beq.n	81072c6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81072a8:	687b      	ldr	r3, [r7, #4]
 81072aa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 81072ae:	2b00      	cmp	r3, #0
 81072b0:	d009      	beq.n	81072c6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 81072b2:	68fb      	ldr	r3, [r7, #12]
 81072b4:	681b      	ldr	r3, [r3, #0]
 81072b6:	68fa      	ldr	r2, [r7, #12]
 81072b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 81072ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 81072bc:	68fb      	ldr	r3, [r7, #12]
 81072be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81072c2:	651a      	str	r2, [r3, #80]	@ 0x50
 81072c4:	e0d5      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 81072c6:	68bb      	ldr	r3, [r7, #8]
 81072c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81072cc:	2b00      	cmp	r3, #0
 81072ce:	d05f      	beq.n	8107390 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 81072d6:	2b00      	cmp	r3, #0
 81072d8:	d05a      	beq.n	8107390 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81072da:	2101      	movs	r1, #1
 81072dc:	68f8      	ldr	r0, [r7, #12]
 81072de:	f001 fd3d 	bl	8108d5c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 81072e2:	2110      	movs	r1, #16
 81072e4:	68f8      	ldr	r0, [r7, #12]
 81072e6:	f001 fcb5 	bl	8108c54 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 81072ea:	68fb      	ldr	r3, [r7, #12]
 81072ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81072ee:	b29b      	uxth	r3, r3
 81072f0:	2b00      	cmp	r3, #0
 81072f2:	d048      	beq.n	8107386 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81072f8:	b29b      	uxth	r3, r3
 81072fa:	2bff      	cmp	r3, #255	@ 0xff
 81072fc:	d910      	bls.n	8107320 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 81072fe:	68fb      	ldr	r3, [r7, #12]
 8107300:	22ff      	movs	r2, #255	@ 0xff
 8107302:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8107304:	68fb      	ldr	r3, [r7, #12]
 8107306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107308:	b299      	uxth	r1, r3
 810730a:	68fb      	ldr	r3, [r7, #12]
 810730c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810730e:	b2da      	uxtb	r2, r3
 8107310:	2300      	movs	r3, #0
 8107312:	9300      	str	r3, [sp, #0]
 8107314:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107318:	68f8      	ldr	r0, [r7, #12]
 810731a:	f001 fc69 	bl	8108bf0 <I2C_TransferConfig>
 810731e:	e011      	b.n	8107344 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8107320:	68fb      	ldr	r3, [r7, #12]
 8107322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107324:	b29a      	uxth	r2, r3
 8107326:	68fb      	ldr	r3, [r7, #12]
 8107328:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 810732a:	68fb      	ldr	r3, [r7, #12]
 810732c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810732e:	b299      	uxth	r1, r3
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107334:	b2da      	uxtb	r2, r3
 8107336:	2300      	movs	r3, #0
 8107338:	9300      	str	r3, [sp, #0]
 810733a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810733e:	68f8      	ldr	r0, [r7, #12]
 8107340:	f001 fc56 	bl	8108bf0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8107344:	68fb      	ldr	r3, [r7, #12]
 8107346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107348:	b29a      	uxth	r2, r3
 810734a:	68fb      	ldr	r3, [r7, #12]
 810734c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810734e:	1ad3      	subs	r3, r2, r3
 8107350:	b29a      	uxth	r2, r3
 8107352:	68fb      	ldr	r3, [r7, #12]
 8107354:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107356:	68fb      	ldr	r3, [r7, #12]
 8107358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810735c:	b2db      	uxtb	r3, r3
 810735e:	2b22      	cmp	r3, #34	@ 0x22
 8107360:	d108      	bne.n	8107374 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8107362:	68fb      	ldr	r3, [r7, #12]
 8107364:	681b      	ldr	r3, [r3, #0]
 8107366:	681a      	ldr	r2, [r3, #0]
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8107370:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8107372:	e07e      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	681b      	ldr	r3, [r3, #0]
 8107378:	681a      	ldr	r2, [r3, #0]
 810737a:	68fb      	ldr	r3, [r7, #12]
 810737c:	681b      	ldr	r3, [r3, #0]
 810737e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8107382:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8107384:	e075      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8107386:	2140      	movs	r1, #64	@ 0x40
 8107388:	68f8      	ldr	r0, [r7, #12]
 810738a:	f000 ff8f 	bl	81082ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 810738e:	e070      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8107390:	68bb      	ldr	r3, [r7, #8]
 8107392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107396:	2b00      	cmp	r3, #0
 8107398:	d05d      	beq.n	8107456 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 810739a:	687b      	ldr	r3, [r7, #4]
 810739c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 81073a0:	2b00      	cmp	r3, #0
 81073a2:	d058      	beq.n	8107456 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81073a4:	2101      	movs	r1, #1
 81073a6:	68f8      	ldr	r0, [r7, #12]
 81073a8:	f001 fcd8 	bl	8108d5c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 81073ac:	2110      	movs	r1, #16
 81073ae:	68f8      	ldr	r0, [r7, #12]
 81073b0:	f001 fc50 	bl	8108c54 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81073ba:	b2db      	uxtb	r3, r3
 81073bc:	2b22      	cmp	r3, #34	@ 0x22
 81073be:	d101      	bne.n	81073c4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 81073c0:	4b31      	ldr	r3, [pc, #196]	@ (8107488 <I2C_Mem_ISR_DMA+0x248>)
 81073c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81073c4:	68fb      	ldr	r3, [r7, #12]
 81073c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81073c8:	b29b      	uxth	r3, r3
 81073ca:	2bff      	cmp	r3, #255	@ 0xff
 81073cc:	d910      	bls.n	81073f0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81073ce:	68fb      	ldr	r3, [r7, #12]
 81073d0:	22ff      	movs	r2, #255	@ 0xff
 81073d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 81073d4:	68fb      	ldr	r3, [r7, #12]
 81073d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81073d8:	b299      	uxth	r1, r3
 81073da:	68fb      	ldr	r3, [r7, #12]
 81073dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81073de:	b2da      	uxtb	r2, r3
 81073e0:	697b      	ldr	r3, [r7, #20]
 81073e2:	9300      	str	r3, [sp, #0]
 81073e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81073e8:	68f8      	ldr	r0, [r7, #12]
 81073ea:	f001 fc01 	bl	8108bf0 <I2C_TransferConfig>
 81073ee:	e011      	b.n	8107414 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81073f0:	68fb      	ldr	r3, [r7, #12]
 81073f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81073f4:	b29a      	uxth	r2, r3
 81073f6:	68fb      	ldr	r3, [r7, #12]
 81073f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 81073fa:	68fb      	ldr	r3, [r7, #12]
 81073fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81073fe:	b299      	uxth	r1, r3
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107404:	b2da      	uxtb	r2, r3
 8107406:	697b      	ldr	r3, [r7, #20]
 8107408:	9300      	str	r3, [sp, #0]
 810740a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810740e:	68f8      	ldr	r0, [r7, #12]
 8107410:	f001 fbee 	bl	8108bf0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8107414:	68fb      	ldr	r3, [r7, #12]
 8107416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107418:	b29a      	uxth	r2, r3
 810741a:	68fb      	ldr	r3, [r7, #12]
 810741c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810741e:	1ad3      	subs	r3, r2, r3
 8107420:	b29a      	uxth	r2, r3
 8107422:	68fb      	ldr	r3, [r7, #12]
 8107424:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107426:	68fb      	ldr	r3, [r7, #12]
 8107428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810742c:	b2db      	uxtb	r3, r3
 810742e:	2b22      	cmp	r3, #34	@ 0x22
 8107430:	d108      	bne.n	8107444 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8107432:	68fb      	ldr	r3, [r7, #12]
 8107434:	681b      	ldr	r3, [r3, #0]
 8107436:	681a      	ldr	r2, [r3, #0]
 8107438:	68fb      	ldr	r3, [r7, #12]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8107440:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107442:	e016      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	681a      	ldr	r2, [r3, #0]
 810744a:	68fb      	ldr	r3, [r7, #12]
 810744c:	681b      	ldr	r3, [r3, #0]
 810744e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8107452:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107454:	e00d      	b.n	8107472 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8107456:	68bb      	ldr	r3, [r7, #8]
 8107458:	f003 0320 	and.w	r3, r3, #32
 810745c:	2b00      	cmp	r3, #0
 810745e:	d008      	beq.n	8107472 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8107466:	2b00      	cmp	r3, #0
 8107468:	d003      	beq.n	8107472 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 810746a:	68b9      	ldr	r1, [r7, #8]
 810746c:	68f8      	ldr	r0, [r7, #12]
 810746e:	f000 fbad 	bl	8107bcc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107472:	68fb      	ldr	r3, [r7, #12]
 8107474:	2200      	movs	r2, #0
 8107476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810747a:	2300      	movs	r3, #0
}
 810747c:	4618      	mov	r0, r3
 810747e:	3718      	adds	r7, #24
 8107480:	46bd      	mov	sp, r7
 8107482:	bd80      	pop	{r7, pc}
 8107484:	80002000 	.word	0x80002000
 8107488:	80002400 	.word	0x80002400

0810748c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 810748c:	b580      	push	{r7, lr}
 810748e:	b088      	sub	sp, #32
 8107490:	af00      	add	r7, sp, #0
 8107492:	60f8      	str	r0, [r7, #12]
 8107494:	60b9      	str	r1, [r7, #8]
 8107496:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107498:	68fb      	ldr	r3, [r7, #12]
 810749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810749c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 810749e:	2300      	movs	r3, #0
 81074a0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 81074a2:	68fb      	ldr	r3, [r7, #12]
 81074a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81074a8:	2b01      	cmp	r3, #1
 81074aa:	d101      	bne.n	81074b0 <I2C_Slave_ISR_DMA+0x24>
 81074ac:	2302      	movs	r3, #2
 81074ae:	e1c2      	b.n	8107836 <I2C_Slave_ISR_DMA+0x3aa>
 81074b0:	68fb      	ldr	r3, [r7, #12]
 81074b2:	2201      	movs	r2, #1
 81074b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 81074b8:	68bb      	ldr	r3, [r7, #8]
 81074ba:	f003 0320 	and.w	r3, r3, #32
 81074be:	2b00      	cmp	r3, #0
 81074c0:	d009      	beq.n	81074d6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 81074c8:	2b00      	cmp	r3, #0
 81074ca:	d004      	beq.n	81074d6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 81074cc:	68b9      	ldr	r1, [r7, #8]
 81074ce:	68f8      	ldr	r0, [r7, #12]
 81074d0:	f000 fc44 	bl	8107d5c <I2C_ITSlaveCplt>
 81074d4:	e1aa      	b.n	810782c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 81074d6:	68bb      	ldr	r3, [r7, #8]
 81074d8:	f003 0310 	and.w	r3, r3, #16
 81074dc:	2b00      	cmp	r3, #0
 81074de:	f000 8197 	beq.w	8107810 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 81074e8:	2b00      	cmp	r3, #0
 81074ea:	f000 8191 	beq.w	8107810 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81074f4:	2b00      	cmp	r3, #0
 81074f6:	d105      	bne.n	8107504 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 81074fe:	2b00      	cmp	r3, #0
 8107500:	f000 817f 	beq.w	8107802 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8107504:	68fb      	ldr	r3, [r7, #12]
 8107506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107508:	2b00      	cmp	r3, #0
 810750a:	d07b      	beq.n	8107604 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107512:	2b00      	cmp	r3, #0
 8107514:	d076      	beq.n	8107604 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8107516:	68fb      	ldr	r3, [r7, #12]
 8107518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810751a:	681b      	ldr	r3, [r3, #0]
 810751c:	4a74      	ldr	r2, [pc, #464]	@ (81076f0 <I2C_Slave_ISR_DMA+0x264>)
 810751e:	4293      	cmp	r3, r2
 8107520:	d059      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 8107522:	68fb      	ldr	r3, [r7, #12]
 8107524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	4a72      	ldr	r2, [pc, #456]	@ (81076f4 <I2C_Slave_ISR_DMA+0x268>)
 810752a:	4293      	cmp	r3, r2
 810752c:	d053      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 810752e:	68fb      	ldr	r3, [r7, #12]
 8107530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107532:	681b      	ldr	r3, [r3, #0]
 8107534:	4a70      	ldr	r2, [pc, #448]	@ (81076f8 <I2C_Slave_ISR_DMA+0x26c>)
 8107536:	4293      	cmp	r3, r2
 8107538:	d04d      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 810753a:	68fb      	ldr	r3, [r7, #12]
 810753c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810753e:	681b      	ldr	r3, [r3, #0]
 8107540:	4a6e      	ldr	r2, [pc, #440]	@ (81076fc <I2C_Slave_ISR_DMA+0x270>)
 8107542:	4293      	cmp	r3, r2
 8107544:	d047      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 8107546:	68fb      	ldr	r3, [r7, #12]
 8107548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810754a:	681b      	ldr	r3, [r3, #0]
 810754c:	4a6c      	ldr	r2, [pc, #432]	@ (8107700 <I2C_Slave_ISR_DMA+0x274>)
 810754e:	4293      	cmp	r3, r2
 8107550:	d041      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 8107552:	68fb      	ldr	r3, [r7, #12]
 8107554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	4a6a      	ldr	r2, [pc, #424]	@ (8107704 <I2C_Slave_ISR_DMA+0x278>)
 810755a:	4293      	cmp	r3, r2
 810755c:	d03b      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 810755e:	68fb      	ldr	r3, [r7, #12]
 8107560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107562:	681b      	ldr	r3, [r3, #0]
 8107564:	4a68      	ldr	r2, [pc, #416]	@ (8107708 <I2C_Slave_ISR_DMA+0x27c>)
 8107566:	4293      	cmp	r3, r2
 8107568:	d035      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810756e:	681b      	ldr	r3, [r3, #0]
 8107570:	4a66      	ldr	r2, [pc, #408]	@ (810770c <I2C_Slave_ISR_DMA+0x280>)
 8107572:	4293      	cmp	r3, r2
 8107574:	d02f      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 8107576:	68fb      	ldr	r3, [r7, #12]
 8107578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	4a64      	ldr	r2, [pc, #400]	@ (8107710 <I2C_Slave_ISR_DMA+0x284>)
 810757e:	4293      	cmp	r3, r2
 8107580:	d029      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 8107582:	68fb      	ldr	r3, [r7, #12]
 8107584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	4a62      	ldr	r2, [pc, #392]	@ (8107714 <I2C_Slave_ISR_DMA+0x288>)
 810758a:	4293      	cmp	r3, r2
 810758c:	d023      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 810758e:	68fb      	ldr	r3, [r7, #12]
 8107590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107592:	681b      	ldr	r3, [r3, #0]
 8107594:	4a60      	ldr	r2, [pc, #384]	@ (8107718 <I2C_Slave_ISR_DMA+0x28c>)
 8107596:	4293      	cmp	r3, r2
 8107598:	d01d      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 810759a:	68fb      	ldr	r3, [r7, #12]
 810759c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	4a5e      	ldr	r2, [pc, #376]	@ (810771c <I2C_Slave_ISR_DMA+0x290>)
 81075a2:	4293      	cmp	r3, r2
 81075a4:	d017      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 81075a6:	68fb      	ldr	r3, [r7, #12]
 81075a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075aa:	681b      	ldr	r3, [r3, #0]
 81075ac:	4a5c      	ldr	r2, [pc, #368]	@ (8107720 <I2C_Slave_ISR_DMA+0x294>)
 81075ae:	4293      	cmp	r3, r2
 81075b0:	d011      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 81075b2:	68fb      	ldr	r3, [r7, #12]
 81075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	4a5a      	ldr	r2, [pc, #360]	@ (8107724 <I2C_Slave_ISR_DMA+0x298>)
 81075ba:	4293      	cmp	r3, r2
 81075bc:	d00b      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 81075be:	68fb      	ldr	r3, [r7, #12]
 81075c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	4a58      	ldr	r2, [pc, #352]	@ (8107728 <I2C_Slave_ISR_DMA+0x29c>)
 81075c6:	4293      	cmp	r3, r2
 81075c8:	d005      	beq.n	81075d6 <I2C_Slave_ISR_DMA+0x14a>
 81075ca:	68fb      	ldr	r3, [r7, #12]
 81075cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	4a56      	ldr	r2, [pc, #344]	@ (810772c <I2C_Slave_ISR_DMA+0x2a0>)
 81075d2:	4293      	cmp	r3, r2
 81075d4:	d109      	bne.n	81075ea <I2C_Slave_ISR_DMA+0x15e>
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	685b      	ldr	r3, [r3, #4]
 81075de:	2b00      	cmp	r3, #0
 81075e0:	bf0c      	ite	eq
 81075e2:	2301      	moveq	r3, #1
 81075e4:	2300      	movne	r3, #0
 81075e6:	b2db      	uxtb	r3, r3
 81075e8:	e008      	b.n	81075fc <I2C_Slave_ISR_DMA+0x170>
 81075ea:	68fb      	ldr	r3, [r7, #12]
 81075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	685b      	ldr	r3, [r3, #4]
 81075f2:	2b00      	cmp	r3, #0
 81075f4:	bf0c      	ite	eq
 81075f6:	2301      	moveq	r3, #1
 81075f8:	2300      	movne	r3, #0
 81075fa:	b2db      	uxtb	r3, r3
 81075fc:	2b00      	cmp	r3, #0
 81075fe:	d001      	beq.n	8107604 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8107600:	2301      	movs	r3, #1
 8107602:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8107604:	68fb      	ldr	r3, [r7, #12]
 8107606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107608:	2b00      	cmp	r3, #0
 810760a:	f000 809e 	beq.w	810774a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107614:	2b00      	cmp	r3, #0
 8107616:	f000 8098 	beq.w	810774a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 810761a:	68fb      	ldr	r3, [r7, #12]
 810761c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810761e:	681b      	ldr	r3, [r3, #0]
 8107620:	4a33      	ldr	r2, [pc, #204]	@ (81076f0 <I2C_Slave_ISR_DMA+0x264>)
 8107622:	4293      	cmp	r3, r2
 8107624:	d059      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 8107626:	68fb      	ldr	r3, [r7, #12]
 8107628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	4a31      	ldr	r2, [pc, #196]	@ (81076f4 <I2C_Slave_ISR_DMA+0x268>)
 810762e:	4293      	cmp	r3, r2
 8107630:	d053      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 8107632:	68fb      	ldr	r3, [r7, #12]
 8107634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	4a2f      	ldr	r2, [pc, #188]	@ (81076f8 <I2C_Slave_ISR_DMA+0x26c>)
 810763a:	4293      	cmp	r3, r2
 810763c:	d04d      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 810763e:	68fb      	ldr	r3, [r7, #12]
 8107640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107642:	681b      	ldr	r3, [r3, #0]
 8107644:	4a2d      	ldr	r2, [pc, #180]	@ (81076fc <I2C_Slave_ISR_DMA+0x270>)
 8107646:	4293      	cmp	r3, r2
 8107648:	d047      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 810764a:	68fb      	ldr	r3, [r7, #12]
 810764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810764e:	681b      	ldr	r3, [r3, #0]
 8107650:	4a2b      	ldr	r2, [pc, #172]	@ (8107700 <I2C_Slave_ISR_DMA+0x274>)
 8107652:	4293      	cmp	r3, r2
 8107654:	d041      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 8107656:	68fb      	ldr	r3, [r7, #12]
 8107658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	4a29      	ldr	r2, [pc, #164]	@ (8107704 <I2C_Slave_ISR_DMA+0x278>)
 810765e:	4293      	cmp	r3, r2
 8107660:	d03b      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 8107662:	68fb      	ldr	r3, [r7, #12]
 8107664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107666:	681b      	ldr	r3, [r3, #0]
 8107668:	4a27      	ldr	r2, [pc, #156]	@ (8107708 <I2C_Slave_ISR_DMA+0x27c>)
 810766a:	4293      	cmp	r3, r2
 810766c:	d035      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 810766e:	68fb      	ldr	r3, [r7, #12]
 8107670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107672:	681b      	ldr	r3, [r3, #0]
 8107674:	4a25      	ldr	r2, [pc, #148]	@ (810770c <I2C_Slave_ISR_DMA+0x280>)
 8107676:	4293      	cmp	r3, r2
 8107678:	d02f      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 810767a:	68fb      	ldr	r3, [r7, #12]
 810767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810767e:	681b      	ldr	r3, [r3, #0]
 8107680:	4a23      	ldr	r2, [pc, #140]	@ (8107710 <I2C_Slave_ISR_DMA+0x284>)
 8107682:	4293      	cmp	r3, r2
 8107684:	d029      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 8107686:	68fb      	ldr	r3, [r7, #12]
 8107688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	4a21      	ldr	r2, [pc, #132]	@ (8107714 <I2C_Slave_ISR_DMA+0x288>)
 810768e:	4293      	cmp	r3, r2
 8107690:	d023      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 8107692:	68fb      	ldr	r3, [r7, #12]
 8107694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	4a1f      	ldr	r2, [pc, #124]	@ (8107718 <I2C_Slave_ISR_DMA+0x28c>)
 810769a:	4293      	cmp	r3, r2
 810769c:	d01d      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 810769e:	68fb      	ldr	r3, [r7, #12]
 81076a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076a2:	681b      	ldr	r3, [r3, #0]
 81076a4:	4a1d      	ldr	r2, [pc, #116]	@ (810771c <I2C_Slave_ISR_DMA+0x290>)
 81076a6:	4293      	cmp	r3, r2
 81076a8:	d017      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 81076aa:	68fb      	ldr	r3, [r7, #12]
 81076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076ae:	681b      	ldr	r3, [r3, #0]
 81076b0:	4a1b      	ldr	r2, [pc, #108]	@ (8107720 <I2C_Slave_ISR_DMA+0x294>)
 81076b2:	4293      	cmp	r3, r2
 81076b4:	d011      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 81076b6:	68fb      	ldr	r3, [r7, #12]
 81076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076ba:	681b      	ldr	r3, [r3, #0]
 81076bc:	4a19      	ldr	r2, [pc, #100]	@ (8107724 <I2C_Slave_ISR_DMA+0x298>)
 81076be:	4293      	cmp	r3, r2
 81076c0:	d00b      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 81076c2:	68fb      	ldr	r3, [r7, #12]
 81076c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	4a17      	ldr	r2, [pc, #92]	@ (8107728 <I2C_Slave_ISR_DMA+0x29c>)
 81076ca:	4293      	cmp	r3, r2
 81076cc:	d005      	beq.n	81076da <I2C_Slave_ISR_DMA+0x24e>
 81076ce:	68fb      	ldr	r3, [r7, #12]
 81076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076d2:	681b      	ldr	r3, [r3, #0]
 81076d4:	4a15      	ldr	r2, [pc, #84]	@ (810772c <I2C_Slave_ISR_DMA+0x2a0>)
 81076d6:	4293      	cmp	r3, r2
 81076d8:	d12a      	bne.n	8107730 <I2C_Slave_ISR_DMA+0x2a4>
 81076da:	68fb      	ldr	r3, [r7, #12]
 81076dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	685b      	ldr	r3, [r3, #4]
 81076e2:	2b00      	cmp	r3, #0
 81076e4:	bf0c      	ite	eq
 81076e6:	2301      	moveq	r3, #1
 81076e8:	2300      	movne	r3, #0
 81076ea:	b2db      	uxtb	r3, r3
 81076ec:	e029      	b.n	8107742 <I2C_Slave_ISR_DMA+0x2b6>
 81076ee:	bf00      	nop
 81076f0:	40020010 	.word	0x40020010
 81076f4:	40020028 	.word	0x40020028
 81076f8:	40020040 	.word	0x40020040
 81076fc:	40020058 	.word	0x40020058
 8107700:	40020070 	.word	0x40020070
 8107704:	40020088 	.word	0x40020088
 8107708:	400200a0 	.word	0x400200a0
 810770c:	400200b8 	.word	0x400200b8
 8107710:	40020410 	.word	0x40020410
 8107714:	40020428 	.word	0x40020428
 8107718:	40020440 	.word	0x40020440
 810771c:	40020458 	.word	0x40020458
 8107720:	40020470 	.word	0x40020470
 8107724:	40020488 	.word	0x40020488
 8107728:	400204a0 	.word	0x400204a0
 810772c:	400204b8 	.word	0x400204b8
 8107730:	68fb      	ldr	r3, [r7, #12]
 8107732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107734:	681b      	ldr	r3, [r3, #0]
 8107736:	685b      	ldr	r3, [r3, #4]
 8107738:	2b00      	cmp	r3, #0
 810773a:	bf0c      	ite	eq
 810773c:	2301      	moveq	r3, #1
 810773e:	2300      	movne	r3, #0
 8107740:	b2db      	uxtb	r3, r3
 8107742:	2b00      	cmp	r3, #0
 8107744:	d001      	beq.n	810774a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8107746:	2301      	movs	r3, #1
 8107748:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 810774a:	69fb      	ldr	r3, [r7, #28]
 810774c:	2b01      	cmp	r3, #1
 810774e:	d128      	bne.n	81077a2 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8107750:	68fb      	ldr	r3, [r7, #12]
 8107752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107756:	b2db      	uxtb	r3, r3
 8107758:	2b28      	cmp	r3, #40	@ 0x28
 810775a:	d108      	bne.n	810776e <I2C_Slave_ISR_DMA+0x2e2>
 810775c:	69bb      	ldr	r3, [r7, #24]
 810775e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107762:	d104      	bne.n	810776e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8107764:	68b9      	ldr	r1, [r7, #8]
 8107766:	68f8      	ldr	r0, [r7, #12]
 8107768:	f000 fd4c 	bl	8108204 <I2C_ITListenCplt>
 810776c:	e048      	b.n	8107800 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810776e:	68fb      	ldr	r3, [r7, #12]
 8107770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107774:	b2db      	uxtb	r3, r3
 8107776:	2b29      	cmp	r3, #41	@ 0x29
 8107778:	d10e      	bne.n	8107798 <I2C_Slave_ISR_DMA+0x30c>
 810777a:	69bb      	ldr	r3, [r7, #24]
 810777c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8107780:	d00a      	beq.n	8107798 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107782:	68fb      	ldr	r3, [r7, #12]
 8107784:	681b      	ldr	r3, [r3, #0]
 8107786:	2210      	movs	r2, #16
 8107788:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 810778a:	68f8      	ldr	r0, [r7, #12]
 810778c:	f000 fea5 	bl	81084da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8107790:	68f8      	ldr	r0, [r7, #12]
 8107792:	f000 f9be 	bl	8107b12 <I2C_ITSlaveSeqCplt>
 8107796:	e033      	b.n	8107800 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107798:	68fb      	ldr	r3, [r7, #12]
 810779a:	681b      	ldr	r3, [r3, #0]
 810779c:	2210      	movs	r2, #16
 810779e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 81077a0:	e034      	b.n	810780c <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077a2:	68fb      	ldr	r3, [r7, #12]
 81077a4:	681b      	ldr	r3, [r3, #0]
 81077a6:	2210      	movs	r2, #16
 81077a8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81077aa:	68fb      	ldr	r3, [r7, #12]
 81077ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81077ae:	f043 0204 	orr.w	r2, r3, #4
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 81077b6:	68fb      	ldr	r3, [r7, #12]
 81077b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81077bc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81077be:	69bb      	ldr	r3, [r7, #24]
 81077c0:	2b00      	cmp	r3, #0
 81077c2:	d003      	beq.n	81077cc <I2C_Slave_ISR_DMA+0x340>
 81077c4:	69bb      	ldr	r3, [r7, #24]
 81077c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81077ca:	d11f      	bne.n	810780c <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 81077cc:	7dfb      	ldrb	r3, [r7, #23]
 81077ce:	2b21      	cmp	r3, #33	@ 0x21
 81077d0:	d002      	beq.n	81077d8 <I2C_Slave_ISR_DMA+0x34c>
 81077d2:	7dfb      	ldrb	r3, [r7, #23]
 81077d4:	2b29      	cmp	r3, #41	@ 0x29
 81077d6:	d103      	bne.n	81077e0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81077d8:	68fb      	ldr	r3, [r7, #12]
 81077da:	2221      	movs	r2, #33	@ 0x21
 81077dc:	631a      	str	r2, [r3, #48]	@ 0x30
 81077de:	e008      	b.n	81077f2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 81077e0:	7dfb      	ldrb	r3, [r7, #23]
 81077e2:	2b22      	cmp	r3, #34	@ 0x22
 81077e4:	d002      	beq.n	81077ec <I2C_Slave_ISR_DMA+0x360>
 81077e6:	7dfb      	ldrb	r3, [r7, #23]
 81077e8:	2b2a      	cmp	r3, #42	@ 0x2a
 81077ea:	d102      	bne.n	81077f2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81077ec:	68fb      	ldr	r3, [r7, #12]
 81077ee:	2222      	movs	r2, #34	@ 0x22
 81077f0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 81077f2:	68fb      	ldr	r3, [r7, #12]
 81077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81077f6:	4619      	mov	r1, r3
 81077f8:	68f8      	ldr	r0, [r7, #12]
 81077fa:	f000 fd57 	bl	81082ac <I2C_ITError>
      if (treatdmanack == 1U)
 81077fe:	e005      	b.n	810780c <I2C_Slave_ISR_DMA+0x380>
 8107800:	e004      	b.n	810780c <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107802:	68fb      	ldr	r3, [r7, #12]
 8107804:	681b      	ldr	r3, [r3, #0]
 8107806:	2210      	movs	r2, #16
 8107808:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 810780a:	e00f      	b.n	810782c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 810780c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 810780e:	e00d      	b.n	810782c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107810:	68bb      	ldr	r3, [r7, #8]
 8107812:	f003 0308 	and.w	r3, r3, #8
 8107816:	2b00      	cmp	r3, #0
 8107818:	d008      	beq.n	810782c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107820:	2b00      	cmp	r3, #0
 8107822:	d003      	beq.n	810782c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8107824:	68b9      	ldr	r1, [r7, #8]
 8107826:	68f8      	ldr	r0, [r7, #12]
 8107828:	f000 f8b2 	bl	8107990 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810782c:	68fb      	ldr	r3, [r7, #12]
 810782e:	2200      	movs	r2, #0
 8107830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8107834:	2300      	movs	r3, #0
}
 8107836:	4618      	mov	r0, r3
 8107838:	3720      	adds	r7, #32
 810783a:	46bd      	mov	sp, r7
 810783c:	bd80      	pop	{r7, pc}
 810783e:	bf00      	nop

08107840 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8107840:	b580      	push	{r7, lr}
 8107842:	b086      	sub	sp, #24
 8107844:	af02      	add	r7, sp, #8
 8107846:	60f8      	str	r0, [r7, #12]
 8107848:	4608      	mov	r0, r1
 810784a:	4611      	mov	r1, r2
 810784c:	461a      	mov	r2, r3
 810784e:	4603      	mov	r3, r0
 8107850:	817b      	strh	r3, [r7, #10]
 8107852:	460b      	mov	r3, r1
 8107854:	813b      	strh	r3, [r7, #8]
 8107856:	4613      	mov	r3, r2
 8107858:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810785a:	88fb      	ldrh	r3, [r7, #6]
 810785c:	b2da      	uxtb	r2, r3
 810785e:	8979      	ldrh	r1, [r7, #10]
 8107860:	4b20      	ldr	r3, [pc, #128]	@ (81078e4 <I2C_RequestMemoryWrite+0xa4>)
 8107862:	9300      	str	r3, [sp, #0]
 8107864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107868:	68f8      	ldr	r0, [r7, #12]
 810786a:	f001 f9c1 	bl	8108bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810786e:	69fa      	ldr	r2, [r7, #28]
 8107870:	69b9      	ldr	r1, [r7, #24]
 8107872:	68f8      	ldr	r0, [r7, #12]
 8107874:	f001 f851 	bl	810891a <I2C_WaitOnTXISFlagUntilTimeout>
 8107878:	4603      	mov	r3, r0
 810787a:	2b00      	cmp	r3, #0
 810787c:	d001      	beq.n	8107882 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810787e:	2301      	movs	r3, #1
 8107880:	e02c      	b.n	81078dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107882:	88fb      	ldrh	r3, [r7, #6]
 8107884:	2b01      	cmp	r3, #1
 8107886:	d105      	bne.n	8107894 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107888:	893b      	ldrh	r3, [r7, #8]
 810788a:	b2da      	uxtb	r2, r3
 810788c:	68fb      	ldr	r3, [r7, #12]
 810788e:	681b      	ldr	r3, [r3, #0]
 8107890:	629a      	str	r2, [r3, #40]	@ 0x28
 8107892:	e015      	b.n	81078c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107894:	893b      	ldrh	r3, [r7, #8]
 8107896:	0a1b      	lsrs	r3, r3, #8
 8107898:	b29b      	uxth	r3, r3
 810789a:	b2da      	uxtb	r2, r3
 810789c:	68fb      	ldr	r3, [r7, #12]
 810789e:	681b      	ldr	r3, [r3, #0]
 81078a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81078a2:	69fa      	ldr	r2, [r7, #28]
 81078a4:	69b9      	ldr	r1, [r7, #24]
 81078a6:	68f8      	ldr	r0, [r7, #12]
 81078a8:	f001 f837 	bl	810891a <I2C_WaitOnTXISFlagUntilTimeout>
 81078ac:	4603      	mov	r3, r0
 81078ae:	2b00      	cmp	r3, #0
 81078b0:	d001      	beq.n	81078b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81078b2:	2301      	movs	r3, #1
 81078b4:	e012      	b.n	81078dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81078b6:	893b      	ldrh	r3, [r7, #8]
 81078b8:	b2da      	uxtb	r2, r3
 81078ba:	68fb      	ldr	r3, [r7, #12]
 81078bc:	681b      	ldr	r3, [r3, #0]
 81078be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81078c0:	69fb      	ldr	r3, [r7, #28]
 81078c2:	9300      	str	r3, [sp, #0]
 81078c4:	69bb      	ldr	r3, [r7, #24]
 81078c6:	2200      	movs	r2, #0
 81078c8:	2180      	movs	r1, #128	@ 0x80
 81078ca:	68f8      	ldr	r0, [r7, #12]
 81078cc:	f000 ffcc 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 81078d0:	4603      	mov	r3, r0
 81078d2:	2b00      	cmp	r3, #0
 81078d4:	d001      	beq.n	81078da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81078d6:	2301      	movs	r3, #1
 81078d8:	e000      	b.n	81078dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81078da:	2300      	movs	r3, #0
}
 81078dc:	4618      	mov	r0, r3
 81078de:	3710      	adds	r7, #16
 81078e0:	46bd      	mov	sp, r7
 81078e2:	bd80      	pop	{r7, pc}
 81078e4:	80002000 	.word	0x80002000

081078e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 81078e8:	b580      	push	{r7, lr}
 81078ea:	b086      	sub	sp, #24
 81078ec:	af02      	add	r7, sp, #8
 81078ee:	60f8      	str	r0, [r7, #12]
 81078f0:	4608      	mov	r0, r1
 81078f2:	4611      	mov	r1, r2
 81078f4:	461a      	mov	r2, r3
 81078f6:	4603      	mov	r3, r0
 81078f8:	817b      	strh	r3, [r7, #10]
 81078fa:	460b      	mov	r3, r1
 81078fc:	813b      	strh	r3, [r7, #8]
 81078fe:	4613      	mov	r3, r2
 8107900:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8107902:	88fb      	ldrh	r3, [r7, #6]
 8107904:	b2da      	uxtb	r2, r3
 8107906:	8979      	ldrh	r1, [r7, #10]
 8107908:	4b20      	ldr	r3, [pc, #128]	@ (810798c <I2C_RequestMemoryRead+0xa4>)
 810790a:	9300      	str	r3, [sp, #0]
 810790c:	2300      	movs	r3, #0
 810790e:	68f8      	ldr	r0, [r7, #12]
 8107910:	f001 f96e 	bl	8108bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107914:	69fa      	ldr	r2, [r7, #28]
 8107916:	69b9      	ldr	r1, [r7, #24]
 8107918:	68f8      	ldr	r0, [r7, #12]
 810791a:	f000 fffe 	bl	810891a <I2C_WaitOnTXISFlagUntilTimeout>
 810791e:	4603      	mov	r3, r0
 8107920:	2b00      	cmp	r3, #0
 8107922:	d001      	beq.n	8107928 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8107924:	2301      	movs	r3, #1
 8107926:	e02c      	b.n	8107982 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107928:	88fb      	ldrh	r3, [r7, #6]
 810792a:	2b01      	cmp	r3, #1
 810792c:	d105      	bne.n	810793a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810792e:	893b      	ldrh	r3, [r7, #8]
 8107930:	b2da      	uxtb	r2, r3
 8107932:	68fb      	ldr	r3, [r7, #12]
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	629a      	str	r2, [r3, #40]	@ 0x28
 8107938:	e015      	b.n	8107966 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810793a:	893b      	ldrh	r3, [r7, #8]
 810793c:	0a1b      	lsrs	r3, r3, #8
 810793e:	b29b      	uxth	r3, r3
 8107940:	b2da      	uxtb	r2, r3
 8107942:	68fb      	ldr	r3, [r7, #12]
 8107944:	681b      	ldr	r3, [r3, #0]
 8107946:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107948:	69fa      	ldr	r2, [r7, #28]
 810794a:	69b9      	ldr	r1, [r7, #24]
 810794c:	68f8      	ldr	r0, [r7, #12]
 810794e:	f000 ffe4 	bl	810891a <I2C_WaitOnTXISFlagUntilTimeout>
 8107952:	4603      	mov	r3, r0
 8107954:	2b00      	cmp	r3, #0
 8107956:	d001      	beq.n	810795c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8107958:	2301      	movs	r3, #1
 810795a:	e012      	b.n	8107982 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810795c:	893b      	ldrh	r3, [r7, #8]
 810795e:	b2da      	uxtb	r2, r3
 8107960:	68fb      	ldr	r3, [r7, #12]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8107966:	69fb      	ldr	r3, [r7, #28]
 8107968:	9300      	str	r3, [sp, #0]
 810796a:	69bb      	ldr	r3, [r7, #24]
 810796c:	2200      	movs	r2, #0
 810796e:	2140      	movs	r1, #64	@ 0x40
 8107970:	68f8      	ldr	r0, [r7, #12]
 8107972:	f000 ff79 	bl	8108868 <I2C_WaitOnFlagUntilTimeout>
 8107976:	4603      	mov	r3, r0
 8107978:	2b00      	cmp	r3, #0
 810797a:	d001      	beq.n	8107980 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810797c:	2301      	movs	r3, #1
 810797e:	e000      	b.n	8107982 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107980:	2300      	movs	r3, #0
}
 8107982:	4618      	mov	r0, r3
 8107984:	3710      	adds	r7, #16
 8107986:	46bd      	mov	sp, r7
 8107988:	bd80      	pop	{r7, pc}
 810798a:	bf00      	nop
 810798c:	80002000 	.word	0x80002000

08107990 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107990:	b580      	push	{r7, lr}
 8107992:	b084      	sub	sp, #16
 8107994:	af00      	add	r7, sp, #0
 8107996:	6078      	str	r0, [r7, #4]
 8107998:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81079a0:	b2db      	uxtb	r3, r3
 81079a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 81079a6:	2b28      	cmp	r3, #40	@ 0x28
 81079a8:	d16a      	bne.n	8107a80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	699b      	ldr	r3, [r3, #24]
 81079b0:	0c1b      	lsrs	r3, r3, #16
 81079b2:	b2db      	uxtb	r3, r3
 81079b4:	f003 0301 	and.w	r3, r3, #1
 81079b8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	681b      	ldr	r3, [r3, #0]
 81079be:	699b      	ldr	r3, [r3, #24]
 81079c0:	0c1b      	lsrs	r3, r3, #16
 81079c2:	b29b      	uxth	r3, r3
 81079c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 81079c8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81079ca:	687b      	ldr	r3, [r7, #4]
 81079cc:	681b      	ldr	r3, [r3, #0]
 81079ce:	689b      	ldr	r3, [r3, #8]
 81079d0:	b29b      	uxth	r3, r3
 81079d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81079d6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	68db      	ldr	r3, [r3, #12]
 81079de:	b29b      	uxth	r3, r3
 81079e0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 81079e4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	68db      	ldr	r3, [r3, #12]
 81079ea:	2b02      	cmp	r3, #2
 81079ec:	d138      	bne.n	8107a60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 81079ee:	897b      	ldrh	r3, [r7, #10]
 81079f0:	09db      	lsrs	r3, r3, #7
 81079f2:	b29a      	uxth	r2, r3
 81079f4:	89bb      	ldrh	r3, [r7, #12]
 81079f6:	4053      	eors	r3, r2
 81079f8:	b29b      	uxth	r3, r3
 81079fa:	f003 0306 	and.w	r3, r3, #6
 81079fe:	2b00      	cmp	r3, #0
 8107a00:	d11c      	bne.n	8107a3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107a02:	897b      	ldrh	r3, [r7, #10]
 8107a04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107a0a:	1c5a      	adds	r2, r3, #1
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8107a10:	687b      	ldr	r3, [r7, #4]
 8107a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107a14:	2b02      	cmp	r3, #2
 8107a16:	d13b      	bne.n	8107a90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	2200      	movs	r2, #0
 8107a1c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107a1e:	687b      	ldr	r3, [r7, #4]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	2208      	movs	r2, #8
 8107a24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	2200      	movs	r2, #0
 8107a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a2e:	89ba      	ldrh	r2, [r7, #12]
 8107a30:	7bfb      	ldrb	r3, [r7, #15]
 8107a32:	4619      	mov	r1, r3
 8107a34:	6878      	ldr	r0, [r7, #4]
 8107a36:	f7ff f9e8 	bl	8106e0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107a3a:	e029      	b.n	8107a90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107a3c:	893b      	ldrh	r3, [r7, #8]
 8107a3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107a44:	6878      	ldr	r0, [r7, #4]
 8107a46:	f001 f989 	bl	8108d5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	2200      	movs	r2, #0
 8107a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a52:	89ba      	ldrh	r2, [r7, #12]
 8107a54:	7bfb      	ldrb	r3, [r7, #15]
 8107a56:	4619      	mov	r1, r3
 8107a58:	6878      	ldr	r0, [r7, #4]
 8107a5a:	f7ff f9d6 	bl	8106e0a <HAL_I2C_AddrCallback>
}
 8107a5e:	e017      	b.n	8107a90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107a64:	6878      	ldr	r0, [r7, #4]
 8107a66:	f001 f979 	bl	8108d5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	2200      	movs	r2, #0
 8107a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a72:	89ba      	ldrh	r2, [r7, #12]
 8107a74:	7bfb      	ldrb	r3, [r7, #15]
 8107a76:	4619      	mov	r1, r3
 8107a78:	6878      	ldr	r0, [r7, #4]
 8107a7a:	f7ff f9c6 	bl	8106e0a <HAL_I2C_AddrCallback>
}
 8107a7e:	e007      	b.n	8107a90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	681b      	ldr	r3, [r3, #0]
 8107a84:	2208      	movs	r2, #8
 8107a86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	2200      	movs	r2, #0
 8107a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8107a90:	bf00      	nop
 8107a92:	3710      	adds	r7, #16
 8107a94:	46bd      	mov	sp, r7
 8107a96:	bd80      	pop	{r7, pc}

08107a98 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107a98:	b580      	push	{r7, lr}
 8107a9a:	b082      	sub	sp, #8
 8107a9c:	af00      	add	r7, sp, #0
 8107a9e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	2200      	movs	r2, #0
 8107aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107aae:	b2db      	uxtb	r3, r3
 8107ab0:	2b21      	cmp	r3, #33	@ 0x21
 8107ab2:	d115      	bne.n	8107ae0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	2220      	movs	r2, #32
 8107ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	2211      	movs	r2, #17
 8107ac0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	2200      	movs	r2, #0
 8107ac6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107ac8:	2101      	movs	r1, #1
 8107aca:	6878      	ldr	r0, [r7, #4]
 8107acc:	f001 f946 	bl	8108d5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	2200      	movs	r2, #0
 8107ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8107ad8:	6878      	ldr	r0, [r7, #4]
 8107ada:	f7ff f96e 	bl	8106dba <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107ade:	e014      	b.n	8107b0a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	2220      	movs	r2, #32
 8107ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	2212      	movs	r2, #18
 8107aec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	2200      	movs	r2, #0
 8107af2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107af4:	2102      	movs	r1, #2
 8107af6:	6878      	ldr	r0, [r7, #4]
 8107af8:	f001 f930 	bl	8108d5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	2200      	movs	r2, #0
 8107b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8107b04:	6878      	ldr	r0, [r7, #4]
 8107b06:	f7ff f962 	bl	8106dce <HAL_I2C_MasterRxCpltCallback>
}
 8107b0a:	bf00      	nop
 8107b0c:	3708      	adds	r7, #8
 8107b0e:	46bd      	mov	sp, r7
 8107b10:	bd80      	pop	{r7, pc}

08107b12 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107b12:	b580      	push	{r7, lr}
 8107b14:	b084      	sub	sp, #16
 8107b16:	af00      	add	r7, sp, #0
 8107b18:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	681b      	ldr	r3, [r3, #0]
 8107b1e:	681b      	ldr	r3, [r3, #0]
 8107b20:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b22:	687b      	ldr	r3, [r7, #4]
 8107b24:	2200      	movs	r2, #0
 8107b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107b2a:	68fb      	ldr	r3, [r7, #12]
 8107b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107b30:	2b00      	cmp	r3, #0
 8107b32:	d008      	beq.n	8107b46 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	681a      	ldr	r2, [r3, #0]
 8107b3a:	687b      	ldr	r3, [r7, #4]
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8107b42:	601a      	str	r2, [r3, #0]
 8107b44:	e00c      	b.n	8107b60 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107b46:	68fb      	ldr	r3, [r7, #12]
 8107b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107b4c:	2b00      	cmp	r3, #0
 8107b4e:	d007      	beq.n	8107b60 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	681a      	ldr	r2, [r3, #0]
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	681b      	ldr	r3, [r3, #0]
 8107b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8107b5e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107b66:	b2db      	uxtb	r3, r3
 8107b68:	2b29      	cmp	r3, #41	@ 0x29
 8107b6a:	d112      	bne.n	8107b92 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	2228      	movs	r2, #40	@ 0x28
 8107b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	2221      	movs	r2, #33	@ 0x21
 8107b78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107b7a:	2101      	movs	r1, #1
 8107b7c:	6878      	ldr	r0, [r7, #4]
 8107b7e:	f001 f8ed 	bl	8108d5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	2200      	movs	r2, #0
 8107b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107b8a:	6878      	ldr	r0, [r7, #4]
 8107b8c:	f7ff f929 	bl	8106de2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107b90:	e017      	b.n	8107bc2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107b98:	b2db      	uxtb	r3, r3
 8107b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8107b9c:	d111      	bne.n	8107bc2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	2228      	movs	r2, #40	@ 0x28
 8107ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	2222      	movs	r2, #34	@ 0x22
 8107baa:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107bac:	2102      	movs	r1, #2
 8107bae:	6878      	ldr	r0, [r7, #4]
 8107bb0:	f001 f8d4 	bl	8108d5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	2200      	movs	r2, #0
 8107bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107bbc:	6878      	ldr	r0, [r7, #4]
 8107bbe:	f7ff f91a 	bl	8106df6 <HAL_I2C_SlaveRxCpltCallback>
}
 8107bc2:	bf00      	nop
 8107bc4:	3710      	adds	r7, #16
 8107bc6:	46bd      	mov	sp, r7
 8107bc8:	bd80      	pop	{r7, pc}
	...

08107bcc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107bcc:	b580      	push	{r7, lr}
 8107bce:	b086      	sub	sp, #24
 8107bd0:	af00      	add	r7, sp, #0
 8107bd2:	6078      	str	r0, [r7, #4]
 8107bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8107bd6:	683b      	ldr	r3, [r7, #0]
 8107bd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	2220      	movs	r2, #32
 8107be0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107be8:	b2db      	uxtb	r3, r3
 8107bea:	2b21      	cmp	r3, #33	@ 0x21
 8107bec:	d107      	bne.n	8107bfe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107bee:	2101      	movs	r1, #1
 8107bf0:	6878      	ldr	r0, [r7, #4]
 8107bf2:	f001 f8b3 	bl	8108d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	2211      	movs	r2, #17
 8107bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8107bfc:	e00c      	b.n	8107c18 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107bfe:	687b      	ldr	r3, [r7, #4]
 8107c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107c04:	b2db      	uxtb	r3, r3
 8107c06:	2b22      	cmp	r3, #34	@ 0x22
 8107c08:	d106      	bne.n	8107c18 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107c0a:	2102      	movs	r1, #2
 8107c0c:	6878      	ldr	r0, [r7, #4]
 8107c0e:	f001 f8a5 	bl	8108d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8107c12:	687b      	ldr	r3, [r7, #4]
 8107c14:	2212      	movs	r2, #18
 8107c16:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	681b      	ldr	r3, [r3, #0]
 8107c1c:	6859      	ldr	r1, [r3, #4]
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	681a      	ldr	r2, [r3, #0]
 8107c22:	4b4c      	ldr	r3, [pc, #304]	@ (8107d54 <I2C_ITMasterCplt+0x188>)
 8107c24:	400b      	ands	r3, r1
 8107c26:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	2200      	movs	r2, #0
 8107c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	4a49      	ldr	r2, [pc, #292]	@ (8107d58 <I2C_ITMasterCplt+0x18c>)
 8107c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8107c34:	697b      	ldr	r3, [r7, #20]
 8107c36:	f003 0310 	and.w	r3, r3, #16
 8107c3a:	2b00      	cmp	r3, #0
 8107c3c:	d009      	beq.n	8107c52 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	681b      	ldr	r3, [r3, #0]
 8107c42:	2210      	movs	r2, #16
 8107c44:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107c46:	687b      	ldr	r3, [r7, #4]
 8107c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c4a:	f043 0204 	orr.w	r2, r3, #4
 8107c4e:	687b      	ldr	r3, [r7, #4]
 8107c50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107c58:	b2db      	uxtb	r3, r3
 8107c5a:	2b60      	cmp	r3, #96	@ 0x60
 8107c5c:	d10a      	bne.n	8107c74 <I2C_ITMasterCplt+0xa8>
 8107c5e:	697b      	ldr	r3, [r7, #20]
 8107c60:	f003 0304 	and.w	r3, r3, #4
 8107c64:	2b00      	cmp	r3, #0
 8107c66:	d005      	beq.n	8107c74 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107c6e:	b2db      	uxtb	r3, r3
 8107c70:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8107c72:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107c74:	6878      	ldr	r0, [r7, #4]
 8107c76:	f000 fc30 	bl	81084da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c7e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107c86:	b2db      	uxtb	r3, r3
 8107c88:	2b60      	cmp	r3, #96	@ 0x60
 8107c8a:	d002      	beq.n	8107c92 <I2C_ITMasterCplt+0xc6>
 8107c8c:	693b      	ldr	r3, [r7, #16]
 8107c8e:	2b00      	cmp	r3, #0
 8107c90:	d006      	beq.n	8107ca0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c96:	4619      	mov	r1, r3
 8107c98:	6878      	ldr	r0, [r7, #4]
 8107c9a:	f000 fb07 	bl	81082ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107c9e:	e054      	b.n	8107d4a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107ca6:	b2db      	uxtb	r3, r3
 8107ca8:	2b21      	cmp	r3, #33	@ 0x21
 8107caa:	d124      	bne.n	8107cf6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	2220      	movs	r2, #32
 8107cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	2200      	movs	r2, #0
 8107cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8107cc0:	b2db      	uxtb	r3, r3
 8107cc2:	2b40      	cmp	r3, #64	@ 0x40
 8107cc4:	d10b      	bne.n	8107cde <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	2200      	movs	r2, #0
 8107cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	2200      	movs	r2, #0
 8107cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8107cd6:	6878      	ldr	r0, [r7, #4]
 8107cd8:	f7ff f8af 	bl	8106e3a <HAL_I2C_MemTxCpltCallback>
}
 8107cdc:	e035      	b.n	8107d4a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107cde:	687b      	ldr	r3, [r7, #4]
 8107ce0:	2200      	movs	r2, #0
 8107ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8107ce6:	687b      	ldr	r3, [r7, #4]
 8107ce8:	2200      	movs	r2, #0
 8107cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8107cee:	6878      	ldr	r0, [r7, #4]
 8107cf0:	f7ff f863 	bl	8106dba <HAL_I2C_MasterTxCpltCallback>
}
 8107cf4:	e029      	b.n	8107d4a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107cfc:	b2db      	uxtb	r3, r3
 8107cfe:	2b22      	cmp	r3, #34	@ 0x22
 8107d00:	d123      	bne.n	8107d4a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8107d02:	687b      	ldr	r3, [r7, #4]
 8107d04:	2220      	movs	r2, #32
 8107d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107d0a:	687b      	ldr	r3, [r7, #4]
 8107d0c:	2200      	movs	r2, #0
 8107d0e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8107d16:	b2db      	uxtb	r3, r3
 8107d18:	2b40      	cmp	r3, #64	@ 0x40
 8107d1a:	d10b      	bne.n	8107d34 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	2200      	movs	r2, #0
 8107d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	2200      	movs	r2, #0
 8107d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8107d2c:	6878      	ldr	r0, [r7, #4]
 8107d2e:	f7fb fa69 	bl	8103204 <HAL_I2C_MemRxCpltCallback>
}
 8107d32:	e00a      	b.n	8107d4a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	2200      	movs	r2, #0
 8107d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8107d3c:	687b      	ldr	r3, [r7, #4]
 8107d3e:	2200      	movs	r2, #0
 8107d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8107d44:	6878      	ldr	r0, [r7, #4]
 8107d46:	f7ff f842 	bl	8106dce <HAL_I2C_MasterRxCpltCallback>
}
 8107d4a:	bf00      	nop
 8107d4c:	3718      	adds	r7, #24
 8107d4e:	46bd      	mov	sp, r7
 8107d50:	bd80      	pop	{r7, pc}
 8107d52:	bf00      	nop
 8107d54:	fe00e800 	.word	0xfe00e800
 8107d58:	ffff0000 	.word	0xffff0000

08107d5c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107d5c:	b580      	push	{r7, lr}
 8107d5e:	b086      	sub	sp, #24
 8107d60:	af00      	add	r7, sp, #0
 8107d62:	6078      	str	r0, [r7, #4]
 8107d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	681b      	ldr	r3, [r3, #0]
 8107d6a:	681b      	ldr	r3, [r3, #0]
 8107d6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107d6e:	683b      	ldr	r3, [r7, #0]
 8107d70:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d76:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107d78:	687b      	ldr	r3, [r7, #4]
 8107d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107d7e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	2220      	movs	r2, #32
 8107d86:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107d88:	7afb      	ldrb	r3, [r7, #11]
 8107d8a:	2b21      	cmp	r3, #33	@ 0x21
 8107d8c:	d002      	beq.n	8107d94 <I2C_ITSlaveCplt+0x38>
 8107d8e:	7afb      	ldrb	r3, [r7, #11]
 8107d90:	2b29      	cmp	r3, #41	@ 0x29
 8107d92:	d108      	bne.n	8107da6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107d94:	f248 0101 	movw	r1, #32769	@ 0x8001
 8107d98:	6878      	ldr	r0, [r7, #4]
 8107d9a:	f000 ffdf 	bl	8108d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	2221      	movs	r2, #33	@ 0x21
 8107da2:	631a      	str	r2, [r3, #48]	@ 0x30
 8107da4:	e019      	b.n	8107dda <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107da6:	7afb      	ldrb	r3, [r7, #11]
 8107da8:	2b22      	cmp	r3, #34	@ 0x22
 8107daa:	d002      	beq.n	8107db2 <I2C_ITSlaveCplt+0x56>
 8107dac:	7afb      	ldrb	r3, [r7, #11]
 8107dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8107db0:	d108      	bne.n	8107dc4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107db2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8107db6:	6878      	ldr	r0, [r7, #4]
 8107db8:	f000 ffd0 	bl	8108d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107dbc:	687b      	ldr	r3, [r7, #4]
 8107dbe:	2222      	movs	r2, #34	@ 0x22
 8107dc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8107dc2:	e00a      	b.n	8107dda <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8107dc4:	7afb      	ldrb	r3, [r7, #11]
 8107dc6:	2b28      	cmp	r3, #40	@ 0x28
 8107dc8:	d107      	bne.n	8107dda <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8107dca:	f248 0103 	movw	r1, #32771	@ 0x8003
 8107dce:	6878      	ldr	r0, [r7, #4]
 8107dd0:	f000 ffc4 	bl	8108d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8107dd4:	687b      	ldr	r3, [r7, #4]
 8107dd6:	2200      	movs	r2, #0
 8107dd8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	681b      	ldr	r3, [r3, #0]
 8107dde:	685a      	ldr	r2, [r3, #4]
 8107de0:	687b      	ldr	r3, [r7, #4]
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8107de8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	681b      	ldr	r3, [r3, #0]
 8107dee:	6859      	ldr	r1, [r3, #4]
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	681a      	ldr	r2, [r3, #0]
 8107df4:	4b7f      	ldr	r3, [pc, #508]	@ (8107ff4 <I2C_ITSlaveCplt+0x298>)
 8107df6:	400b      	ands	r3, r1
 8107df8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107dfa:	6878      	ldr	r0, [r7, #4]
 8107dfc:	f000 fb6d 	bl	81084da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107e00:	693b      	ldr	r3, [r7, #16]
 8107e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107e06:	2b00      	cmp	r3, #0
 8107e08:	d07a      	beq.n	8107f00 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	681b      	ldr	r3, [r3, #0]
 8107e0e:	681a      	ldr	r2, [r3, #0]
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	681b      	ldr	r3, [r3, #0]
 8107e14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8107e18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e1e:	2b00      	cmp	r3, #0
 8107e20:	f000 8111 	beq.w	8108046 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	4a73      	ldr	r2, [pc, #460]	@ (8107ff8 <I2C_ITSlaveCplt+0x29c>)
 8107e2c:	4293      	cmp	r3, r2
 8107e2e:	d059      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	4a71      	ldr	r2, [pc, #452]	@ (8107ffc <I2C_ITSlaveCplt+0x2a0>)
 8107e38:	4293      	cmp	r3, r2
 8107e3a:	d053      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e40:	681b      	ldr	r3, [r3, #0]
 8107e42:	4a6f      	ldr	r2, [pc, #444]	@ (8108000 <I2C_ITSlaveCplt+0x2a4>)
 8107e44:	4293      	cmp	r3, r2
 8107e46:	d04d      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e4c:	681b      	ldr	r3, [r3, #0]
 8107e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8108004 <I2C_ITSlaveCplt+0x2a8>)
 8107e50:	4293      	cmp	r3, r2
 8107e52:	d047      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e58:	681b      	ldr	r3, [r3, #0]
 8107e5a:	4a6b      	ldr	r2, [pc, #428]	@ (8108008 <I2C_ITSlaveCplt+0x2ac>)
 8107e5c:	4293      	cmp	r3, r2
 8107e5e:	d041      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e60:	687b      	ldr	r3, [r7, #4]
 8107e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e64:	681b      	ldr	r3, [r3, #0]
 8107e66:	4a69      	ldr	r2, [pc, #420]	@ (810800c <I2C_ITSlaveCplt+0x2b0>)
 8107e68:	4293      	cmp	r3, r2
 8107e6a:	d03b      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e70:	681b      	ldr	r3, [r3, #0]
 8107e72:	4a67      	ldr	r2, [pc, #412]	@ (8108010 <I2C_ITSlaveCplt+0x2b4>)
 8107e74:	4293      	cmp	r3, r2
 8107e76:	d035      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e78:	687b      	ldr	r3, [r7, #4]
 8107e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	4a65      	ldr	r2, [pc, #404]	@ (8108014 <I2C_ITSlaveCplt+0x2b8>)
 8107e80:	4293      	cmp	r3, r2
 8107e82:	d02f      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	4a63      	ldr	r2, [pc, #396]	@ (8108018 <I2C_ITSlaveCplt+0x2bc>)
 8107e8c:	4293      	cmp	r3, r2
 8107e8e:	d029      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e94:	681b      	ldr	r3, [r3, #0]
 8107e96:	4a61      	ldr	r2, [pc, #388]	@ (810801c <I2C_ITSlaveCplt+0x2c0>)
 8107e98:	4293      	cmp	r3, r2
 8107e9a:	d023      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107e9c:	687b      	ldr	r3, [r7, #4]
 8107e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ea0:	681b      	ldr	r3, [r3, #0]
 8107ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8108020 <I2C_ITSlaveCplt+0x2c4>)
 8107ea4:	4293      	cmp	r3, r2
 8107ea6:	d01d      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107eac:	681b      	ldr	r3, [r3, #0]
 8107eae:	4a5d      	ldr	r2, [pc, #372]	@ (8108024 <I2C_ITSlaveCplt+0x2c8>)
 8107eb0:	4293      	cmp	r3, r2
 8107eb2:	d017      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	4a5b      	ldr	r2, [pc, #364]	@ (8108028 <I2C_ITSlaveCplt+0x2cc>)
 8107ebc:	4293      	cmp	r3, r2
 8107ebe:	d011      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ec4:	681b      	ldr	r3, [r3, #0]
 8107ec6:	4a59      	ldr	r2, [pc, #356]	@ (810802c <I2C_ITSlaveCplt+0x2d0>)
 8107ec8:	4293      	cmp	r3, r2
 8107eca:	d00b      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ed0:	681b      	ldr	r3, [r3, #0]
 8107ed2:	4a57      	ldr	r2, [pc, #348]	@ (8108030 <I2C_ITSlaveCplt+0x2d4>)
 8107ed4:	4293      	cmp	r3, r2
 8107ed6:	d005      	beq.n	8107ee4 <I2C_ITSlaveCplt+0x188>
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107edc:	681b      	ldr	r3, [r3, #0]
 8107ede:	4a55      	ldr	r2, [pc, #340]	@ (8108034 <I2C_ITSlaveCplt+0x2d8>)
 8107ee0:	4293      	cmp	r3, r2
 8107ee2:	d105      	bne.n	8107ef0 <I2C_ITSlaveCplt+0x194>
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ee8:	681b      	ldr	r3, [r3, #0]
 8107eea:	685b      	ldr	r3, [r3, #4]
 8107eec:	b29b      	uxth	r3, r3
 8107eee:	e004      	b.n	8107efa <I2C_ITSlaveCplt+0x19e>
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ef4:	681b      	ldr	r3, [r3, #0]
 8107ef6:	685b      	ldr	r3, [r3, #4]
 8107ef8:	b29b      	uxth	r3, r3
 8107efa:	687a      	ldr	r2, [r7, #4]
 8107efc:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8107efe:	e0a2      	b.n	8108046 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107f00:	693b      	ldr	r3, [r7, #16]
 8107f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107f06:	2b00      	cmp	r3, #0
 8107f08:	f000 809d 	beq.w	8108046 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107f0c:	687b      	ldr	r3, [r7, #4]
 8107f0e:	681b      	ldr	r3, [r3, #0]
 8107f10:	681a      	ldr	r2, [r3, #0]
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8107f1a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f20:	2b00      	cmp	r3, #0
 8107f22:	f000 8090 	beq.w	8108046 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8107f26:	687b      	ldr	r3, [r7, #4]
 8107f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	4a32      	ldr	r2, [pc, #200]	@ (8107ff8 <I2C_ITSlaveCplt+0x29c>)
 8107f2e:	4293      	cmp	r3, r2
 8107f30:	d059      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f36:	681b      	ldr	r3, [r3, #0]
 8107f38:	4a30      	ldr	r2, [pc, #192]	@ (8107ffc <I2C_ITSlaveCplt+0x2a0>)
 8107f3a:	4293      	cmp	r3, r2
 8107f3c:	d053      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f42:	681b      	ldr	r3, [r3, #0]
 8107f44:	4a2e      	ldr	r2, [pc, #184]	@ (8108000 <I2C_ITSlaveCplt+0x2a4>)
 8107f46:	4293      	cmp	r3, r2
 8107f48:	d04d      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f4e:	681b      	ldr	r3, [r3, #0]
 8107f50:	4a2c      	ldr	r2, [pc, #176]	@ (8108004 <I2C_ITSlaveCplt+0x2a8>)
 8107f52:	4293      	cmp	r3, r2
 8107f54:	d047      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f5a:	681b      	ldr	r3, [r3, #0]
 8107f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8108008 <I2C_ITSlaveCplt+0x2ac>)
 8107f5e:	4293      	cmp	r3, r2
 8107f60:	d041      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f66:	681b      	ldr	r3, [r3, #0]
 8107f68:	4a28      	ldr	r2, [pc, #160]	@ (810800c <I2C_ITSlaveCplt+0x2b0>)
 8107f6a:	4293      	cmp	r3, r2
 8107f6c:	d03b      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f72:	681b      	ldr	r3, [r3, #0]
 8107f74:	4a26      	ldr	r2, [pc, #152]	@ (8108010 <I2C_ITSlaveCplt+0x2b4>)
 8107f76:	4293      	cmp	r3, r2
 8107f78:	d035      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f7e:	681b      	ldr	r3, [r3, #0]
 8107f80:	4a24      	ldr	r2, [pc, #144]	@ (8108014 <I2C_ITSlaveCplt+0x2b8>)
 8107f82:	4293      	cmp	r3, r2
 8107f84:	d02f      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f8a:	681b      	ldr	r3, [r3, #0]
 8107f8c:	4a22      	ldr	r2, [pc, #136]	@ (8108018 <I2C_ITSlaveCplt+0x2bc>)
 8107f8e:	4293      	cmp	r3, r2
 8107f90:	d029      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	4a20      	ldr	r2, [pc, #128]	@ (810801c <I2C_ITSlaveCplt+0x2c0>)
 8107f9a:	4293      	cmp	r3, r2
 8107f9c:	d023      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107f9e:	687b      	ldr	r3, [r7, #4]
 8107fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fa2:	681b      	ldr	r3, [r3, #0]
 8107fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8108020 <I2C_ITSlaveCplt+0x2c4>)
 8107fa6:	4293      	cmp	r3, r2
 8107fa8:	d01d      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fae:	681b      	ldr	r3, [r3, #0]
 8107fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8108024 <I2C_ITSlaveCplt+0x2c8>)
 8107fb2:	4293      	cmp	r3, r2
 8107fb4:	d017      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8108028 <I2C_ITSlaveCplt+0x2cc>)
 8107fbe:	4293      	cmp	r3, r2
 8107fc0:	d011      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	4a18      	ldr	r2, [pc, #96]	@ (810802c <I2C_ITSlaveCplt+0x2d0>)
 8107fca:	4293      	cmp	r3, r2
 8107fcc:	d00b      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	4a16      	ldr	r2, [pc, #88]	@ (8108030 <I2C_ITSlaveCplt+0x2d4>)
 8107fd6:	4293      	cmp	r3, r2
 8107fd8:	d005      	beq.n	8107fe6 <I2C_ITSlaveCplt+0x28a>
 8107fda:	687b      	ldr	r3, [r7, #4]
 8107fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	4a14      	ldr	r2, [pc, #80]	@ (8108034 <I2C_ITSlaveCplt+0x2d8>)
 8107fe2:	4293      	cmp	r3, r2
 8107fe4:	d128      	bne.n	8108038 <I2C_ITSlaveCplt+0x2dc>
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107fea:	681b      	ldr	r3, [r3, #0]
 8107fec:	685b      	ldr	r3, [r3, #4]
 8107fee:	b29b      	uxth	r3, r3
 8107ff0:	e027      	b.n	8108042 <I2C_ITSlaveCplt+0x2e6>
 8107ff2:	bf00      	nop
 8107ff4:	fe00e800 	.word	0xfe00e800
 8107ff8:	40020010 	.word	0x40020010
 8107ffc:	40020028 	.word	0x40020028
 8108000:	40020040 	.word	0x40020040
 8108004:	40020058 	.word	0x40020058
 8108008:	40020070 	.word	0x40020070
 810800c:	40020088 	.word	0x40020088
 8108010:	400200a0 	.word	0x400200a0
 8108014:	400200b8 	.word	0x400200b8
 8108018:	40020410 	.word	0x40020410
 810801c:	40020428 	.word	0x40020428
 8108020:	40020440 	.word	0x40020440
 8108024:	40020458 	.word	0x40020458
 8108028:	40020470 	.word	0x40020470
 810802c:	40020488 	.word	0x40020488
 8108030:	400204a0 	.word	0x400204a0
 8108034:	400204b8 	.word	0x400204b8
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	685b      	ldr	r3, [r3, #4]
 8108040:	b29b      	uxth	r3, r3
 8108042:	687a      	ldr	r2, [r7, #4]
 8108044:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8108046:	697b      	ldr	r3, [r7, #20]
 8108048:	f003 0304 	and.w	r3, r3, #4
 810804c:	2b00      	cmp	r3, #0
 810804e:	d020      	beq.n	8108092 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8108050:	697b      	ldr	r3, [r7, #20]
 8108052:	f023 0304 	bic.w	r3, r3, #4
 8108056:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	681b      	ldr	r3, [r3, #0]
 810805c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108062:	b2d2      	uxtb	r2, r2
 8108064:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810806a:	1c5a      	adds	r2, r3, #1
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8108074:	2b00      	cmp	r3, #0
 8108076:	d00c      	beq.n	8108092 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810807c:	3b01      	subs	r3, #1
 810807e:	b29a      	uxth	r2, r3
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8108084:	687b      	ldr	r3, [r7, #4]
 8108086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8108088:	b29b      	uxth	r3, r3
 810808a:	3b01      	subs	r3, #1
 810808c:	b29a      	uxth	r2, r3
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8108096:	b29b      	uxth	r3, r3
 8108098:	2b00      	cmp	r3, #0
 810809a:	d005      	beq.n	81080a8 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81080a0:	f043 0204 	orr.w	r2, r3, #4
 81080a4:	687b      	ldr	r3, [r7, #4]
 81080a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 81080a8:	697b      	ldr	r3, [r7, #20]
 81080aa:	f003 0310 	and.w	r3, r3, #16
 81080ae:	2b00      	cmp	r3, #0
 81080b0:	d049      	beq.n	8108146 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 81080b2:	693b      	ldr	r3, [r7, #16]
 81080b4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 81080b8:	2b00      	cmp	r3, #0
 81080ba:	d044      	beq.n	8108146 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81080c0:	b29b      	uxth	r3, r3
 81080c2:	2b00      	cmp	r3, #0
 81080c4:	d128      	bne.n	8108118 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81080cc:	b2db      	uxtb	r3, r3
 81080ce:	2b28      	cmp	r3, #40	@ 0x28
 81080d0:	d108      	bne.n	81080e4 <I2C_ITSlaveCplt+0x388>
 81080d2:	68fb      	ldr	r3, [r7, #12]
 81080d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81080d8:	d104      	bne.n	81080e4 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81080da:	6979      	ldr	r1, [r7, #20]
 81080dc:	6878      	ldr	r0, [r7, #4]
 81080de:	f000 f891 	bl	8108204 <I2C_ITListenCplt>
 81080e2:	e030      	b.n	8108146 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81080e4:	687b      	ldr	r3, [r7, #4]
 81080e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81080ea:	b2db      	uxtb	r3, r3
 81080ec:	2b29      	cmp	r3, #41	@ 0x29
 81080ee:	d10e      	bne.n	810810e <I2C_ITSlaveCplt+0x3b2>
 81080f0:	68fb      	ldr	r3, [r7, #12]
 81080f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 81080f6:	d00a      	beq.n	810810e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	2210      	movs	r2, #16
 81080fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8108100:	6878      	ldr	r0, [r7, #4]
 8108102:	f000 f9ea 	bl	81084da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8108106:	6878      	ldr	r0, [r7, #4]
 8108108:	f7ff fd03 	bl	8107b12 <I2C_ITSlaveSeqCplt>
 810810c:	e01b      	b.n	8108146 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810810e:	687b      	ldr	r3, [r7, #4]
 8108110:	681b      	ldr	r3, [r3, #0]
 8108112:	2210      	movs	r2, #16
 8108114:	61da      	str	r2, [r3, #28]
 8108116:	e016      	b.n	8108146 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108118:	687b      	ldr	r3, [r7, #4]
 810811a:	681b      	ldr	r3, [r3, #0]
 810811c:	2210      	movs	r2, #16
 810811e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108124:	f043 0204 	orr.w	r2, r3, #4
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810812c:	68fb      	ldr	r3, [r7, #12]
 810812e:	2b00      	cmp	r3, #0
 8108130:	d003      	beq.n	810813a <I2C_ITSlaveCplt+0x3de>
 8108132:	68fb      	ldr	r3, [r7, #12]
 8108134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8108138:	d105      	bne.n	8108146 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810813e:	4619      	mov	r1, r3
 8108140:	6878      	ldr	r0, [r7, #4]
 8108142:	f000 f8b3 	bl	81082ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8108146:	687b      	ldr	r3, [r7, #4]
 8108148:	2200      	movs	r2, #0
 810814a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 810814e:	687b      	ldr	r3, [r7, #4]
 8108150:	2200      	movs	r2, #0
 8108152:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8108154:	687b      	ldr	r3, [r7, #4]
 8108156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108158:	2b00      	cmp	r3, #0
 810815a:	d010      	beq.n	810817e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108160:	4619      	mov	r1, r3
 8108162:	6878      	ldr	r0, [r7, #4]
 8108164:	f000 f8a2 	bl	81082ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810816e:	b2db      	uxtb	r3, r3
 8108170:	2b28      	cmp	r3, #40	@ 0x28
 8108172:	d141      	bne.n	81081f8 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8108174:	6979      	ldr	r1, [r7, #20]
 8108176:	6878      	ldr	r0, [r7, #4]
 8108178:	f000 f844 	bl	8108204 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 810817c:	e03c      	b.n	81081f8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108182:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8108186:	d014      	beq.n	81081b2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8108188:	6878      	ldr	r0, [r7, #4]
 810818a:	f7ff fcc2 	bl	8107b12 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	4a1b      	ldr	r2, [pc, #108]	@ (8108200 <I2C_ITSlaveCplt+0x4a4>)
 8108192:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	2220      	movs	r2, #32
 8108198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	2200      	movs	r2, #0
 81081a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	2200      	movs	r2, #0
 81081a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 81081aa:	6878      	ldr	r0, [r7, #4]
 81081ac:	f7fe fe3b 	bl	8106e26 <HAL_I2C_ListenCpltCallback>
}
 81081b0:	e022      	b.n	81081f8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81081b8:	b2db      	uxtb	r3, r3
 81081ba:	2b22      	cmp	r3, #34	@ 0x22
 81081bc:	d10e      	bne.n	81081dc <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	2220      	movs	r2, #32
 81081c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81081c6:	687b      	ldr	r3, [r7, #4]
 81081c8:	2200      	movs	r2, #0
 81081ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	2200      	movs	r2, #0
 81081d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81081d4:	6878      	ldr	r0, [r7, #4]
 81081d6:	f7fe fe0e 	bl	8106df6 <HAL_I2C_SlaveRxCpltCallback>
}
 81081da:	e00d      	b.n	81081f8 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 81081dc:	687b      	ldr	r3, [r7, #4]
 81081de:	2220      	movs	r2, #32
 81081e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81081e4:	687b      	ldr	r3, [r7, #4]
 81081e6:	2200      	movs	r2, #0
 81081e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	2200      	movs	r2, #0
 81081ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81081f2:	6878      	ldr	r0, [r7, #4]
 81081f4:	f7fe fdf5 	bl	8106de2 <HAL_I2C_SlaveTxCpltCallback>
}
 81081f8:	bf00      	nop
 81081fa:	3718      	adds	r7, #24
 81081fc:	46bd      	mov	sp, r7
 81081fe:	bd80      	pop	{r7, pc}
 8108200:	ffff0000 	.word	0xffff0000

08108204 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8108204:	b580      	push	{r7, lr}
 8108206:	b082      	sub	sp, #8
 8108208:	af00      	add	r7, sp, #0
 810820a:	6078      	str	r0, [r7, #4]
 810820c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	4a25      	ldr	r2, [pc, #148]	@ (81082a8 <I2C_ITListenCplt+0xa4>)
 8108212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	2200      	movs	r2, #0
 8108218:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	2220      	movs	r2, #32
 810821e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8108222:	687b      	ldr	r3, [r7, #4]
 8108224:	2200      	movs	r2, #0
 8108226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 810822a:	687b      	ldr	r3, [r7, #4]
 810822c:	2200      	movs	r2, #0
 810822e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8108230:	683b      	ldr	r3, [r7, #0]
 8108232:	f003 0304 	and.w	r3, r3, #4
 8108236:	2b00      	cmp	r3, #0
 8108238:	d022      	beq.n	8108280 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	681b      	ldr	r3, [r3, #0]
 810823e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8108240:	687b      	ldr	r3, [r7, #4]
 8108242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108244:	b2d2      	uxtb	r2, r2
 8108246:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810824c:	1c5a      	adds	r2, r3, #1
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8108256:	2b00      	cmp	r3, #0
 8108258:	d012      	beq.n	8108280 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810825e:	3b01      	subs	r3, #1
 8108260:	b29a      	uxth	r2, r3
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8108266:	687b      	ldr	r3, [r7, #4]
 8108268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810826a:	b29b      	uxth	r3, r3
 810826c:	3b01      	subs	r3, #1
 810826e:	b29a      	uxth	r2, r3
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108278:	f043 0204 	orr.w	r2, r3, #4
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108280:	f248 0103 	movw	r1, #32771	@ 0x8003
 8108284:	6878      	ldr	r0, [r7, #4]
 8108286:	f000 fd69 	bl	8108d5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810828a:	687b      	ldr	r3, [r7, #4]
 810828c:	681b      	ldr	r3, [r3, #0]
 810828e:	2210      	movs	r2, #16
 8108290:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8108292:	687b      	ldr	r3, [r7, #4]
 8108294:	2200      	movs	r2, #0
 8108296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 810829a:	6878      	ldr	r0, [r7, #4]
 810829c:	f7fe fdc3 	bl	8106e26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 81082a0:	bf00      	nop
 81082a2:	3708      	adds	r7, #8
 81082a4:	46bd      	mov	sp, r7
 81082a6:	bd80      	pop	{r7, pc}
 81082a8:	ffff0000 	.word	0xffff0000

081082ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 81082ac:	b580      	push	{r7, lr}
 81082ae:	b084      	sub	sp, #16
 81082b0:	af00      	add	r7, sp, #0
 81082b2:	6078      	str	r0, [r7, #4]
 81082b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81082bc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 81082be:	687b      	ldr	r3, [r7, #4]
 81082c0:	2200      	movs	r2, #0
 81082c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	4a6d      	ldr	r2, [pc, #436]	@ (8108480 <I2C_ITError+0x1d4>)
 81082ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	2200      	movs	r2, #0
 81082d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81082d6:	683b      	ldr	r3, [r7, #0]
 81082d8:	431a      	orrs	r2, r3
 81082da:	687b      	ldr	r3, [r7, #4]
 81082dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 81082de:	7bfb      	ldrb	r3, [r7, #15]
 81082e0:	2b28      	cmp	r3, #40	@ 0x28
 81082e2:	d005      	beq.n	81082f0 <I2C_ITError+0x44>
 81082e4:	7bfb      	ldrb	r3, [r7, #15]
 81082e6:	2b29      	cmp	r3, #41	@ 0x29
 81082e8:	d002      	beq.n	81082f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 81082ea:	7bfb      	ldrb	r3, [r7, #15]
 81082ec:	2b2a      	cmp	r3, #42	@ 0x2a
 81082ee:	d10b      	bne.n	8108308 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81082f0:	2103      	movs	r1, #3
 81082f2:	6878      	ldr	r0, [r7, #4]
 81082f4:	f000 fd32 	bl	8108d5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	2228      	movs	r2, #40	@ 0x28
 81082fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8108300:	687b      	ldr	r3, [r7, #4]
 8108302:	4a60      	ldr	r2, [pc, #384]	@ (8108484 <I2C_ITError+0x1d8>)
 8108304:	635a      	str	r2, [r3, #52]	@ 0x34
 8108306:	e030      	b.n	810836a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108308:	f248 0103 	movw	r1, #32771	@ 0x8003
 810830c:	6878      	ldr	r0, [r7, #4]
 810830e:	f000 fd25 	bl	8108d5c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108312:	6878      	ldr	r0, [r7, #4]
 8108314:	f000 f8e1 	bl	81084da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8108318:	687b      	ldr	r3, [r7, #4]
 810831a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810831e:	b2db      	uxtb	r3, r3
 8108320:	2b60      	cmp	r3, #96	@ 0x60
 8108322:	d01f      	beq.n	8108364 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8108324:	687b      	ldr	r3, [r7, #4]
 8108326:	2220      	movs	r2, #32
 8108328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	681b      	ldr	r3, [r3, #0]
 8108330:	699b      	ldr	r3, [r3, #24]
 8108332:	f003 0320 	and.w	r3, r3, #32
 8108336:	2b20      	cmp	r3, #32
 8108338:	d114      	bne.n	8108364 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	681b      	ldr	r3, [r3, #0]
 810833e:	699b      	ldr	r3, [r3, #24]
 8108340:	f003 0310 	and.w	r3, r3, #16
 8108344:	2b10      	cmp	r3, #16
 8108346:	d109      	bne.n	810835c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	681b      	ldr	r3, [r3, #0]
 810834c:	2210      	movs	r2, #16
 810834e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108354:	f043 0204 	orr.w	r2, r3, #4
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	681b      	ldr	r3, [r3, #0]
 8108360:	2220      	movs	r2, #32
 8108362:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8108364:	687b      	ldr	r3, [r7, #4]
 8108366:	2200      	movs	r2, #0
 8108368:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810836e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108374:	2b00      	cmp	r3, #0
 8108376:	d039      	beq.n	81083ec <I2C_ITError+0x140>
 8108378:	68bb      	ldr	r3, [r7, #8]
 810837a:	2b11      	cmp	r3, #17
 810837c:	d002      	beq.n	8108384 <I2C_ITError+0xd8>
 810837e:	68bb      	ldr	r3, [r7, #8]
 8108380:	2b21      	cmp	r3, #33	@ 0x21
 8108382:	d133      	bne.n	81083ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8108384:	687b      	ldr	r3, [r7, #4]
 8108386:	681b      	ldr	r3, [r3, #0]
 8108388:	681b      	ldr	r3, [r3, #0]
 810838a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810838e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108392:	d107      	bne.n	81083a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8108394:	687b      	ldr	r3, [r7, #4]
 8108396:	681b      	ldr	r3, [r3, #0]
 8108398:	681a      	ldr	r2, [r3, #0]
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	681b      	ldr	r3, [r3, #0]
 810839e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 81083a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81083a4:	687b      	ldr	r3, [r7, #4]
 81083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083a8:	4618      	mov	r0, r3
 81083aa:	f7fd fa85 	bl	81058b8 <HAL_DMA_GetState>
 81083ae:	4603      	mov	r3, r0
 81083b0:	2b01      	cmp	r3, #1
 81083b2:	d017      	beq.n	81083e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083b8:	4a33      	ldr	r2, [pc, #204]	@ (8108488 <I2C_ITError+0x1dc>)
 81083ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81083bc:	687b      	ldr	r3, [r7, #4]
 81083be:	2200      	movs	r2, #0
 81083c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 81083c4:	687b      	ldr	r3, [r7, #4]
 81083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083c8:	4618      	mov	r0, r3
 81083ca:	f7fc f905 	bl	81045d8 <HAL_DMA_Abort_IT>
 81083ce:	4603      	mov	r3, r0
 81083d0:	2b00      	cmp	r3, #0
 81083d2:	d04d      	beq.n	8108470 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81083d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81083da:	687a      	ldr	r2, [r7, #4]
 81083dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 81083de:	4610      	mov	r0, r2
 81083e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81083e2:	e045      	b.n	8108470 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81083e4:	6878      	ldr	r0, [r7, #4]
 81083e6:	f000 f851 	bl	810848c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81083ea:	e041      	b.n	8108470 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81083f0:	2b00      	cmp	r3, #0
 81083f2:	d039      	beq.n	8108468 <I2C_ITError+0x1bc>
 81083f4:	68bb      	ldr	r3, [r7, #8]
 81083f6:	2b12      	cmp	r3, #18
 81083f8:	d002      	beq.n	8108400 <I2C_ITError+0x154>
 81083fa:	68bb      	ldr	r3, [r7, #8]
 81083fc:	2b22      	cmp	r3, #34	@ 0x22
 81083fe:	d133      	bne.n	8108468 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	681b      	ldr	r3, [r3, #0]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810840a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810840e:	d107      	bne.n	8108420 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108410:	687b      	ldr	r3, [r7, #4]
 8108412:	681b      	ldr	r3, [r3, #0]
 8108414:	681a      	ldr	r2, [r3, #0]
 8108416:	687b      	ldr	r3, [r7, #4]
 8108418:	681b      	ldr	r3, [r3, #0]
 810841a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810841e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108420:	687b      	ldr	r3, [r7, #4]
 8108422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108424:	4618      	mov	r0, r3
 8108426:	f7fd fa47 	bl	81058b8 <HAL_DMA_GetState>
 810842a:	4603      	mov	r3, r0
 810842c:	2b01      	cmp	r3, #1
 810842e:	d017      	beq.n	8108460 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108434:	4a14      	ldr	r2, [pc, #80]	@ (8108488 <I2C_ITError+0x1dc>)
 8108436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	2200      	movs	r2, #0
 810843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108444:	4618      	mov	r0, r3
 8108446:	f7fc f8c7 	bl	81045d8 <HAL_DMA_Abort_IT>
 810844a:	4603      	mov	r3, r0
 810844c:	2b00      	cmp	r3, #0
 810844e:	d011      	beq.n	8108474 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8108450:	687b      	ldr	r3, [r7, #4]
 8108452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108456:	687a      	ldr	r2, [r7, #4]
 8108458:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 810845a:	4610      	mov	r0, r2
 810845c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810845e:	e009      	b.n	8108474 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108460:	6878      	ldr	r0, [r7, #4]
 8108462:	f000 f813 	bl	810848c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108466:	e005      	b.n	8108474 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8108468:	6878      	ldr	r0, [r7, #4]
 810846a:	f000 f80f 	bl	810848c <I2C_TreatErrorCallback>
  }
}
 810846e:	e002      	b.n	8108476 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108470:	bf00      	nop
 8108472:	e000      	b.n	8108476 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108474:	bf00      	nop
}
 8108476:	bf00      	nop
 8108478:	3710      	adds	r7, #16
 810847a:	46bd      	mov	sp, r7
 810847c:	bd80      	pop	{r7, pc}
 810847e:	bf00      	nop
 8108480:	ffff0000 	.word	0xffff0000
 8108484:	08106e77 	.word	0x08106e77
 8108488:	0810882d 	.word	0x0810882d

0810848c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 810848c:	b580      	push	{r7, lr}
 810848e:	b082      	sub	sp, #8
 8108490:	af00      	add	r7, sp, #0
 8108492:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8108494:	687b      	ldr	r3, [r7, #4]
 8108496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810849a:	b2db      	uxtb	r3, r3
 810849c:	2b60      	cmp	r3, #96	@ 0x60
 810849e:	d10e      	bne.n	81084be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	2220      	movs	r2, #32
 81084a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	2200      	movs	r2, #0
 81084ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	2200      	movs	r2, #0
 81084b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 81084b6:	6878      	ldr	r0, [r7, #4]
 81084b8:	f7fe fcd3 	bl	8106e62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81084bc:	e009      	b.n	81084d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 81084be:	687b      	ldr	r3, [r7, #4]
 81084c0:	2200      	movs	r2, #0
 81084c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 81084c4:	687b      	ldr	r3, [r7, #4]
 81084c6:	2200      	movs	r2, #0
 81084c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 81084cc:	6878      	ldr	r0, [r7, #4]
 81084ce:	f7fe fcbe 	bl	8106e4e <HAL_I2C_ErrorCallback>
}
 81084d2:	bf00      	nop
 81084d4:	3708      	adds	r7, #8
 81084d6:	46bd      	mov	sp, r7
 81084d8:	bd80      	pop	{r7, pc}

081084da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81084da:	b480      	push	{r7}
 81084dc:	b083      	sub	sp, #12
 81084de:	af00      	add	r7, sp, #0
 81084e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81084e2:	687b      	ldr	r3, [r7, #4]
 81084e4:	681b      	ldr	r3, [r3, #0]
 81084e6:	699b      	ldr	r3, [r3, #24]
 81084e8:	f003 0302 	and.w	r3, r3, #2
 81084ec:	2b02      	cmp	r3, #2
 81084ee:	d103      	bne.n	81084f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	2200      	movs	r2, #0
 81084f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	681b      	ldr	r3, [r3, #0]
 81084fc:	699b      	ldr	r3, [r3, #24]
 81084fe:	f003 0301 	and.w	r3, r3, #1
 8108502:	2b01      	cmp	r3, #1
 8108504:	d007      	beq.n	8108516 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	681b      	ldr	r3, [r3, #0]
 810850a:	699a      	ldr	r2, [r3, #24]
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	681b      	ldr	r3, [r3, #0]
 8108510:	f042 0201 	orr.w	r2, r2, #1
 8108514:	619a      	str	r2, [r3, #24]
  }
}
 8108516:	bf00      	nop
 8108518:	370c      	adds	r7, #12
 810851a:	46bd      	mov	sp, r7
 810851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108520:	4770      	bx	lr

08108522 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8108522:	b580      	push	{r7, lr}
 8108524:	b084      	sub	sp, #16
 8108526:	af00      	add	r7, sp, #0
 8108528:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 810852a:	687b      	ldr	r3, [r7, #4]
 810852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810852e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108530:	68fb      	ldr	r3, [r7, #12]
 8108532:	681b      	ldr	r3, [r3, #0]
 8108534:	681a      	ldr	r2, [r3, #0]
 8108536:	68fb      	ldr	r3, [r7, #12]
 8108538:	681b      	ldr	r3, [r3, #0]
 810853a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810853e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8108540:	68fb      	ldr	r3, [r7, #12]
 8108542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8108544:	b29b      	uxth	r3, r3
 8108546:	2b00      	cmp	r3, #0
 8108548:	d104      	bne.n	8108554 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810854a:	2120      	movs	r1, #32
 810854c:	68f8      	ldr	r0, [r7, #12]
 810854e:	f000 fb81 	bl	8108c54 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8108552:	e02d      	b.n	81085b0 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8108554:	68fb      	ldr	r3, [r7, #12]
 8108556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108558:	68fa      	ldr	r2, [r7, #12]
 810855a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 810855c:	441a      	add	r2, r3
 810855e:	68fb      	ldr	r3, [r7, #12]
 8108560:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8108562:	68fb      	ldr	r3, [r7, #12]
 8108564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8108566:	b29b      	uxth	r3, r3
 8108568:	2bff      	cmp	r3, #255	@ 0xff
 810856a:	d903      	bls.n	8108574 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810856c:	68fb      	ldr	r3, [r7, #12]
 810856e:	22ff      	movs	r2, #255	@ 0xff
 8108570:	851a      	strh	r2, [r3, #40]	@ 0x28
 8108572:	e004      	b.n	810857e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8108574:	68fb      	ldr	r3, [r7, #12]
 8108576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8108578:	b29a      	uxth	r2, r3
 810857a:	68fb      	ldr	r3, [r7, #12]
 810857c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 810857e:	68fb      	ldr	r3, [r7, #12]
 8108580:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8108582:	68fb      	ldr	r3, [r7, #12]
 8108584:	681b      	ldr	r3, [r3, #0]
 8108586:	3324      	adds	r3, #36	@ 0x24
 8108588:	4619      	mov	r1, r3
 810858a:	68fb      	ldr	r3, [r7, #12]
 810858c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810858e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8108590:	68fb      	ldr	r3, [r7, #12]
 8108592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8108594:	f7fb fdb6 	bl	8104104 <HAL_DMA_Start_IT>
 8108598:	4603      	mov	r3, r0
 810859a:	2b00      	cmp	r3, #0
 810859c:	d004      	beq.n	81085a8 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 810859e:	2110      	movs	r1, #16
 81085a0:	68f8      	ldr	r0, [r7, #12]
 81085a2:	f7ff fe83 	bl	81082ac <I2C_ITError>
}
 81085a6:	e003      	b.n	81085b0 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 81085a8:	2140      	movs	r1, #64	@ 0x40
 81085aa:	68f8      	ldr	r0, [r7, #12]
 81085ac:	f000 fb52 	bl	8108c54 <I2C_Enable_IRQ>
}
 81085b0:	bf00      	nop
 81085b2:	3710      	adds	r7, #16
 81085b4:	46bd      	mov	sp, r7
 81085b6:	bd80      	pop	{r7, pc}

081085b8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 81085b8:	b580      	push	{r7, lr}
 81085ba:	b084      	sub	sp, #16
 81085bc:	af00      	add	r7, sp, #0
 81085be:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 81085c0:	2300      	movs	r3, #0
 81085c2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085c8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 81085ca:	68bb      	ldr	r3, [r7, #8]
 81085cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085ce:	2b00      	cmp	r3, #0
 81085d0:	d076      	beq.n	81086c0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 81085d2:	68bb      	ldr	r3, [r7, #8]
 81085d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085d6:	681b      	ldr	r3, [r3, #0]
 81085d8:	4a71      	ldr	r2, [pc, #452]	@ (81087a0 <I2C_DMAError+0x1e8>)
 81085da:	4293      	cmp	r3, r2
 81085dc:	d059      	beq.n	8108692 <I2C_DMAError+0xda>
 81085de:	68bb      	ldr	r3, [r7, #8]
 81085e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085e2:	681b      	ldr	r3, [r3, #0]
 81085e4:	4a6f      	ldr	r2, [pc, #444]	@ (81087a4 <I2C_DMAError+0x1ec>)
 81085e6:	4293      	cmp	r3, r2
 81085e8:	d053      	beq.n	8108692 <I2C_DMAError+0xda>
 81085ea:	68bb      	ldr	r3, [r7, #8]
 81085ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085ee:	681b      	ldr	r3, [r3, #0]
 81085f0:	4a6d      	ldr	r2, [pc, #436]	@ (81087a8 <I2C_DMAError+0x1f0>)
 81085f2:	4293      	cmp	r3, r2
 81085f4:	d04d      	beq.n	8108692 <I2C_DMAError+0xda>
 81085f6:	68bb      	ldr	r3, [r7, #8]
 81085f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81085fa:	681b      	ldr	r3, [r3, #0]
 81085fc:	4a6b      	ldr	r2, [pc, #428]	@ (81087ac <I2C_DMAError+0x1f4>)
 81085fe:	4293      	cmp	r3, r2
 8108600:	d047      	beq.n	8108692 <I2C_DMAError+0xda>
 8108602:	68bb      	ldr	r3, [r7, #8]
 8108604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	4a69      	ldr	r2, [pc, #420]	@ (81087b0 <I2C_DMAError+0x1f8>)
 810860a:	4293      	cmp	r3, r2
 810860c:	d041      	beq.n	8108692 <I2C_DMAError+0xda>
 810860e:	68bb      	ldr	r3, [r7, #8]
 8108610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108612:	681b      	ldr	r3, [r3, #0]
 8108614:	4a67      	ldr	r2, [pc, #412]	@ (81087b4 <I2C_DMAError+0x1fc>)
 8108616:	4293      	cmp	r3, r2
 8108618:	d03b      	beq.n	8108692 <I2C_DMAError+0xda>
 810861a:	68bb      	ldr	r3, [r7, #8]
 810861c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	4a65      	ldr	r2, [pc, #404]	@ (81087b8 <I2C_DMAError+0x200>)
 8108622:	4293      	cmp	r3, r2
 8108624:	d035      	beq.n	8108692 <I2C_DMAError+0xda>
 8108626:	68bb      	ldr	r3, [r7, #8]
 8108628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810862a:	681b      	ldr	r3, [r3, #0]
 810862c:	4a63      	ldr	r2, [pc, #396]	@ (81087bc <I2C_DMAError+0x204>)
 810862e:	4293      	cmp	r3, r2
 8108630:	d02f      	beq.n	8108692 <I2C_DMAError+0xda>
 8108632:	68bb      	ldr	r3, [r7, #8]
 8108634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	4a61      	ldr	r2, [pc, #388]	@ (81087c0 <I2C_DMAError+0x208>)
 810863a:	4293      	cmp	r3, r2
 810863c:	d029      	beq.n	8108692 <I2C_DMAError+0xda>
 810863e:	68bb      	ldr	r3, [r7, #8]
 8108640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	4a5f      	ldr	r2, [pc, #380]	@ (81087c4 <I2C_DMAError+0x20c>)
 8108646:	4293      	cmp	r3, r2
 8108648:	d023      	beq.n	8108692 <I2C_DMAError+0xda>
 810864a:	68bb      	ldr	r3, [r7, #8]
 810864c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810864e:	681b      	ldr	r3, [r3, #0]
 8108650:	4a5d      	ldr	r2, [pc, #372]	@ (81087c8 <I2C_DMAError+0x210>)
 8108652:	4293      	cmp	r3, r2
 8108654:	d01d      	beq.n	8108692 <I2C_DMAError+0xda>
 8108656:	68bb      	ldr	r3, [r7, #8]
 8108658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810865a:	681b      	ldr	r3, [r3, #0]
 810865c:	4a5b      	ldr	r2, [pc, #364]	@ (81087cc <I2C_DMAError+0x214>)
 810865e:	4293      	cmp	r3, r2
 8108660:	d017      	beq.n	8108692 <I2C_DMAError+0xda>
 8108662:	68bb      	ldr	r3, [r7, #8]
 8108664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108666:	681b      	ldr	r3, [r3, #0]
 8108668:	4a59      	ldr	r2, [pc, #356]	@ (81087d0 <I2C_DMAError+0x218>)
 810866a:	4293      	cmp	r3, r2
 810866c:	d011      	beq.n	8108692 <I2C_DMAError+0xda>
 810866e:	68bb      	ldr	r3, [r7, #8]
 8108670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108672:	681b      	ldr	r3, [r3, #0]
 8108674:	4a57      	ldr	r2, [pc, #348]	@ (81087d4 <I2C_DMAError+0x21c>)
 8108676:	4293      	cmp	r3, r2
 8108678:	d00b      	beq.n	8108692 <I2C_DMAError+0xda>
 810867a:	68bb      	ldr	r3, [r7, #8]
 810867c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810867e:	681b      	ldr	r3, [r3, #0]
 8108680:	4a55      	ldr	r2, [pc, #340]	@ (81087d8 <I2C_DMAError+0x220>)
 8108682:	4293      	cmp	r3, r2
 8108684:	d005      	beq.n	8108692 <I2C_DMAError+0xda>
 8108686:	68bb      	ldr	r3, [r7, #8]
 8108688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810868a:	681b      	ldr	r3, [r3, #0]
 810868c:	4a53      	ldr	r2, [pc, #332]	@ (81087dc <I2C_DMAError+0x224>)
 810868e:	4293      	cmp	r3, r2
 8108690:	d109      	bne.n	81086a6 <I2C_DMAError+0xee>
 8108692:	68bb      	ldr	r3, [r7, #8]
 8108694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	685b      	ldr	r3, [r3, #4]
 810869a:	2b00      	cmp	r3, #0
 810869c:	bf0c      	ite	eq
 810869e:	2301      	moveq	r3, #1
 81086a0:	2300      	movne	r3, #0
 81086a2:	b2db      	uxtb	r3, r3
 81086a4:	e008      	b.n	81086b8 <I2C_DMAError+0x100>
 81086a6:	68bb      	ldr	r3, [r7, #8]
 81086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086aa:	681b      	ldr	r3, [r3, #0]
 81086ac:	685b      	ldr	r3, [r3, #4]
 81086ae:	2b00      	cmp	r3, #0
 81086b0:	bf0c      	ite	eq
 81086b2:	2301      	moveq	r3, #1
 81086b4:	2300      	movne	r3, #0
 81086b6:	b2db      	uxtb	r3, r3
 81086b8:	2b00      	cmp	r3, #0
 81086ba:	d001      	beq.n	81086c0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 81086bc:	2301      	movs	r3, #1
 81086be:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 81086c0:	68bb      	ldr	r3, [r7, #8]
 81086c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086c4:	2b00      	cmp	r3, #0
 81086c6:	f000 8098 	beq.w	81087fa <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 81086ca:	68bb      	ldr	r3, [r7, #8]
 81086cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086ce:	681b      	ldr	r3, [r3, #0]
 81086d0:	4a33      	ldr	r2, [pc, #204]	@ (81087a0 <I2C_DMAError+0x1e8>)
 81086d2:	4293      	cmp	r3, r2
 81086d4:	d059      	beq.n	810878a <I2C_DMAError+0x1d2>
 81086d6:	68bb      	ldr	r3, [r7, #8]
 81086d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086da:	681b      	ldr	r3, [r3, #0]
 81086dc:	4a31      	ldr	r2, [pc, #196]	@ (81087a4 <I2C_DMAError+0x1ec>)
 81086de:	4293      	cmp	r3, r2
 81086e0:	d053      	beq.n	810878a <I2C_DMAError+0x1d2>
 81086e2:	68bb      	ldr	r3, [r7, #8]
 81086e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	4a2f      	ldr	r2, [pc, #188]	@ (81087a8 <I2C_DMAError+0x1f0>)
 81086ea:	4293      	cmp	r3, r2
 81086ec:	d04d      	beq.n	810878a <I2C_DMAError+0x1d2>
 81086ee:	68bb      	ldr	r3, [r7, #8]
 81086f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	4a2d      	ldr	r2, [pc, #180]	@ (81087ac <I2C_DMAError+0x1f4>)
 81086f6:	4293      	cmp	r3, r2
 81086f8:	d047      	beq.n	810878a <I2C_DMAError+0x1d2>
 81086fa:	68bb      	ldr	r3, [r7, #8]
 81086fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	4a2b      	ldr	r2, [pc, #172]	@ (81087b0 <I2C_DMAError+0x1f8>)
 8108702:	4293      	cmp	r3, r2
 8108704:	d041      	beq.n	810878a <I2C_DMAError+0x1d2>
 8108706:	68bb      	ldr	r3, [r7, #8]
 8108708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810870a:	681b      	ldr	r3, [r3, #0]
 810870c:	4a29      	ldr	r2, [pc, #164]	@ (81087b4 <I2C_DMAError+0x1fc>)
 810870e:	4293      	cmp	r3, r2
 8108710:	d03b      	beq.n	810878a <I2C_DMAError+0x1d2>
 8108712:	68bb      	ldr	r3, [r7, #8]
 8108714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	4a27      	ldr	r2, [pc, #156]	@ (81087b8 <I2C_DMAError+0x200>)
 810871a:	4293      	cmp	r3, r2
 810871c:	d035      	beq.n	810878a <I2C_DMAError+0x1d2>
 810871e:	68bb      	ldr	r3, [r7, #8]
 8108720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108722:	681b      	ldr	r3, [r3, #0]
 8108724:	4a25      	ldr	r2, [pc, #148]	@ (81087bc <I2C_DMAError+0x204>)
 8108726:	4293      	cmp	r3, r2
 8108728:	d02f      	beq.n	810878a <I2C_DMAError+0x1d2>
 810872a:	68bb      	ldr	r3, [r7, #8]
 810872c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810872e:	681b      	ldr	r3, [r3, #0]
 8108730:	4a23      	ldr	r2, [pc, #140]	@ (81087c0 <I2C_DMAError+0x208>)
 8108732:	4293      	cmp	r3, r2
 8108734:	d029      	beq.n	810878a <I2C_DMAError+0x1d2>
 8108736:	68bb      	ldr	r3, [r7, #8]
 8108738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810873a:	681b      	ldr	r3, [r3, #0]
 810873c:	4a21      	ldr	r2, [pc, #132]	@ (81087c4 <I2C_DMAError+0x20c>)
 810873e:	4293      	cmp	r3, r2
 8108740:	d023      	beq.n	810878a <I2C_DMAError+0x1d2>
 8108742:	68bb      	ldr	r3, [r7, #8]
 8108744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108746:	681b      	ldr	r3, [r3, #0]
 8108748:	4a1f      	ldr	r2, [pc, #124]	@ (81087c8 <I2C_DMAError+0x210>)
 810874a:	4293      	cmp	r3, r2
 810874c:	d01d      	beq.n	810878a <I2C_DMAError+0x1d2>
 810874e:	68bb      	ldr	r3, [r7, #8]
 8108750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	4a1d      	ldr	r2, [pc, #116]	@ (81087cc <I2C_DMAError+0x214>)
 8108756:	4293      	cmp	r3, r2
 8108758:	d017      	beq.n	810878a <I2C_DMAError+0x1d2>
 810875a:	68bb      	ldr	r3, [r7, #8]
 810875c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810875e:	681b      	ldr	r3, [r3, #0]
 8108760:	4a1b      	ldr	r2, [pc, #108]	@ (81087d0 <I2C_DMAError+0x218>)
 8108762:	4293      	cmp	r3, r2
 8108764:	d011      	beq.n	810878a <I2C_DMAError+0x1d2>
 8108766:	68bb      	ldr	r3, [r7, #8]
 8108768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810876a:	681b      	ldr	r3, [r3, #0]
 810876c:	4a19      	ldr	r2, [pc, #100]	@ (81087d4 <I2C_DMAError+0x21c>)
 810876e:	4293      	cmp	r3, r2
 8108770:	d00b      	beq.n	810878a <I2C_DMAError+0x1d2>
 8108772:	68bb      	ldr	r3, [r7, #8]
 8108774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108776:	681b      	ldr	r3, [r3, #0]
 8108778:	4a17      	ldr	r2, [pc, #92]	@ (81087d8 <I2C_DMAError+0x220>)
 810877a:	4293      	cmp	r3, r2
 810877c:	d005      	beq.n	810878a <I2C_DMAError+0x1d2>
 810877e:	68bb      	ldr	r3, [r7, #8]
 8108780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	4a15      	ldr	r2, [pc, #84]	@ (81087dc <I2C_DMAError+0x224>)
 8108786:	4293      	cmp	r3, r2
 8108788:	d12a      	bne.n	81087e0 <I2C_DMAError+0x228>
 810878a:	68bb      	ldr	r3, [r7, #8]
 810878c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810878e:	681b      	ldr	r3, [r3, #0]
 8108790:	685b      	ldr	r3, [r3, #4]
 8108792:	2b00      	cmp	r3, #0
 8108794:	bf0c      	ite	eq
 8108796:	2301      	moveq	r3, #1
 8108798:	2300      	movne	r3, #0
 810879a:	b2db      	uxtb	r3, r3
 810879c:	e029      	b.n	81087f2 <I2C_DMAError+0x23a>
 810879e:	bf00      	nop
 81087a0:	40020010 	.word	0x40020010
 81087a4:	40020028 	.word	0x40020028
 81087a8:	40020040 	.word	0x40020040
 81087ac:	40020058 	.word	0x40020058
 81087b0:	40020070 	.word	0x40020070
 81087b4:	40020088 	.word	0x40020088
 81087b8:	400200a0 	.word	0x400200a0
 81087bc:	400200b8 	.word	0x400200b8
 81087c0:	40020410 	.word	0x40020410
 81087c4:	40020428 	.word	0x40020428
 81087c8:	40020440 	.word	0x40020440
 81087cc:	40020458 	.word	0x40020458
 81087d0:	40020470 	.word	0x40020470
 81087d4:	40020488 	.word	0x40020488
 81087d8:	400204a0 	.word	0x400204a0
 81087dc:	400204b8 	.word	0x400204b8
 81087e0:	68bb      	ldr	r3, [r7, #8]
 81087e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087e4:	681b      	ldr	r3, [r3, #0]
 81087e6:	685b      	ldr	r3, [r3, #4]
 81087e8:	2b00      	cmp	r3, #0
 81087ea:	bf0c      	ite	eq
 81087ec:	2301      	moveq	r3, #1
 81087ee:	2300      	movne	r3, #0
 81087f0:	b2db      	uxtb	r3, r3
 81087f2:	2b00      	cmp	r3, #0
 81087f4:	d001      	beq.n	81087fa <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 81087f6:	2301      	movs	r3, #1
 81087f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 81087fa:	6878      	ldr	r0, [r7, #4]
 81087fc:	f7fd f86a 	bl	81058d4 <HAL_DMA_GetError>
 8108800:	4603      	mov	r3, r0
 8108802:	2b02      	cmp	r3, #2
 8108804:	d00e      	beq.n	8108824 <I2C_DMAError+0x26c>
 8108806:	68fb      	ldr	r3, [r7, #12]
 8108808:	2b00      	cmp	r3, #0
 810880a:	d00b      	beq.n	8108824 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 810880c:	68bb      	ldr	r3, [r7, #8]
 810880e:	681b      	ldr	r3, [r3, #0]
 8108810:	685a      	ldr	r2, [r3, #4]
 8108812:	68bb      	ldr	r3, [r7, #8]
 8108814:	681b      	ldr	r3, [r3, #0]
 8108816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810881a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 810881c:	2110      	movs	r1, #16
 810881e:	68b8      	ldr	r0, [r7, #8]
 8108820:	f7ff fd44 	bl	81082ac <I2C_ITError>
  }
}
 8108824:	bf00      	nop
 8108826:	3710      	adds	r7, #16
 8108828:	46bd      	mov	sp, r7
 810882a:	bd80      	pop	{r7, pc}

0810882c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 810882c:	b580      	push	{r7, lr}
 810882e:	b084      	sub	sp, #16
 8108830:	af00      	add	r7, sp, #0
 8108832:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8108834:	687b      	ldr	r3, [r7, #4]
 8108836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108838:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 810883a:	68fb      	ldr	r3, [r7, #12]
 810883c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810883e:	2b00      	cmp	r3, #0
 8108840:	d003      	beq.n	810884a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8108842:	68fb      	ldr	r3, [r7, #12]
 8108844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108846:	2200      	movs	r2, #0
 8108848:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 810884a:	68fb      	ldr	r3, [r7, #12]
 810884c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810884e:	2b00      	cmp	r3, #0
 8108850:	d003      	beq.n	810885a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8108852:	68fb      	ldr	r3, [r7, #12]
 8108854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108856:	2200      	movs	r2, #0
 8108858:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 810885a:	68f8      	ldr	r0, [r7, #12]
 810885c:	f7ff fe16 	bl	810848c <I2C_TreatErrorCallback>
}
 8108860:	bf00      	nop
 8108862:	3710      	adds	r7, #16
 8108864:	46bd      	mov	sp, r7
 8108866:	bd80      	pop	{r7, pc}

08108868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8108868:	b580      	push	{r7, lr}
 810886a:	b084      	sub	sp, #16
 810886c:	af00      	add	r7, sp, #0
 810886e:	60f8      	str	r0, [r7, #12]
 8108870:	60b9      	str	r1, [r7, #8]
 8108872:	603b      	str	r3, [r7, #0]
 8108874:	4613      	mov	r3, r2
 8108876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8108878:	e03b      	b.n	81088f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810887a:	69ba      	ldr	r2, [r7, #24]
 810887c:	6839      	ldr	r1, [r7, #0]
 810887e:	68f8      	ldr	r0, [r7, #12]
 8108880:	f000 f8d6 	bl	8108a30 <I2C_IsErrorOccurred>
 8108884:	4603      	mov	r3, r0
 8108886:	2b00      	cmp	r3, #0
 8108888:	d001      	beq.n	810888e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810888a:	2301      	movs	r3, #1
 810888c:	e041      	b.n	8108912 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810888e:	683b      	ldr	r3, [r7, #0]
 8108890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108894:	d02d      	beq.n	81088f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108896:	f7fa ff87 	bl	81037a8 <HAL_GetTick>
 810889a:	4602      	mov	r2, r0
 810889c:	69bb      	ldr	r3, [r7, #24]
 810889e:	1ad3      	subs	r3, r2, r3
 81088a0:	683a      	ldr	r2, [r7, #0]
 81088a2:	429a      	cmp	r2, r3
 81088a4:	d302      	bcc.n	81088ac <I2C_WaitOnFlagUntilTimeout+0x44>
 81088a6:	683b      	ldr	r3, [r7, #0]
 81088a8:	2b00      	cmp	r3, #0
 81088aa:	d122      	bne.n	81088f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81088ac:	68fb      	ldr	r3, [r7, #12]
 81088ae:	681b      	ldr	r3, [r3, #0]
 81088b0:	699a      	ldr	r2, [r3, #24]
 81088b2:	68bb      	ldr	r3, [r7, #8]
 81088b4:	4013      	ands	r3, r2
 81088b6:	68ba      	ldr	r2, [r7, #8]
 81088b8:	429a      	cmp	r2, r3
 81088ba:	bf0c      	ite	eq
 81088bc:	2301      	moveq	r3, #1
 81088be:	2300      	movne	r3, #0
 81088c0:	b2db      	uxtb	r3, r3
 81088c2:	461a      	mov	r2, r3
 81088c4:	79fb      	ldrb	r3, [r7, #7]
 81088c6:	429a      	cmp	r2, r3
 81088c8:	d113      	bne.n	81088f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81088ca:	68fb      	ldr	r3, [r7, #12]
 81088cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81088ce:	f043 0220 	orr.w	r2, r3, #32
 81088d2:	68fb      	ldr	r3, [r7, #12]
 81088d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81088d6:	68fb      	ldr	r3, [r7, #12]
 81088d8:	2220      	movs	r2, #32
 81088da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81088de:	68fb      	ldr	r3, [r7, #12]
 81088e0:	2200      	movs	r2, #0
 81088e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81088e6:	68fb      	ldr	r3, [r7, #12]
 81088e8:	2200      	movs	r2, #0
 81088ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 81088ee:	2301      	movs	r3, #1
 81088f0:	e00f      	b.n	8108912 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81088f2:	68fb      	ldr	r3, [r7, #12]
 81088f4:	681b      	ldr	r3, [r3, #0]
 81088f6:	699a      	ldr	r2, [r3, #24]
 81088f8:	68bb      	ldr	r3, [r7, #8]
 81088fa:	4013      	ands	r3, r2
 81088fc:	68ba      	ldr	r2, [r7, #8]
 81088fe:	429a      	cmp	r2, r3
 8108900:	bf0c      	ite	eq
 8108902:	2301      	moveq	r3, #1
 8108904:	2300      	movne	r3, #0
 8108906:	b2db      	uxtb	r3, r3
 8108908:	461a      	mov	r2, r3
 810890a:	79fb      	ldrb	r3, [r7, #7]
 810890c:	429a      	cmp	r2, r3
 810890e:	d0b4      	beq.n	810887a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108910:	2300      	movs	r3, #0
}
 8108912:	4618      	mov	r0, r3
 8108914:	3710      	adds	r7, #16
 8108916:	46bd      	mov	sp, r7
 8108918:	bd80      	pop	{r7, pc}

0810891a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810891a:	b580      	push	{r7, lr}
 810891c:	b084      	sub	sp, #16
 810891e:	af00      	add	r7, sp, #0
 8108920:	60f8      	str	r0, [r7, #12]
 8108922:	60b9      	str	r1, [r7, #8]
 8108924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8108926:	e033      	b.n	8108990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8108928:	687a      	ldr	r2, [r7, #4]
 810892a:	68b9      	ldr	r1, [r7, #8]
 810892c:	68f8      	ldr	r0, [r7, #12]
 810892e:	f000 f87f 	bl	8108a30 <I2C_IsErrorOccurred>
 8108932:	4603      	mov	r3, r0
 8108934:	2b00      	cmp	r3, #0
 8108936:	d001      	beq.n	810893c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8108938:	2301      	movs	r3, #1
 810893a:	e031      	b.n	81089a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810893c:	68bb      	ldr	r3, [r7, #8]
 810893e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108942:	d025      	beq.n	8108990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108944:	f7fa ff30 	bl	81037a8 <HAL_GetTick>
 8108948:	4602      	mov	r2, r0
 810894a:	687b      	ldr	r3, [r7, #4]
 810894c:	1ad3      	subs	r3, r2, r3
 810894e:	68ba      	ldr	r2, [r7, #8]
 8108950:	429a      	cmp	r2, r3
 8108952:	d302      	bcc.n	810895a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8108954:	68bb      	ldr	r3, [r7, #8]
 8108956:	2b00      	cmp	r3, #0
 8108958:	d11a      	bne.n	8108990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810895a:	68fb      	ldr	r3, [r7, #12]
 810895c:	681b      	ldr	r3, [r3, #0]
 810895e:	699b      	ldr	r3, [r3, #24]
 8108960:	f003 0302 	and.w	r3, r3, #2
 8108964:	2b02      	cmp	r3, #2
 8108966:	d013      	beq.n	8108990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108968:	68fb      	ldr	r3, [r7, #12]
 810896a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810896c:	f043 0220 	orr.w	r2, r3, #32
 8108970:	68fb      	ldr	r3, [r7, #12]
 8108972:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8108974:	68fb      	ldr	r3, [r7, #12]
 8108976:	2220      	movs	r2, #32
 8108978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810897c:	68fb      	ldr	r3, [r7, #12]
 810897e:	2200      	movs	r2, #0
 8108980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8108984:	68fb      	ldr	r3, [r7, #12]
 8108986:	2200      	movs	r2, #0
 8108988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810898c:	2301      	movs	r3, #1
 810898e:	e007      	b.n	81089a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8108990:	68fb      	ldr	r3, [r7, #12]
 8108992:	681b      	ldr	r3, [r3, #0]
 8108994:	699b      	ldr	r3, [r3, #24]
 8108996:	f003 0302 	and.w	r3, r3, #2
 810899a:	2b02      	cmp	r3, #2
 810899c:	d1c4      	bne.n	8108928 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810899e:	2300      	movs	r3, #0
}
 81089a0:	4618      	mov	r0, r3
 81089a2:	3710      	adds	r7, #16
 81089a4:	46bd      	mov	sp, r7
 81089a6:	bd80      	pop	{r7, pc}

081089a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81089a8:	b580      	push	{r7, lr}
 81089aa:	b084      	sub	sp, #16
 81089ac:	af00      	add	r7, sp, #0
 81089ae:	60f8      	str	r0, [r7, #12]
 81089b0:	60b9      	str	r1, [r7, #8]
 81089b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81089b4:	e02f      	b.n	8108a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81089b6:	687a      	ldr	r2, [r7, #4]
 81089b8:	68b9      	ldr	r1, [r7, #8]
 81089ba:	68f8      	ldr	r0, [r7, #12]
 81089bc:	f000 f838 	bl	8108a30 <I2C_IsErrorOccurred>
 81089c0:	4603      	mov	r3, r0
 81089c2:	2b00      	cmp	r3, #0
 81089c4:	d001      	beq.n	81089ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81089c6:	2301      	movs	r3, #1
 81089c8:	e02d      	b.n	8108a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81089ca:	f7fa feed 	bl	81037a8 <HAL_GetTick>
 81089ce:	4602      	mov	r2, r0
 81089d0:	687b      	ldr	r3, [r7, #4]
 81089d2:	1ad3      	subs	r3, r2, r3
 81089d4:	68ba      	ldr	r2, [r7, #8]
 81089d6:	429a      	cmp	r2, r3
 81089d8:	d302      	bcc.n	81089e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81089da:	68bb      	ldr	r3, [r7, #8]
 81089dc:	2b00      	cmp	r3, #0
 81089de:	d11a      	bne.n	8108a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81089e0:	68fb      	ldr	r3, [r7, #12]
 81089e2:	681b      	ldr	r3, [r3, #0]
 81089e4:	699b      	ldr	r3, [r3, #24]
 81089e6:	f003 0320 	and.w	r3, r3, #32
 81089ea:	2b20      	cmp	r3, #32
 81089ec:	d013      	beq.n	8108a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81089ee:	68fb      	ldr	r3, [r7, #12]
 81089f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81089f2:	f043 0220 	orr.w	r2, r3, #32
 81089f6:	68fb      	ldr	r3, [r7, #12]
 81089f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81089fa:	68fb      	ldr	r3, [r7, #12]
 81089fc:	2220      	movs	r2, #32
 81089fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8108a02:	68fb      	ldr	r3, [r7, #12]
 8108a04:	2200      	movs	r2, #0
 8108a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8108a0a:	68fb      	ldr	r3, [r7, #12]
 8108a0c:	2200      	movs	r2, #0
 8108a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8108a12:	2301      	movs	r3, #1
 8108a14:	e007      	b.n	8108a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108a16:	68fb      	ldr	r3, [r7, #12]
 8108a18:	681b      	ldr	r3, [r3, #0]
 8108a1a:	699b      	ldr	r3, [r3, #24]
 8108a1c:	f003 0320 	and.w	r3, r3, #32
 8108a20:	2b20      	cmp	r3, #32
 8108a22:	d1c8      	bne.n	81089b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8108a24:	2300      	movs	r3, #0
}
 8108a26:	4618      	mov	r0, r3
 8108a28:	3710      	adds	r7, #16
 8108a2a:	46bd      	mov	sp, r7
 8108a2c:	bd80      	pop	{r7, pc}
	...

08108a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8108a30:	b580      	push	{r7, lr}
 8108a32:	b08a      	sub	sp, #40	@ 0x28
 8108a34:	af00      	add	r7, sp, #0
 8108a36:	60f8      	str	r0, [r7, #12]
 8108a38:	60b9      	str	r1, [r7, #8]
 8108a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108a3c:	2300      	movs	r3, #0
 8108a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8108a42:	68fb      	ldr	r3, [r7, #12]
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	699b      	ldr	r3, [r3, #24]
 8108a48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8108a4a:	2300      	movs	r3, #0
 8108a4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8108a52:	69bb      	ldr	r3, [r7, #24]
 8108a54:	f003 0310 	and.w	r3, r3, #16
 8108a58:	2b00      	cmp	r3, #0
 8108a5a:	d068      	beq.n	8108b2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108a5c:	68fb      	ldr	r3, [r7, #12]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	2210      	movs	r2, #16
 8108a62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8108a64:	e049      	b.n	8108afa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8108a66:	68bb      	ldr	r3, [r7, #8]
 8108a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108a6c:	d045      	beq.n	8108afa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8108a6e:	f7fa fe9b 	bl	81037a8 <HAL_GetTick>
 8108a72:	4602      	mov	r2, r0
 8108a74:	69fb      	ldr	r3, [r7, #28]
 8108a76:	1ad3      	subs	r3, r2, r3
 8108a78:	68ba      	ldr	r2, [r7, #8]
 8108a7a:	429a      	cmp	r2, r3
 8108a7c:	d302      	bcc.n	8108a84 <I2C_IsErrorOccurred+0x54>
 8108a7e:	68bb      	ldr	r3, [r7, #8]
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	d13a      	bne.n	8108afa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8108a84:	68fb      	ldr	r3, [r7, #12]
 8108a86:	681b      	ldr	r3, [r3, #0]
 8108a88:	685b      	ldr	r3, [r3, #4]
 8108a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108a8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8108a90:	68fb      	ldr	r3, [r7, #12]
 8108a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8108a96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8108a98:	68fb      	ldr	r3, [r7, #12]
 8108a9a:	681b      	ldr	r3, [r3, #0]
 8108a9c:	699b      	ldr	r3, [r3, #24]
 8108a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8108aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108aa6:	d121      	bne.n	8108aec <I2C_IsErrorOccurred+0xbc>
 8108aa8:	697b      	ldr	r3, [r7, #20]
 8108aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108aae:	d01d      	beq.n	8108aec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8108ab0:	7cfb      	ldrb	r3, [r7, #19]
 8108ab2:	2b20      	cmp	r3, #32
 8108ab4:	d01a      	beq.n	8108aec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8108ab6:	68fb      	ldr	r3, [r7, #12]
 8108ab8:	681b      	ldr	r3, [r3, #0]
 8108aba:	685a      	ldr	r2, [r3, #4]
 8108abc:	68fb      	ldr	r3, [r7, #12]
 8108abe:	681b      	ldr	r3, [r3, #0]
 8108ac0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8108ac4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8108ac6:	f7fa fe6f 	bl	81037a8 <HAL_GetTick>
 8108aca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108acc:	e00e      	b.n	8108aec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8108ace:	f7fa fe6b 	bl	81037a8 <HAL_GetTick>
 8108ad2:	4602      	mov	r2, r0
 8108ad4:	69fb      	ldr	r3, [r7, #28]
 8108ad6:	1ad3      	subs	r3, r2, r3
 8108ad8:	2b19      	cmp	r3, #25
 8108ada:	d907      	bls.n	8108aec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8108adc:	6a3b      	ldr	r3, [r7, #32]
 8108ade:	f043 0320 	orr.w	r3, r3, #32
 8108ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8108ae4:	2301      	movs	r3, #1
 8108ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8108aea:	e006      	b.n	8108afa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108aec:	68fb      	ldr	r3, [r7, #12]
 8108aee:	681b      	ldr	r3, [r3, #0]
 8108af0:	699b      	ldr	r3, [r3, #24]
 8108af2:	f003 0320 	and.w	r3, r3, #32
 8108af6:	2b20      	cmp	r3, #32
 8108af8:	d1e9      	bne.n	8108ace <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8108afa:	68fb      	ldr	r3, [r7, #12]
 8108afc:	681b      	ldr	r3, [r3, #0]
 8108afe:	699b      	ldr	r3, [r3, #24]
 8108b00:	f003 0320 	and.w	r3, r3, #32
 8108b04:	2b20      	cmp	r3, #32
 8108b06:	d003      	beq.n	8108b10 <I2C_IsErrorOccurred+0xe0>
 8108b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108b0c:	2b00      	cmp	r3, #0
 8108b0e:	d0aa      	beq.n	8108a66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8108b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108b14:	2b00      	cmp	r3, #0
 8108b16:	d103      	bne.n	8108b20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108b18:	68fb      	ldr	r3, [r7, #12]
 8108b1a:	681b      	ldr	r3, [r3, #0]
 8108b1c:	2220      	movs	r2, #32
 8108b1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8108b20:	6a3b      	ldr	r3, [r7, #32]
 8108b22:	f043 0304 	orr.w	r3, r3, #4
 8108b26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8108b28:	2301      	movs	r3, #1
 8108b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8108b2e:	68fb      	ldr	r3, [r7, #12]
 8108b30:	681b      	ldr	r3, [r3, #0]
 8108b32:	699b      	ldr	r3, [r3, #24]
 8108b34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8108b36:	69bb      	ldr	r3, [r7, #24]
 8108b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108b3c:	2b00      	cmp	r3, #0
 8108b3e:	d00b      	beq.n	8108b58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8108b40:	6a3b      	ldr	r3, [r7, #32]
 8108b42:	f043 0301 	orr.w	r3, r3, #1
 8108b46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8108b48:	68fb      	ldr	r3, [r7, #12]
 8108b4a:	681b      	ldr	r3, [r3, #0]
 8108b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8108b52:	2301      	movs	r3, #1
 8108b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8108b58:	69bb      	ldr	r3, [r7, #24]
 8108b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8108b5e:	2b00      	cmp	r3, #0
 8108b60:	d00b      	beq.n	8108b7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8108b62:	6a3b      	ldr	r3, [r7, #32]
 8108b64:	f043 0308 	orr.w	r3, r3, #8
 8108b68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8108b6a:	68fb      	ldr	r3, [r7, #12]
 8108b6c:	681b      	ldr	r3, [r3, #0]
 8108b6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8108b72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8108b74:	2301      	movs	r3, #1
 8108b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8108b7a:	69bb      	ldr	r3, [r7, #24]
 8108b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108b80:	2b00      	cmp	r3, #0
 8108b82:	d00b      	beq.n	8108b9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8108b84:	6a3b      	ldr	r3, [r7, #32]
 8108b86:	f043 0302 	orr.w	r3, r3, #2
 8108b8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8108b8c:	68fb      	ldr	r3, [r7, #12]
 8108b8e:	681b      	ldr	r3, [r3, #0]
 8108b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108b94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8108b96:	2301      	movs	r3, #1
 8108b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8108b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108ba0:	2b00      	cmp	r3, #0
 8108ba2:	d01c      	beq.n	8108bde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108ba4:	68f8      	ldr	r0, [r7, #12]
 8108ba6:	f7ff fc98 	bl	81084da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108baa:	68fb      	ldr	r3, [r7, #12]
 8108bac:	681b      	ldr	r3, [r3, #0]
 8108bae:	6859      	ldr	r1, [r3, #4]
 8108bb0:	68fb      	ldr	r3, [r7, #12]
 8108bb2:	681a      	ldr	r2, [r3, #0]
 8108bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8108bec <I2C_IsErrorOccurred+0x1bc>)
 8108bb6:	400b      	ands	r3, r1
 8108bb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8108bba:	68fb      	ldr	r3, [r7, #12]
 8108bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8108bbe:	6a3b      	ldr	r3, [r7, #32]
 8108bc0:	431a      	orrs	r2, r3
 8108bc2:	68fb      	ldr	r3, [r7, #12]
 8108bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8108bc6:	68fb      	ldr	r3, [r7, #12]
 8108bc8:	2220      	movs	r2, #32
 8108bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8108bce:	68fb      	ldr	r3, [r7, #12]
 8108bd0:	2200      	movs	r2, #0
 8108bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108bd6:	68fb      	ldr	r3, [r7, #12]
 8108bd8:	2200      	movs	r2, #0
 8108bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8108bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8108be2:	4618      	mov	r0, r3
 8108be4:	3728      	adds	r7, #40	@ 0x28
 8108be6:	46bd      	mov	sp, r7
 8108be8:	bd80      	pop	{r7, pc}
 8108bea:	bf00      	nop
 8108bec:	fe00e800 	.word	0xfe00e800

08108bf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8108bf0:	b480      	push	{r7}
 8108bf2:	b087      	sub	sp, #28
 8108bf4:	af00      	add	r7, sp, #0
 8108bf6:	60f8      	str	r0, [r7, #12]
 8108bf8:	607b      	str	r3, [r7, #4]
 8108bfa:	460b      	mov	r3, r1
 8108bfc:	817b      	strh	r3, [r7, #10]
 8108bfe:	4613      	mov	r3, r2
 8108c00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8108c02:	897b      	ldrh	r3, [r7, #10]
 8108c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8108c08:	7a7b      	ldrb	r3, [r7, #9]
 8108c0a:	041b      	lsls	r3, r3, #16
 8108c0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8108c10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8108c16:	6a3b      	ldr	r3, [r7, #32]
 8108c18:	4313      	orrs	r3, r2
 8108c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8108c1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8108c20:	68fb      	ldr	r3, [r7, #12]
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	685a      	ldr	r2, [r3, #4]
 8108c26:	6a3b      	ldr	r3, [r7, #32]
 8108c28:	0d5b      	lsrs	r3, r3, #21
 8108c2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8108c2e:	4b08      	ldr	r3, [pc, #32]	@ (8108c50 <I2C_TransferConfig+0x60>)
 8108c30:	430b      	orrs	r3, r1
 8108c32:	43db      	mvns	r3, r3
 8108c34:	ea02 0103 	and.w	r1, r2, r3
 8108c38:	68fb      	ldr	r3, [r7, #12]
 8108c3a:	681b      	ldr	r3, [r3, #0]
 8108c3c:	697a      	ldr	r2, [r7, #20]
 8108c3e:	430a      	orrs	r2, r1
 8108c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8108c42:	bf00      	nop
 8108c44:	371c      	adds	r7, #28
 8108c46:	46bd      	mov	sp, r7
 8108c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c4c:	4770      	bx	lr
 8108c4e:	bf00      	nop
 8108c50:	03ff63ff 	.word	0x03ff63ff

08108c54 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108c54:	b480      	push	{r7}
 8108c56:	b085      	sub	sp, #20
 8108c58:	af00      	add	r7, sp, #0
 8108c5a:	6078      	str	r0, [r7, #4]
 8108c5c:	460b      	mov	r3, r1
 8108c5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108c60:	2300      	movs	r3, #0
 8108c62:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8108c64:	687b      	ldr	r3, [r7, #4]
 8108c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108c68:	4a39      	ldr	r2, [pc, #228]	@ (8108d50 <I2C_Enable_IRQ+0xfc>)
 8108c6a:	4293      	cmp	r3, r2
 8108c6c:	d032      	beq.n	8108cd4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8108c72:	4a38      	ldr	r2, [pc, #224]	@ (8108d54 <I2C_Enable_IRQ+0x100>)
 8108c74:	4293      	cmp	r3, r2
 8108c76:	d02d      	beq.n	8108cd4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8108c78:	687b      	ldr	r3, [r7, #4]
 8108c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8108c7c:	4a36      	ldr	r2, [pc, #216]	@ (8108d58 <I2C_Enable_IRQ+0x104>)
 8108c7e:	4293      	cmp	r3, r2
 8108c80:	d028      	beq.n	8108cd4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108c82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108c86:	2b00      	cmp	r3, #0
 8108c88:	da03      	bge.n	8108c92 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108c8a:	68fb      	ldr	r3, [r7, #12]
 8108c8c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8108c90:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108c92:	887b      	ldrh	r3, [r7, #2]
 8108c94:	f003 0301 	and.w	r3, r3, #1
 8108c98:	2b00      	cmp	r3, #0
 8108c9a:	d003      	beq.n	8108ca4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8108c9c:	68fb      	ldr	r3, [r7, #12]
 8108c9e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8108ca2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108ca4:	887b      	ldrh	r3, [r7, #2]
 8108ca6:	f003 0302 	and.w	r3, r3, #2
 8108caa:	2b00      	cmp	r3, #0
 8108cac:	d003      	beq.n	8108cb6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8108cae:	68fb      	ldr	r3, [r7, #12]
 8108cb0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8108cb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108cb6:	887b      	ldrh	r3, [r7, #2]
 8108cb8:	2b10      	cmp	r3, #16
 8108cba:	d103      	bne.n	8108cc4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108cbc:	68fb      	ldr	r3, [r7, #12]
 8108cbe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8108cc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108cc4:	887b      	ldrh	r3, [r7, #2]
 8108cc6:	2b20      	cmp	r3, #32
 8108cc8:	d133      	bne.n	8108d32 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8108cca:	68fb      	ldr	r3, [r7, #12]
 8108ccc:	f043 0320 	orr.w	r3, r3, #32
 8108cd0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108cd2:	e02e      	b.n	8108d32 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108cd8:	2b00      	cmp	r3, #0
 8108cda:	da03      	bge.n	8108ce4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108cdc:	68fb      	ldr	r3, [r7, #12]
 8108cde:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8108ce2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108ce4:	887b      	ldrh	r3, [r7, #2]
 8108ce6:	f003 0301 	and.w	r3, r3, #1
 8108cea:	2b00      	cmp	r3, #0
 8108cec:	d003      	beq.n	8108cf6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8108cee:	68fb      	ldr	r3, [r7, #12]
 8108cf0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8108cf4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108cf6:	887b      	ldrh	r3, [r7, #2]
 8108cf8:	f003 0302 	and.w	r3, r3, #2
 8108cfc:	2b00      	cmp	r3, #0
 8108cfe:	d003      	beq.n	8108d08 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8108d00:	68fb      	ldr	r3, [r7, #12]
 8108d02:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8108d06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108d08:	887b      	ldrh	r3, [r7, #2]
 8108d0a:	2b10      	cmp	r3, #16
 8108d0c:	d103      	bne.n	8108d16 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108d0e:	68fb      	ldr	r3, [r7, #12]
 8108d10:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8108d14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108d16:	887b      	ldrh	r3, [r7, #2]
 8108d18:	2b20      	cmp	r3, #32
 8108d1a:	d103      	bne.n	8108d24 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8108d22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108d24:	887b      	ldrh	r3, [r7, #2]
 8108d26:	2b40      	cmp	r3, #64	@ 0x40
 8108d28:	d103      	bne.n	8108d32 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8108d2a:	68fb      	ldr	r3, [r7, #12]
 8108d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108d30:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	681b      	ldr	r3, [r3, #0]
 8108d36:	6819      	ldr	r1, [r3, #0]
 8108d38:	687b      	ldr	r3, [r7, #4]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	68fa      	ldr	r2, [r7, #12]
 8108d3e:	430a      	orrs	r2, r1
 8108d40:	601a      	str	r2, [r3, #0]
}
 8108d42:	bf00      	nop
 8108d44:	3714      	adds	r7, #20
 8108d46:	46bd      	mov	sp, r7
 8108d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d4c:	4770      	bx	lr
 8108d4e:	bf00      	nop
 8108d50:	08107069 	.word	0x08107069
 8108d54:	0810748d 	.word	0x0810748d
 8108d58:	08107241 	.word	0x08107241

08108d5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108d5c:	b480      	push	{r7}
 8108d5e:	b085      	sub	sp, #20
 8108d60:	af00      	add	r7, sp, #0
 8108d62:	6078      	str	r0, [r7, #4]
 8108d64:	460b      	mov	r3, r1
 8108d66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108d68:	2300      	movs	r3, #0
 8108d6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108d6c:	887b      	ldrh	r3, [r7, #2]
 8108d6e:	f003 0301 	and.w	r3, r3, #1
 8108d72:	2b00      	cmp	r3, #0
 8108d74:	d00f      	beq.n	8108d96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108d76:	68fb      	ldr	r3, [r7, #12]
 8108d78:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8108d7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108d84:	b2db      	uxtb	r3, r3
 8108d86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8108d8a:	2b28      	cmp	r3, #40	@ 0x28
 8108d8c:	d003      	beq.n	8108d96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108d8e:	68fb      	ldr	r3, [r7, #12]
 8108d90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8108d94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108d96:	887b      	ldrh	r3, [r7, #2]
 8108d98:	f003 0302 	and.w	r3, r3, #2
 8108d9c:	2b00      	cmp	r3, #0
 8108d9e:	d00f      	beq.n	8108dc0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108da0:	68fb      	ldr	r3, [r7, #12]
 8108da2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8108da6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108dae:	b2db      	uxtb	r3, r3
 8108db0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8108db4:	2b28      	cmp	r3, #40	@ 0x28
 8108db6:	d003      	beq.n	8108dc0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108db8:	68fb      	ldr	r3, [r7, #12]
 8108dba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8108dbe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108dc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108dc4:	2b00      	cmp	r3, #0
 8108dc6:	da03      	bge.n	8108dd0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108dc8:	68fb      	ldr	r3, [r7, #12]
 8108dca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8108dce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108dd0:	887b      	ldrh	r3, [r7, #2]
 8108dd2:	2b10      	cmp	r3, #16
 8108dd4:	d103      	bne.n	8108dde <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108dd6:	68fb      	ldr	r3, [r7, #12]
 8108dd8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8108ddc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108dde:	887b      	ldrh	r3, [r7, #2]
 8108de0:	2b20      	cmp	r3, #32
 8108de2:	d103      	bne.n	8108dec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8108de4:	68fb      	ldr	r3, [r7, #12]
 8108de6:	f043 0320 	orr.w	r3, r3, #32
 8108dea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108dec:	887b      	ldrh	r3, [r7, #2]
 8108dee:	2b40      	cmp	r3, #64	@ 0x40
 8108df0:	d103      	bne.n	8108dfa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8108df2:	68fb      	ldr	r3, [r7, #12]
 8108df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108df8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	681b      	ldr	r3, [r3, #0]
 8108dfe:	6819      	ldr	r1, [r3, #0]
 8108e00:	68fb      	ldr	r3, [r7, #12]
 8108e02:	43da      	mvns	r2, r3
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	681b      	ldr	r3, [r3, #0]
 8108e08:	400a      	ands	r2, r1
 8108e0a:	601a      	str	r2, [r3, #0]
}
 8108e0c:	bf00      	nop
 8108e0e:	3714      	adds	r7, #20
 8108e10:	46bd      	mov	sp, r7
 8108e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e16:	4770      	bx	lr

08108e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8108e18:	b480      	push	{r7}
 8108e1a:	b083      	sub	sp, #12
 8108e1c:	af00      	add	r7, sp, #0
 8108e1e:	6078      	str	r0, [r7, #4]
 8108e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108e28:	b2db      	uxtb	r3, r3
 8108e2a:	2b20      	cmp	r3, #32
 8108e2c:	d138      	bne.n	8108ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8108e34:	2b01      	cmp	r3, #1
 8108e36:	d101      	bne.n	8108e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8108e38:	2302      	movs	r3, #2
 8108e3a:	e032      	b.n	8108ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	2201      	movs	r2, #1
 8108e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	2224      	movs	r2, #36	@ 0x24
 8108e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108e4c:	687b      	ldr	r3, [r7, #4]
 8108e4e:	681b      	ldr	r3, [r3, #0]
 8108e50:	681a      	ldr	r2, [r3, #0]
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	681b      	ldr	r3, [r3, #0]
 8108e56:	f022 0201 	bic.w	r2, r2, #1
 8108e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	681b      	ldr	r3, [r3, #0]
 8108e60:	681a      	ldr	r2, [r3, #0]
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	681b      	ldr	r3, [r3, #0]
 8108e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8108e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	681b      	ldr	r3, [r3, #0]
 8108e70:	6819      	ldr	r1, [r3, #0]
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	683a      	ldr	r2, [r7, #0]
 8108e78:	430a      	orrs	r2, r1
 8108e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108e7c:	687b      	ldr	r3, [r7, #4]
 8108e7e:	681b      	ldr	r3, [r3, #0]
 8108e80:	681a      	ldr	r2, [r3, #0]
 8108e82:	687b      	ldr	r3, [r7, #4]
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	f042 0201 	orr.w	r2, r2, #1
 8108e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108e8c:	687b      	ldr	r3, [r7, #4]
 8108e8e:	2220      	movs	r2, #32
 8108e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108e94:	687b      	ldr	r3, [r7, #4]
 8108e96:	2200      	movs	r2, #0
 8108e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8108e9c:	2300      	movs	r3, #0
 8108e9e:	e000      	b.n	8108ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108ea0:	2302      	movs	r3, #2
  }
}
 8108ea2:	4618      	mov	r0, r3
 8108ea4:	370c      	adds	r7, #12
 8108ea6:	46bd      	mov	sp, r7
 8108ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108eac:	4770      	bx	lr

08108eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8108eae:	b480      	push	{r7}
 8108eb0:	b085      	sub	sp, #20
 8108eb2:	af00      	add	r7, sp, #0
 8108eb4:	6078      	str	r0, [r7, #4]
 8108eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108eb8:	687b      	ldr	r3, [r7, #4]
 8108eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8108ebe:	b2db      	uxtb	r3, r3
 8108ec0:	2b20      	cmp	r3, #32
 8108ec2:	d139      	bne.n	8108f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8108eca:	2b01      	cmp	r3, #1
 8108ecc:	d101      	bne.n	8108ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8108ece:	2302      	movs	r3, #2
 8108ed0:	e033      	b.n	8108f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8108ed2:	687b      	ldr	r3, [r7, #4]
 8108ed4:	2201      	movs	r2, #1
 8108ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	2224      	movs	r2, #36	@ 0x24
 8108ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	681b      	ldr	r3, [r3, #0]
 8108ee6:	681a      	ldr	r2, [r3, #0]
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	f022 0201 	bic.w	r2, r2, #1
 8108ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8108ef2:	687b      	ldr	r3, [r7, #4]
 8108ef4:	681b      	ldr	r3, [r3, #0]
 8108ef6:	681b      	ldr	r3, [r3, #0]
 8108ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8108efa:	68fb      	ldr	r3, [r7, #12]
 8108efc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8108f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8108f02:	683b      	ldr	r3, [r7, #0]
 8108f04:	021b      	lsls	r3, r3, #8
 8108f06:	68fa      	ldr	r2, [r7, #12]
 8108f08:	4313      	orrs	r3, r2
 8108f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108f0c:	687b      	ldr	r3, [r7, #4]
 8108f0e:	681b      	ldr	r3, [r3, #0]
 8108f10:	68fa      	ldr	r2, [r7, #12]
 8108f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	681b      	ldr	r3, [r3, #0]
 8108f18:	681a      	ldr	r2, [r3, #0]
 8108f1a:	687b      	ldr	r3, [r7, #4]
 8108f1c:	681b      	ldr	r3, [r3, #0]
 8108f1e:	f042 0201 	orr.w	r2, r2, #1
 8108f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	2220      	movs	r2, #32
 8108f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	2200      	movs	r2, #0
 8108f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8108f34:	2300      	movs	r3, #0
 8108f36:	e000      	b.n	8108f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8108f38:	2302      	movs	r3, #2
  }
}
 8108f3a:	4618      	mov	r0, r3
 8108f3c:	3714      	adds	r7, #20
 8108f3e:	46bd      	mov	sp, r7
 8108f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f44:	4770      	bx	lr
	...

08108f48 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108f48:	b580      	push	{r7, lr}
 8108f4a:	b084      	sub	sp, #16
 8108f4c:	af00      	add	r7, sp, #0
 8108f4e:	60f8      	str	r0, [r7, #12]
 8108f50:	460b      	mov	r3, r1
 8108f52:	607a      	str	r2, [r7, #4]
 8108f54:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108f56:	4b37      	ldr	r3, [pc, #220]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f58:	681b      	ldr	r3, [r3, #0]
 8108f5a:	f023 0201 	bic.w	r2, r3, #1
 8108f5e:	4935      	ldr	r1, [pc, #212]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f60:	68fb      	ldr	r3, [r7, #12]
 8108f62:	4313      	orrs	r3, r2
 8108f64:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108f66:	687b      	ldr	r3, [r7, #4]
 8108f68:	2b00      	cmp	r3, #0
 8108f6a:	d123      	bne.n	8108fb4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108f6c:	f7fa fd5c 	bl	8103a28 <HAL_GetCurrentCPUID>
 8108f70:	4603      	mov	r3, r0
 8108f72:	2b03      	cmp	r3, #3
 8108f74:	d158      	bne.n	8109028 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108f76:	4b2f      	ldr	r3, [pc, #188]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f78:	691b      	ldr	r3, [r3, #16]
 8108f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108f7c:	f023 0301 	bic.w	r3, r3, #1
 8108f80:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108f82:	4b2d      	ldr	r3, [pc, #180]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108f84:	691b      	ldr	r3, [r3, #16]
 8108f86:	4a2c      	ldr	r2, [pc, #176]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108f88:	f043 0304 	orr.w	r3, r3, #4
 8108f8c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8108f8e:	f3bf 8f4f 	dsb	sy
}
 8108f92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108f94:	f3bf 8f6f 	isb	sy
}
 8108f98:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108f9a:	7afb      	ldrb	r3, [r7, #11]
 8108f9c:	2b01      	cmp	r3, #1
 8108f9e:	d101      	bne.n	8108fa4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108fa0:	bf30      	wfi
 8108fa2:	e000      	b.n	8108fa6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108fa4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108fa6:	4b24      	ldr	r3, [pc, #144]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108fa8:	691b      	ldr	r3, [r3, #16]
 8108faa:	4a23      	ldr	r2, [pc, #140]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108fac:	f023 0304 	bic.w	r3, r3, #4
 8108fb0:	6113      	str	r3, [r2, #16]
 8108fb2:	e03c      	b.n	810902e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	2b01      	cmp	r3, #1
 8108fb8:	d123      	bne.n	8109002 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108fba:	f7fa fd35 	bl	8103a28 <HAL_GetCurrentCPUID>
 8108fbe:	4603      	mov	r3, r0
 8108fc0:	2b01      	cmp	r3, #1
 8108fc2:	d133      	bne.n	810902c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108fc6:	695b      	ldr	r3, [r3, #20]
 8108fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108fca:	f023 0302 	bic.w	r3, r3, #2
 8108fce:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108fd0:	4b19      	ldr	r3, [pc, #100]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108fd2:	691b      	ldr	r3, [r3, #16]
 8108fd4:	4a18      	ldr	r2, [pc, #96]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108fd6:	f043 0304 	orr.w	r3, r3, #4
 8108fda:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108fdc:	f3bf 8f4f 	dsb	sy
}
 8108fe0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108fe2:	f3bf 8f6f 	isb	sy
}
 8108fe6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108fe8:	7afb      	ldrb	r3, [r7, #11]
 8108fea:	2b01      	cmp	r3, #1
 8108fec:	d101      	bne.n	8108ff2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108fee:	bf30      	wfi
 8108ff0:	e000      	b.n	8108ff4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108ff2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108ff4:	4b10      	ldr	r3, [pc, #64]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ff6:	691b      	ldr	r3, [r3, #16]
 8108ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8109038 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108ffa:	f023 0304 	bic.w	r3, r3, #4
 8108ffe:	6113      	str	r3, [r2, #16]
 8109000:	e015      	b.n	810902e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109002:	f7fa fd11 	bl	8103a28 <HAL_GetCurrentCPUID>
 8109006:	4603      	mov	r3, r0
 8109008:	2b03      	cmp	r3, #3
 810900a:	d106      	bne.n	810901a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810900c:	4b09      	ldr	r3, [pc, #36]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 810900e:	691b      	ldr	r3, [r3, #16]
 8109010:	4a08      	ldr	r2, [pc, #32]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109012:	f023 0304 	bic.w	r3, r3, #4
 8109016:	6113      	str	r3, [r2, #16]
 8109018:	e009      	b.n	810902e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810901a:	4b06      	ldr	r3, [pc, #24]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 810901c:	695b      	ldr	r3, [r3, #20]
 810901e:	4a05      	ldr	r2, [pc, #20]	@ (8109034 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109020:	f023 0304 	bic.w	r3, r3, #4
 8109024:	6153      	str	r3, [r2, #20]
 8109026:	e002      	b.n	810902e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109028:	bf00      	nop
 810902a:	e000      	b.n	810902e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810902c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810902e:	3710      	adds	r7, #16
 8109030:	46bd      	mov	sp, r7
 8109032:	bd80      	pop	{r7, pc}
 8109034:	58024800 	.word	0x58024800
 8109038:	e000ed00 	.word	0xe000ed00

0810903c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810903c:	b580      	push	{r7, lr}
 810903e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109040:	f7fa fcf2 	bl	8103a28 <HAL_GetCurrentCPUID>
 8109044:	4603      	mov	r3, r0
 8109046:	2b03      	cmp	r3, #3
 8109048:	d101      	bne.n	810904e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810904a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810904c:	e001      	b.n	8109052 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810904e:	bf40      	sev
    __WFE ();
 8109050:	bf20      	wfe
}
 8109052:	bf00      	nop
 8109054:	bd80      	pop	{r7, pc}
	...

08109058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109058:	b480      	push	{r7}
 810905a:	b089      	sub	sp, #36	@ 0x24
 810905c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810905e:	4bb3      	ldr	r3, [pc, #716]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109060:	691b      	ldr	r3, [r3, #16]
 8109062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109066:	2b18      	cmp	r3, #24
 8109068:	f200 8155 	bhi.w	8109316 <HAL_RCC_GetSysClockFreq+0x2be>
 810906c:	a201      	add	r2, pc, #4	@ (adr r2, 8109074 <HAL_RCC_GetSysClockFreq+0x1c>)
 810906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109072:	bf00      	nop
 8109074:	081090d9 	.word	0x081090d9
 8109078:	08109317 	.word	0x08109317
 810907c:	08109317 	.word	0x08109317
 8109080:	08109317 	.word	0x08109317
 8109084:	08109317 	.word	0x08109317
 8109088:	08109317 	.word	0x08109317
 810908c:	08109317 	.word	0x08109317
 8109090:	08109317 	.word	0x08109317
 8109094:	081090ff 	.word	0x081090ff
 8109098:	08109317 	.word	0x08109317
 810909c:	08109317 	.word	0x08109317
 81090a0:	08109317 	.word	0x08109317
 81090a4:	08109317 	.word	0x08109317
 81090a8:	08109317 	.word	0x08109317
 81090ac:	08109317 	.word	0x08109317
 81090b0:	08109317 	.word	0x08109317
 81090b4:	08109105 	.word	0x08109105
 81090b8:	08109317 	.word	0x08109317
 81090bc:	08109317 	.word	0x08109317
 81090c0:	08109317 	.word	0x08109317
 81090c4:	08109317 	.word	0x08109317
 81090c8:	08109317 	.word	0x08109317
 81090cc:	08109317 	.word	0x08109317
 81090d0:	08109317 	.word	0x08109317
 81090d4:	0810910b 	.word	0x0810910b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81090d8:	4b94      	ldr	r3, [pc, #592]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090da:	681b      	ldr	r3, [r3, #0]
 81090dc:	f003 0320 	and.w	r3, r3, #32
 81090e0:	2b00      	cmp	r3, #0
 81090e2:	d009      	beq.n	81090f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81090e4:	4b91      	ldr	r3, [pc, #580]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090e6:	681b      	ldr	r3, [r3, #0]
 81090e8:	08db      	lsrs	r3, r3, #3
 81090ea:	f003 0303 	and.w	r3, r3, #3
 81090ee:	4a90      	ldr	r2, [pc, #576]	@ (8109330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81090f0:	fa22 f303 	lsr.w	r3, r2, r3
 81090f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81090f6:	e111      	b.n	810931c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81090f8:	4b8d      	ldr	r3, [pc, #564]	@ (8109330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81090fa:	61bb      	str	r3, [r7, #24]
      break;
 81090fc:	e10e      	b.n	810931c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81090fe:	4b8d      	ldr	r3, [pc, #564]	@ (8109334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109100:	61bb      	str	r3, [r7, #24]
      break;
 8109102:	e10b      	b.n	810931c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8109104:	4b8c      	ldr	r3, [pc, #560]	@ (8109338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109106:	61bb      	str	r3, [r7, #24]
      break;
 8109108:	e108      	b.n	810931c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810910a:	4b88      	ldr	r3, [pc, #544]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810910c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810910e:	f003 0303 	and.w	r3, r3, #3
 8109112:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8109114:	4b85      	ldr	r3, [pc, #532]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109118:	091b      	lsrs	r3, r3, #4
 810911a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810911e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109120:	4b82      	ldr	r3, [pc, #520]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109124:	f003 0301 	and.w	r3, r3, #1
 8109128:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810912a:	4b80      	ldr	r3, [pc, #512]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810912c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810912e:	08db      	lsrs	r3, r3, #3
 8109130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109134:	68fa      	ldr	r2, [r7, #12]
 8109136:	fb02 f303 	mul.w	r3, r2, r3
 810913a:	ee07 3a90 	vmov	s15, r3
 810913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109142:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8109146:	693b      	ldr	r3, [r7, #16]
 8109148:	2b00      	cmp	r3, #0
 810914a:	f000 80e1 	beq.w	8109310 <HAL_RCC_GetSysClockFreq+0x2b8>
 810914e:	697b      	ldr	r3, [r7, #20]
 8109150:	2b02      	cmp	r3, #2
 8109152:	f000 8083 	beq.w	810925c <HAL_RCC_GetSysClockFreq+0x204>
 8109156:	697b      	ldr	r3, [r7, #20]
 8109158:	2b02      	cmp	r3, #2
 810915a:	f200 80a1 	bhi.w	81092a0 <HAL_RCC_GetSysClockFreq+0x248>
 810915e:	697b      	ldr	r3, [r7, #20]
 8109160:	2b00      	cmp	r3, #0
 8109162:	d003      	beq.n	810916c <HAL_RCC_GetSysClockFreq+0x114>
 8109164:	697b      	ldr	r3, [r7, #20]
 8109166:	2b01      	cmp	r3, #1
 8109168:	d056      	beq.n	8109218 <HAL_RCC_GetSysClockFreq+0x1c0>
 810916a:	e099      	b.n	81092a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810916c:	4b6f      	ldr	r3, [pc, #444]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810916e:	681b      	ldr	r3, [r3, #0]
 8109170:	f003 0320 	and.w	r3, r3, #32
 8109174:	2b00      	cmp	r3, #0
 8109176:	d02d      	beq.n	81091d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109178:	4b6c      	ldr	r3, [pc, #432]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810917a:	681b      	ldr	r3, [r3, #0]
 810917c:	08db      	lsrs	r3, r3, #3
 810917e:	f003 0303 	and.w	r3, r3, #3
 8109182:	4a6b      	ldr	r2, [pc, #428]	@ (8109330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109184:	fa22 f303 	lsr.w	r3, r2, r3
 8109188:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810918a:	687b      	ldr	r3, [r7, #4]
 810918c:	ee07 3a90 	vmov	s15, r3
 8109190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109194:	693b      	ldr	r3, [r7, #16]
 8109196:	ee07 3a90 	vmov	s15, r3
 810919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810919e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091a2:	4b62      	ldr	r3, [pc, #392]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81091a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091aa:	ee07 3a90 	vmov	s15, r3
 81091ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81091b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810933c <HAL_RCC_GetSysClockFreq+0x2e4>
 81091ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81091be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81091c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81091c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81091ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81091d2:	e087      	b.n	81092e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81091d4:	693b      	ldr	r3, [r7, #16]
 81091d6:	ee07 3a90 	vmov	s15, r3
 81091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8109340 <HAL_RCC_GetSysClockFreq+0x2e8>
 81091e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091e6:	4b51      	ldr	r3, [pc, #324]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091ee:	ee07 3a90 	vmov	s15, r3
 81091f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81091fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810933c <HAL_RCC_GetSysClockFreq+0x2e4>
 81091fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810920a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810920e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109216:	e065      	b.n	81092e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109218:	693b      	ldr	r3, [r7, #16]
 810921a:	ee07 3a90 	vmov	s15, r3
 810921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109222:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8109344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8109226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810922a:	4b40      	ldr	r3, [pc, #256]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810922e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109232:	ee07 3a90 	vmov	s15, r3
 8109236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810923a:	ed97 6a02 	vldr	s12, [r7, #8]
 810923e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810933c <HAL_RCC_GetSysClockFreq+0x2e4>
 8109242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810924a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810924e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810925a:	e043      	b.n	81092e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810925c:	693b      	ldr	r3, [r7, #16]
 810925e:	ee07 3a90 	vmov	s15, r3
 8109262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109266:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8109348 <HAL_RCC_GetSysClockFreq+0x2f0>
 810926a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810926e:	4b2f      	ldr	r3, [pc, #188]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109276:	ee07 3a90 	vmov	s15, r3
 810927a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810927e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109282:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810933c <HAL_RCC_GetSysClockFreq+0x2e4>
 8109286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810928a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810928e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109296:	ee67 7a27 	vmul.f32	s15, s14, s15
 810929a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810929e:	e021      	b.n	81092e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81092a0:	693b      	ldr	r3, [r7, #16]
 81092a2:	ee07 3a90 	vmov	s15, r3
 81092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8109344 <HAL_RCC_GetSysClockFreq+0x2ec>
 81092ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81092b2:	4b1e      	ldr	r3, [pc, #120]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81092b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81092b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81092ba:	ee07 3a90 	vmov	s15, r3
 81092be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81092c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810933c <HAL_RCC_GetSysClockFreq+0x2e4>
 81092ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81092ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81092d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81092d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81092da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81092de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81092e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81092e4:	4b11      	ldr	r3, [pc, #68]	@ (810932c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81092e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81092e8:	0a5b      	lsrs	r3, r3, #9
 81092ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81092ee:	3301      	adds	r3, #1
 81092f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81092f2:	683b      	ldr	r3, [r7, #0]
 81092f4:	ee07 3a90 	vmov	s15, r3
 81092f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81092fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8109300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109308:	ee17 3a90 	vmov	r3, s15
 810930c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810930e:	e005      	b.n	810931c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8109310:	2300      	movs	r3, #0
 8109312:	61bb      	str	r3, [r7, #24]
      break;
 8109314:	e002      	b.n	810931c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8109316:	4b07      	ldr	r3, [pc, #28]	@ (8109334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109318:	61bb      	str	r3, [r7, #24]
      break;
 810931a:	bf00      	nop
  }

  return sysclockfreq;
 810931c:	69bb      	ldr	r3, [r7, #24]
}
 810931e:	4618      	mov	r0, r3
 8109320:	3724      	adds	r7, #36	@ 0x24
 8109322:	46bd      	mov	sp, r7
 8109324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109328:	4770      	bx	lr
 810932a:	bf00      	nop
 810932c:	58024400 	.word	0x58024400
 8109330:	03d09000 	.word	0x03d09000
 8109334:	003d0900 	.word	0x003d0900
 8109338:	007a1200 	.word	0x007a1200
 810933c:	46000000 	.word	0x46000000
 8109340:	4c742400 	.word	0x4c742400
 8109344:	4a742400 	.word	0x4a742400
 8109348:	4af42400 	.word	0x4af42400

0810934c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810934c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109350:	b0ca      	sub	sp, #296	@ 0x128
 8109352:	af00      	add	r7, sp, #0
 8109354:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109358:	2300      	movs	r3, #0
 810935a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810935e:	2300      	movs	r3, #0
 8109360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8109364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109368:	e9d3 2300 	ldrd	r2, r3, [r3]
 810936c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8109370:	2500      	movs	r5, #0
 8109372:	ea54 0305 	orrs.w	r3, r4, r5
 8109376:	d049      	beq.n	810940c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8109378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810937c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810937e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8109382:	d02f      	beq.n	81093e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8109384:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8109388:	d828      	bhi.n	81093dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 810938a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810938e:	d01a      	beq.n	81093c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8109390:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8109394:	d822      	bhi.n	81093dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8109396:	2b00      	cmp	r3, #0
 8109398:	d003      	beq.n	81093a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810939a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810939e:	d007      	beq.n	81093b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81093a0:	e01c      	b.n	81093dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81093a2:	4bb8      	ldr	r3, [pc, #736]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81093a6:	4ab7      	ldr	r2, [pc, #732]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81093ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81093ae:	e01a      	b.n	81093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093b4:	3308      	adds	r3, #8
 81093b6:	2102      	movs	r1, #2
 81093b8:	4618      	mov	r0, r3
 81093ba:	f001 f9d1 	bl	810a760 <RCCEx_PLL2_Config>
 81093be:	4603      	mov	r3, r0
 81093c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81093c4:	e00f      	b.n	81093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093ca:	3328      	adds	r3, #40	@ 0x28
 81093cc:	2102      	movs	r1, #2
 81093ce:	4618      	mov	r0, r3
 81093d0:	f001 fa78 	bl	810a8c4 <RCCEx_PLL3_Config>
 81093d4:	4603      	mov	r3, r0
 81093d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81093da:	e004      	b.n	81093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81093dc:	2301      	movs	r3, #1
 81093de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81093e2:	e000      	b.n	81093e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81093e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81093e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81093ea:	2b00      	cmp	r3, #0
 81093ec:	d10a      	bne.n	8109404 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81093ee:	4ba5      	ldr	r3, [pc, #660]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81093f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81093f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81093fc:	4aa1      	ldr	r2, [pc, #644]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81093fe:	430b      	orrs	r3, r1
 8109400:	6513      	str	r3, [r2, #80]	@ 0x50
 8109402:	e003      	b.n	810940c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810940c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109414:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8109418:	f04f 0900 	mov.w	r9, #0
 810941c:	ea58 0309 	orrs.w	r3, r8, r9
 8109420:	d047      	beq.n	81094b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8109422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109428:	2b04      	cmp	r3, #4
 810942a:	d82a      	bhi.n	8109482 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810942c:	a201      	add	r2, pc, #4	@ (adr r2, 8109434 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109432:	bf00      	nop
 8109434:	08109449 	.word	0x08109449
 8109438:	08109457 	.word	0x08109457
 810943c:	0810946d 	.word	0x0810946d
 8109440:	0810948b 	.word	0x0810948b
 8109444:	0810948b 	.word	0x0810948b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109448:	4b8e      	ldr	r3, [pc, #568]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810944a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810944c:	4a8d      	ldr	r2, [pc, #564]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810944e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109454:	e01a      	b.n	810948c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810945a:	3308      	adds	r3, #8
 810945c:	2100      	movs	r1, #0
 810945e:	4618      	mov	r0, r3
 8109460:	f001 f97e 	bl	810a760 <RCCEx_PLL2_Config>
 8109464:	4603      	mov	r3, r0
 8109466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810946a:	e00f      	b.n	810948c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810946c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109470:	3328      	adds	r3, #40	@ 0x28
 8109472:	2100      	movs	r1, #0
 8109474:	4618      	mov	r0, r3
 8109476:	f001 fa25 	bl	810a8c4 <RCCEx_PLL3_Config>
 810947a:	4603      	mov	r3, r0
 810947c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109480:	e004      	b.n	810948c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109482:	2301      	movs	r3, #1
 8109484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109488:	e000      	b.n	810948c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810948a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810948c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109490:	2b00      	cmp	r3, #0
 8109492:	d10a      	bne.n	81094aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8109494:	4b7b      	ldr	r3, [pc, #492]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109498:	f023 0107 	bic.w	r1, r3, #7
 810949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81094a2:	4a78      	ldr	r2, [pc, #480]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81094a4:	430b      	orrs	r3, r1
 81094a6:	6513      	str	r3, [r2, #80]	@ 0x50
 81094a8:	e003      	b.n	81094b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81094aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81094ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81094be:	f04f 0b00 	mov.w	fp, #0
 81094c2:	ea5a 030b 	orrs.w	r3, sl, fp
 81094c6:	d04c      	beq.n	8109562 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81094ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094d2:	d030      	beq.n	8109536 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81094d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094d8:	d829      	bhi.n	810952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81094da:	2bc0      	cmp	r3, #192	@ 0xc0
 81094dc:	d02d      	beq.n	810953a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81094de:	2bc0      	cmp	r3, #192	@ 0xc0
 81094e0:	d825      	bhi.n	810952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81094e2:	2b80      	cmp	r3, #128	@ 0x80
 81094e4:	d018      	beq.n	8109518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81094e6:	2b80      	cmp	r3, #128	@ 0x80
 81094e8:	d821      	bhi.n	810952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81094ea:	2b00      	cmp	r3, #0
 81094ec:	d002      	beq.n	81094f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81094ee:	2b40      	cmp	r3, #64	@ 0x40
 81094f0:	d007      	beq.n	8109502 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81094f2:	e01c      	b.n	810952e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81094f4:	4b63      	ldr	r3, [pc, #396]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81094f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81094f8:	4a62      	ldr	r2, [pc, #392]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81094fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81094fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109500:	e01c      	b.n	810953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109506:	3308      	adds	r3, #8
 8109508:	2100      	movs	r1, #0
 810950a:	4618      	mov	r0, r3
 810950c:	f001 f928 	bl	810a760 <RCCEx_PLL2_Config>
 8109510:	4603      	mov	r3, r0
 8109512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8109516:	e011      	b.n	810953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810951c:	3328      	adds	r3, #40	@ 0x28
 810951e:	2100      	movs	r1, #0
 8109520:	4618      	mov	r0, r3
 8109522:	f001 f9cf 	bl	810a8c4 <RCCEx_PLL3_Config>
 8109526:	4603      	mov	r3, r0
 8109528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810952c:	e006      	b.n	810953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810952e:	2301      	movs	r3, #1
 8109530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109534:	e002      	b.n	810953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8109536:	bf00      	nop
 8109538:	e000      	b.n	810953c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810953a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810953c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109540:	2b00      	cmp	r3, #0
 8109542:	d10a      	bne.n	810955a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8109544:	4b4f      	ldr	r3, [pc, #316]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109548:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109552:	4a4c      	ldr	r2, [pc, #304]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8109554:	430b      	orrs	r3, r1
 8109556:	6513      	str	r3, [r2, #80]	@ 0x50
 8109558:	e003      	b.n	8109562 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810955a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810955e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8109562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109566:	e9d3 2300 	ldrd	r2, r3, [r3]
 810956a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810956e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8109572:	2300      	movs	r3, #0
 8109574:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8109578:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810957c:	460b      	mov	r3, r1
 810957e:	4313      	orrs	r3, r2
 8109580:	d053      	beq.n	810962a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8109582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810958a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810958e:	d035      	beq.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8109590:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8109594:	d82e      	bhi.n	81095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8109596:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810959a:	d031      	beq.n	8109600 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810959c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81095a0:	d828      	bhi.n	81095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81095a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81095a6:	d01a      	beq.n	81095de <HAL_RCCEx_PeriphCLKConfig+0x292>
 81095a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81095ac:	d822      	bhi.n	81095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81095ae:	2b00      	cmp	r3, #0
 81095b0:	d003      	beq.n	81095ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81095b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81095b6:	d007      	beq.n	81095c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81095b8:	e01c      	b.n	81095f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81095ba:	4b32      	ldr	r3, [pc, #200]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81095be:	4a31      	ldr	r2, [pc, #196]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81095c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81095c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81095c6:	e01c      	b.n	8109602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095cc:	3308      	adds	r3, #8
 81095ce:	2100      	movs	r1, #0
 81095d0:	4618      	mov	r0, r3
 81095d2:	f001 f8c5 	bl	810a760 <RCCEx_PLL2_Config>
 81095d6:	4603      	mov	r3, r0
 81095d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81095dc:	e011      	b.n	8109602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095e2:	3328      	adds	r3, #40	@ 0x28
 81095e4:	2100      	movs	r1, #0
 81095e6:	4618      	mov	r0, r3
 81095e8:	f001 f96c 	bl	810a8c4 <RCCEx_PLL3_Config>
 81095ec:	4603      	mov	r3, r0
 81095ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81095f2:	e006      	b.n	8109602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81095f4:	2301      	movs	r3, #1
 81095f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81095fa:	e002      	b.n	8109602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81095fc:	bf00      	nop
 81095fe:	e000      	b.n	8109602 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8109600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109606:	2b00      	cmp	r3, #0
 8109608:	d10b      	bne.n	8109622 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810960a:	4b1e      	ldr	r3, [pc, #120]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810960e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8109612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810961a:	4a1a      	ldr	r2, [pc, #104]	@ (8109684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810961c:	430b      	orrs	r3, r1
 810961e:	6593      	str	r3, [r2, #88]	@ 0x58
 8109620:	e003      	b.n	810962a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109632:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8109636:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810963a:	2300      	movs	r3, #0
 810963c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8109640:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8109644:	460b      	mov	r3, r1
 8109646:	4313      	orrs	r3, r2
 8109648:	d056      	beq.n	81096f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810964e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8109652:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109656:	d038      	beq.n	81096ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8109658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810965c:	d831      	bhi.n	81096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810965e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109662:	d034      	beq.n	81096ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8109664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109668:	d82b      	bhi.n	81096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810966a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810966e:	d01d      	beq.n	81096ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8109670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109674:	d825      	bhi.n	81096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8109676:	2b00      	cmp	r3, #0
 8109678:	d006      	beq.n	8109688 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810967a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810967e:	d00a      	beq.n	8109696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8109680:	e01f      	b.n	81096c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8109682:	bf00      	nop
 8109684:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109688:	4ba2      	ldr	r3, [pc, #648]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810968c:	4aa1      	ldr	r2, [pc, #644]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810968e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8109694:	e01c      	b.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810969a:	3308      	adds	r3, #8
 810969c:	2100      	movs	r1, #0
 810969e:	4618      	mov	r0, r3
 81096a0:	f001 f85e 	bl	810a760 <RCCEx_PLL2_Config>
 81096a4:	4603      	mov	r3, r0
 81096a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81096aa:	e011      	b.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096b0:	3328      	adds	r3, #40	@ 0x28
 81096b2:	2100      	movs	r1, #0
 81096b4:	4618      	mov	r0, r3
 81096b6:	f001 f905 	bl	810a8c4 <RCCEx_PLL3_Config>
 81096ba:	4603      	mov	r3, r0
 81096bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81096c0:	e006      	b.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81096c2:	2301      	movs	r3, #1
 81096c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81096c8:	e002      	b.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81096ca:	bf00      	nop
 81096cc:	e000      	b.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81096ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81096d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81096d4:	2b00      	cmp	r3, #0
 81096d6:	d10b      	bne.n	81096f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81096d8:	4b8e      	ldr	r3, [pc, #568]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81096da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81096dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81096e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81096e8:	4a8a      	ldr	r2, [pc, #552]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81096ea:	430b      	orrs	r3, r1
 81096ec:	6593      	str	r3, [r2, #88]	@ 0x58
 81096ee:	e003      	b.n	81096f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81096f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81096f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109700:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8109704:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8109708:	2300      	movs	r3, #0
 810970a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810970e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8109712:	460b      	mov	r3, r1
 8109714:	4313      	orrs	r3, r2
 8109716:	d03a      	beq.n	810978e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8109718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810971c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810971e:	2b30      	cmp	r3, #48	@ 0x30
 8109720:	d01f      	beq.n	8109762 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8109722:	2b30      	cmp	r3, #48	@ 0x30
 8109724:	d819      	bhi.n	810975a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8109726:	2b20      	cmp	r3, #32
 8109728:	d00c      	beq.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810972a:	2b20      	cmp	r3, #32
 810972c:	d815      	bhi.n	810975a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810972e:	2b00      	cmp	r3, #0
 8109730:	d019      	beq.n	8109766 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8109732:	2b10      	cmp	r3, #16
 8109734:	d111      	bne.n	810975a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109736:	4b77      	ldr	r3, [pc, #476]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810973a:	4a76      	ldr	r2, [pc, #472]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810973c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8109742:	e011      	b.n	8109768 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8109744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109748:	3308      	adds	r3, #8
 810974a:	2102      	movs	r1, #2
 810974c:	4618      	mov	r0, r3
 810974e:	f001 f807 	bl	810a760 <RCCEx_PLL2_Config>
 8109752:	4603      	mov	r3, r0
 8109754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8109758:	e006      	b.n	8109768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810975a:	2301      	movs	r3, #1
 810975c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109760:	e002      	b.n	8109768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8109762:	bf00      	nop
 8109764:	e000      	b.n	8109768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8109766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810976c:	2b00      	cmp	r3, #0
 810976e:	d10a      	bne.n	8109786 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8109770:	4b68      	ldr	r3, [pc, #416]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109774:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8109778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810977c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810977e:	4a65      	ldr	r2, [pc, #404]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109780:	430b      	orrs	r3, r1
 8109782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8109784:	e003      	b.n	810978e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810978a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109796:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810979a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810979e:	2300      	movs	r3, #0
 81097a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81097a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81097a8:	460b      	mov	r3, r1
 81097aa:	4313      	orrs	r3, r2
 81097ac:	d051      	beq.n	8109852 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81097b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81097b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81097b8:	d035      	beq.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81097ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81097be:	d82e      	bhi.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81097c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81097c4:	d031      	beq.n	810982a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81097c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81097ca:	d828      	bhi.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81097cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81097d0:	d01a      	beq.n	8109808 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81097d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81097d6:	d822      	bhi.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81097d8:	2b00      	cmp	r3, #0
 81097da:	d003      	beq.n	81097e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81097dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81097e0:	d007      	beq.n	81097f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81097e2:	e01c      	b.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81097e4:	4b4b      	ldr	r3, [pc, #300]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81097e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097e8:	4a4a      	ldr	r2, [pc, #296]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81097ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81097ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81097f0:	e01c      	b.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81097f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81097f6:	3308      	adds	r3, #8
 81097f8:	2100      	movs	r1, #0
 81097fa:	4618      	mov	r0, r3
 81097fc:	f000 ffb0 	bl	810a760 <RCCEx_PLL2_Config>
 8109800:	4603      	mov	r3, r0
 8109802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8109806:	e011      	b.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810980c:	3328      	adds	r3, #40	@ 0x28
 810980e:	2100      	movs	r1, #0
 8109810:	4618      	mov	r0, r3
 8109812:	f001 f857 	bl	810a8c4 <RCCEx_PLL3_Config>
 8109816:	4603      	mov	r3, r0
 8109818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810981c:	e006      	b.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810981e:	2301      	movs	r3, #1
 8109820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109824:	e002      	b.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8109826:	bf00      	nop
 8109828:	e000      	b.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810982a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810982c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109830:	2b00      	cmp	r3, #0
 8109832:	d10a      	bne.n	810984a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8109834:	4b37      	ldr	r3, [pc, #220]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109838:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810983c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109842:	4a34      	ldr	r2, [pc, #208]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8109844:	430b      	orrs	r3, r1
 8109846:	6513      	str	r3, [r2, #80]	@ 0x50
 8109848:	e003      	b.n	8109852 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810984a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810984e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8109852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810985a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810985e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8109862:	2300      	movs	r3, #0
 8109864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8109868:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810986c:	460b      	mov	r3, r1
 810986e:	4313      	orrs	r3, r2
 8109870:	d056      	beq.n	8109920 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8109872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810987c:	d033      	beq.n	81098e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810987e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8109882:	d82c      	bhi.n	81098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8109884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109888:	d02f      	beq.n	81098ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810988a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810988e:	d826      	bhi.n	81098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8109890:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109894:	d02b      	beq.n	81098ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8109896:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810989a:	d820      	bhi.n	81098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 810989c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81098a0:	d012      	beq.n	81098c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81098a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81098a6:	d81a      	bhi.n	81098de <HAL_RCCEx_PeriphCLKConfig+0x592>
 81098a8:	2b00      	cmp	r3, #0
 81098aa:	d022      	beq.n	81098f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81098ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81098b0:	d115      	bne.n	81098de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81098b6:	3308      	adds	r3, #8
 81098b8:	2101      	movs	r1, #1
 81098ba:	4618      	mov	r0, r3
 81098bc:	f000 ff50 	bl	810a760 <RCCEx_PLL2_Config>
 81098c0:	4603      	mov	r3, r0
 81098c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81098c6:	e015      	b.n	81098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81098cc:	3328      	adds	r3, #40	@ 0x28
 81098ce:	2101      	movs	r1, #1
 81098d0:	4618      	mov	r0, r3
 81098d2:	f000 fff7 	bl	810a8c4 <RCCEx_PLL3_Config>
 81098d6:	4603      	mov	r3, r0
 81098d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81098dc:	e00a      	b.n	81098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81098de:	2301      	movs	r3, #1
 81098e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81098e4:	e006      	b.n	81098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098e6:	bf00      	nop
 81098e8:	e004      	b.n	81098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098ea:	bf00      	nop
 81098ec:	e002      	b.n	81098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098ee:	bf00      	nop
 81098f0:	e000      	b.n	81098f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81098f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81098f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81098f8:	2b00      	cmp	r3, #0
 81098fa:	d10d      	bne.n	8109918 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81098fc:	4b05      	ldr	r3, [pc, #20]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81098fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109900:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8109904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810990a:	4a02      	ldr	r2, [pc, #8]	@ (8109914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810990c:	430b      	orrs	r3, r1
 810990e:	6513      	str	r3, [r2, #80]	@ 0x50
 8109910:	e006      	b.n	8109920 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8109912:	bf00      	nop
 8109914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810991c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8109920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109928:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810992c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8109930:	2300      	movs	r3, #0
 8109932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8109936:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810993a:	460b      	mov	r3, r1
 810993c:	4313      	orrs	r3, r2
 810993e:	d055      	beq.n	81099ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8109940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8109948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810994c:	d033      	beq.n	81099b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810994e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109952:	d82c      	bhi.n	81099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8109954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109958:	d02f      	beq.n	81099ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810995a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810995e:	d826      	bhi.n	81099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8109960:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109964:	d02b      	beq.n	81099be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8109966:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810996a:	d820      	bhi.n	81099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 810996c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109970:	d012      	beq.n	8109998 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8109972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109976:	d81a      	bhi.n	81099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8109978:	2b00      	cmp	r3, #0
 810997a:	d022      	beq.n	81099c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810997c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109980:	d115      	bne.n	81099ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109986:	3308      	adds	r3, #8
 8109988:	2101      	movs	r1, #1
 810998a:	4618      	mov	r0, r3
 810998c:	f000 fee8 	bl	810a760 <RCCEx_PLL2_Config>
 8109990:	4603      	mov	r3, r0
 8109992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8109996:	e015      	b.n	81099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810999c:	3328      	adds	r3, #40	@ 0x28
 810999e:	2101      	movs	r1, #1
 81099a0:	4618      	mov	r0, r3
 81099a2:	f000 ff8f 	bl	810a8c4 <RCCEx_PLL3_Config>
 81099a6:	4603      	mov	r3, r0
 81099a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81099ac:	e00a      	b.n	81099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81099ae:	2301      	movs	r3, #1
 81099b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81099b4:	e006      	b.n	81099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099b6:	bf00      	nop
 81099b8:	e004      	b.n	81099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099ba:	bf00      	nop
 81099bc:	e002      	b.n	81099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099be:	bf00      	nop
 81099c0:	e000      	b.n	81099c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81099c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81099c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	d10b      	bne.n	81099e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81099cc:	4ba4      	ldr	r3, [pc, #656]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81099ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81099d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81099d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81099d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81099dc:	4aa0      	ldr	r2, [pc, #640]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81099de:	430b      	orrs	r3, r1
 81099e0:	6593      	str	r3, [r2, #88]	@ 0x58
 81099e2:	e003      	b.n	81099ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81099e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81099e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81099ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81099f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81099f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81099fc:	2300      	movs	r3, #0
 81099fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8109a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8109a06:	460b      	mov	r3, r1
 8109a08:	4313      	orrs	r3, r2
 8109a0a:	d037      	beq.n	8109a7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8109a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a16:	d00e      	beq.n	8109a36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8109a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a1c:	d816      	bhi.n	8109a4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8109a1e:	2b00      	cmp	r3, #0
 8109a20:	d018      	beq.n	8109a54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8109a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109a26:	d111      	bne.n	8109a4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109a28:	4b8d      	ldr	r3, [pc, #564]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109a2c:	4a8c      	ldr	r2, [pc, #560]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8109a34:	e00f      	b.n	8109a56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a3a:	3308      	adds	r3, #8
 8109a3c:	2101      	movs	r1, #1
 8109a3e:	4618      	mov	r0, r3
 8109a40:	f000 fe8e 	bl	810a760 <RCCEx_PLL2_Config>
 8109a44:	4603      	mov	r3, r0
 8109a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8109a4a:	e004      	b.n	8109a56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109a4c:	2301      	movs	r3, #1
 8109a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109a52:	e000      	b.n	8109a56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8109a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109a5a:	2b00      	cmp	r3, #0
 8109a5c:	d10a      	bne.n	8109a74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109a5e:	4b80      	ldr	r3, [pc, #512]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109a62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8109a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109a6e:	430b      	orrs	r3, r1
 8109a70:	6513      	str	r3, [r2, #80]	@ 0x50
 8109a72:	e003      	b.n	8109a7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8109a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8109a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8109a8c:	2300      	movs	r3, #0
 8109a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8109a92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8109a96:	460b      	mov	r3, r1
 8109a98:	4313      	orrs	r3, r2
 8109a9a:	d039      	beq.n	8109b10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8109a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109aa2:	2b03      	cmp	r3, #3
 8109aa4:	d81c      	bhi.n	8109ae0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8109aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8109aac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8109aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109aac:	08109ae9 	.word	0x08109ae9
 8109ab0:	08109abd 	.word	0x08109abd
 8109ab4:	08109acb 	.word	0x08109acb
 8109ab8:	08109ae9 	.word	0x08109ae9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109abc:	4b68      	ldr	r3, [pc, #416]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109ac0:	4a67      	ldr	r2, [pc, #412]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8109ac8:	e00f      	b.n	8109aea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8109aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109ace:	3308      	adds	r3, #8
 8109ad0:	2102      	movs	r1, #2
 8109ad2:	4618      	mov	r0, r3
 8109ad4:	f000 fe44 	bl	810a760 <RCCEx_PLL2_Config>
 8109ad8:	4603      	mov	r3, r0
 8109ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8109ade:	e004      	b.n	8109aea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8109ae0:	2301      	movs	r3, #1
 8109ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109ae6:	e000      	b.n	8109aea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8109ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109aee:	2b00      	cmp	r3, #0
 8109af0:	d10a      	bne.n	8109b08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8109af2:	4b5b      	ldr	r3, [pc, #364]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109af6:	f023 0103 	bic.w	r1, r3, #3
 8109afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109b00:	4a57      	ldr	r2, [pc, #348]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b02:	430b      	orrs	r3, r1
 8109b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8109b06:	e003      	b.n	8109b10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8109b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8109b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8109b20:	2300      	movs	r3, #0
 8109b22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8109b26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8109b2a:	460b      	mov	r3, r1
 8109b2c:	4313      	orrs	r3, r2
 8109b2e:	f000 809f 	beq.w	8109c70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8109b32:	4b4c      	ldr	r3, [pc, #304]	@ (8109c64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8109b34:	681b      	ldr	r3, [r3, #0]
 8109b36:	4a4b      	ldr	r2, [pc, #300]	@ (8109c64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8109b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8109b3e:	f7f9 fe33 	bl	81037a8 <HAL_GetTick>
 8109b42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109b46:	e00b      	b.n	8109b60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8109b48:	f7f9 fe2e 	bl	81037a8 <HAL_GetTick>
 8109b4c:	4602      	mov	r2, r0
 8109b4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8109b52:	1ad3      	subs	r3, r2, r3
 8109b54:	2b64      	cmp	r3, #100	@ 0x64
 8109b56:	d903      	bls.n	8109b60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8109b58:	2303      	movs	r3, #3
 8109b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109b5e:	e005      	b.n	8109b6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109b60:	4b40      	ldr	r3, [pc, #256]	@ (8109c64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8109b62:	681b      	ldr	r3, [r3, #0]
 8109b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109b68:	2b00      	cmp	r3, #0
 8109b6a:	d0ed      	beq.n	8109b48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8109b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d179      	bne.n	8109c68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8109b74:	4b3a      	ldr	r3, [pc, #232]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8109b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109b80:	4053      	eors	r3, r2
 8109b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109b86:	2b00      	cmp	r3, #0
 8109b88:	d015      	beq.n	8109bb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8109b8a:	4b35      	ldr	r3, [pc, #212]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109b92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109b96:	4b32      	ldr	r3, [pc, #200]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109b9a:	4a31      	ldr	r2, [pc, #196]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8109ba0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109bac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8109bae:	4a2c      	ldr	r2, [pc, #176]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8109bb4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8109bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109bc2:	d118      	bne.n	8109bf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8109bc4:	f7f9 fdf0 	bl	81037a8 <HAL_GetTick>
 8109bc8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109bcc:	e00d      	b.n	8109bea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109bce:	f7f9 fdeb 	bl	81037a8 <HAL_GetTick>
 8109bd2:	4602      	mov	r2, r0
 8109bd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8109bd8:	1ad2      	subs	r2, r2, r3
 8109bda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8109bde:	429a      	cmp	r2, r3
 8109be0:	d903      	bls.n	8109bea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8109be2:	2303      	movs	r3, #3
 8109be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8109be8:	e005      	b.n	8109bf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109bea:	4b1d      	ldr	r3, [pc, #116]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109bee:	f003 0302 	and.w	r3, r3, #2
 8109bf2:	2b00      	cmp	r3, #0
 8109bf4:	d0eb      	beq.n	8109bce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8109bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109bfa:	2b00      	cmp	r3, #0
 8109bfc:	d12b      	bne.n	8109c56 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8109bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8109c0e:	d110      	bne.n	8109c32 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8109c10:	4b13      	ldr	r3, [pc, #76]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c12:	691b      	ldr	r3, [r3, #16]
 8109c14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8109c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109c20:	091b      	lsrs	r3, r3, #4
 8109c22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8109c26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8109c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c2c:	430b      	orrs	r3, r1
 8109c2e:	6113      	str	r3, [r2, #16]
 8109c30:	e005      	b.n	8109c3e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8109c32:	4b0b      	ldr	r3, [pc, #44]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c34:	691b      	ldr	r3, [r3, #16]
 8109c36:	4a0a      	ldr	r2, [pc, #40]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8109c3c:	6113      	str	r3, [r2, #16]
 8109c3e:	4b08      	ldr	r3, [pc, #32]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8109c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8109c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8109c4e:	4a04      	ldr	r2, [pc, #16]	@ (8109c60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8109c50:	430b      	orrs	r3, r1
 8109c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8109c54:	e00c      	b.n	8109c70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8109c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8109c5e:	e007      	b.n	8109c70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8109c60:	58024400 	.word	0x58024400
 8109c64:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8109c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c78:	f002 0301 	and.w	r3, r2, #1
 8109c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8109c80:	2300      	movs	r3, #0
 8109c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8109c86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8109c8a:	460b      	mov	r3, r1
 8109c8c:	4313      	orrs	r3, r2
 8109c8e:	f000 8089 	beq.w	8109da4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8109c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109c96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109c98:	2b28      	cmp	r3, #40	@ 0x28
 8109c9a:	d86b      	bhi.n	8109d74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8109c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8109ca4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8109c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ca2:	bf00      	nop
 8109ca4:	08109d7d 	.word	0x08109d7d
 8109ca8:	08109d75 	.word	0x08109d75
 8109cac:	08109d75 	.word	0x08109d75
 8109cb0:	08109d75 	.word	0x08109d75
 8109cb4:	08109d75 	.word	0x08109d75
 8109cb8:	08109d75 	.word	0x08109d75
 8109cbc:	08109d75 	.word	0x08109d75
 8109cc0:	08109d75 	.word	0x08109d75
 8109cc4:	08109d49 	.word	0x08109d49
 8109cc8:	08109d75 	.word	0x08109d75
 8109ccc:	08109d75 	.word	0x08109d75
 8109cd0:	08109d75 	.word	0x08109d75
 8109cd4:	08109d75 	.word	0x08109d75
 8109cd8:	08109d75 	.word	0x08109d75
 8109cdc:	08109d75 	.word	0x08109d75
 8109ce0:	08109d75 	.word	0x08109d75
 8109ce4:	08109d5f 	.word	0x08109d5f
 8109ce8:	08109d75 	.word	0x08109d75
 8109cec:	08109d75 	.word	0x08109d75
 8109cf0:	08109d75 	.word	0x08109d75
 8109cf4:	08109d75 	.word	0x08109d75
 8109cf8:	08109d75 	.word	0x08109d75
 8109cfc:	08109d75 	.word	0x08109d75
 8109d00:	08109d75 	.word	0x08109d75
 8109d04:	08109d7d 	.word	0x08109d7d
 8109d08:	08109d75 	.word	0x08109d75
 8109d0c:	08109d75 	.word	0x08109d75
 8109d10:	08109d75 	.word	0x08109d75
 8109d14:	08109d75 	.word	0x08109d75
 8109d18:	08109d75 	.word	0x08109d75
 8109d1c:	08109d75 	.word	0x08109d75
 8109d20:	08109d75 	.word	0x08109d75
 8109d24:	08109d7d 	.word	0x08109d7d
 8109d28:	08109d75 	.word	0x08109d75
 8109d2c:	08109d75 	.word	0x08109d75
 8109d30:	08109d75 	.word	0x08109d75
 8109d34:	08109d75 	.word	0x08109d75
 8109d38:	08109d75 	.word	0x08109d75
 8109d3c:	08109d75 	.word	0x08109d75
 8109d40:	08109d75 	.word	0x08109d75
 8109d44:	08109d7d 	.word	0x08109d7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109d4c:	3308      	adds	r3, #8
 8109d4e:	2101      	movs	r1, #1
 8109d50:	4618      	mov	r0, r3
 8109d52:	f000 fd05 	bl	810a760 <RCCEx_PLL2_Config>
 8109d56:	4603      	mov	r3, r0
 8109d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8109d5c:	e00f      	b.n	8109d7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109d62:	3328      	adds	r3, #40	@ 0x28
 8109d64:	2101      	movs	r1, #1
 8109d66:	4618      	mov	r0, r3
 8109d68:	f000 fdac 	bl	810a8c4 <RCCEx_PLL3_Config>
 8109d6c:	4603      	mov	r3, r0
 8109d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8109d72:	e004      	b.n	8109d7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109d74:	2301      	movs	r3, #1
 8109d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109d7a:	e000      	b.n	8109d7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8109d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109d82:	2b00      	cmp	r3, #0
 8109d84:	d10a      	bne.n	8109d9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8109d86:	4bbf      	ldr	r3, [pc, #764]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109d8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8109d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109d94:	4abb      	ldr	r2, [pc, #748]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109d96:	430b      	orrs	r3, r1
 8109d98:	6553      	str	r3, [r2, #84]	@ 0x54
 8109d9a:	e003      	b.n	8109da4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8109da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109dac:	f002 0302 	and.w	r3, r2, #2
 8109db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8109db4:	2300      	movs	r3, #0
 8109db6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8109dba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8109dbe:	460b      	mov	r3, r1
 8109dc0:	4313      	orrs	r3, r2
 8109dc2:	d041      	beq.n	8109e48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8109dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109dca:	2b05      	cmp	r3, #5
 8109dcc:	d824      	bhi.n	8109e18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8109dce:	a201      	add	r2, pc, #4	@ (adr r2, 8109dd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8109dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109dd4:	08109e21 	.word	0x08109e21
 8109dd8:	08109ded 	.word	0x08109ded
 8109ddc:	08109e03 	.word	0x08109e03
 8109de0:	08109e21 	.word	0x08109e21
 8109de4:	08109e21 	.word	0x08109e21
 8109de8:	08109e21 	.word	0x08109e21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109df0:	3308      	adds	r3, #8
 8109df2:	2101      	movs	r1, #1
 8109df4:	4618      	mov	r0, r3
 8109df6:	f000 fcb3 	bl	810a760 <RCCEx_PLL2_Config>
 8109dfa:	4603      	mov	r3, r0
 8109dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8109e00:	e00f      	b.n	8109e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e06:	3328      	adds	r3, #40	@ 0x28
 8109e08:	2101      	movs	r1, #1
 8109e0a:	4618      	mov	r0, r3
 8109e0c:	f000 fd5a 	bl	810a8c4 <RCCEx_PLL3_Config>
 8109e10:	4603      	mov	r3, r0
 8109e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8109e16:	e004      	b.n	8109e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109e18:	2301      	movs	r3, #1
 8109e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109e1e:	e000      	b.n	8109e22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8109e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109e26:	2b00      	cmp	r3, #0
 8109e28:	d10a      	bne.n	8109e40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8109e2a:	4b96      	ldr	r3, [pc, #600]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109e2e:	f023 0107 	bic.w	r1, r3, #7
 8109e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109e38:	4a92      	ldr	r2, [pc, #584]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109e3a:	430b      	orrs	r3, r1
 8109e3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8109e3e:	e003      	b.n	8109e48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8109e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109e50:	f002 0304 	and.w	r3, r2, #4
 8109e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8109e58:	2300      	movs	r3, #0
 8109e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8109e5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8109e62:	460b      	mov	r3, r1
 8109e64:	4313      	orrs	r3, r2
 8109e66:	d044      	beq.n	8109ef2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8109e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8109e70:	2b05      	cmp	r3, #5
 8109e72:	d825      	bhi.n	8109ec0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8109e74:	a201      	add	r2, pc, #4	@ (adr r2, 8109e7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8109e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e7a:	bf00      	nop
 8109e7c:	08109ec9 	.word	0x08109ec9
 8109e80:	08109e95 	.word	0x08109e95
 8109e84:	08109eab 	.word	0x08109eab
 8109e88:	08109ec9 	.word	0x08109ec9
 8109e8c:	08109ec9 	.word	0x08109ec9
 8109e90:	08109ec9 	.word	0x08109ec9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8109e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109e98:	3308      	adds	r3, #8
 8109e9a:	2101      	movs	r1, #1
 8109e9c:	4618      	mov	r0, r3
 8109e9e:	f000 fc5f 	bl	810a760 <RCCEx_PLL2_Config>
 8109ea2:	4603      	mov	r3, r0
 8109ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8109ea8:	e00f      	b.n	8109eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109eae:	3328      	adds	r3, #40	@ 0x28
 8109eb0:	2101      	movs	r1, #1
 8109eb2:	4618      	mov	r0, r3
 8109eb4:	f000 fd06 	bl	810a8c4 <RCCEx_PLL3_Config>
 8109eb8:	4603      	mov	r3, r0
 8109eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8109ebe:	e004      	b.n	8109eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109ec0:	2301      	movs	r3, #1
 8109ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109ec6:	e000      	b.n	8109eca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8109ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109ece:	2b00      	cmp	r3, #0
 8109ed0:	d10b      	bne.n	8109eea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8109ed2:	4b6c      	ldr	r3, [pc, #432]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109ed6:	f023 0107 	bic.w	r1, r3, #7
 8109eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8109ee2:	4a68      	ldr	r2, [pc, #416]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109ee4:	430b      	orrs	r3, r1
 8109ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8109ee8:	e003      	b.n	8109ef2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109efa:	f002 0320 	and.w	r3, r2, #32
 8109efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8109f02:	2300      	movs	r3, #0
 8109f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8109f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8109f0c:	460b      	mov	r3, r1
 8109f0e:	4313      	orrs	r3, r2
 8109f10:	d055      	beq.n	8109fbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8109f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109f1e:	d033      	beq.n	8109f88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8109f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109f24:	d82c      	bhi.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109f2a:	d02f      	beq.n	8109f8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8109f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109f30:	d826      	bhi.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109f36:	d02b      	beq.n	8109f90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8109f38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109f3c:	d820      	bhi.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109f42:	d012      	beq.n	8109f6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8109f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109f48:	d81a      	bhi.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8109f4a:	2b00      	cmp	r3, #0
 8109f4c:	d022      	beq.n	8109f94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8109f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109f52:	d115      	bne.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109f58:	3308      	adds	r3, #8
 8109f5a:	2100      	movs	r1, #0
 8109f5c:	4618      	mov	r0, r3
 8109f5e:	f000 fbff 	bl	810a760 <RCCEx_PLL2_Config>
 8109f62:	4603      	mov	r3, r0
 8109f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8109f68:	e015      	b.n	8109f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8109f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109f6e:	3328      	adds	r3, #40	@ 0x28
 8109f70:	2102      	movs	r1, #2
 8109f72:	4618      	mov	r0, r3
 8109f74:	f000 fca6 	bl	810a8c4 <RCCEx_PLL3_Config>
 8109f78:	4603      	mov	r3, r0
 8109f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8109f7e:	e00a      	b.n	8109f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109f80:	2301      	movs	r3, #1
 8109f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109f86:	e006      	b.n	8109f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f88:	bf00      	nop
 8109f8a:	e004      	b.n	8109f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f8c:	bf00      	nop
 8109f8e:	e002      	b.n	8109f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f90:	bf00      	nop
 8109f92:	e000      	b.n	8109f96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8109f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109f9a:	2b00      	cmp	r3, #0
 8109f9c:	d10b      	bne.n	8109fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8109f9e:	4b39      	ldr	r3, [pc, #228]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109fa2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8109fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109fae:	4a35      	ldr	r2, [pc, #212]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8109fb0:	430b      	orrs	r3, r1
 8109fb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8109fb4:	e003      	b.n	8109fbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8109fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109fc6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8109fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8109fce:	2300      	movs	r3, #0
 8109fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8109fd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8109fd8:	460b      	mov	r3, r1
 8109fda:	4313      	orrs	r3, r2
 8109fdc:	d058      	beq.n	810a090 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8109fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8109fe6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8109fea:	d033      	beq.n	810a054 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8109fec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8109ff0:	d82c      	bhi.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8109ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109ff6:	d02f      	beq.n	810a058 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8109ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109ffc:	d826      	bhi.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8109ffe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810a002:	d02b      	beq.n	810a05c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810a004:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810a008:	d820      	bhi.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810a00a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a00e:	d012      	beq.n	810a036 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810a010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a014:	d81a      	bhi.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810a016:	2b00      	cmp	r3, #0
 810a018:	d022      	beq.n	810a060 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810a01a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810a01e:	d115      	bne.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a024:	3308      	adds	r3, #8
 810a026:	2100      	movs	r1, #0
 810a028:	4618      	mov	r0, r3
 810a02a:	f000 fb99 	bl	810a760 <RCCEx_PLL2_Config>
 810a02e:	4603      	mov	r3, r0
 810a030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810a034:	e015      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a03a:	3328      	adds	r3, #40	@ 0x28
 810a03c:	2102      	movs	r1, #2
 810a03e:	4618      	mov	r0, r3
 810a040:	f000 fc40 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a044:	4603      	mov	r3, r0
 810a046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810a04a:	e00a      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a04c:	2301      	movs	r3, #1
 810a04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a052:	e006      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a054:	bf00      	nop
 810a056:	e004      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a058:	bf00      	nop
 810a05a:	e002      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a05c:	bf00      	nop
 810a05e:	e000      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810a060:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a066:	2b00      	cmp	r3, #0
 810a068:	d10e      	bne.n	810a088 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810a06a:	4b06      	ldr	r3, [pc, #24]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810a06c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a06e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810a07a:	4a02      	ldr	r2, [pc, #8]	@ (810a084 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810a07c:	430b      	orrs	r3, r1
 810a07e:	6593      	str	r3, [r2, #88]	@ 0x58
 810a080:	e006      	b.n	810a090 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810a082:	bf00      	nop
 810a084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a08c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810a090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a098:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810a09c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810a0a0:	2300      	movs	r3, #0
 810a0a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810a0a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810a0aa:	460b      	mov	r3, r1
 810a0ac:	4313      	orrs	r3, r2
 810a0ae:	d055      	beq.n	810a15c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810a0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a0b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810a0b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810a0bc:	d033      	beq.n	810a126 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810a0be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810a0c2:	d82c      	bhi.n	810a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a0c8:	d02f      	beq.n	810a12a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810a0ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a0ce:	d826      	bhi.n	810a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810a0d4:	d02b      	beq.n	810a12e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810a0d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810a0da:	d820      	bhi.n	810a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a0e0:	d012      	beq.n	810a108 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810a0e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a0e6:	d81a      	bhi.n	810a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810a0e8:	2b00      	cmp	r3, #0
 810a0ea:	d022      	beq.n	810a132 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810a0ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a0f0:	d115      	bne.n	810a11e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a0f6:	3308      	adds	r3, #8
 810a0f8:	2100      	movs	r1, #0
 810a0fa:	4618      	mov	r0, r3
 810a0fc:	f000 fb30 	bl	810a760 <RCCEx_PLL2_Config>
 810a100:	4603      	mov	r3, r0
 810a102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810a106:	e015      	b.n	810a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a10c:	3328      	adds	r3, #40	@ 0x28
 810a10e:	2102      	movs	r1, #2
 810a110:	4618      	mov	r0, r3
 810a112:	f000 fbd7 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a116:	4603      	mov	r3, r0
 810a118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810a11c:	e00a      	b.n	810a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a11e:	2301      	movs	r3, #1
 810a120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a124:	e006      	b.n	810a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a126:	bf00      	nop
 810a128:	e004      	b.n	810a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a12a:	bf00      	nop
 810a12c:	e002      	b.n	810a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a12e:	bf00      	nop
 810a130:	e000      	b.n	810a134 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810a132:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a138:	2b00      	cmp	r3, #0
 810a13a:	d10b      	bne.n	810a154 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810a13c:	4ba1      	ldr	r3, [pc, #644]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a13e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a140:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810a14c:	4a9d      	ldr	r2, [pc, #628]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a14e:	430b      	orrs	r3, r1
 810a150:	6593      	str	r3, [r2, #88]	@ 0x58
 810a152:	e003      	b.n	810a15c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810a15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a164:	f002 0308 	and.w	r3, r2, #8
 810a168:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810a16c:	2300      	movs	r3, #0
 810a16e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810a172:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810a176:	460b      	mov	r3, r1
 810a178:	4313      	orrs	r3, r2
 810a17a:	d01e      	beq.n	810a1ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810a17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a188:	d10c      	bne.n	810a1a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810a18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a18e:	3328      	adds	r3, #40	@ 0x28
 810a190:	2102      	movs	r1, #2
 810a192:	4618      	mov	r0, r3
 810a194:	f000 fb96 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a198:	4603      	mov	r3, r0
 810a19a:	2b00      	cmp	r3, #0
 810a19c:	d002      	beq.n	810a1a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810a19e:	2301      	movs	r3, #1
 810a1a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810a1a4:	4b87      	ldr	r3, [pc, #540]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a1a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a1b4:	4a83      	ldr	r2, [pc, #524]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a1b6:	430b      	orrs	r3, r1
 810a1b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a1c2:	f002 0310 	and.w	r3, r2, #16
 810a1c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810a1ca:	2300      	movs	r3, #0
 810a1cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810a1d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810a1d4:	460b      	mov	r3, r1
 810a1d6:	4313      	orrs	r3, r2
 810a1d8:	d01e      	beq.n	810a218 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810a1e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a1e6:	d10c      	bne.n	810a202 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810a1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a1ec:	3328      	adds	r3, #40	@ 0x28
 810a1ee:	2102      	movs	r1, #2
 810a1f0:	4618      	mov	r0, r3
 810a1f2:	f000 fb67 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a1f6:	4603      	mov	r3, r0
 810a1f8:	2b00      	cmp	r3, #0
 810a1fa:	d002      	beq.n	810a202 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810a1fc:	2301      	movs	r3, #1
 810a1fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810a202:	4b70      	ldr	r3, [pc, #448]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a206:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a20e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810a212:	4a6c      	ldr	r2, [pc, #432]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a214:	430b      	orrs	r3, r1
 810a216:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810a218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a220:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810a224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810a228:	2300      	movs	r3, #0
 810a22a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810a22e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810a232:	460b      	mov	r3, r1
 810a234:	4313      	orrs	r3, r2
 810a236:	d03e      	beq.n	810a2b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810a238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a23c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810a240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a244:	d022      	beq.n	810a28c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810a246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a24a:	d81b      	bhi.n	810a284 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810a24c:	2b00      	cmp	r3, #0
 810a24e:	d003      	beq.n	810a258 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810a250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a254:	d00b      	beq.n	810a26e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810a256:	e015      	b.n	810a284 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a25c:	3308      	adds	r3, #8
 810a25e:	2100      	movs	r1, #0
 810a260:	4618      	mov	r0, r3
 810a262:	f000 fa7d 	bl	810a760 <RCCEx_PLL2_Config>
 810a266:	4603      	mov	r3, r0
 810a268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810a26c:	e00f      	b.n	810a28e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a272:	3328      	adds	r3, #40	@ 0x28
 810a274:	2102      	movs	r1, #2
 810a276:	4618      	mov	r0, r3
 810a278:	f000 fb24 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a27c:	4603      	mov	r3, r0
 810a27e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810a282:	e004      	b.n	810a28e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a284:	2301      	movs	r3, #1
 810a286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a28a:	e000      	b.n	810a28e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810a28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a292:	2b00      	cmp	r3, #0
 810a294:	d10b      	bne.n	810a2ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810a296:	4b4b      	ldr	r3, [pc, #300]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a29a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810a2a6:	4a47      	ldr	r2, [pc, #284]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a2a8:	430b      	orrs	r3, r1
 810a2aa:	6593      	str	r3, [r2, #88]	@ 0x58
 810a2ac:	e003      	b.n	810a2b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a2b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810a2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810a2c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 810a2c4:	2300      	movs	r3, #0
 810a2c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810a2c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810a2cc:	460b      	mov	r3, r1
 810a2ce:	4313      	orrs	r3, r2
 810a2d0:	d03b      	beq.n	810a34a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810a2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a2da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2de:	d01f      	beq.n	810a320 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810a2e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2e4:	d818      	bhi.n	810a318 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810a2e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a2ea:	d003      	beq.n	810a2f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810a2ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a2f0:	d007      	beq.n	810a302 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810a2f2:	e011      	b.n	810a318 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2f4:	4b33      	ldr	r3, [pc, #204]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2f8:	4a32      	ldr	r2, [pc, #200]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a2fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810a300:	e00f      	b.n	810a322 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a306:	3328      	adds	r3, #40	@ 0x28
 810a308:	2101      	movs	r1, #1
 810a30a:	4618      	mov	r0, r3
 810a30c:	f000 fada 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a310:	4603      	mov	r3, r0
 810a312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810a316:	e004      	b.n	810a322 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a318:	2301      	movs	r3, #1
 810a31a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a31e:	e000      	b.n	810a322 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 810a320:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a326:	2b00      	cmp	r3, #0
 810a328:	d10b      	bne.n	810a342 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810a32a:	4b26      	ldr	r3, [pc, #152]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a32e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a33a:	4a22      	ldr	r2, [pc, #136]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a33c:	430b      	orrs	r3, r1
 810a33e:	6553      	str	r3, [r2, #84]	@ 0x54
 810a340:	e003      	b.n	810a34a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a352:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810a356:	673b      	str	r3, [r7, #112]	@ 0x70
 810a358:	2300      	movs	r3, #0
 810a35a:	677b      	str	r3, [r7, #116]	@ 0x74
 810a35c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810a360:	460b      	mov	r3, r1
 810a362:	4313      	orrs	r3, r2
 810a364:	d034      	beq.n	810a3d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810a366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a36a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a36c:	2b00      	cmp	r3, #0
 810a36e:	d003      	beq.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 810a370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a374:	d007      	beq.n	810a386 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810a376:	e011      	b.n	810a39c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a378:	4b12      	ldr	r3, [pc, #72]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a37c:	4a11      	ldr	r2, [pc, #68]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a37e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810a384:	e00e      	b.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a38a:	3308      	adds	r3, #8
 810a38c:	2102      	movs	r1, #2
 810a38e:	4618      	mov	r0, r3
 810a390:	f000 f9e6 	bl	810a760 <RCCEx_PLL2_Config>
 810a394:	4603      	mov	r3, r0
 810a396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810a39a:	e003      	b.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810a39c:	2301      	movs	r3, #1
 810a39e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a3a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a3a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3a8:	2b00      	cmp	r3, #0
 810a3aa:	d10d      	bne.n	810a3c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810a3ac:	4b05      	ldr	r3, [pc, #20]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a3ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a3b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a3ba:	4a02      	ldr	r2, [pc, #8]	@ (810a3c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810a3bc:	430b      	orrs	r3, r1
 810a3be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a3c0:	e006      	b.n	810a3d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810a3c2:	bf00      	nop
 810a3c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a3c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810a3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810a3dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 810a3de:	2300      	movs	r3, #0
 810a3e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810a3e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810a3e6:	460b      	mov	r3, r1
 810a3e8:	4313      	orrs	r3, r2
 810a3ea:	d00c      	beq.n	810a406 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810a3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3f0:	3328      	adds	r3, #40	@ 0x28
 810a3f2:	2102      	movs	r1, #2
 810a3f4:	4618      	mov	r0, r3
 810a3f6:	f000 fa65 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a3fa:	4603      	mov	r3, r0
 810a3fc:	2b00      	cmp	r3, #0
 810a3fe:	d002      	beq.n	810a406 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 810a400:	2301      	movs	r3, #1
 810a402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a40e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810a412:	663b      	str	r3, [r7, #96]	@ 0x60
 810a414:	2300      	movs	r3, #0
 810a416:	667b      	str	r3, [r7, #100]	@ 0x64
 810a418:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810a41c:	460b      	mov	r3, r1
 810a41e:	4313      	orrs	r3, r2
 810a420:	d038      	beq.n	810a494 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810a422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810a42a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a42e:	d018      	beq.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 810a430:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a434:	d811      	bhi.n	810a45a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810a436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a43a:	d014      	beq.n	810a466 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810a43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a440:	d80b      	bhi.n	810a45a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810a442:	2b00      	cmp	r3, #0
 810a444:	d011      	beq.n	810a46a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810a446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a44a:	d106      	bne.n	810a45a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a44c:	4bc3      	ldr	r3, [pc, #780]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a450:	4ac2      	ldr	r2, [pc, #776]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810a458:	e008      	b.n	810a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a45a:	2301      	movs	r3, #1
 810a45c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a460:	e004      	b.n	810a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810a462:	bf00      	nop
 810a464:	e002      	b.n	810a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810a466:	bf00      	nop
 810a468:	e000      	b.n	810a46c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810a46a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a46c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a470:	2b00      	cmp	r3, #0
 810a472:	d10b      	bne.n	810a48c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810a474:	4bb9      	ldr	r3, [pc, #740]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a478:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810a47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810a484:	4ab5      	ldr	r2, [pc, #724]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a486:	430b      	orrs	r3, r1
 810a488:	6553      	str	r3, [r2, #84]	@ 0x54
 810a48a:	e003      	b.n	810a494 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a48c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810a494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a49c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810a4a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 810a4a2:	2300      	movs	r3, #0
 810a4a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810a4a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810a4aa:	460b      	mov	r3, r1
 810a4ac:	4313      	orrs	r3, r2
 810a4ae:	d009      	beq.n	810a4c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810a4b0:	4baa      	ldr	r3, [pc, #680]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a4b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810a4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810a4be:	4aa7      	ldr	r2, [pc, #668]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4c0:	430b      	orrs	r3, r1
 810a4c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810a4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810a4d0:	653b      	str	r3, [r7, #80]	@ 0x50
 810a4d2:	2300      	movs	r3, #0
 810a4d4:	657b      	str	r3, [r7, #84]	@ 0x54
 810a4d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810a4da:	460b      	mov	r3, r1
 810a4dc:	4313      	orrs	r3, r2
 810a4de:	d00a      	beq.n	810a4f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810a4e0:	4b9e      	ldr	r3, [pc, #632]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4e2:	691b      	ldr	r3, [r3, #16]
 810a4e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810a4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810a4f0:	4a9a      	ldr	r2, [pc, #616]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a4f2:	430b      	orrs	r3, r1
 810a4f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810a4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810a502:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a504:	2300      	movs	r3, #0
 810a506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a508:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810a50c:	460b      	mov	r3, r1
 810a50e:	4313      	orrs	r3, r2
 810a510:	d009      	beq.n	810a526 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810a512:	4b92      	ldr	r3, [pc, #584]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a516:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a51e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a520:	4a8e      	ldr	r2, [pc, #568]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a522:	430b      	orrs	r3, r1
 810a524:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a52e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810a532:	643b      	str	r3, [r7, #64]	@ 0x40
 810a534:	2300      	movs	r3, #0
 810a536:	647b      	str	r3, [r7, #68]	@ 0x44
 810a538:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810a53c:	460b      	mov	r3, r1
 810a53e:	4313      	orrs	r3, r2
 810a540:	d00e      	beq.n	810a560 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810a542:	4b86      	ldr	r3, [pc, #536]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a544:	691b      	ldr	r3, [r3, #16]
 810a546:	4a85      	ldr	r2, [pc, #532]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a548:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810a54c:	6113      	str	r3, [r2, #16]
 810a54e:	4b83      	ldr	r3, [pc, #524]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a550:	6919      	ldr	r1, [r3, #16]
 810a552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a556:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810a55a:	4a80      	ldr	r2, [pc, #512]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a55c:	430b      	orrs	r3, r1
 810a55e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a568:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810a56c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810a56e:	2300      	movs	r3, #0
 810a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a572:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810a576:	460b      	mov	r3, r1
 810a578:	4313      	orrs	r3, r2
 810a57a:	d009      	beq.n	810a590 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810a57c:	4b77      	ldr	r3, [pc, #476]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a57e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a580:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a58a:	4a74      	ldr	r2, [pc, #464]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a58c:	430b      	orrs	r3, r1
 810a58e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a598:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810a59c:	633b      	str	r3, [r7, #48]	@ 0x30
 810a59e:	2300      	movs	r3, #0
 810a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 810a5a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810a5a6:	460b      	mov	r3, r1
 810a5a8:	4313      	orrs	r3, r2
 810a5aa:	d00a      	beq.n	810a5c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810a5ac:	4b6b      	ldr	r3, [pc, #428]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a5ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a5b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810a5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a5bc:	4a67      	ldr	r2, [pc, #412]	@ (810a75c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810a5be:	430b      	orrs	r3, r1
 810a5c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810a5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a5ca:	2100      	movs	r1, #0
 810a5cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 810a5ce:	f003 0301 	and.w	r3, r3, #1
 810a5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810a5d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810a5d8:	460b      	mov	r3, r1
 810a5da:	4313      	orrs	r3, r2
 810a5dc:	d011      	beq.n	810a602 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5e2:	3308      	adds	r3, #8
 810a5e4:	2100      	movs	r1, #0
 810a5e6:	4618      	mov	r0, r3
 810a5e8:	f000 f8ba 	bl	810a760 <RCCEx_PLL2_Config>
 810a5ec:	4603      	mov	r3, r0
 810a5ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a5f6:	2b00      	cmp	r3, #0
 810a5f8:	d003      	beq.n	810a602 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a5fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810a602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a60a:	2100      	movs	r1, #0
 810a60c:	6239      	str	r1, [r7, #32]
 810a60e:	f003 0302 	and.w	r3, r3, #2
 810a612:	627b      	str	r3, [r7, #36]	@ 0x24
 810a614:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810a618:	460b      	mov	r3, r1
 810a61a:	4313      	orrs	r3, r2
 810a61c:	d011      	beq.n	810a642 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a622:	3308      	adds	r3, #8
 810a624:	2101      	movs	r1, #1
 810a626:	4618      	mov	r0, r3
 810a628:	f000 f89a 	bl	810a760 <RCCEx_PLL2_Config>
 810a62c:	4603      	mov	r3, r0
 810a62e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a636:	2b00      	cmp	r3, #0
 810a638:	d003      	beq.n	810a642 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a63e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a64a:	2100      	movs	r1, #0
 810a64c:	61b9      	str	r1, [r7, #24]
 810a64e:	f003 0304 	and.w	r3, r3, #4
 810a652:	61fb      	str	r3, [r7, #28]
 810a654:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810a658:	460b      	mov	r3, r1
 810a65a:	4313      	orrs	r3, r2
 810a65c:	d011      	beq.n	810a682 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a662:	3308      	adds	r3, #8
 810a664:	2102      	movs	r1, #2
 810a666:	4618      	mov	r0, r3
 810a668:	f000 f87a 	bl	810a760 <RCCEx_PLL2_Config>
 810a66c:	4603      	mov	r3, r0
 810a66e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a676:	2b00      	cmp	r3, #0
 810a678:	d003      	beq.n	810a682 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a67a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a67e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810a682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a68a:	2100      	movs	r1, #0
 810a68c:	6139      	str	r1, [r7, #16]
 810a68e:	f003 0308 	and.w	r3, r3, #8
 810a692:	617b      	str	r3, [r7, #20]
 810a694:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810a698:	460b      	mov	r3, r1
 810a69a:	4313      	orrs	r3, r2
 810a69c:	d011      	beq.n	810a6c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6a2:	3328      	adds	r3, #40	@ 0x28
 810a6a4:	2100      	movs	r1, #0
 810a6a6:	4618      	mov	r0, r3
 810a6a8:	f000 f90c 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a6ac:	4603      	mov	r3, r0
 810a6ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810a6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6b6:	2b00      	cmp	r3, #0
 810a6b8:	d003      	beq.n	810a6c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810a6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a6ca:	2100      	movs	r1, #0
 810a6cc:	60b9      	str	r1, [r7, #8]
 810a6ce:	f003 0310 	and.w	r3, r3, #16
 810a6d2:	60fb      	str	r3, [r7, #12]
 810a6d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810a6d8:	460b      	mov	r3, r1
 810a6da:	4313      	orrs	r3, r2
 810a6dc:	d011      	beq.n	810a702 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6e2:	3328      	adds	r3, #40	@ 0x28
 810a6e4:	2101      	movs	r1, #1
 810a6e6:	4618      	mov	r0, r3
 810a6e8:	f000 f8ec 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a6ec:	4603      	mov	r3, r0
 810a6ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6f6:	2b00      	cmp	r3, #0
 810a6f8:	d003      	beq.n	810a702 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810a702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a70a:	2100      	movs	r1, #0
 810a70c:	6039      	str	r1, [r7, #0]
 810a70e:	f003 0320 	and.w	r3, r3, #32
 810a712:	607b      	str	r3, [r7, #4]
 810a714:	e9d7 1200 	ldrd	r1, r2, [r7]
 810a718:	460b      	mov	r3, r1
 810a71a:	4313      	orrs	r3, r2
 810a71c:	d011      	beq.n	810a742 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a722:	3328      	adds	r3, #40	@ 0x28
 810a724:	2102      	movs	r1, #2
 810a726:	4618      	mov	r0, r3
 810a728:	f000 f8cc 	bl	810a8c4 <RCCEx_PLL3_Config>
 810a72c:	4603      	mov	r3, r0
 810a72e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810a732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a736:	2b00      	cmp	r3, #0
 810a738:	d003      	beq.n	810a742 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a73e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810a742:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810a746:	2b00      	cmp	r3, #0
 810a748:	d101      	bne.n	810a74e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810a74a:	2300      	movs	r3, #0
 810a74c:	e000      	b.n	810a750 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810a74e:	2301      	movs	r3, #1
}
 810a750:	4618      	mov	r0, r3
 810a752:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810a756:	46bd      	mov	sp, r7
 810a758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a75c:	58024400 	.word	0x58024400

0810a760 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a760:	b580      	push	{r7, lr}
 810a762:	b084      	sub	sp, #16
 810a764:	af00      	add	r7, sp, #0
 810a766:	6078      	str	r0, [r7, #4]
 810a768:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a76a:	2300      	movs	r3, #0
 810a76c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a76e:	4b54      	ldr	r3, [pc, #336]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a772:	f003 0303 	and.w	r3, r3, #3
 810a776:	2b03      	cmp	r3, #3
 810a778:	d101      	bne.n	810a77e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a77a:	2301      	movs	r3, #1
 810a77c:	e09b      	b.n	810a8b6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a77e:	4b50      	ldr	r3, [pc, #320]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a780:	681b      	ldr	r3, [r3, #0]
 810a782:	4a4f      	ldr	r2, [pc, #316]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a784:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a78a:	f7f9 f80d 	bl	81037a8 <HAL_GetTick>
 810a78e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a790:	e008      	b.n	810a7a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810a792:	f7f9 f809 	bl	81037a8 <HAL_GetTick>
 810a796:	4602      	mov	r2, r0
 810a798:	68bb      	ldr	r3, [r7, #8]
 810a79a:	1ad3      	subs	r3, r2, r3
 810a79c:	2b02      	cmp	r3, #2
 810a79e:	d901      	bls.n	810a7a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a7a0:	2303      	movs	r3, #3
 810a7a2:	e088      	b.n	810a8b6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a7a4:	4b46      	ldr	r3, [pc, #280]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a7a6:	681b      	ldr	r3, [r3, #0]
 810a7a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d1f0      	bne.n	810a792 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a7b0:	4b43      	ldr	r3, [pc, #268]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a7b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810a7b8:	687b      	ldr	r3, [r7, #4]
 810a7ba:	681b      	ldr	r3, [r3, #0]
 810a7bc:	031b      	lsls	r3, r3, #12
 810a7be:	4940      	ldr	r1, [pc, #256]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a7c0:	4313      	orrs	r3, r2
 810a7c2:	628b      	str	r3, [r1, #40]	@ 0x28
 810a7c4:	687b      	ldr	r3, [r7, #4]
 810a7c6:	685b      	ldr	r3, [r3, #4]
 810a7c8:	3b01      	subs	r3, #1
 810a7ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a7ce:	687b      	ldr	r3, [r7, #4]
 810a7d0:	689b      	ldr	r3, [r3, #8]
 810a7d2:	3b01      	subs	r3, #1
 810a7d4:	025b      	lsls	r3, r3, #9
 810a7d6:	b29b      	uxth	r3, r3
 810a7d8:	431a      	orrs	r2, r3
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	68db      	ldr	r3, [r3, #12]
 810a7de:	3b01      	subs	r3, #1
 810a7e0:	041b      	lsls	r3, r3, #16
 810a7e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810a7e6:	431a      	orrs	r2, r3
 810a7e8:	687b      	ldr	r3, [r7, #4]
 810a7ea:	691b      	ldr	r3, [r3, #16]
 810a7ec:	3b01      	subs	r3, #1
 810a7ee:	061b      	lsls	r3, r3, #24
 810a7f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810a7f4:	4932      	ldr	r1, [pc, #200]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a7f6:	4313      	orrs	r3, r2
 810a7f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a7fa:	4b31      	ldr	r3, [pc, #196]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a7fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810a802:	687b      	ldr	r3, [r7, #4]
 810a804:	695b      	ldr	r3, [r3, #20]
 810a806:	492e      	ldr	r1, [pc, #184]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a808:	4313      	orrs	r3, r2
 810a80a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a80c:	4b2c      	ldr	r3, [pc, #176]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a810:	f023 0220 	bic.w	r2, r3, #32
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	699b      	ldr	r3, [r3, #24]
 810a818:	4929      	ldr	r1, [pc, #164]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a81a:	4313      	orrs	r3, r2
 810a81c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a81e:	4b28      	ldr	r3, [pc, #160]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a822:	4a27      	ldr	r2, [pc, #156]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a824:	f023 0310 	bic.w	r3, r3, #16
 810a828:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a82a:	4b25      	ldr	r3, [pc, #148]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a82e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a832:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810a836:	687a      	ldr	r2, [r7, #4]
 810a838:	69d2      	ldr	r2, [r2, #28]
 810a83a:	00d2      	lsls	r2, r2, #3
 810a83c:	4920      	ldr	r1, [pc, #128]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a83e:	4313      	orrs	r3, r2
 810a840:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a842:	4b1f      	ldr	r3, [pc, #124]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a846:	4a1e      	ldr	r2, [pc, #120]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a848:	f043 0310 	orr.w	r3, r3, #16
 810a84c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810a84e:	683b      	ldr	r3, [r7, #0]
 810a850:	2b00      	cmp	r3, #0
 810a852:	d106      	bne.n	810a862 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a854:	4b1a      	ldr	r3, [pc, #104]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a858:	4a19      	ldr	r2, [pc, #100]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a85a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810a85e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a860:	e00f      	b.n	810a882 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810a862:	683b      	ldr	r3, [r7, #0]
 810a864:	2b01      	cmp	r3, #1
 810a866:	d106      	bne.n	810a876 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a868:	4b15      	ldr	r3, [pc, #84]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a86c:	4a14      	ldr	r2, [pc, #80]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a86e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810a872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a874:	e005      	b.n	810a882 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a876:	4b12      	ldr	r3, [pc, #72]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a87a:	4a11      	ldr	r2, [pc, #68]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a87c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810a880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a882:	4b0f      	ldr	r3, [pc, #60]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a884:	681b      	ldr	r3, [r3, #0]
 810a886:	4a0e      	ldr	r2, [pc, #56]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a888:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810a88c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a88e:	f7f8 ff8b 	bl	81037a8 <HAL_GetTick>
 810a892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a894:	e008      	b.n	810a8a8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810a896:	f7f8 ff87 	bl	81037a8 <HAL_GetTick>
 810a89a:	4602      	mov	r2, r0
 810a89c:	68bb      	ldr	r3, [r7, #8]
 810a89e:	1ad3      	subs	r3, r2, r3
 810a8a0:	2b02      	cmp	r3, #2
 810a8a2:	d901      	bls.n	810a8a8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a8a4:	2303      	movs	r3, #3
 810a8a6:	e006      	b.n	810a8b6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a8a8:	4b05      	ldr	r3, [pc, #20]	@ (810a8c0 <RCCEx_PLL2_Config+0x160>)
 810a8aa:	681b      	ldr	r3, [r3, #0]
 810a8ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a8b0:	2b00      	cmp	r3, #0
 810a8b2:	d0f0      	beq.n	810a896 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 810a8b6:	4618      	mov	r0, r3
 810a8b8:	3710      	adds	r7, #16
 810a8ba:	46bd      	mov	sp, r7
 810a8bc:	bd80      	pop	{r7, pc}
 810a8be:	bf00      	nop
 810a8c0:	58024400 	.word	0x58024400

0810a8c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a8c4:	b580      	push	{r7, lr}
 810a8c6:	b084      	sub	sp, #16
 810a8c8:	af00      	add	r7, sp, #0
 810a8ca:	6078      	str	r0, [r7, #4]
 810a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a8ce:	2300      	movs	r3, #0
 810a8d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a8d2:	4b54      	ldr	r3, [pc, #336]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a8d6:	f003 0303 	and.w	r3, r3, #3
 810a8da:	2b03      	cmp	r3, #3
 810a8dc:	d101      	bne.n	810a8e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a8de:	2301      	movs	r3, #1
 810a8e0:	e09b      	b.n	810aa1a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a8e2:	4b50      	ldr	r3, [pc, #320]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a8e4:	681b      	ldr	r3, [r3, #0]
 810a8e6:	4a4f      	ldr	r2, [pc, #316]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a8e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a8ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a8ee:	f7f8 ff5b 	bl	81037a8 <HAL_GetTick>
 810a8f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a8f4:	e008      	b.n	810a908 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810a8f6:	f7f8 ff57 	bl	81037a8 <HAL_GetTick>
 810a8fa:	4602      	mov	r2, r0
 810a8fc:	68bb      	ldr	r3, [r7, #8]
 810a8fe:	1ad3      	subs	r3, r2, r3
 810a900:	2b02      	cmp	r3, #2
 810a902:	d901      	bls.n	810a908 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a904:	2303      	movs	r3, #3
 810a906:	e088      	b.n	810aa1a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a908:	4b46      	ldr	r3, [pc, #280]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a90a:	681b      	ldr	r3, [r3, #0]
 810a90c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a910:	2b00      	cmp	r3, #0
 810a912:	d1f0      	bne.n	810a8f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a914:	4b43      	ldr	r3, [pc, #268]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a918:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810a91c:	687b      	ldr	r3, [r7, #4]
 810a91e:	681b      	ldr	r3, [r3, #0]
 810a920:	051b      	lsls	r3, r3, #20
 810a922:	4940      	ldr	r1, [pc, #256]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a924:	4313      	orrs	r3, r2
 810a926:	628b      	str	r3, [r1, #40]	@ 0x28
 810a928:	687b      	ldr	r3, [r7, #4]
 810a92a:	685b      	ldr	r3, [r3, #4]
 810a92c:	3b01      	subs	r3, #1
 810a92e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a932:	687b      	ldr	r3, [r7, #4]
 810a934:	689b      	ldr	r3, [r3, #8]
 810a936:	3b01      	subs	r3, #1
 810a938:	025b      	lsls	r3, r3, #9
 810a93a:	b29b      	uxth	r3, r3
 810a93c:	431a      	orrs	r2, r3
 810a93e:	687b      	ldr	r3, [r7, #4]
 810a940:	68db      	ldr	r3, [r3, #12]
 810a942:	3b01      	subs	r3, #1
 810a944:	041b      	lsls	r3, r3, #16
 810a946:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810a94a:	431a      	orrs	r2, r3
 810a94c:	687b      	ldr	r3, [r7, #4]
 810a94e:	691b      	ldr	r3, [r3, #16]
 810a950:	3b01      	subs	r3, #1
 810a952:	061b      	lsls	r3, r3, #24
 810a954:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810a958:	4932      	ldr	r1, [pc, #200]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a95a:	4313      	orrs	r3, r2
 810a95c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a95e:	4b31      	ldr	r3, [pc, #196]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a962:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	695b      	ldr	r3, [r3, #20]
 810a96a:	492e      	ldr	r1, [pc, #184]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a96c:	4313      	orrs	r3, r2
 810a96e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a970:	4b2c      	ldr	r3, [pc, #176]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a974:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	699b      	ldr	r3, [r3, #24]
 810a97c:	4929      	ldr	r1, [pc, #164]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a97e:	4313      	orrs	r3, r2
 810a980:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a982:	4b28      	ldr	r3, [pc, #160]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a986:	4a27      	ldr	r2, [pc, #156]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a98c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a98e:	4b25      	ldr	r3, [pc, #148]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a996:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810a99a:	687a      	ldr	r2, [r7, #4]
 810a99c:	69d2      	ldr	r2, [r2, #28]
 810a99e:	00d2      	lsls	r2, r2, #3
 810a9a0:	4920      	ldr	r1, [pc, #128]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9a2:	4313      	orrs	r3, r2
 810a9a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a9a6:	4b1f      	ldr	r3, [pc, #124]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a9aa:	4a1e      	ldr	r2, [pc, #120]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a9b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810a9b2:	683b      	ldr	r3, [r7, #0]
 810a9b4:	2b00      	cmp	r3, #0
 810a9b6:	d106      	bne.n	810a9c6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a9b8:	4b1a      	ldr	r3, [pc, #104]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a9bc:	4a19      	ldr	r2, [pc, #100]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810a9c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a9c4:	e00f      	b.n	810a9e6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810a9c6:	683b      	ldr	r3, [r7, #0]
 810a9c8:	2b01      	cmp	r3, #1
 810a9ca:	d106      	bne.n	810a9da <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a9cc:	4b15      	ldr	r3, [pc, #84]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a9d0:	4a14      	ldr	r2, [pc, #80]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810a9d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a9d8:	e005      	b.n	810a9e6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a9da:	4b12      	ldr	r3, [pc, #72]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a9de:	4a11      	ldr	r2, [pc, #68]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810a9e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a9e6:	4b0f      	ldr	r3, [pc, #60]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9e8:	681b      	ldr	r3, [r3, #0]
 810a9ea:	4a0e      	ldr	r2, [pc, #56]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810a9ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810a9f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a9f2:	f7f8 fed9 	bl	81037a8 <HAL_GetTick>
 810a9f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a9f8:	e008      	b.n	810aa0c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810a9fa:	f7f8 fed5 	bl	81037a8 <HAL_GetTick>
 810a9fe:	4602      	mov	r2, r0
 810aa00:	68bb      	ldr	r3, [r7, #8]
 810aa02:	1ad3      	subs	r3, r2, r3
 810aa04:	2b02      	cmp	r3, #2
 810aa06:	d901      	bls.n	810aa0c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810aa08:	2303      	movs	r3, #3
 810aa0a:	e006      	b.n	810aa1a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810aa0c:	4b05      	ldr	r3, [pc, #20]	@ (810aa24 <RCCEx_PLL3_Config+0x160>)
 810aa0e:	681b      	ldr	r3, [r3, #0]
 810aa10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810aa14:	2b00      	cmp	r3, #0
 810aa16:	d0f0      	beq.n	810a9fa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 810aa1a:	4618      	mov	r0, r3
 810aa1c:	3710      	adds	r7, #16
 810aa1e:	46bd      	mov	sp, r7
 810aa20:	bd80      	pop	{r7, pc}
 810aa22:	bf00      	nop
 810aa24:	58024400 	.word	0x58024400

0810aa28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810aa28:	b580      	push	{r7, lr}
 810aa2a:	b084      	sub	sp, #16
 810aa2c:	af00      	add	r7, sp, #0
 810aa2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	2b00      	cmp	r3, #0
 810aa34:	d101      	bne.n	810aa3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810aa36:	2301      	movs	r3, #1
 810aa38:	e10f      	b.n	810ac5a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810aa3a:	687b      	ldr	r3, [r7, #4]
 810aa3c:	2200      	movs	r2, #0
 810aa3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	681b      	ldr	r3, [r3, #0]
 810aa44:	4a87      	ldr	r2, [pc, #540]	@ (810ac64 <HAL_SPI_Init+0x23c>)
 810aa46:	4293      	cmp	r3, r2
 810aa48:	d00f      	beq.n	810aa6a <HAL_SPI_Init+0x42>
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	681b      	ldr	r3, [r3, #0]
 810aa4e:	4a86      	ldr	r2, [pc, #536]	@ (810ac68 <HAL_SPI_Init+0x240>)
 810aa50:	4293      	cmp	r3, r2
 810aa52:	d00a      	beq.n	810aa6a <HAL_SPI_Init+0x42>
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	681b      	ldr	r3, [r3, #0]
 810aa58:	4a84      	ldr	r2, [pc, #528]	@ (810ac6c <HAL_SPI_Init+0x244>)
 810aa5a:	4293      	cmp	r3, r2
 810aa5c:	d005      	beq.n	810aa6a <HAL_SPI_Init+0x42>
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	68db      	ldr	r3, [r3, #12]
 810aa62:	2b0f      	cmp	r3, #15
 810aa64:	d901      	bls.n	810aa6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810aa66:	2301      	movs	r3, #1
 810aa68:	e0f7      	b.n	810ac5a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810aa6a:	6878      	ldr	r0, [r7, #4]
 810aa6c:	f000 fd06 	bl	810b47c <SPI_GetPacketSize>
 810aa70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810aa72:	687b      	ldr	r3, [r7, #4]
 810aa74:	681b      	ldr	r3, [r3, #0]
 810aa76:	4a7b      	ldr	r2, [pc, #492]	@ (810ac64 <HAL_SPI_Init+0x23c>)
 810aa78:	4293      	cmp	r3, r2
 810aa7a:	d00c      	beq.n	810aa96 <HAL_SPI_Init+0x6e>
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	681b      	ldr	r3, [r3, #0]
 810aa80:	4a79      	ldr	r2, [pc, #484]	@ (810ac68 <HAL_SPI_Init+0x240>)
 810aa82:	4293      	cmp	r3, r2
 810aa84:	d007      	beq.n	810aa96 <HAL_SPI_Init+0x6e>
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	681b      	ldr	r3, [r3, #0]
 810aa8a:	4a78      	ldr	r2, [pc, #480]	@ (810ac6c <HAL_SPI_Init+0x244>)
 810aa8c:	4293      	cmp	r3, r2
 810aa8e:	d002      	beq.n	810aa96 <HAL_SPI_Init+0x6e>
 810aa90:	68fb      	ldr	r3, [r7, #12]
 810aa92:	2b08      	cmp	r3, #8
 810aa94:	d811      	bhi.n	810aaba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810aa96:	687b      	ldr	r3, [r7, #4]
 810aa98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810aa9a:	4a72      	ldr	r2, [pc, #456]	@ (810ac64 <HAL_SPI_Init+0x23c>)
 810aa9c:	4293      	cmp	r3, r2
 810aa9e:	d009      	beq.n	810aab4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810aaa0:	687b      	ldr	r3, [r7, #4]
 810aaa2:	681b      	ldr	r3, [r3, #0]
 810aaa4:	4a70      	ldr	r2, [pc, #448]	@ (810ac68 <HAL_SPI_Init+0x240>)
 810aaa6:	4293      	cmp	r3, r2
 810aaa8:	d004      	beq.n	810aab4 <HAL_SPI_Init+0x8c>
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	681b      	ldr	r3, [r3, #0]
 810aaae:	4a6f      	ldr	r2, [pc, #444]	@ (810ac6c <HAL_SPI_Init+0x244>)
 810aab0:	4293      	cmp	r3, r2
 810aab2:	d104      	bne.n	810aabe <HAL_SPI_Init+0x96>
 810aab4:	68fb      	ldr	r3, [r7, #12]
 810aab6:	2b10      	cmp	r3, #16
 810aab8:	d901      	bls.n	810aabe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810aaba:	2301      	movs	r3, #1
 810aabc:	e0cd      	b.n	810ac5a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810aac4:	b2db      	uxtb	r3, r3
 810aac6:	2b00      	cmp	r3, #0
 810aac8:	d106      	bne.n	810aad8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810aaca:	687b      	ldr	r3, [r7, #4]
 810aacc:	2200      	movs	r2, #0
 810aace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810aad2:	6878      	ldr	r0, [r7, #4]
 810aad4:	f7f8 fc0e 	bl	81032f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810aad8:	687b      	ldr	r3, [r7, #4]
 810aada:	2202      	movs	r2, #2
 810aadc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810aae0:	687b      	ldr	r3, [r7, #4]
 810aae2:	681b      	ldr	r3, [r3, #0]
 810aae4:	681a      	ldr	r2, [r3, #0]
 810aae6:	687b      	ldr	r3, [r7, #4]
 810aae8:	681b      	ldr	r3, [r3, #0]
 810aaea:	f022 0201 	bic.w	r2, r2, #1
 810aaee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	681b      	ldr	r3, [r3, #0]
 810aaf4:	689b      	ldr	r3, [r3, #8]
 810aaf6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810aafa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810aafc:	687b      	ldr	r3, [r7, #4]
 810aafe:	699b      	ldr	r3, [r3, #24]
 810ab00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810ab04:	d119      	bne.n	810ab3a <HAL_SPI_Init+0x112>
 810ab06:	687b      	ldr	r3, [r7, #4]
 810ab08:	685b      	ldr	r3, [r3, #4]
 810ab0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810ab0e:	d103      	bne.n	810ab18 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810ab14:	2b00      	cmp	r3, #0
 810ab16:	d008      	beq.n	810ab2a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810ab1c:	2b00      	cmp	r3, #0
 810ab1e:	d10c      	bne.n	810ab3a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810ab20:	687b      	ldr	r3, [r7, #4]
 810ab22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810ab24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ab28:	d107      	bne.n	810ab3a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810ab2a:	687b      	ldr	r3, [r7, #4]
 810ab2c:	681b      	ldr	r3, [r3, #0]
 810ab2e:	681a      	ldr	r2, [r3, #0]
 810ab30:	687b      	ldr	r3, [r7, #4]
 810ab32:	681b      	ldr	r3, [r3, #0]
 810ab34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 810ab38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	685b      	ldr	r3, [r3, #4]
 810ab3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810ab42:	2b00      	cmp	r3, #0
 810ab44:	d00f      	beq.n	810ab66 <HAL_SPI_Init+0x13e>
 810ab46:	687b      	ldr	r3, [r7, #4]
 810ab48:	68db      	ldr	r3, [r3, #12]
 810ab4a:	2b06      	cmp	r3, #6
 810ab4c:	d90b      	bls.n	810ab66 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	681b      	ldr	r3, [r3, #0]
 810ab52:	681b      	ldr	r3, [r3, #0]
 810ab54:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810ab58:	687b      	ldr	r3, [r7, #4]
 810ab5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ab5c:	687b      	ldr	r3, [r7, #4]
 810ab5e:	681b      	ldr	r3, [r3, #0]
 810ab60:	430a      	orrs	r2, r1
 810ab62:	601a      	str	r2, [r3, #0]
 810ab64:	e007      	b.n	810ab76 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810ab66:	687b      	ldr	r3, [r7, #4]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	681a      	ldr	r2, [r3, #0]
 810ab6c:	687b      	ldr	r3, [r7, #4]
 810ab6e:	681b      	ldr	r3, [r3, #0]
 810ab70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810ab74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	69da      	ldr	r2, [r3, #28]
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ab7e:	431a      	orrs	r2, r3
 810ab80:	68bb      	ldr	r3, [r7, #8]
 810ab82:	431a      	orrs	r2, r3
 810ab84:	687b      	ldr	r3, [r7, #4]
 810ab86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ab88:	ea42 0103 	orr.w	r1, r2, r3
 810ab8c:	687b      	ldr	r3, [r7, #4]
 810ab8e:	68da      	ldr	r2, [r3, #12]
 810ab90:	687b      	ldr	r3, [r7, #4]
 810ab92:	681b      	ldr	r3, [r3, #0]
 810ab94:	430a      	orrs	r2, r1
 810ab96:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810ab98:	687b      	ldr	r3, [r7, #4]
 810ab9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810ab9c:	687b      	ldr	r3, [r7, #4]
 810ab9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aba0:	431a      	orrs	r2, r3
 810aba2:	687b      	ldr	r3, [r7, #4]
 810aba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810aba6:	431a      	orrs	r2, r3
 810aba8:	687b      	ldr	r3, [r7, #4]
 810abaa:	699b      	ldr	r3, [r3, #24]
 810abac:	431a      	orrs	r2, r3
 810abae:	687b      	ldr	r3, [r7, #4]
 810abb0:	691b      	ldr	r3, [r3, #16]
 810abb2:	431a      	orrs	r2, r3
 810abb4:	687b      	ldr	r3, [r7, #4]
 810abb6:	695b      	ldr	r3, [r3, #20]
 810abb8:	431a      	orrs	r2, r3
 810abba:	687b      	ldr	r3, [r7, #4]
 810abbc:	6a1b      	ldr	r3, [r3, #32]
 810abbe:	431a      	orrs	r2, r3
 810abc0:	687b      	ldr	r3, [r7, #4]
 810abc2:	685b      	ldr	r3, [r3, #4]
 810abc4:	431a      	orrs	r2, r3
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810abca:	431a      	orrs	r2, r3
 810abcc:	687b      	ldr	r3, [r7, #4]
 810abce:	689b      	ldr	r3, [r3, #8]
 810abd0:	431a      	orrs	r2, r3
 810abd2:	687b      	ldr	r3, [r7, #4]
 810abd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810abd6:	ea42 0103 	orr.w	r1, r2, r3
 810abda:	687b      	ldr	r3, [r7, #4]
 810abdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810abde:	687b      	ldr	r3, [r7, #4]
 810abe0:	681b      	ldr	r3, [r3, #0]
 810abe2:	430a      	orrs	r2, r1
 810abe4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810abe6:	687b      	ldr	r3, [r7, #4]
 810abe8:	685b      	ldr	r3, [r3, #4]
 810abea:	2b00      	cmp	r3, #0
 810abec:	d113      	bne.n	810ac16 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810abee:	687b      	ldr	r3, [r7, #4]
 810abf0:	681b      	ldr	r3, [r3, #0]
 810abf2:	689b      	ldr	r3, [r3, #8]
 810abf4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 810abf8:	687b      	ldr	r3, [r7, #4]
 810abfa:	681b      	ldr	r3, [r3, #0]
 810abfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810ac00:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810ac02:	687b      	ldr	r3, [r7, #4]
 810ac04:	681b      	ldr	r3, [r3, #0]
 810ac06:	689b      	ldr	r3, [r3, #8]
 810ac08:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810ac0c:	687b      	ldr	r3, [r7, #4]
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 810ac14:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810ac16:	687b      	ldr	r3, [r7, #4]
 810ac18:	681b      	ldr	r3, [r3, #0]
 810ac1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ac1c:	687b      	ldr	r3, [r7, #4]
 810ac1e:	681b      	ldr	r3, [r3, #0]
 810ac20:	f022 0201 	bic.w	r2, r2, #1
 810ac24:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	685b      	ldr	r3, [r3, #4]
 810ac2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810ac2e:	2b00      	cmp	r3, #0
 810ac30:	d00a      	beq.n	810ac48 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810ac32:	687b      	ldr	r3, [r7, #4]
 810ac34:	681b      	ldr	r3, [r3, #0]
 810ac36:	68db      	ldr	r3, [r3, #12]
 810ac38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810ac3c:	687b      	ldr	r3, [r7, #4]
 810ac3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810ac40:	687b      	ldr	r3, [r7, #4]
 810ac42:	681b      	ldr	r3, [r3, #0]
 810ac44:	430a      	orrs	r2, r1
 810ac46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	2200      	movs	r2, #0
 810ac4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810ac50:	687b      	ldr	r3, [r7, #4]
 810ac52:	2201      	movs	r2, #1
 810ac54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 810ac58:	2300      	movs	r3, #0
}
 810ac5a:	4618      	mov	r0, r3
 810ac5c:	3710      	adds	r7, #16
 810ac5e:	46bd      	mov	sp, r7
 810ac60:	bd80      	pop	{r7, pc}
 810ac62:	bf00      	nop
 810ac64:	40013000 	.word	0x40013000
 810ac68:	40003800 	.word	0x40003800
 810ac6c:	40003c00 	.word	0x40003c00

0810ac70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 810ac70:	b580      	push	{r7, lr}
 810ac72:	b08e      	sub	sp, #56	@ 0x38
 810ac74:	af02      	add	r7, sp, #8
 810ac76:	60f8      	str	r0, [r7, #12]
 810ac78:	60b9      	str	r1, [r7, #8]
 810ac7a:	607a      	str	r2, [r7, #4]
 810ac7c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810ac7e:	68fb      	ldr	r3, [r7, #12]
 810ac80:	681b      	ldr	r3, [r3, #0]
 810ac82:	3320      	adds	r3, #32
 810ac84:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810ac86:	68fb      	ldr	r3, [r7, #12]
 810ac88:	681b      	ldr	r3, [r3, #0]
 810ac8a:	3330      	adds	r3, #48	@ 0x30
 810ac8c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 810ac8e:	68fb      	ldr	r3, [r7, #12]
 810ac90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ac92:	095b      	lsrs	r3, r3, #5
 810ac94:	b29b      	uxth	r3, r3
 810ac96:	3301      	adds	r3, #1
 810ac98:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810ac9a:	f7f8 fd85 	bl	81037a8 <HAL_GetTick>
 810ac9e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 810aca0:	887b      	ldrh	r3, [r7, #2]
 810aca2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 810aca4:	887b      	ldrh	r3, [r7, #2]
 810aca6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 810aca8:	68fb      	ldr	r3, [r7, #12]
 810acaa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810acae:	b2db      	uxtb	r3, r3
 810acb0:	2b01      	cmp	r3, #1
 810acb2:	d001      	beq.n	810acb8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 810acb4:	2302      	movs	r3, #2
 810acb6:	e30e      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810acb8:	68bb      	ldr	r3, [r7, #8]
 810acba:	2b00      	cmp	r3, #0
 810acbc:	d005      	beq.n	810acca <HAL_SPI_TransmitReceive+0x5a>
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	2b00      	cmp	r3, #0
 810acc2:	d002      	beq.n	810acca <HAL_SPI_TransmitReceive+0x5a>
 810acc4:	887b      	ldrh	r3, [r7, #2]
 810acc6:	2b00      	cmp	r3, #0
 810acc8:	d101      	bne.n	810acce <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 810acca:	2301      	movs	r3, #1
 810accc:	e303      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 810acce:	68fb      	ldr	r3, [r7, #12]
 810acd0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 810acd4:	2b01      	cmp	r3, #1
 810acd6:	d101      	bne.n	810acdc <HAL_SPI_TransmitReceive+0x6c>
 810acd8:	2302      	movs	r3, #2
 810acda:	e2fc      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
 810acdc:	68fb      	ldr	r3, [r7, #12]
 810acde:	2201      	movs	r2, #1
 810ace0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 810ace4:	68fb      	ldr	r3, [r7, #12]
 810ace6:	2205      	movs	r2, #5
 810ace8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810acec:	68fb      	ldr	r3, [r7, #12]
 810acee:	2200      	movs	r2, #0
 810acf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810acf4:	68fb      	ldr	r3, [r7, #12]
 810acf6:	687a      	ldr	r2, [r7, #4]
 810acf8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 810acfa:	68fb      	ldr	r3, [r7, #12]
 810acfc:	887a      	ldrh	r2, [r7, #2]
 810acfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 810ad02:	68fb      	ldr	r3, [r7, #12]
 810ad04:	887a      	ldrh	r2, [r7, #2]
 810ad06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 810ad0a:	68fb      	ldr	r3, [r7, #12]
 810ad0c:	68ba      	ldr	r2, [r7, #8]
 810ad0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 810ad10:	68fb      	ldr	r3, [r7, #12]
 810ad12:	887a      	ldrh	r2, [r7, #2]
 810ad14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 810ad18:	68fb      	ldr	r3, [r7, #12]
 810ad1a:	887a      	ldrh	r2, [r7, #2]
 810ad1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810ad20:	68fb      	ldr	r3, [r7, #12]
 810ad22:	2200      	movs	r2, #0
 810ad24:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 810ad26:	68fb      	ldr	r3, [r7, #12]
 810ad28:	2200      	movs	r2, #0
 810ad2a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 810ad2c:	68fb      	ldr	r3, [r7, #12]
 810ad2e:	681b      	ldr	r3, [r3, #0]
 810ad30:	68da      	ldr	r2, [r3, #12]
 810ad32:	68fb      	ldr	r3, [r7, #12]
 810ad34:	681b      	ldr	r3, [r3, #0]
 810ad36:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 810ad3a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 810ad3c:	68fb      	ldr	r3, [r7, #12]
 810ad3e:	681b      	ldr	r3, [r3, #0]
 810ad40:	4a70      	ldr	r2, [pc, #448]	@ (810af04 <HAL_SPI_TransmitReceive+0x294>)
 810ad42:	4293      	cmp	r3, r2
 810ad44:	d009      	beq.n	810ad5a <HAL_SPI_TransmitReceive+0xea>
 810ad46:	68fb      	ldr	r3, [r7, #12]
 810ad48:	681b      	ldr	r3, [r3, #0]
 810ad4a:	4a6f      	ldr	r2, [pc, #444]	@ (810af08 <HAL_SPI_TransmitReceive+0x298>)
 810ad4c:	4293      	cmp	r3, r2
 810ad4e:	d004      	beq.n	810ad5a <HAL_SPI_TransmitReceive+0xea>
 810ad50:	68fb      	ldr	r3, [r7, #12]
 810ad52:	681b      	ldr	r3, [r3, #0]
 810ad54:	4a6d      	ldr	r2, [pc, #436]	@ (810af0c <HAL_SPI_TransmitReceive+0x29c>)
 810ad56:	4293      	cmp	r3, r2
 810ad58:	d102      	bne.n	810ad60 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 810ad5a:	2310      	movs	r3, #16
 810ad5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ad5e:	e001      	b.n	810ad64 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 810ad60:	2308      	movs	r3, #8
 810ad62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810ad64:	68fb      	ldr	r3, [r7, #12]
 810ad66:	681b      	ldr	r3, [r3, #0]
 810ad68:	685b      	ldr	r3, [r3, #4]
 810ad6a:	0c1b      	lsrs	r3, r3, #16
 810ad6c:	041b      	lsls	r3, r3, #16
 810ad6e:	8879      	ldrh	r1, [r7, #2]
 810ad70:	68fa      	ldr	r2, [r7, #12]
 810ad72:	6812      	ldr	r2, [r2, #0]
 810ad74:	430b      	orrs	r3, r1
 810ad76:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810ad78:	68fb      	ldr	r3, [r7, #12]
 810ad7a:	681b      	ldr	r3, [r3, #0]
 810ad7c:	681a      	ldr	r2, [r3, #0]
 810ad7e:	68fb      	ldr	r3, [r7, #12]
 810ad80:	681b      	ldr	r3, [r3, #0]
 810ad82:	f042 0201 	orr.w	r2, r2, #1
 810ad86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810ad88:	68fb      	ldr	r3, [r7, #12]
 810ad8a:	685b      	ldr	r3, [r3, #4]
 810ad8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810ad90:	d107      	bne.n	810ada2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810ad92:	68fb      	ldr	r3, [r7, #12]
 810ad94:	681b      	ldr	r3, [r3, #0]
 810ad96:	681a      	ldr	r2, [r3, #0]
 810ad98:	68fb      	ldr	r3, [r7, #12]
 810ad9a:	681b      	ldr	r3, [r3, #0]
 810ad9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810ada0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810ada2:	68fb      	ldr	r3, [r7, #12]
 810ada4:	68db      	ldr	r3, [r3, #12]
 810ada6:	2b0f      	cmp	r3, #15
 810ada8:	f240 80a2 	bls.w	810aef0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 810adac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810adae:	089b      	lsrs	r3, r3, #2
 810adb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810adb2:	e094      	b.n	810aede <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810adb4:	68fb      	ldr	r3, [r7, #12]
 810adb6:	681b      	ldr	r3, [r3, #0]
 810adb8:	695b      	ldr	r3, [r3, #20]
 810adba:	f003 0302 	and.w	r3, r3, #2
 810adbe:	2b02      	cmp	r3, #2
 810adc0:	d120      	bne.n	810ae04 <HAL_SPI_TransmitReceive+0x194>
 810adc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810adc4:	2b00      	cmp	r3, #0
 810adc6:	d01d      	beq.n	810ae04 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 810adc8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810adca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810adce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810add0:	429a      	cmp	r2, r3
 810add2:	d217      	bcs.n	810ae04 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 810add4:	68fb      	ldr	r3, [r7, #12]
 810add6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810add8:	68fb      	ldr	r3, [r7, #12]
 810adda:	681b      	ldr	r3, [r3, #0]
 810addc:	6812      	ldr	r2, [r2, #0]
 810adde:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810ade0:	68fb      	ldr	r3, [r7, #12]
 810ade2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810ade4:	1d1a      	adds	r2, r3, #4
 810ade6:	68fb      	ldr	r3, [r7, #12]
 810ade8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 810adea:	68fb      	ldr	r3, [r7, #12]
 810adec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810adf0:	b29b      	uxth	r3, r3
 810adf2:	3b01      	subs	r3, #1
 810adf4:	b29a      	uxth	r2, r3
 810adf6:	68fb      	ldr	r3, [r7, #12]
 810adf8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810adfc:	68fb      	ldr	r3, [r7, #12]
 810adfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810ae02:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810ae04:	68fb      	ldr	r3, [r7, #12]
 810ae06:	681b      	ldr	r3, [r3, #0]
 810ae08:	695b      	ldr	r3, [r3, #20]
 810ae0a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810ae0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810ae0e:	2b00      	cmp	r3, #0
 810ae10:	d065      	beq.n	810aede <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810ae12:	68fb      	ldr	r3, [r7, #12]
 810ae14:	681b      	ldr	r3, [r3, #0]
 810ae16:	695b      	ldr	r3, [r3, #20]
 810ae18:	f003 0301 	and.w	r3, r3, #1
 810ae1c:	2b01      	cmp	r3, #1
 810ae1e:	d118      	bne.n	810ae52 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810ae20:	68fb      	ldr	r3, [r7, #12]
 810ae22:	681a      	ldr	r2, [r3, #0]
 810ae24:	68fb      	ldr	r3, [r7, #12]
 810ae26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ae28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810ae2a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810ae2c:	68fb      	ldr	r3, [r7, #12]
 810ae2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ae30:	1d1a      	adds	r2, r3, #4
 810ae32:	68fb      	ldr	r3, [r7, #12]
 810ae34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810ae36:	68fb      	ldr	r3, [r7, #12]
 810ae38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810ae3c:	b29b      	uxth	r3, r3
 810ae3e:	3b01      	subs	r3, #1
 810ae40:	b29a      	uxth	r2, r3
 810ae42:	68fb      	ldr	r3, [r7, #12]
 810ae44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810ae48:	68fb      	ldr	r3, [r7, #12]
 810ae4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810ae4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 810ae50:	e045      	b.n	810aede <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810ae52:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810ae54:	8bfb      	ldrh	r3, [r7, #30]
 810ae56:	429a      	cmp	r2, r3
 810ae58:	d21d      	bcs.n	810ae96 <HAL_SPI_TransmitReceive+0x226>
 810ae5a:	697b      	ldr	r3, [r7, #20]
 810ae5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810ae60:	2b00      	cmp	r3, #0
 810ae62:	d018      	beq.n	810ae96 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810ae64:	68fb      	ldr	r3, [r7, #12]
 810ae66:	681a      	ldr	r2, [r3, #0]
 810ae68:	68fb      	ldr	r3, [r7, #12]
 810ae6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ae6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810ae6e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810ae70:	68fb      	ldr	r3, [r7, #12]
 810ae72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ae74:	1d1a      	adds	r2, r3, #4
 810ae76:	68fb      	ldr	r3, [r7, #12]
 810ae78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810ae7a:	68fb      	ldr	r3, [r7, #12]
 810ae7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810ae80:	b29b      	uxth	r3, r3
 810ae82:	3b01      	subs	r3, #1
 810ae84:	b29a      	uxth	r2, r3
 810ae86:	68fb      	ldr	r3, [r7, #12]
 810ae88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810ae8c:	68fb      	ldr	r3, [r7, #12]
 810ae8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810ae92:	853b      	strh	r3, [r7, #40]	@ 0x28
 810ae94:	e023      	b.n	810aede <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810ae96:	f7f8 fc87 	bl	81037a8 <HAL_GetTick>
 810ae9a:	4602      	mov	r2, r0
 810ae9c:	69bb      	ldr	r3, [r7, #24]
 810ae9e:	1ad3      	subs	r3, r2, r3
 810aea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810aea2:	429a      	cmp	r2, r3
 810aea4:	d803      	bhi.n	810aeae <HAL_SPI_TransmitReceive+0x23e>
 810aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810aeac:	d102      	bne.n	810aeb4 <HAL_SPI_TransmitReceive+0x244>
 810aeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aeb0:	2b00      	cmp	r3, #0
 810aeb2:	d114      	bne.n	810aede <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 810aeb4:	68f8      	ldr	r0, [r7, #12]
 810aeb6:	f000 fa13 	bl	810b2e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810aeba:	68fb      	ldr	r3, [r7, #12]
 810aebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810aec0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810aec4:	68fb      	ldr	r3, [r7, #12]
 810aec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 810aeca:	68fb      	ldr	r3, [r7, #12]
 810aecc:	2201      	movs	r2, #1
 810aece:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 810aed2:	68fb      	ldr	r3, [r7, #12]
 810aed4:	2200      	movs	r2, #0
 810aed6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 810aeda:	2303      	movs	r3, #3
 810aedc:	e1fb      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810aede:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810aee0:	2b00      	cmp	r3, #0
 810aee2:	f47f af67 	bne.w	810adb4 <HAL_SPI_TransmitReceive+0x144>
 810aee6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810aee8:	2b00      	cmp	r3, #0
 810aeea:	f47f af63 	bne.w	810adb4 <HAL_SPI_TransmitReceive+0x144>
 810aeee:	e1cc      	b.n	810b28a <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810aef0:	68fb      	ldr	r3, [r7, #12]
 810aef2:	68db      	ldr	r3, [r3, #12]
 810aef4:	2b07      	cmp	r3, #7
 810aef6:	f240 81c0 	bls.w	810b27a <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 810aefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810aefc:	085b      	lsrs	r3, r3, #1
 810aefe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810af00:	e0c7      	b.n	810b092 <HAL_SPI_TransmitReceive+0x422>
 810af02:	bf00      	nop
 810af04:	40013000 	.word	0x40013000
 810af08:	40003800 	.word	0x40003800
 810af0c:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810af10:	68fb      	ldr	r3, [r7, #12]
 810af12:	681b      	ldr	r3, [r3, #0]
 810af14:	695b      	ldr	r3, [r3, #20]
 810af16:	f003 0302 	and.w	r3, r3, #2
 810af1a:	2b02      	cmp	r3, #2
 810af1c:	d11f      	bne.n	810af5e <HAL_SPI_TransmitReceive+0x2ee>
 810af1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810af20:	2b00      	cmp	r3, #0
 810af22:	d01c      	beq.n	810af5e <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 810af24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810af26:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810af28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810af2a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810af2c:	429a      	cmp	r2, r3
 810af2e:	d216      	bcs.n	810af5e <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 810af30:	68fb      	ldr	r3, [r7, #12]
 810af32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810af34:	881a      	ldrh	r2, [r3, #0]
 810af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810af38:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810af3a:	68fb      	ldr	r3, [r7, #12]
 810af3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810af3e:	1c9a      	adds	r2, r3, #2
 810af40:	68fb      	ldr	r3, [r7, #12]
 810af42:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 810af44:	68fb      	ldr	r3, [r7, #12]
 810af46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810af4a:	b29b      	uxth	r3, r3
 810af4c:	3b01      	subs	r3, #1
 810af4e:	b29a      	uxth	r2, r3
 810af50:	68fb      	ldr	r3, [r7, #12]
 810af52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810af56:	68fb      	ldr	r3, [r7, #12]
 810af58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810af5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810af5e:	68fb      	ldr	r3, [r7, #12]
 810af60:	681b      	ldr	r3, [r3, #0]
 810af62:	695b      	ldr	r3, [r3, #20]
 810af64:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810af66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810af68:	2b00      	cmp	r3, #0
 810af6a:	f000 8092 	beq.w	810b092 <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810af6e:	68fb      	ldr	r3, [r7, #12]
 810af70:	681b      	ldr	r3, [r3, #0]
 810af72:	695b      	ldr	r3, [r3, #20]
 810af74:	f003 0301 	and.w	r3, r3, #1
 810af78:	2b01      	cmp	r3, #1
 810af7a:	d118      	bne.n	810afae <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810af7c:	68fb      	ldr	r3, [r7, #12]
 810af7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810af80:	6a3a      	ldr	r2, [r7, #32]
 810af82:	8812      	ldrh	r2, [r2, #0]
 810af84:	b292      	uxth	r2, r2
 810af86:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810af88:	68fb      	ldr	r3, [r7, #12]
 810af8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810af8c:	1c9a      	adds	r2, r3, #2
 810af8e:	68fb      	ldr	r3, [r7, #12]
 810af90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810af92:	68fb      	ldr	r3, [r7, #12]
 810af94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810af98:	b29b      	uxth	r3, r3
 810af9a:	3b01      	subs	r3, #1
 810af9c:	b29a      	uxth	r2, r3
 810af9e:	68fb      	ldr	r3, [r7, #12]
 810afa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810afa4:	68fb      	ldr	r3, [r7, #12]
 810afa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810afaa:	853b      	strh	r3, [r7, #40]	@ 0x28
 810afac:	e071      	b.n	810b092 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810afae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810afb0:	8bfb      	ldrh	r3, [r7, #30]
 810afb2:	429a      	cmp	r2, r3
 810afb4:	d228      	bcs.n	810b008 <HAL_SPI_TransmitReceive+0x398>
 810afb6:	697b      	ldr	r3, [r7, #20]
 810afb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810afbc:	2b00      	cmp	r3, #0
 810afbe:	d023      	beq.n	810b008 <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810afc0:	68fb      	ldr	r3, [r7, #12]
 810afc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810afc4:	6a3a      	ldr	r2, [r7, #32]
 810afc6:	8812      	ldrh	r2, [r2, #0]
 810afc8:	b292      	uxth	r2, r2
 810afca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810afcc:	68fb      	ldr	r3, [r7, #12]
 810afce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810afd0:	1c9a      	adds	r2, r3, #2
 810afd2:	68fb      	ldr	r3, [r7, #12]
 810afd4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810afd6:	68fb      	ldr	r3, [r7, #12]
 810afd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810afda:	6a3a      	ldr	r2, [r7, #32]
 810afdc:	8812      	ldrh	r2, [r2, #0]
 810afde:	b292      	uxth	r2, r2
 810afe0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810afe2:	68fb      	ldr	r3, [r7, #12]
 810afe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810afe6:	1c9a      	adds	r2, r3, #2
 810afe8:	68fb      	ldr	r3, [r7, #12]
 810afea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810afec:	68fb      	ldr	r3, [r7, #12]
 810afee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810aff2:	b29b      	uxth	r3, r3
 810aff4:	3b02      	subs	r3, #2
 810aff6:	b29a      	uxth	r2, r3
 810aff8:	68fb      	ldr	r3, [r7, #12]
 810affa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810affe:	68fb      	ldr	r3, [r7, #12]
 810b000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b004:	853b      	strh	r3, [r7, #40]	@ 0x28
 810b006:	e044      	b.n	810b092 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 810b008:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810b00a:	2b01      	cmp	r3, #1
 810b00c:	d11d      	bne.n	810b04a <HAL_SPI_TransmitReceive+0x3da>
 810b00e:	697b      	ldr	r3, [r7, #20]
 810b010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810b014:	2b00      	cmp	r3, #0
 810b016:	d018      	beq.n	810b04a <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b01c:	6a3a      	ldr	r2, [r7, #32]
 810b01e:	8812      	ldrh	r2, [r2, #0]
 810b020:	b292      	uxth	r2, r2
 810b022:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b024:	68fb      	ldr	r3, [r7, #12]
 810b026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b028:	1c9a      	adds	r2, r3, #2
 810b02a:	68fb      	ldr	r3, [r7, #12]
 810b02c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810b02e:	68fb      	ldr	r3, [r7, #12]
 810b030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b034:	b29b      	uxth	r3, r3
 810b036:	3b01      	subs	r3, #1
 810b038:	b29a      	uxth	r2, r3
 810b03a:	68fb      	ldr	r3, [r7, #12]
 810b03c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b040:	68fb      	ldr	r3, [r7, #12]
 810b042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b046:	853b      	strh	r3, [r7, #40]	@ 0x28
 810b048:	e023      	b.n	810b092 <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b04a:	f7f8 fbad 	bl	81037a8 <HAL_GetTick>
 810b04e:	4602      	mov	r2, r0
 810b050:	69bb      	ldr	r3, [r7, #24]
 810b052:	1ad3      	subs	r3, r2, r3
 810b054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810b056:	429a      	cmp	r2, r3
 810b058:	d803      	bhi.n	810b062 <HAL_SPI_TransmitReceive+0x3f2>
 810b05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b05c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810b060:	d102      	bne.n	810b068 <HAL_SPI_TransmitReceive+0x3f8>
 810b062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b064:	2b00      	cmp	r3, #0
 810b066:	d114      	bne.n	810b092 <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 810b068:	68f8      	ldr	r0, [r7, #12]
 810b06a:	f000 f939 	bl	810b2e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b06e:	68fb      	ldr	r3, [r7, #12]
 810b070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b074:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810b078:	68fb      	ldr	r3, [r7, #12]
 810b07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 810b07e:	68fb      	ldr	r3, [r7, #12]
 810b080:	2201      	movs	r2, #1
 810b082:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 810b086:	68fb      	ldr	r3, [r7, #12]
 810b088:	2200      	movs	r2, #0
 810b08a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 810b08e:	2303      	movs	r3, #3
 810b090:	e121      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b092:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810b094:	2b00      	cmp	r3, #0
 810b096:	f47f af3b 	bne.w	810af10 <HAL_SPI_TransmitReceive+0x2a0>
 810b09a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810b09c:	2b00      	cmp	r3, #0
 810b09e:	f47f af37 	bne.w	810af10 <HAL_SPI_TransmitReceive+0x2a0>
 810b0a2:	e0f2      	b.n	810b28a <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810b0a4:	68fb      	ldr	r3, [r7, #12]
 810b0a6:	681b      	ldr	r3, [r3, #0]
 810b0a8:	695b      	ldr	r3, [r3, #20]
 810b0aa:	f003 0302 	and.w	r3, r3, #2
 810b0ae:	2b02      	cmp	r3, #2
 810b0b0:	d121      	bne.n	810b0f6 <HAL_SPI_TransmitReceive+0x486>
 810b0b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810b0b4:	2b00      	cmp	r3, #0
 810b0b6:	d01e      	beq.n	810b0f6 <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 810b0b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810b0ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810b0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b0be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810b0c0:	429a      	cmp	r2, r3
 810b0c2:	d218      	bcs.n	810b0f6 <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 810b0c4:	68fb      	ldr	r3, [r7, #12]
 810b0c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810b0c8:	68fb      	ldr	r3, [r7, #12]
 810b0ca:	681b      	ldr	r3, [r3, #0]
 810b0cc:	3320      	adds	r3, #32
 810b0ce:	7812      	ldrb	r2, [r2, #0]
 810b0d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810b0d2:	68fb      	ldr	r3, [r7, #12]
 810b0d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810b0d6:	1c5a      	adds	r2, r3, #1
 810b0d8:	68fb      	ldr	r3, [r7, #12]
 810b0da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 810b0dc:	68fb      	ldr	r3, [r7, #12]
 810b0de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810b0e2:	b29b      	uxth	r3, r3
 810b0e4:	3b01      	subs	r3, #1
 810b0e6:	b29a      	uxth	r2, r3
 810b0e8:	68fb      	ldr	r3, [r7, #12]
 810b0ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810b0ee:	68fb      	ldr	r3, [r7, #12]
 810b0f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810b0f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810b0f6:	68fb      	ldr	r3, [r7, #12]
 810b0f8:	681b      	ldr	r3, [r3, #0]
 810b0fa:	695b      	ldr	r3, [r3, #20]
 810b0fc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810b0fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810b100:	2b00      	cmp	r3, #0
 810b102:	f000 80ba 	beq.w	810b27a <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810b106:	68fb      	ldr	r3, [r7, #12]
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	695b      	ldr	r3, [r3, #20]
 810b10c:	f003 0301 	and.w	r3, r3, #1
 810b110:	2b01      	cmp	r3, #1
 810b112:	d11b      	bne.n	810b14c <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b114:	68fb      	ldr	r3, [r7, #12]
 810b116:	681b      	ldr	r3, [r3, #0]
 810b118:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810b11c:	68fb      	ldr	r3, [r7, #12]
 810b11e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b120:	7812      	ldrb	r2, [r2, #0]
 810b122:	b2d2      	uxtb	r2, r2
 810b124:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b126:	68fb      	ldr	r3, [r7, #12]
 810b128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b12a:	1c5a      	adds	r2, r3, #1
 810b12c:	68fb      	ldr	r3, [r7, #12]
 810b12e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810b130:	68fb      	ldr	r3, [r7, #12]
 810b132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b136:	b29b      	uxth	r3, r3
 810b138:	3b01      	subs	r3, #1
 810b13a:	b29a      	uxth	r2, r3
 810b13c:	68fb      	ldr	r3, [r7, #12]
 810b13e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b142:	68fb      	ldr	r3, [r7, #12]
 810b144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b148:	853b      	strh	r3, [r7, #40]	@ 0x28
 810b14a:	e096      	b.n	810b27a <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810b14c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810b14e:	8bfb      	ldrh	r3, [r7, #30]
 810b150:	429a      	cmp	r2, r3
 810b152:	d24a      	bcs.n	810b1ea <HAL_SPI_TransmitReceive+0x57a>
 810b154:	697b      	ldr	r3, [r7, #20]
 810b156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810b15a:	2b00      	cmp	r3, #0
 810b15c:	d045      	beq.n	810b1ea <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b15e:	68fb      	ldr	r3, [r7, #12]
 810b160:	681b      	ldr	r3, [r3, #0]
 810b162:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810b166:	68fb      	ldr	r3, [r7, #12]
 810b168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b16a:	7812      	ldrb	r2, [r2, #0]
 810b16c:	b2d2      	uxtb	r2, r2
 810b16e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b170:	68fb      	ldr	r3, [r7, #12]
 810b172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b174:	1c5a      	adds	r2, r3, #1
 810b176:	68fb      	ldr	r3, [r7, #12]
 810b178:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b17a:	68fb      	ldr	r3, [r7, #12]
 810b17c:	681b      	ldr	r3, [r3, #0]
 810b17e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810b182:	68fb      	ldr	r3, [r7, #12]
 810b184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b186:	7812      	ldrb	r2, [r2, #0]
 810b188:	b2d2      	uxtb	r2, r2
 810b18a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b18c:	68fb      	ldr	r3, [r7, #12]
 810b18e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b190:	1c5a      	adds	r2, r3, #1
 810b192:	68fb      	ldr	r3, [r7, #12]
 810b194:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b196:	68fb      	ldr	r3, [r7, #12]
 810b198:	681b      	ldr	r3, [r3, #0]
 810b19a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810b19e:	68fb      	ldr	r3, [r7, #12]
 810b1a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b1a2:	7812      	ldrb	r2, [r2, #0]
 810b1a4:	b2d2      	uxtb	r2, r2
 810b1a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b1a8:	68fb      	ldr	r3, [r7, #12]
 810b1aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b1ac:	1c5a      	adds	r2, r3, #1
 810b1ae:	68fb      	ldr	r3, [r7, #12]
 810b1b0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b1b2:	68fb      	ldr	r3, [r7, #12]
 810b1b4:	681b      	ldr	r3, [r3, #0]
 810b1b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810b1ba:	68fb      	ldr	r3, [r7, #12]
 810b1bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b1be:	7812      	ldrb	r2, [r2, #0]
 810b1c0:	b2d2      	uxtb	r2, r2
 810b1c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b1c4:	68fb      	ldr	r3, [r7, #12]
 810b1c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b1c8:	1c5a      	adds	r2, r3, #1
 810b1ca:	68fb      	ldr	r3, [r7, #12]
 810b1cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810b1ce:	68fb      	ldr	r3, [r7, #12]
 810b1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b1d4:	b29b      	uxth	r3, r3
 810b1d6:	3b04      	subs	r3, #4
 810b1d8:	b29a      	uxth	r2, r3
 810b1da:	68fb      	ldr	r3, [r7, #12]
 810b1dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b1e0:	68fb      	ldr	r3, [r7, #12]
 810b1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b1e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 810b1e8:	e047      	b.n	810b27a <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 810b1ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810b1ec:	2b03      	cmp	r3, #3
 810b1ee:	d820      	bhi.n	810b232 <HAL_SPI_TransmitReceive+0x5c2>
 810b1f0:	697b      	ldr	r3, [r7, #20]
 810b1f2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 810b1f6:	2b00      	cmp	r3, #0
 810b1f8:	d01b      	beq.n	810b232 <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b1fa:	68fb      	ldr	r3, [r7, #12]
 810b1fc:	681b      	ldr	r3, [r3, #0]
 810b1fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810b202:	68fb      	ldr	r3, [r7, #12]
 810b204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b206:	7812      	ldrb	r2, [r2, #0]
 810b208:	b2d2      	uxtb	r2, r2
 810b20a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b20c:	68fb      	ldr	r3, [r7, #12]
 810b20e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b210:	1c5a      	adds	r2, r3, #1
 810b212:	68fb      	ldr	r3, [r7, #12]
 810b214:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810b216:	68fb      	ldr	r3, [r7, #12]
 810b218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b21c:	b29b      	uxth	r3, r3
 810b21e:	3b01      	subs	r3, #1
 810b220:	b29a      	uxth	r2, r3
 810b222:	68fb      	ldr	r3, [r7, #12]
 810b224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b228:	68fb      	ldr	r3, [r7, #12]
 810b22a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810b22e:	853b      	strh	r3, [r7, #40]	@ 0x28
 810b230:	e023      	b.n	810b27a <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b232:	f7f8 fab9 	bl	81037a8 <HAL_GetTick>
 810b236:	4602      	mov	r2, r0
 810b238:	69bb      	ldr	r3, [r7, #24]
 810b23a:	1ad3      	subs	r3, r2, r3
 810b23c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810b23e:	429a      	cmp	r2, r3
 810b240:	d803      	bhi.n	810b24a <HAL_SPI_TransmitReceive+0x5da>
 810b242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810b248:	d102      	bne.n	810b250 <HAL_SPI_TransmitReceive+0x5e0>
 810b24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b24c:	2b00      	cmp	r3, #0
 810b24e:	d114      	bne.n	810b27a <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 810b250:	68f8      	ldr	r0, [r7, #12]
 810b252:	f000 f845 	bl	810b2e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b256:	68fb      	ldr	r3, [r7, #12]
 810b258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b25c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810b260:	68fb      	ldr	r3, [r7, #12]
 810b262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 810b266:	68fb      	ldr	r3, [r7, #12]
 810b268:	2201      	movs	r2, #1
 810b26a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 810b26e:	68fb      	ldr	r3, [r7, #12]
 810b270:	2200      	movs	r2, #0
 810b272:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 810b276:	2303      	movs	r3, #3
 810b278:	e02d      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b27a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810b27c:	2b00      	cmp	r3, #0
 810b27e:	f47f af11 	bne.w	810b0a4 <HAL_SPI_TransmitReceive+0x434>
 810b282:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810b284:	2b00      	cmp	r3, #0
 810b286:	f47f af0d 	bne.w	810b0a4 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 810b28a:	69bb      	ldr	r3, [r7, #24]
 810b28c:	9300      	str	r3, [sp, #0]
 810b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b290:	2200      	movs	r2, #0
 810b292:	2108      	movs	r1, #8
 810b294:	68f8      	ldr	r0, [r7, #12]
 810b296:	f000 f8c3 	bl	810b420 <SPI_WaitOnFlagUntilTimeout>
 810b29a:	4603      	mov	r3, r0
 810b29c:	2b00      	cmp	r3, #0
 810b29e:	d007      	beq.n	810b2b0 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810b2a0:	68fb      	ldr	r3, [r7, #12]
 810b2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b2a6:	f043 0220 	orr.w	r2, r3, #32
 810b2aa:	68fb      	ldr	r3, [r7, #12]
 810b2ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810b2b0:	68f8      	ldr	r0, [r7, #12]
 810b2b2:	f000 f815 	bl	810b2e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810b2b6:	68fb      	ldr	r3, [r7, #12]
 810b2b8:	2201      	movs	r2, #1
 810b2ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 810b2be:	68fb      	ldr	r3, [r7, #12]
 810b2c0:	2200      	movs	r2, #0
 810b2c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b2c6:	68fb      	ldr	r3, [r7, #12]
 810b2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b2cc:	2b00      	cmp	r3, #0
 810b2ce:	d001      	beq.n	810b2d4 <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 810b2d0:	2301      	movs	r3, #1
 810b2d2:	e000      	b.n	810b2d6 <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 810b2d4:	2300      	movs	r3, #0
  }
}
 810b2d6:	4618      	mov	r0, r3
 810b2d8:	3730      	adds	r7, #48	@ 0x30
 810b2da:	46bd      	mov	sp, r7
 810b2dc:	bd80      	pop	{r7, pc}
 810b2de:	bf00      	nop

0810b2e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810b2e0:	b480      	push	{r7}
 810b2e2:	b085      	sub	sp, #20
 810b2e4:	af00      	add	r7, sp, #0
 810b2e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810b2e8:	687b      	ldr	r3, [r7, #4]
 810b2ea:	681b      	ldr	r3, [r3, #0]
 810b2ec:	695b      	ldr	r3, [r3, #20]
 810b2ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810b2f0:	687b      	ldr	r3, [r7, #4]
 810b2f2:	681b      	ldr	r3, [r3, #0]
 810b2f4:	699a      	ldr	r2, [r3, #24]
 810b2f6:	687b      	ldr	r3, [r7, #4]
 810b2f8:	681b      	ldr	r3, [r3, #0]
 810b2fa:	f042 0208 	orr.w	r2, r2, #8
 810b2fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810b300:	687b      	ldr	r3, [r7, #4]
 810b302:	681b      	ldr	r3, [r3, #0]
 810b304:	699a      	ldr	r2, [r3, #24]
 810b306:	687b      	ldr	r3, [r7, #4]
 810b308:	681b      	ldr	r3, [r3, #0]
 810b30a:	f042 0210 	orr.w	r2, r2, #16
 810b30e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810b310:	687b      	ldr	r3, [r7, #4]
 810b312:	681b      	ldr	r3, [r3, #0]
 810b314:	681a      	ldr	r2, [r3, #0]
 810b316:	687b      	ldr	r3, [r7, #4]
 810b318:	681b      	ldr	r3, [r3, #0]
 810b31a:	f022 0201 	bic.w	r2, r2, #1
 810b31e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810b320:	687b      	ldr	r3, [r7, #4]
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	691b      	ldr	r3, [r3, #16]
 810b326:	687a      	ldr	r2, [r7, #4]
 810b328:	6812      	ldr	r2, [r2, #0]
 810b32a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 810b32e:	f023 0303 	bic.w	r3, r3, #3
 810b332:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810b334:	687b      	ldr	r3, [r7, #4]
 810b336:	681b      	ldr	r3, [r3, #0]
 810b338:	689a      	ldr	r2, [r3, #8]
 810b33a:	687b      	ldr	r3, [r7, #4]
 810b33c:	681b      	ldr	r3, [r3, #0]
 810b33e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 810b342:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810b344:	687b      	ldr	r3, [r7, #4]
 810b346:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810b34a:	b2db      	uxtb	r3, r3
 810b34c:	2b04      	cmp	r3, #4
 810b34e:	d014      	beq.n	810b37a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810b350:	68fb      	ldr	r3, [r7, #12]
 810b352:	f003 0320 	and.w	r3, r3, #32
 810b356:	2b00      	cmp	r3, #0
 810b358:	d00f      	beq.n	810b37a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810b35a:	687b      	ldr	r3, [r7, #4]
 810b35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b360:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810b364:	687b      	ldr	r3, [r7, #4]
 810b366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810b36a:	687b      	ldr	r3, [r7, #4]
 810b36c:	681b      	ldr	r3, [r3, #0]
 810b36e:	699a      	ldr	r2, [r3, #24]
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	681b      	ldr	r3, [r3, #0]
 810b374:	f042 0220 	orr.w	r2, r2, #32
 810b378:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810b37a:	687b      	ldr	r3, [r7, #4]
 810b37c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810b380:	b2db      	uxtb	r3, r3
 810b382:	2b03      	cmp	r3, #3
 810b384:	d014      	beq.n	810b3b0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810b386:	68fb      	ldr	r3, [r7, #12]
 810b388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b38c:	2b00      	cmp	r3, #0
 810b38e:	d00f      	beq.n	810b3b0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810b390:	687b      	ldr	r3, [r7, #4]
 810b392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b396:	f043 0204 	orr.w	r2, r3, #4
 810b39a:	687b      	ldr	r3, [r7, #4]
 810b39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810b3a0:	687b      	ldr	r3, [r7, #4]
 810b3a2:	681b      	ldr	r3, [r3, #0]
 810b3a4:	699a      	ldr	r2, [r3, #24]
 810b3a6:	687b      	ldr	r3, [r7, #4]
 810b3a8:	681b      	ldr	r3, [r3, #0]
 810b3aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810b3ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810b3b0:	68fb      	ldr	r3, [r7, #12]
 810b3b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810b3b6:	2b00      	cmp	r3, #0
 810b3b8:	d00f      	beq.n	810b3da <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810b3ba:	687b      	ldr	r3, [r7, #4]
 810b3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b3c0:	f043 0201 	orr.w	r2, r3, #1
 810b3c4:	687b      	ldr	r3, [r7, #4]
 810b3c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810b3ca:	687b      	ldr	r3, [r7, #4]
 810b3cc:	681b      	ldr	r3, [r3, #0]
 810b3ce:	699a      	ldr	r2, [r3, #24]
 810b3d0:	687b      	ldr	r3, [r7, #4]
 810b3d2:	681b      	ldr	r3, [r3, #0]
 810b3d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810b3d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810b3da:	68fb      	ldr	r3, [r7, #12]
 810b3dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b3e0:	2b00      	cmp	r3, #0
 810b3e2:	d00f      	beq.n	810b404 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810b3e4:	687b      	ldr	r3, [r7, #4]
 810b3e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b3ea:	f043 0208 	orr.w	r2, r3, #8
 810b3ee:	687b      	ldr	r3, [r7, #4]
 810b3f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	681b      	ldr	r3, [r3, #0]
 810b3f8:	699a      	ldr	r2, [r3, #24]
 810b3fa:	687b      	ldr	r3, [r7, #4]
 810b3fc:	681b      	ldr	r3, [r3, #0]
 810b3fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810b402:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810b404:	687b      	ldr	r3, [r7, #4]
 810b406:	2200      	movs	r2, #0
 810b408:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810b40c:	687b      	ldr	r3, [r7, #4]
 810b40e:	2200      	movs	r2, #0
 810b410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 810b414:	bf00      	nop
 810b416:	3714      	adds	r7, #20
 810b418:	46bd      	mov	sp, r7
 810b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b41e:	4770      	bx	lr

0810b420 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810b420:	b580      	push	{r7, lr}
 810b422:	b084      	sub	sp, #16
 810b424:	af00      	add	r7, sp, #0
 810b426:	60f8      	str	r0, [r7, #12]
 810b428:	60b9      	str	r1, [r7, #8]
 810b42a:	603b      	str	r3, [r7, #0]
 810b42c:	4613      	mov	r3, r2
 810b42e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810b430:	e010      	b.n	810b454 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b432:	f7f8 f9b9 	bl	81037a8 <HAL_GetTick>
 810b436:	4602      	mov	r2, r0
 810b438:	69bb      	ldr	r3, [r7, #24]
 810b43a:	1ad3      	subs	r3, r2, r3
 810b43c:	683a      	ldr	r2, [r7, #0]
 810b43e:	429a      	cmp	r2, r3
 810b440:	d803      	bhi.n	810b44a <SPI_WaitOnFlagUntilTimeout+0x2a>
 810b442:	683b      	ldr	r3, [r7, #0]
 810b444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810b448:	d102      	bne.n	810b450 <SPI_WaitOnFlagUntilTimeout+0x30>
 810b44a:	683b      	ldr	r3, [r7, #0]
 810b44c:	2b00      	cmp	r3, #0
 810b44e:	d101      	bne.n	810b454 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810b450:	2303      	movs	r3, #3
 810b452:	e00f      	b.n	810b474 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810b454:	68fb      	ldr	r3, [r7, #12]
 810b456:	681b      	ldr	r3, [r3, #0]
 810b458:	695a      	ldr	r2, [r3, #20]
 810b45a:	68bb      	ldr	r3, [r7, #8]
 810b45c:	4013      	ands	r3, r2
 810b45e:	68ba      	ldr	r2, [r7, #8]
 810b460:	429a      	cmp	r2, r3
 810b462:	bf0c      	ite	eq
 810b464:	2301      	moveq	r3, #1
 810b466:	2300      	movne	r3, #0
 810b468:	b2db      	uxtb	r3, r3
 810b46a:	461a      	mov	r2, r3
 810b46c:	79fb      	ldrb	r3, [r7, #7]
 810b46e:	429a      	cmp	r2, r3
 810b470:	d0df      	beq.n	810b432 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 810b472:	2300      	movs	r3, #0
}
 810b474:	4618      	mov	r0, r3
 810b476:	3710      	adds	r7, #16
 810b478:	46bd      	mov	sp, r7
 810b47a:	bd80      	pop	{r7, pc}

0810b47c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 810b47c:	b480      	push	{r7}
 810b47e:	b085      	sub	sp, #20
 810b480:	af00      	add	r7, sp, #0
 810b482:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810b484:	687b      	ldr	r3, [r7, #4]
 810b486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810b488:	095b      	lsrs	r3, r3, #5
 810b48a:	3301      	adds	r3, #1
 810b48c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810b48e:	687b      	ldr	r3, [r7, #4]
 810b490:	68db      	ldr	r3, [r3, #12]
 810b492:	3301      	adds	r3, #1
 810b494:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810b496:	68bb      	ldr	r3, [r7, #8]
 810b498:	3307      	adds	r3, #7
 810b49a:	08db      	lsrs	r3, r3, #3
 810b49c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810b49e:	68bb      	ldr	r3, [r7, #8]
 810b4a0:	68fa      	ldr	r2, [r7, #12]
 810b4a2:	fb02 f303 	mul.w	r3, r2, r3
}
 810b4a6:	4618      	mov	r0, r3
 810b4a8:	3714      	adds	r7, #20
 810b4aa:	46bd      	mov	sp, r7
 810b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4b0:	4770      	bx	lr

0810b4b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810b4b2:	b580      	push	{r7, lr}
 810b4b4:	b082      	sub	sp, #8
 810b4b6:	af00      	add	r7, sp, #0
 810b4b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810b4ba:	687b      	ldr	r3, [r7, #4]
 810b4bc:	2b00      	cmp	r3, #0
 810b4be:	d101      	bne.n	810b4c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810b4c0:	2301      	movs	r3, #1
 810b4c2:	e049      	b.n	810b558 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810b4ca:	b2db      	uxtb	r3, r3
 810b4cc:	2b00      	cmp	r3, #0
 810b4ce:	d106      	bne.n	810b4de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810b4d0:	687b      	ldr	r3, [r7, #4]
 810b4d2:	2200      	movs	r2, #0
 810b4d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810b4d8:	6878      	ldr	r0, [r7, #4]
 810b4da:	f7f8 f86d 	bl	81035b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810b4de:	687b      	ldr	r3, [r7, #4]
 810b4e0:	2202      	movs	r2, #2
 810b4e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810b4e6:	687b      	ldr	r3, [r7, #4]
 810b4e8:	681a      	ldr	r2, [r3, #0]
 810b4ea:	687b      	ldr	r3, [r7, #4]
 810b4ec:	3304      	adds	r3, #4
 810b4ee:	4619      	mov	r1, r3
 810b4f0:	4610      	mov	r0, r2
 810b4f2:	f000 fad5 	bl	810baa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810b4f6:	687b      	ldr	r3, [r7, #4]
 810b4f8:	2201      	movs	r2, #1
 810b4fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810b4fe:	687b      	ldr	r3, [r7, #4]
 810b500:	2201      	movs	r2, #1
 810b502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810b506:	687b      	ldr	r3, [r7, #4]
 810b508:	2201      	movs	r2, #1
 810b50a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810b50e:	687b      	ldr	r3, [r7, #4]
 810b510:	2201      	movs	r2, #1
 810b512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810b516:	687b      	ldr	r3, [r7, #4]
 810b518:	2201      	movs	r2, #1
 810b51a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810b51e:	687b      	ldr	r3, [r7, #4]
 810b520:	2201      	movs	r2, #1
 810b522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810b526:	687b      	ldr	r3, [r7, #4]
 810b528:	2201      	movs	r2, #1
 810b52a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810b52e:	687b      	ldr	r3, [r7, #4]
 810b530:	2201      	movs	r2, #1
 810b532:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810b536:	687b      	ldr	r3, [r7, #4]
 810b538:	2201      	movs	r2, #1
 810b53a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810b53e:	687b      	ldr	r3, [r7, #4]
 810b540:	2201      	movs	r2, #1
 810b542:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810b546:	687b      	ldr	r3, [r7, #4]
 810b548:	2201      	movs	r2, #1
 810b54a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810b54e:	687b      	ldr	r3, [r7, #4]
 810b550:	2201      	movs	r2, #1
 810b552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810b556:	2300      	movs	r3, #0
}
 810b558:	4618      	mov	r0, r3
 810b55a:	3708      	adds	r7, #8
 810b55c:	46bd      	mov	sp, r7
 810b55e:	bd80      	pop	{r7, pc}

0810b560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810b560:	b480      	push	{r7}
 810b562:	b085      	sub	sp, #20
 810b564:	af00      	add	r7, sp, #0
 810b566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810b568:	687b      	ldr	r3, [r7, #4]
 810b56a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810b56e:	b2db      	uxtb	r3, r3
 810b570:	2b01      	cmp	r3, #1
 810b572:	d001      	beq.n	810b578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810b574:	2301      	movs	r3, #1
 810b576:	e054      	b.n	810b622 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810b578:	687b      	ldr	r3, [r7, #4]
 810b57a:	2202      	movs	r2, #2
 810b57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810b580:	687b      	ldr	r3, [r7, #4]
 810b582:	681b      	ldr	r3, [r3, #0]
 810b584:	68da      	ldr	r2, [r3, #12]
 810b586:	687b      	ldr	r3, [r7, #4]
 810b588:	681b      	ldr	r3, [r3, #0]
 810b58a:	f042 0201 	orr.w	r2, r2, #1
 810b58e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810b590:	687b      	ldr	r3, [r7, #4]
 810b592:	681b      	ldr	r3, [r3, #0]
 810b594:	4a26      	ldr	r2, [pc, #152]	@ (810b630 <HAL_TIM_Base_Start_IT+0xd0>)
 810b596:	4293      	cmp	r3, r2
 810b598:	d022      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	681b      	ldr	r3, [r3, #0]
 810b59e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b5a2:	d01d      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b5a4:	687b      	ldr	r3, [r7, #4]
 810b5a6:	681b      	ldr	r3, [r3, #0]
 810b5a8:	4a22      	ldr	r2, [pc, #136]	@ (810b634 <HAL_TIM_Base_Start_IT+0xd4>)
 810b5aa:	4293      	cmp	r3, r2
 810b5ac:	d018      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b5ae:	687b      	ldr	r3, [r7, #4]
 810b5b0:	681b      	ldr	r3, [r3, #0]
 810b5b2:	4a21      	ldr	r2, [pc, #132]	@ (810b638 <HAL_TIM_Base_Start_IT+0xd8>)
 810b5b4:	4293      	cmp	r3, r2
 810b5b6:	d013      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b5b8:	687b      	ldr	r3, [r7, #4]
 810b5ba:	681b      	ldr	r3, [r3, #0]
 810b5bc:	4a1f      	ldr	r2, [pc, #124]	@ (810b63c <HAL_TIM_Base_Start_IT+0xdc>)
 810b5be:	4293      	cmp	r3, r2
 810b5c0:	d00e      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	681b      	ldr	r3, [r3, #0]
 810b5c6:	4a1e      	ldr	r2, [pc, #120]	@ (810b640 <HAL_TIM_Base_Start_IT+0xe0>)
 810b5c8:	4293      	cmp	r3, r2
 810b5ca:	d009      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b5cc:	687b      	ldr	r3, [r7, #4]
 810b5ce:	681b      	ldr	r3, [r3, #0]
 810b5d0:	4a1c      	ldr	r2, [pc, #112]	@ (810b644 <HAL_TIM_Base_Start_IT+0xe4>)
 810b5d2:	4293      	cmp	r3, r2
 810b5d4:	d004      	beq.n	810b5e0 <HAL_TIM_Base_Start_IT+0x80>
 810b5d6:	687b      	ldr	r3, [r7, #4]
 810b5d8:	681b      	ldr	r3, [r3, #0]
 810b5da:	4a1b      	ldr	r2, [pc, #108]	@ (810b648 <HAL_TIM_Base_Start_IT+0xe8>)
 810b5dc:	4293      	cmp	r3, r2
 810b5de:	d115      	bne.n	810b60c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810b5e0:	687b      	ldr	r3, [r7, #4]
 810b5e2:	681b      	ldr	r3, [r3, #0]
 810b5e4:	689a      	ldr	r2, [r3, #8]
 810b5e6:	4b19      	ldr	r3, [pc, #100]	@ (810b64c <HAL_TIM_Base_Start_IT+0xec>)
 810b5e8:	4013      	ands	r3, r2
 810b5ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810b5ec:	68fb      	ldr	r3, [r7, #12]
 810b5ee:	2b06      	cmp	r3, #6
 810b5f0:	d015      	beq.n	810b61e <HAL_TIM_Base_Start_IT+0xbe>
 810b5f2:	68fb      	ldr	r3, [r7, #12]
 810b5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b5f8:	d011      	beq.n	810b61e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810b5fa:	687b      	ldr	r3, [r7, #4]
 810b5fc:	681b      	ldr	r3, [r3, #0]
 810b5fe:	681a      	ldr	r2, [r3, #0]
 810b600:	687b      	ldr	r3, [r7, #4]
 810b602:	681b      	ldr	r3, [r3, #0]
 810b604:	f042 0201 	orr.w	r2, r2, #1
 810b608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810b60a:	e008      	b.n	810b61e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810b60c:	687b      	ldr	r3, [r7, #4]
 810b60e:	681b      	ldr	r3, [r3, #0]
 810b610:	681a      	ldr	r2, [r3, #0]
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	f042 0201 	orr.w	r2, r2, #1
 810b61a:	601a      	str	r2, [r3, #0]
 810b61c:	e000      	b.n	810b620 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810b61e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810b620:	2300      	movs	r3, #0
}
 810b622:	4618      	mov	r0, r3
 810b624:	3714      	adds	r7, #20
 810b626:	46bd      	mov	sp, r7
 810b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b62c:	4770      	bx	lr
 810b62e:	bf00      	nop
 810b630:	40010000 	.word	0x40010000
 810b634:	40000400 	.word	0x40000400
 810b638:	40000800 	.word	0x40000800
 810b63c:	40000c00 	.word	0x40000c00
 810b640:	40010400 	.word	0x40010400
 810b644:	40001800 	.word	0x40001800
 810b648:	40014000 	.word	0x40014000
 810b64c:	00010007 	.word	0x00010007

0810b650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810b650:	b580      	push	{r7, lr}
 810b652:	b084      	sub	sp, #16
 810b654:	af00      	add	r7, sp, #0
 810b656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810b658:	687b      	ldr	r3, [r7, #4]
 810b65a:	681b      	ldr	r3, [r3, #0]
 810b65c:	68db      	ldr	r3, [r3, #12]
 810b65e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810b660:	687b      	ldr	r3, [r7, #4]
 810b662:	681b      	ldr	r3, [r3, #0]
 810b664:	691b      	ldr	r3, [r3, #16]
 810b666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810b668:	68bb      	ldr	r3, [r7, #8]
 810b66a:	f003 0302 	and.w	r3, r3, #2
 810b66e:	2b00      	cmp	r3, #0
 810b670:	d020      	beq.n	810b6b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810b672:	68fb      	ldr	r3, [r7, #12]
 810b674:	f003 0302 	and.w	r3, r3, #2
 810b678:	2b00      	cmp	r3, #0
 810b67a:	d01b      	beq.n	810b6b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810b67c:	687b      	ldr	r3, [r7, #4]
 810b67e:	681b      	ldr	r3, [r3, #0]
 810b680:	f06f 0202 	mvn.w	r2, #2
 810b684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810b686:	687b      	ldr	r3, [r7, #4]
 810b688:	2201      	movs	r2, #1
 810b68a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810b68c:	687b      	ldr	r3, [r7, #4]
 810b68e:	681b      	ldr	r3, [r3, #0]
 810b690:	699b      	ldr	r3, [r3, #24]
 810b692:	f003 0303 	and.w	r3, r3, #3
 810b696:	2b00      	cmp	r3, #0
 810b698:	d003      	beq.n	810b6a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810b69a:	6878      	ldr	r0, [r7, #4]
 810b69c:	f000 f9e2 	bl	810ba64 <HAL_TIM_IC_CaptureCallback>
 810b6a0:	e005      	b.n	810b6ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810b6a2:	6878      	ldr	r0, [r7, #4]
 810b6a4:	f000 f9d4 	bl	810ba50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b6a8:	6878      	ldr	r0, [r7, #4]
 810b6aa:	f000 f9e5 	bl	810ba78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b6ae:	687b      	ldr	r3, [r7, #4]
 810b6b0:	2200      	movs	r2, #0
 810b6b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810b6b4:	68bb      	ldr	r3, [r7, #8]
 810b6b6:	f003 0304 	and.w	r3, r3, #4
 810b6ba:	2b00      	cmp	r3, #0
 810b6bc:	d020      	beq.n	810b700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810b6be:	68fb      	ldr	r3, [r7, #12]
 810b6c0:	f003 0304 	and.w	r3, r3, #4
 810b6c4:	2b00      	cmp	r3, #0
 810b6c6:	d01b      	beq.n	810b700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810b6c8:	687b      	ldr	r3, [r7, #4]
 810b6ca:	681b      	ldr	r3, [r3, #0]
 810b6cc:	f06f 0204 	mvn.w	r2, #4
 810b6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810b6d2:	687b      	ldr	r3, [r7, #4]
 810b6d4:	2202      	movs	r2, #2
 810b6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810b6d8:	687b      	ldr	r3, [r7, #4]
 810b6da:	681b      	ldr	r3, [r3, #0]
 810b6dc:	699b      	ldr	r3, [r3, #24]
 810b6de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b6e2:	2b00      	cmp	r3, #0
 810b6e4:	d003      	beq.n	810b6ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b6e6:	6878      	ldr	r0, [r7, #4]
 810b6e8:	f000 f9bc 	bl	810ba64 <HAL_TIM_IC_CaptureCallback>
 810b6ec:	e005      	b.n	810b6fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b6ee:	6878      	ldr	r0, [r7, #4]
 810b6f0:	f000 f9ae 	bl	810ba50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b6f4:	6878      	ldr	r0, [r7, #4]
 810b6f6:	f000 f9bf 	bl	810ba78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b6fa:	687b      	ldr	r3, [r7, #4]
 810b6fc:	2200      	movs	r2, #0
 810b6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810b700:	68bb      	ldr	r3, [r7, #8]
 810b702:	f003 0308 	and.w	r3, r3, #8
 810b706:	2b00      	cmp	r3, #0
 810b708:	d020      	beq.n	810b74c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810b70a:	68fb      	ldr	r3, [r7, #12]
 810b70c:	f003 0308 	and.w	r3, r3, #8
 810b710:	2b00      	cmp	r3, #0
 810b712:	d01b      	beq.n	810b74c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	681b      	ldr	r3, [r3, #0]
 810b718:	f06f 0208 	mvn.w	r2, #8
 810b71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810b71e:	687b      	ldr	r3, [r7, #4]
 810b720:	2204      	movs	r2, #4
 810b722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810b724:	687b      	ldr	r3, [r7, #4]
 810b726:	681b      	ldr	r3, [r3, #0]
 810b728:	69db      	ldr	r3, [r3, #28]
 810b72a:	f003 0303 	and.w	r3, r3, #3
 810b72e:	2b00      	cmp	r3, #0
 810b730:	d003      	beq.n	810b73a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b732:	6878      	ldr	r0, [r7, #4]
 810b734:	f000 f996 	bl	810ba64 <HAL_TIM_IC_CaptureCallback>
 810b738:	e005      	b.n	810b746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b73a:	6878      	ldr	r0, [r7, #4]
 810b73c:	f000 f988 	bl	810ba50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b740:	6878      	ldr	r0, [r7, #4]
 810b742:	f000 f999 	bl	810ba78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b746:	687b      	ldr	r3, [r7, #4]
 810b748:	2200      	movs	r2, #0
 810b74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810b74c:	68bb      	ldr	r3, [r7, #8]
 810b74e:	f003 0310 	and.w	r3, r3, #16
 810b752:	2b00      	cmp	r3, #0
 810b754:	d020      	beq.n	810b798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810b756:	68fb      	ldr	r3, [r7, #12]
 810b758:	f003 0310 	and.w	r3, r3, #16
 810b75c:	2b00      	cmp	r3, #0
 810b75e:	d01b      	beq.n	810b798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810b760:	687b      	ldr	r3, [r7, #4]
 810b762:	681b      	ldr	r3, [r3, #0]
 810b764:	f06f 0210 	mvn.w	r2, #16
 810b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810b76a:	687b      	ldr	r3, [r7, #4]
 810b76c:	2208      	movs	r2, #8
 810b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810b770:	687b      	ldr	r3, [r7, #4]
 810b772:	681b      	ldr	r3, [r3, #0]
 810b774:	69db      	ldr	r3, [r3, #28]
 810b776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b77a:	2b00      	cmp	r3, #0
 810b77c:	d003      	beq.n	810b786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b77e:	6878      	ldr	r0, [r7, #4]
 810b780:	f000 f970 	bl	810ba64 <HAL_TIM_IC_CaptureCallback>
 810b784:	e005      	b.n	810b792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b786:	6878      	ldr	r0, [r7, #4]
 810b788:	f000 f962 	bl	810ba50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b78c:	6878      	ldr	r0, [r7, #4]
 810b78e:	f000 f973 	bl	810ba78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b792:	687b      	ldr	r3, [r7, #4]
 810b794:	2200      	movs	r2, #0
 810b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810b798:	68bb      	ldr	r3, [r7, #8]
 810b79a:	f003 0301 	and.w	r3, r3, #1
 810b79e:	2b00      	cmp	r3, #0
 810b7a0:	d00c      	beq.n	810b7bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810b7a2:	68fb      	ldr	r3, [r7, #12]
 810b7a4:	f003 0301 	and.w	r3, r3, #1
 810b7a8:	2b00      	cmp	r3, #0
 810b7aa:	d007      	beq.n	810b7bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810b7ac:	687b      	ldr	r3, [r7, #4]
 810b7ae:	681b      	ldr	r3, [r3, #0]
 810b7b0:	f06f 0201 	mvn.w	r2, #1
 810b7b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810b7b6:	6878      	ldr	r0, [r7, #4]
 810b7b8:	f7f7 fcf4 	bl	81031a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b7bc:	68bb      	ldr	r3, [r7, #8]
 810b7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b7c2:	2b00      	cmp	r3, #0
 810b7c4:	d104      	bne.n	810b7d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810b7c6:	68bb      	ldr	r3, [r7, #8]
 810b7c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b7cc:	2b00      	cmp	r3, #0
 810b7ce:	d00c      	beq.n	810b7ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b7d0:	68fb      	ldr	r3, [r7, #12]
 810b7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b7d6:	2b00      	cmp	r3, #0
 810b7d8:	d007      	beq.n	810b7ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810b7da:	687b      	ldr	r3, [r7, #4]
 810b7dc:	681b      	ldr	r3, [r3, #0]
 810b7de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810b7e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810b7e4:	6878      	ldr	r0, [r7, #4]
 810b7e6:	f000 fb35 	bl	810be54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810b7ea:	68bb      	ldr	r3, [r7, #8]
 810b7ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b7f0:	2b00      	cmp	r3, #0
 810b7f2:	d00c      	beq.n	810b80e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b7f4:	68fb      	ldr	r3, [r7, #12]
 810b7f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b7fa:	2b00      	cmp	r3, #0
 810b7fc:	d007      	beq.n	810b80e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810b7fe:	687b      	ldr	r3, [r7, #4]
 810b800:	681b      	ldr	r3, [r3, #0]
 810b802:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810b806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810b808:	6878      	ldr	r0, [r7, #4]
 810b80a:	f000 fb2d 	bl	810be68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810b80e:	68bb      	ldr	r3, [r7, #8]
 810b810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b814:	2b00      	cmp	r3, #0
 810b816:	d00c      	beq.n	810b832 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810b818:	68fb      	ldr	r3, [r7, #12]
 810b81a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b81e:	2b00      	cmp	r3, #0
 810b820:	d007      	beq.n	810b832 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810b822:	687b      	ldr	r3, [r7, #4]
 810b824:	681b      	ldr	r3, [r3, #0]
 810b826:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810b82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810b82c:	6878      	ldr	r0, [r7, #4]
 810b82e:	f000 f92d 	bl	810ba8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810b832:	68bb      	ldr	r3, [r7, #8]
 810b834:	f003 0320 	and.w	r3, r3, #32
 810b838:	2b00      	cmp	r3, #0
 810b83a:	d00c      	beq.n	810b856 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810b83c:	68fb      	ldr	r3, [r7, #12]
 810b83e:	f003 0320 	and.w	r3, r3, #32
 810b842:	2b00      	cmp	r3, #0
 810b844:	d007      	beq.n	810b856 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810b846:	687b      	ldr	r3, [r7, #4]
 810b848:	681b      	ldr	r3, [r3, #0]
 810b84a:	f06f 0220 	mvn.w	r2, #32
 810b84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810b850:	6878      	ldr	r0, [r7, #4]
 810b852:	f000 faf5 	bl	810be40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810b856:	bf00      	nop
 810b858:	3710      	adds	r7, #16
 810b85a:	46bd      	mov	sp, r7
 810b85c:	bd80      	pop	{r7, pc}
	...

0810b860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810b860:	b580      	push	{r7, lr}
 810b862:	b084      	sub	sp, #16
 810b864:	af00      	add	r7, sp, #0
 810b866:	6078      	str	r0, [r7, #4]
 810b868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810b86a:	2300      	movs	r3, #0
 810b86c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810b86e:	687b      	ldr	r3, [r7, #4]
 810b870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b874:	2b01      	cmp	r3, #1
 810b876:	d101      	bne.n	810b87c <HAL_TIM_ConfigClockSource+0x1c>
 810b878:	2302      	movs	r3, #2
 810b87a:	e0de      	b.n	810ba3a <HAL_TIM_ConfigClockSource+0x1da>
 810b87c:	687b      	ldr	r3, [r7, #4]
 810b87e:	2201      	movs	r2, #1
 810b880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810b884:	687b      	ldr	r3, [r7, #4]
 810b886:	2202      	movs	r2, #2
 810b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810b88c:	687b      	ldr	r3, [r7, #4]
 810b88e:	681b      	ldr	r3, [r3, #0]
 810b890:	689b      	ldr	r3, [r3, #8]
 810b892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810b894:	68bb      	ldr	r3, [r7, #8]
 810b896:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810b89a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810b89e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810b8a0:	68bb      	ldr	r3, [r7, #8]
 810b8a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810b8a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810b8a8:	687b      	ldr	r3, [r7, #4]
 810b8aa:	681b      	ldr	r3, [r3, #0]
 810b8ac:	68ba      	ldr	r2, [r7, #8]
 810b8ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810b8b0:	683b      	ldr	r3, [r7, #0]
 810b8b2:	681b      	ldr	r3, [r3, #0]
 810b8b4:	4a63      	ldr	r2, [pc, #396]	@ (810ba44 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b8b6:	4293      	cmp	r3, r2
 810b8b8:	f000 80a9 	beq.w	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b8bc:	4a61      	ldr	r2, [pc, #388]	@ (810ba44 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b8be:	4293      	cmp	r3, r2
 810b8c0:	f200 80ae 	bhi.w	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b8c4:	4a60      	ldr	r2, [pc, #384]	@ (810ba48 <HAL_TIM_ConfigClockSource+0x1e8>)
 810b8c6:	4293      	cmp	r3, r2
 810b8c8:	f000 80a1 	beq.w	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b8cc:	4a5e      	ldr	r2, [pc, #376]	@ (810ba48 <HAL_TIM_ConfigClockSource+0x1e8>)
 810b8ce:	4293      	cmp	r3, r2
 810b8d0:	f200 80a6 	bhi.w	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b8d4:	4a5d      	ldr	r2, [pc, #372]	@ (810ba4c <HAL_TIM_ConfigClockSource+0x1ec>)
 810b8d6:	4293      	cmp	r3, r2
 810b8d8:	f000 8099 	beq.w	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b8dc:	4a5b      	ldr	r2, [pc, #364]	@ (810ba4c <HAL_TIM_ConfigClockSource+0x1ec>)
 810b8de:	4293      	cmp	r3, r2
 810b8e0:	f200 809e 	bhi.w	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b8e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b8e8:	f000 8091 	beq.w	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b8ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b8f0:	f200 8096 	bhi.w	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b8f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b8f8:	f000 8089 	beq.w	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b8fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b900:	f200 808e 	bhi.w	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b908:	d03e      	beq.n	810b988 <HAL_TIM_ConfigClockSource+0x128>
 810b90a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b90e:	f200 8087 	bhi.w	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b916:	f000 8086 	beq.w	810ba26 <HAL_TIM_ConfigClockSource+0x1c6>
 810b91a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b91e:	d87f      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b920:	2b70      	cmp	r3, #112	@ 0x70
 810b922:	d01a      	beq.n	810b95a <HAL_TIM_ConfigClockSource+0xfa>
 810b924:	2b70      	cmp	r3, #112	@ 0x70
 810b926:	d87b      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b928:	2b60      	cmp	r3, #96	@ 0x60
 810b92a:	d050      	beq.n	810b9ce <HAL_TIM_ConfigClockSource+0x16e>
 810b92c:	2b60      	cmp	r3, #96	@ 0x60
 810b92e:	d877      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b930:	2b50      	cmp	r3, #80	@ 0x50
 810b932:	d03c      	beq.n	810b9ae <HAL_TIM_ConfigClockSource+0x14e>
 810b934:	2b50      	cmp	r3, #80	@ 0x50
 810b936:	d873      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b938:	2b40      	cmp	r3, #64	@ 0x40
 810b93a:	d058      	beq.n	810b9ee <HAL_TIM_ConfigClockSource+0x18e>
 810b93c:	2b40      	cmp	r3, #64	@ 0x40
 810b93e:	d86f      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b940:	2b30      	cmp	r3, #48	@ 0x30
 810b942:	d064      	beq.n	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b944:	2b30      	cmp	r3, #48	@ 0x30
 810b946:	d86b      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b948:	2b20      	cmp	r3, #32
 810b94a:	d060      	beq.n	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b94c:	2b20      	cmp	r3, #32
 810b94e:	d867      	bhi.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
 810b950:	2b00      	cmp	r3, #0
 810b952:	d05c      	beq.n	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b954:	2b10      	cmp	r3, #16
 810b956:	d05a      	beq.n	810ba0e <HAL_TIM_ConfigClockSource+0x1ae>
 810b958:	e062      	b.n	810ba20 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b95a:	687b      	ldr	r3, [r7, #4]
 810b95c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b95e:	683b      	ldr	r3, [r7, #0]
 810b960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b962:	683b      	ldr	r3, [r7, #0]
 810b964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b966:	683b      	ldr	r3, [r7, #0]
 810b968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b96a:	f000 f9bb 	bl	810bce4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810b96e:	687b      	ldr	r3, [r7, #4]
 810b970:	681b      	ldr	r3, [r3, #0]
 810b972:	689b      	ldr	r3, [r3, #8]
 810b974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810b976:	68bb      	ldr	r3, [r7, #8]
 810b978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810b97c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810b97e:	687b      	ldr	r3, [r7, #4]
 810b980:	681b      	ldr	r3, [r3, #0]
 810b982:	68ba      	ldr	r2, [r7, #8]
 810b984:	609a      	str	r2, [r3, #8]
      break;
 810b986:	e04f      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b988:	687b      	ldr	r3, [r7, #4]
 810b98a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b98c:	683b      	ldr	r3, [r7, #0]
 810b98e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b990:	683b      	ldr	r3, [r7, #0]
 810b992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b994:	683b      	ldr	r3, [r7, #0]
 810b996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b998:	f000 f9a4 	bl	810bce4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810b99c:	687b      	ldr	r3, [r7, #4]
 810b99e:	681b      	ldr	r3, [r3, #0]
 810b9a0:	689a      	ldr	r2, [r3, #8]
 810b9a2:	687b      	ldr	r3, [r7, #4]
 810b9a4:	681b      	ldr	r3, [r3, #0]
 810b9a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810b9aa:	609a      	str	r2, [r3, #8]
      break;
 810b9ac:	e03c      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b9ae:	687b      	ldr	r3, [r7, #4]
 810b9b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b9b2:	683b      	ldr	r3, [r7, #0]
 810b9b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b9b6:	683b      	ldr	r3, [r7, #0]
 810b9b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b9ba:	461a      	mov	r2, r3
 810b9bc:	f000 f916 	bl	810bbec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	681b      	ldr	r3, [r3, #0]
 810b9c4:	2150      	movs	r1, #80	@ 0x50
 810b9c6:	4618      	mov	r0, r3
 810b9c8:	f000 f96f 	bl	810bcaa <TIM_ITRx_SetConfig>
      break;
 810b9cc:	e02c      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810b9ce:	687b      	ldr	r3, [r7, #4]
 810b9d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b9d2:	683b      	ldr	r3, [r7, #0]
 810b9d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b9d6:	683b      	ldr	r3, [r7, #0]
 810b9d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810b9da:	461a      	mov	r2, r3
 810b9dc:	f000 f935 	bl	810bc4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	681b      	ldr	r3, [r3, #0]
 810b9e4:	2160      	movs	r1, #96	@ 0x60
 810b9e6:	4618      	mov	r0, r3
 810b9e8:	f000 f95f 	bl	810bcaa <TIM_ITRx_SetConfig>
      break;
 810b9ec:	e01c      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b9ee:	687b      	ldr	r3, [r7, #4]
 810b9f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b9f2:	683b      	ldr	r3, [r7, #0]
 810b9f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b9f6:	683b      	ldr	r3, [r7, #0]
 810b9f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b9fa:	461a      	mov	r2, r3
 810b9fc:	f000 f8f6 	bl	810bbec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810ba00:	687b      	ldr	r3, [r7, #4]
 810ba02:	681b      	ldr	r3, [r3, #0]
 810ba04:	2140      	movs	r1, #64	@ 0x40
 810ba06:	4618      	mov	r0, r3
 810ba08:	f000 f94f 	bl	810bcaa <TIM_ITRx_SetConfig>
      break;
 810ba0c:	e00c      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810ba0e:	687b      	ldr	r3, [r7, #4]
 810ba10:	681a      	ldr	r2, [r3, #0]
 810ba12:	683b      	ldr	r3, [r7, #0]
 810ba14:	681b      	ldr	r3, [r3, #0]
 810ba16:	4619      	mov	r1, r3
 810ba18:	4610      	mov	r0, r2
 810ba1a:	f000 f946 	bl	810bcaa <TIM_ITRx_SetConfig>
      break;
 810ba1e:	e003      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810ba20:	2301      	movs	r3, #1
 810ba22:	73fb      	strb	r3, [r7, #15]
      break;
 810ba24:	e000      	b.n	810ba28 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810ba26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810ba28:	687b      	ldr	r3, [r7, #4]
 810ba2a:	2201      	movs	r2, #1
 810ba2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810ba30:	687b      	ldr	r3, [r7, #4]
 810ba32:	2200      	movs	r2, #0
 810ba34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810ba38:	7bfb      	ldrb	r3, [r7, #15]
}
 810ba3a:	4618      	mov	r0, r3
 810ba3c:	3710      	adds	r7, #16
 810ba3e:	46bd      	mov	sp, r7
 810ba40:	bd80      	pop	{r7, pc}
 810ba42:	bf00      	nop
 810ba44:	00100040 	.word	0x00100040
 810ba48:	00100030 	.word	0x00100030
 810ba4c:	00100020 	.word	0x00100020

0810ba50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810ba50:	b480      	push	{r7}
 810ba52:	b083      	sub	sp, #12
 810ba54:	af00      	add	r7, sp, #0
 810ba56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810ba58:	bf00      	nop
 810ba5a:	370c      	adds	r7, #12
 810ba5c:	46bd      	mov	sp, r7
 810ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba62:	4770      	bx	lr

0810ba64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810ba64:	b480      	push	{r7}
 810ba66:	b083      	sub	sp, #12
 810ba68:	af00      	add	r7, sp, #0
 810ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810ba6c:	bf00      	nop
 810ba6e:	370c      	adds	r7, #12
 810ba70:	46bd      	mov	sp, r7
 810ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba76:	4770      	bx	lr

0810ba78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810ba78:	b480      	push	{r7}
 810ba7a:	b083      	sub	sp, #12
 810ba7c:	af00      	add	r7, sp, #0
 810ba7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810ba80:	bf00      	nop
 810ba82:	370c      	adds	r7, #12
 810ba84:	46bd      	mov	sp, r7
 810ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba8a:	4770      	bx	lr

0810ba8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810ba8c:	b480      	push	{r7}
 810ba8e:	b083      	sub	sp, #12
 810ba90:	af00      	add	r7, sp, #0
 810ba92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810ba94:	bf00      	nop
 810ba96:	370c      	adds	r7, #12
 810ba98:	46bd      	mov	sp, r7
 810ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba9e:	4770      	bx	lr

0810baa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810baa0:	b480      	push	{r7}
 810baa2:	b085      	sub	sp, #20
 810baa4:	af00      	add	r7, sp, #0
 810baa6:	6078      	str	r0, [r7, #4]
 810baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810baaa:	687b      	ldr	r3, [r7, #4]
 810baac:	681b      	ldr	r3, [r3, #0]
 810baae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	4a46      	ldr	r2, [pc, #280]	@ (810bbcc <TIM_Base_SetConfig+0x12c>)
 810bab4:	4293      	cmp	r3, r2
 810bab6:	d013      	beq.n	810bae0 <TIM_Base_SetConfig+0x40>
 810bab8:	687b      	ldr	r3, [r7, #4]
 810baba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810babe:	d00f      	beq.n	810bae0 <TIM_Base_SetConfig+0x40>
 810bac0:	687b      	ldr	r3, [r7, #4]
 810bac2:	4a43      	ldr	r2, [pc, #268]	@ (810bbd0 <TIM_Base_SetConfig+0x130>)
 810bac4:	4293      	cmp	r3, r2
 810bac6:	d00b      	beq.n	810bae0 <TIM_Base_SetConfig+0x40>
 810bac8:	687b      	ldr	r3, [r7, #4]
 810baca:	4a42      	ldr	r2, [pc, #264]	@ (810bbd4 <TIM_Base_SetConfig+0x134>)
 810bacc:	4293      	cmp	r3, r2
 810bace:	d007      	beq.n	810bae0 <TIM_Base_SetConfig+0x40>
 810bad0:	687b      	ldr	r3, [r7, #4]
 810bad2:	4a41      	ldr	r2, [pc, #260]	@ (810bbd8 <TIM_Base_SetConfig+0x138>)
 810bad4:	4293      	cmp	r3, r2
 810bad6:	d003      	beq.n	810bae0 <TIM_Base_SetConfig+0x40>
 810bad8:	687b      	ldr	r3, [r7, #4]
 810bada:	4a40      	ldr	r2, [pc, #256]	@ (810bbdc <TIM_Base_SetConfig+0x13c>)
 810badc:	4293      	cmp	r3, r2
 810bade:	d108      	bne.n	810baf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810bae0:	68fb      	ldr	r3, [r7, #12]
 810bae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810bae8:	683b      	ldr	r3, [r7, #0]
 810baea:	685b      	ldr	r3, [r3, #4]
 810baec:	68fa      	ldr	r2, [r7, #12]
 810baee:	4313      	orrs	r3, r2
 810baf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810baf2:	687b      	ldr	r3, [r7, #4]
 810baf4:	4a35      	ldr	r2, [pc, #212]	@ (810bbcc <TIM_Base_SetConfig+0x12c>)
 810baf6:	4293      	cmp	r3, r2
 810baf8:	d01f      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bafa:	687b      	ldr	r3, [r7, #4]
 810bafc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bb00:	d01b      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb02:	687b      	ldr	r3, [r7, #4]
 810bb04:	4a32      	ldr	r2, [pc, #200]	@ (810bbd0 <TIM_Base_SetConfig+0x130>)
 810bb06:	4293      	cmp	r3, r2
 810bb08:	d017      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb0a:	687b      	ldr	r3, [r7, #4]
 810bb0c:	4a31      	ldr	r2, [pc, #196]	@ (810bbd4 <TIM_Base_SetConfig+0x134>)
 810bb0e:	4293      	cmp	r3, r2
 810bb10:	d013      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb12:	687b      	ldr	r3, [r7, #4]
 810bb14:	4a30      	ldr	r2, [pc, #192]	@ (810bbd8 <TIM_Base_SetConfig+0x138>)
 810bb16:	4293      	cmp	r3, r2
 810bb18:	d00f      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb1a:	687b      	ldr	r3, [r7, #4]
 810bb1c:	4a2f      	ldr	r2, [pc, #188]	@ (810bbdc <TIM_Base_SetConfig+0x13c>)
 810bb1e:	4293      	cmp	r3, r2
 810bb20:	d00b      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb22:	687b      	ldr	r3, [r7, #4]
 810bb24:	4a2e      	ldr	r2, [pc, #184]	@ (810bbe0 <TIM_Base_SetConfig+0x140>)
 810bb26:	4293      	cmp	r3, r2
 810bb28:	d007      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb2a:	687b      	ldr	r3, [r7, #4]
 810bb2c:	4a2d      	ldr	r2, [pc, #180]	@ (810bbe4 <TIM_Base_SetConfig+0x144>)
 810bb2e:	4293      	cmp	r3, r2
 810bb30:	d003      	beq.n	810bb3a <TIM_Base_SetConfig+0x9a>
 810bb32:	687b      	ldr	r3, [r7, #4]
 810bb34:	4a2c      	ldr	r2, [pc, #176]	@ (810bbe8 <TIM_Base_SetConfig+0x148>)
 810bb36:	4293      	cmp	r3, r2
 810bb38:	d108      	bne.n	810bb4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810bb3a:	68fb      	ldr	r3, [r7, #12]
 810bb3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810bb40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810bb42:	683b      	ldr	r3, [r7, #0]
 810bb44:	68db      	ldr	r3, [r3, #12]
 810bb46:	68fa      	ldr	r2, [r7, #12]
 810bb48:	4313      	orrs	r3, r2
 810bb4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810bb4c:	68fb      	ldr	r3, [r7, #12]
 810bb4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810bb52:	683b      	ldr	r3, [r7, #0]
 810bb54:	695b      	ldr	r3, [r3, #20]
 810bb56:	4313      	orrs	r3, r2
 810bb58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810bb5a:	687b      	ldr	r3, [r7, #4]
 810bb5c:	68fa      	ldr	r2, [r7, #12]
 810bb5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810bb60:	683b      	ldr	r3, [r7, #0]
 810bb62:	689a      	ldr	r2, [r3, #8]
 810bb64:	687b      	ldr	r3, [r7, #4]
 810bb66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810bb68:	683b      	ldr	r3, [r7, #0]
 810bb6a:	681a      	ldr	r2, [r3, #0]
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810bb70:	687b      	ldr	r3, [r7, #4]
 810bb72:	4a16      	ldr	r2, [pc, #88]	@ (810bbcc <TIM_Base_SetConfig+0x12c>)
 810bb74:	4293      	cmp	r3, r2
 810bb76:	d00f      	beq.n	810bb98 <TIM_Base_SetConfig+0xf8>
 810bb78:	687b      	ldr	r3, [r7, #4]
 810bb7a:	4a18      	ldr	r2, [pc, #96]	@ (810bbdc <TIM_Base_SetConfig+0x13c>)
 810bb7c:	4293      	cmp	r3, r2
 810bb7e:	d00b      	beq.n	810bb98 <TIM_Base_SetConfig+0xf8>
 810bb80:	687b      	ldr	r3, [r7, #4]
 810bb82:	4a17      	ldr	r2, [pc, #92]	@ (810bbe0 <TIM_Base_SetConfig+0x140>)
 810bb84:	4293      	cmp	r3, r2
 810bb86:	d007      	beq.n	810bb98 <TIM_Base_SetConfig+0xf8>
 810bb88:	687b      	ldr	r3, [r7, #4]
 810bb8a:	4a16      	ldr	r2, [pc, #88]	@ (810bbe4 <TIM_Base_SetConfig+0x144>)
 810bb8c:	4293      	cmp	r3, r2
 810bb8e:	d003      	beq.n	810bb98 <TIM_Base_SetConfig+0xf8>
 810bb90:	687b      	ldr	r3, [r7, #4]
 810bb92:	4a15      	ldr	r2, [pc, #84]	@ (810bbe8 <TIM_Base_SetConfig+0x148>)
 810bb94:	4293      	cmp	r3, r2
 810bb96:	d103      	bne.n	810bba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810bb98:	683b      	ldr	r3, [r7, #0]
 810bb9a:	691a      	ldr	r2, [r3, #16]
 810bb9c:	687b      	ldr	r3, [r7, #4]
 810bb9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810bba0:	687b      	ldr	r3, [r7, #4]
 810bba2:	2201      	movs	r2, #1
 810bba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810bba6:	687b      	ldr	r3, [r7, #4]
 810bba8:	691b      	ldr	r3, [r3, #16]
 810bbaa:	f003 0301 	and.w	r3, r3, #1
 810bbae:	2b01      	cmp	r3, #1
 810bbb0:	d105      	bne.n	810bbbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810bbb2:	687b      	ldr	r3, [r7, #4]
 810bbb4:	691b      	ldr	r3, [r3, #16]
 810bbb6:	f023 0201 	bic.w	r2, r3, #1
 810bbba:	687b      	ldr	r3, [r7, #4]
 810bbbc:	611a      	str	r2, [r3, #16]
  }
}
 810bbbe:	bf00      	nop
 810bbc0:	3714      	adds	r7, #20
 810bbc2:	46bd      	mov	sp, r7
 810bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbc8:	4770      	bx	lr
 810bbca:	bf00      	nop
 810bbcc:	40010000 	.word	0x40010000
 810bbd0:	40000400 	.word	0x40000400
 810bbd4:	40000800 	.word	0x40000800
 810bbd8:	40000c00 	.word	0x40000c00
 810bbdc:	40010400 	.word	0x40010400
 810bbe0:	40014000 	.word	0x40014000
 810bbe4:	40014400 	.word	0x40014400
 810bbe8:	40014800 	.word	0x40014800

0810bbec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810bbec:	b480      	push	{r7}
 810bbee:	b087      	sub	sp, #28
 810bbf0:	af00      	add	r7, sp, #0
 810bbf2:	60f8      	str	r0, [r7, #12]
 810bbf4:	60b9      	str	r1, [r7, #8]
 810bbf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810bbf8:	68fb      	ldr	r3, [r7, #12]
 810bbfa:	6a1b      	ldr	r3, [r3, #32]
 810bbfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810bbfe:	68fb      	ldr	r3, [r7, #12]
 810bc00:	6a1b      	ldr	r3, [r3, #32]
 810bc02:	f023 0201 	bic.w	r2, r3, #1
 810bc06:	68fb      	ldr	r3, [r7, #12]
 810bc08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810bc0a:	68fb      	ldr	r3, [r7, #12]
 810bc0c:	699b      	ldr	r3, [r3, #24]
 810bc0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810bc10:	693b      	ldr	r3, [r7, #16]
 810bc12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810bc16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810bc18:	687b      	ldr	r3, [r7, #4]
 810bc1a:	011b      	lsls	r3, r3, #4
 810bc1c:	693a      	ldr	r2, [r7, #16]
 810bc1e:	4313      	orrs	r3, r2
 810bc20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810bc22:	697b      	ldr	r3, [r7, #20]
 810bc24:	f023 030a 	bic.w	r3, r3, #10
 810bc28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810bc2a:	697a      	ldr	r2, [r7, #20]
 810bc2c:	68bb      	ldr	r3, [r7, #8]
 810bc2e:	4313      	orrs	r3, r2
 810bc30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810bc32:	68fb      	ldr	r3, [r7, #12]
 810bc34:	693a      	ldr	r2, [r7, #16]
 810bc36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810bc38:	68fb      	ldr	r3, [r7, #12]
 810bc3a:	697a      	ldr	r2, [r7, #20]
 810bc3c:	621a      	str	r2, [r3, #32]
}
 810bc3e:	bf00      	nop
 810bc40:	371c      	adds	r7, #28
 810bc42:	46bd      	mov	sp, r7
 810bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc48:	4770      	bx	lr

0810bc4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810bc4a:	b480      	push	{r7}
 810bc4c:	b087      	sub	sp, #28
 810bc4e:	af00      	add	r7, sp, #0
 810bc50:	60f8      	str	r0, [r7, #12]
 810bc52:	60b9      	str	r1, [r7, #8]
 810bc54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810bc56:	68fb      	ldr	r3, [r7, #12]
 810bc58:	6a1b      	ldr	r3, [r3, #32]
 810bc5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810bc5c:	68fb      	ldr	r3, [r7, #12]
 810bc5e:	6a1b      	ldr	r3, [r3, #32]
 810bc60:	f023 0210 	bic.w	r2, r3, #16
 810bc64:	68fb      	ldr	r3, [r7, #12]
 810bc66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810bc68:	68fb      	ldr	r3, [r7, #12]
 810bc6a:	699b      	ldr	r3, [r3, #24]
 810bc6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810bc6e:	693b      	ldr	r3, [r7, #16]
 810bc70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810bc74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	031b      	lsls	r3, r3, #12
 810bc7a:	693a      	ldr	r2, [r7, #16]
 810bc7c:	4313      	orrs	r3, r2
 810bc7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810bc80:	697b      	ldr	r3, [r7, #20]
 810bc82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810bc86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810bc88:	68bb      	ldr	r3, [r7, #8]
 810bc8a:	011b      	lsls	r3, r3, #4
 810bc8c:	697a      	ldr	r2, [r7, #20]
 810bc8e:	4313      	orrs	r3, r2
 810bc90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810bc92:	68fb      	ldr	r3, [r7, #12]
 810bc94:	693a      	ldr	r2, [r7, #16]
 810bc96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810bc98:	68fb      	ldr	r3, [r7, #12]
 810bc9a:	697a      	ldr	r2, [r7, #20]
 810bc9c:	621a      	str	r2, [r3, #32]
}
 810bc9e:	bf00      	nop
 810bca0:	371c      	adds	r7, #28
 810bca2:	46bd      	mov	sp, r7
 810bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bca8:	4770      	bx	lr

0810bcaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810bcaa:	b480      	push	{r7}
 810bcac:	b085      	sub	sp, #20
 810bcae:	af00      	add	r7, sp, #0
 810bcb0:	6078      	str	r0, [r7, #4]
 810bcb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810bcb4:	687b      	ldr	r3, [r7, #4]
 810bcb6:	689b      	ldr	r3, [r3, #8]
 810bcb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810bcba:	68fb      	ldr	r3, [r7, #12]
 810bcbc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810bcc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bcc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810bcc6:	683a      	ldr	r2, [r7, #0]
 810bcc8:	68fb      	ldr	r3, [r7, #12]
 810bcca:	4313      	orrs	r3, r2
 810bccc:	f043 0307 	orr.w	r3, r3, #7
 810bcd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810bcd2:	687b      	ldr	r3, [r7, #4]
 810bcd4:	68fa      	ldr	r2, [r7, #12]
 810bcd6:	609a      	str	r2, [r3, #8]
}
 810bcd8:	bf00      	nop
 810bcda:	3714      	adds	r7, #20
 810bcdc:	46bd      	mov	sp, r7
 810bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bce2:	4770      	bx	lr

0810bce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810bce4:	b480      	push	{r7}
 810bce6:	b087      	sub	sp, #28
 810bce8:	af00      	add	r7, sp, #0
 810bcea:	60f8      	str	r0, [r7, #12]
 810bcec:	60b9      	str	r1, [r7, #8]
 810bcee:	607a      	str	r2, [r7, #4]
 810bcf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810bcf2:	68fb      	ldr	r3, [r7, #12]
 810bcf4:	689b      	ldr	r3, [r3, #8]
 810bcf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810bcf8:	697b      	ldr	r3, [r7, #20]
 810bcfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810bcfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810bd00:	683b      	ldr	r3, [r7, #0]
 810bd02:	021a      	lsls	r2, r3, #8
 810bd04:	687b      	ldr	r3, [r7, #4]
 810bd06:	431a      	orrs	r2, r3
 810bd08:	68bb      	ldr	r3, [r7, #8]
 810bd0a:	4313      	orrs	r3, r2
 810bd0c:	697a      	ldr	r2, [r7, #20]
 810bd0e:	4313      	orrs	r3, r2
 810bd10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810bd12:	68fb      	ldr	r3, [r7, #12]
 810bd14:	697a      	ldr	r2, [r7, #20]
 810bd16:	609a      	str	r2, [r3, #8]
}
 810bd18:	bf00      	nop
 810bd1a:	371c      	adds	r7, #28
 810bd1c:	46bd      	mov	sp, r7
 810bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd22:	4770      	bx	lr

0810bd24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810bd24:	b480      	push	{r7}
 810bd26:	b085      	sub	sp, #20
 810bd28:	af00      	add	r7, sp, #0
 810bd2a:	6078      	str	r0, [r7, #4]
 810bd2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810bd2e:	687b      	ldr	r3, [r7, #4]
 810bd30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810bd34:	2b01      	cmp	r3, #1
 810bd36:	d101      	bne.n	810bd3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810bd38:	2302      	movs	r3, #2
 810bd3a:	e06d      	b.n	810be18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810bd3c:	687b      	ldr	r3, [r7, #4]
 810bd3e:	2201      	movs	r2, #1
 810bd40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bd44:	687b      	ldr	r3, [r7, #4]
 810bd46:	2202      	movs	r2, #2
 810bd48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810bd4c:	687b      	ldr	r3, [r7, #4]
 810bd4e:	681b      	ldr	r3, [r3, #0]
 810bd50:	685b      	ldr	r3, [r3, #4]
 810bd52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810bd54:	687b      	ldr	r3, [r7, #4]
 810bd56:	681b      	ldr	r3, [r3, #0]
 810bd58:	689b      	ldr	r3, [r3, #8]
 810bd5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810bd5c:	687b      	ldr	r3, [r7, #4]
 810bd5e:	681b      	ldr	r3, [r3, #0]
 810bd60:	4a30      	ldr	r2, [pc, #192]	@ (810be24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bd62:	4293      	cmp	r3, r2
 810bd64:	d004      	beq.n	810bd70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810bd66:	687b      	ldr	r3, [r7, #4]
 810bd68:	681b      	ldr	r3, [r3, #0]
 810bd6a:	4a2f      	ldr	r2, [pc, #188]	@ (810be28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810bd6c:	4293      	cmp	r3, r2
 810bd6e:	d108      	bne.n	810bd82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810bd70:	68fb      	ldr	r3, [r7, #12]
 810bd72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810bd76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810bd78:	683b      	ldr	r3, [r7, #0]
 810bd7a:	685b      	ldr	r3, [r3, #4]
 810bd7c:	68fa      	ldr	r2, [r7, #12]
 810bd7e:	4313      	orrs	r3, r2
 810bd80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810bd82:	68fb      	ldr	r3, [r7, #12]
 810bd84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bd88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810bd8a:	683b      	ldr	r3, [r7, #0]
 810bd8c:	681b      	ldr	r3, [r3, #0]
 810bd8e:	68fa      	ldr	r2, [r7, #12]
 810bd90:	4313      	orrs	r3, r2
 810bd92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	681b      	ldr	r3, [r3, #0]
 810bd98:	68fa      	ldr	r2, [r7, #12]
 810bd9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810bd9c:	687b      	ldr	r3, [r7, #4]
 810bd9e:	681b      	ldr	r3, [r3, #0]
 810bda0:	4a20      	ldr	r2, [pc, #128]	@ (810be24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bda2:	4293      	cmp	r3, r2
 810bda4:	d022      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bda6:	687b      	ldr	r3, [r7, #4]
 810bda8:	681b      	ldr	r3, [r3, #0]
 810bdaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bdae:	d01d      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bdb0:	687b      	ldr	r3, [r7, #4]
 810bdb2:	681b      	ldr	r3, [r3, #0]
 810bdb4:	4a1d      	ldr	r2, [pc, #116]	@ (810be2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810bdb6:	4293      	cmp	r3, r2
 810bdb8:	d018      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bdba:	687b      	ldr	r3, [r7, #4]
 810bdbc:	681b      	ldr	r3, [r3, #0]
 810bdbe:	4a1c      	ldr	r2, [pc, #112]	@ (810be30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810bdc0:	4293      	cmp	r3, r2
 810bdc2:	d013      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bdc4:	687b      	ldr	r3, [r7, #4]
 810bdc6:	681b      	ldr	r3, [r3, #0]
 810bdc8:	4a1a      	ldr	r2, [pc, #104]	@ (810be34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810bdca:	4293      	cmp	r3, r2
 810bdcc:	d00e      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bdce:	687b      	ldr	r3, [r7, #4]
 810bdd0:	681b      	ldr	r3, [r3, #0]
 810bdd2:	4a15      	ldr	r2, [pc, #84]	@ (810be28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810bdd4:	4293      	cmp	r3, r2
 810bdd6:	d009      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bdd8:	687b      	ldr	r3, [r7, #4]
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	4a16      	ldr	r2, [pc, #88]	@ (810be38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810bdde:	4293      	cmp	r3, r2
 810bde0:	d004      	beq.n	810bdec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	681b      	ldr	r3, [r3, #0]
 810bde6:	4a15      	ldr	r2, [pc, #84]	@ (810be3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810bde8:	4293      	cmp	r3, r2
 810bdea:	d10c      	bne.n	810be06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810bdec:	68bb      	ldr	r3, [r7, #8]
 810bdee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810bdf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810bdf4:	683b      	ldr	r3, [r7, #0]
 810bdf6:	689b      	ldr	r3, [r3, #8]
 810bdf8:	68ba      	ldr	r2, [r7, #8]
 810bdfa:	4313      	orrs	r3, r2
 810bdfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810bdfe:	687b      	ldr	r3, [r7, #4]
 810be00:	681b      	ldr	r3, [r3, #0]
 810be02:	68ba      	ldr	r2, [r7, #8]
 810be04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810be06:	687b      	ldr	r3, [r7, #4]
 810be08:	2201      	movs	r2, #1
 810be0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	2200      	movs	r2, #0
 810be12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810be16:	2300      	movs	r3, #0
}
 810be18:	4618      	mov	r0, r3
 810be1a:	3714      	adds	r7, #20
 810be1c:	46bd      	mov	sp, r7
 810be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be22:	4770      	bx	lr
 810be24:	40010000 	.word	0x40010000
 810be28:	40010400 	.word	0x40010400
 810be2c:	40000400 	.word	0x40000400
 810be30:	40000800 	.word	0x40000800
 810be34:	40000c00 	.word	0x40000c00
 810be38:	40001800 	.word	0x40001800
 810be3c:	40014000 	.word	0x40014000

0810be40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810be40:	b480      	push	{r7}
 810be42:	b083      	sub	sp, #12
 810be44:	af00      	add	r7, sp, #0
 810be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810be48:	bf00      	nop
 810be4a:	370c      	adds	r7, #12
 810be4c:	46bd      	mov	sp, r7
 810be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be52:	4770      	bx	lr

0810be54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810be54:	b480      	push	{r7}
 810be56:	b083      	sub	sp, #12
 810be58:	af00      	add	r7, sp, #0
 810be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810be5c:	bf00      	nop
 810be5e:	370c      	adds	r7, #12
 810be60:	46bd      	mov	sp, r7
 810be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be66:	4770      	bx	lr

0810be68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810be68:	b480      	push	{r7}
 810be6a:	b083      	sub	sp, #12
 810be6c:	af00      	add	r7, sp, #0
 810be6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810be70:	bf00      	nop
 810be72:	370c      	adds	r7, #12
 810be74:	46bd      	mov	sp, r7
 810be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be7a:	4770      	bx	lr

0810be7c <memset>:
 810be7c:	4402      	add	r2, r0
 810be7e:	4603      	mov	r3, r0
 810be80:	4293      	cmp	r3, r2
 810be82:	d100      	bne.n	810be86 <memset+0xa>
 810be84:	4770      	bx	lr
 810be86:	f803 1b01 	strb.w	r1, [r3], #1
 810be8a:	e7f9      	b.n	810be80 <memset+0x4>

0810be8c <__errno>:
 810be8c:	4b01      	ldr	r3, [pc, #4]	@ (810be94 <__errno+0x8>)
 810be8e:	6818      	ldr	r0, [r3, #0]
 810be90:	4770      	bx	lr
 810be92:	bf00      	nop
 810be94:	10000030 	.word	0x10000030

0810be98 <__libc_init_array>:
 810be98:	b570      	push	{r4, r5, r6, lr}
 810be9a:	4d0d      	ldr	r5, [pc, #52]	@ (810bed0 <__libc_init_array+0x38>)
 810be9c:	4c0d      	ldr	r4, [pc, #52]	@ (810bed4 <__libc_init_array+0x3c>)
 810be9e:	1b64      	subs	r4, r4, r5
 810bea0:	10a4      	asrs	r4, r4, #2
 810bea2:	2600      	movs	r6, #0
 810bea4:	42a6      	cmp	r6, r4
 810bea6:	d109      	bne.n	810bebc <__libc_init_array+0x24>
 810bea8:	4d0b      	ldr	r5, [pc, #44]	@ (810bed8 <__libc_init_array+0x40>)
 810beaa:	4c0c      	ldr	r4, [pc, #48]	@ (810bedc <__libc_init_array+0x44>)
 810beac:	f001 f994 	bl	810d1d8 <_init>
 810beb0:	1b64      	subs	r4, r4, r5
 810beb2:	10a4      	asrs	r4, r4, #2
 810beb4:	2600      	movs	r6, #0
 810beb6:	42a6      	cmp	r6, r4
 810beb8:	d105      	bne.n	810bec6 <__libc_init_array+0x2e>
 810beba:	bd70      	pop	{r4, r5, r6, pc}
 810bebc:	f855 3b04 	ldr.w	r3, [r5], #4
 810bec0:	4798      	blx	r3
 810bec2:	3601      	adds	r6, #1
 810bec4:	e7ee      	b.n	810bea4 <__libc_init_array+0xc>
 810bec6:	f855 3b04 	ldr.w	r3, [r5], #4
 810beca:	4798      	blx	r3
 810becc:	3601      	adds	r6, #1
 810bece:	e7f2      	b.n	810beb6 <__libc_init_array+0x1e>
 810bed0:	0810d298 	.word	0x0810d298
 810bed4:	0810d298 	.word	0x0810d298
 810bed8:	0810d298 	.word	0x0810d298
 810bedc:	0810d29c 	.word	0x0810d29c

0810bee0 <asin>:
 810bee0:	b538      	push	{r3, r4, r5, lr}
 810bee2:	ed2d 8b02 	vpush	{d8}
 810bee6:	ec55 4b10 	vmov	r4, r5, d0
 810beea:	f000 f9a9 	bl	810c240 <__ieee754_asin>
 810beee:	4622      	mov	r2, r4
 810bef0:	462b      	mov	r3, r5
 810bef2:	4620      	mov	r0, r4
 810bef4:	4629      	mov	r1, r5
 810bef6:	eeb0 8a40 	vmov.f32	s16, s0
 810befa:	eef0 8a60 	vmov.f32	s17, s1
 810befe:	f7f4 fe41 	bl	8100b84 <__aeabi_dcmpun>
 810bf02:	b9a8      	cbnz	r0, 810bf30 <asin+0x50>
 810bf04:	ec45 4b10 	vmov	d0, r4, r5
 810bf08:	f000 f84c 	bl	810bfa4 <fabs>
 810bf0c:	4b0c      	ldr	r3, [pc, #48]	@ (810bf40 <asin+0x60>)
 810bf0e:	ec51 0b10 	vmov	r0, r1, d0
 810bf12:	2200      	movs	r2, #0
 810bf14:	f7f4 fe2c 	bl	8100b70 <__aeabi_dcmpgt>
 810bf18:	b150      	cbz	r0, 810bf30 <asin+0x50>
 810bf1a:	f7ff ffb7 	bl	810be8c <__errno>
 810bf1e:	ecbd 8b02 	vpop	{d8}
 810bf22:	2321      	movs	r3, #33	@ 0x21
 810bf24:	6003      	str	r3, [r0, #0]
 810bf26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810bf2a:	4806      	ldr	r0, [pc, #24]	@ (810bf44 <asin+0x64>)
 810bf2c:	f000 b89c 	b.w	810c068 <nan>
 810bf30:	eeb0 0a48 	vmov.f32	s0, s16
 810bf34:	eef0 0a68 	vmov.f32	s1, s17
 810bf38:	ecbd 8b02 	vpop	{d8}
 810bf3c:	bd38      	pop	{r3, r4, r5, pc}
 810bf3e:	bf00      	nop
 810bf40:	3ff00000 	.word	0x3ff00000
 810bf44:	0810d208 	.word	0x0810d208

0810bf48 <atan2>:
 810bf48:	f000 bb7e 	b.w	810c648 <__ieee754_atan2>

0810bf4c <sqrt>:
 810bf4c:	b538      	push	{r3, r4, r5, lr}
 810bf4e:	ed2d 8b02 	vpush	{d8}
 810bf52:	ec55 4b10 	vmov	r4, r5, d0
 810bf56:	f000 f899 	bl	810c08c <__ieee754_sqrt>
 810bf5a:	4622      	mov	r2, r4
 810bf5c:	462b      	mov	r3, r5
 810bf5e:	4620      	mov	r0, r4
 810bf60:	4629      	mov	r1, r5
 810bf62:	eeb0 8a40 	vmov.f32	s16, s0
 810bf66:	eef0 8a60 	vmov.f32	s17, s1
 810bf6a:	f7f4 fe0b 	bl	8100b84 <__aeabi_dcmpun>
 810bf6e:	b990      	cbnz	r0, 810bf96 <sqrt+0x4a>
 810bf70:	2200      	movs	r2, #0
 810bf72:	2300      	movs	r3, #0
 810bf74:	4620      	mov	r0, r4
 810bf76:	4629      	mov	r1, r5
 810bf78:	f7f4 fddc 	bl	8100b34 <__aeabi_dcmplt>
 810bf7c:	b158      	cbz	r0, 810bf96 <sqrt+0x4a>
 810bf7e:	f7ff ff85 	bl	810be8c <__errno>
 810bf82:	2321      	movs	r3, #33	@ 0x21
 810bf84:	6003      	str	r3, [r0, #0]
 810bf86:	2200      	movs	r2, #0
 810bf88:	2300      	movs	r3, #0
 810bf8a:	4610      	mov	r0, r2
 810bf8c:	4619      	mov	r1, r3
 810bf8e:	f7f4 fc89 	bl	81008a4 <__aeabi_ddiv>
 810bf92:	ec41 0b18 	vmov	d8, r0, r1
 810bf96:	eeb0 0a48 	vmov.f32	s0, s16
 810bf9a:	eef0 0a68 	vmov.f32	s1, s17
 810bf9e:	ecbd 8b02 	vpop	{d8}
 810bfa2:	bd38      	pop	{r3, r4, r5, pc}

0810bfa4 <fabs>:
 810bfa4:	ec51 0b10 	vmov	r0, r1, d0
 810bfa8:	4602      	mov	r2, r0
 810bfaa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 810bfae:	ec43 2b10 	vmov	d0, r2, r3
 810bfb2:	4770      	bx	lr

0810bfb4 <powf>:
 810bfb4:	b508      	push	{r3, lr}
 810bfb6:	ed2d 8b04 	vpush	{d8-d9}
 810bfba:	eeb0 8a60 	vmov.f32	s16, s1
 810bfbe:	eeb0 9a40 	vmov.f32	s18, s0
 810bfc2:	f000 fda1 	bl	810cb08 <__ieee754_powf>
 810bfc6:	eeb4 8a48 	vcmp.f32	s16, s16
 810bfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfce:	eef0 8a40 	vmov.f32	s17, s0
 810bfd2:	d63e      	bvs.n	810c052 <powf+0x9e>
 810bfd4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 810bfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfdc:	d112      	bne.n	810c004 <powf+0x50>
 810bfde:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfe6:	d039      	beq.n	810c05c <powf+0xa8>
 810bfe8:	eeb0 0a48 	vmov.f32	s0, s16
 810bfec:	f000 f844 	bl	810c078 <finitef>
 810bff0:	b378      	cbz	r0, 810c052 <powf+0x9e>
 810bff2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810bff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bffa:	d52a      	bpl.n	810c052 <powf+0x9e>
 810bffc:	f7ff ff46 	bl	810be8c <__errno>
 810c000:	2322      	movs	r3, #34	@ 0x22
 810c002:	e014      	b.n	810c02e <powf+0x7a>
 810c004:	f000 f838 	bl	810c078 <finitef>
 810c008:	b998      	cbnz	r0, 810c032 <powf+0x7e>
 810c00a:	eeb0 0a49 	vmov.f32	s0, s18
 810c00e:	f000 f833 	bl	810c078 <finitef>
 810c012:	b170      	cbz	r0, 810c032 <powf+0x7e>
 810c014:	eeb0 0a48 	vmov.f32	s0, s16
 810c018:	f000 f82e 	bl	810c078 <finitef>
 810c01c:	b148      	cbz	r0, 810c032 <powf+0x7e>
 810c01e:	eef4 8a68 	vcmp.f32	s17, s17
 810c022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c026:	d7e9      	bvc.n	810bffc <powf+0x48>
 810c028:	f7ff ff30 	bl	810be8c <__errno>
 810c02c:	2321      	movs	r3, #33	@ 0x21
 810c02e:	6003      	str	r3, [r0, #0]
 810c030:	e00f      	b.n	810c052 <powf+0x9e>
 810c032:	eef5 8a40 	vcmp.f32	s17, #0.0
 810c036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c03a:	d10a      	bne.n	810c052 <powf+0x9e>
 810c03c:	eeb0 0a49 	vmov.f32	s0, s18
 810c040:	f000 f81a 	bl	810c078 <finitef>
 810c044:	b128      	cbz	r0, 810c052 <powf+0x9e>
 810c046:	eeb0 0a48 	vmov.f32	s0, s16
 810c04a:	f000 f815 	bl	810c078 <finitef>
 810c04e:	2800      	cmp	r0, #0
 810c050:	d1d4      	bne.n	810bffc <powf+0x48>
 810c052:	eeb0 0a68 	vmov.f32	s0, s17
 810c056:	ecbd 8b04 	vpop	{d8-d9}
 810c05a:	bd08      	pop	{r3, pc}
 810c05c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 810c060:	e7f7      	b.n	810c052 <powf+0x9e>
 810c062:	0000      	movs	r0, r0
 810c064:	0000      	movs	r0, r0
	...

0810c068 <nan>:
 810c068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810c070 <nan+0x8>
 810c06c:	4770      	bx	lr
 810c06e:	bf00      	nop
 810c070:	00000000 	.word	0x00000000
 810c074:	7ff80000 	.word	0x7ff80000

0810c078 <finitef>:
 810c078:	ee10 3a10 	vmov	r3, s0
 810c07c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 810c080:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 810c084:	bfac      	ite	ge
 810c086:	2000      	movge	r0, #0
 810c088:	2001      	movlt	r0, #1
 810c08a:	4770      	bx	lr

0810c08c <__ieee754_sqrt>:
 810c08c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c090:	4a68      	ldr	r2, [pc, #416]	@ (810c234 <__ieee754_sqrt+0x1a8>)
 810c092:	ec55 4b10 	vmov	r4, r5, d0
 810c096:	43aa      	bics	r2, r5
 810c098:	462b      	mov	r3, r5
 810c09a:	4621      	mov	r1, r4
 810c09c:	d110      	bne.n	810c0c0 <__ieee754_sqrt+0x34>
 810c09e:	4622      	mov	r2, r4
 810c0a0:	4620      	mov	r0, r4
 810c0a2:	4629      	mov	r1, r5
 810c0a4:	f7f4 fad4 	bl	8100650 <__aeabi_dmul>
 810c0a8:	4602      	mov	r2, r0
 810c0aa:	460b      	mov	r3, r1
 810c0ac:	4620      	mov	r0, r4
 810c0ae:	4629      	mov	r1, r5
 810c0b0:	f7f4 f918 	bl	81002e4 <__adddf3>
 810c0b4:	4604      	mov	r4, r0
 810c0b6:	460d      	mov	r5, r1
 810c0b8:	ec45 4b10 	vmov	d0, r4, r5
 810c0bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c0c0:	2d00      	cmp	r5, #0
 810c0c2:	dc0e      	bgt.n	810c0e2 <__ieee754_sqrt+0x56>
 810c0c4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 810c0c8:	4322      	orrs	r2, r4
 810c0ca:	d0f5      	beq.n	810c0b8 <__ieee754_sqrt+0x2c>
 810c0cc:	b19d      	cbz	r5, 810c0f6 <__ieee754_sqrt+0x6a>
 810c0ce:	4622      	mov	r2, r4
 810c0d0:	4620      	mov	r0, r4
 810c0d2:	4629      	mov	r1, r5
 810c0d4:	f7f4 f904 	bl	81002e0 <__aeabi_dsub>
 810c0d8:	4602      	mov	r2, r0
 810c0da:	460b      	mov	r3, r1
 810c0dc:	f7f4 fbe2 	bl	81008a4 <__aeabi_ddiv>
 810c0e0:	e7e8      	b.n	810c0b4 <__ieee754_sqrt+0x28>
 810c0e2:	152a      	asrs	r2, r5, #20
 810c0e4:	d115      	bne.n	810c112 <__ieee754_sqrt+0x86>
 810c0e6:	2000      	movs	r0, #0
 810c0e8:	e009      	b.n	810c0fe <__ieee754_sqrt+0x72>
 810c0ea:	0acb      	lsrs	r3, r1, #11
 810c0ec:	3a15      	subs	r2, #21
 810c0ee:	0549      	lsls	r1, r1, #21
 810c0f0:	2b00      	cmp	r3, #0
 810c0f2:	d0fa      	beq.n	810c0ea <__ieee754_sqrt+0x5e>
 810c0f4:	e7f7      	b.n	810c0e6 <__ieee754_sqrt+0x5a>
 810c0f6:	462a      	mov	r2, r5
 810c0f8:	e7fa      	b.n	810c0f0 <__ieee754_sqrt+0x64>
 810c0fa:	005b      	lsls	r3, r3, #1
 810c0fc:	3001      	adds	r0, #1
 810c0fe:	02dc      	lsls	r4, r3, #11
 810c100:	d5fb      	bpl.n	810c0fa <__ieee754_sqrt+0x6e>
 810c102:	1e44      	subs	r4, r0, #1
 810c104:	1b12      	subs	r2, r2, r4
 810c106:	f1c0 0420 	rsb	r4, r0, #32
 810c10a:	fa21 f404 	lsr.w	r4, r1, r4
 810c10e:	4323      	orrs	r3, r4
 810c110:	4081      	lsls	r1, r0
 810c112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810c116:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 810c11a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810c11e:	07d2      	lsls	r2, r2, #31
 810c120:	bf5c      	itt	pl
 810c122:	005b      	lslpl	r3, r3, #1
 810c124:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 810c128:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810c12c:	bf58      	it	pl
 810c12e:	0049      	lslpl	r1, r1, #1
 810c130:	2600      	movs	r6, #0
 810c132:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 810c136:	106d      	asrs	r5, r5, #1
 810c138:	0049      	lsls	r1, r1, #1
 810c13a:	2016      	movs	r0, #22
 810c13c:	4632      	mov	r2, r6
 810c13e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 810c142:	1917      	adds	r7, r2, r4
 810c144:	429f      	cmp	r7, r3
 810c146:	bfde      	ittt	le
 810c148:	193a      	addle	r2, r7, r4
 810c14a:	1bdb      	suble	r3, r3, r7
 810c14c:	1936      	addle	r6, r6, r4
 810c14e:	0fcf      	lsrs	r7, r1, #31
 810c150:	3801      	subs	r0, #1
 810c152:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 810c156:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810c15a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810c15e:	d1f0      	bne.n	810c142 <__ieee754_sqrt+0xb6>
 810c160:	4604      	mov	r4, r0
 810c162:	2720      	movs	r7, #32
 810c164:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 810c168:	429a      	cmp	r2, r3
 810c16a:	eb00 0e0c 	add.w	lr, r0, ip
 810c16e:	db02      	blt.n	810c176 <__ieee754_sqrt+0xea>
 810c170:	d113      	bne.n	810c19a <__ieee754_sqrt+0x10e>
 810c172:	458e      	cmp	lr, r1
 810c174:	d811      	bhi.n	810c19a <__ieee754_sqrt+0x10e>
 810c176:	f1be 0f00 	cmp.w	lr, #0
 810c17a:	eb0e 000c 	add.w	r0, lr, ip
 810c17e:	da42      	bge.n	810c206 <__ieee754_sqrt+0x17a>
 810c180:	2800      	cmp	r0, #0
 810c182:	db40      	blt.n	810c206 <__ieee754_sqrt+0x17a>
 810c184:	f102 0801 	add.w	r8, r2, #1
 810c188:	1a9b      	subs	r3, r3, r2
 810c18a:	458e      	cmp	lr, r1
 810c18c:	bf88      	it	hi
 810c18e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 810c192:	eba1 010e 	sub.w	r1, r1, lr
 810c196:	4464      	add	r4, ip
 810c198:	4642      	mov	r2, r8
 810c19a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 810c19e:	3f01      	subs	r7, #1
 810c1a0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 810c1a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810c1a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 810c1ac:	d1dc      	bne.n	810c168 <__ieee754_sqrt+0xdc>
 810c1ae:	4319      	orrs	r1, r3
 810c1b0:	d01b      	beq.n	810c1ea <__ieee754_sqrt+0x15e>
 810c1b2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 810c238 <__ieee754_sqrt+0x1ac>
 810c1b6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 810c23c <__ieee754_sqrt+0x1b0>
 810c1ba:	e9da 0100 	ldrd	r0, r1, [sl]
 810c1be:	e9db 2300 	ldrd	r2, r3, [fp]
 810c1c2:	f7f4 f88d 	bl	81002e0 <__aeabi_dsub>
 810c1c6:	e9da 8900 	ldrd	r8, r9, [sl]
 810c1ca:	4602      	mov	r2, r0
 810c1cc:	460b      	mov	r3, r1
 810c1ce:	4640      	mov	r0, r8
 810c1d0:	4649      	mov	r1, r9
 810c1d2:	f7f4 fcb9 	bl	8100b48 <__aeabi_dcmple>
 810c1d6:	b140      	cbz	r0, 810c1ea <__ieee754_sqrt+0x15e>
 810c1d8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 810c1dc:	e9da 0100 	ldrd	r0, r1, [sl]
 810c1e0:	e9db 2300 	ldrd	r2, r3, [fp]
 810c1e4:	d111      	bne.n	810c20a <__ieee754_sqrt+0x17e>
 810c1e6:	3601      	adds	r6, #1
 810c1e8:	463c      	mov	r4, r7
 810c1ea:	1072      	asrs	r2, r6, #1
 810c1ec:	0863      	lsrs	r3, r4, #1
 810c1ee:	07f1      	lsls	r1, r6, #31
 810c1f0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 810c1f4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 810c1f8:	bf48      	it	mi
 810c1fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 810c1fe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 810c202:	4618      	mov	r0, r3
 810c204:	e756      	b.n	810c0b4 <__ieee754_sqrt+0x28>
 810c206:	4690      	mov	r8, r2
 810c208:	e7be      	b.n	810c188 <__ieee754_sqrt+0xfc>
 810c20a:	f7f4 f86b 	bl	81002e4 <__adddf3>
 810c20e:	e9da 8900 	ldrd	r8, r9, [sl]
 810c212:	4602      	mov	r2, r0
 810c214:	460b      	mov	r3, r1
 810c216:	4640      	mov	r0, r8
 810c218:	4649      	mov	r1, r9
 810c21a:	f7f4 fc8b 	bl	8100b34 <__aeabi_dcmplt>
 810c21e:	b120      	cbz	r0, 810c22a <__ieee754_sqrt+0x19e>
 810c220:	1ca0      	adds	r0, r4, #2
 810c222:	bf08      	it	eq
 810c224:	3601      	addeq	r6, #1
 810c226:	3402      	adds	r4, #2
 810c228:	e7df      	b.n	810c1ea <__ieee754_sqrt+0x15e>
 810c22a:	1c63      	adds	r3, r4, #1
 810c22c:	f023 0401 	bic.w	r4, r3, #1
 810c230:	e7db      	b.n	810c1ea <__ieee754_sqrt+0x15e>
 810c232:	bf00      	nop
 810c234:	7ff00000 	.word	0x7ff00000
 810c238:	10000088 	.word	0x10000088
 810c23c:	10000080 	.word	0x10000080

0810c240 <__ieee754_asin>:
 810c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c244:	ec55 4b10 	vmov	r4, r5, d0
 810c248:	4bc7      	ldr	r3, [pc, #796]	@ (810c568 <__ieee754_asin+0x328>)
 810c24a:	b087      	sub	sp, #28
 810c24c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 810c250:	429e      	cmp	r6, r3
 810c252:	9501      	str	r5, [sp, #4]
 810c254:	d92d      	bls.n	810c2b2 <__ieee754_asin+0x72>
 810c256:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 810c25a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 810c25e:	4326      	orrs	r6, r4
 810c260:	d116      	bne.n	810c290 <__ieee754_asin+0x50>
 810c262:	a3a7      	add	r3, pc, #668	@ (adr r3, 810c500 <__ieee754_asin+0x2c0>)
 810c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c268:	4620      	mov	r0, r4
 810c26a:	4629      	mov	r1, r5
 810c26c:	f7f4 f9f0 	bl	8100650 <__aeabi_dmul>
 810c270:	a3a5      	add	r3, pc, #660	@ (adr r3, 810c508 <__ieee754_asin+0x2c8>)
 810c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c276:	4606      	mov	r6, r0
 810c278:	460f      	mov	r7, r1
 810c27a:	4620      	mov	r0, r4
 810c27c:	4629      	mov	r1, r5
 810c27e:	f7f4 f9e7 	bl	8100650 <__aeabi_dmul>
 810c282:	4602      	mov	r2, r0
 810c284:	460b      	mov	r3, r1
 810c286:	4630      	mov	r0, r6
 810c288:	4639      	mov	r1, r7
 810c28a:	f7f4 f82b 	bl	81002e4 <__adddf3>
 810c28e:	e009      	b.n	810c2a4 <__ieee754_asin+0x64>
 810c290:	4622      	mov	r2, r4
 810c292:	462b      	mov	r3, r5
 810c294:	4620      	mov	r0, r4
 810c296:	4629      	mov	r1, r5
 810c298:	f7f4 f822 	bl	81002e0 <__aeabi_dsub>
 810c29c:	4602      	mov	r2, r0
 810c29e:	460b      	mov	r3, r1
 810c2a0:	f7f4 fb00 	bl	81008a4 <__aeabi_ddiv>
 810c2a4:	4604      	mov	r4, r0
 810c2a6:	460d      	mov	r5, r1
 810c2a8:	ec45 4b10 	vmov	d0, r4, r5
 810c2ac:	b007      	add	sp, #28
 810c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c2b2:	4bae      	ldr	r3, [pc, #696]	@ (810c56c <__ieee754_asin+0x32c>)
 810c2b4:	429e      	cmp	r6, r3
 810c2b6:	d810      	bhi.n	810c2da <__ieee754_asin+0x9a>
 810c2b8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 810c2bc:	f080 80ad 	bcs.w	810c41a <__ieee754_asin+0x1da>
 810c2c0:	a393      	add	r3, pc, #588	@ (adr r3, 810c510 <__ieee754_asin+0x2d0>)
 810c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2c6:	4620      	mov	r0, r4
 810c2c8:	4629      	mov	r1, r5
 810c2ca:	f7f4 f80b 	bl	81002e4 <__adddf3>
 810c2ce:	4ba8      	ldr	r3, [pc, #672]	@ (810c570 <__ieee754_asin+0x330>)
 810c2d0:	2200      	movs	r2, #0
 810c2d2:	f7f4 fc4d 	bl	8100b70 <__aeabi_dcmpgt>
 810c2d6:	2800      	cmp	r0, #0
 810c2d8:	d1e6      	bne.n	810c2a8 <__ieee754_asin+0x68>
 810c2da:	ec45 4b10 	vmov	d0, r4, r5
 810c2de:	f7ff fe61 	bl	810bfa4 <fabs>
 810c2e2:	49a3      	ldr	r1, [pc, #652]	@ (810c570 <__ieee754_asin+0x330>)
 810c2e4:	ec53 2b10 	vmov	r2, r3, d0
 810c2e8:	2000      	movs	r0, #0
 810c2ea:	f7f3 fff9 	bl	81002e0 <__aeabi_dsub>
 810c2ee:	4ba1      	ldr	r3, [pc, #644]	@ (810c574 <__ieee754_asin+0x334>)
 810c2f0:	2200      	movs	r2, #0
 810c2f2:	f7f4 f9ad 	bl	8100650 <__aeabi_dmul>
 810c2f6:	a388      	add	r3, pc, #544	@ (adr r3, 810c518 <__ieee754_asin+0x2d8>)
 810c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2fc:	4604      	mov	r4, r0
 810c2fe:	460d      	mov	r5, r1
 810c300:	f7f4 f9a6 	bl	8100650 <__aeabi_dmul>
 810c304:	a386      	add	r3, pc, #536	@ (adr r3, 810c520 <__ieee754_asin+0x2e0>)
 810c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c30a:	f7f3 ffeb 	bl	81002e4 <__adddf3>
 810c30e:	4622      	mov	r2, r4
 810c310:	462b      	mov	r3, r5
 810c312:	f7f4 f99d 	bl	8100650 <__aeabi_dmul>
 810c316:	a384      	add	r3, pc, #528	@ (adr r3, 810c528 <__ieee754_asin+0x2e8>)
 810c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c31c:	f7f3 ffe0 	bl	81002e0 <__aeabi_dsub>
 810c320:	4622      	mov	r2, r4
 810c322:	462b      	mov	r3, r5
 810c324:	f7f4 f994 	bl	8100650 <__aeabi_dmul>
 810c328:	a381      	add	r3, pc, #516	@ (adr r3, 810c530 <__ieee754_asin+0x2f0>)
 810c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c32e:	f7f3 ffd9 	bl	81002e4 <__adddf3>
 810c332:	4622      	mov	r2, r4
 810c334:	462b      	mov	r3, r5
 810c336:	f7f4 f98b 	bl	8100650 <__aeabi_dmul>
 810c33a:	a37f      	add	r3, pc, #508	@ (adr r3, 810c538 <__ieee754_asin+0x2f8>)
 810c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c340:	f7f3 ffce 	bl	81002e0 <__aeabi_dsub>
 810c344:	4622      	mov	r2, r4
 810c346:	462b      	mov	r3, r5
 810c348:	f7f4 f982 	bl	8100650 <__aeabi_dmul>
 810c34c:	a37c      	add	r3, pc, #496	@ (adr r3, 810c540 <__ieee754_asin+0x300>)
 810c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c352:	f7f3 ffc7 	bl	81002e4 <__adddf3>
 810c356:	4622      	mov	r2, r4
 810c358:	462b      	mov	r3, r5
 810c35a:	f7f4 f979 	bl	8100650 <__aeabi_dmul>
 810c35e:	a37a      	add	r3, pc, #488	@ (adr r3, 810c548 <__ieee754_asin+0x308>)
 810c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810c368:	4620      	mov	r0, r4
 810c36a:	4629      	mov	r1, r5
 810c36c:	f7f4 f970 	bl	8100650 <__aeabi_dmul>
 810c370:	a377      	add	r3, pc, #476	@ (adr r3, 810c550 <__ieee754_asin+0x310>)
 810c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c376:	f7f3 ffb3 	bl	81002e0 <__aeabi_dsub>
 810c37a:	4622      	mov	r2, r4
 810c37c:	462b      	mov	r3, r5
 810c37e:	f7f4 f967 	bl	8100650 <__aeabi_dmul>
 810c382:	a375      	add	r3, pc, #468	@ (adr r3, 810c558 <__ieee754_asin+0x318>)
 810c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c388:	f7f3 ffac 	bl	81002e4 <__adddf3>
 810c38c:	4622      	mov	r2, r4
 810c38e:	462b      	mov	r3, r5
 810c390:	f7f4 f95e 	bl	8100650 <__aeabi_dmul>
 810c394:	a372      	add	r3, pc, #456	@ (adr r3, 810c560 <__ieee754_asin+0x320>)
 810c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c39a:	f7f3 ffa1 	bl	81002e0 <__aeabi_dsub>
 810c39e:	4622      	mov	r2, r4
 810c3a0:	462b      	mov	r3, r5
 810c3a2:	f7f4 f955 	bl	8100650 <__aeabi_dmul>
 810c3a6:	4b72      	ldr	r3, [pc, #456]	@ (810c570 <__ieee754_asin+0x330>)
 810c3a8:	2200      	movs	r2, #0
 810c3aa:	f7f3 ff9b 	bl	81002e4 <__adddf3>
 810c3ae:	ec45 4b10 	vmov	d0, r4, r5
 810c3b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810c3b6:	f7ff fe69 	bl	810c08c <__ieee754_sqrt>
 810c3ba:	4b6f      	ldr	r3, [pc, #444]	@ (810c578 <__ieee754_asin+0x338>)
 810c3bc:	429e      	cmp	r6, r3
 810c3be:	ec5b ab10 	vmov	sl, fp, d0
 810c3c2:	f240 80db 	bls.w	810c57c <__ieee754_asin+0x33c>
 810c3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c3ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c3ce:	f7f4 fa69 	bl	81008a4 <__aeabi_ddiv>
 810c3d2:	4652      	mov	r2, sl
 810c3d4:	465b      	mov	r3, fp
 810c3d6:	f7f4 f93b 	bl	8100650 <__aeabi_dmul>
 810c3da:	4652      	mov	r2, sl
 810c3dc:	465b      	mov	r3, fp
 810c3de:	f7f3 ff81 	bl	81002e4 <__adddf3>
 810c3e2:	4602      	mov	r2, r0
 810c3e4:	460b      	mov	r3, r1
 810c3e6:	f7f3 ff7d 	bl	81002e4 <__adddf3>
 810c3ea:	a347      	add	r3, pc, #284	@ (adr r3, 810c508 <__ieee754_asin+0x2c8>)
 810c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c3f0:	f7f3 ff76 	bl	81002e0 <__aeabi_dsub>
 810c3f4:	4602      	mov	r2, r0
 810c3f6:	460b      	mov	r3, r1
 810c3f8:	a141      	add	r1, pc, #260	@ (adr r1, 810c500 <__ieee754_asin+0x2c0>)
 810c3fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c3fe:	f7f3 ff6f 	bl	81002e0 <__aeabi_dsub>
 810c402:	9b01      	ldr	r3, [sp, #4]
 810c404:	2b00      	cmp	r3, #0
 810c406:	bfdc      	itt	le
 810c408:	4602      	movle	r2, r0
 810c40a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 810c40e:	4604      	mov	r4, r0
 810c410:	460d      	mov	r5, r1
 810c412:	bfdc      	itt	le
 810c414:	4614      	movle	r4, r2
 810c416:	461d      	movle	r5, r3
 810c418:	e746      	b.n	810c2a8 <__ieee754_asin+0x68>
 810c41a:	4622      	mov	r2, r4
 810c41c:	462b      	mov	r3, r5
 810c41e:	4620      	mov	r0, r4
 810c420:	4629      	mov	r1, r5
 810c422:	f7f4 f915 	bl	8100650 <__aeabi_dmul>
 810c426:	a33c      	add	r3, pc, #240	@ (adr r3, 810c518 <__ieee754_asin+0x2d8>)
 810c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c42c:	4606      	mov	r6, r0
 810c42e:	460f      	mov	r7, r1
 810c430:	f7f4 f90e 	bl	8100650 <__aeabi_dmul>
 810c434:	a33a      	add	r3, pc, #232	@ (adr r3, 810c520 <__ieee754_asin+0x2e0>)
 810c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c43a:	f7f3 ff53 	bl	81002e4 <__adddf3>
 810c43e:	4632      	mov	r2, r6
 810c440:	463b      	mov	r3, r7
 810c442:	f7f4 f905 	bl	8100650 <__aeabi_dmul>
 810c446:	a338      	add	r3, pc, #224	@ (adr r3, 810c528 <__ieee754_asin+0x2e8>)
 810c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c44c:	f7f3 ff48 	bl	81002e0 <__aeabi_dsub>
 810c450:	4632      	mov	r2, r6
 810c452:	463b      	mov	r3, r7
 810c454:	f7f4 f8fc 	bl	8100650 <__aeabi_dmul>
 810c458:	a335      	add	r3, pc, #212	@ (adr r3, 810c530 <__ieee754_asin+0x2f0>)
 810c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c45e:	f7f3 ff41 	bl	81002e4 <__adddf3>
 810c462:	4632      	mov	r2, r6
 810c464:	463b      	mov	r3, r7
 810c466:	f7f4 f8f3 	bl	8100650 <__aeabi_dmul>
 810c46a:	a333      	add	r3, pc, #204	@ (adr r3, 810c538 <__ieee754_asin+0x2f8>)
 810c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c470:	f7f3 ff36 	bl	81002e0 <__aeabi_dsub>
 810c474:	4632      	mov	r2, r6
 810c476:	463b      	mov	r3, r7
 810c478:	f7f4 f8ea 	bl	8100650 <__aeabi_dmul>
 810c47c:	a330      	add	r3, pc, #192	@ (adr r3, 810c540 <__ieee754_asin+0x300>)
 810c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c482:	f7f3 ff2f 	bl	81002e4 <__adddf3>
 810c486:	4632      	mov	r2, r6
 810c488:	463b      	mov	r3, r7
 810c48a:	f7f4 f8e1 	bl	8100650 <__aeabi_dmul>
 810c48e:	a32e      	add	r3, pc, #184	@ (adr r3, 810c548 <__ieee754_asin+0x308>)
 810c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c494:	4680      	mov	r8, r0
 810c496:	4689      	mov	r9, r1
 810c498:	4630      	mov	r0, r6
 810c49a:	4639      	mov	r1, r7
 810c49c:	f7f4 f8d8 	bl	8100650 <__aeabi_dmul>
 810c4a0:	a32b      	add	r3, pc, #172	@ (adr r3, 810c550 <__ieee754_asin+0x310>)
 810c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4a6:	f7f3 ff1b 	bl	81002e0 <__aeabi_dsub>
 810c4aa:	4632      	mov	r2, r6
 810c4ac:	463b      	mov	r3, r7
 810c4ae:	f7f4 f8cf 	bl	8100650 <__aeabi_dmul>
 810c4b2:	a329      	add	r3, pc, #164	@ (adr r3, 810c558 <__ieee754_asin+0x318>)
 810c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4b8:	f7f3 ff14 	bl	81002e4 <__adddf3>
 810c4bc:	4632      	mov	r2, r6
 810c4be:	463b      	mov	r3, r7
 810c4c0:	f7f4 f8c6 	bl	8100650 <__aeabi_dmul>
 810c4c4:	a326      	add	r3, pc, #152	@ (adr r3, 810c560 <__ieee754_asin+0x320>)
 810c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4ca:	f7f3 ff09 	bl	81002e0 <__aeabi_dsub>
 810c4ce:	4632      	mov	r2, r6
 810c4d0:	463b      	mov	r3, r7
 810c4d2:	f7f4 f8bd 	bl	8100650 <__aeabi_dmul>
 810c4d6:	4b26      	ldr	r3, [pc, #152]	@ (810c570 <__ieee754_asin+0x330>)
 810c4d8:	2200      	movs	r2, #0
 810c4da:	f7f3 ff03 	bl	81002e4 <__adddf3>
 810c4de:	4602      	mov	r2, r0
 810c4e0:	460b      	mov	r3, r1
 810c4e2:	4640      	mov	r0, r8
 810c4e4:	4649      	mov	r1, r9
 810c4e6:	f7f4 f9dd 	bl	81008a4 <__aeabi_ddiv>
 810c4ea:	4622      	mov	r2, r4
 810c4ec:	462b      	mov	r3, r5
 810c4ee:	f7f4 f8af 	bl	8100650 <__aeabi_dmul>
 810c4f2:	4602      	mov	r2, r0
 810c4f4:	460b      	mov	r3, r1
 810c4f6:	4620      	mov	r0, r4
 810c4f8:	4629      	mov	r1, r5
 810c4fa:	e6c6      	b.n	810c28a <__ieee754_asin+0x4a>
 810c4fc:	f3af 8000 	nop.w
 810c500:	54442d18 	.word	0x54442d18
 810c504:	3ff921fb 	.word	0x3ff921fb
 810c508:	33145c07 	.word	0x33145c07
 810c50c:	3c91a626 	.word	0x3c91a626
 810c510:	8800759c 	.word	0x8800759c
 810c514:	7e37e43c 	.word	0x7e37e43c
 810c518:	0dfdf709 	.word	0x0dfdf709
 810c51c:	3f023de1 	.word	0x3f023de1
 810c520:	7501b288 	.word	0x7501b288
 810c524:	3f49efe0 	.word	0x3f49efe0
 810c528:	b5688f3b 	.word	0xb5688f3b
 810c52c:	3fa48228 	.word	0x3fa48228
 810c530:	0e884455 	.word	0x0e884455
 810c534:	3fc9c155 	.word	0x3fc9c155
 810c538:	03eb6f7d 	.word	0x03eb6f7d
 810c53c:	3fd4d612 	.word	0x3fd4d612
 810c540:	55555555 	.word	0x55555555
 810c544:	3fc55555 	.word	0x3fc55555
 810c548:	b12e9282 	.word	0xb12e9282
 810c54c:	3fb3b8c5 	.word	0x3fb3b8c5
 810c550:	1b8d0159 	.word	0x1b8d0159
 810c554:	3fe6066c 	.word	0x3fe6066c
 810c558:	9c598ac8 	.word	0x9c598ac8
 810c55c:	40002ae5 	.word	0x40002ae5
 810c560:	1c8a2d4b 	.word	0x1c8a2d4b
 810c564:	40033a27 	.word	0x40033a27
 810c568:	3fefffff 	.word	0x3fefffff
 810c56c:	3fdfffff 	.word	0x3fdfffff
 810c570:	3ff00000 	.word	0x3ff00000
 810c574:	3fe00000 	.word	0x3fe00000
 810c578:	3fef3332 	.word	0x3fef3332
 810c57c:	4652      	mov	r2, sl
 810c57e:	465b      	mov	r3, fp
 810c580:	4650      	mov	r0, sl
 810c582:	4659      	mov	r1, fp
 810c584:	f7f3 feae 	bl	81002e4 <__adddf3>
 810c588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c58c:	4606      	mov	r6, r0
 810c58e:	460f      	mov	r7, r1
 810c590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c594:	f7f4 f986 	bl	81008a4 <__aeabi_ddiv>
 810c598:	4602      	mov	r2, r0
 810c59a:	460b      	mov	r3, r1
 810c59c:	4630      	mov	r0, r6
 810c59e:	4639      	mov	r1, r7
 810c5a0:	f7f4 f856 	bl	8100650 <__aeabi_dmul>
 810c5a4:	f04f 0800 	mov.w	r8, #0
 810c5a8:	4606      	mov	r6, r0
 810c5aa:	460f      	mov	r7, r1
 810c5ac:	4642      	mov	r2, r8
 810c5ae:	465b      	mov	r3, fp
 810c5b0:	4640      	mov	r0, r8
 810c5b2:	4659      	mov	r1, fp
 810c5b4:	f7f4 f84c 	bl	8100650 <__aeabi_dmul>
 810c5b8:	4602      	mov	r2, r0
 810c5ba:	460b      	mov	r3, r1
 810c5bc:	4620      	mov	r0, r4
 810c5be:	4629      	mov	r1, r5
 810c5c0:	f7f3 fe8e 	bl	81002e0 <__aeabi_dsub>
 810c5c4:	4642      	mov	r2, r8
 810c5c6:	4604      	mov	r4, r0
 810c5c8:	460d      	mov	r5, r1
 810c5ca:	465b      	mov	r3, fp
 810c5cc:	4650      	mov	r0, sl
 810c5ce:	4659      	mov	r1, fp
 810c5d0:	f7f3 fe88 	bl	81002e4 <__adddf3>
 810c5d4:	4602      	mov	r2, r0
 810c5d6:	460b      	mov	r3, r1
 810c5d8:	4620      	mov	r0, r4
 810c5da:	4629      	mov	r1, r5
 810c5dc:	f7f4 f962 	bl	81008a4 <__aeabi_ddiv>
 810c5e0:	4602      	mov	r2, r0
 810c5e2:	460b      	mov	r3, r1
 810c5e4:	f7f3 fe7e 	bl	81002e4 <__adddf3>
 810c5e8:	4602      	mov	r2, r0
 810c5ea:	460b      	mov	r3, r1
 810c5ec:	a112      	add	r1, pc, #72	@ (adr r1, 810c638 <__ieee754_asin+0x3f8>)
 810c5ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c5f2:	f7f3 fe75 	bl	81002e0 <__aeabi_dsub>
 810c5f6:	4602      	mov	r2, r0
 810c5f8:	460b      	mov	r3, r1
 810c5fa:	4630      	mov	r0, r6
 810c5fc:	4639      	mov	r1, r7
 810c5fe:	f7f3 fe6f 	bl	81002e0 <__aeabi_dsub>
 810c602:	4642      	mov	r2, r8
 810c604:	4604      	mov	r4, r0
 810c606:	460d      	mov	r5, r1
 810c608:	465b      	mov	r3, fp
 810c60a:	4640      	mov	r0, r8
 810c60c:	4659      	mov	r1, fp
 810c60e:	f7f3 fe69 	bl	81002e4 <__adddf3>
 810c612:	4602      	mov	r2, r0
 810c614:	460b      	mov	r3, r1
 810c616:	a10a      	add	r1, pc, #40	@ (adr r1, 810c640 <__ieee754_asin+0x400>)
 810c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c61c:	f7f3 fe60 	bl	81002e0 <__aeabi_dsub>
 810c620:	4602      	mov	r2, r0
 810c622:	460b      	mov	r3, r1
 810c624:	4620      	mov	r0, r4
 810c626:	4629      	mov	r1, r5
 810c628:	f7f3 fe5a 	bl	81002e0 <__aeabi_dsub>
 810c62c:	4602      	mov	r2, r0
 810c62e:	460b      	mov	r3, r1
 810c630:	a103      	add	r1, pc, #12	@ (adr r1, 810c640 <__ieee754_asin+0x400>)
 810c632:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c636:	e6e2      	b.n	810c3fe <__ieee754_asin+0x1be>
 810c638:	33145c07 	.word	0x33145c07
 810c63c:	3c91a626 	.word	0x3c91a626
 810c640:	54442d18 	.word	0x54442d18
 810c644:	3fe921fb 	.word	0x3fe921fb

0810c648 <__ieee754_atan2>:
 810c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c64c:	ec57 6b11 	vmov	r6, r7, d1
 810c650:	4273      	negs	r3, r6
 810c652:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 810c7d0 <__ieee754_atan2+0x188>
 810c656:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 810c65a:	4333      	orrs	r3, r6
 810c65c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 810c660:	4543      	cmp	r3, r8
 810c662:	ec51 0b10 	vmov	r0, r1, d0
 810c666:	4635      	mov	r5, r6
 810c668:	d809      	bhi.n	810c67e <__ieee754_atan2+0x36>
 810c66a:	4244      	negs	r4, r0
 810c66c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 810c670:	4304      	orrs	r4, r0
 810c672:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 810c676:	4544      	cmp	r4, r8
 810c678:	468e      	mov	lr, r1
 810c67a:	4681      	mov	r9, r0
 810c67c:	d907      	bls.n	810c68e <__ieee754_atan2+0x46>
 810c67e:	4632      	mov	r2, r6
 810c680:	463b      	mov	r3, r7
 810c682:	f7f3 fe2f 	bl	81002e4 <__adddf3>
 810c686:	ec41 0b10 	vmov	d0, r0, r1
 810c68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c68e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 810c692:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 810c696:	4334      	orrs	r4, r6
 810c698:	d103      	bne.n	810c6a2 <__ieee754_atan2+0x5a>
 810c69a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c69e:	f000 b89b 	b.w	810c7d8 <atan>
 810c6a2:	17bc      	asrs	r4, r7, #30
 810c6a4:	f004 0402 	and.w	r4, r4, #2
 810c6a8:	ea53 0909 	orrs.w	r9, r3, r9
 810c6ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 810c6b0:	d107      	bne.n	810c6c2 <__ieee754_atan2+0x7a>
 810c6b2:	2c02      	cmp	r4, #2
 810c6b4:	d05f      	beq.n	810c776 <__ieee754_atan2+0x12e>
 810c6b6:	2c03      	cmp	r4, #3
 810c6b8:	d1e5      	bne.n	810c686 <__ieee754_atan2+0x3e>
 810c6ba:	a141      	add	r1, pc, #260	@ (adr r1, 810c7c0 <__ieee754_atan2+0x178>)
 810c6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c6c0:	e7e1      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c6c2:	4315      	orrs	r5, r2
 810c6c4:	d106      	bne.n	810c6d4 <__ieee754_atan2+0x8c>
 810c6c6:	f1be 0f00 	cmp.w	lr, #0
 810c6ca:	da5f      	bge.n	810c78c <__ieee754_atan2+0x144>
 810c6cc:	a13e      	add	r1, pc, #248	@ (adr r1, 810c7c8 <__ieee754_atan2+0x180>)
 810c6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c6d2:	e7d8      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c6d4:	4542      	cmp	r2, r8
 810c6d6:	d10f      	bne.n	810c6f8 <__ieee754_atan2+0xb0>
 810c6d8:	4293      	cmp	r3, r2
 810c6da:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 810c6de:	d107      	bne.n	810c6f0 <__ieee754_atan2+0xa8>
 810c6e0:	2c02      	cmp	r4, #2
 810c6e2:	d84c      	bhi.n	810c77e <__ieee754_atan2+0x136>
 810c6e4:	4b34      	ldr	r3, [pc, #208]	@ (810c7b8 <__ieee754_atan2+0x170>)
 810c6e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c6ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 810c6ee:	e7ca      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c6f0:	2c02      	cmp	r4, #2
 810c6f2:	d848      	bhi.n	810c786 <__ieee754_atan2+0x13e>
 810c6f4:	4b31      	ldr	r3, [pc, #196]	@ (810c7bc <__ieee754_atan2+0x174>)
 810c6f6:	e7f6      	b.n	810c6e6 <__ieee754_atan2+0x9e>
 810c6f8:	4543      	cmp	r3, r8
 810c6fa:	d0e4      	beq.n	810c6c6 <__ieee754_atan2+0x7e>
 810c6fc:	1a9b      	subs	r3, r3, r2
 810c6fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 810c702:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c706:	da1e      	bge.n	810c746 <__ieee754_atan2+0xfe>
 810c708:	2f00      	cmp	r7, #0
 810c70a:	da01      	bge.n	810c710 <__ieee754_atan2+0xc8>
 810c70c:	323c      	adds	r2, #60	@ 0x3c
 810c70e:	db1e      	blt.n	810c74e <__ieee754_atan2+0x106>
 810c710:	4632      	mov	r2, r6
 810c712:	463b      	mov	r3, r7
 810c714:	f7f4 f8c6 	bl	81008a4 <__aeabi_ddiv>
 810c718:	ec41 0b10 	vmov	d0, r0, r1
 810c71c:	f7ff fc42 	bl	810bfa4 <fabs>
 810c720:	f000 f85a 	bl	810c7d8 <atan>
 810c724:	ec51 0b10 	vmov	r0, r1, d0
 810c728:	2c01      	cmp	r4, #1
 810c72a:	d013      	beq.n	810c754 <__ieee754_atan2+0x10c>
 810c72c:	2c02      	cmp	r4, #2
 810c72e:	d015      	beq.n	810c75c <__ieee754_atan2+0x114>
 810c730:	2c00      	cmp	r4, #0
 810c732:	d0a8      	beq.n	810c686 <__ieee754_atan2+0x3e>
 810c734:	a318      	add	r3, pc, #96	@ (adr r3, 810c798 <__ieee754_atan2+0x150>)
 810c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c73a:	f7f3 fdd1 	bl	81002e0 <__aeabi_dsub>
 810c73e:	a318      	add	r3, pc, #96	@ (adr r3, 810c7a0 <__ieee754_atan2+0x158>)
 810c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c744:	e014      	b.n	810c770 <__ieee754_atan2+0x128>
 810c746:	a118      	add	r1, pc, #96	@ (adr r1, 810c7a8 <__ieee754_atan2+0x160>)
 810c748:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c74c:	e7ec      	b.n	810c728 <__ieee754_atan2+0xe0>
 810c74e:	2000      	movs	r0, #0
 810c750:	2100      	movs	r1, #0
 810c752:	e7e9      	b.n	810c728 <__ieee754_atan2+0xe0>
 810c754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810c758:	4619      	mov	r1, r3
 810c75a:	e794      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c75c:	a30e      	add	r3, pc, #56	@ (adr r3, 810c798 <__ieee754_atan2+0x150>)
 810c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c762:	f7f3 fdbd 	bl	81002e0 <__aeabi_dsub>
 810c766:	4602      	mov	r2, r0
 810c768:	460b      	mov	r3, r1
 810c76a:	a10d      	add	r1, pc, #52	@ (adr r1, 810c7a0 <__ieee754_atan2+0x158>)
 810c76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c770:	f7f3 fdb6 	bl	81002e0 <__aeabi_dsub>
 810c774:	e787      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c776:	a10a      	add	r1, pc, #40	@ (adr r1, 810c7a0 <__ieee754_atan2+0x158>)
 810c778:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c77c:	e783      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c77e:	a10c      	add	r1, pc, #48	@ (adr r1, 810c7b0 <__ieee754_atan2+0x168>)
 810c780:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c784:	e77f      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c786:	2000      	movs	r0, #0
 810c788:	2100      	movs	r1, #0
 810c78a:	e77c      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c78c:	a106      	add	r1, pc, #24	@ (adr r1, 810c7a8 <__ieee754_atan2+0x160>)
 810c78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c792:	e778      	b.n	810c686 <__ieee754_atan2+0x3e>
 810c794:	f3af 8000 	nop.w
 810c798:	33145c07 	.word	0x33145c07
 810c79c:	3ca1a626 	.word	0x3ca1a626
 810c7a0:	54442d18 	.word	0x54442d18
 810c7a4:	400921fb 	.word	0x400921fb
 810c7a8:	54442d18 	.word	0x54442d18
 810c7ac:	3ff921fb 	.word	0x3ff921fb
 810c7b0:	54442d18 	.word	0x54442d18
 810c7b4:	3fe921fb 	.word	0x3fe921fb
 810c7b8:	0810d228 	.word	0x0810d228
 810c7bc:	0810d210 	.word	0x0810d210
 810c7c0:	54442d18 	.word	0x54442d18
 810c7c4:	c00921fb 	.word	0xc00921fb
 810c7c8:	54442d18 	.word	0x54442d18
 810c7cc:	bff921fb 	.word	0xbff921fb
 810c7d0:	7ff00000 	.word	0x7ff00000
 810c7d4:	00000000 	.word	0x00000000

0810c7d8 <atan>:
 810c7d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c7dc:	ec55 4b10 	vmov	r4, r5, d0
 810c7e0:	4bbf      	ldr	r3, [pc, #764]	@ (810cae0 <atan+0x308>)
 810c7e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 810c7e6:	429e      	cmp	r6, r3
 810c7e8:	46ab      	mov	fp, r5
 810c7ea:	d918      	bls.n	810c81e <atan+0x46>
 810c7ec:	4bbd      	ldr	r3, [pc, #756]	@ (810cae4 <atan+0x30c>)
 810c7ee:	429e      	cmp	r6, r3
 810c7f0:	d801      	bhi.n	810c7f6 <atan+0x1e>
 810c7f2:	d109      	bne.n	810c808 <atan+0x30>
 810c7f4:	b144      	cbz	r4, 810c808 <atan+0x30>
 810c7f6:	4622      	mov	r2, r4
 810c7f8:	462b      	mov	r3, r5
 810c7fa:	4620      	mov	r0, r4
 810c7fc:	4629      	mov	r1, r5
 810c7fe:	f7f3 fd71 	bl	81002e4 <__adddf3>
 810c802:	4604      	mov	r4, r0
 810c804:	460d      	mov	r5, r1
 810c806:	e006      	b.n	810c816 <atan+0x3e>
 810c808:	f1bb 0f00 	cmp.w	fp, #0
 810c80c:	f340 812b 	ble.w	810ca66 <atan+0x28e>
 810c810:	a597      	add	r5, pc, #604	@ (adr r5, 810ca70 <atan+0x298>)
 810c812:	e9d5 4500 	ldrd	r4, r5, [r5]
 810c816:	ec45 4b10 	vmov	d0, r4, r5
 810c81a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c81e:	4bb2      	ldr	r3, [pc, #712]	@ (810cae8 <atan+0x310>)
 810c820:	429e      	cmp	r6, r3
 810c822:	d813      	bhi.n	810c84c <atan+0x74>
 810c824:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 810c828:	429e      	cmp	r6, r3
 810c82a:	d80c      	bhi.n	810c846 <atan+0x6e>
 810c82c:	a392      	add	r3, pc, #584	@ (adr r3, 810ca78 <atan+0x2a0>)
 810c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c832:	4620      	mov	r0, r4
 810c834:	4629      	mov	r1, r5
 810c836:	f7f3 fd55 	bl	81002e4 <__adddf3>
 810c83a:	4bac      	ldr	r3, [pc, #688]	@ (810caec <atan+0x314>)
 810c83c:	2200      	movs	r2, #0
 810c83e:	f7f4 f997 	bl	8100b70 <__aeabi_dcmpgt>
 810c842:	2800      	cmp	r0, #0
 810c844:	d1e7      	bne.n	810c816 <atan+0x3e>
 810c846:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810c84a:	e029      	b.n	810c8a0 <atan+0xc8>
 810c84c:	f7ff fbaa 	bl	810bfa4 <fabs>
 810c850:	4ba7      	ldr	r3, [pc, #668]	@ (810caf0 <atan+0x318>)
 810c852:	429e      	cmp	r6, r3
 810c854:	ec55 4b10 	vmov	r4, r5, d0
 810c858:	f200 80bc 	bhi.w	810c9d4 <atan+0x1fc>
 810c85c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 810c860:	429e      	cmp	r6, r3
 810c862:	f200 809e 	bhi.w	810c9a2 <atan+0x1ca>
 810c866:	4622      	mov	r2, r4
 810c868:	462b      	mov	r3, r5
 810c86a:	4620      	mov	r0, r4
 810c86c:	4629      	mov	r1, r5
 810c86e:	f7f3 fd39 	bl	81002e4 <__adddf3>
 810c872:	4b9e      	ldr	r3, [pc, #632]	@ (810caec <atan+0x314>)
 810c874:	2200      	movs	r2, #0
 810c876:	f7f3 fd33 	bl	81002e0 <__aeabi_dsub>
 810c87a:	2200      	movs	r2, #0
 810c87c:	4606      	mov	r6, r0
 810c87e:	460f      	mov	r7, r1
 810c880:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810c884:	4620      	mov	r0, r4
 810c886:	4629      	mov	r1, r5
 810c888:	f7f3 fd2c 	bl	81002e4 <__adddf3>
 810c88c:	4602      	mov	r2, r0
 810c88e:	460b      	mov	r3, r1
 810c890:	4630      	mov	r0, r6
 810c892:	4639      	mov	r1, r7
 810c894:	f7f4 f806 	bl	81008a4 <__aeabi_ddiv>
 810c898:	f04f 0a00 	mov.w	sl, #0
 810c89c:	4604      	mov	r4, r0
 810c89e:	460d      	mov	r5, r1
 810c8a0:	4622      	mov	r2, r4
 810c8a2:	462b      	mov	r3, r5
 810c8a4:	4620      	mov	r0, r4
 810c8a6:	4629      	mov	r1, r5
 810c8a8:	f7f3 fed2 	bl	8100650 <__aeabi_dmul>
 810c8ac:	4602      	mov	r2, r0
 810c8ae:	460b      	mov	r3, r1
 810c8b0:	4680      	mov	r8, r0
 810c8b2:	4689      	mov	r9, r1
 810c8b4:	f7f3 fecc 	bl	8100650 <__aeabi_dmul>
 810c8b8:	a371      	add	r3, pc, #452	@ (adr r3, 810ca80 <atan+0x2a8>)
 810c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8be:	4606      	mov	r6, r0
 810c8c0:	460f      	mov	r7, r1
 810c8c2:	f7f3 fec5 	bl	8100650 <__aeabi_dmul>
 810c8c6:	a370      	add	r3, pc, #448	@ (adr r3, 810ca88 <atan+0x2b0>)
 810c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8cc:	f7f3 fd0a 	bl	81002e4 <__adddf3>
 810c8d0:	4632      	mov	r2, r6
 810c8d2:	463b      	mov	r3, r7
 810c8d4:	f7f3 febc 	bl	8100650 <__aeabi_dmul>
 810c8d8:	a36d      	add	r3, pc, #436	@ (adr r3, 810ca90 <atan+0x2b8>)
 810c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8de:	f7f3 fd01 	bl	81002e4 <__adddf3>
 810c8e2:	4632      	mov	r2, r6
 810c8e4:	463b      	mov	r3, r7
 810c8e6:	f7f3 feb3 	bl	8100650 <__aeabi_dmul>
 810c8ea:	a36b      	add	r3, pc, #428	@ (adr r3, 810ca98 <atan+0x2c0>)
 810c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8f0:	f7f3 fcf8 	bl	81002e4 <__adddf3>
 810c8f4:	4632      	mov	r2, r6
 810c8f6:	463b      	mov	r3, r7
 810c8f8:	f7f3 feaa 	bl	8100650 <__aeabi_dmul>
 810c8fc:	a368      	add	r3, pc, #416	@ (adr r3, 810caa0 <atan+0x2c8>)
 810c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c902:	f7f3 fcef 	bl	81002e4 <__adddf3>
 810c906:	4632      	mov	r2, r6
 810c908:	463b      	mov	r3, r7
 810c90a:	f7f3 fea1 	bl	8100650 <__aeabi_dmul>
 810c90e:	a366      	add	r3, pc, #408	@ (adr r3, 810caa8 <atan+0x2d0>)
 810c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c914:	f7f3 fce6 	bl	81002e4 <__adddf3>
 810c918:	4642      	mov	r2, r8
 810c91a:	464b      	mov	r3, r9
 810c91c:	f7f3 fe98 	bl	8100650 <__aeabi_dmul>
 810c920:	a363      	add	r3, pc, #396	@ (adr r3, 810cab0 <atan+0x2d8>)
 810c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c926:	4680      	mov	r8, r0
 810c928:	4689      	mov	r9, r1
 810c92a:	4630      	mov	r0, r6
 810c92c:	4639      	mov	r1, r7
 810c92e:	f7f3 fe8f 	bl	8100650 <__aeabi_dmul>
 810c932:	a361      	add	r3, pc, #388	@ (adr r3, 810cab8 <atan+0x2e0>)
 810c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c938:	f7f3 fcd2 	bl	81002e0 <__aeabi_dsub>
 810c93c:	4632      	mov	r2, r6
 810c93e:	463b      	mov	r3, r7
 810c940:	f7f3 fe86 	bl	8100650 <__aeabi_dmul>
 810c944:	a35e      	add	r3, pc, #376	@ (adr r3, 810cac0 <atan+0x2e8>)
 810c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c94a:	f7f3 fcc9 	bl	81002e0 <__aeabi_dsub>
 810c94e:	4632      	mov	r2, r6
 810c950:	463b      	mov	r3, r7
 810c952:	f7f3 fe7d 	bl	8100650 <__aeabi_dmul>
 810c956:	a35c      	add	r3, pc, #368	@ (adr r3, 810cac8 <atan+0x2f0>)
 810c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c95c:	f7f3 fcc0 	bl	81002e0 <__aeabi_dsub>
 810c960:	4632      	mov	r2, r6
 810c962:	463b      	mov	r3, r7
 810c964:	f7f3 fe74 	bl	8100650 <__aeabi_dmul>
 810c968:	a359      	add	r3, pc, #356	@ (adr r3, 810cad0 <atan+0x2f8>)
 810c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c96e:	f7f3 fcb7 	bl	81002e0 <__aeabi_dsub>
 810c972:	4632      	mov	r2, r6
 810c974:	463b      	mov	r3, r7
 810c976:	f7f3 fe6b 	bl	8100650 <__aeabi_dmul>
 810c97a:	4602      	mov	r2, r0
 810c97c:	460b      	mov	r3, r1
 810c97e:	4640      	mov	r0, r8
 810c980:	4649      	mov	r1, r9
 810c982:	f7f3 fcaf 	bl	81002e4 <__adddf3>
 810c986:	4622      	mov	r2, r4
 810c988:	462b      	mov	r3, r5
 810c98a:	f7f3 fe61 	bl	8100650 <__aeabi_dmul>
 810c98e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 810c992:	4602      	mov	r2, r0
 810c994:	460b      	mov	r3, r1
 810c996:	d148      	bne.n	810ca2a <atan+0x252>
 810c998:	4620      	mov	r0, r4
 810c99a:	4629      	mov	r1, r5
 810c99c:	f7f3 fca0 	bl	81002e0 <__aeabi_dsub>
 810c9a0:	e72f      	b.n	810c802 <atan+0x2a>
 810c9a2:	4b52      	ldr	r3, [pc, #328]	@ (810caec <atan+0x314>)
 810c9a4:	2200      	movs	r2, #0
 810c9a6:	4620      	mov	r0, r4
 810c9a8:	4629      	mov	r1, r5
 810c9aa:	f7f3 fc99 	bl	81002e0 <__aeabi_dsub>
 810c9ae:	4b4f      	ldr	r3, [pc, #316]	@ (810caec <atan+0x314>)
 810c9b0:	4606      	mov	r6, r0
 810c9b2:	460f      	mov	r7, r1
 810c9b4:	2200      	movs	r2, #0
 810c9b6:	4620      	mov	r0, r4
 810c9b8:	4629      	mov	r1, r5
 810c9ba:	f7f3 fc93 	bl	81002e4 <__adddf3>
 810c9be:	4602      	mov	r2, r0
 810c9c0:	460b      	mov	r3, r1
 810c9c2:	4630      	mov	r0, r6
 810c9c4:	4639      	mov	r1, r7
 810c9c6:	f7f3 ff6d 	bl	81008a4 <__aeabi_ddiv>
 810c9ca:	f04f 0a01 	mov.w	sl, #1
 810c9ce:	4604      	mov	r4, r0
 810c9d0:	460d      	mov	r5, r1
 810c9d2:	e765      	b.n	810c8a0 <atan+0xc8>
 810c9d4:	4b47      	ldr	r3, [pc, #284]	@ (810caf4 <atan+0x31c>)
 810c9d6:	429e      	cmp	r6, r3
 810c9d8:	d21c      	bcs.n	810ca14 <atan+0x23c>
 810c9da:	4b47      	ldr	r3, [pc, #284]	@ (810caf8 <atan+0x320>)
 810c9dc:	2200      	movs	r2, #0
 810c9de:	4620      	mov	r0, r4
 810c9e0:	4629      	mov	r1, r5
 810c9e2:	f7f3 fc7d 	bl	81002e0 <__aeabi_dsub>
 810c9e6:	4b44      	ldr	r3, [pc, #272]	@ (810caf8 <atan+0x320>)
 810c9e8:	4606      	mov	r6, r0
 810c9ea:	460f      	mov	r7, r1
 810c9ec:	2200      	movs	r2, #0
 810c9ee:	4620      	mov	r0, r4
 810c9f0:	4629      	mov	r1, r5
 810c9f2:	f7f3 fe2d 	bl	8100650 <__aeabi_dmul>
 810c9f6:	4b3d      	ldr	r3, [pc, #244]	@ (810caec <atan+0x314>)
 810c9f8:	2200      	movs	r2, #0
 810c9fa:	f7f3 fc73 	bl	81002e4 <__adddf3>
 810c9fe:	4602      	mov	r2, r0
 810ca00:	460b      	mov	r3, r1
 810ca02:	4630      	mov	r0, r6
 810ca04:	4639      	mov	r1, r7
 810ca06:	f7f3 ff4d 	bl	81008a4 <__aeabi_ddiv>
 810ca0a:	f04f 0a02 	mov.w	sl, #2
 810ca0e:	4604      	mov	r4, r0
 810ca10:	460d      	mov	r5, r1
 810ca12:	e745      	b.n	810c8a0 <atan+0xc8>
 810ca14:	4622      	mov	r2, r4
 810ca16:	462b      	mov	r3, r5
 810ca18:	4938      	ldr	r1, [pc, #224]	@ (810cafc <atan+0x324>)
 810ca1a:	2000      	movs	r0, #0
 810ca1c:	f7f3 ff42 	bl	81008a4 <__aeabi_ddiv>
 810ca20:	f04f 0a03 	mov.w	sl, #3
 810ca24:	4604      	mov	r4, r0
 810ca26:	460d      	mov	r5, r1
 810ca28:	e73a      	b.n	810c8a0 <atan+0xc8>
 810ca2a:	4b35      	ldr	r3, [pc, #212]	@ (810cb00 <atan+0x328>)
 810ca2c:	4e35      	ldr	r6, [pc, #212]	@ (810cb04 <atan+0x32c>)
 810ca2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca36:	f7f3 fc53 	bl	81002e0 <__aeabi_dsub>
 810ca3a:	4622      	mov	r2, r4
 810ca3c:	462b      	mov	r3, r5
 810ca3e:	f7f3 fc4f 	bl	81002e0 <__aeabi_dsub>
 810ca42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 810ca46:	4602      	mov	r2, r0
 810ca48:	460b      	mov	r3, r1
 810ca4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 810ca4e:	f7f3 fc47 	bl	81002e0 <__aeabi_dsub>
 810ca52:	f1bb 0f00 	cmp.w	fp, #0
 810ca56:	4604      	mov	r4, r0
 810ca58:	460d      	mov	r5, r1
 810ca5a:	f6bf aedc 	bge.w	810c816 <atan+0x3e>
 810ca5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810ca62:	461d      	mov	r5, r3
 810ca64:	e6d7      	b.n	810c816 <atan+0x3e>
 810ca66:	a51c      	add	r5, pc, #112	@ (adr r5, 810cad8 <atan+0x300>)
 810ca68:	e9d5 4500 	ldrd	r4, r5, [r5]
 810ca6c:	e6d3      	b.n	810c816 <atan+0x3e>
 810ca6e:	bf00      	nop
 810ca70:	54442d18 	.word	0x54442d18
 810ca74:	3ff921fb 	.word	0x3ff921fb
 810ca78:	8800759c 	.word	0x8800759c
 810ca7c:	7e37e43c 	.word	0x7e37e43c
 810ca80:	e322da11 	.word	0xe322da11
 810ca84:	3f90ad3a 	.word	0x3f90ad3a
 810ca88:	24760deb 	.word	0x24760deb
 810ca8c:	3fa97b4b 	.word	0x3fa97b4b
 810ca90:	a0d03d51 	.word	0xa0d03d51
 810ca94:	3fb10d66 	.word	0x3fb10d66
 810ca98:	c54c206e 	.word	0xc54c206e
 810ca9c:	3fb745cd 	.word	0x3fb745cd
 810caa0:	920083ff 	.word	0x920083ff
 810caa4:	3fc24924 	.word	0x3fc24924
 810caa8:	5555550d 	.word	0x5555550d
 810caac:	3fd55555 	.word	0x3fd55555
 810cab0:	2c6a6c2f 	.word	0x2c6a6c2f
 810cab4:	bfa2b444 	.word	0xbfa2b444
 810cab8:	52defd9a 	.word	0x52defd9a
 810cabc:	3fadde2d 	.word	0x3fadde2d
 810cac0:	af749a6d 	.word	0xaf749a6d
 810cac4:	3fb3b0f2 	.word	0x3fb3b0f2
 810cac8:	fe231671 	.word	0xfe231671
 810cacc:	3fbc71c6 	.word	0x3fbc71c6
 810cad0:	9998ebc4 	.word	0x9998ebc4
 810cad4:	3fc99999 	.word	0x3fc99999
 810cad8:	54442d18 	.word	0x54442d18
 810cadc:	bff921fb 	.word	0xbff921fb
 810cae0:	440fffff 	.word	0x440fffff
 810cae4:	7ff00000 	.word	0x7ff00000
 810cae8:	3fdbffff 	.word	0x3fdbffff
 810caec:	3ff00000 	.word	0x3ff00000
 810caf0:	3ff2ffff 	.word	0x3ff2ffff
 810caf4:	40038000 	.word	0x40038000
 810caf8:	3ff80000 	.word	0x3ff80000
 810cafc:	bff00000 	.word	0xbff00000
 810cb00:	0810d240 	.word	0x0810d240
 810cb04:	0810d260 	.word	0x0810d260

0810cb08 <__ieee754_powf>:
 810cb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cb0c:	ee10 4a90 	vmov	r4, s1
 810cb10:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 810cb14:	ed2d 8b02 	vpush	{d8}
 810cb18:	ee10 6a10 	vmov	r6, s0
 810cb1c:	eeb0 8a40 	vmov.f32	s16, s0
 810cb20:	eef0 8a60 	vmov.f32	s17, s1
 810cb24:	d10c      	bne.n	810cb40 <__ieee754_powf+0x38>
 810cb26:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 810cb2a:	0076      	lsls	r6, r6, #1
 810cb2c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 810cb30:	f240 829c 	bls.w	810d06c <__ieee754_powf+0x564>
 810cb34:	ee38 0a28 	vadd.f32	s0, s16, s17
 810cb38:	ecbd 8b02 	vpop	{d8}
 810cb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cb40:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 810cb44:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 810cb48:	d802      	bhi.n	810cb50 <__ieee754_powf+0x48>
 810cb4a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 810cb4e:	d908      	bls.n	810cb62 <__ieee754_powf+0x5a>
 810cb50:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 810cb54:	d1ee      	bne.n	810cb34 <__ieee754_powf+0x2c>
 810cb56:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 810cb5a:	0064      	lsls	r4, r4, #1
 810cb5c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 810cb60:	e7e6      	b.n	810cb30 <__ieee754_powf+0x28>
 810cb62:	2e00      	cmp	r6, #0
 810cb64:	da1e      	bge.n	810cba4 <__ieee754_powf+0x9c>
 810cb66:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 810cb6a:	d22b      	bcs.n	810cbc4 <__ieee754_powf+0xbc>
 810cb6c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 810cb70:	d332      	bcc.n	810cbd8 <__ieee754_powf+0xd0>
 810cb72:	ea4f 53e9 	mov.w	r3, r9, asr #23
 810cb76:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 810cb7a:	fa49 f503 	asr.w	r5, r9, r3
 810cb7e:	fa05 f303 	lsl.w	r3, r5, r3
 810cb82:	454b      	cmp	r3, r9
 810cb84:	d126      	bne.n	810cbd4 <__ieee754_powf+0xcc>
 810cb86:	f005 0501 	and.w	r5, r5, #1
 810cb8a:	f1c5 0502 	rsb	r5, r5, #2
 810cb8e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 810cb92:	d122      	bne.n	810cbda <__ieee754_powf+0xd2>
 810cb94:	2c00      	cmp	r4, #0
 810cb96:	f280 826f 	bge.w	810d078 <__ieee754_powf+0x570>
 810cb9a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 810cb9e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 810cba2:	e7c9      	b.n	810cb38 <__ieee754_powf+0x30>
 810cba4:	2500      	movs	r5, #0
 810cba6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 810cbaa:	d1f0      	bne.n	810cb8e <__ieee754_powf+0x86>
 810cbac:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 810cbb0:	f000 825c 	beq.w	810d06c <__ieee754_powf+0x564>
 810cbb4:	d908      	bls.n	810cbc8 <__ieee754_powf+0xc0>
 810cbb6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 810cf18 <__ieee754_powf+0x410>
 810cbba:	2c00      	cmp	r4, #0
 810cbbc:	bfa8      	it	ge
 810cbbe:	eeb0 0a68 	vmovge.f32	s0, s17
 810cbc2:	e7b9      	b.n	810cb38 <__ieee754_powf+0x30>
 810cbc4:	2502      	movs	r5, #2
 810cbc6:	e7ee      	b.n	810cba6 <__ieee754_powf+0x9e>
 810cbc8:	2c00      	cmp	r4, #0
 810cbca:	f280 8252 	bge.w	810d072 <__ieee754_powf+0x56a>
 810cbce:	eeb1 0a68 	vneg.f32	s0, s17
 810cbd2:	e7b1      	b.n	810cb38 <__ieee754_powf+0x30>
 810cbd4:	2500      	movs	r5, #0
 810cbd6:	e7da      	b.n	810cb8e <__ieee754_powf+0x86>
 810cbd8:	2500      	movs	r5, #0
 810cbda:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 810cbde:	d102      	bne.n	810cbe6 <__ieee754_powf+0xde>
 810cbe0:	ee28 0a08 	vmul.f32	s0, s16, s16
 810cbe4:	e7a8      	b.n	810cb38 <__ieee754_powf+0x30>
 810cbe6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 810cbea:	d109      	bne.n	810cc00 <__ieee754_powf+0xf8>
 810cbec:	2e00      	cmp	r6, #0
 810cbee:	db07      	blt.n	810cc00 <__ieee754_powf+0xf8>
 810cbf0:	eeb0 0a48 	vmov.f32	s0, s16
 810cbf4:	ecbd 8b02 	vpop	{d8}
 810cbf8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cbfc:	f000 bae8 	b.w	810d1d0 <__ieee754_sqrtf>
 810cc00:	eeb0 0a48 	vmov.f32	s0, s16
 810cc04:	f000 fa50 	bl	810d0a8 <fabsf>
 810cc08:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 810cc0c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 810cc10:	4647      	mov	r7, r8
 810cc12:	d002      	beq.n	810cc1a <__ieee754_powf+0x112>
 810cc14:	f1b8 0f00 	cmp.w	r8, #0
 810cc18:	d117      	bne.n	810cc4a <__ieee754_powf+0x142>
 810cc1a:	2c00      	cmp	r4, #0
 810cc1c:	bfbc      	itt	lt
 810cc1e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 810cc22:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 810cc26:	2e00      	cmp	r6, #0
 810cc28:	da86      	bge.n	810cb38 <__ieee754_powf+0x30>
 810cc2a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 810cc2e:	ea58 0805 	orrs.w	r8, r8, r5
 810cc32:	d104      	bne.n	810cc3e <__ieee754_powf+0x136>
 810cc34:	ee70 7a40 	vsub.f32	s15, s0, s0
 810cc38:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 810cc3c:	e77c      	b.n	810cb38 <__ieee754_powf+0x30>
 810cc3e:	2d01      	cmp	r5, #1
 810cc40:	f47f af7a 	bne.w	810cb38 <__ieee754_powf+0x30>
 810cc44:	eeb1 0a40 	vneg.f32	s0, s0
 810cc48:	e776      	b.n	810cb38 <__ieee754_powf+0x30>
 810cc4a:	0ff0      	lsrs	r0, r6, #31
 810cc4c:	3801      	subs	r0, #1
 810cc4e:	ea55 0300 	orrs.w	r3, r5, r0
 810cc52:	d104      	bne.n	810cc5e <__ieee754_powf+0x156>
 810cc54:	ee38 8a48 	vsub.f32	s16, s16, s16
 810cc58:	ee88 0a08 	vdiv.f32	s0, s16, s16
 810cc5c:	e76c      	b.n	810cb38 <__ieee754_powf+0x30>
 810cc5e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 810cc62:	d973      	bls.n	810cd4c <__ieee754_powf+0x244>
 810cc64:	4bad      	ldr	r3, [pc, #692]	@ (810cf1c <__ieee754_powf+0x414>)
 810cc66:	4598      	cmp	r8, r3
 810cc68:	d808      	bhi.n	810cc7c <__ieee754_powf+0x174>
 810cc6a:	2c00      	cmp	r4, #0
 810cc6c:	da0b      	bge.n	810cc86 <__ieee754_powf+0x17e>
 810cc6e:	2000      	movs	r0, #0
 810cc70:	ecbd 8b02 	vpop	{d8}
 810cc74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cc78:	f000 baa4 	b.w	810d1c4 <__math_oflowf>
 810cc7c:	4ba8      	ldr	r3, [pc, #672]	@ (810cf20 <__ieee754_powf+0x418>)
 810cc7e:	4598      	cmp	r8, r3
 810cc80:	d908      	bls.n	810cc94 <__ieee754_powf+0x18c>
 810cc82:	2c00      	cmp	r4, #0
 810cc84:	dcf3      	bgt.n	810cc6e <__ieee754_powf+0x166>
 810cc86:	2000      	movs	r0, #0
 810cc88:	ecbd 8b02 	vpop	{d8}
 810cc8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cc90:	f000 ba92 	b.w	810d1b8 <__math_uflowf>
 810cc94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 810cc98:	ee30 0a67 	vsub.f32	s0, s0, s15
 810cc9c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 810cf24 <__ieee754_powf+0x41c>
 810cca0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 810cca4:	eee0 6a67 	vfms.f32	s13, s0, s15
 810cca8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 810ccac:	eee6 7ac0 	vfms.f32	s15, s13, s0
 810ccb0:	ee20 7a00 	vmul.f32	s14, s0, s0
 810ccb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 810ccb8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 810cf28 <__ieee754_powf+0x420>
 810ccbc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 810ccc0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 810cf2c <__ieee754_powf+0x424>
 810ccc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 810ccc8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 810cf30 <__ieee754_powf+0x428>
 810cccc:	eef0 6a67 	vmov.f32	s13, s15
 810ccd0:	eee0 6a07 	vfma.f32	s13, s0, s14
 810ccd4:	ee16 3a90 	vmov	r3, s13
 810ccd8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 810ccdc:	f023 030f 	bic.w	r3, r3, #15
 810cce0:	ee06 3a90 	vmov	s13, r3
 810cce4:	eee0 6a47 	vfms.f32	s13, s0, s14
 810cce8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810ccec:	3d01      	subs	r5, #1
 810ccee:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 810ccf2:	4305      	orrs	r5, r0
 810ccf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810ccf8:	f024 040f 	bic.w	r4, r4, #15
 810ccfc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 810cd00:	bf18      	it	ne
 810cd02:	eeb0 8a47 	vmovne.f32	s16, s14
 810cd06:	ee07 4a10 	vmov	s14, r4
 810cd0a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 810cd0e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 810cd12:	ee07 3a90 	vmov	s15, r3
 810cd16:	eee7 0a27 	vfma.f32	s1, s14, s15
 810cd1a:	ee07 4a10 	vmov	s14, r4
 810cd1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 810cd22:	ee30 7aa7 	vadd.f32	s14, s1, s15
 810cd26:	ee17 1a10 	vmov	r1, s14
 810cd2a:	2900      	cmp	r1, #0
 810cd2c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 810cd30:	f340 80dd 	ble.w	810ceee <__ieee754_powf+0x3e6>
 810cd34:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 810cd38:	f240 80ca 	bls.w	810ced0 <__ieee754_powf+0x3c8>
 810cd3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cd44:	bf4c      	ite	mi
 810cd46:	2001      	movmi	r0, #1
 810cd48:	2000      	movpl	r0, #0
 810cd4a:	e791      	b.n	810cc70 <__ieee754_powf+0x168>
 810cd4c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 810cd50:	bf01      	itttt	eq
 810cd52:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 810cf34 <__ieee754_powf+0x42c>
 810cd56:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 810cd5a:	f06f 0317 	mvneq.w	r3, #23
 810cd5e:	ee17 7a90 	vmoveq	r7, s15
 810cd62:	ea4f 52e7 	mov.w	r2, r7, asr #23
 810cd66:	bf18      	it	ne
 810cd68:	2300      	movne	r3, #0
 810cd6a:	3a7f      	subs	r2, #127	@ 0x7f
 810cd6c:	441a      	add	r2, r3
 810cd6e:	4b72      	ldr	r3, [pc, #456]	@ (810cf38 <__ieee754_powf+0x430>)
 810cd70:	f3c7 0716 	ubfx	r7, r7, #0, #23
 810cd74:	429f      	cmp	r7, r3
 810cd76:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 810cd7a:	dd06      	ble.n	810cd8a <__ieee754_powf+0x282>
 810cd7c:	4b6f      	ldr	r3, [pc, #444]	@ (810cf3c <__ieee754_powf+0x434>)
 810cd7e:	429f      	cmp	r7, r3
 810cd80:	f340 80a4 	ble.w	810cecc <__ieee754_powf+0x3c4>
 810cd84:	3201      	adds	r2, #1
 810cd86:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 810cd8a:	2600      	movs	r6, #0
 810cd8c:	4b6c      	ldr	r3, [pc, #432]	@ (810cf40 <__ieee754_powf+0x438>)
 810cd8e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 810cd92:	ee07 1a10 	vmov	s14, r1
 810cd96:	edd3 5a00 	vldr	s11, [r3]
 810cd9a:	4b6a      	ldr	r3, [pc, #424]	@ (810cf44 <__ieee754_powf+0x43c>)
 810cd9c:	ee75 7a87 	vadd.f32	s15, s11, s14
 810cda0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810cda4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 810cda8:	1049      	asrs	r1, r1, #1
 810cdaa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 810cdae:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 810cdb2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 810cdb6:	ee37 6a65 	vsub.f32	s12, s14, s11
 810cdba:	ee07 1a90 	vmov	s15, r1
 810cdbe:	ee26 5a24 	vmul.f32	s10, s12, s9
 810cdc2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 810cdc6:	ee15 7a10 	vmov	r7, s10
 810cdca:	401f      	ands	r7, r3
 810cdcc:	ee06 7a90 	vmov	s13, r7
 810cdd0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 810cdd4:	ee37 7a65 	vsub.f32	s14, s14, s11
 810cdd8:	ee65 7a05 	vmul.f32	s15, s10, s10
 810cddc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 810cde0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 810cf48 <__ieee754_powf+0x440>
 810cde4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810cf4c <__ieee754_powf+0x444>
 810cde8:	eee7 5a87 	vfma.f32	s11, s15, s14
 810cdec:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 810cf50 <__ieee754_powf+0x448>
 810cdf0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810cdf4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 810cf24 <__ieee754_powf+0x41c>
 810cdf8:	eee7 5a27 	vfma.f32	s11, s14, s15
 810cdfc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 810cf54 <__ieee754_powf+0x44c>
 810ce00:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810ce04:	eddf 5a54 	vldr	s11, [pc, #336]	@ 810cf58 <__ieee754_powf+0x450>
 810ce08:	ee26 6a24 	vmul.f32	s12, s12, s9
 810ce0c:	eee7 5a27 	vfma.f32	s11, s14, s15
 810ce10:	ee35 7a26 	vadd.f32	s14, s10, s13
 810ce14:	ee67 4aa7 	vmul.f32	s9, s15, s15
 810ce18:	ee27 7a06 	vmul.f32	s14, s14, s12
 810ce1c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 810ce20:	eea4 7aa5 	vfma.f32	s14, s9, s11
 810ce24:	eef0 5a67 	vmov.f32	s11, s15
 810ce28:	eee6 5aa6 	vfma.f32	s11, s13, s13
 810ce2c:	ee75 5a87 	vadd.f32	s11, s11, s14
 810ce30:	ee15 1a90 	vmov	r1, s11
 810ce34:	4019      	ands	r1, r3
 810ce36:	ee05 1a90 	vmov	s11, r1
 810ce3a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810ce3e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 810ce42:	ee77 7a67 	vsub.f32	s15, s14, s15
 810ce46:	ee67 7a85 	vmul.f32	s15, s15, s10
 810ce4a:	eee6 7a25 	vfma.f32	s15, s12, s11
 810ce4e:	eeb0 6a67 	vmov.f32	s12, s15
 810ce52:	eea6 6aa5 	vfma.f32	s12, s13, s11
 810ce56:	ee16 1a10 	vmov	r1, s12
 810ce5a:	4019      	ands	r1, r3
 810ce5c:	ee06 1a10 	vmov	s12, r1
 810ce60:	eeb0 7a46 	vmov.f32	s14, s12
 810ce64:	eea6 7ae5 	vfms.f32	s14, s13, s11
 810ce68:	493c      	ldr	r1, [pc, #240]	@ (810cf5c <__ieee754_powf+0x454>)
 810ce6a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 810ce6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ce72:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 810cf60 <__ieee754_powf+0x458>
 810ce76:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 810cf64 <__ieee754_powf+0x45c>
 810ce7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 810ce7e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 810cf68 <__ieee754_powf+0x460>
 810ce82:	eee6 7a07 	vfma.f32	s15, s12, s14
 810ce86:	ed91 7a00 	vldr	s14, [r1]
 810ce8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ce8e:	ee07 2a10 	vmov	s14, r2
 810ce92:	eef0 6a67 	vmov.f32	s13, s15
 810ce96:	4a35      	ldr	r2, [pc, #212]	@ (810cf6c <__ieee754_powf+0x464>)
 810ce98:	eee6 6a25 	vfma.f32	s13, s12, s11
 810ce9c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 810cea0:	ed92 5a00 	vldr	s10, [r2]
 810cea4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810cea8:	ee76 6a85 	vadd.f32	s13, s13, s10
 810ceac:	ee76 6a87 	vadd.f32	s13, s13, s14
 810ceb0:	ee16 2a90 	vmov	r2, s13
 810ceb4:	4013      	ands	r3, r2
 810ceb6:	ee06 3a90 	vmov	s13, r3
 810ceba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 810cebe:	ee37 7a45 	vsub.f32	s14, s14, s10
 810cec2:	eea6 7a65 	vfms.f32	s14, s12, s11
 810cec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ceca:	e70f      	b.n	810ccec <__ieee754_powf+0x1e4>
 810cecc:	2601      	movs	r6, #1
 810cece:	e75d      	b.n	810cd8c <__ieee754_powf+0x284>
 810ced0:	d152      	bne.n	810cf78 <__ieee754_powf+0x470>
 810ced2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 810cf70 <__ieee754_powf+0x468>
 810ced6:	ee37 7a67 	vsub.f32	s14, s14, s15
 810ceda:	ee70 6aa6 	vadd.f32	s13, s1, s13
 810cede:	eef4 6ac7 	vcmpe.f32	s13, s14
 810cee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cee6:	f73f af29 	bgt.w	810cd3c <__ieee754_powf+0x234>
 810ceea:	2386      	movs	r3, #134	@ 0x86
 810ceec:	e048      	b.n	810cf80 <__ieee754_powf+0x478>
 810ceee:	4a21      	ldr	r2, [pc, #132]	@ (810cf74 <__ieee754_powf+0x46c>)
 810cef0:	4293      	cmp	r3, r2
 810cef2:	d907      	bls.n	810cf04 <__ieee754_powf+0x3fc>
 810cef4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810cef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cefc:	bf4c      	ite	mi
 810cefe:	2001      	movmi	r0, #1
 810cf00:	2000      	movpl	r0, #0
 810cf02:	e6c1      	b.n	810cc88 <__ieee754_powf+0x180>
 810cf04:	d138      	bne.n	810cf78 <__ieee754_powf+0x470>
 810cf06:	ee37 7a67 	vsub.f32	s14, s14, s15
 810cf0a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 810cf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cf12:	dbea      	blt.n	810ceea <__ieee754_powf+0x3e2>
 810cf14:	e7ee      	b.n	810cef4 <__ieee754_powf+0x3ec>
 810cf16:	bf00      	nop
 810cf18:	00000000 	.word	0x00000000
 810cf1c:	3f7ffff3 	.word	0x3f7ffff3
 810cf20:	3f800007 	.word	0x3f800007
 810cf24:	3eaaaaab 	.word	0x3eaaaaab
 810cf28:	3fb8aa3b 	.word	0x3fb8aa3b
 810cf2c:	36eca570 	.word	0x36eca570
 810cf30:	3fb8aa00 	.word	0x3fb8aa00
 810cf34:	4b800000 	.word	0x4b800000
 810cf38:	001cc471 	.word	0x001cc471
 810cf3c:	005db3d6 	.word	0x005db3d6
 810cf40:	0810d290 	.word	0x0810d290
 810cf44:	fffff000 	.word	0xfffff000
 810cf48:	3e6c3255 	.word	0x3e6c3255
 810cf4c:	3e53f142 	.word	0x3e53f142
 810cf50:	3e8ba305 	.word	0x3e8ba305
 810cf54:	3edb6db7 	.word	0x3edb6db7
 810cf58:	3f19999a 	.word	0x3f19999a
 810cf5c:	0810d280 	.word	0x0810d280
 810cf60:	3f76384f 	.word	0x3f76384f
 810cf64:	3f763800 	.word	0x3f763800
 810cf68:	369dc3a0 	.word	0x369dc3a0
 810cf6c:	0810d288 	.word	0x0810d288
 810cf70:	3338aa3c 	.word	0x3338aa3c
 810cf74:	43160000 	.word	0x43160000
 810cf78:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 810cf7c:	d971      	bls.n	810d062 <__ieee754_powf+0x55a>
 810cf7e:	15db      	asrs	r3, r3, #23
 810cf80:	3b7e      	subs	r3, #126	@ 0x7e
 810cf82:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810cf86:	4118      	asrs	r0, r3
 810cf88:	4408      	add	r0, r1
 810cf8a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 810cf8e:	4a3c      	ldr	r2, [pc, #240]	@ (810d080 <__ieee754_powf+0x578>)
 810cf90:	3b7f      	subs	r3, #127	@ 0x7f
 810cf92:	411a      	asrs	r2, r3
 810cf94:	4002      	ands	r2, r0
 810cf96:	ee07 2a10 	vmov	s14, r2
 810cf9a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 810cf9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 810cfa2:	f1c3 0317 	rsb	r3, r3, #23
 810cfa6:	4118      	asrs	r0, r3
 810cfa8:	2900      	cmp	r1, #0
 810cfaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810cfae:	bfb8      	it	lt
 810cfb0:	4240      	neglt	r0, r0
 810cfb2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 810cfb6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 810d084 <__ieee754_powf+0x57c>
 810cfba:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 810d088 <__ieee754_powf+0x580>
 810cfbe:	ee17 3a10 	vmov	r3, s14
 810cfc2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 810cfc6:	f023 030f 	bic.w	r3, r3, #15
 810cfca:	ee07 3a10 	vmov	s14, r3
 810cfce:	ee77 7a67 	vsub.f32	s15, s14, s15
 810cfd2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 810cfd6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 810cfda:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 810d08c <__ieee754_powf+0x584>
 810cfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 810cfe2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 810cfe6:	eef0 6a67 	vmov.f32	s13, s15
 810cfea:	eee7 6a06 	vfma.f32	s13, s14, s12
 810cfee:	eef0 5a66 	vmov.f32	s11, s13
 810cff2:	eee7 5a46 	vfms.f32	s11, s14, s12
 810cff6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 810cffa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 810cffe:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 810d090 <__ieee754_powf+0x588>
 810d002:	eddf 5a24 	vldr	s11, [pc, #144]	@ 810d094 <__ieee754_powf+0x58c>
 810d006:	eea7 6a25 	vfma.f32	s12, s14, s11
 810d00a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 810d098 <__ieee754_powf+0x590>
 810d00e:	eee6 5a07 	vfma.f32	s11, s12, s14
 810d012:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 810d09c <__ieee754_powf+0x594>
 810d016:	eea5 6a87 	vfma.f32	s12, s11, s14
 810d01a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 810d0a0 <__ieee754_powf+0x598>
 810d01e:	eee6 5a07 	vfma.f32	s11, s12, s14
 810d022:	eeb0 6a66 	vmov.f32	s12, s13
 810d026:	eea5 6ac7 	vfms.f32	s12, s11, s14
 810d02a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 810d02e:	ee66 5a86 	vmul.f32	s11, s13, s12
 810d032:	ee36 6a47 	vsub.f32	s12, s12, s14
 810d036:	eee6 7aa7 	vfma.f32	s15, s13, s15
 810d03a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 810d03e:	ee77 7a67 	vsub.f32	s15, s14, s15
 810d042:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810d046:	ee30 0a67 	vsub.f32	s0, s0, s15
 810d04a:	ee10 3a10 	vmov	r3, s0
 810d04e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 810d052:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810d056:	da06      	bge.n	810d066 <__ieee754_powf+0x55e>
 810d058:	f000 f82e 	bl	810d0b8 <scalbnf>
 810d05c:	ee20 0a08 	vmul.f32	s0, s0, s16
 810d060:	e56a      	b.n	810cb38 <__ieee754_powf+0x30>
 810d062:	2000      	movs	r0, #0
 810d064:	e7a5      	b.n	810cfb2 <__ieee754_powf+0x4aa>
 810d066:	ee00 3a10 	vmov	s0, r3
 810d06a:	e7f7      	b.n	810d05c <__ieee754_powf+0x554>
 810d06c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 810d070:	e562      	b.n	810cb38 <__ieee754_powf+0x30>
 810d072:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 810d0a4 <__ieee754_powf+0x59c>
 810d076:	e55f      	b.n	810cb38 <__ieee754_powf+0x30>
 810d078:	eeb0 0a48 	vmov.f32	s0, s16
 810d07c:	e55c      	b.n	810cb38 <__ieee754_powf+0x30>
 810d07e:	bf00      	nop
 810d080:	ff800000 	.word	0xff800000
 810d084:	3f317218 	.word	0x3f317218
 810d088:	3f317200 	.word	0x3f317200
 810d08c:	35bfbe8c 	.word	0x35bfbe8c
 810d090:	b5ddea0e 	.word	0xb5ddea0e
 810d094:	3331bb4c 	.word	0x3331bb4c
 810d098:	388ab355 	.word	0x388ab355
 810d09c:	bb360b61 	.word	0xbb360b61
 810d0a0:	3e2aaaab 	.word	0x3e2aaaab
 810d0a4:	00000000 	.word	0x00000000

0810d0a8 <fabsf>:
 810d0a8:	ee10 3a10 	vmov	r3, s0
 810d0ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810d0b0:	ee00 3a10 	vmov	s0, r3
 810d0b4:	4770      	bx	lr
	...

0810d0b8 <scalbnf>:
 810d0b8:	ee10 3a10 	vmov	r3, s0
 810d0bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 810d0c0:	d02b      	beq.n	810d11a <scalbnf+0x62>
 810d0c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 810d0c6:	d302      	bcc.n	810d0ce <scalbnf+0x16>
 810d0c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 810d0cc:	4770      	bx	lr
 810d0ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 810d0d2:	d123      	bne.n	810d11c <scalbnf+0x64>
 810d0d4:	4b24      	ldr	r3, [pc, #144]	@ (810d168 <scalbnf+0xb0>)
 810d0d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 810d16c <scalbnf+0xb4>
 810d0da:	4298      	cmp	r0, r3
 810d0dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 810d0e0:	db17      	blt.n	810d112 <scalbnf+0x5a>
 810d0e2:	ee10 3a10 	vmov	r3, s0
 810d0e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810d0ea:	3a19      	subs	r2, #25
 810d0ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 810d0f0:	4288      	cmp	r0, r1
 810d0f2:	dd15      	ble.n	810d120 <scalbnf+0x68>
 810d0f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 810d170 <scalbnf+0xb8>
 810d0f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 810d174 <scalbnf+0xbc>
 810d0fc:	ee10 3a10 	vmov	r3, s0
 810d100:	eeb0 7a67 	vmov.f32	s14, s15
 810d104:	2b00      	cmp	r3, #0
 810d106:	bfb8      	it	lt
 810d108:	eef0 7a66 	vmovlt.f32	s15, s13
 810d10c:	ee27 0a87 	vmul.f32	s0, s15, s14
 810d110:	4770      	bx	lr
 810d112:	eddf 7a19 	vldr	s15, [pc, #100]	@ 810d178 <scalbnf+0xc0>
 810d116:	ee27 0a80 	vmul.f32	s0, s15, s0
 810d11a:	4770      	bx	lr
 810d11c:	0dd2      	lsrs	r2, r2, #23
 810d11e:	e7e5      	b.n	810d0ec <scalbnf+0x34>
 810d120:	4410      	add	r0, r2
 810d122:	28fe      	cmp	r0, #254	@ 0xfe
 810d124:	dce6      	bgt.n	810d0f4 <scalbnf+0x3c>
 810d126:	2800      	cmp	r0, #0
 810d128:	dd06      	ble.n	810d138 <scalbnf+0x80>
 810d12a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 810d12e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810d132:	ee00 3a10 	vmov	s0, r3
 810d136:	4770      	bx	lr
 810d138:	f110 0f16 	cmn.w	r0, #22
 810d13c:	da09      	bge.n	810d152 <scalbnf+0x9a>
 810d13e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 810d178 <scalbnf+0xc0>
 810d142:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 810d17c <scalbnf+0xc4>
 810d146:	ee10 3a10 	vmov	r3, s0
 810d14a:	eeb0 7a67 	vmov.f32	s14, s15
 810d14e:	2b00      	cmp	r3, #0
 810d150:	e7d9      	b.n	810d106 <scalbnf+0x4e>
 810d152:	3019      	adds	r0, #25
 810d154:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 810d158:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810d15c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 810d180 <scalbnf+0xc8>
 810d160:	ee07 3a90 	vmov	s15, r3
 810d164:	e7d7      	b.n	810d116 <scalbnf+0x5e>
 810d166:	bf00      	nop
 810d168:	ffff3cb0 	.word	0xffff3cb0
 810d16c:	4c000000 	.word	0x4c000000
 810d170:	7149f2ca 	.word	0x7149f2ca
 810d174:	f149f2ca 	.word	0xf149f2ca
 810d178:	0da24260 	.word	0x0da24260
 810d17c:	8da24260 	.word	0x8da24260
 810d180:	33000000 	.word	0x33000000

0810d184 <with_errnof>:
 810d184:	b510      	push	{r4, lr}
 810d186:	ed2d 8b02 	vpush	{d8}
 810d18a:	eeb0 8a40 	vmov.f32	s16, s0
 810d18e:	4604      	mov	r4, r0
 810d190:	f7fe fe7c 	bl	810be8c <__errno>
 810d194:	eeb0 0a48 	vmov.f32	s0, s16
 810d198:	ecbd 8b02 	vpop	{d8}
 810d19c:	6004      	str	r4, [r0, #0]
 810d19e:	bd10      	pop	{r4, pc}

0810d1a0 <xflowf>:
 810d1a0:	b130      	cbz	r0, 810d1b0 <xflowf+0x10>
 810d1a2:	eef1 7a40 	vneg.f32	s15, s0
 810d1a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 810d1aa:	2022      	movs	r0, #34	@ 0x22
 810d1ac:	f7ff bfea 	b.w	810d184 <with_errnof>
 810d1b0:	eef0 7a40 	vmov.f32	s15, s0
 810d1b4:	e7f7      	b.n	810d1a6 <xflowf+0x6>
	...

0810d1b8 <__math_uflowf>:
 810d1b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810d1c0 <__math_uflowf+0x8>
 810d1bc:	f7ff bff0 	b.w	810d1a0 <xflowf>
 810d1c0:	10000000 	.word	0x10000000

0810d1c4 <__math_oflowf>:
 810d1c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810d1cc <__math_oflowf+0x8>
 810d1c8:	f7ff bfea 	b.w	810d1a0 <xflowf>
 810d1cc:	70000000 	.word	0x70000000

0810d1d0 <__ieee754_sqrtf>:
 810d1d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810d1d4:	4770      	bx	lr
	...

0810d1d8 <_init>:
 810d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d1da:	bf00      	nop
 810d1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d1de:	bc08      	pop	{r3}
 810d1e0:	469e      	mov	lr, r3
 810d1e2:	4770      	bx	lr

0810d1e4 <_fini>:
 810d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d1e6:	bf00      	nop
 810d1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d1ea:	bc08      	pop	{r3}
 810d1ec:	469e      	mov	lr, r3
 810d1ee:	4770      	bx	lr
