
BNO086_BNO055_UROS_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  0801cd28  0801cd28  0001dd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc38  0801dc38  0001f3c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801dc38  0801dc38  0001ec38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc40  0801dc40  0001f3c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801dc40  0801dc40  0001ec40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801dc48  0801dc48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  24000000  0801dc4c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000300  0801df4c  0001f300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000360  0801dfac  0001f360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012e50  240003c0  0801e00c  0001f3c0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24013210  0801e00c  00020210  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001f3c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002bc26  00000000  00000000  0001f3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000058ad  00000000  00000000  0004b014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e58  00000000  00000000  000508c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001756  00000000  00000000  00052720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000432d2  00000000  00000000  00053e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002bc7a  00000000  00000000  00097148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a34e0  00000000  00000000  000c2dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000076  00000000  00000000  002662a2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008bfc  00000000  00000000  00266318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008f  00000000  00000000  0026ef14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003c0 	.word	0x240003c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801cd0c 	.word	0x0801cd0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003c4 	.word	0x240003c4
 80002dc:	0801cd0c 	.word	0x0801cd0c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <BNO055_READ_HSEM>:
		HAL_HSEM_Release(HSEM_ID_1,0);
	}
}

#else
void BNO055_READ_HSEM(BNO055_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 8000748:	2001      	movs	r0, #1
 800074a:	f005 fc51 	bl	8005ff0 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d178      	bne.n	8000846 <BNO055_READ_HSEM+0x106>
		bno->quat.x = SRAM4_BNO055->Data[1];
 8000754:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000756:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		bno->quat.y = SRAM4_BNO055->Data[2];
 8000760:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		bno->quat.z = SRAM4_BNO055->Data[3];
 800076c:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800076e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		bno->quat.w = SRAM4_BNO055->Data[4];
 8000778:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800077a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

		bno->lin_acc.x = SRAM4_BNO055->Data[5];
 8000784:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000786:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = SRAM4_BNO055->Data[6];
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000792:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = SRAM4_BNO055->Data[7];
 800079c:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800079e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->gyro.x = SRAM4_BNO055->Data[8];
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		bno->gyro.y = SRAM4_BNO055->Data[9];
 80007b4:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		bno->gyro.z = SRAM4_BNO055->Data[10];
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		bno->mag.x = SRAM4_BNO055->Data[11];
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bno->mag.y = SRAM4_BNO055->Data[12];
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		bno->mag.z = SRAM4_BNO055->Data[13];
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007e6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

		bno->accel.x = SRAM4_BNO055->Data[14];
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bno->accel.y = SRAM4_BNO055->Data[15];
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 80007fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bno->accel.z = SRAM4_BNO055->Data[16];
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800080a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	e9c1 2306 	strd	r2, r3, [r1, #24]

		bno->euler.roll = SRAM4_BNO055->Data[17];
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000816:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		bno->euler.pitch = SRAM4_BNO055->Data[18];
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 8000822:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		bno->euler.yaw = SRAM4_BNO055->Data[19];
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800082e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		SRAM4_BNO055->State1 = 1;
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <BNO055_READ_HSEM+0x110>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_Release(HSEM_ID_1,0);
 800083e:	2100      	movs	r1, #0
 8000840:	2001      	movs	r0, #1
 8000842:	f005 fbef 	bl	8006024 <HAL_HSEM_Release>

	}
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	38002000 	.word	0x38002000

08000854 <BNO086_READ_HSEM>:
		}
	}
}
#else

void BNO086_READ_HSEM(BNO086_t *bno){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 800085c:	2000      	movs	r0, #0
 800085e:	f005 fbc7 	bl	8005ff0 <HAL_HSEM_FastTake>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	f040 80b3 	bne.w	80009d0 <BNO086_READ_HSEM+0x17c>
    	bno->quaternion.i = SRAM4_BNO086->Data[0];
 800086a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800086e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4_BNO086->Data[1];
 800087c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000880:	ed93 7b04 	vldr	d7, [r3, #16]
 8000884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4_BNO086->Data[2];
 800088e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000892:	ed93 7b06 	vldr	d7, [r3, #24]
 8000896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4_BNO086->Data[3];
 80008a0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008a4:	ed93 7b08 	vldr	d7, [r3, #32]
 80008a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4_BNO086->Data[4];
 80008b2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008b6:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80008ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4_BNO086->Data[5];
 80008c4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008c8:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80008cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4_BNO086->Data[6];
 80008d6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008da:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80008de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4_BNO086->Data[7];
 80008e8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008ec:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80008f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4_BNO086->Data[8];
 80008fa:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008fe:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 8000902:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4_BNO086->Data[9];
 800090c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000910:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000914:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4_BNO086->Data[10];
 800091e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000922:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8000926:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4_BNO086->Data[11];
 8000930:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000934:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4_BNO086->Data[12];
 8000942:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000946:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800094a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4_BNO086->Data[13];
 8000954:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000958:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800095c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4_BNO086->Data[14];
 8000966:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800096a:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800096e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4_BNO086->Data[15];
 8000978:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800097c:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 8000980:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4_BNO086->Data[16];
 800098a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800098e:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 8000992:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4_BNO086->Data[17];
 800099c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009a0:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80009a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4_BNO086->Data[18];
 80009ae:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009b2:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80009b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		SRAM4_BNO086->State1 = 1;
 80009c0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f005 fb2a 	bl	8006024 <HAL_HSEM_Release>
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009dc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad4 <SystemInit+0xfc>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ad4 <SystemInit+0xfc>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80009ec:	4b39      	ldr	r3, [pc, #228]	@ (8000ad4 <SystemInit+0xfc>)
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	4a38      	ldr	r2, [pc, #224]	@ (8000ad4 <SystemInit+0xfc>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009f8:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <SystemInit+0x100>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	2b06      	cmp	r3, #6
 8000a02:	d807      	bhi.n	8000a14 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a04:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <SystemInit+0x100>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 030f 	bic.w	r3, r3, #15
 8000a0c:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <SystemInit+0x100>)
 8000a0e:	f043 0307 	orr.w	r3, r3, #7
 8000a12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a14:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <SystemInit+0x104>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a30      	ldr	r2, [pc, #192]	@ (8000adc <SystemInit+0x104>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <SystemInit+0x104>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <SystemInit+0x104>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	492c      	ldr	r1, [pc, #176]	@ (8000adc <SystemInit+0x104>)
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <SystemInit+0x108>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <SystemInit+0x100>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <SystemInit+0x100>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f023 030f 	bic.w	r3, r3, #15
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <SystemInit+0x100>)
 8000a48:	f043 0307 	orr.w	r3, r3, #7
 8000a4c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <SystemInit+0x104>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <SystemInit+0x104>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <SystemInit+0x104>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <SystemInit+0x104>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <SystemInit+0x10c>)
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <SystemInit+0x104>)
 8000a68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <SystemInit+0x110>)
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <SystemInit+0x104>)
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <SystemInit+0x114>)
 8000a70:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <SystemInit+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <SystemInit+0x104>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <SystemInit+0x114>)
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <SystemInit+0x104>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <SystemInit+0x104>)
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <SystemInit+0x114>)
 8000a88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <SystemInit+0x104>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <SystemInit+0x104>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <SystemInit+0x104>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <SystemInit+0x104>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <SystemInit+0x118>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <SystemInit+0x118>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <SystemInit+0x11c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <SystemInit+0x120>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aba:	d202      	bcs.n	8000ac2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <SystemInit+0x124>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <SystemInit+0x128>)
 8000ac4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ac8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	52002000 	.word	0x52002000
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae4:	02020200 	.word	0x02020200
 8000ae8:	01ff0000 	.word	0x01ff0000
 8000aec:	01010280 	.word	0x01010280
 8000af0:	580000c0 	.word	0x580000c0
 8000af4:	5c001000 	.word	0x5c001000
 8000af8:	ffff0000 	.word	0xffff0000
 8000afc:	51008108 	.word	0x51008108
 8000b00:	52004000 	.word	0x52004000

08000b04 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000b10:	f00c fb7a 	bl	800d208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000b14:	4b5a      	ldr	r3, [pc, #360]	@ (8000c80 <pvPortMallocMicroROS+0x17c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000b1c:	f000 f986 	bl	8000e2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b20:	4b58      	ldr	r3, [pc, #352]	@ (8000c84 <pvPortMallocMicroROS+0x180>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f040 8090 	bne.w	8000c4e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01e      	beq.n	8000b72 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000b34:	2208      	movs	r2, #8
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d015      	beq.n	8000b72 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f023 0307 	bic.w	r3, r3, #7
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b5e:	f383 8811 	msr	BASEPRI, r3
 8000b62:	f3bf 8f6f 	isb	sy
 8000b66:	f3bf 8f4f 	dsb	sy
 8000b6a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	e7fd      	b.n	8000b6e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d06a      	beq.n	8000c4e <pvPortMallocMicroROS+0x14a>
 8000b78:	4b43      	ldr	r3, [pc, #268]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d865      	bhi.n	8000c4e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b82:	4b42      	ldr	r3, [pc, #264]	@ (8000c8c <pvPortMallocMicroROS+0x188>)
 8000b84:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b86:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <pvPortMallocMicroROS+0x188>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b8c:	e004      	b.n	8000b98 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d903      	bls.n	8000baa <pvPortMallocMicroROS+0xa6>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f1      	bne.n	8000b8e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000baa:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <pvPortMallocMicroROS+0x17c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d04c      	beq.n	8000c4e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2208      	movs	r2, #8
 8000bba:	4413      	add	r3, r2
 8000bbc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1ad2      	subs	r2, r2, r3
 8000bce:	2308      	movs	r3, #8
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d920      	bls.n	8000c18 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	613b      	str	r3, [r7, #16]
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1ad2      	subs	r2, r2, r3
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c12:	69b8      	ldr	r0, [r7, #24]
 8000c14:	f000 f96c 	bl	8000ef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <pvPortMallocMicroROS+0x18c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d203      	bcs.n	8000c3a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <pvPortMallocMicroROS+0x184>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a16      	ldr	r2, [pc, #88]	@ (8000c90 <pvPortMallocMicroROS+0x18c>)
 8000c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <pvPortMallocMicroROS+0x180>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c4e:	f00c fae9 	bl	800d224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00b      	beq.n	8000c74 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c60:	f383 8811 	msr	BASEPRI, r3
 8000c64:	f3bf 8f6f 	isb	sy
 8000c68:	f3bf 8f4f 	dsb	sy
 8000c6c:	60fb      	str	r3, [r7, #12]
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000c74:	69fb      	ldr	r3, [r7, #28]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24003fe4 	.word	0x24003fe4
 8000c84:	24003ff0 	.word	0x24003ff0
 8000c88:	24003fe8 	.word	0x24003fe8
 8000c8c:	24003fdc 	.word	0x24003fdc
 8000c90:	24003fec 	.word	0x24003fec

08000c94 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d04a      	beq.n	8000d3c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	425b      	negs	r3, r3
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <vPortFreeMicroROS+0xb0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10b      	bne.n	8000cda <vPortFreeMicroROS+0x46>
	__asm volatile
 8000cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cc6:	f383 8811 	msr	BASEPRI, r3
 8000cca:	f3bf 8f6f 	isb	sy
 8000cce:	f3bf 8f4f 	dsb	sy
 8000cd2:	60fb      	str	r3, [r7, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	e7fd      	b.n	8000cd6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <vPortFreeMicroROS+0x66>
	__asm volatile
 8000ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	60bb      	str	r3, [r7, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <vPortFreeMicroROS+0xb0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d019      	beq.n	8000d3c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d115      	bne.n	8000d3c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <vPortFreeMicroROS+0xb0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000d20:	f00c fa72 	bl	800d208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <vPortFreeMicroROS+0xb4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <vPortFreeMicroROS+0xb4>)
 8000d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d32:	6938      	ldr	r0, [r7, #16]
 8000d34:	f000 f8dc 	bl	8000ef0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000d38:	f00c fa74 	bl	800d224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24003ff0 	.word	0x24003ff0
 8000d48:	24003fe8 	.word	0x24003fe8

08000d4c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4413      	add	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <getBlockSize+0x38>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

	return count;
 8000d74:	68fb      	ldr	r3, [r7, #12]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	24003ff0 	.word	0x24003ff0

08000d88 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d92:	f00c fa39 	bl	800d208 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f7ff feb4 	bl	8000b04 <pvPortMallocMicroROS>
 8000d9c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d017      	beq.n	8000dd4 <pvPortReallocMicroROS+0x4c>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d014      	beq.n	8000dd4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffce 	bl	8000d4c <getBlockSize>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2208      	movs	r2, #8
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d201      	bcs.n	8000dc4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	68b8      	ldr	r0, [r7, #8]
 8000dca:	f01b f95e 	bl	801c08a <memcpy>

		vPortFreeMicroROS(pv);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff60 	bl	8000c94 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000dd4:	f00c fa26 	bl	800d224 <xTaskResumeAll>

	return newmem;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000dec:	f00c fa0c 	bl	800d208 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff fe82 	bl	8000b04 <pvPortMallocMicroROS>
 8000e00:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000e06:	e004      	b.n	8000e12 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	613a      	str	r2, [r7, #16]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	617a      	str	r2, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f5      	bne.n	8000e08 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000e1c:	f00c fa02 	bl	800d224 <xTaskResumeAll>
  	return mem;
 8000e20:	68fb      	ldr	r3, [r7, #12]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000e32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000e36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <prvHeapInit+0xac>)
 8000e3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3307      	adds	r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <prvHeapInit+0xac>)
 8000e5c:	4413      	add	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e64:	4a1d      	ldr	r2, [pc, #116]	@ (8000edc <prvHeapInit+0xb0>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <prvHeapInit+0xb0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000e78:	2208      	movs	r2, #8
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f023 0307 	bic.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000e8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <prvHeapInit+0xb4>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <prvHeapInit+0xb8>)
 8000eba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <prvHeapInit+0xbc>)
 8000ec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <prvHeapInit+0xc0>)
 8000ec6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	240003dc 	.word	0x240003dc
 8000edc:	24003fdc 	.word	0x24003fdc
 8000ee0:	24003fe4 	.word	0x24003fe4
 8000ee4:	24003fec 	.word	0x24003fec
 8000ee8:	24003fe8 	.word	0x24003fe8
 8000eec:	24003ff0 	.word	0x24003ff0

08000ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <prvInsertBlockIntoFreeList+0xac>)
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e002      	b.n	8000f04 <prvInsertBlockIntoFreeList+0x14>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8f7      	bhi.n	8000efe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4413      	add	r3, r2
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d108      	bne.n	8000f32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	441a      	add	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	441a      	add	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d118      	bne.n	8000f78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d00d      	beq.n	8000f6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e008      	b.n	8000f80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e003      	b.n	8000f80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d002      	beq.n	8000f8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	24003fdc 	.word	0x24003fdc
 8000fa0:	24003fe4 	.word	0x24003fe4

08000fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_DMA_Init+0x4c>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_DMA_Init+0x4c>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <MX_DMA_Init+0x4c>)
 8000fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2105      	movs	r1, #5
 8000fcc:	200b      	movs	r0, #11
 8000fce:	f001 fbbb 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fd2:	200b      	movs	r0, #11
 8000fd4:	f001 fbd2 	bl	800277c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2105      	movs	r1, #5
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f001 fbb3 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fe2:	200c      	movs	r0, #12
 8000fe4:	f001 fbca 	bl	800277c <HAL_NVIC_EnableIRQ>

}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001002:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001008:	4904      	ldr	r1, [pc, #16]	@ (800101c <cubemx_transport_open+0x28>)
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f008 fb60 	bl	80096d0 <HAL_UART_Receive_DMA>
    return true;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24003ff4 	.word	0x24003ff4

08001020 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800102e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f008 fb99 	bl	8009768 <HAL_UART_DMAStop>
    return true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001054:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105c:	2b20      	cmp	r3, #32
 800105e:	d11b      	bne.n	8001098 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	6978      	ldr	r0, [r7, #20]
 800106a:	f008 fab1 	bl	80095d0 <HAL_UART_Transmit_DMA>
 800106e:	4603      	mov	r3, r0
 8001070:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001072:	e002      	b.n	800107a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f00a fc43 	bl	800b900 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <cubemx_transport_write+0x4a>
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	2b20      	cmp	r3, #32
 8001088:	d1f4      	bne.n	8001074 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800108a:	7cfb      	ldrb	r3, [r7, #19]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <cubemx_transport_write+0x54>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	e002      	b.n	800109a <cubemx_transport_write+0x5a>
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001098:	2300      	movs	r3, #0
    }
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010b8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010be:	b672      	cpsid	i
}
 80010c0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001234 <cubemx_transport_read+0x190>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d068      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a57      	ldr	r2, [pc, #348]	@ (8001238 <cubemx_transport_read+0x194>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d061      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a55      	ldr	r2, [pc, #340]	@ (800123c <cubemx_transport_read+0x198>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d05a      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <cubemx_transport_read+0x19c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d053      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a50      	ldr	r2, [pc, #320]	@ (8001244 <cubemx_transport_read+0x1a0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04c      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a4d      	ldr	r2, [pc, #308]	@ (8001248 <cubemx_transport_read+0x1a4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d045      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <cubemx_transport_read+0x1a8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d03e      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a48      	ldr	r2, [pc, #288]	@ (8001250 <cubemx_transport_read+0x1ac>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d037      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a46      	ldr	r2, [pc, #280]	@ (8001254 <cubemx_transport_read+0x1b0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d030      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a43      	ldr	r2, [pc, #268]	@ (8001258 <cubemx_transport_read+0x1b4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d029      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a41      	ldr	r2, [pc, #260]	@ (800125c <cubemx_transport_read+0x1b8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a3e      	ldr	r2, [pc, #248]	@ (8001260 <cubemx_transport_read+0x1bc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01b      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a3c      	ldr	r2, [pc, #240]	@ (8001264 <cubemx_transport_read+0x1c0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d014      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a39      	ldr	r2, [pc, #228]	@ (8001268 <cubemx_transport_read+0x1c4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a37      	ldr	r2, [pc, #220]	@ (800126c <cubemx_transport_read+0x1c8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d006      	beq.n	80011a2 <cubemx_transport_read+0xfe>
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a34      	ldr	r2, [pc, #208]	@ (8001270 <cubemx_transport_read+0x1cc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d107      	bne.n	80011b2 <cubemx_transport_read+0x10e>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011b0:	e006      	b.n	80011c0 <cubemx_transport_read+0x11c>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001274 <cubemx_transport_read+0x1d0>)
 80011c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011c4:	b662      	cpsie	i
}
 80011c6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f00a fb96 	bl	800b900 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <cubemx_transport_read+0x1d4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <cubemx_transport_read+0x1d0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d104      	bne.n	80011ea <cubemx_transport_read+0x146>
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f6ff af6a 	blt.w	80010be <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011ee:	e011      	b.n	8001214 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <cubemx_transport_read+0x1d4>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	440b      	add	r3, r1
 80011fa:	4920      	ldr	r1, [pc, #128]	@ (800127c <cubemx_transport_read+0x1d8>)
 80011fc:	5c8a      	ldrb	r2, [r1, r2]
 80011fe:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <cubemx_transport_read+0x1d4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120a:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <cubemx_transport_read+0x1d4>)
 800120c:	6013      	str	r3, [r2, #0]
        wrote++;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3301      	adds	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <cubemx_transport_read+0x1d4>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <cubemx_transport_read+0x1d0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d003      	beq.n	8001228 <cubemx_transport_read+0x184>
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3e3      	bcc.n	80011f0 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001228:	69bb      	ldr	r3, [r7, #24]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020010 	.word	0x40020010
 8001238:	40020028 	.word	0x40020028
 800123c:	40020040 	.word	0x40020040
 8001240:	40020058 	.word	0x40020058
 8001244:	40020070 	.word	0x40020070
 8001248:	40020088 	.word	0x40020088
 800124c:	400200a0 	.word	0x400200a0
 8001250:	400200b8 	.word	0x400200b8
 8001254:	40020410 	.word	0x40020410
 8001258:	40020428 	.word	0x40020428
 800125c:	40020440 	.word	0x40020440
 8001260:	40020458 	.word	0x40020458
 8001264:	40020470 	.word	0x40020470
 8001268:	40020488 	.word	0x40020488
 800126c:	400204a0 	.word	0x400204a0
 8001270:	400204b8 	.word	0x400204b8
 8001274:	240047f8 	.word	0x240047f8
 8001278:	240047f4 	.word	0x240047f4
 800127c:	24003ff4 	.word	0x24003ff4

08001280 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_ETH_Init+0x80>)
 8001286:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <MX_ETH_Init+0x84>)
 8001288:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_ETH_Init+0x88>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_ETH_Init+0x88>)
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_ETH_Init+0x88>)
 8001298:	22e1      	movs	r2, #225	@ 0xe1
 800129a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_ETH_Init+0x88>)
 800129e:	2200      	movs	r2, #0
 80012a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_ETH_Init+0x88>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_ETH_Init+0x88>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_ETH_Init+0x80>)
 80012b0:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <MX_ETH_Init+0x88>)
 80012b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_ETH_Init+0x80>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_ETH_Init+0x80>)
 80012bc:	4a13      	ldr	r2, [pc, #76]	@ (800130c <MX_ETH_Init+0x8c>)
 80012be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_ETH_Init+0x80>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <MX_ETH_Init+0x90>)
 80012c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_ETH_Init+0x80>)
 80012c8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80012cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <MX_ETH_Init+0x80>)
 80012d0:	f004 f8aa 	bl	8005428 <HAL_ETH_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80012da:	f000 fcad 	bl	8001c38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012de:	2238      	movs	r2, #56	@ 0x38
 80012e0:	2100      	movs	r1, #0
 80012e2:	480c      	ldr	r0, [pc, #48]	@ (8001314 <MX_ETH_Init+0x94>)
 80012e4:	f01a fe08 	bl	801bef8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <MX_ETH_Init+0x94>)
 80012ea:	2221      	movs	r2, #33	@ 0x21
 80012ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_ETH_Init+0x94>)
 80012f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <MX_ETH_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	24004834 	.word	0x24004834
 8001304:	40028000 	.word	0x40028000
 8001308:	240048e4 	.word	0x240048e4
 800130c:	24000360 	.word	0x24000360
 8001310:	24000300 	.word	0x24000300
 8001314:	240047fc 	.word	0x240047fc

08001318 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08e      	sub	sp, #56	@ 0x38
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a59      	ldr	r2, [pc, #356]	@ (800149c <HAL_ETH_MspInit+0x184>)
 8001336:	4293      	cmp	r3, r2
 8001338:	f040 80ab 	bne.w	8001492 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800133c:	4b58      	ldr	r3, [pc, #352]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800133e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001342:	4a57      	ldr	r2, [pc, #348]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 8001344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001348:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800134c:	4b54      	ldr	r3, [pc, #336]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800134e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001356:	623b      	str	r3, [r7, #32]
 8001358:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800135a:	4b51      	ldr	r3, [pc, #324]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800135c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001360:	4a4f      	ldr	r2, [pc, #316]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001366:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800136a:	4b4d      	ldr	r3, [pc, #308]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800136c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001378:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800137a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800137e:	4a48      	ldr	r2, [pc, #288]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001388:	4b45      	ldr	r3, [pc, #276]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800138a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b42      	ldr	r3, [pc, #264]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	4a40      	ldr	r2, [pc, #256]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a6:	4b3e      	ldr	r3, [pc, #248]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	4a39      	ldr	r2, [pc, #228]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c4:	4b36      	ldr	r3, [pc, #216]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e2:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f0:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	4a2a      	ldr	r2, [pc, #168]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 80013f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_ETH_MspInit+0x188>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800140e:	2332      	movs	r3, #50	@ 0x32
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800141e:	230b      	movs	r3, #11
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <HAL_ETH_MspInit+0x18c>)
 800142a:	f004 fc31 	bl	8005c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800142e:	2386      	movs	r3, #134	@ 0x86
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143e:	230b      	movs	r3, #11
 8001440:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4817      	ldr	r0, [pc, #92]	@ (80014a8 <HAL_ETH_MspInit+0x190>)
 800144a:	f004 fc21 	bl	8005c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800144e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001460:	230b      	movs	r3, #11
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <HAL_ETH_MspInit+0x194>)
 800146c:	f004 fc10 	bl	8005c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001470:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001482:	230b      	movs	r3, #11
 8001484:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <HAL_ETH_MspInit+0x198>)
 800148e:	f004 fbff 	bl	8005c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3738      	adds	r7, #56	@ 0x38
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40028000 	.word	0x40028000
 80014a0:	58024400 	.word	0x58024400
 80014a4:	58020800 	.word	0x58020800
 80014a8:	58020000 	.word	0x58020000
 80014ac:	58020400 	.word	0x58020400
 80014b0:	58021800 	.word	0x58021800

080014b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <MX_FREERTOS_Init+0x18>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <MX_FREERTOS_Init+0x1c>)
 80014be:	f00a f98d 	bl	800b7dc <osThreadNew>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <MX_FREERTOS_Init+0x20>)
 80014c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0801cdc8 	.word	0x0801cdc8
 80014d0:	08001a6d 	.word	0x08001a6d
 80014d4:	240048ec 	.word	0x240048ec

080014d8 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	4a2e      	ldr	r2, [pc, #184]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fe:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	4a27      	ldr	r2, [pc, #156]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	4a1f      	ldr	r2, [pc, #124]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153a:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	4a10      	ldr	r2, [pc, #64]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 800156e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_GPIO_Init+0xd8>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001584:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001596:	230a      	movs	r3, #10
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_GPIO_Init+0xdc>)
 80015a2:	f004 fb75 	bl	8005c90 <HAL_GPIO_Init>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58020000 	.word	0x58020000

080015b8 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_IWDG1_Init+0x34>)
 80015be:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <MX_IWDG1_Init+0x38>)
 80015c0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_IWDG1_Init+0x34>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_IWDG1_Init+0x34>)
 80015ca:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80015ce:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_IWDG1_Init+0x34>)
 80015d2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_IWDG1_Init+0x34>)
 80015da:	f004 fd63 	bl	80060a4 <HAL_IWDG_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80015e4:	f000 fb28 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2400976c 	.word	0x2400976c
 80015f0:	58004800 	.word	0x58004800

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80015fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001600:	bf00      	nop
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <main+0xb4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <main+0x24>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dcf4      	bgt.n	8001602 <main+0xe>
  if ( timeout < 0 )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da01      	bge.n	8001622 <main+0x2e>
  {
  Error_Handler();
 800161e:	f000 fb0b 	bl	8001c38 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f000 ff5d 	bl	80024e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f841 	bl	80016ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <main+0xb4>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001630:	4a1d      	ldr	r2, [pc, #116]	@ (80016a8 <main+0xb4>)
 8001632:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001636:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <main+0xb4>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8001648:	2001      	movs	r0, #1
 800164a:	f004 fcff 	bl	800604c <HAL_HSEM_ActivateNotification>
//	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));

/*Take HSEM0 */
HAL_HSEM_FastTake(HSEM_ID_0);
 800164e:	2000      	movs	r0, #0
 8001650:	f004 fcce 	bl	8005ff0 <HAL_HSEM_FastTake>
///*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001654:	2100      	movs	r1, #0
 8001656:	2000      	movs	r0, #0
 8001658:	f004 fce4 	bl	8006024 <HAL_HSEM_Release>
//HAL_HSEM_FastTake(HSEM_ID_1);
/*Release HSEM in order to notify the CPU2(CM4)*/
//HAL_HSEM_Release(HSEM_ID_1,0);

/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800165c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001660:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001662:	bf00      	nop
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <main+0xb4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <main+0x86>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	dcf4      	bgt.n	8001664 <main+0x70>
if ( timeout < 0 )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da01      	bge.n	8001684 <main+0x90>
{
Error_Handler();
 8001680:	f000 fada 	bl	8001c38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f7ff ff28 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001688:	f7ff fc8c 	bl	8000fa4 <MX_DMA_Init>
  MX_ETH_Init();
 800168c:	f7ff fdf8 	bl	8001280 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001690:	f000 fdd6 	bl	8002240 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8001694:	f7ff ff90 	bl	80015b8 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001698:	f00a f856 	bl	800b748 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800169c:	f7ff ff0a 	bl	80014b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016a0:	f00a f876 	bl	800b790 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <main+0xb0>
 80016a8:	58024400 	.word	0x58024400

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09c      	sub	sp, #112	@ 0x70
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b6:	224c      	movs	r2, #76	@ 0x4c
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f01a fc1c 	bl	801bef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2220      	movs	r2, #32
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f01a fc16 	bl	801bef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016cc:	2004      	movs	r0, #4
 80016ce:	f004 fd49 	bl	8006164 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <SystemClock_Config+0x104>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	4a35      	ldr	r2, [pc, #212]	@ (80017b0 <SystemClock_Config+0x104>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016e2:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <SystemClock_Config+0x104>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <SystemClock_Config+0x108>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f4:	4a2f      	ldr	r2, [pc, #188]	@ (80017b4 <SystemClock_Config+0x108>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <SystemClock_Config+0x108>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001708:	bf00      	nop
 800170a:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <SystemClock_Config+0x108>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001716:	d1f8      	bne.n	800170a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001718:	2309      	movs	r3, #9
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172a:	2302      	movs	r3, #2
 800172c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001732:	232a      	movs	r3, #42	@ 0x2a
 8001734:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001736:	2302      	movs	r3, #2
 8001738:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800173e:	2302      	movs	r3, #2
 8001740:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001742:	230c      	movs	r3, #12
 8001744:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001746:	2300      	movs	r3, #0
 8001748:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fd5f 	bl	8006218 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001760:	f000 fa6a 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	233f      	movs	r3, #63	@ 0x3f
 8001766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2303      	movs	r3, #3
 800176a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001774:	2340      	movs	r3, #64	@ 0x40
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001778:	2350      	movs	r3, #80	@ 0x50
 800177a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800177c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001782:	2340      	movs	r3, #64	@ 0x40
 8001784:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2103      	movs	r1, #3
 800178a:	4618      	mov	r0, r3
 800178c:	f005 f99e 	bl	8006acc <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001796:	f000 fa4f 	bl	8001c38 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800179a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800179e:	2100      	movs	r1, #0
 80017a0:	2001      	movs	r0, #1
 80017a2:	f005 fb49 	bl	8006e38 <HAL_RCC_MCOConfig>
}
 80017a6:	bf00      	nop
 80017a8:	3770      	adds	r7, #112	@ 0x70
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	58000400 	.word	0x58000400
 80017b4:	58024800 	.word	0x58024800

080017b8 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d013      	beq.n	80017f2 <timer_callback+0x3a>

			// BNO055 Data

//			BNO055_Published();

			SensorsPublished();
 80017ca:	f000 f81b 	bl	8001804 <SensorsPublished>


			if (sync_counter++ >= 300) {  // Sync session at lower frequency
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <timer_callback+0x44>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	4909      	ldr	r1, [pc, #36]	@ (80017fc <timer_callback+0x44>)
 80017d6:	600a      	str	r2, [r1, #0]
 80017d8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017dc:	db06      	blt.n	80017ec <timer_callback+0x34>
				rmw_uros_sync_session(1000);
 80017de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017e2:	f00e fd77 	bl	80102d4 <rmw_uros_sync_session>
				sync_counter = 0;
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <timer_callback+0x44>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
			}
			// Synchronize time with the agent
//			rmw_uros_sync_session(1000);
			HAL_IWDG_Refresh(&hiwdg1);
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <timer_callback+0x48>)
 80017ee:	f004 fca8 	bl	8006142 <HAL_IWDG_Refresh>
		}

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2400985c 	.word	0x2400985c
 8001800:	2400976c 	.word	0x2400976c

08001804 <SensorsPublished>:

void SensorsPublished(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

//    f64array_msg.data.capacity = 29;  // Adjust capacity as needed
//    f64array_msg.data.size = 29;      // Set size of the array
//    f64array_msg.data.data = (float*)malloc(sizeof(float) * f64array_msg.data.size);
	BNO086_READ_HSEM(&IMU_086);
 8001808:	4894      	ldr	r0, [pc, #592]	@ (8001a5c <SensorsPublished+0x258>)
 800180a:	f7ff f823 	bl	8000854 <BNO086_READ_HSEM>

    // IMU_086 acceleration
    f64array_msg.data.data[0] = IMU_086.acceleration.x;
 800180e:	4b93      	ldr	r3, [pc, #588]	@ (8001a5c <SensorsPublished+0x258>)
 8001810:	edd3 7a04 	vldr	s15, [r3, #16]
 8001814:	4b92      	ldr	r3, [pc, #584]	@ (8001a60 <SensorsPublished+0x25c>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800181c:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[1] = IMU_086.acceleration.y;
 8001820:	4b8e      	ldr	r3, [pc, #568]	@ (8001a5c <SensorsPublished+0x258>)
 8001822:	edd3 7a05 	vldr	s15, [r3, #20]
 8001826:	4b8e      	ldr	r3, [pc, #568]	@ (8001a60 <SensorsPublished+0x25c>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	3308      	adds	r3, #8
 800182c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001830:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[2] = IMU_086.acceleration.z;
 8001834:	4b89      	ldr	r3, [pc, #548]	@ (8001a5c <SensorsPublished+0x258>)
 8001836:	edd3 7a06 	vldr	s15, [r3, #24]
 800183a:	4b89      	ldr	r3, [pc, #548]	@ (8001a60 <SensorsPublished+0x25c>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	3310      	adds	r3, #16
 8001840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001844:	ed83 7b00 	vstr	d7, [r3]

    // IMU_086 linear acceleration
    f64array_msg.data.data[3] = IMU_086.linear_acceleration.x;
 8001848:	4b84      	ldr	r3, [pc, #528]	@ (8001a5c <SensorsPublished+0x258>)
 800184a:	edd3 7a07 	vldr	s15, [r3, #28]
 800184e:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <SensorsPublished+0x25c>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	3318      	adds	r3, #24
 8001854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001858:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[4] = IMU_086.linear_acceleration.y;
 800185c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a5c <SensorsPublished+0x258>)
 800185e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001862:	4b7f      	ldr	r3, [pc, #508]	@ (8001a60 <SensorsPublished+0x25c>)
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	3320      	adds	r3, #32
 8001868:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800186c:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[5] = IMU_086.linear_acceleration.z;
 8001870:	4b7a      	ldr	r3, [pc, #488]	@ (8001a5c <SensorsPublished+0x258>)
 8001872:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001876:	4b7a      	ldr	r3, [pc, #488]	@ (8001a60 <SensorsPublished+0x25c>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	3328      	adds	r3, #40	@ 0x28
 800187c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001880:	ed83 7b00 	vstr	d7, [r3]

    // IMU_086 angular velocity
    f64array_msg.data.data[6] = IMU_086.angular_velocity.x;
 8001884:	4b75      	ldr	r3, [pc, #468]	@ (8001a5c <SensorsPublished+0x258>)
 8001886:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800188a:	4b75      	ldr	r3, [pc, #468]	@ (8001a60 <SensorsPublished+0x25c>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	3330      	adds	r3, #48	@ 0x30
 8001890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001894:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[7] = IMU_086.angular_velocity.y;
 8001898:	4b70      	ldr	r3, [pc, #448]	@ (8001a5c <SensorsPublished+0x258>)
 800189a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800189e:	4b70      	ldr	r3, [pc, #448]	@ (8001a60 <SensorsPublished+0x25c>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	3338      	adds	r3, #56	@ 0x38
 80018a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018a8:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[8] = IMU_086.angular_velocity.z;
 80018ac:	4b6b      	ldr	r3, [pc, #428]	@ (8001a5c <SensorsPublished+0x258>)
 80018ae:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80018b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a60 <SensorsPublished+0x25c>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	3340      	adds	r3, #64	@ 0x40
 80018b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018bc:	ed83 7b00 	vstr	d7, [r3]

    // IMU_086 magnetometer
    f64array_msg.data.data[9] = IMU_086.magnetometer.x;
 80018c0:	4b66      	ldr	r3, [pc, #408]	@ (8001a5c <SensorsPublished+0x258>)
 80018c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80018c6:	4b66      	ldr	r3, [pc, #408]	@ (8001a60 <SensorsPublished+0x25c>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	3348      	adds	r3, #72	@ 0x48
 80018cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d0:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[10] = IMU_086.magnetometer.y;
 80018d4:	4b61      	ldr	r3, [pc, #388]	@ (8001a5c <SensorsPublished+0x258>)
 80018d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80018da:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <SensorsPublished+0x25c>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	3350      	adds	r3, #80	@ 0x50
 80018e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018e4:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[11] = IMU_086.magnetometer.z;
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <SensorsPublished+0x258>)
 80018ea:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80018ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001a60 <SensorsPublished+0x25c>)
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	3358      	adds	r3, #88	@ 0x58
 80018f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f8:	ed83 7b00 	vstr	d7, [r3]

    // IMU_086 euler angles
    f64array_msg.data.data[12] = IMU_086.euler_angle.roll;
 80018fc:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <SensorsPublished+0x258>)
 80018fe:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001902:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <SensorsPublished+0x25c>)
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	3360      	adds	r3, #96	@ 0x60
 8001908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800190c:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[13] = IMU_086.euler_angle.pitch;
 8001910:	4b52      	ldr	r3, [pc, #328]	@ (8001a5c <SensorsPublished+0x258>)
 8001912:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001916:	4b52      	ldr	r3, [pc, #328]	@ (8001a60 <SensorsPublished+0x25c>)
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	3368      	adds	r3, #104	@ 0x68
 800191c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001920:	ed83 7b00 	vstr	d7, [r3]
    f64array_msg.data.data[14] = IMU_086.euler_angle.yaw;
 8001924:	4b4d      	ldr	r3, [pc, #308]	@ (8001a5c <SensorsPublished+0x258>)
 8001926:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <SensorsPublished+0x25c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	3370      	adds	r3, #112	@ 0x70
 8001930:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001934:	ed83 7b00 	vstr	d7, [r3]


    BNO055_READ_HSEM(&IMU_055);
 8001938:	484a      	ldr	r0, [pc, #296]	@ (8001a64 <SensorsPublished+0x260>)
 800193a:	f7fe ff01 	bl	8000740 <BNO055_READ_HSEM>
    // IMU_055 acceleration
    f64array_msg.data.data[15] = IMU_055.accel.x;
 800193e:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <SensorsPublished+0x25c>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <SensorsPublished+0x260>)
 8001948:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800194c:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[16] = IMU_055.accel.y;
 8001950:	4b43      	ldr	r3, [pc, #268]	@ (8001a60 <SensorsPublished+0x25c>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8001958:	4b42      	ldr	r3, [pc, #264]	@ (8001a64 <SensorsPublished+0x260>)
 800195a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[17] = IMU_055.accel.z;
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <SensorsPublished+0x25c>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 800196a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <SensorsPublished+0x260>)
 800196c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001970:	e9c1 2300 	strd	r2, r3, [r1]

    // IMU_055 linear acceleration
    f64array_msg.data.data[18] = IMU_055.lin_acc.x;
 8001974:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <SensorsPublished+0x25c>)
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800197c:	4b39      	ldr	r3, [pc, #228]	@ (8001a64 <SensorsPublished+0x260>)
 800197e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001982:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[19] = IMU_055.lin_acc.y;
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <SensorsPublished+0x25c>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 800198e:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <SensorsPublished+0x260>)
 8001990:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001994:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[20] = IMU_055.lin_acc.z;
 8001998:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <SensorsPublished+0x25c>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80019a0:	4b30      	ldr	r3, [pc, #192]	@ (8001a64 <SensorsPublished+0x260>)
 80019a2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80019a6:	e9c1 2300 	strd	r2, r3, [r1]

    // IMU_055 gyro (angular velocity)
    f64array_msg.data.data[21] = IMU_055.gyro.x;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <SensorsPublished+0x25c>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 80019b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <SensorsPublished+0x260>)
 80019b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80019b8:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[22] = IMU_055.gyro.y;
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <SensorsPublished+0x25c>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <SensorsPublished+0x260>)
 80019c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80019ca:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[23] = IMU_055.gyro.z;
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <SensorsPublished+0x25c>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <SensorsPublished+0x260>)
 80019d8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80019dc:	e9c1 2300 	strd	r2, r3, [r1]

    // IMU_055 magnetometer
    f64array_msg.data.data[24] = IMU_055.mag.x;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <SensorsPublished+0x25c>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <SensorsPublished+0x260>)
 80019ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[25] = IMU_055.mag.y;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <SensorsPublished+0x25c>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <SensorsPublished+0x260>)
 80019fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a00:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[26] = IMU_055.mag.z;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <SensorsPublished+0x25c>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <SensorsPublished+0x260>)
 8001a0e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a12:	e9c1 2300 	strd	r2, r3, [r1]

    // IMU_055 euler angles
    f64array_msg.data.data[27] = IMU_055.euler.roll;
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <SensorsPublished+0x25c>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <SensorsPublished+0x260>)
 8001a20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001a24:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[28] = IMU_055.euler.pitch;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <SensorsPublished+0x25c>)
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f103 01e0 	add.w	r1, r3, #224	@ 0xe0
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <SensorsPublished+0x260>)
 8001a32:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
    f64array_msg.data.data[29] = IMU_055.euler.yaw;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <SensorsPublished+0x25c>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f103 01e8 	add.w	r1, r3, #232	@ 0xe8
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <SensorsPublished+0x260>)
 8001a44:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001a48:	e9c1 2300 	strd	r2, r3, [r1]


	RCCHECK(rcl_publish(&f64array_pub, &f64array_msg, NULL));
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4904      	ldr	r1, [pc, #16]	@ (8001a60 <SensorsPublished+0x25c>)
 8001a50:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <SensorsPublished+0x264>)
 8001a52:	f00c fdf9 	bl	800e648 <rcl_publish>

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24009a38 	.word	0x24009a38
 8001a60:	24000008 	.word	0x24000008
 8001a64:	24009950 	.word	0x24009950
 8001a68:	24009860 	.word	0x24009860

08001a6c <StartDefaultTask>:
//
//
//}

void StartDefaultTask(void *argument)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b0b2      	sub	sp, #200	@ 0xc8
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001a76:	4b45      	ldr	r3, [pc, #276]	@ (8001b8c <StartDefaultTask+0x120>)
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	4b45      	ldr	r3, [pc, #276]	@ (8001b90 <StartDefaultTask+0x124>)
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <StartDefaultTask+0x128>)
 8001a80:	4a45      	ldr	r2, [pc, #276]	@ (8001b98 <StartDefaultTask+0x12c>)
 8001a82:	4946      	ldr	r1, [pc, #280]	@ (8001b9c <StartDefaultTask+0x130>)
 8001a84:	2001      	movs	r0, #1
 8001a86:	f00d fe17 	bl	800f6b8 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a8a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00d fd34 	bl	800f4fc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001a94:	4b42      	ldr	r3, [pc, #264]	@ (8001ba0 <StartDefaultTask+0x134>)
 8001a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ba4 <StartDefaultTask+0x138>)
 8001a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <StartDefaultTask+0x13c>)
 8001aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <StartDefaultTask+0x140>)
 8001aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001aac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00d fd31 	bl	800f518 <rcutils_set_default_allocator>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001ac2:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8001ac6:	483a      	ldr	r0, [pc, #232]	@ (8001bb0 <StartDefaultTask+0x144>)
 8001ac8:	f01a f896 	bl	801bbf8 <iprintf>

  // micro-ROS app



  allocator = rcl_get_default_allocator();
 8001acc:	4c39      	ldr	r4, [pc, #228]	@ (8001bb4 <StartDefaultTask+0x148>)
 8001ace:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f00d fd3e 	bl	800f554 <rcutils_get_default_allocator>
 8001ad8:	4625      	mov	r5, r4
 8001ada:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	602b      	str	r3, [r5, #0]

  //create init_options
    init_options = rcl_get_zero_initialized_init_options();
 8001ae6:	f00c fbd9 	bl	800e29c <rcl_get_zero_initialized_init_options>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a32      	ldr	r2, [pc, #200]	@ (8001bb8 <StartDefaultTask+0x14c>)
 8001aee:	6013      	str	r3, [r2, #0]
    RCCHECK(rcl_init_options_init(&init_options, allocator));
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <StartDefaultTask+0x148>)
 8001af2:	466c      	mov	r4, sp
 8001af4:	f103 020c 	add.w	r2, r3, #12
 8001af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001afc:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b02:	482d      	ldr	r0, [pc, #180]	@ (8001bb8 <StartDefaultTask+0x14c>)
 8001b04:	f00c fbcc 	bl	800e2a0 <rcl_init_options_init>
    RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8001b08:	2158      	movs	r1, #88	@ 0x58
 8001b0a:	482b      	ldr	r0, [pc, #172]	@ (8001bb8 <StartDefaultTask+0x14c>)
 8001b0c:	f00c fcc6 	bl	800e49c <rcl_init_options_set_domain_id>

  //  rclc_support_init(&support, 0, NULL, &allocator);
   rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <StartDefaultTask+0x148>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <StartDefaultTask+0x14c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4828      	ldr	r0, [pc, #160]	@ (8001bbc <StartDefaultTask+0x150>)
 8001b1c:	f00d fc04 	bl	800f328 <rclc_support_init_with_options>

   rclc_node_init_default(&node, "cubemx_imu_node", "", &support);
 8001b20:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <StartDefaultTask+0x150>)
 8001b22:	4a27      	ldr	r2, [pc, #156]	@ (8001bc0 <StartDefaultTask+0x154>)
 8001b24:	4927      	ldr	r1, [pc, #156]	@ (8001bc4 <StartDefaultTask+0x158>)
 8001b26:	4828      	ldr	r0, [pc, #160]	@ (8001bc8 <StartDefaultTask+0x15c>)
 8001b28:	f00d fc34 	bl	800f394 <rclc_node_init_default>

  // create publisher

   rclc_publisher_init_best_effort(
 8001b2c:	f00e ff5a 	bl	80109e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <StartDefaultTask+0x160>)
 8001b34:	4924      	ldr	r1, [pc, #144]	@ (8001bc8 <StartDefaultTask+0x15c>)
 8001b36:	4826      	ldr	r0, [pc, #152]	@ (8001bd0 <StartDefaultTask+0x164>)
 8001b38:	f00d fc6e 	bl	800f418 <rclc_publisher_init_best_effort>
//  bno055_imu_msg.header.frame_id = micro_ros_string_utilities_init("bno55_imu_frame");
//  bno055_magnetic_field_msg.header.frame_id = micro_ros_string_utilities_init("bno055_magnetic_field_frame");


  // create timer
  rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(0.1), timer_callback);
 8001b3c:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <StartDefaultTask+0x168>)
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4a25      	ldr	r2, [pc, #148]	@ (8001bd8 <StartDefaultTask+0x16c>)
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	491d      	ldr	r1, [pc, #116]	@ (8001bbc <StartDefaultTask+0x150>)
 8001b48:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <StartDefaultTask+0x170>)
 8001b4a:	f00d fc9f 	bl	800f48c <rclc_timer_init_default>

  rmw_uros_sync_session(1000);
 8001b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b52:	f00e fbbf 	bl	80102d4 <rmw_uros_sync_session>


  executor = rclc_executor_get_zero_initialized_executor();
 8001b56:	4c22      	ldr	r4, [pc, #136]	@ (8001be0 <StartDefaultTask+0x174>)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00d f902 	bl	800ed64 <rclc_executor_get_zero_initialized_executor>
 8001b60:	4620      	mov	r0, r4
 8001b62:	463b      	mov	r3, r7
 8001b64:	2288      	movs	r2, #136	@ 0x88
 8001b66:	4619      	mov	r1, r3
 8001b68:	f01a fa8f 	bl	801c08a <memcpy>
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <StartDefaultTask+0x148>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4912      	ldr	r1, [pc, #72]	@ (8001bbc <StartDefaultTask+0x150>)
 8001b72:	481b      	ldr	r0, [pc, #108]	@ (8001be0 <StartDefaultTask+0x174>)
 8001b74:	f00d f900 	bl	800ed78 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer_); // add timer
 8001b78:	4918      	ldr	r1, [pc, #96]	@ (8001bdc <StartDefaultTask+0x170>)
 8001b7a:	4819      	ldr	r0, [pc, #100]	@ (8001be0 <StartDefaultTask+0x174>)
 8001b7c:	f00d f978 	bl	800ee70 <rclc_executor_add_timer>
  rclc_executor_spin(&executor);
 8001b80:	4817      	ldr	r0, [pc, #92]	@ (8001be0 <StartDefaultTask+0x174>)
 8001b82:	f00d fb8f 	bl	800f2a4 <rclc_executor_spin>

  for(;;)
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <StartDefaultTask+0x11a>
 8001b8a:	bf00      	nop
 8001b8c:	080010a5 	.word	0x080010a5
 8001b90:	08001041 	.word	0x08001041
 8001b94:	08001021 	.word	0x08001021
 8001b98:	08000ff5 	.word	0x08000ff5
 8001b9c:	24009ae0 	.word	0x24009ae0
 8001ba0:	08001c45 	.word	0x08001c45
 8001ba4:	08001c89 	.word	0x08001c89
 8001ba8:	08001cc1 	.word	0x08001cc1
 8001bac:	08001d2d 	.word	0x08001d2d
 8001bb0:	0801cd34 	.word	0x0801cd34
 8001bb4:	240097b0 	.word	0x240097b0
 8001bb8:	240097cc 	.word	0x240097cc
 8001bbc:	2400977c 	.word	0x2400977c
 8001bc0:	0801cd5c 	.word	0x0801cd5c
 8001bc4:	0801cd60 	.word	0x0801cd60
 8001bc8:	240097c4 	.word	0x240097c4
 8001bcc:	0801cd70 	.word	0x0801cd70
 8001bd0:	24009860 	.word	0x24009860
 8001bd4:	080017b9 	.word	0x080017b9
 8001bd8:	000186a0 	.word	0x000186a0
 8001bdc:	24009858 	.word	0x24009858
 8001be0:	240097d0 	.word	0x240097d0

08001be4 <HAL_HSEM_FreeCallback>:
//    osDelay(1);
  }
  /* USER CODE END 5 */
}

void HAL_HSEM_FreeCallback(uint32_t SemMask){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

	if (SemMask & (1 << HSEM_ID_0)) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_HSEM_FreeCallback+0x18>
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f004 fa28 	bl	800604c <HAL_HSEM_ActivateNotification>

	    }

	if (SemMask & (1 << HSEM_ID_1)) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_HSEM_FreeCallback+0x28>
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8001c06:	2002      	movs	r0, #2
 8001c08:	f004 fa20 	bl	800604c <HAL_HSEM_ActivateNotification>
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c26:	f000 fc97 	bl	8002558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40010000 	.word	0x40010000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <Error_Handler+0x8>

08001c44 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <microros_allocate+0x3c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <microros_allocate+0x3c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <microros_allocate+0x40>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <microros_allocate+0x40>)
 8001c6c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe ff48 	bl	8000b04 <pvPortMallocMicroROS>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24009a84 	.word	0x24009a84
 8001c84:	24009a88 	.word	0x24009a88

08001c88 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff f857 	bl	8000d4c <getBlockSize>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <microros_deallocate+0x34>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <microros_deallocate+0x34>)
 8001caa:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7fe fff1 	bl	8000c94 <vPortFreeMicroROS>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	24009a88 	.word	0x24009a88

08001cc0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <microros_reallocate+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <microros_reallocate+0x64>)
 8001cda:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <microros_reallocate+0x68>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <microros_reallocate+0x68>)
 8001cea:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001cf2:	68b8      	ldr	r0, [r7, #8]
 8001cf4:	f7fe ff06 	bl	8000b04 <pvPortMallocMicroROS>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	e00e      	b.n	8001d1a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff f825 	bl	8000d4c <getBlockSize>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <microros_reallocate+0x68>)
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <microros_reallocate+0x68>)
 8001d0e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7ff f838 	bl	8000d88 <pvPortReallocMicroROS>
 8001d18:	4603      	mov	r3, r0
  }
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	24009a84 	.word	0x24009a84
 8001d28:	24009a88 	.word	0x24009a88

08001d2c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	4a0c      	ldr	r2, [pc, #48]	@ (8001d74 <microros_zero_allocate+0x48>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <microros_zero_allocate+0x48>)
 8001d4a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <microros_zero_allocate+0x4c>)
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <microros_zero_allocate+0x4c>)
 8001d5e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff f83d 	bl	8000de2 <pvPortCallocMicroROS>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24009a84 	.word	0x24009a84
 8001d78:	24009a88 	.word	0x24009a88
 8001d7c:	00000000 	.word	0x00000000

08001d80 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d96:	a320      	add	r3, pc, #128	@ (adr r3, 8001e18 <UTILS_NanosecondsToTimespec+0x98>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fb08 	bl	80003b0 <__aeabi_ldivmod>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dae:	a31a      	add	r3, pc, #104	@ (adr r3, 8001e18 <UTILS_NanosecondsToTimespec+0x98>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fafc 	bl	80003b0 <__aeabi_ldivmod>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da20      	bge.n	8001e06 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <UTILS_NanosecondsToTimespec+0x90>)
 8001dca:	fb82 1203 	smull	r1, r2, r2, r3
 8001dce:	1712      	asrs	r2, r2, #28
 8001dd0:	17db      	asrs	r3, r3, #31
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	6979      	ldr	r1, [r7, #20]
 8001de0:	17c8      	asrs	r0, r1, #31
 8001de2:	460c      	mov	r4, r1
 8001de4:	4605      	mov	r5, r0
 8001de6:	ebb2 0804 	subs.w	r8, r2, r4
 8001dea:	eb63 0905 	sbc.w	r9, r3, r5
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4906      	ldr	r1, [pc, #24]	@ (8001e14 <UTILS_NanosecondsToTimespec+0x94>)
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	609a      	str	r2, [r3, #8]
    }
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e10:	44b82fa1 	.word	0x44b82fa1
 8001e14:	3b9aca00 	.word	0x3b9aca00
 8001e18:	3b9aca00 	.word	0x3b9aca00
 8001e1c:	00000000 	.word	0x00000000

08001e20 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e24:	b08e      	sub	sp, #56	@ 0x38
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e2a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e2c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e30:	2300      	movs	r3, #0
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e46:	4618      	mov	r0, r3
 8001e48:	f00b fc68 	bl	800d71c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4e:	17da      	asrs	r2, r3, #31
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	61fa      	str	r2, [r7, #28]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	69b9      	ldr	r1, [r7, #24]
 8001e5e:	000b      	movs	r3, r1
 8001e60:	2200      	movs	r2, #0
 8001e62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	4615      	mov	r5, r2
 8001e6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e72:	1911      	adds	r1, r2, r4
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	416b      	adcs	r3, r5
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e7e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	f04f 0400 	mov.w	r4, #0
 8001e8e:	f04f 0500 	mov.w	r5, #0
 8001e92:	015d      	lsls	r5, r3, #5
 8001e94:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e98:	0154      	lsls	r4, r2, #5
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	462b      	mov	r3, r5
 8001e9e:	ebb2 0800 	subs.w	r8, r2, r0
 8001ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001eb2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001eb6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001eba:	4690      	mov	r8, r2
 8001ebc:	4699      	mov	r9, r3
 8001ebe:	eb18 0a00 	adds.w	sl, r8, r0
 8001ec2:	eb49 0b01 	adc.w	fp, r9, r1
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ed2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ed6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eda:	ebb2 040a 	subs.w	r4, r2, sl
 8001ede:	603c      	str	r4, [r7, #0]
 8001ee0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eea:	4623      	mov	r3, r4
 8001eec:	181b      	adds	r3, r3, r0
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	eb41 0303 	adc.w	r3, r1, r3
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001efe:	f7ff ff3f 	bl	8001d80 <UTILS_NanosecondsToTimespec>

    return 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	3738      	adds	r7, #56	@ 0x38
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_MspInit+0x48>)
 8001f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_MspInit+0x48>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_MspInit+0x48>)
 8001f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	210f      	movs	r1, #15
 8001f38:	f06f 0001 	mvn.w	r0, #1
 8001f3c:	f000 fc04 	bl	8002748 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2105      	movs	r1, #5
 8001f44:	207d      	movs	r0, #125	@ 0x7d
 8001f46:	f000 fbff 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001f4a:	207d      	movs	r0, #125	@ 0x7d
 8001f4c:	f000 fc16 	bl	800277c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	58024400 	.word	0x58024400

08001f5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	@ 0x38
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d844      	bhi.n	8001ff4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	2019      	movs	r0, #25
 8001f70:	f000 fbea 	bl	8002748 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f74:	2019      	movs	r0, #25
 8001f76:	f000 fc01 	bl	800277c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001f7a:	4a24      	ldr	r2, [pc, #144]	@ (800200c <HAL_InitTick+0xb0>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f80:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <HAL_InitTick+0xb4>)
 8001f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f86:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_InitTick+0xb4>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f90:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <HAL_InitTick+0xb4>)
 8001f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f9e:	f107 020c 	add.w	r2, r7, #12
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 f985 	bl	80072b8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001fae:	f005 f96d 	bl	800728c <HAL_RCC_GetPCLK2Freq>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fba:	4a16      	ldr	r2, [pc, #88]	@ (8002014 <HAL_InitTick+0xb8>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9b      	lsrs	r3, r3, #18
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_InitTick+0xbc>)
 8001fc8:	4a14      	ldr	r2, [pc, #80]	@ (800201c <HAL_InitTick+0xc0>)
 8001fca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_InitTick+0xbc>)
 8001fce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fd4:	4a10      	ldr	r2, [pc, #64]	@ (8002018 <HAL_InitTick+0xbc>)
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fda:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <HAL_InitTick+0xbc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <HAL_InitTick+0xbc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001fe6:	480c      	ldr	r0, [pc, #48]	@ (8002018 <HAL_InitTick+0xbc>)
 8001fe8:	f006 ffd4 	bl	8008f94 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d107      	bne.n	8002002 <HAL_InitTick+0xa6>
 8001ff2:	e001      	b.n	8001ff8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e005      	b.n	8002004 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ff8:	4807      	ldr	r0, [pc, #28]	@ (8002018 <HAL_InitTick+0xbc>)
 8001ffa:	f007 f82d 	bl	8009058 <HAL_TIM_Base_Start_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	e000      	b.n	8002004 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	3738      	adds	r7, #56	@ 0x38
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	24000028 	.word	0x24000028
 8002010:	58024400 	.word	0x58024400
 8002014:	431bde83 	.word	0x431bde83
 8002018:	24009a8c 	.word	0x24009a8c
 800201c:	40010000 	.word	0x40010000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <NMI_Handler+0x4>

08002028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <MemManage_Handler+0x4>

08002038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <UsageFault_Handler+0x4>

08002048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DMA1_Stream0_IRQHandler+0x10>)
 800205e:	f001 fec5 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	24009b74 	.word	0x24009b74

0800206c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <DMA1_Stream1_IRQHandler+0x10>)
 8002072:	f001 febb 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	24009bec 	.word	0x24009bec

08002080 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <TIM1_UP_IRQHandler+0x10>)
 8002086:	f007 f85f 	bl	8009148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	24009a8c 	.word	0x24009a8c

08002094 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <USART3_IRQHandler+0x10>)
 800209a:	f007 fbfb 	bl	8009894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	24009ae0 	.word	0x24009ae0

080020a8 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80020ac:	f003 ffe0 	bl	8006070 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_kill>:

int _kill(int pid, int sig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ce:	f019 ffa7 	bl	801c020 <__errno>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2216      	movs	r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
  return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_exit>:

void _exit (int status)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ffe7 	bl	80020c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f6:	bf00      	nop
 80020f8:	e7fd      	b.n	80020f6 <_exit+0x12>

080020fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e00a      	b.n	8002122 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800210c:	f3af 8000 	nop.w
 8002110:	4601      	mov	r1, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	b2ca      	uxtb	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	dbf0      	blt.n	800210c <_read+0x12>
  }

  return len;
 800212a:	687b      	ldr	r3, [r7, #4]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e009      	b.n	800215a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	60ba      	str	r2, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	dbf1      	blt.n	8002146 <_write+0x12>
  }
  return len;
 8002162:	687b      	ldr	r3, [r7, #4]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_close>:

int _close(int file)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002194:	605a      	str	r2, [r3, #4]
  return 0;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_isatty>:

int _isatty(int file)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021dc:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <_sbrk+0x5c>)
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <_sbrk+0x60>)
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <_sbrk+0x64>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <_sbrk+0x68>)
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d207      	bcs.n	8002214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002204:	f019 ff0c 	bl	801c020 <__errno>
 8002208:	4603      	mov	r3, r0
 800220a:	220c      	movs	r2, #12
 800220c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002212:	e009      	b.n	8002228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221a:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <_sbrk+0x64>)
 8002224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	24080000 	.word	0x24080000
 8002234:	00000400 	.word	0x00000400
 8002238:	24009adc 	.word	0x24009adc
 800223c:	24013210 	.word	0x24013210

08002240 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002244:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002246:	4a23      	ldr	r2, [pc, #140]	@ (80022d4 <MX_USART3_UART_Init+0x94>)
 8002248:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800224a:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 800224c:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <MX_USART3_UART_Init+0x98>)
 800224e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002250:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800225c:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002262:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002264:	220c      	movs	r2, #12
 8002266:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002274:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002282:	2200      	movs	r2, #0
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002286:	4812      	ldr	r0, [pc, #72]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 8002288:	f007 f952 	bl	8009530 <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002292:	f7ff fcd1 	bl	8001c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002296:	2100      	movs	r1, #0
 8002298:	480d      	ldr	r0, [pc, #52]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 800229a:	f009 f947 	bl	800b52c <HAL_UARTEx_SetTxFifoThreshold>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80022a4:	f7ff fcc8 	bl	8001c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a8:	2100      	movs	r1, #0
 80022aa:	4809      	ldr	r0, [pc, #36]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 80022ac:	f009 f97c 	bl	800b5a8 <HAL_UARTEx_SetRxFifoThreshold>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80022b6:	f7ff fcbf 	bl	8001c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <MX_USART3_UART_Init+0x90>)
 80022bc:	f009 f8fd 	bl	800b4ba <HAL_UARTEx_DisableFifoMode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80022c6:	f7ff fcb7 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24009ae0 	.word	0x24009ae0
 80022d4:	40004800 	.word	0x40004800
 80022d8:	001e8480 	.word	0x001e8480

080022dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0ba      	sub	sp, #232	@ 0xe8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	22c0      	movs	r2, #192	@ 0xc0
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f019 fdfb 	bl	801bef8 <memset>
  if(uartHandle->Instance==USART3)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a5a      	ldr	r2, [pc, #360]	@ (8002470 <HAL_UART_MspInit+0x194>)
 8002308:	4293      	cmp	r3, r2
 800230a:	f040 80ad 	bne.w	8002468 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800230e:	f04f 0202 	mov.w	r2, #2
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4618      	mov	r0, r3
 8002326:	f005 f809 	bl	800733c <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002330:	f7ff fc82 	bl	8001c38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002334:	4b4f      	ldr	r3, [pc, #316]	@ (8002474 <HAL_UART_MspInit+0x198>)
 8002336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800233a:	4a4e      	ldr	r2, [pc, #312]	@ (8002474 <HAL_UART_MspInit+0x198>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002340:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002344:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <HAL_UART_MspInit+0x198>)
 8002346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800234a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	4b48      	ldr	r3, [pc, #288]	@ (8002474 <HAL_UART_MspInit+0x198>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002358:	4a46      	ldr	r2, [pc, #280]	@ (8002474 <HAL_UART_MspInit+0x198>)
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002362:	4b44      	ldr	r3, [pc, #272]	@ (8002474 <HAL_UART_MspInit+0x198>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002370:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800238a:	2307      	movs	r3, #7
 800238c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002394:	4619      	mov	r1, r3
 8002396:	4838      	ldr	r0, [pc, #224]	@ (8002478 <HAL_UART_MspInit+0x19c>)
 8002398:	f003 fc7a 	bl	8005c90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800239c:	4b37      	ldr	r3, [pc, #220]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 800239e:	4a38      	ldr	r2, [pc, #224]	@ (8002480 <HAL_UART_MspInit+0x1a4>)
 80023a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023a4:	222d      	movs	r2, #45	@ 0x2d
 80023a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a8:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ae:	4b33      	ldr	r3, [pc, #204]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023b4:	4b31      	ldr	r3, [pc, #196]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023bc:	4b2f      	ldr	r3, [pc, #188]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023c8:	4b2c      	ldr	r3, [pc, #176]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023d0:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d8:	4b28      	ldr	r3, [pc, #160]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023de:	4827      	ldr	r0, [pc, #156]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023e0:	f000 f9da 	bl	8002798 <HAL_DMA_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80023ea:	f7ff fc25 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023f6:	4a21      	ldr	r2, [pc, #132]	@ (800247c <HAL_UART_MspInit+0x1a0>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 80023fe:	4a22      	ldr	r2, [pc, #136]	@ (8002488 <HAL_UART_MspInit+0x1ac>)
 8002400:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002402:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002404:	222e      	movs	r2, #46	@ 0x2e
 8002406:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002408:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002422:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002428:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002430:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002434:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002436:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800243c:	4811      	ldr	r0, [pc, #68]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 800243e:	f000 f9ab 	bl	8002798 <HAL_DMA_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8002448:	f7ff fbf6 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002450:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002452:	4a0c      	ldr	r2, [pc, #48]	@ (8002484 <HAL_UART_MspInit+0x1a8>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2105      	movs	r1, #5
 800245c:	2027      	movs	r0, #39	@ 0x27
 800245e:	f000 f973 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002462:	2027      	movs	r0, #39	@ 0x27
 8002464:	f000 f98a 	bl	800277c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002468:	bf00      	nop
 800246a:	37e8      	adds	r7, #232	@ 0xe8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40004800 	.word	0x40004800
 8002474:	58024400 	.word	0x58024400
 8002478:	58020c00 	.word	0x58020c00
 800247c:	24009b74 	.word	0x24009b74
 8002480:	40020010 	.word	0x40020010
 8002484:	24009bec 	.word	0x24009bec
 8002488:	40020028 	.word	0x40020028

0800248c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800248c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002490:	f7fe faa2 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002494:	480c      	ldr	r0, [pc, #48]	@ (80024c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002496:	490d      	ldr	r1, [pc, #52]	@ (80024cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024ac:	4c0a      	ldr	r4, [pc, #40]	@ (80024d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ba:	f019 fdb7 	bl	801c02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024be:	f7ff f899 	bl	80015f4 <main>
  bx  lr
 80024c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024cc:	24000300 	.word	0x24000300
  ldr r2, =_sidata
 80024d0:	0801dc4c 	.word	0x0801dc4c
  ldr r2, =_sbss
 80024d4:	240003c0 	.word	0x240003c0
  ldr r4, =_ebss
 80024d8:	24013210 	.word	0x24013210

080024dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC3_IRQHandler>
	...

080024e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e6:	2003      	movs	r0, #3
 80024e8:	f000 f923 	bl	8002732 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024ec:	f004 fd0e 	bl	8006f0c <HAL_RCC_GetSysClockFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <HAL_Init+0x68>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	4913      	ldr	r1, [pc, #76]	@ (800254c <HAL_Init+0x6c>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800250a:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <HAL_Init+0x68>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	4a0e      	ldr	r2, [pc, #56]	@ (800254c <HAL_Init+0x6c>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <HAL_Init+0x70>)
 8002522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002524:	4a0b      	ldr	r2, [pc, #44]	@ (8002554 <HAL_Init+0x74>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252a:	200f      	movs	r0, #15
 800252c:	f7ff fd16 	bl	8001f5c <HAL_InitTick>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e002      	b.n	8002540 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800253a:	f7ff fce9 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	58024400 	.word	0x58024400
 800254c:	0801cdb8 	.word	0x0801cdb8
 8002550:	24000004 	.word	0x24000004
 8002554:	24000000 	.word	0x24000000

08002558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	2400002c 	.word	0x2400002c
 800257c:	24009c64 	.word	0x24009c64

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	24009c64 	.word	0x24009c64

08002598 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_GetREVID+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0c1b      	lsrs	r3, r3, #16
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	5c001000 	.word	0x5c001000

080025b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	58000400 	.word	0x58000400

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <__NVIC_SetPriorityGrouping+0x40>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	4313      	orrs	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <__NVIC_SetPriorityGrouping+0x40>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00
 800261c:	05fa0000 	.word	0x05fa0000

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	@ (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff4c 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002756:	f7ff ff63 	bl	8002620 <__NVIC_GetPriorityGrouping>
 800275a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7ff ffb3 	bl	80026cc <NVIC_EncodePriority>
 8002766:	4602      	mov	r2, r0
 8002768:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff82 	bl	8002678 <__NVIC_SetPriority>
}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff56 	bl	800263c <__NVIC_EnableIRQ>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff feee 	bl	8002580 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e316      	b.n	8002dde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a66      	ldr	r2, [pc, #408]	@ (8002950 <HAL_DMA_Init+0x1b8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d04a      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a65      	ldr	r2, [pc, #404]	@ (8002954 <HAL_DMA_Init+0x1bc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d045      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a63      	ldr	r2, [pc, #396]	@ (8002958 <HAL_DMA_Init+0x1c0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d040      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a62      	ldr	r2, [pc, #392]	@ (800295c <HAL_DMA_Init+0x1c4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d03b      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a60      	ldr	r2, [pc, #384]	@ (8002960 <HAL_DMA_Init+0x1c8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d036      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002964 <HAL_DMA_Init+0x1cc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d031      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002968 <HAL_DMA_Init+0x1d0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02c      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5c      	ldr	r2, [pc, #368]	@ (800296c <HAL_DMA_Init+0x1d4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d027      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5a      	ldr	r2, [pc, #360]	@ (8002970 <HAL_DMA_Init+0x1d8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d022      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a59      	ldr	r2, [pc, #356]	@ (8002974 <HAL_DMA_Init+0x1dc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01d      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_DMA_Init+0x1e0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d018      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a56      	ldr	r2, [pc, #344]	@ (800297c <HAL_DMA_Init+0x1e4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a54      	ldr	r2, [pc, #336]	@ (8002980 <HAL_DMA_Init+0x1e8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00e      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a53      	ldr	r2, [pc, #332]	@ (8002984 <HAL_DMA_Init+0x1ec>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a51      	ldr	r2, [pc, #324]	@ (8002988 <HAL_DMA_Init+0x1f0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_DMA_Init+0xb8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a50      	ldr	r2, [pc, #320]	@ (800298c <HAL_DMA_Init+0x1f4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_DMA_Init+0xbc>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_DMA_Init+0xbe>
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 813b 	beq.w	8002ad2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a37      	ldr	r2, [pc, #220]	@ (8002950 <HAL_DMA_Init+0x1b8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_Init+0x174>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a36      	ldr	r2, [pc, #216]	@ (8002954 <HAL_DMA_Init+0x1bc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_Init+0x174>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a34      	ldr	r2, [pc, #208]	@ (8002958 <HAL_DMA_Init+0x1c0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_Init+0x174>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a33      	ldr	r2, [pc, #204]	@ (800295c <HAL_DMA_Init+0x1c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_Init+0x174>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a31      	ldr	r2, [pc, #196]	@ (8002960 <HAL_DMA_Init+0x1c8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_Init+0x174>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <HAL_DMA_Init+0x1cc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002968 <HAL_DMA_Init+0x1d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2d      	ldr	r2, [pc, #180]	@ (800296c <HAL_DMA_Init+0x1d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002970 <HAL_DMA_Init+0x1d8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <HAL_DMA_Init+0x1dc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <HAL_DMA_Init+0x1e0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a27      	ldr	r2, [pc, #156]	@ (800297c <HAL_DMA_Init+0x1e4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	@ (8002980 <HAL_DMA_Init+0x1e8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a24      	ldr	r2, [pc, #144]	@ (8002984 <HAL_DMA_Init+0x1ec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_Init+0x174>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a22      	ldr	r2, [pc, #136]	@ (8002988 <HAL_DMA_Init+0x1f0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Init+0x174>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_DMA_Init+0x1f4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d108      	bne.n	800291e <HAL_DMA_Init+0x186>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <HAL_DMA_Init+0x196>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800292e:	e02f      	b.n	8002990 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002930:	f7ff fe26 	bl	8002580 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b05      	cmp	r3, #5
 800293c:	d928      	bls.n	8002990 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e246      	b.n	8002dde <HAL_DMA_Init+0x646>
 8002950:	40020010 	.word	0x40020010
 8002954:	40020028 	.word	0x40020028
 8002958:	40020040 	.word	0x40020040
 800295c:	40020058 	.word	0x40020058
 8002960:	40020070 	.word	0x40020070
 8002964:	40020088 	.word	0x40020088
 8002968:	400200a0 	.word	0x400200a0
 800296c:	400200b8 	.word	0x400200b8
 8002970:	40020410 	.word	0x40020410
 8002974:	40020428 	.word	0x40020428
 8002978:	40020440 	.word	0x40020440
 800297c:	40020458 	.word	0x40020458
 8002980:	40020470 	.word	0x40020470
 8002984:	40020488 	.word	0x40020488
 8002988:	400204a0 	.word	0x400204a0
 800298c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1c8      	bne.n	8002930 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <HAL_DMA_Init+0x420>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4313      	orrs	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029f4:	4b71      	ldr	r3, [pc, #452]	@ (8002bbc <HAL_DMA_Init+0x424>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b71      	ldr	r3, [pc, #452]	@ (8002bc0 <HAL_DMA_Init+0x428>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a00:	d328      	bcc.n	8002a54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b28      	cmp	r3, #40	@ 0x28
 8002a08:	d903      	bls.n	8002a12 <HAL_DMA_Init+0x27a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a10:	d917      	bls.n	8002a42 <HAL_DMA_Init+0x2aa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a18:	d903      	bls.n	8002a22 <HAL_DMA_Init+0x28a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b42      	cmp	r3, #66	@ 0x42
 8002a20:	d90f      	bls.n	8002a42 <HAL_DMA_Init+0x2aa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b46      	cmp	r3, #70	@ 0x46
 8002a28:	d903      	bls.n	8002a32 <HAL_DMA_Init+0x29a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b48      	cmp	r3, #72	@ 0x48
 8002a30:	d907      	bls.n	8002a42 <HAL_DMA_Init+0x2aa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b4e      	cmp	r3, #78	@ 0x4e
 8002a38:	d905      	bls.n	8002a46 <HAL_DMA_Init+0x2ae>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b52      	cmp	r3, #82	@ 0x52
 8002a40:	d801      	bhi.n	8002a46 <HAL_DMA_Init+0x2ae>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_Init+0x2b0>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0307 	bic.w	r3, r3, #7
 8002a6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d117      	bne.n	8002aae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00e      	beq.n	8002aae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f002 fb3f 	bl	8005114 <DMA_CheckFifoParam>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2240      	movs	r2, #64	@ 0x40
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e197      	b.n	8002dde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f002 fa7a 	bl	8004fb0 <DMA_CalcBaseAndBitshift>
 8002abc:	4603      	mov	r3, r0
 8002abe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	223f      	movs	r2, #63	@ 0x3f
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	e0cd      	b.n	8002c6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc4 <HAL_DMA_Init+0x42c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d022      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a39      	ldr	r2, [pc, #228]	@ (8002bc8 <HAL_DMA_Init+0x430>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01d      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a38      	ldr	r2, [pc, #224]	@ (8002bcc <HAL_DMA_Init+0x434>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d018      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a36      	ldr	r2, [pc, #216]	@ (8002bd0 <HAL_DMA_Init+0x438>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a35      	ldr	r2, [pc, #212]	@ (8002bd4 <HAL_DMA_Init+0x43c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00e      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a33      	ldr	r2, [pc, #204]	@ (8002bd8 <HAL_DMA_Init+0x440>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a32      	ldr	r2, [pc, #200]	@ (8002bdc <HAL_DMA_Init+0x444>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_DMA_Init+0x38a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <HAL_DMA_Init+0x448>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_DMA_Init+0x38e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_DMA_Init+0x390>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8097 	beq.w	8002c5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <HAL_DMA_Init+0x42c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d021      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_DMA_Init+0x430>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01c      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a21      	ldr	r2, [pc, #132]	@ (8002bcc <HAL_DMA_Init+0x434>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d017      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_DMA_Init+0x438>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd4 <HAL_DMA_Init+0x43c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00d      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_DMA_Init+0x440>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_DMA_Init+0x444>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <HAL_DMA_Init+0x3e4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <HAL_DMA_Init+0x448>)
 8002b7a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <HAL_DMA_Init+0x44c>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d021      	beq.n	8002be8 <HAL_DMA_Init+0x450>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b80      	cmp	r3, #128	@ 0x80
 8002baa:	d102      	bne.n	8002bb2 <HAL_DMA_Init+0x41a>
 8002bac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bb0:	e01b      	b.n	8002bea <HAL_DMA_Init+0x452>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e019      	b.n	8002bea <HAL_DMA_Init+0x452>
 8002bb6:	bf00      	nop
 8002bb8:	fe10803f 	.word	0xfe10803f
 8002bbc:	5c001000 	.word	0x5c001000
 8002bc0:	ffff0000 	.word	0xffff0000
 8002bc4:	58025408 	.word	0x58025408
 8002bc8:	5802541c 	.word	0x5802541c
 8002bcc:	58025430 	.word	0x58025430
 8002bd0:	58025444 	.word	0x58025444
 8002bd4:	58025458 	.word	0x58025458
 8002bd8:	5802546c 	.word	0x5802546c
 8002bdc:	58025480 	.word	0x58025480
 8002be0:	58025494 	.word	0x58025494
 8002be4:	fffe000f 	.word	0xfffe000f
 8002be8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68d2      	ldr	r2, [r2, #12]
 8002bee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002de8 <HAL_DMA_Init+0x650>)
 8002c30:	4413      	add	r3, r2
 8002c32:	4a6e      	ldr	r2, [pc, #440]	@ (8002dec <HAL_DMA_Init+0x654>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f002 f9b5 	bl	8004fb0 <DMA_CalcBaseAndBitshift>
 8002c46:	4603      	mov	r3, r0
 8002c48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2201      	movs	r2, #1
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e008      	b.n	8002c6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2240      	movs	r2, #64	@ 0x40
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2203      	movs	r2, #3
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0b7      	b.n	8002dde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5f      	ldr	r2, [pc, #380]	@ (8002df0 <HAL_DMA_Init+0x658>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d072      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002df4 <HAL_DMA_Init+0x65c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d06d      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5c      	ldr	r2, [pc, #368]	@ (8002df8 <HAL_DMA_Init+0x660>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d068      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5a      	ldr	r2, [pc, #360]	@ (8002dfc <HAL_DMA_Init+0x664>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d063      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a59      	ldr	r2, [pc, #356]	@ (8002e00 <HAL_DMA_Init+0x668>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	@ (8002e04 <HAL_DMA_Init+0x66c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d059      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a56      	ldr	r2, [pc, #344]	@ (8002e08 <HAL_DMA_Init+0x670>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d054      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_DMA_Init+0x674>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04f      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a53      	ldr	r2, [pc, #332]	@ (8002e10 <HAL_DMA_Init+0x678>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04a      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	@ (8002e14 <HAL_DMA_Init+0x67c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d045      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a50      	ldr	r2, [pc, #320]	@ (8002e18 <HAL_DMA_Init+0x680>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d040      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4e      	ldr	r2, [pc, #312]	@ (8002e1c <HAL_DMA_Init+0x684>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d03b      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4d      	ldr	r2, [pc, #308]	@ (8002e20 <HAL_DMA_Init+0x688>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d036      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <HAL_DMA_Init+0x68c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d031      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8002e28 <HAL_DMA_Init+0x690>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d02c      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a48      	ldr	r2, [pc, #288]	@ (8002e2c <HAL_DMA_Init+0x694>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d027      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a47      	ldr	r2, [pc, #284]	@ (8002e30 <HAL_DMA_Init+0x698>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a45      	ldr	r2, [pc, #276]	@ (8002e34 <HAL_DMA_Init+0x69c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a44      	ldr	r2, [pc, #272]	@ (8002e38 <HAL_DMA_Init+0x6a0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d018      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a42      	ldr	r2, [pc, #264]	@ (8002e3c <HAL_DMA_Init+0x6a4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a41      	ldr	r2, [pc, #260]	@ (8002e40 <HAL_DMA_Init+0x6a8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3f      	ldr	r2, [pc, #252]	@ (8002e44 <HAL_DMA_Init+0x6ac>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e48 <HAL_DMA_Init+0x6b0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_Init+0x5c6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3c      	ldr	r2, [pc, #240]	@ (8002e4c <HAL_DMA_Init+0x6b4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_DMA_Init+0x5ca>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_Init+0x5cc>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d032      	beq.n	8002dce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f002 fa4f 	bl	800520c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b80      	cmp	r3, #128	@ 0x80
 8002d74:	d102      	bne.n	8002d7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_DMA_Init+0x624>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d80c      	bhi.n	8002dbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f002 facc 	bl	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	e008      	b.n	8002dce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	a7fdabf8 	.word	0xa7fdabf8
 8002dec:	cccccccd 	.word	0xcccccccd
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
 8002e30:	58025408 	.word	0x58025408
 8002e34:	5802541c 	.word	0x5802541c
 8002e38:	58025430 	.word	0x58025430
 8002e3c:	58025444 	.word	0x58025444
 8002e40:	58025458 	.word	0x58025458
 8002e44:	5802546c 	.word	0x5802546c
 8002e48:	58025480 	.word	0x58025480
 8002e4c:	58025494 	.word	0x58025494

08002e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e226      	b.n	80032ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Start_IT+0x2a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e21f      	b.n	80032ba <HAL_DMA_Start_IT+0x46a>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	f040 820a 	bne.w	80032a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a68      	ldr	r2, [pc, #416]	@ (8003044 <HAL_DMA_Start_IT+0x1f4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04a      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a66      	ldr	r2, [pc, #408]	@ (8003048 <HAL_DMA_Start_IT+0x1f8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d045      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a65      	ldr	r2, [pc, #404]	@ (800304c <HAL_DMA_Start_IT+0x1fc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d040      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a63      	ldr	r2, [pc, #396]	@ (8003050 <HAL_DMA_Start_IT+0x200>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03b      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a62      	ldr	r2, [pc, #392]	@ (8003054 <HAL_DMA_Start_IT+0x204>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a60      	ldr	r2, [pc, #384]	@ (8003058 <HAL_DMA_Start_IT+0x208>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5f      	ldr	r2, [pc, #380]	@ (800305c <HAL_DMA_Start_IT+0x20c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8003060 <HAL_DMA_Start_IT+0x210>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d027      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8003064 <HAL_DMA_Start_IT+0x214>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a5a      	ldr	r2, [pc, #360]	@ (8003068 <HAL_DMA_Start_IT+0x218>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a59      	ldr	r2, [pc, #356]	@ (800306c <HAL_DMA_Start_IT+0x21c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a57      	ldr	r2, [pc, #348]	@ (8003070 <HAL_DMA_Start_IT+0x220>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a56      	ldr	r2, [pc, #344]	@ (8003074 <HAL_DMA_Start_IT+0x224>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a54      	ldr	r2, [pc, #336]	@ (8003078 <HAL_DMA_Start_IT+0x228>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a53      	ldr	r2, [pc, #332]	@ (800307c <HAL_DMA_Start_IT+0x22c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_Start_IT+0xee>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a51      	ldr	r2, [pc, #324]	@ (8003080 <HAL_DMA_Start_IT+0x230>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_Start_IT+0x100>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e007      	b.n	8002f60 <HAL_DMA_Start_IT+0x110>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f001 fe76 	bl	8004c58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_DMA_Start_IT+0x1f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d04a      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	@ (8003048 <HAL_DMA_Start_IT+0x1f8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d045      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a31      	ldr	r2, [pc, #196]	@ (800304c <HAL_DMA_Start_IT+0x1fc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d040      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	@ (8003050 <HAL_DMA_Start_IT+0x200>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d03b      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	@ (8003054 <HAL_DMA_Start_IT+0x204>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d036      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <HAL_DMA_Start_IT+0x208>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d031      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <HAL_DMA_Start_IT+0x20c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02c      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <HAL_DMA_Start_IT+0x210>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d027      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	@ (8003064 <HAL_DMA_Start_IT+0x214>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d022      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_DMA_Start_IT+0x218>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d01d      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	@ (800306c <HAL_DMA_Start_IT+0x21c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d018      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <HAL_DMA_Start_IT+0x220>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d013      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	@ (8003074 <HAL_DMA_Start_IT+0x224>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00e      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_DMA_Start_IT+0x228>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_DMA_Start_IT+0x22c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_DMA_Start_IT+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_DMA_Start_IT+0x230>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <HAL_DMA_Start_IT+0x1c0>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_DMA_Start_IT+0x1c2>
 8003010:	2300      	movs	r3, #0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d036      	beq.n	8003084 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 021e 	bic.w	r2, r3, #30
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0216 	orr.w	r2, r2, #22
 8003028:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03e      	beq.n	80030b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e035      	b.n	80030b0 <HAL_DMA_Start_IT+0x260>
 8003044:	40020010 	.word	0x40020010
 8003048:	40020028 	.word	0x40020028
 800304c:	40020040 	.word	0x40020040
 8003050:	40020058 	.word	0x40020058
 8003054:	40020070 	.word	0x40020070
 8003058:	40020088 	.word	0x40020088
 800305c:	400200a0 	.word	0x400200a0
 8003060:	400200b8 	.word	0x400200b8
 8003064:	40020410 	.word	0x40020410
 8003068:	40020428 	.word	0x40020428
 800306c:	40020440 	.word	0x40020440
 8003070:	40020458 	.word	0x40020458
 8003074:	40020470 	.word	0x40020470
 8003078:	40020488 	.word	0x40020488
 800307c:	400204a0 	.word	0x400204a0
 8003080:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 020e 	bic.w	r2, r3, #14
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 020a 	orr.w	r2, r2, #10
 8003096:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0204 	orr.w	r2, r2, #4
 80030ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a83      	ldr	r2, [pc, #524]	@ (80032c4 <HAL_DMA_Start_IT+0x474>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d072      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a82      	ldr	r2, [pc, #520]	@ (80032c8 <HAL_DMA_Start_IT+0x478>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d06d      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a80      	ldr	r2, [pc, #512]	@ (80032cc <HAL_DMA_Start_IT+0x47c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d068      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7f      	ldr	r2, [pc, #508]	@ (80032d0 <HAL_DMA_Start_IT+0x480>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d063      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a7d      	ldr	r2, [pc, #500]	@ (80032d4 <HAL_DMA_Start_IT+0x484>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d05e      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7c      	ldr	r2, [pc, #496]	@ (80032d8 <HAL_DMA_Start_IT+0x488>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d059      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7a      	ldr	r2, [pc, #488]	@ (80032dc <HAL_DMA_Start_IT+0x48c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d054      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a79      	ldr	r2, [pc, #484]	@ (80032e0 <HAL_DMA_Start_IT+0x490>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d04f      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a77      	ldr	r2, [pc, #476]	@ (80032e4 <HAL_DMA_Start_IT+0x494>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04a      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a76      	ldr	r2, [pc, #472]	@ (80032e8 <HAL_DMA_Start_IT+0x498>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d045      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a74      	ldr	r2, [pc, #464]	@ (80032ec <HAL_DMA_Start_IT+0x49c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d040      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_DMA_Start_IT+0x4a0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d03b      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a71      	ldr	r2, [pc, #452]	@ (80032f4 <HAL_DMA_Start_IT+0x4a4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d036      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a70      	ldr	r2, [pc, #448]	@ (80032f8 <HAL_DMA_Start_IT+0x4a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6e      	ldr	r2, [pc, #440]	@ (80032fc <HAL_DMA_Start_IT+0x4ac>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6d      	ldr	r2, [pc, #436]	@ (8003300 <HAL_DMA_Start_IT+0x4b0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d027      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a6b      	ldr	r2, [pc, #428]	@ (8003304 <HAL_DMA_Start_IT+0x4b4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6a      	ldr	r2, [pc, #424]	@ (8003308 <HAL_DMA_Start_IT+0x4b8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a68      	ldr	r2, [pc, #416]	@ (800330c <HAL_DMA_Start_IT+0x4bc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a67      	ldr	r2, [pc, #412]	@ (8003310 <HAL_DMA_Start_IT+0x4c0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	@ (8003314 <HAL_DMA_Start_IT+0x4c4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a64      	ldr	r2, [pc, #400]	@ (8003318 <HAL_DMA_Start_IT+0x4c8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a62      	ldr	r2, [pc, #392]	@ (800331c <HAL_DMA_Start_IT+0x4cc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Start_IT+0x350>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a61      	ldr	r2, [pc, #388]	@ (8003320 <HAL_DMA_Start_IT+0x4d0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_DMA_Start_IT+0x354>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_DMA_Start_IT+0x356>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01a      	beq.n	80031e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a37      	ldr	r2, [pc, #220]	@ (80032c4 <HAL_DMA_Start_IT+0x474>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a36      	ldr	r2, [pc, #216]	@ (80032c8 <HAL_DMA_Start_IT+0x478>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	@ (80032cc <HAL_DMA_Start_IT+0x47c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a33      	ldr	r2, [pc, #204]	@ (80032d0 <HAL_DMA_Start_IT+0x480>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	@ (80032d4 <HAL_DMA_Start_IT+0x484>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a30      	ldr	r2, [pc, #192]	@ (80032d8 <HAL_DMA_Start_IT+0x488>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	@ (80032dc <HAL_DMA_Start_IT+0x48c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	@ (80032e0 <HAL_DMA_Start_IT+0x490>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2b      	ldr	r2, [pc, #172]	@ (80032e4 <HAL_DMA_Start_IT+0x494>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	@ (80032e8 <HAL_DMA_Start_IT+0x498>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	@ (80032ec <HAL_DMA_Start_IT+0x49c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <HAL_DMA_Start_IT+0x4a0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	@ (80032f4 <HAL_DMA_Start_IT+0x4a4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a24      	ldr	r2, [pc, #144]	@ (80032f8 <HAL_DMA_Start_IT+0x4a8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_DMA_Start_IT+0x4ac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Start_IT+0x430>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	@ (8003300 <HAL_DMA_Start_IT+0x4b0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <HAL_DMA_Start_IT+0x442>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e012      	b.n	80032b8 <HAL_DMA_Start_IT+0x468>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e009      	b.n	80032b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40020010 	.word	0x40020010
 80032c8:	40020028 	.word	0x40020028
 80032cc:	40020040 	.word	0x40020040
 80032d0:	40020058 	.word	0x40020058
 80032d4:	40020070 	.word	0x40020070
 80032d8:	40020088 	.word	0x40020088
 80032dc:	400200a0 	.word	0x400200a0
 80032e0:	400200b8 	.word	0x400200b8
 80032e4:	40020410 	.word	0x40020410
 80032e8:	40020428 	.word	0x40020428
 80032ec:	40020440 	.word	0x40020440
 80032f0:	40020458 	.word	0x40020458
 80032f4:	40020470 	.word	0x40020470
 80032f8:	40020488 	.word	0x40020488
 80032fc:	400204a0 	.word	0x400204a0
 8003300:	400204b8 	.word	0x400204b8
 8003304:	58025408 	.word	0x58025408
 8003308:	5802541c 	.word	0x5802541c
 800330c:	58025430 	.word	0x58025430
 8003310:	58025444 	.word	0x58025444
 8003314:	58025458 	.word	0x58025458
 8003318:	5802546c 	.word	0x5802546c
 800331c:	58025480 	.word	0x58025480
 8003320:	58025494 	.word	0x58025494

08003324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff f928 	bl	8002580 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e2dc      	b.n	80038f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d008      	beq.n	800335a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2280      	movs	r2, #128	@ 0x80
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e2cd      	b.n	80038f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a76      	ldr	r2, [pc, #472]	@ (8003538 <HAL_DMA_Abort+0x214>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d04a      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a74      	ldr	r2, [pc, #464]	@ (800353c <HAL_DMA_Abort+0x218>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d045      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a73      	ldr	r2, [pc, #460]	@ (8003540 <HAL_DMA_Abort+0x21c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d040      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a71      	ldr	r2, [pc, #452]	@ (8003544 <HAL_DMA_Abort+0x220>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d03b      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a70      	ldr	r2, [pc, #448]	@ (8003548 <HAL_DMA_Abort+0x224>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d036      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6e      	ldr	r2, [pc, #440]	@ (800354c <HAL_DMA_Abort+0x228>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d031      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6d      	ldr	r2, [pc, #436]	@ (8003550 <HAL_DMA_Abort+0x22c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d02c      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003554 <HAL_DMA_Abort+0x230>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d027      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003558 <HAL_DMA_Abort+0x234>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a68      	ldr	r2, [pc, #416]	@ (800355c <HAL_DMA_Abort+0x238>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a67      	ldr	r2, [pc, #412]	@ (8003560 <HAL_DMA_Abort+0x23c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	@ (8003564 <HAL_DMA_Abort+0x240>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a64      	ldr	r2, [pc, #400]	@ (8003568 <HAL_DMA_Abort+0x244>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a62      	ldr	r2, [pc, #392]	@ (800356c <HAL_DMA_Abort+0x248>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a61      	ldr	r2, [pc, #388]	@ (8003570 <HAL_DMA_Abort+0x24c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Abort+0xd6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a5f      	ldr	r2, [pc, #380]	@ (8003574 <HAL_DMA_Abort+0x250>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_Abort+0xda>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_DMA_Abort+0xdc>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 021e 	bic.w	r2, r2, #30
 8003412:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003422:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e00a      	b.n	8003442 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020e 	bic.w	r2, r2, #14
 800343a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a3c      	ldr	r2, [pc, #240]	@ (8003538 <HAL_DMA_Abort+0x214>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d072      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3a      	ldr	r2, [pc, #232]	@ (800353c <HAL_DMA_Abort+0x218>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d06d      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a39      	ldr	r2, [pc, #228]	@ (8003540 <HAL_DMA_Abort+0x21c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d068      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a37      	ldr	r2, [pc, #220]	@ (8003544 <HAL_DMA_Abort+0x220>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d063      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a36      	ldr	r2, [pc, #216]	@ (8003548 <HAL_DMA_Abort+0x224>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d05e      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a34      	ldr	r2, [pc, #208]	@ (800354c <HAL_DMA_Abort+0x228>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d059      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a33      	ldr	r2, [pc, #204]	@ (8003550 <HAL_DMA_Abort+0x22c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d054      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a31      	ldr	r2, [pc, #196]	@ (8003554 <HAL_DMA_Abort+0x230>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04f      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a30      	ldr	r2, [pc, #192]	@ (8003558 <HAL_DMA_Abort+0x234>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2e      	ldr	r2, [pc, #184]	@ (800355c <HAL_DMA_Abort+0x238>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003560 <HAL_DMA_Abort+0x23c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003564 <HAL_DMA_Abort+0x240>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2a      	ldr	r2, [pc, #168]	@ (8003568 <HAL_DMA_Abort+0x244>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a28      	ldr	r2, [pc, #160]	@ (800356c <HAL_DMA_Abort+0x248>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a27      	ldr	r2, [pc, #156]	@ (8003570 <HAL_DMA_Abort+0x24c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a25      	ldr	r2, [pc, #148]	@ (8003574 <HAL_DMA_Abort+0x250>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a24      	ldr	r2, [pc, #144]	@ (8003578 <HAL_DMA_Abort+0x254>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a22      	ldr	r2, [pc, #136]	@ (800357c <HAL_DMA_Abort+0x258>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <HAL_DMA_Abort+0x25c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1f      	ldr	r2, [pc, #124]	@ (8003584 <HAL_DMA_Abort+0x260>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_DMA_Abort+0x264>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1c      	ldr	r2, [pc, #112]	@ (800358c <HAL_DMA_Abort+0x268>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <HAL_DMA_Abort+0x26c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Abort+0x20e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a19      	ldr	r2, [pc, #100]	@ (8003594 <HAL_DMA_Abort+0x270>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d132      	bne.n	8003598 <HAL_DMA_Abort+0x274>
 8003532:	2301      	movs	r3, #1
 8003534:	e031      	b.n	800359a <HAL_DMA_Abort+0x276>
 8003536:	bf00      	nop
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
 8003578:	58025408 	.word	0x58025408
 800357c:	5802541c 	.word	0x5802541c
 8003580:	58025430 	.word	0x58025430
 8003584:	58025444 	.word	0x58025444
 8003588:	58025458 	.word	0x58025458
 800358c:	5802546c 	.word	0x5802546c
 8003590:	58025480 	.word	0x58025480
 8003594:	58025494 	.word	0x58025494
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003768 <HAL_DMA_Abort+0x444>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	@ (800376c <HAL_DMA_Abort+0x448>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003770 <HAL_DMA_Abort+0x44c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a68      	ldr	r2, [pc, #416]	@ (8003774 <HAL_DMA_Abort+0x450>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a67      	ldr	r2, [pc, #412]	@ (8003778 <HAL_DMA_Abort+0x454>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a65      	ldr	r2, [pc, #404]	@ (800377c <HAL_DMA_Abort+0x458>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a64      	ldr	r2, [pc, #400]	@ (8003780 <HAL_DMA_Abort+0x45c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a62      	ldr	r2, [pc, #392]	@ (8003784 <HAL_DMA_Abort+0x460>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a61      	ldr	r2, [pc, #388]	@ (8003788 <HAL_DMA_Abort+0x464>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a5f      	ldr	r2, [pc, #380]	@ (800378c <HAL_DMA_Abort+0x468>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5e      	ldr	r2, [pc, #376]	@ (8003790 <HAL_DMA_Abort+0x46c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a5c      	ldr	r2, [pc, #368]	@ (8003794 <HAL_DMA_Abort+0x470>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5b      	ldr	r2, [pc, #364]	@ (8003798 <HAL_DMA_Abort+0x474>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a59      	ldr	r2, [pc, #356]	@ (800379c <HAL_DMA_Abort+0x478>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a58      	ldr	r2, [pc, #352]	@ (80037a0 <HAL_DMA_Abort+0x47c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Abort+0x32a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a56      	ldr	r2, [pc, #344]	@ (80037a4 <HAL_DMA_Abort+0x480>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <HAL_DMA_Abort+0x33c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e007      	b.n	8003670 <HAL_DMA_Abort+0x34c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003670:	e013      	b.n	800369a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003672:	f7fe ff85 	bl	8002580 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b05      	cmp	r3, #5
 800367e:	d90c      	bls.n	800369a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e12d      	b.n	80038f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e5      	bne.n	8003672 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003768 <HAL_DMA_Abort+0x444>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2d      	ldr	r2, [pc, #180]	@ (800376c <HAL_DMA_Abort+0x448>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2c      	ldr	r2, [pc, #176]	@ (8003770 <HAL_DMA_Abort+0x44c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003774 <HAL_DMA_Abort+0x450>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <HAL_DMA_Abort+0x454>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a27      	ldr	r2, [pc, #156]	@ (800377c <HAL_DMA_Abort+0x458>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a26      	ldr	r2, [pc, #152]	@ (8003780 <HAL_DMA_Abort+0x45c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a24      	ldr	r2, [pc, #144]	@ (8003784 <HAL_DMA_Abort+0x460>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a23      	ldr	r2, [pc, #140]	@ (8003788 <HAL_DMA_Abort+0x464>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a21      	ldr	r2, [pc, #132]	@ (800378c <HAL_DMA_Abort+0x468>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a20      	ldr	r2, [pc, #128]	@ (8003790 <HAL_DMA_Abort+0x46c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <HAL_DMA_Abort+0x470>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1d      	ldr	r2, [pc, #116]	@ (8003798 <HAL_DMA_Abort+0x474>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_DMA_Abort+0x478>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1a      	ldr	r2, [pc, #104]	@ (80037a0 <HAL_DMA_Abort+0x47c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_Abort+0x422>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <HAL_DMA_Abort+0x480>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_DMA_Abort+0x426>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_DMA_Abort+0x428>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02b      	beq.n	80037a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	223f      	movs	r2, #63	@ 0x3f
 8003760:	409a      	lsls	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	e02a      	b.n	80037be <HAL_DMA_Abort+0x49a>
 8003768:	40020010 	.word	0x40020010
 800376c:	40020028 	.word	0x40020028
 8003770:	40020040 	.word	0x40020040
 8003774:	40020058 	.word	0x40020058
 8003778:	40020070 	.word	0x40020070
 800377c:	40020088 	.word	0x40020088
 8003780:	400200a0 	.word	0x400200a0
 8003784:	400200b8 	.word	0x400200b8
 8003788:	40020410 	.word	0x40020410
 800378c:	40020428 	.word	0x40020428
 8003790:	40020440 	.word	0x40020440
 8003794:	40020458 	.word	0x40020458
 8003798:	40020470 	.word	0x40020470
 800379c:	40020488 	.word	0x40020488
 80037a0:	400204a0 	.word	0x400204a0
 80037a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2201      	movs	r2, #1
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003900 <HAL_DMA_Abort+0x5dc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d072      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003904 <HAL_DMA_Abort+0x5e0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d06d      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003908 <HAL_DMA_Abort+0x5e4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d068      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4a      	ldr	r2, [pc, #296]	@ (800390c <HAL_DMA_Abort+0x5e8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d063      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a49      	ldr	r2, [pc, #292]	@ (8003910 <HAL_DMA_Abort+0x5ec>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d05e      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a47      	ldr	r2, [pc, #284]	@ (8003914 <HAL_DMA_Abort+0x5f0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d059      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a46      	ldr	r2, [pc, #280]	@ (8003918 <HAL_DMA_Abort+0x5f4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d054      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a44      	ldr	r2, [pc, #272]	@ (800391c <HAL_DMA_Abort+0x5f8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04f      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a43      	ldr	r2, [pc, #268]	@ (8003920 <HAL_DMA_Abort+0x5fc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d04a      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a41      	ldr	r2, [pc, #260]	@ (8003924 <HAL_DMA_Abort+0x600>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d045      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a40      	ldr	r2, [pc, #256]	@ (8003928 <HAL_DMA_Abort+0x604>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d040      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3e      	ldr	r2, [pc, #248]	@ (800392c <HAL_DMA_Abort+0x608>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d03b      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3d      	ldr	r2, [pc, #244]	@ (8003930 <HAL_DMA_Abort+0x60c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d036      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3b      	ldr	r2, [pc, #236]	@ (8003934 <HAL_DMA_Abort+0x610>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a3a      	ldr	r2, [pc, #232]	@ (8003938 <HAL_DMA_Abort+0x614>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d02c      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a38      	ldr	r2, [pc, #224]	@ (800393c <HAL_DMA_Abort+0x618>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d027      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a37      	ldr	r2, [pc, #220]	@ (8003940 <HAL_DMA_Abort+0x61c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a35      	ldr	r2, [pc, #212]	@ (8003944 <HAL_DMA_Abort+0x620>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a34      	ldr	r2, [pc, #208]	@ (8003948 <HAL_DMA_Abort+0x624>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a32      	ldr	r2, [pc, #200]	@ (800394c <HAL_DMA_Abort+0x628>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a31      	ldr	r2, [pc, #196]	@ (8003950 <HAL_DMA_Abort+0x62c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2f      	ldr	r2, [pc, #188]	@ (8003954 <HAL_DMA_Abort+0x630>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <HAL_DMA_Abort+0x634>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Abort+0x58a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	@ (800395c <HAL_DMA_Abort+0x638>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_Abort+0x58e>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_DMA_Abort+0x590>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40020010 	.word	0x40020010
 8003904:	40020028 	.word	0x40020028
 8003908:	40020040 	.word	0x40020040
 800390c:	40020058 	.word	0x40020058
 8003910:	40020070 	.word	0x40020070
 8003914:	40020088 	.word	0x40020088
 8003918:	400200a0 	.word	0x400200a0
 800391c:	400200b8 	.word	0x400200b8
 8003920:	40020410 	.word	0x40020410
 8003924:	40020428 	.word	0x40020428
 8003928:	40020440 	.word	0x40020440
 800392c:	40020458 	.word	0x40020458
 8003930:	40020470 	.word	0x40020470
 8003934:	40020488 	.word	0x40020488
 8003938:	400204a0 	.word	0x400204a0
 800393c:	400204b8 	.word	0x400204b8
 8003940:	58025408 	.word	0x58025408
 8003944:	5802541c 	.word	0x5802541c
 8003948:	58025430 	.word	0x58025430
 800394c:	58025444 	.word	0x58025444
 8003950:	58025458 	.word	0x58025458
 8003954:	5802546c 	.word	0x5802546c
 8003958:	58025480 	.word	0x58025480
 800395c:	58025494 	.word	0x58025494

08003960 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e237      	b.n	8003de2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2280      	movs	r2, #128	@ 0x80
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e22c      	b.n	8003de2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5c      	ldr	r2, [pc, #368]	@ (8003b00 <HAL_DMA_Abort_IT+0x1a0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d04a      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5b      	ldr	r2, [pc, #364]	@ (8003b04 <HAL_DMA_Abort_IT+0x1a4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d045      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <HAL_DMA_Abort_IT+0x1a8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d040      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a58      	ldr	r2, [pc, #352]	@ (8003b0c <HAL_DMA_Abort_IT+0x1ac>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d03b      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a56      	ldr	r2, [pc, #344]	@ (8003b10 <HAL_DMA_Abort_IT+0x1b0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d036      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a55      	ldr	r2, [pc, #340]	@ (8003b14 <HAL_DMA_Abort_IT+0x1b4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d031      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a53      	ldr	r2, [pc, #332]	@ (8003b18 <HAL_DMA_Abort_IT+0x1b8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02c      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_DMA_Abort_IT+0x1bc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d027      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a50      	ldr	r2, [pc, #320]	@ (8003b20 <HAL_DMA_Abort_IT+0x1c0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d022      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4f      	ldr	r2, [pc, #316]	@ (8003b24 <HAL_DMA_Abort_IT+0x1c4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d01d      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003b28 <HAL_DMA_Abort_IT+0x1c8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d018      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4c      	ldr	r2, [pc, #304]	@ (8003b2c <HAL_DMA_Abort_IT+0x1cc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	@ (8003b30 <HAL_DMA_Abort_IT+0x1d0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00e      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a49      	ldr	r2, [pc, #292]	@ (8003b34 <HAL_DMA_Abort_IT+0x1d4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a47      	ldr	r2, [pc, #284]	@ (8003b38 <HAL_DMA_Abort_IT+0x1d8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xc8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a46      	ldr	r2, [pc, #280]	@ (8003b3c <HAL_DMA_Abort_IT+0x1dc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Abort_IT+0xcc>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_DMA_Abort_IT+0xce>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8086 	beq.w	8003b40 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2f      	ldr	r2, [pc, #188]	@ (8003b00 <HAL_DMA_Abort_IT+0x1a0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04a      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003b04 <HAL_DMA_Abort_IT+0x1a4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d045      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2c      	ldr	r2, [pc, #176]	@ (8003b08 <HAL_DMA_Abort_IT+0x1a8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d040      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b0c <HAL_DMA_Abort_IT+0x1ac>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d03b      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a29      	ldr	r2, [pc, #164]	@ (8003b10 <HAL_DMA_Abort_IT+0x1b0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d036      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a28      	ldr	r2, [pc, #160]	@ (8003b14 <HAL_DMA_Abort_IT+0x1b4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <HAL_DMA_Abort_IT+0x1b8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02c      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a25      	ldr	r2, [pc, #148]	@ (8003b1c <HAL_DMA_Abort_IT+0x1bc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d027      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a23      	ldr	r2, [pc, #140]	@ (8003b20 <HAL_DMA_Abort_IT+0x1c0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a22      	ldr	r2, [pc, #136]	@ (8003b24 <HAL_DMA_Abort_IT+0x1c4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	@ (8003b28 <HAL_DMA_Abort_IT+0x1c8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1f      	ldr	r2, [pc, #124]	@ (8003b2c <HAL_DMA_Abort_IT+0x1cc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <HAL_DMA_Abort_IT+0x1d0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <HAL_DMA_Abort_IT+0x1d4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b38 <HAL_DMA_Abort_IT+0x1d8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_Abort_IT+0x17c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a19      	ldr	r2, [pc, #100]	@ (8003b3c <HAL_DMA_Abort_IT+0x1dc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <HAL_DMA_Abort_IT+0x18e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e178      	b.n	8003de0 <HAL_DMA_Abort_IT+0x480>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e16f      	b.n	8003de0 <HAL_DMA_Abort_IT+0x480>
 8003b00:	40020010 	.word	0x40020010
 8003b04:	40020028 	.word	0x40020028
 8003b08:	40020040 	.word	0x40020040
 8003b0c:	40020058 	.word	0x40020058
 8003b10:	40020070 	.word	0x40020070
 8003b14:	40020088 	.word	0x40020088
 8003b18:	400200a0 	.word	0x400200a0
 8003b1c:	400200b8 	.word	0x400200b8
 8003b20:	40020410 	.word	0x40020410
 8003b24:	40020428 	.word	0x40020428
 8003b28:	40020440 	.word	0x40020440
 8003b2c:	40020458 	.word	0x40020458
 8003b30:	40020470 	.word	0x40020470
 8003b34:	40020488 	.word	0x40020488
 8003b38:	400204a0 	.word	0x400204a0
 8003b3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 020e 	bic.w	r2, r2, #14
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6c      	ldr	r2, [pc, #432]	@ (8003d08 <HAL_DMA_Abort_IT+0x3a8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8003d0c <HAL_DMA_Abort_IT+0x3ac>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a69      	ldr	r2, [pc, #420]	@ (8003d10 <HAL_DMA_Abort_IT+0x3b0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a68      	ldr	r2, [pc, #416]	@ (8003d14 <HAL_DMA_Abort_IT+0x3b4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a66      	ldr	r2, [pc, #408]	@ (8003d18 <HAL_DMA_Abort_IT+0x3b8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_DMA_Abort_IT+0x3bc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a63      	ldr	r2, [pc, #396]	@ (8003d20 <HAL_DMA_Abort_IT+0x3c0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a62      	ldr	r2, [pc, #392]	@ (8003d24 <HAL_DMA_Abort_IT+0x3c4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a60      	ldr	r2, [pc, #384]	@ (8003d28 <HAL_DMA_Abort_IT+0x3c8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5f      	ldr	r2, [pc, #380]	@ (8003d2c <HAL_DMA_Abort_IT+0x3cc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a5d      	ldr	r2, [pc, #372]	@ (8003d30 <HAL_DMA_Abort_IT+0x3d0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d34 <HAL_DMA_Abort_IT+0x3d4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d38 <HAL_DMA_Abort_IT+0x3d8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a59      	ldr	r2, [pc, #356]	@ (8003d3c <HAL_DMA_Abort_IT+0x3dc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a57      	ldr	r2, [pc, #348]	@ (8003d40 <HAL_DMA_Abort_IT+0x3e0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x290>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a56      	ldr	r2, [pc, #344]	@ (8003d44 <HAL_DMA_Abort_IT+0x3e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <HAL_DMA_Abort_IT+0x2a2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e007      	b.n	8003c12 <HAL_DMA_Abort_IT+0x2b2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3c      	ldr	r2, [pc, #240]	@ (8003d08 <HAL_DMA_Abort_IT+0x3a8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d072      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3a      	ldr	r2, [pc, #232]	@ (8003d0c <HAL_DMA_Abort_IT+0x3ac>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d06d      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a39      	ldr	r2, [pc, #228]	@ (8003d10 <HAL_DMA_Abort_IT+0x3b0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d068      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a37      	ldr	r2, [pc, #220]	@ (8003d14 <HAL_DMA_Abort_IT+0x3b4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d063      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a36      	ldr	r2, [pc, #216]	@ (8003d18 <HAL_DMA_Abort_IT+0x3b8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d05e      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a34      	ldr	r2, [pc, #208]	@ (8003d1c <HAL_DMA_Abort_IT+0x3bc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d059      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a33      	ldr	r2, [pc, #204]	@ (8003d20 <HAL_DMA_Abort_IT+0x3c0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d054      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a31      	ldr	r2, [pc, #196]	@ (8003d24 <HAL_DMA_Abort_IT+0x3c4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04f      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a30      	ldr	r2, [pc, #192]	@ (8003d28 <HAL_DMA_Abort_IT+0x3c8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d04a      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <HAL_DMA_Abort_IT+0x3cc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d045      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d30 <HAL_DMA_Abort_IT+0x3d0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d040      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2b      	ldr	r2, [pc, #172]	@ (8003d34 <HAL_DMA_Abort_IT+0x3d4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d03b      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d38 <HAL_DMA_Abort_IT+0x3d8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d036      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a28      	ldr	r2, [pc, #160]	@ (8003d3c <HAL_DMA_Abort_IT+0x3dc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d031      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <HAL_DMA_Abort_IT+0x3e0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d02c      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a25      	ldr	r2, [pc, #148]	@ (8003d44 <HAL_DMA_Abort_IT+0x3e4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d027      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a24      	ldr	r2, [pc, #144]	@ (8003d48 <HAL_DMA_Abort_IT+0x3e8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d022      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	@ (8003d4c <HAL_DMA_Abort_IT+0x3ec>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01d      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <HAL_DMA_Abort_IT+0x3f0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d018      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d54 <HAL_DMA_Abort_IT+0x3f4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1e      	ldr	r2, [pc, #120]	@ (8003d58 <HAL_DMA_Abort_IT+0x3f8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <HAL_DMA_Abort_IT+0x3fc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d60 <HAL_DMA_Abort_IT+0x400>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_DMA_Abort_IT+0x3a2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a19      	ldr	r2, [pc, #100]	@ (8003d64 <HAL_DMA_Abort_IT+0x404>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d132      	bne.n	8003d68 <HAL_DMA_Abort_IT+0x408>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e031      	b.n	8003d6a <HAL_DMA_Abort_IT+0x40a>
 8003d06:	bf00      	nop
 8003d08:	40020010 	.word	0x40020010
 8003d0c:	40020028 	.word	0x40020028
 8003d10:	40020040 	.word	0x40020040
 8003d14:	40020058 	.word	0x40020058
 8003d18:	40020070 	.word	0x40020070
 8003d1c:	40020088 	.word	0x40020088
 8003d20:	400200a0 	.word	0x400200a0
 8003d24:	400200b8 	.word	0x400200b8
 8003d28:	40020410 	.word	0x40020410
 8003d2c:	40020428 	.word	0x40020428
 8003d30:	40020440 	.word	0x40020440
 8003d34:	40020458 	.word	0x40020458
 8003d38:	40020470 	.word	0x40020470
 8003d3c:	40020488 	.word	0x40020488
 8003d40:	400204a0 	.word	0x400204a0
 8003d44:	400204b8 	.word	0x400204b8
 8003d48:	58025408 	.word	0x58025408
 8003d4c:	5802541c 	.word	0x5802541c
 8003d50:	58025430 	.word	0x58025430
 8003d54:	58025444 	.word	0x58025444
 8003d58:	58025458 	.word	0x58025458
 8003d5c:	5802546c 	.word	0x5802546c
 8003d60:	58025480 	.word	0x58025480
 8003d64:	58025494 	.word	0x58025494
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d028      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00c      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003db4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	@ 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003df8:	4b67      	ldr	r3, [pc, #412]	@ (8003f98 <HAL_DMA_IRQHandler+0x1ac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	@ (8003f9c <HAL_DMA_IRQHandler+0x1b0>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0a9b      	lsrs	r3, r3, #10
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a5f      	ldr	r2, [pc, #380]	@ (8003fa0 <HAL_DMA_IRQHandler+0x1b4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d04a      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa4 <HAL_DMA_IRQHandler+0x1b8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d045      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1bc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d040      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5a      	ldr	r2, [pc, #360]	@ (8003fac <HAL_DMA_IRQHandler+0x1c0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d03b      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a59      	ldr	r2, [pc, #356]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1c4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d036      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a57      	ldr	r2, [pc, #348]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1c8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d031      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a56      	ldr	r2, [pc, #344]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1cc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d02c      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a54      	ldr	r2, [pc, #336]	@ (8003fbc <HAL_DMA_IRQHandler+0x1d0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d027      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a53      	ldr	r2, [pc, #332]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d022      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a51      	ldr	r2, [pc, #324]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1d8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01d      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a50      	ldr	r2, [pc, #320]	@ (8003fc8 <HAL_DMA_IRQHandler+0x1dc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a4e      	ldr	r2, [pc, #312]	@ (8003fcc <HAL_DMA_IRQHandler+0x1e0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003fd0 <HAL_DMA_IRQHandler+0x1e4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd4 <HAL_DMA_IRQHandler+0x1e8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd8 <HAL_DMA_IRQHandler+0x1ec>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xd2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a48      	ldr	r2, [pc, #288]	@ (8003fdc <HAL_DMA_IRQHandler+0x1f0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0xd6>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xd8>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 842b 	beq.w	8004720 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80a2 	beq.w	8004024 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa0 <HAL_DMA_IRQHandler+0x1b4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d04a      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <HAL_DMA_IRQHandler+0x1b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d045      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1bc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d040      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_DMA_IRQHandler+0x1c0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d03b      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1c4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d036      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1c8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d031      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a25      	ldr	r2, [pc, #148]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1cc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d02c      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <HAL_DMA_IRQHandler+0x1d0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d027      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1d4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d022      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a21      	ldr	r2, [pc, #132]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1d8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d01d      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc8 <HAL_DMA_IRQHandler+0x1dc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d018      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <HAL_DMA_IRQHandler+0x1e0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd0 <HAL_DMA_IRQHandler+0x1e4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00e      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <HAL_DMA_IRQHandler+0x1e8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a19      	ldr	r2, [pc, #100]	@ (8003fd8 <HAL_DMA_IRQHandler+0x1ec>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x194>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a18      	ldr	r2, [pc, #96]	@ (8003fdc <HAL_DMA_IRQHandler+0x1f0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d12f      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x1f4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e02e      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x208>
 8003f96:	bf00      	nop
 8003f98:	24000000 	.word	0x24000000
 8003f9c:	1b4e81b5 	.word	0x1b4e81b5
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0204 	bic.w	r2, r2, #4
 8004006:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2208      	movs	r2, #8
 8004012:	409a      	lsls	r2, r3
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d06e      	beq.n	8004118 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a69      	ldr	r2, [pc, #420]	@ (80041e4 <HAL_DMA_IRQHandler+0x3f8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d04a      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a67      	ldr	r2, [pc, #412]	@ (80041e8 <HAL_DMA_IRQHandler+0x3fc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d045      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a66      	ldr	r2, [pc, #408]	@ (80041ec <HAL_DMA_IRQHandler+0x400>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d040      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a64      	ldr	r2, [pc, #400]	@ (80041f0 <HAL_DMA_IRQHandler+0x404>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d03b      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a63      	ldr	r2, [pc, #396]	@ (80041f4 <HAL_DMA_IRQHandler+0x408>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d036      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a61      	ldr	r2, [pc, #388]	@ (80041f8 <HAL_DMA_IRQHandler+0x40c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d031      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a60      	ldr	r2, [pc, #384]	@ (80041fc <HAL_DMA_IRQHandler+0x410>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d02c      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a5e      	ldr	r2, [pc, #376]	@ (8004200 <HAL_DMA_IRQHandler+0x414>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d027      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a5d      	ldr	r2, [pc, #372]	@ (8004204 <HAL_DMA_IRQHandler+0x418>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a5b      	ldr	r2, [pc, #364]	@ (8004208 <HAL_DMA_IRQHandler+0x41c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a5a      	ldr	r2, [pc, #360]	@ (800420c <HAL_DMA_IRQHandler+0x420>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a58      	ldr	r2, [pc, #352]	@ (8004210 <HAL_DMA_IRQHandler+0x424>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a57      	ldr	r2, [pc, #348]	@ (8004214 <HAL_DMA_IRQHandler+0x428>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a55      	ldr	r2, [pc, #340]	@ (8004218 <HAL_DMA_IRQHandler+0x42c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a54      	ldr	r2, [pc, #336]	@ (800421c <HAL_DMA_IRQHandler+0x430>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_DMA_IRQHandler+0x2ee>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <HAL_DMA_IRQHandler+0x434>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10a      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x304>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e003      	b.n	80040f8 <HAL_DMA_IRQHandler+0x30c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00d      	beq.n	8004118 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004110:	f043 0202 	orr.w	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2204      	movs	r2, #4
 8004122:	409a      	lsls	r2, r3
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 808f 	beq.w	800424c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <HAL_DMA_IRQHandler+0x3f8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04a      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <HAL_DMA_IRQHandler+0x3fc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d045      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a29      	ldr	r2, [pc, #164]	@ (80041ec <HAL_DMA_IRQHandler+0x400>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d040      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_DMA_IRQHandler+0x404>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d03b      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a26      	ldr	r2, [pc, #152]	@ (80041f4 <HAL_DMA_IRQHandler+0x408>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d036      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <HAL_DMA_IRQHandler+0x40c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d031      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a23      	ldr	r2, [pc, #140]	@ (80041fc <HAL_DMA_IRQHandler+0x410>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d02c      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a21      	ldr	r2, [pc, #132]	@ (8004200 <HAL_DMA_IRQHandler+0x414>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d027      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a20      	ldr	r2, [pc, #128]	@ (8004204 <HAL_DMA_IRQHandler+0x418>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_DMA_IRQHandler+0x41c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01d      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1d      	ldr	r2, [pc, #116]	@ (800420c <HAL_DMA_IRQHandler+0x420>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004210 <HAL_DMA_IRQHandler+0x424>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <HAL_DMA_IRQHandler+0x428>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_DMA_IRQHandler+0x42c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a17      	ldr	r2, [pc, #92]	@ (800421c <HAL_DMA_IRQHandler+0x430>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_IRQHandler+0x3e2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <HAL_DMA_IRQHandler+0x434>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d12a      	bne.n	8004224 <HAL_DMA_IRQHandler+0x438>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e023      	b.n	800422c <HAL_DMA_IRQHandler+0x440>
 80041e4:	40020010 	.word	0x40020010
 80041e8:	40020028 	.word	0x40020028
 80041ec:	40020040 	.word	0x40020040
 80041f0:	40020058 	.word	0x40020058
 80041f4:	40020070 	.word	0x40020070
 80041f8:	40020088 	.word	0x40020088
 80041fc:	400200a0 	.word	0x400200a0
 8004200:	400200b8 	.word	0x400200b8
 8004204:	40020410 	.word	0x40020410
 8004208:	40020428 	.word	0x40020428
 800420c:	40020440 	.word	0x40020440
 8004210:	40020458 	.word	0x40020458
 8004214:	40020470 	.word	0x40020470
 8004218:	40020488 	.word	0x40020488
 800421c:	400204a0 	.word	0x400204a0
 8004220:	400204b8 	.word	0x400204b8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2204      	movs	r2, #4
 800423a:	409a      	lsls	r2, r3
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	2210      	movs	r2, #16
 8004256:	409a      	lsls	r2, r3
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a6 	beq.w	80043ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a85      	ldr	r2, [pc, #532]	@ (800447c <HAL_DMA_IRQHandler+0x690>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d04a      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a83      	ldr	r2, [pc, #524]	@ (8004480 <HAL_DMA_IRQHandler+0x694>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d045      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a82      	ldr	r2, [pc, #520]	@ (8004484 <HAL_DMA_IRQHandler+0x698>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d040      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a80      	ldr	r2, [pc, #512]	@ (8004488 <HAL_DMA_IRQHandler+0x69c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d03b      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7f      	ldr	r2, [pc, #508]	@ (800448c <HAL_DMA_IRQHandler+0x6a0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d036      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7d      	ldr	r2, [pc, #500]	@ (8004490 <HAL_DMA_IRQHandler+0x6a4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d031      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004494 <HAL_DMA_IRQHandler+0x6a8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d02c      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7a      	ldr	r2, [pc, #488]	@ (8004498 <HAL_DMA_IRQHandler+0x6ac>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d027      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a79      	ldr	r2, [pc, #484]	@ (800449c <HAL_DMA_IRQHandler+0x6b0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d022      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a77      	ldr	r2, [pc, #476]	@ (80044a0 <HAL_DMA_IRQHandler+0x6b4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01d      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a76      	ldr	r2, [pc, #472]	@ (80044a4 <HAL_DMA_IRQHandler+0x6b8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d018      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a74      	ldr	r2, [pc, #464]	@ (80044a8 <HAL_DMA_IRQHandler+0x6bc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a73      	ldr	r2, [pc, #460]	@ (80044ac <HAL_DMA_IRQHandler+0x6c0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00e      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a71      	ldr	r2, [pc, #452]	@ (80044b0 <HAL_DMA_IRQHandler+0x6c4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a70      	ldr	r2, [pc, #448]	@ (80044b4 <HAL_DMA_IRQHandler+0x6c8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_DMA_IRQHandler+0x516>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6e      	ldr	r2, [pc, #440]	@ (80044b8 <HAL_DMA_IRQHandler+0x6cc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10a      	bne.n	8004318 <HAL_DMA_IRQHandler+0x52c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e009      	b.n	800432c <HAL_DMA_IRQHandler+0x540>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03e      	beq.n	80043ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2210      	movs	r2, #16
 800433a:	409a      	lsls	r2, r3
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d108      	bne.n	800436e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d024      	beq.n	80043ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
 800436c:	e01f      	b.n	80043ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01b      	beq.n	80043ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
 800437e:	e016      	b.n	80043ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d107      	bne.n	800439e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0208 	bic.w	r2, r2, #8
 800439c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2220      	movs	r2, #32
 80043b8:	409a      	lsls	r2, r3
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8110 	beq.w	80045e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2c      	ldr	r2, [pc, #176]	@ (800447c <HAL_DMA_IRQHandler+0x690>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d04a      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004480 <HAL_DMA_IRQHandler+0x694>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d045      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a29      	ldr	r2, [pc, #164]	@ (8004484 <HAL_DMA_IRQHandler+0x698>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d040      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a28      	ldr	r2, [pc, #160]	@ (8004488 <HAL_DMA_IRQHandler+0x69c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d03b      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a26      	ldr	r2, [pc, #152]	@ (800448c <HAL_DMA_IRQHandler+0x6a0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d036      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a25      	ldr	r2, [pc, #148]	@ (8004490 <HAL_DMA_IRQHandler+0x6a4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d031      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a23      	ldr	r2, [pc, #140]	@ (8004494 <HAL_DMA_IRQHandler+0x6a8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02c      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a22      	ldr	r2, [pc, #136]	@ (8004498 <HAL_DMA_IRQHandler+0x6ac>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d027      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a20      	ldr	r2, [pc, #128]	@ (800449c <HAL_DMA_IRQHandler+0x6b0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1f      	ldr	r2, [pc, #124]	@ (80044a0 <HAL_DMA_IRQHandler+0x6b4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01d      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <HAL_DMA_IRQHandler+0x6b8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1c      	ldr	r2, [pc, #112]	@ (80044a8 <HAL_DMA_IRQHandler+0x6bc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1a      	ldr	r2, [pc, #104]	@ (80044ac <HAL_DMA_IRQHandler+0x6c0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a19      	ldr	r2, [pc, #100]	@ (80044b0 <HAL_DMA_IRQHandler+0x6c4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a17      	ldr	r2, [pc, #92]	@ (80044b4 <HAL_DMA_IRQHandler+0x6c8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_DMA_IRQHandler+0x678>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a16      	ldr	r2, [pc, #88]	@ (80044b8 <HAL_DMA_IRQHandler+0x6cc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d12b      	bne.n	80044bc <HAL_DMA_IRQHandler+0x6d0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e02a      	b.n	80044d0 <HAL_DMA_IRQHandler+0x6e4>
 800447a:	bf00      	nop
 800447c:	40020010 	.word	0x40020010
 8004480:	40020028 	.word	0x40020028
 8004484:	40020040 	.word	0x40020040
 8004488:	40020058 	.word	0x40020058
 800448c:	40020070 	.word	0x40020070
 8004490:	40020088 	.word	0x40020088
 8004494:	400200a0 	.word	0x400200a0
 8004498:	400200b8 	.word	0x400200b8
 800449c:	40020410 	.word	0x40020410
 80044a0:	40020428 	.word	0x40020428
 80044a4:	40020440 	.word	0x40020440
 80044a8:	40020458 	.word	0x40020458
 80044ac:	40020470 	.word	0x40020470
 80044b0:	40020488 	.word	0x40020488
 80044b4:	400204a0 	.word	0x400204a0
 80044b8:	400204b8 	.word	0x400204b8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8087 	beq.w	80045e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2220      	movs	r2, #32
 80044e0:	409a      	lsls	r2, r3
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d139      	bne.n	8004566 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0216 	bic.w	r2, r2, #22
 8004500:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004510:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <HAL_DMA_IRQHandler+0x736>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0208 	bic.w	r2, r2, #8
 8004530:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	223f      	movs	r2, #63	@ 0x3f
 800453c:	409a      	lsls	r2, r3
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 834a 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
          }
          return;
 8004564:	e344      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d018      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d108      	bne.n	8004594 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	2b00      	cmp	r3, #0
 8004588:	d02c      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e027      	b.n	80045e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d023      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
 80045a4:	e01e      	b.n	80045e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0210 	bic.w	r2, r2, #16
 80045c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8306 	beq.w	8004bfa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8088 	beq.w	800470c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2204      	movs	r2, #4
 8004600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7a      	ldr	r2, [pc, #488]	@ (80047f4 <HAL_DMA_IRQHandler+0xa08>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d04a      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a79      	ldr	r2, [pc, #484]	@ (80047f8 <HAL_DMA_IRQHandler+0xa0c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d045      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a77      	ldr	r2, [pc, #476]	@ (80047fc <HAL_DMA_IRQHandler+0xa10>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d040      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a76      	ldr	r2, [pc, #472]	@ (8004800 <HAL_DMA_IRQHandler+0xa14>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d03b      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a74      	ldr	r2, [pc, #464]	@ (8004804 <HAL_DMA_IRQHandler+0xa18>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d036      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a73      	ldr	r2, [pc, #460]	@ (8004808 <HAL_DMA_IRQHandler+0xa1c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d031      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a71      	ldr	r2, [pc, #452]	@ (800480c <HAL_DMA_IRQHandler+0xa20>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d02c      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a70      	ldr	r2, [pc, #448]	@ (8004810 <HAL_DMA_IRQHandler+0xa24>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d027      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6e      	ldr	r2, [pc, #440]	@ (8004814 <HAL_DMA_IRQHandler+0xa28>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d022      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6d      	ldr	r2, [pc, #436]	@ (8004818 <HAL_DMA_IRQHandler+0xa2c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d01d      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6b      	ldr	r2, [pc, #428]	@ (800481c <HAL_DMA_IRQHandler+0xa30>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d018      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6a      	ldr	r2, [pc, #424]	@ (8004820 <HAL_DMA_IRQHandler+0xa34>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a68      	ldr	r2, [pc, #416]	@ (8004824 <HAL_DMA_IRQHandler+0xa38>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00e      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a67      	ldr	r2, [pc, #412]	@ (8004828 <HAL_DMA_IRQHandler+0xa3c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a65      	ldr	r2, [pc, #404]	@ (800482c <HAL_DMA_IRQHandler+0xa40>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x8b8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a64      	ldr	r2, [pc, #400]	@ (8004830 <HAL_DMA_IRQHandler+0xa44>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <HAL_DMA_IRQHandler+0x8ca>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0201 	bic.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e007      	b.n	80046c6 <HAL_DMA_IRQHandler+0x8da>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d307      	bcc.n	80046e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f2      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x8da>
 80046e0:	e000      	b.n	80046e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2203      	movs	r2, #3
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80046fa:	e003      	b.n	8004704 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8272 	beq.w	8004bfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
 800471e:	e26c      	b.n	8004bfa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a43      	ldr	r2, [pc, #268]	@ (8004834 <HAL_DMA_IRQHandler+0xa48>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a42      	ldr	r2, [pc, #264]	@ (8004838 <HAL_DMA_IRQHandler+0xa4c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d01d      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a40      	ldr	r2, [pc, #256]	@ (800483c <HAL_DMA_IRQHandler+0xa50>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3f      	ldr	r2, [pc, #252]	@ (8004840 <HAL_DMA_IRQHandler+0xa54>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3d      	ldr	r2, [pc, #244]	@ (8004844 <HAL_DMA_IRQHandler+0xa58>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3c      	ldr	r2, [pc, #240]	@ (8004848 <HAL_DMA_IRQHandler+0xa5c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a3a      	ldr	r2, [pc, #232]	@ (800484c <HAL_DMA_IRQHandler+0xa60>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_DMA_IRQHandler+0x984>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a39      	ldr	r2, [pc, #228]	@ (8004850 <HAL_DMA_IRQHandler+0xa64>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_DMA_IRQHandler+0x988>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_DMA_IRQHandler+0x98a>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 823f 	beq.w	8004bfa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2204      	movs	r2, #4
 800478e:	409a      	lsls	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80cd 	beq.w	8004934 <HAL_DMA_IRQHandler+0xb48>
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80c7 	beq.w	8004934 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	2204      	movs	r2, #4
 80047b0:	409a      	lsls	r2, r3
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d049      	beq.n	8004854 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8210 	beq.w	8004bf4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047dc:	e20a      	b.n	8004bf4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8206 	beq.w	8004bf4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f0:	e200      	b.n	8004bf4 <HAL_DMA_IRQHandler+0xe08>
 80047f2:	bf00      	nop
 80047f4:	40020010 	.word	0x40020010
 80047f8:	40020028 	.word	0x40020028
 80047fc:	40020040 	.word	0x40020040
 8004800:	40020058 	.word	0x40020058
 8004804:	40020070 	.word	0x40020070
 8004808:	40020088 	.word	0x40020088
 800480c:	400200a0 	.word	0x400200a0
 8004810:	400200b8 	.word	0x400200b8
 8004814:	40020410 	.word	0x40020410
 8004818:	40020428 	.word	0x40020428
 800481c:	40020440 	.word	0x40020440
 8004820:	40020458 	.word	0x40020458
 8004824:	40020470 	.word	0x40020470
 8004828:	40020488 	.word	0x40020488
 800482c:	400204a0 	.word	0x400204a0
 8004830:	400204b8 	.word	0x400204b8
 8004834:	58025408 	.word	0x58025408
 8004838:	5802541c 	.word	0x5802541c
 800483c:	58025430 	.word	0x58025430
 8004840:	58025444 	.word	0x58025444
 8004844:	58025458 	.word	0x58025458
 8004848:	5802546c 	.word	0x5802546c
 800484c:	58025480 	.word	0x58025480
 8004850:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d160      	bne.n	8004920 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7f      	ldr	r2, [pc, #508]	@ (8004a60 <HAL_DMA_IRQHandler+0xc74>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d04a      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a64 <HAL_DMA_IRQHandler+0xc78>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d045      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7c      	ldr	r2, [pc, #496]	@ (8004a68 <HAL_DMA_IRQHandler+0xc7c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d040      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7a      	ldr	r2, [pc, #488]	@ (8004a6c <HAL_DMA_IRQHandler+0xc80>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d03b      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a79      	ldr	r2, [pc, #484]	@ (8004a70 <HAL_DMA_IRQHandler+0xc84>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d036      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a77      	ldr	r2, [pc, #476]	@ (8004a74 <HAL_DMA_IRQHandler+0xc88>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d031      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a76      	ldr	r2, [pc, #472]	@ (8004a78 <HAL_DMA_IRQHandler+0xc8c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d02c      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a74      	ldr	r2, [pc, #464]	@ (8004a7c <HAL_DMA_IRQHandler+0xc90>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d027      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a73      	ldr	r2, [pc, #460]	@ (8004a80 <HAL_DMA_IRQHandler+0xc94>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d022      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a71      	ldr	r2, [pc, #452]	@ (8004a84 <HAL_DMA_IRQHandler+0xc98>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01d      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a70      	ldr	r2, [pc, #448]	@ (8004a88 <HAL_DMA_IRQHandler+0xc9c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d018      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a6e      	ldr	r2, [pc, #440]	@ (8004a8c <HAL_DMA_IRQHandler+0xca0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a6d      	ldr	r2, [pc, #436]	@ (8004a90 <HAL_DMA_IRQHandler+0xca4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a94 <HAL_DMA_IRQHandler+0xca8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004a98 <HAL_DMA_IRQHandler+0xcac>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_DMA_IRQHandler+0xb12>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a68      	ldr	r2, [pc, #416]	@ (8004a9c <HAL_DMA_IRQHandler+0xcb0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <HAL_DMA_IRQHandler+0xb24>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0208 	bic.w	r2, r2, #8
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e007      	b.n	8004920 <HAL_DMA_IRQHandler+0xb34>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8165 	beq.w	8004bf4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004932:	e15f      	b.n	8004bf4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2202      	movs	r2, #2
 800493e:	409a      	lsls	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80c5 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0xce8>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80bf 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2202      	movs	r2, #2
 8004960:	409a      	lsls	r2, r3
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d018      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 813a 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800498c:	e134      	b.n	8004bf8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8130 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a0:	e12a      	b.n	8004bf8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f040 8089 	bne.w	8004ac0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <HAL_DMA_IRQHandler+0xc74>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d04a      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a29      	ldr	r2, [pc, #164]	@ (8004a64 <HAL_DMA_IRQHandler+0xc78>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d045      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a28      	ldr	r2, [pc, #160]	@ (8004a68 <HAL_DMA_IRQHandler+0xc7c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d040      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <HAL_DMA_IRQHandler+0xc80>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d03b      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a25      	ldr	r2, [pc, #148]	@ (8004a70 <HAL_DMA_IRQHandler+0xc84>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d036      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a23      	ldr	r2, [pc, #140]	@ (8004a74 <HAL_DMA_IRQHandler+0xc88>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d031      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a22      	ldr	r2, [pc, #136]	@ (8004a78 <HAL_DMA_IRQHandler+0xc8c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d02c      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a20      	ldr	r2, [pc, #128]	@ (8004a7c <HAL_DMA_IRQHandler+0xc90>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d027      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <HAL_DMA_IRQHandler+0xc94>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a84 <HAL_DMA_IRQHandler+0xc98>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <HAL_DMA_IRQHandler+0xc9c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1a      	ldr	r2, [pc, #104]	@ (8004a8c <HAL_DMA_IRQHandler+0xca0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_DMA_IRQHandler+0xca4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a17      	ldr	r2, [pc, #92]	@ (8004a94 <HAL_DMA_IRQHandler+0xca8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a16      	ldr	r2, [pc, #88]	@ (8004a98 <HAL_DMA_IRQHandler+0xcac>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xc62>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a14      	ldr	r2, [pc, #80]	@ (8004a9c <HAL_DMA_IRQHandler+0xcb0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d128      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0xcb4>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0214 	bic.w	r2, r2, #20
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e027      	b.n	8004ab0 <HAL_DMA_IRQHandler+0xcc4>
 8004a60:	40020010 	.word	0x40020010
 8004a64:	40020028 	.word	0x40020028
 8004a68:	40020040 	.word	0x40020040
 8004a6c:	40020058 	.word	0x40020058
 8004a70:	40020070 	.word	0x40020070
 8004a74:	40020088 	.word	0x40020088
 8004a78:	400200a0 	.word	0x400200a0
 8004a7c:	400200b8 	.word	0x400200b8
 8004a80:	40020410 	.word	0x40020410
 8004a84:	40020428 	.word	0x40020428
 8004a88:	40020440 	.word	0x40020440
 8004a8c:	40020458 	.word	0x40020458
 8004a90:	40020470 	.word	0x40020470
 8004a94:	40020488 	.word	0x40020488
 8004a98:	400204a0 	.word	0x400204a0
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 020a 	bic.w	r2, r2, #10
 8004aae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8097 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad2:	e091      	b.n	8004bf8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	2208      	movs	r2, #8
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8088 	beq.w	8004bfa <HAL_DMA_IRQHandler+0xe0e>
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8082 	beq.w	8004bfa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a41      	ldr	r2, [pc, #260]	@ (8004c00 <HAL_DMA_IRQHandler+0xe14>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d04a      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3f      	ldr	r2, [pc, #252]	@ (8004c04 <HAL_DMA_IRQHandler+0xe18>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d045      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c08 <HAL_DMA_IRQHandler+0xe1c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d040      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3c      	ldr	r2, [pc, #240]	@ (8004c0c <HAL_DMA_IRQHandler+0xe20>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d03b      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3b      	ldr	r2, [pc, #236]	@ (8004c10 <HAL_DMA_IRQHandler+0xe24>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d036      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a39      	ldr	r2, [pc, #228]	@ (8004c14 <HAL_DMA_IRQHandler+0xe28>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d031      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a38      	ldr	r2, [pc, #224]	@ (8004c18 <HAL_DMA_IRQHandler+0xe2c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d02c      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a36      	ldr	r2, [pc, #216]	@ (8004c1c <HAL_DMA_IRQHandler+0xe30>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d027      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a35      	ldr	r2, [pc, #212]	@ (8004c20 <HAL_DMA_IRQHandler+0xe34>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d022      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a33      	ldr	r2, [pc, #204]	@ (8004c24 <HAL_DMA_IRQHandler+0xe38>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01d      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a32      	ldr	r2, [pc, #200]	@ (8004c28 <HAL_DMA_IRQHandler+0xe3c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a30      	ldr	r2, [pc, #192]	@ (8004c2c <HAL_DMA_IRQHandler+0xe40>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2f      	ldr	r2, [pc, #188]	@ (8004c30 <HAL_DMA_IRQHandler+0xe44>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c34 <HAL_DMA_IRQHandler+0xe48>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	@ (8004c38 <HAL_DMA_IRQHandler+0xe4c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_DMA_IRQHandler+0xdaa>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2a      	ldr	r2, [pc, #168]	@ (8004c3c <HAL_DMA_IRQHandler+0xe50>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d108      	bne.n	8004ba8 <HAL_DMA_IRQHandler+0xdbc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 021c 	bic.w	r2, r2, #28
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e007      	b.n	8004bb8 <HAL_DMA_IRQHandler+0xdcc>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 020e 	bic.w	r2, r2, #14
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
 8004bee:	e004      	b.n	8004bfa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004bf0:	bf00      	nop
 8004bf2:	e002      	b.n	8004bfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004bfa:	3728      	adds	r7, #40	@ 0x28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40020010 	.word	0x40020010
 8004c04:	40020028 	.word	0x40020028
 8004c08:	40020040 	.word	0x40020040
 8004c0c:	40020058 	.word	0x40020058
 8004c10:	40020070 	.word	0x40020070
 8004c14:	40020088 	.word	0x40020088
 8004c18:	400200a0 	.word	0x400200a0
 8004c1c:	400200b8 	.word	0x400200b8
 8004c20:	40020410 	.word	0x40020410
 8004c24:	40020428 	.word	0x40020428
 8004c28:	40020440 	.word	0x40020440
 8004c2c:	40020458 	.word	0x40020458
 8004c30:	40020470 	.word	0x40020470
 8004c34:	40020488 	.word	0x40020488
 8004c38:	400204a0 	.word	0x400204a0
 8004c3c:	400204b8 	.word	0x400204b8

08004c40 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7f      	ldr	r2, [pc, #508]	@ (8004e74 <DMA_SetConfig+0x21c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d072      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a7d      	ldr	r2, [pc, #500]	@ (8004e78 <DMA_SetConfig+0x220>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d06d      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e7c <DMA_SetConfig+0x224>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d068      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7a      	ldr	r2, [pc, #488]	@ (8004e80 <DMA_SetConfig+0x228>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d063      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a79      	ldr	r2, [pc, #484]	@ (8004e84 <DMA_SetConfig+0x22c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d05e      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a77      	ldr	r2, [pc, #476]	@ (8004e88 <DMA_SetConfig+0x230>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d059      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a76      	ldr	r2, [pc, #472]	@ (8004e8c <DMA_SetConfig+0x234>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d054      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a74      	ldr	r2, [pc, #464]	@ (8004e90 <DMA_SetConfig+0x238>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04f      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a73      	ldr	r2, [pc, #460]	@ (8004e94 <DMA_SetConfig+0x23c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04a      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a71      	ldr	r2, [pc, #452]	@ (8004e98 <DMA_SetConfig+0x240>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d045      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a70      	ldr	r2, [pc, #448]	@ (8004e9c <DMA_SetConfig+0x244>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d040      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea0 <DMA_SetConfig+0x248>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d03b      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6d      	ldr	r2, [pc, #436]	@ (8004ea4 <DMA_SetConfig+0x24c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d036      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8004ea8 <DMA_SetConfig+0x250>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d031      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6a      	ldr	r2, [pc, #424]	@ (8004eac <DMA_SetConfig+0x254>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d02c      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a68      	ldr	r2, [pc, #416]	@ (8004eb0 <DMA_SetConfig+0x258>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d027      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a67      	ldr	r2, [pc, #412]	@ (8004eb4 <DMA_SetConfig+0x25c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a65      	ldr	r2, [pc, #404]	@ (8004eb8 <DMA_SetConfig+0x260>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01d      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a64      	ldr	r2, [pc, #400]	@ (8004ebc <DMA_SetConfig+0x264>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a62      	ldr	r2, [pc, #392]	@ (8004ec0 <DMA_SetConfig+0x268>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a61      	ldr	r2, [pc, #388]	@ (8004ec4 <DMA_SetConfig+0x26c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5f      	ldr	r2, [pc, #380]	@ (8004ec8 <DMA_SetConfig+0x270>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a5e      	ldr	r2, [pc, #376]	@ (8004ecc <DMA_SetConfig+0x274>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <DMA_SetConfig+0x10a>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ed0 <DMA_SetConfig+0x278>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <DMA_SetConfig+0x10e>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <DMA_SetConfig+0x110>
 8004d66:	2300      	movs	r3, #0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a39      	ldr	r2, [pc, #228]	@ (8004e74 <DMA_SetConfig+0x21c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d04a      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a38      	ldr	r2, [pc, #224]	@ (8004e78 <DMA_SetConfig+0x220>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d045      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a36      	ldr	r2, [pc, #216]	@ (8004e7c <DMA_SetConfig+0x224>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d040      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a35      	ldr	r2, [pc, #212]	@ (8004e80 <DMA_SetConfig+0x228>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d03b      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a33      	ldr	r2, [pc, #204]	@ (8004e84 <DMA_SetConfig+0x22c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d036      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a32      	ldr	r2, [pc, #200]	@ (8004e88 <DMA_SetConfig+0x230>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d031      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a30      	ldr	r2, [pc, #192]	@ (8004e8c <DMA_SetConfig+0x234>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02c      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e90 <DMA_SetConfig+0x238>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d027      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e94 <DMA_SetConfig+0x23c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d022      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <DMA_SetConfig+0x240>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <DMA_SetConfig+0x244>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d018      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a29      	ldr	r2, [pc, #164]	@ (8004ea0 <DMA_SetConfig+0x248>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a27      	ldr	r2, [pc, #156]	@ (8004ea4 <DMA_SetConfig+0x24c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ea8 <DMA_SetConfig+0x250>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a24      	ldr	r2, [pc, #144]	@ (8004eac <DMA_SetConfig+0x254>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <DMA_SetConfig+0x1d0>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a23      	ldr	r2, [pc, #140]	@ (8004eb0 <DMA_SetConfig+0x258>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <DMA_SetConfig+0x1d4>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <DMA_SetConfig+0x1d6>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d059      	beq.n	8004ee6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	223f      	movs	r2, #63	@ 0x3f
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b40      	cmp	r3, #64	@ 0x40
 8004e60:	d138      	bne.n	8004ed4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e72:	e086      	b.n	8004f82 <DMA_SetConfig+0x32a>
 8004e74:	40020010 	.word	0x40020010
 8004e78:	40020028 	.word	0x40020028
 8004e7c:	40020040 	.word	0x40020040
 8004e80:	40020058 	.word	0x40020058
 8004e84:	40020070 	.word	0x40020070
 8004e88:	40020088 	.word	0x40020088
 8004e8c:	400200a0 	.word	0x400200a0
 8004e90:	400200b8 	.word	0x400200b8
 8004e94:	40020410 	.word	0x40020410
 8004e98:	40020428 	.word	0x40020428
 8004e9c:	40020440 	.word	0x40020440
 8004ea0:	40020458 	.word	0x40020458
 8004ea4:	40020470 	.word	0x40020470
 8004ea8:	40020488 	.word	0x40020488
 8004eac:	400204a0 	.word	0x400204a0
 8004eb0:	400204b8 	.word	0x400204b8
 8004eb4:	58025408 	.word	0x58025408
 8004eb8:	5802541c 	.word	0x5802541c
 8004ebc:	58025430 	.word	0x58025430
 8004ec0:	58025444 	.word	0x58025444
 8004ec4:	58025458 	.word	0x58025458
 8004ec8:	5802546c 	.word	0x5802546c
 8004ecc:	58025480 	.word	0x58025480
 8004ed0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
}
 8004ee4:	e04d      	b.n	8004f82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a29      	ldr	r2, [pc, #164]	@ (8004f90 <DMA_SetConfig+0x338>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a27      	ldr	r2, [pc, #156]	@ (8004f94 <DMA_SetConfig+0x33c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01d      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a26      	ldr	r2, [pc, #152]	@ (8004f98 <DMA_SetConfig+0x340>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a24      	ldr	r2, [pc, #144]	@ (8004f9c <DMA_SetConfig+0x344>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a23      	ldr	r2, [pc, #140]	@ (8004fa0 <DMA_SetConfig+0x348>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a21      	ldr	r2, [pc, #132]	@ (8004fa4 <DMA_SetConfig+0x34c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a20      	ldr	r2, [pc, #128]	@ (8004fa8 <DMA_SetConfig+0x350>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <DMA_SetConfig+0x2de>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	@ (8004fac <DMA_SetConfig+0x354>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <DMA_SetConfig+0x2e2>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <DMA_SetConfig+0x2e4>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d020      	beq.n	8004f82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b40      	cmp	r3, #64	@ 0x40
 8004f5e:	d108      	bne.n	8004f72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	60da      	str	r2, [r3, #12]
}
 8004f70:	e007      	b.n	8004f82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	60da      	str	r2, [r3, #12]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	58025408 	.word	0x58025408
 8004f94:	5802541c 	.word	0x5802541c
 8004f98:	58025430 	.word	0x58025430
 8004f9c:	58025444 	.word	0x58025444
 8004fa0:	58025458 	.word	0x58025458
 8004fa4:	5802546c 	.word	0x5802546c
 8004fa8:	58025480 	.word	0x58025480
 8004fac:	58025494 	.word	0x58025494

08004fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a42      	ldr	r2, [pc, #264]	@ (80050c8 <DMA_CalcBaseAndBitshift+0x118>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d04a      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a41      	ldr	r2, [pc, #260]	@ (80050cc <DMA_CalcBaseAndBitshift+0x11c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d045      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a3f      	ldr	r2, [pc, #252]	@ (80050d0 <DMA_CalcBaseAndBitshift+0x120>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d040      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3e      	ldr	r2, [pc, #248]	@ (80050d4 <DMA_CalcBaseAndBitshift+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d03b      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80050d8 <DMA_CalcBaseAndBitshift+0x128>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d036      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a3b      	ldr	r2, [pc, #236]	@ (80050dc <DMA_CalcBaseAndBitshift+0x12c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d031      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a39      	ldr	r2, [pc, #228]	@ (80050e0 <DMA_CalcBaseAndBitshift+0x130>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02c      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a38      	ldr	r2, [pc, #224]	@ (80050e4 <DMA_CalcBaseAndBitshift+0x134>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d027      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a36      	ldr	r2, [pc, #216]	@ (80050e8 <DMA_CalcBaseAndBitshift+0x138>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d022      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a35      	ldr	r2, [pc, #212]	@ (80050ec <DMA_CalcBaseAndBitshift+0x13c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01d      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a33      	ldr	r2, [pc, #204]	@ (80050f0 <DMA_CalcBaseAndBitshift+0x140>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a32      	ldr	r2, [pc, #200]	@ (80050f4 <DMA_CalcBaseAndBitshift+0x144>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a30      	ldr	r2, [pc, #192]	@ (80050f8 <DMA_CalcBaseAndBitshift+0x148>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2f      	ldr	r2, [pc, #188]	@ (80050fc <DMA_CalcBaseAndBitshift+0x14c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2d      	ldr	r2, [pc, #180]	@ (8005100 <DMA_CalcBaseAndBitshift+0x150>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <DMA_CalcBaseAndBitshift+0xa8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2c      	ldr	r2, [pc, #176]	@ (8005104 <DMA_CalcBaseAndBitshift+0x154>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <DMA_CalcBaseAndBitshift+0xac>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <DMA_CalcBaseAndBitshift+0xae>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d024      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3b10      	subs	r3, #16
 800506a:	4a27      	ldr	r2, [pc, #156]	@ (8005108 <DMA_CalcBaseAndBitshift+0x158>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	4a24      	ldr	r2, [pc, #144]	@ (800510c <DMA_CalcBaseAndBitshift+0x15c>)
 800507c:	5cd3      	ldrb	r3, [r2, r3]
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d908      	bls.n	800509c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <DMA_CalcBaseAndBitshift+0x160>)
 8005092:	4013      	ands	r3, r2
 8005094:	1d1a      	adds	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	659a      	str	r2, [r3, #88]	@ 0x58
 800509a:	e00d      	b.n	80050b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <DMA_CalcBaseAndBitshift+0x160>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050aa:	e005      	b.n	80050b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
 8005108:	aaaaaaab 	.word	0xaaaaaaab
 800510c:	0801cdec 	.word	0x0801cdec
 8005110:	fffffc00 	.word	0xfffffc00

08005114 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d120      	bne.n	800516a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512c:	2b03      	cmp	r3, #3
 800512e:	d858      	bhi.n	80051e2 <DMA_CheckFifoParam+0xce>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <DMA_CheckFifoParam+0x24>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005149 	.word	0x08005149
 800513c:	0800515b 	.word	0x0800515b
 8005140:	08005149 	.word	0x08005149
 8005144:	080051e3 	.word	0x080051e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d048      	beq.n	80051e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005158:	e045      	b.n	80051e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005162:	d142      	bne.n	80051ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005168:	e03f      	b.n	80051ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005172:	d123      	bne.n	80051bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	2b03      	cmp	r3, #3
 800517a:	d838      	bhi.n	80051ee <DMA_CheckFifoParam+0xda>
 800517c:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <DMA_CheckFifoParam+0x70>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	08005195 	.word	0x08005195
 8005188:	0800519b 	.word	0x0800519b
 800518c:	08005195 	.word	0x08005195
 8005190:	080051ad 	.word	0x080051ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
        break;
 8005198:	e030      	b.n	80051fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d025      	beq.n	80051f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051aa:	e022      	b.n	80051f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051b4:	d11f      	bne.n	80051f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ba:	e01c      	b.n	80051f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d902      	bls.n	80051ca <DMA_CheckFifoParam+0xb6>
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d003      	beq.n	80051d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051c8:	e018      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
        break;
 80051ce:	e015      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
    break;
 80051e0:	e00b      	b.n	80051fa <DMA_CheckFifoParam+0xe6>
        break;
 80051e2:	bf00      	nop
 80051e4:	e00a      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        break;
 80051e6:	bf00      	nop
 80051e8:	e008      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        break;
 80051ea:	bf00      	nop
 80051ec:	e006      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        break;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        break;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
        break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <DMA_CheckFifoParam+0xe8>
    break;
 80051fa:	bf00      	nop
    }
  }

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop

0800520c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a38      	ldr	r2, [pc, #224]	@ (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a36      	ldr	r2, [pc, #216]	@ (8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01d      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a35      	ldr	r2, [pc, #212]	@ (8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a33      	ldr	r2, [pc, #204]	@ (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a32      	ldr	r2, [pc, #200]	@ (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a30      	ldr	r2, [pc, #192]	@ (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2f      	ldr	r2, [pc, #188]	@ (8005318 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2d      	ldr	r2, [pc, #180]	@ (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d101      	bne.n	800526e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01a      	beq.n	80052aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	3b08      	subs	r3, #8
 800527c:	4a28      	ldr	r2, [pc, #160]	@ (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	091b      	lsrs	r3, r3, #4
 8005284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4b26      	ldr	r3, [pc, #152]	@ (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	461a      	mov	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a24      	ldr	r2, [pc, #144]	@ (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005298:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2201      	movs	r2, #1
 80052a2:	409a      	lsls	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80052a8:	e024      	b.n	80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	3b10      	subs	r3, #16
 80052b2:	4a1e      	ldr	r2, [pc, #120]	@ (800532c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a1c      	ldr	r2, [pc, #112]	@ (8005330 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d806      	bhi.n	80052d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005334 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d902      	bls.n	80052d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3308      	adds	r3, #8
 80052d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4b18      	ldr	r3, [pc, #96]	@ (8005338 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	461a      	mov	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a16      	ldr	r2, [pc, #88]	@ (800533c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	58025408 	.word	0x58025408
 8005304:	5802541c 	.word	0x5802541c
 8005308:	58025430 	.word	0x58025430
 800530c:	58025444 	.word	0x58025444
 8005310:	58025458 	.word	0x58025458
 8005314:	5802546c 	.word	0x5802546c
 8005318:	58025480 	.word	0x58025480
 800531c:	58025494 	.word	0x58025494
 8005320:	cccccccd 	.word	0xcccccccd
 8005324:	16009600 	.word	0x16009600
 8005328:	58025880 	.word	0x58025880
 800532c:	aaaaaaab 	.word	0xaaaaaaab
 8005330:	400204b8 	.word	0x400204b8
 8005334:	4002040f 	.word	0x4002040f
 8005338:	10008200 	.word	0x10008200
 800533c:	40020880 	.word	0x40020880

08005340 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d04a      	beq.n	80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d847      	bhi.n	80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a25      	ldr	r2, [pc, #148]	@ (80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d022      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a24      	ldr	r2, [pc, #144]	@ (80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d01d      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a22      	ldr	r2, [pc, #136]	@ (8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d018      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	@ (8005404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1e      	ldr	r2, [pc, #120]	@ (800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d009      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1c      	ldr	r2, [pc, #112]	@ (8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d101      	bne.n	80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a15      	ldr	r2, [pc, #84]	@ (800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053c8:	671a      	str	r2, [r3, #112]	@ 0x70
 80053ca:	e009      	b.n	80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4b14      	ldr	r3, [pc, #80]	@ (8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053de:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	58025408 	.word	0x58025408
 80053fc:	5802541c 	.word	0x5802541c
 8005400:	58025430 	.word	0x58025430
 8005404:	58025444 	.word	0x58025444
 8005408:	58025458 	.word	0x58025458
 800540c:	5802546c 	.word	0x5802546c
 8005410:	58025480 	.word	0x58025480
 8005414:	58025494 	.word	0x58025494
 8005418:	1600963f 	.word	0x1600963f
 800541c:	58025940 	.word	0x58025940
 8005420:	1000823f 	.word	0x1000823f
 8005424:	40020940 	.word	0x40020940

08005428 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e0e3      	b.n	8005602 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2223      	movs	r2, #35	@ 0x23
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fb ff63 	bl	8001318 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005452:	4b6e      	ldr	r3, [pc, #440]	@ (800560c <HAL_ETH_Init+0x1e4>)
 8005454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005458:	4a6c      	ldr	r2, [pc, #432]	@ (800560c <HAL_ETH_Init+0x1e4>)
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005462:	4b6a      	ldr	r3, [pc, #424]	@ (800560c <HAL_ETH_Init+0x1e4>)
 8005464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	7a1b      	ldrb	r3, [r3, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005478:	2000      	movs	r0, #0
 800547a:	f7fd f899 	bl	80025b0 <HAL_SYSCFG_ETHInterfaceSelect>
 800547e:	e003      	b.n	8005488 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005480:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005484:	f7fd f894 	bl	80025b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005488:	4b61      	ldr	r3, [pc, #388]	@ (8005610 <HAL_ETH_Init+0x1e8>)
 800548a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a4:	f7fd f86c 	bl	8002580 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80054aa:	e011      	b.n	80054d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80054ac:	f7fd f868 	bl	8002580 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80054ba:	d909      	bls.n	80054d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	22e0      	movs	r2, #224	@ 0xe0
 80054c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e098      	b.n	8005602 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e4      	bne.n	80054ac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f89e 	bl	8005624 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80054e8:	f001 fe8a 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 80054ec:	4603      	mov	r3, r0
 80054ee:	4a49      	ldr	r2, [pc, #292]	@ (8005614 <HAL_ETH_Init+0x1ec>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	0c9a      	lsrs	r2, r3, #18
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3a01      	subs	r2, #1
 80054fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa81 	bl	8005a08 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800550e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005512:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800551e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005522:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	22e0      	movs	r2, #224	@ 0xe0
 800553e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e05d      	b.n	8005602 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800554e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005552:	4b31      	ldr	r3, [pc, #196]	@ (8005618 <HAL_ETH_Init+0x1f0>)
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6952      	ldr	r2, [r2, #20]
 800555a:	0051      	lsls	r1, r2, #1
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	430b      	orrs	r3, r1
 8005562:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005566:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fae9 	bl	8005b42 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb2f 	bl	8005bd4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	3305      	adds	r3, #5
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	3303      	adds	r3, #3
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	061a      	lsls	r2, r3, #24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	3302      	adds	r3, #2
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	3301      	adds	r3, #1
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80055c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055c4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_ETH_Init+0x1f4>)
 80055d6:	430b      	orrs	r3, r1
 80055d8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <HAL_ETH_Init+0x1f8>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2210      	movs	r2, #16
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	58024400 	.word	0x58024400
 8005610:	58000400 	.word	0x58000400
 8005614:	431bde83 	.word	0x431bde83
 8005618:	ffff8001 	.word	0xffff8001
 800561c:	0c020060 	.word	0x0c020060
 8005620:	0c20c000 	.word	0x0c20c000

08005624 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005634:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800563c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800563e:	f001 fddf 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8005642:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4a1a      	ldr	r2, [pc, #104]	@ (80056b0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d804      	bhi.n	8005656 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e022      	b.n	800569c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4a16      	ldr	r2, [pc, #88]	@ (80056b4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d204      	bcs.n	8005668 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e019      	b.n	800569c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4a13      	ldr	r2, [pc, #76]	@ (80056b8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d915      	bls.n	800569c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4a12      	ldr	r2, [pc, #72]	@ (80056bc <HAL_ETH_SetMDIOClockRange+0x98>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d804      	bhi.n	8005682 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e00c      	b.n	800569c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4a0e      	ldr	r2, [pc, #56]	@ (80056c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d804      	bhi.n	8005694 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e003      	b.n	800569c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	02160ebf 	.word	0x02160ebf
 80056b4:	03938700 	.word	0x03938700
 80056b8:	05f5e0ff 	.word	0x05f5e0ff
 80056bc:	08f0d17f 	.word	0x08f0d17f
 80056c0:	0ee6b27f 	.word	0x0ee6b27f

080056c4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80056d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80056de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80056e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	7b5b      	ldrb	r3, [r3, #13]
 80056ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	7b9b      	ldrb	r3, [r3, #14]
 80056f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80056f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	7bdb      	ldrb	r3, [r3, #15]
 80056fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	7c12      	ldrb	r2, [r2, #16]
 8005704:	2a00      	cmp	r2, #0
 8005706:	d102      	bne.n	800570e <ETH_SetMACConfig+0x4a>
 8005708:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800570c:	e000      	b.n	8005710 <ETH_SetMACConfig+0x4c>
 800570e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005710:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	7c52      	ldrb	r2, [r2, #17]
 8005716:	2a00      	cmp	r2, #0
 8005718:	d102      	bne.n	8005720 <ETH_SetMACConfig+0x5c>
 800571a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800571e:	e000      	b.n	8005722 <ETH_SetMACConfig+0x5e>
 8005720:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	7c9b      	ldrb	r3, [r3, #18]
 8005728:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800572a:	431a      	orrs	r2, r3
               macconf->Speed |
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005730:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005736:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	7f1b      	ldrb	r3, [r3, #28]
 800573c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800573e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	7f5b      	ldrb	r3, [r3, #29]
 8005744:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005746:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	7f92      	ldrb	r2, [r2, #30]
 800574c:	2a00      	cmp	r2, #0
 800574e:	d102      	bne.n	8005756 <ETH_SetMACConfig+0x92>
 8005750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005754:	e000      	b.n	8005758 <ETH_SetMACConfig+0x94>
 8005756:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005758:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	7fdb      	ldrb	r3, [r3, #31]
 800575e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005760:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005768:	2a00      	cmp	r2, #0
 800576a:	d102      	bne.n	8005772 <ETH_SetMACConfig+0xae>
 800576c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005770:	e000      	b.n	8005774 <ETH_SetMACConfig+0xb0>
 8005772:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005774:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800577a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005782:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005784:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b56      	ldr	r3, [pc, #344]	@ (80058f0 <ETH_SetMACConfig+0x22c>)
 8005796:	4013      	ands	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	68f9      	ldr	r1, [r7, #12]
 800579e:	430b      	orrs	r3, r1
 80057a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80057ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80057b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80057ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80057c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d102      	bne.n	80057d6 <ETH_SetMACConfig+0x112>
 80057d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80057d4:	e000      	b.n	80057d8 <ETH_SetMACConfig+0x114>
 80057d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80057d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4b42      	ldr	r3, [pc, #264]	@ (80058f4 <ETH_SetMACConfig+0x230>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	4b3a      	ldr	r3, [pc, #232]	@ (80058f8 <ETH_SetMACConfig+0x234>)
 800580e:	4013      	ands	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	68f9      	ldr	r1, [r7, #12]
 8005816:	430b      	orrs	r3, r1
 8005818:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005820:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005826:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800582e:	2a00      	cmp	r2, #0
 8005830:	d101      	bne.n	8005836 <ETH_SetMACConfig+0x172>
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	e000      	b.n	8005838 <ETH_SetMACConfig+0x174>
 8005836:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005838:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800584a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800584e:	4013      	ands	r3, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	430b      	orrs	r3, r1
 8005858:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005860:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005868:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005876:	f023 0103 	bic.w	r1, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	430a      	orrs	r2, r1
 8005882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800588e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	d101      	bne.n	80058b2 <ETH_SetMACConfig+0x1ee>
 80058ae:	2240      	movs	r2, #64	@ 0x40
 80058b0:	e000      	b.n	80058b4 <ETH_SetMACConfig+0x1f0>
 80058b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80058b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80058bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80058be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80058c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80058d4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	430a      	orrs	r2, r1
 80058e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	00048083 	.word	0x00048083
 80058f4:	c0f88000 	.word	0xc0f88000
 80058f8:	fffffef0 	.word	0xfffffef0

080058fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <ETH_SetDMAConfig+0xf8>)
 8005912:	4013      	ands	r3, r2
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	6811      	ldr	r1, [r2, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	430b      	orrs	r3, r1
 800591e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005922:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	791b      	ldrb	r3, [r3, #4]
 8005928:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800592e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	7b1b      	ldrb	r3, [r3, #12]
 8005934:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	4b2c      	ldr	r3, [pc, #176]	@ (80059f8 <ETH_SetDMAConfig+0xfc>)
 8005946:	4013      	ands	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	430b      	orrs	r3, r1
 8005950:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005954:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	7b5b      	ldrb	r3, [r3, #13]
 800595a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800596c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005970:	4b22      	ldr	r3, [pc, #136]	@ (80059fc <ETH_SetDMAConfig+0x100>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	68f9      	ldr	r1, [r7, #12]
 800597a:	430b      	orrs	r3, r1
 800597c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005980:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	7d1b      	ldrb	r3, [r3, #20]
 800598c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800598e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	7f5b      	ldrb	r3, [r3, #29]
 8005994:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80059a6:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <ETH_SetDMAConfig+0x104>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059b6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	7f1b      	ldrb	r3, [r3, #28]
 80059be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <ETH_SetDMAConfig+0x108>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	430b      	orrs	r3, r1
 80059e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059e4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	ffff87fd 	.word	0xffff87fd
 80059f8:	ffff2ffe 	.word	0xffff2ffe
 80059fc:	fffec000 	.word	0xfffec000
 8005a00:	ffc0efef 	.word	0xffc0efef
 8005a04:	7fc0ffff 	.word	0x7fc0ffff

08005a08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b0a4      	sub	sp, #144	@ 0x90
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005a16:	2300      	movs	r3, #0
 8005a18:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005a60:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005a64:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005a82:	2300      	movs	r3, #0
 8005a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005ab2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005ab8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005abc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fde6 	bl	80056c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005afc:	2301      	movs	r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b12:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005b16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005b20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005b28:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005b2e:	f107 0308 	add.w	r3, r7, #8
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fee1 	bl	80058fc <ETH_SetDMAConfig>
}
 8005b3a:	bf00      	nop
 8005b3c:	3790      	adds	r7, #144	@ 0x90
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e01d      	b.n	8005b8c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4613      	mov	r3, r2
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	440b      	add	r3, r1
 8005b60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	3206      	adds	r2, #6
 8005b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d9de      	bls.n	8005b50 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e023      	b.n	8005c2a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6919      	ldr	r1, [r3, #16]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	3212      	adds	r2, #18
 8005c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d9d8      	bls.n	8005be2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c56:	461a      	mov	r2, r3
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c6a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	@ 0x24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c9e:	4b89      	ldr	r3, [pc, #548]	@ (8005ec4 <HAL_GPIO_Init+0x234>)
 8005ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ca2:	e194      	b.n	8005fce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8186 	beq.w	8005fc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d005      	beq.n	8005cd4 <HAL_GPIO_Init+0x44>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d130      	bne.n	8005d36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	2203      	movs	r2, #3
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	f003 0201 	and.w	r2, r3, #1
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d017      	beq.n	8005d72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d123      	bne.n	8005dc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	08da      	lsrs	r2, r3, #3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3208      	adds	r2, #8
 8005d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	220f      	movs	r2, #15
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	08da      	lsrs	r2, r3, #3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3208      	adds	r2, #8
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f003 0203 	and.w	r2, r3, #3
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80e0 	beq.w	8005fc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e08:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <HAL_GPIO_Init+0x238>)
 8005e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec8 <HAL_GPIO_Init+0x238>)
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e18:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec8 <HAL_GPIO_Init+0x238>)
 8005e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e26:	4a29      	ldr	r2, [pc, #164]	@ (8005ecc <HAL_GPIO_Init+0x23c>)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	089b      	lsrs	r3, r3, #2
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	220f      	movs	r2, #15
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a20      	ldr	r2, [pc, #128]	@ (8005ed0 <HAL_GPIO_Init+0x240>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d052      	beq.n	8005ef8 <HAL_GPIO_Init+0x268>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed4 <HAL_GPIO_Init+0x244>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d031      	beq.n	8005ebe <HAL_GPIO_Init+0x22e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed8 <HAL_GPIO_Init+0x248>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d02b      	beq.n	8005eba <HAL_GPIO_Init+0x22a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	@ (8005edc <HAL_GPIO_Init+0x24c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d025      	beq.n	8005eb6 <HAL_GPIO_Init+0x226>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee0 <HAL_GPIO_Init+0x250>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01f      	beq.n	8005eb2 <HAL_GPIO_Init+0x222>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee4 <HAL_GPIO_Init+0x254>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d019      	beq.n	8005eae <HAL_GPIO_Init+0x21e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee8 <HAL_GPIO_Init+0x258>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_GPIO_Init+0x21a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <HAL_GPIO_Init+0x25c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00d      	beq.n	8005ea6 <HAL_GPIO_Init+0x216>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <HAL_GPIO_Init+0x260>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <HAL_GPIO_Init+0x212>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <HAL_GPIO_Init+0x264>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_GPIO_Init+0x20e>
 8005e9a:	2309      	movs	r3, #9
 8005e9c:	e02d      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	e02b      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	e029      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005ea6:	2307      	movs	r3, #7
 8005ea8:	e027      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005eaa:	2306      	movs	r3, #6
 8005eac:	e025      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005eae:	2305      	movs	r3, #5
 8005eb0:	e023      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005eb2:	2304      	movs	r3, #4
 8005eb4:	e021      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e01f      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e01d      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e01b      	b.n	8005efa <HAL_GPIO_Init+0x26a>
 8005ec2:	bf00      	nop
 8005ec4:	58000080 	.word	0x58000080
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	58000400 	.word	0x58000400
 8005ed0:	58020000 	.word	0x58020000
 8005ed4:	58020400 	.word	0x58020400
 8005ed8:	58020800 	.word	0x58020800
 8005edc:	58020c00 	.word	0x58020c00
 8005ee0:	58021000 	.word	0x58021000
 8005ee4:	58021400 	.word	0x58021400
 8005ee8:	58021800 	.word	0x58021800
 8005eec:	58021c00 	.word	0x58021c00
 8005ef0:	58022000 	.word	0x58022000
 8005ef4:	58022400 	.word	0x58022400
 8005ef8:	2300      	movs	r3, #0
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	f002 0203 	and.w	r2, r2, #3
 8005f00:	0092      	lsls	r2, r2, #2
 8005f02:	4093      	lsls	r3, r2
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f0a:	4938      	ldr	r1, [pc, #224]	@ (8005fec <HAL_GPIO_Init+0x35c>)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	3302      	adds	r3, #2
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f ae63 	bne.w	8005ca4 <HAL_GPIO_Init+0x14>
  }
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	3724      	adds	r7, #36	@ 0x24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	58000400 	.word	0x58000400

08005ff0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005ff8:	4a08      	ldr	r2, [pc, #32]	@ (800601c <HAL_HSEM_FastTake+0x2c>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3320      	adds	r3, #32
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	4a07      	ldr	r2, [pc, #28]	@ (8006020 <HAL_HSEM_FastTake+0x30>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	58026400 	.word	0x58026400
 8006020:	80000300 	.word	0x80000300

08006024 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800602e:	4906      	ldr	r1, [pc, #24]	@ (8006048 <HAL_HSEM_Release+0x24>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	58026400 	.word	0x58026400

0800604c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8006054:	4b05      	ldr	r3, [pc, #20]	@ (800606c <HAL_HSEM_ActivateNotification+0x20>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4904      	ldr	r1, [pc, #16]	@ (800606c <HAL_HSEM_ActivateNotification+0x20>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]
#endif
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	58026500 	.word	0x58026500

08006070 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006076:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <HAL_HSEM_IRQHandler+0x30>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800607c:	4b08      	ldr	r3, [pc, #32]	@ (80060a0 <HAL_HSEM_IRQHandler+0x30>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	43db      	mvns	r3, r3
 8006084:	4906      	ldr	r1, [pc, #24]	@ (80060a0 <HAL_HSEM_IRQHandler+0x30>)
 8006086:	4013      	ands	r3, r2
 8006088:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800608a:	4a05      	ldr	r2, [pc, #20]	@ (80060a0 <HAL_HSEM_IRQHandler+0x30>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fb fda7 	bl	8001be4 <HAL_HSEM_FreeCallback>
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	58026500 	.word	0x58026500

080060a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e041      	b.n	800613a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80060be:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80060c8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6852      	ldr	r2, [r2, #4]
 80060d2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6892      	ldr	r2, [r2, #8]
 80060dc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80060de:	f7fc fa4f 	bl	8002580 <HAL_GetTick>
 80060e2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060e4:	e00f      	b.n	8006106 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80060e6:	f7fc fa4b 	bl	8002580 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b31      	cmp	r3, #49	@ 0x31
 80060f2:	d908      	bls.n	8006106 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e019      	b.n	800613a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e8      	bne.n	80060e6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	429a      	cmp	r2, r3
 8006120:	d005      	beq.n	800612e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68d2      	ldr	r2, [r2, #12]
 800612a:	611a      	str	r2, [r3, #16]
 800612c:	e004      	b.n	8006138 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006152:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800616c:	4b29      	ldr	r3, [pc, #164]	@ (8006214 <HAL_PWREx_ConfigSupply+0xb0>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	2b06      	cmp	r3, #6
 8006176:	d00a      	beq.n	800618e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006178:	4b26      	ldr	r3, [pc, #152]	@ (8006214 <HAL_PWREx_ConfigSupply+0xb0>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d001      	beq.n	800618a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e040      	b.n	800620c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e03e      	b.n	800620c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800618e:	4b21      	ldr	r3, [pc, #132]	@ (8006214 <HAL_PWREx_ConfigSupply+0xb0>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006196:	491f      	ldr	r1, [pc, #124]	@ (8006214 <HAL_PWREx_ConfigSupply+0xb0>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800619e:	f7fc f9ef 	bl	8002580 <HAL_GetTick>
 80061a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061a4:	e009      	b.n	80061ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061a6:	f7fc f9eb 	bl	8002580 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061b4:	d901      	bls.n	80061ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e028      	b.n	800620c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061ba:	4b16      	ldr	r3, [pc, #88]	@ (8006214 <HAL_PWREx_ConfigSupply+0xb0>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c6:	d1ee      	bne.n	80061a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b1e      	cmp	r3, #30
 80061cc:	d008      	beq.n	80061e0 <HAL_PWREx_ConfigSupply+0x7c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80061d2:	d005      	beq.n	80061e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b1d      	cmp	r3, #29
 80061d8:	d002      	beq.n	80061e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80061de:	d114      	bne.n	800620a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80061e0:	f7fc f9ce 	bl	8002580 <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80061e6:	e009      	b.n	80061fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061e8:	f7fc f9ca 	bl	8002580 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061f6:	d901      	bls.n	80061fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e007      	b.n	800620c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80061fc:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_PWREx_ConfigSupply+0xb0>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006208:	d1ee      	bne.n	80061e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	58024800 	.word	0x58024800

08006218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	@ 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f000 bc48 	b.w	8006abc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8088 	beq.w	800634a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800623a:	4b99      	ldr	r3, [pc, #612]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006244:	4b96      	ldr	r3, [pc, #600]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624c:	2b10      	cmp	r3, #16
 800624e:	d007      	beq.n	8006260 <HAL_RCC_OscConfig+0x48>
 8006250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006252:	2b18      	cmp	r3, #24
 8006254:	d111      	bne.n	800627a <HAL_RCC_OscConfig+0x62>
 8006256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006258:	f003 0303 	and.w	r3, r3, #3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d10c      	bne.n	800627a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006260:	4b8f      	ldr	r3, [pc, #572]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d06d      	beq.n	8006348 <HAL_RCC_OscConfig+0x130>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d169      	bne.n	8006348 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f000 bc21 	b.w	8006abc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006282:	d106      	bne.n	8006292 <HAL_RCC_OscConfig+0x7a>
 8006284:	4b86      	ldr	r3, [pc, #536]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a85      	ldr	r2, [pc, #532]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800628a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	e02e      	b.n	80062f0 <HAL_RCC_OscConfig+0xd8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x9c>
 800629a:	4b81      	ldr	r3, [pc, #516]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a80      	ldr	r2, [pc, #512]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b7e      	ldr	r3, [pc, #504]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a7d      	ldr	r2, [pc, #500]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e01d      	b.n	80062f0 <HAL_RCC_OscConfig+0xd8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062bc:	d10c      	bne.n	80062d8 <HAL_RCC_OscConfig+0xc0>
 80062be:	4b78      	ldr	r3, [pc, #480]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a77      	ldr	r2, [pc, #476]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	4b75      	ldr	r3, [pc, #468]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a74      	ldr	r2, [pc, #464]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e00b      	b.n	80062f0 <HAL_RCC_OscConfig+0xd8>
 80062d8:	4b71      	ldr	r3, [pc, #452]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a70      	ldr	r2, [pc, #448]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	4b6e      	ldr	r3, [pc, #440]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a6d      	ldr	r2, [pc, #436]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80062ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d013      	beq.n	8006320 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fc f942 	bl	8002580 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006300:	f7fc f93e 	bl	8002580 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	@ 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e3d4      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006312:	4b63      	ldr	r3, [pc, #396]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0xe8>
 800631e:	e014      	b.n	800634a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fc f92e 	bl	8002580 <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006328:	f7fc f92a 	bl	8002580 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	@ 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e3c0      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800633a:	4b59      	ldr	r3, [pc, #356]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x110>
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80ca 	beq.w	80064ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006358:	4b51      	ldr	r3, [pc, #324]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006360:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006362:	4b4f      	ldr	r3, [pc, #316]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_RCC_OscConfig+0x166>
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	2b18      	cmp	r3, #24
 8006372:	d156      	bne.n	8006422 <HAL_RCC_OscConfig+0x20a>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d151      	bne.n	8006422 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800637e:	4b48      	ldr	r3, [pc, #288]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <HAL_RCC_OscConfig+0x17e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e392      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006396:	4b42      	ldr	r3, [pc, #264]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 0219 	bic.w	r2, r3, #25
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	493f      	ldr	r1, [pc, #252]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fc f8ea 	bl	8002580 <HAL_GetTick>
 80063ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b0:	f7fc f8e6 	bl	8002580 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e37c      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c2:	4b37      	ldr	r3, [pc, #220]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ce:	f7fc f8e3 	bl	8002598 <HAL_GetREVID>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063d8:	4293      	cmp	r3, r2
 80063da:	d817      	bhi.n	800640c <HAL_RCC_OscConfig+0x1f4>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d108      	bne.n	80063f6 <HAL_RCC_OscConfig+0x1de>
 80063e4:	4b2e      	ldr	r3, [pc, #184]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063ec:	4a2c      	ldr	r2, [pc, #176]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80063ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f4:	e07a      	b.n	80064ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f6:	4b2a      	ldr	r3, [pc, #168]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	031b      	lsls	r3, r3, #12
 8006404:	4926      	ldr	r1, [pc, #152]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006406:	4313      	orrs	r3, r2
 8006408:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800640a:	e06f      	b.n	80064ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640c:	4b24      	ldr	r3, [pc, #144]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	061b      	lsls	r3, r3, #24
 800641a:	4921      	ldr	r1, [pc, #132]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800641c:	4313      	orrs	r3, r2
 800641e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006420:	e064      	b.n	80064ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d047      	beq.n	80064ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800642a:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f023 0219 	bic.w	r2, r3, #25
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	491a      	ldr	r1, [pc, #104]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc f8a0 	bl	8002580 <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006444:	f7fc f89c 	bl	8002580 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e332      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006456:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	f7fc f899 	bl	8002598 <HAL_GetREVID>
 8006466:	4603      	mov	r3, r0
 8006468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800646c:	4293      	cmp	r3, r2
 800646e:	d819      	bhi.n	80064a4 <HAL_RCC_OscConfig+0x28c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b40      	cmp	r3, #64	@ 0x40
 8006476:	d108      	bne.n	800648a <HAL_RCC_OscConfig+0x272>
 8006478:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006480:	4a07      	ldr	r2, [pc, #28]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006486:	6053      	str	r3, [r2, #4]
 8006488:	e030      	b.n	80064ec <HAL_RCC_OscConfig+0x2d4>
 800648a:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	031b      	lsls	r3, r3, #12
 8006498:	4901      	ldr	r1, [pc, #4]	@ (80064a0 <HAL_RCC_OscConfig+0x288>)
 800649a:	4313      	orrs	r3, r2
 800649c:	604b      	str	r3, [r1, #4]
 800649e:	e025      	b.n	80064ec <HAL_RCC_OscConfig+0x2d4>
 80064a0:	58024400 	.word	0x58024400
 80064a4:	4b9a      	ldr	r3, [pc, #616]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	4997      	ldr	r1, [pc, #604]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	604b      	str	r3, [r1, #4]
 80064b8:	e018      	b.n	80064ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ba:	4b95      	ldr	r3, [pc, #596]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a94      	ldr	r2, [pc, #592]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fc f85b 	bl	8002580 <HAL_GetTick>
 80064ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ce:	f7fc f857 	bl	8002580 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e2ed      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064e0:	4b8b      	ldr	r3, [pc, #556]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a9 	beq.w	800664c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064fa:	4b85      	ldr	r3, [pc, #532]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006502:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006504:	4b82      	ldr	r3, [pc, #520]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d007      	beq.n	8006520 <HAL_RCC_OscConfig+0x308>
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b18      	cmp	r3, #24
 8006514:	d13a      	bne.n	800658c <HAL_RCC_OscConfig+0x374>
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d135      	bne.n	800658c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006520:	4b7b      	ldr	r3, [pc, #492]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_OscConfig+0x320>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	2b80      	cmp	r3, #128	@ 0x80
 8006532:	d001      	beq.n	8006538 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e2c1      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006538:	f7fc f82e 	bl	8002598 <HAL_GetREVID>
 800653c:	4603      	mov	r3, r0
 800653e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006542:	4293      	cmp	r3, r2
 8006544:	d817      	bhi.n	8006576 <HAL_RCC_OscConfig+0x35e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	2b20      	cmp	r3, #32
 800654c:	d108      	bne.n	8006560 <HAL_RCC_OscConfig+0x348>
 800654e:	4b70      	ldr	r3, [pc, #448]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006556:	4a6e      	ldr	r2, [pc, #440]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800655c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800655e:	e075      	b.n	800664c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006560:	4b6b      	ldr	r3, [pc, #428]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	069b      	lsls	r3, r3, #26
 800656e:	4968      	ldr	r1, [pc, #416]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006570:	4313      	orrs	r3, r2
 8006572:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006574:	e06a      	b.n	800664c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006576:	4b66      	ldr	r3, [pc, #408]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	061b      	lsls	r3, r3, #24
 8006584:	4962      	ldr	r1, [pc, #392]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006586:	4313      	orrs	r3, r2
 8006588:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800658a:	e05f      	b.n	800664c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d042      	beq.n	800661a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006594:	4b5e      	ldr	r3, [pc, #376]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a5d      	ldr	r2, [pc, #372]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 800659a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fb ffee 	bl	8002580 <HAL_GetTick>
 80065a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065a8:	f7fb ffea 	bl	8002580 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e280      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ba:	4b55      	ldr	r3, [pc, #340]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065c6:	f7fb ffe7 	bl	8002598 <HAL_GetREVID>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d817      	bhi.n	8006604 <HAL_RCC_OscConfig+0x3ec>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d108      	bne.n	80065ee <HAL_RCC_OscConfig+0x3d6>
 80065dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80065e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80065e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065ea:	6053      	str	r3, [r2, #4]
 80065ec:	e02e      	b.n	800664c <HAL_RCC_OscConfig+0x434>
 80065ee:	4b48      	ldr	r3, [pc, #288]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	069b      	lsls	r3, r3, #26
 80065fc:	4944      	ldr	r1, [pc, #272]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	604b      	str	r3, [r1, #4]
 8006602:	e023      	b.n	800664c <HAL_RCC_OscConfig+0x434>
 8006604:	4b42      	ldr	r3, [pc, #264]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	493f      	ldr	r1, [pc, #252]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	4313      	orrs	r3, r2
 8006616:	60cb      	str	r3, [r1, #12]
 8006618:	e018      	b.n	800664c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800661a:	4b3d      	ldr	r3, [pc, #244]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a3c      	ldr	r2, [pc, #240]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fb ffab 	bl	8002580 <HAL_GetTick>
 800662a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800662e:	f7fb ffa7 	bl	8002580 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e23d      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006640:	4b33      	ldr	r3, [pc, #204]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d036      	beq.n	80066c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006660:	4b2b      	ldr	r3, [pc, #172]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006664:	4a2a      	ldr	r2, [pc, #168]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fb ff88 	bl	8002580 <HAL_GetTick>
 8006670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006674:	f7fb ff84 	bl	8002580 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e21a      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006686:	4b22      	ldr	r3, [pc, #136]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0x45c>
 8006692:	e018      	b.n	80066c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006694:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006698:	4a1d      	ldr	r2, [pc, #116]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7fb ff6e 	bl	8002580 <HAL_GetTick>
 80066a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a8:	f7fb ff6a 	bl	8002580 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e200      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ba:	4b15      	ldr	r3, [pc, #84]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80066bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d039      	beq.n	8006746 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01c      	beq.n	8006714 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a0c      	ldr	r2, [pc, #48]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 80066e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066e6:	f7fb ff4b 	bl	8002580 <HAL_GetTick>
 80066ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ee:	f7fb ff47 	bl	8002580 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e1dd      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006700:	4b03      	ldr	r3, [pc, #12]	@ (8006710 <HAL_RCC_OscConfig+0x4f8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCC_OscConfig+0x4d6>
 800670c:	e01b      	b.n	8006746 <HAL_RCC_OscConfig+0x52e>
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006714:	4b9b      	ldr	r3, [pc, #620]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a9a      	ldr	r2, [pc, #616]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800671a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800671e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006720:	f7fb ff2e 	bl	8002580 <HAL_GetTick>
 8006724:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006728:	f7fb ff2a 	bl	8002580 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e1c0      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800673a:	4b92      	ldr	r3, [pc, #584]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8081 	beq.w	8006856 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006754:	4b8c      	ldr	r3, [pc, #560]	@ (8006988 <HAL_RCC_OscConfig+0x770>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a8b      	ldr	r2, [pc, #556]	@ (8006988 <HAL_RCC_OscConfig+0x770>)
 800675a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800675e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006760:	f7fb ff0e 	bl	8002580 <HAL_GetTick>
 8006764:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006768:	f7fb ff0a 	bl	8002580 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	@ 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1a0      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800677a:	4b83      	ldr	r3, [pc, #524]	@ (8006988 <HAL_RCC_OscConfig+0x770>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d106      	bne.n	800679c <HAL_RCC_OscConfig+0x584>
 800678e:	4b7d      	ldr	r3, [pc, #500]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	4a7c      	ldr	r2, [pc, #496]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	6713      	str	r3, [r2, #112]	@ 0x70
 800679a:	e02d      	b.n	80067f8 <HAL_RCC_OscConfig+0x5e0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10c      	bne.n	80067be <HAL_RCC_OscConfig+0x5a6>
 80067a4:	4b77      	ldr	r3, [pc, #476]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a8:	4a76      	ldr	r2, [pc, #472]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b0:	4b74      	ldr	r3, [pc, #464]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b4:	4a73      	ldr	r2, [pc, #460]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067b6:	f023 0304 	bic.w	r3, r3, #4
 80067ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80067bc:	e01c      	b.n	80067f8 <HAL_RCC_OscConfig+0x5e0>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x5c8>
 80067c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ca:	4a6e      	ldr	r2, [pc, #440]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f043 0304 	orr.w	r3, r3, #4
 80067d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80067de:	e00b      	b.n	80067f8 <HAL_RCC_OscConfig+0x5e0>
 80067e0:	4b68      	ldr	r3, [pc, #416]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e4:	4a67      	ldr	r2, [pc, #412]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ec:	4b65      	ldr	r3, [pc, #404]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f0:	4a64      	ldr	r2, [pc, #400]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80067f2:	f023 0304 	bic.w	r3, r3, #4
 80067f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d015      	beq.n	800682c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fb febe 	bl	8002580 <HAL_GetTick>
 8006804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006806:	e00a      	b.n	800681e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006808:	f7fb feba 	bl	8002580 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e14e      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800681e:	4b59      	ldr	r3, [pc, #356]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0ee      	beq.n	8006808 <HAL_RCC_OscConfig+0x5f0>
 800682a:	e014      	b.n	8006856 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fb fea8 	bl	8002580 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006832:	e00a      	b.n	800684a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fb fea4 	bl	8002580 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e138      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800684a:	4b4e      	ldr	r3, [pc, #312]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ee      	bne.n	8006834 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 812d 	beq.w	8006aba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006860:	4b48      	ldr	r3, [pc, #288]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006868:	2b18      	cmp	r3, #24
 800686a:	f000 80bd 	beq.w	80069e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	2b02      	cmp	r3, #2
 8006874:	f040 809e 	bne.w	80069b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006878:	4b42      	ldr	r3, [pc, #264]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a41      	ldr	r2, [pc, #260]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fb fe7c 	bl	8002580 <HAL_GetTick>
 8006888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fb fe78 	bl	8002580 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e10e      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800689e:	4b39      	ldr	r3, [pc, #228]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068aa:	4b36      	ldr	r3, [pc, #216]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80068ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ae:	4b37      	ldr	r3, [pc, #220]	@ (800698c <HAL_RCC_OscConfig+0x774>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068ba:	0112      	lsls	r2, r2, #4
 80068bc:	430a      	orrs	r2, r1
 80068be:	4931      	ldr	r1, [pc, #196]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	3b01      	subs	r3, #1
 80068ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d2:	3b01      	subs	r3, #1
 80068d4:	025b      	lsls	r3, r3, #9
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	3b01      	subs	r3, #1
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ec:	3b01      	subs	r3, #1
 80068ee:	061b      	lsls	r3, r3, #24
 80068f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068f4:	4923      	ldr	r1, [pc, #140]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80068fa:	4b22      	ldr	r3, [pc, #136]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4a21      	ldr	r2, [pc, #132]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006906:	4b1f      	ldr	r3, [pc, #124]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690a:	4b21      	ldr	r3, [pc, #132]	@ (8006990 <HAL_RCC_OscConfig+0x778>)
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006912:	00d2      	lsls	r2, r2, #3
 8006914:	491b      	ldr	r1, [pc, #108]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800691a:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	f023 020c 	bic.w	r2, r3, #12
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	4917      	ldr	r1, [pc, #92]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006928:	4313      	orrs	r3, r2
 800692a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800692c:	4b15      	ldr	r3, [pc, #84]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	f023 0202 	bic.w	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006938:	4912      	ldr	r1, [pc, #72]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800693a:	4313      	orrs	r3, r2
 800693c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800693e:	4b11      	ldr	r3, [pc, #68]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006942:	4a10      	ldr	r2, [pc, #64]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800694a:	4b0e      	ldr	r3, [pc, #56]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	4a0d      	ldr	r2, [pc, #52]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	4a0a      	ldr	r2, [pc, #40]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 800695c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006962:	4b08      	ldr	r3, [pc, #32]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006966:	4a07      	ldr	r2, [pc, #28]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800696e:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a04      	ldr	r2, [pc, #16]	@ (8006984 <HAL_RCC_OscConfig+0x76c>)
 8006974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697a:	f7fb fe01 	bl	8002580 <HAL_GetTick>
 800697e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006980:	e011      	b.n	80069a6 <HAL_RCC_OscConfig+0x78e>
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
 8006988:	58024800 	.word	0x58024800
 800698c:	fffffc0c 	.word	0xfffffc0c
 8006990:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006994:	f7fb fdf4 	bl	8002580 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e08a      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069a6:	4b47      	ldr	r3, [pc, #284]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x77c>
 80069b2:	e082      	b.n	8006aba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b4:	4b43      	ldr	r3, [pc, #268]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a42      	ldr	r2, [pc, #264]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 80069ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fb fdde 	bl	8002580 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fb fdda 	bl	8002580 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e070      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069da:	4b3a      	ldr	r3, [pc, #232]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x7b0>
 80069e6:	e068      	b.n	8006aba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069e8:	4b36      	ldr	r3, [pc, #216]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069ee:	4b35      	ldr	r3, [pc, #212]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d031      	beq.n	8006a60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f003 0203 	and.w	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d12a      	bne.n	8006a60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d122      	bne.n	8006a60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d11a      	bne.n	8006a60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	0a5b      	lsrs	r3, r3, #9
 8006a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d111      	bne.n	8006a60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d108      	bne.n	8006a60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	0e1b      	lsrs	r3, r3, #24
 8006a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d001      	beq.n	8006a64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e02b      	b.n	8006abc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a64:	4b17      	ldr	r3, [pc, #92]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a68:	08db      	lsrs	r3, r3, #3
 8006a6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d01f      	beq.n	8006aba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a86:	f7fb fd7b 	bl	8002580 <HAL_GetTick>
 8006a8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a8c:	bf00      	nop
 8006a8e:	f7fb fd77 	bl	8002580 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d0f9      	beq.n	8006a8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac8 <HAL_RCC_OscConfig+0x8b0>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006aa6:	00d2      	lsls	r2, r2, #3
 8006aa8:	4906      	ldr	r1, [pc, #24]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006aae:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	4a04      	ldr	r2, [pc, #16]	@ (8006ac4 <HAL_RCC_OscConfig+0x8ac>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3730      	adds	r7, #48	@ 0x30
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	ffff0007 	.word	0xffff0007

08006acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e19c      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae0:	4b8a      	ldr	r3, [pc, #552]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d910      	bls.n	8006b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aee:	4b87      	ldr	r3, [pc, #540]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 020f 	bic.w	r2, r3, #15
 8006af6:	4985      	ldr	r1, [pc, #532]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b83      	ldr	r3, [pc, #524]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e184      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	4b7b      	ldr	r3, [pc, #492]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d908      	bls.n	8006b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b2c:	4b78      	ldr	r3, [pc, #480]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	4975      	ldr	r1, [pc, #468]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d010      	beq.n	8006b6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	4b70      	ldr	r3, [pc, #448]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d908      	bls.n	8006b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	496a      	ldr	r1, [pc, #424]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d010      	beq.n	8006b9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	4b64      	ldr	r3, [pc, #400]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d908      	bls.n	8006b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b88:	4b61      	ldr	r3, [pc, #388]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	495e      	ldr	r1, [pc, #376]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d010      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	4b59      	ldr	r3, [pc, #356]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d908      	bls.n	8006bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006bb6:	4b56      	ldr	r3, [pc, #344]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	4953      	ldr	r1, [pc, #332]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d010      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d908      	bls.n	8006bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be4:	4b4a      	ldr	r3, [pc, #296]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f023 020f 	bic.w	r2, r3, #15
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4947      	ldr	r1, [pc, #284]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d055      	beq.n	8006cae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c02:	4b43      	ldr	r3, [pc, #268]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	4940      	ldr	r1, [pc, #256]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d107      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d121      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0f6      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d107      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c34:	4b36      	ldr	r3, [pc, #216]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d115      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0ea      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d107      	bne.n	8006c5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c4c:	4b30      	ldr	r3, [pc, #192]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0de      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0d6      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c6c:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f023 0207 	bic.w	r2, r3, #7
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4925      	ldr	r1, [pc, #148]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7e:	f7fb fc7f 	bl	8002580 <HAL_GetTick>
 8006c82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c84:	e00a      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c86:	f7fb fc7b 	bl	8002580 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e0be      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d1eb      	bne.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d010      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	4b14      	ldr	r3, [pc, #80]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d208      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cca:	4b11      	ldr	r3, [pc, #68]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f023 020f 	bic.w	r2, r3, #15
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	490e      	ldr	r1, [pc, #56]	@ (8006d10 <HAL_RCC_ClockConfig+0x244>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d214      	bcs.n	8006d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f023 020f 	bic.w	r2, r3, #15
 8006cf2:	4906      	ldr	r1, [pc, #24]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfa:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <HAL_RCC_ClockConfig+0x240>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d005      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e086      	b.n	8006e1a <HAL_RCC_ClockConfig+0x34e>
 8006d0c:	52002000 	.word	0x52002000
 8006d10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	4b3f      	ldr	r3, [pc, #252]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d208      	bcs.n	8006d42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d30:	4b3c      	ldr	r3, [pc, #240]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	4939      	ldr	r1, [pc, #228]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	4b34      	ldr	r3, [pc, #208]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d208      	bcs.n	8006d70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d5e:	4b31      	ldr	r3, [pc, #196]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	492e      	ldr	r1, [pc, #184]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d010      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	4b28      	ldr	r3, [pc, #160]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d208      	bcs.n	8006d9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d8c:	4b25      	ldr	r3, [pc, #148]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	4922      	ldr	r1, [pc, #136]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d010      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	4b1d      	ldr	r3, [pc, #116]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d208      	bcs.n	8006dcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dba:	4b1a      	ldr	r3, [pc, #104]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	4917      	ldr	r1, [pc, #92]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006dcc:	f000 f89e 	bl	8006f0c <HAL_RCC_GetSysClockFreq>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	4912      	ldr	r1, [pc, #72]	@ (8006e28 <HAL_RCC_ClockConfig+0x35c>)
 8006dde:	5ccb      	ldrb	r3, [r1, r3]
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
 8006de8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dea:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <HAL_RCC_ClockConfig+0x358>)
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	4a0d      	ldr	r2, [pc, #52]	@ (8006e28 <HAL_RCC_ClockConfig+0x35c>)
 8006df4:	5cd3      	ldrb	r3, [r2, r3]
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	4a0a      	ldr	r2, [pc, #40]	@ (8006e2c <HAL_RCC_ClockConfig+0x360>)
 8006e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e04:	4a0a      	ldr	r2, [pc, #40]	@ (8006e30 <HAL_RCC_ClockConfig+0x364>)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <HAL_RCC_ClockConfig+0x368>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fb f8a4 	bl	8001f5c <HAL_InitTick>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	58024400 	.word	0x58024400
 8006e28:	0801cdb8 	.word	0x0801cdb8
 8006e2c:	24000004 	.word	0x24000004
 8006e30:	24000000 	.word	0x24000000
 8006e34:	24000028 	.word	0x24000028

08006e38 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08c      	sub	sp, #48	@ 0x30
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d12a      	bne.n	8006ea0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e50:	4a2b      	ldr	r2, [pc, #172]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e5a:	4b29      	ldr	r3, [pc, #164]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e6e:	2302      	movs	r3, #2
 8006e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e72:	2303      	movs	r3, #3
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006e7e:	f107 031c 	add.w	r3, r7, #28
 8006e82:	4619      	mov	r1, r3
 8006e84:	481f      	ldr	r0, [pc, #124]	@ (8006f04 <HAL_RCC_MCOConfig+0xcc>)
 8006e86:	f7fe ff03 	bl	8005c90 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	430b      	orrs	r3, r1
 8006e98:	4919      	ldr	r1, [pc, #100]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006e9e:	e02a      	b.n	8006ef6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006ea0:	4b17      	ldr	r3, [pc, #92]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea6:	4a16      	ldr	r2, [pc, #88]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006ea8:	f043 0304 	orr.w	r3, r3, #4
 8006eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006eb0:	4b13      	ldr	r3, [pc, #76]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006ed4:	f107 031c 	add.w	r3, r7, #28
 8006ed8:	4619      	mov	r1, r3
 8006eda:	480b      	ldr	r0, [pc, #44]	@ (8006f08 <HAL_RCC_MCOConfig+0xd0>)
 8006edc:	f7fe fed8 	bl	8005c90 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006ee0:	4b07      	ldr	r3, [pc, #28]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	01d9      	lsls	r1, r3, #7
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	4903      	ldr	r1, [pc, #12]	@ (8006f00 <HAL_RCC_MCOConfig+0xc8>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	610b      	str	r3, [r1, #16]
}
 8006ef6:	bf00      	nop
 8006ef8:	3730      	adds	r7, #48	@ 0x30
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
 8006f04:	58020000 	.word	0x58020000
 8006f08:	58020800 	.word	0x58020800

08006f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b089      	sub	sp, #36	@ 0x24
 8006f10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f12:	4bb3      	ldr	r3, [pc, #716]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f1a:	2b18      	cmp	r3, #24
 8006f1c:	f200 8155 	bhi.w	80071ca <HAL_RCC_GetSysClockFreq+0x2be>
 8006f20:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f8d 	.word	0x08006f8d
 8006f2c:	080071cb 	.word	0x080071cb
 8006f30:	080071cb 	.word	0x080071cb
 8006f34:	080071cb 	.word	0x080071cb
 8006f38:	080071cb 	.word	0x080071cb
 8006f3c:	080071cb 	.word	0x080071cb
 8006f40:	080071cb 	.word	0x080071cb
 8006f44:	080071cb 	.word	0x080071cb
 8006f48:	08006fb3 	.word	0x08006fb3
 8006f4c:	080071cb 	.word	0x080071cb
 8006f50:	080071cb 	.word	0x080071cb
 8006f54:	080071cb 	.word	0x080071cb
 8006f58:	080071cb 	.word	0x080071cb
 8006f5c:	080071cb 	.word	0x080071cb
 8006f60:	080071cb 	.word	0x080071cb
 8006f64:	080071cb 	.word	0x080071cb
 8006f68:	08006fb9 	.word	0x08006fb9
 8006f6c:	080071cb 	.word	0x080071cb
 8006f70:	080071cb 	.word	0x080071cb
 8006f74:	080071cb 	.word	0x080071cb
 8006f78:	080071cb 	.word	0x080071cb
 8006f7c:	080071cb 	.word	0x080071cb
 8006f80:	080071cb 	.word	0x080071cb
 8006f84:	080071cb 	.word	0x080071cb
 8006f88:	08006fbf 	.word	0x08006fbf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f8c:	4b94      	ldr	r3, [pc, #592]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f98:	4b91      	ldr	r3, [pc, #580]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	08db      	lsrs	r3, r3, #3
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	4a90      	ldr	r2, [pc, #576]	@ (80071e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006faa:	e111      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fac:	4b8d      	ldr	r3, [pc, #564]	@ (80071e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fae:	61bb      	str	r3, [r7, #24]
      break;
 8006fb0:	e10e      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80071e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fb4:	61bb      	str	r3, [r7, #24]
      break;
 8006fb6:	e10b      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80071ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006fba:	61bb      	str	r3, [r7, #24]
      break;
 8006fbc:	e108      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fbe:	4b88      	ldr	r3, [pc, #544]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006fc8:	4b85      	ldr	r3, [pc, #532]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fd2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006fd4:	4b82      	ldr	r3, [pc, #520]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006fde:	4b80      	ldr	r3, [pc, #512]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe2:	08db      	lsrs	r3, r3, #3
 8006fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80e1 	beq.w	80071c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b02      	cmp	r3, #2
 8007006:	f000 8083 	beq.w	8007110 <HAL_RCC_GetSysClockFreq+0x204>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b02      	cmp	r3, #2
 800700e:	f200 80a1 	bhi.w	8007154 <HAL_RCC_GetSysClockFreq+0x248>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0x114>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d056      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800701e:	e099      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007020:	4b6f      	ldr	r3, [pc, #444]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0320 	and.w	r3, r3, #32
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02d      	beq.n	8007088 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800702c:	4b6c      	ldr	r3, [pc, #432]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	08db      	lsrs	r3, r3, #3
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	4a6b      	ldr	r2, [pc, #428]	@ (80071e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
 800703c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007056:	4b62      	ldr	r3, [pc, #392]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007066:	ed97 6a02 	vldr	s12, [r7, #8]
 800706a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80071f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800706e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007082:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007086:	e087      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80071f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	4b51      	ldr	r3, [pc, #324]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80071f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ca:	e065      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80071f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b40      	ldr	r3, [pc, #256]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80071f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800710e:	e043      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80071fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b2f      	ldr	r3, [pc, #188]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80071f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007152:	e021      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80071f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b1e      	ldr	r3, [pc, #120]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80071f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007196:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007198:	4b11      	ldr	r3, [pc, #68]	@ (80071e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719c:	0a5b      	lsrs	r3, r3, #9
 800719e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a2:	3301      	adds	r3, #1
 80071a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071bc:	ee17 3a90 	vmov	r3, s15
 80071c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80071c2:	e005      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61bb      	str	r3, [r7, #24]
      break;
 80071c8:	e002      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80071ca:	4b07      	ldr	r3, [pc, #28]	@ (80071e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071cc:	61bb      	str	r3, [r7, #24]
      break;
 80071ce:	bf00      	nop
  }

  return sysclockfreq;
 80071d0:	69bb      	ldr	r3, [r7, #24]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3724      	adds	r7, #36	@ 0x24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	58024400 	.word	0x58024400
 80071e4:	03d09000 	.word	0x03d09000
 80071e8:	003d0900 	.word	0x003d0900
 80071ec:	007a1200 	.word	0x007a1200
 80071f0:	46000000 	.word	0x46000000
 80071f4:	4c742400 	.word	0x4c742400
 80071f8:	4a742400 	.word	0x4a742400
 80071fc:	4af42400 	.word	0x4af42400

08007200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007206:	f7ff fe81 	bl	8006f0c <HAL_RCC_GetSysClockFreq>
 800720a:	4602      	mov	r2, r0
 800720c:	4b10      	ldr	r3, [pc, #64]	@ (8007250 <HAL_RCC_GetHCLKFreq+0x50>)
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	490f      	ldr	r1, [pc, #60]	@ (8007254 <HAL_RCC_GetHCLKFreq+0x54>)
 8007218:	5ccb      	ldrb	r3, [r1, r3]
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	fa22 f303 	lsr.w	r3, r2, r3
 8007222:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007224:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <HAL_RCC_GetHCLKFreq+0x50>)
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <HAL_RCC_GetHCLKFreq+0x54>)
 800722e:	5cd3      	ldrb	r3, [r2, r3]
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	fa22 f303 	lsr.w	r3, r2, r3
 800723a:	4a07      	ldr	r2, [pc, #28]	@ (8007258 <HAL_RCC_GetHCLKFreq+0x58>)
 800723c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800723e:	4a07      	ldr	r2, [pc, #28]	@ (800725c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <HAL_RCC_GetHCLKFreq+0x58>)
 8007246:	681b      	ldr	r3, [r3, #0]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	58024400 	.word	0x58024400
 8007254:	0801cdb8 	.word	0x0801cdb8
 8007258:	24000004 	.word	0x24000004
 800725c:	24000000 	.word	0x24000000

08007260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007264:	f7ff ffcc 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	091b      	lsrs	r3, r3, #4
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4904      	ldr	r1, [pc, #16]	@ (8007288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007280:	4618      	mov	r0, r3
 8007282:	bd80      	pop	{r7, pc}
 8007284:	58024400 	.word	0x58024400
 8007288:	0801cdb8 	.word	0x0801cdb8

0800728c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007290:	f7ff ffb6 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007294:	4602      	mov	r2, r0
 8007296:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	4904      	ldr	r1, [pc, #16]	@ (80072b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072a2:	5ccb      	ldrb	r3, [r1, r3]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	58024400 	.word	0x58024400
 80072b4:	0801cdb8 	.word	0x0801cdb8

080072b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	223f      	movs	r2, #63	@ 0x3f
 80072c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0207 	and.w	r2, r3, #7
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80072d4:	4b17      	ldr	r3, [pc, #92]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80072e0:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80072ec:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80072f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007304:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007310:	4b08      	ldr	r3, [pc, #32]	@ (8007334 <HAL_RCC_GetClockConfig+0x7c>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <HAL_RCC_GetClockConfig+0x80>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	58024400 	.word	0x58024400
 8007338:	52002000 	.word	0x52002000

0800733c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800733c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007340:	b0ca      	sub	sp, #296	@ 0x128
 8007342:	af00      	add	r7, sp, #0
 8007344:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007348:	2300      	movs	r3, #0
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800734e:	2300      	movs	r3, #0
 8007350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007360:	2500      	movs	r5, #0
 8007362:	ea54 0305 	orrs.w	r3, r4, r5
 8007366:	d049      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800736e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007372:	d02f      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007378:	d828      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800737a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800737e:	d01a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007384:	d822      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800738a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800738e:	d007      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007390:	e01c      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007392:	4bb8      	ldr	r3, [pc, #736]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	4ab7      	ldr	r2, [pc, #732]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800739c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800739e:	e01a      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	3308      	adds	r3, #8
 80073a6:	2102      	movs	r1, #2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fc8f 	bl	8008ccc <RCCEx_PLL2_Config>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073b4:	e00f      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	3328      	adds	r3, #40	@ 0x28
 80073bc:	2102      	movs	r1, #2
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 fd36 	bl	8008e30 <RCCEx_PLL3_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073ca:	e004      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073de:	4ba5      	ldr	r3, [pc, #660]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073ec:	4aa1      	ldr	r2, [pc, #644]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ee:	430b      	orrs	r3, r1
 80073f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007408:	f04f 0900 	mov.w	r9, #0
 800740c:	ea58 0309 	orrs.w	r3, r8, r9
 8007410:	d047      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007418:	2b04      	cmp	r3, #4
 800741a:	d82a      	bhi.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800741c:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007439 	.word	0x08007439
 8007428:	08007447 	.word	0x08007447
 800742c:	0800745d 	.word	0x0800745d
 8007430:	0800747b 	.word	0x0800747b
 8007434:	0800747b 	.word	0x0800747b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007438:	4b8e      	ldr	r3, [pc, #568]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	4a8d      	ldr	r2, [pc, #564]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007444:	e01a      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	3308      	adds	r3, #8
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fc3c 	bl	8008ccc <RCCEx_PLL2_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800745a:	e00f      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007460:	3328      	adds	r3, #40	@ 0x28
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fce3 	bl	8008e30 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007470:	e004      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007478:	e000      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800747a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007484:	4b7b      	ldr	r3, [pc, #492]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007488:	f023 0107 	bic.w	r1, r3, #7
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007492:	4a78      	ldr	r2, [pc, #480]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007494:	430b      	orrs	r3, r1
 8007496:	6513      	str	r3, [r2, #80]	@ 0x50
 8007498:	e003      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800749e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80074ae:	f04f 0b00 	mov.w	fp, #0
 80074b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80074b6:	d04c      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c2:	d030      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c8:	d829      	bhi.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80074cc:	d02d      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80074d0:	d825      	bhi.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074d2:	2b80      	cmp	r3, #128	@ 0x80
 80074d4:	d018      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074d6:	2b80      	cmp	r3, #128	@ 0x80
 80074d8:	d821      	bhi.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074de:	2b40      	cmp	r3, #64	@ 0x40
 80074e0:	d007      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074e2:	e01c      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e4:	4b63      	ldr	r3, [pc, #396]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e8:	4a62      	ldr	r2, [pc, #392]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074f0:	e01c      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	3308      	adds	r3, #8
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 fbe6 	bl	8008ccc <RCCEx_PLL2_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007506:	e011      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	3328      	adds	r3, #40	@ 0x28
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fc8d 	bl	8008e30 <RCCEx_PLL3_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800751c:	e006      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007524:	e002      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007526:	bf00      	nop
 8007528:	e000      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800752a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007534:	4b4f      	ldr	r3, [pc, #316]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007538:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007542:	4a4c      	ldr	r2, [pc, #304]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007544:	430b      	orrs	r3, r1
 8007546:	6513      	str	r3, [r2, #80]	@ 0x50
 8007548:	e003      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800755e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007562:	2300      	movs	r3, #0
 8007564:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007568:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800756c:	460b      	mov	r3, r1
 800756e:	4313      	orrs	r3, r2
 8007570:	d053      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800757a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800757e:	d035      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007580:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007584:	d82e      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007586:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800758a:	d031      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800758c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007590:	d828      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007596:	d01a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759c:	d822      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80075a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075a6:	d007      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80075a8:	e01c      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075aa:	4b32      	ldr	r3, [pc, #200]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ae:	4a31      	ldr	r2, [pc, #196]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b6:	e01c      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075bc:	3308      	adds	r3, #8
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 fb83 	bl	8008ccc <RCCEx_PLL2_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075cc:	e011      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	3328      	adds	r3, #40	@ 0x28
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fc2a 	bl	8008e30 <RCCEx_PLL3_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075e2:	e006      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ea:	e002      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075ec:	bf00      	nop
 80075ee:	e000      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800760a:	4a1a      	ldr	r2, [pc, #104]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800760c:	430b      	orrs	r3, r1
 800760e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007610:	e003      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007626:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800762a:	2300      	movs	r3, #0
 800762c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007630:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007634:	460b      	mov	r3, r1
 8007636:	4313      	orrs	r3, r2
 8007638:	d056      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007642:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007646:	d038      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800764c:	d831      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800764e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007652:	d034      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007654:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007658:	d82b      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800765a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800765e:	d01d      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007664:	d825      	bhi.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d006      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800766a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800766e:	d00a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007670:	e01f      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007678:	4ba2      	ldr	r3, [pc, #648]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	4aa1      	ldr	r2, [pc, #644]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800767e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007684:	e01c      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3308      	adds	r3, #8
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f001 fb1c 	bl	8008ccc <RCCEx_PLL2_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800769a:	e011      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800769c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a0:	3328      	adds	r3, #40	@ 0x28
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fbc3 	bl	8008e30 <RCCEx_PLL3_Config>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076b0:	e006      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076b8:	e002      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076c8:	4b8e      	ldr	r3, [pc, #568]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076d8:	4a8a      	ldr	r2, [pc, #552]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076da:	430b      	orrs	r3, r1
 80076dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80076de:	e003      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80076f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007702:	460b      	mov	r3, r1
 8007704:	4313      	orrs	r3, r2
 8007706:	d03a      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770e:	2b30      	cmp	r3, #48	@ 0x30
 8007710:	d01f      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007712:	2b30      	cmp	r3, #48	@ 0x30
 8007714:	d819      	bhi.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007716:	2b20      	cmp	r3, #32
 8007718:	d00c      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800771a:	2b20      	cmp	r3, #32
 800771c:	d815      	bhi.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d019      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007722:	2b10      	cmp	r3, #16
 8007724:	d111      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007726:	4b77      	ldr	r3, [pc, #476]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772a:	4a76      	ldr	r2, [pc, #472]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800772c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007732:	e011      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007738:	3308      	adds	r3, #8
 800773a:	2102      	movs	r1, #2
 800773c:	4618      	mov	r0, r3
 800773e:	f001 fac5 	bl	8008ccc <RCCEx_PLL2_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007748:	e006      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007750:	e002      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007760:	4b68      	ldr	r3, [pc, #416]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007764:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800776e:	4a65      	ldr	r2, [pc, #404]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007770:	430b      	orrs	r3, r1
 8007772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007774:	e003      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800778a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800778e:	2300      	movs	r3, #0
 8007790:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007794:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007798:	460b      	mov	r3, r1
 800779a:	4313      	orrs	r3, r2
 800779c:	d051      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077a8:	d035      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ae:	d82e      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b4:	d031      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077ba:	d828      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c0:	d01a      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c6:	d822      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d0:	d007      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077d2:	e01c      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d4:	4b4b      	ldr	r3, [pc, #300]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	4a4a      	ldr	r2, [pc, #296]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077e0:	e01c      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	3308      	adds	r3, #8
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 fa6e 	bl	8008ccc <RCCEx_PLL2_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077f6:	e011      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	3328      	adds	r3, #40	@ 0x28
 80077fe:	2100      	movs	r1, #0
 8007800:	4618      	mov	r0, r3
 8007802:	f001 fb15 	bl	8008e30 <RCCEx_PLL3_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800780c:	e006      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007814:	e002      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007816:	bf00      	nop
 8007818:	e000      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800781a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007824:	4b37      	ldr	r3, [pc, #220]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007828:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007832:	4a34      	ldr	r2, [pc, #208]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007834:	430b      	orrs	r3, r1
 8007836:	6513      	str	r3, [r2, #80]	@ 0x50
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800784e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007858:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800785c:	460b      	mov	r3, r1
 800785e:	4313      	orrs	r3, r2
 8007860:	d056      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800786c:	d033      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800786e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007872:	d82c      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007874:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007878:	d02f      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800787a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800787e:	d826      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007884:	d02b      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007886:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800788a:	d820      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800788c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007890:	d012      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007896:	d81a      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d022      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a0:	d115      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a6:	3308      	adds	r3, #8
 80078a8:	2101      	movs	r1, #1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fa0e 	bl	8008ccc <RCCEx_PLL2_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078b6:	e015      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	3328      	adds	r3, #40	@ 0x28
 80078be:	2101      	movs	r1, #1
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fab5 	bl	8008e30 <RCCEx_PLL3_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078cc:	e00a      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078d6:	bf00      	nop
 80078d8:	e004      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078da:	bf00      	nop
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10d      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078fa:	4a02      	ldr	r2, [pc, #8]	@ (8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007900:	e006      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007902:	bf00      	nop
 8007904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800791c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007920:	2300      	movs	r3, #0
 8007922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007926:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800792a:	460b      	mov	r3, r1
 800792c:	4313      	orrs	r3, r2
 800792e:	d055      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800793c:	d033      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800793e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007942:	d82c      	bhi.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007948:	d02f      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794e:	d826      	bhi.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007954:	d02b      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800795a:	d820      	bhi.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800795c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007960:	d012      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007966:	d81a      	bhi.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d022      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800796c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007970:	d115      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	3308      	adds	r3, #8
 8007978:	2101      	movs	r1, #1
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f9a6 	bl	8008ccc <RCCEx_PLL2_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007986:	e015      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	3328      	adds	r3, #40	@ 0x28
 800798e:	2101      	movs	r1, #1
 8007990:	4618      	mov	r0, r3
 8007992:	f001 fa4d 	bl	8008e30 <RCCEx_PLL3_Config>
 8007996:	4603      	mov	r3, r0
 8007998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800799c:	e00a      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079a4:	e006      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079a6:	bf00      	nop
 80079a8:	e004      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079aa:	bf00      	nop
 80079ac:	e002      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079ae:	bf00      	nop
 80079b0:	e000      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079bc:	4ba3      	ldr	r3, [pc, #652]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80079c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079cc:	4a9f      	ldr	r2, [pc, #636]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ce:	430b      	orrs	r3, r1
 80079d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80079d2:	e003      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079f6:	460b      	mov	r3, r1
 80079f8:	4313      	orrs	r3, r2
 80079fa:	d037      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a06:	d00e      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0c:	d816      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d018      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a16:	d111      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a18:	4b8c      	ldr	r3, [pc, #560]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	4a8b      	ldr	r2, [pc, #556]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a24:	e00f      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 f94c 	bl	8008ccc <RCCEx_PLL2_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a3a:	e004      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a42:	e000      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5c:	4a7b      	ldr	r2, [pc, #492]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5e:	430b      	orrs	r3, r1
 8007a60:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a62:	e003      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	d039      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d81c      	bhi.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a96:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ad9 	.word	0x08007ad9
 8007aa0:	08007aad 	.word	0x08007aad
 8007aa4:	08007abb 	.word	0x08007abb
 8007aa8:	08007ad9 	.word	0x08007ad9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aac:	4b67      	ldr	r3, [pc, #412]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab0:	4a66      	ldr	r2, [pc, #408]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ab8:	e00f      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	3308      	adds	r3, #8
 8007ac0:	2102      	movs	r1, #2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 f902 	bl	8008ccc <RCCEx_PLL2_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ace:	e004      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae6:	f023 0103 	bic.w	r1, r3, #3
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af0:	4a56      	ldr	r2, [pc, #344]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af2:	430b      	orrs	r3, r1
 8007af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007af6:	e003      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f000 809f 	beq.w	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b22:	4b4b      	ldr	r3, [pc, #300]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a4a      	ldr	r2, [pc, #296]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b2e:	f7fa fd27 	bl	8002580 <HAL_GetTick>
 8007b32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b36:	e00b      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b38:	f7fa fd22 	bl	8002580 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b64      	cmp	r3, #100	@ 0x64
 8007b46:	d903      	bls.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b4e:	e005      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b50:	4b3f      	ldr	r3, [pc, #252]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0ed      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d179      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b64:	4b39      	ldr	r3, [pc, #228]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b70:	4053      	eors	r3, r2
 8007b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d015      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b7a:	4b34      	ldr	r3, [pc, #208]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b86:	4b31      	ldr	r3, [pc, #196]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	4a30      	ldr	r2, [pc, #192]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b92:	4b2e      	ldr	r3, [pc, #184]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b96:	4a2d      	ldr	r2, [pc, #180]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007ba4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb2:	d118      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb4:	f7fa fce4 	bl	8002580 <HAL_GetTick>
 8007bb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bbc:	e00d      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bbe:	f7fa fcdf 	bl	8002580 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d903      	bls.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007bd8:	e005      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bda:	4b1c      	ldr	r3, [pc, #112]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0eb      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d129      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bfe:	d10e      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007c00:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c10:	091a      	lsrs	r2, r3, #4
 8007c12:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	4a0d      	ldr	r2, [pc, #52]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	6113      	str	r3, [r2, #16]
 8007c1c:	e005      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	4a0a      	ldr	r2, [pc, #40]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c28:	6113      	str	r3, [r2, #16]
 8007c2a:	4b08      	ldr	r3, [pc, #32]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c3a:	4a04      	ldr	r2, [pc, #16]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c40:	e00e      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007c4a:	e009      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	58024800 	.word	0x58024800
 8007c54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f002 0301 	and.w	r3, r2, #1
 8007c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f000 8089 	beq.w	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c88:	2b28      	cmp	r3, #40	@ 0x28
 8007c8a:	d86b      	bhi.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007d6d 	.word	0x08007d6d
 8007c98:	08007d65 	.word	0x08007d65
 8007c9c:	08007d65 	.word	0x08007d65
 8007ca0:	08007d65 	.word	0x08007d65
 8007ca4:	08007d65 	.word	0x08007d65
 8007ca8:	08007d65 	.word	0x08007d65
 8007cac:	08007d65 	.word	0x08007d65
 8007cb0:	08007d65 	.word	0x08007d65
 8007cb4:	08007d39 	.word	0x08007d39
 8007cb8:	08007d65 	.word	0x08007d65
 8007cbc:	08007d65 	.word	0x08007d65
 8007cc0:	08007d65 	.word	0x08007d65
 8007cc4:	08007d65 	.word	0x08007d65
 8007cc8:	08007d65 	.word	0x08007d65
 8007ccc:	08007d65 	.word	0x08007d65
 8007cd0:	08007d65 	.word	0x08007d65
 8007cd4:	08007d4f 	.word	0x08007d4f
 8007cd8:	08007d65 	.word	0x08007d65
 8007cdc:	08007d65 	.word	0x08007d65
 8007ce0:	08007d65 	.word	0x08007d65
 8007ce4:	08007d65 	.word	0x08007d65
 8007ce8:	08007d65 	.word	0x08007d65
 8007cec:	08007d65 	.word	0x08007d65
 8007cf0:	08007d65 	.word	0x08007d65
 8007cf4:	08007d6d 	.word	0x08007d6d
 8007cf8:	08007d65 	.word	0x08007d65
 8007cfc:	08007d65 	.word	0x08007d65
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d65 	.word	0x08007d65
 8007d08:	08007d65 	.word	0x08007d65
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007d6d 	.word	0x08007d6d
 8007d18:	08007d65 	.word	0x08007d65
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d65 	.word	0x08007d65
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d65 	.word	0x08007d65
 8007d2c:	08007d65 	.word	0x08007d65
 8007d30:	08007d65 	.word	0x08007d65
 8007d34:	08007d6d 	.word	0x08007d6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 ffc3 	bl	8008ccc <RCCEx_PLL2_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d4c:	e00f      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d52:	3328      	adds	r3, #40	@ 0x28
 8007d54:	2101      	movs	r1, #1
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 f86a 	bl	8008e30 <RCCEx_PLL3_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d62:	e004      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d6a:	e000      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10a      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d76:	4bbf      	ldr	r3, [pc, #764]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d84:	4abb      	ldr	r2, [pc, #748]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d86:	430b      	orrs	r3, r1
 8007d88:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f002 0302 	and.w	r3, r2, #2
 8007da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007da4:	2300      	movs	r3, #0
 8007da6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007daa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007dae:	460b      	mov	r3, r1
 8007db0:	4313      	orrs	r3, r2
 8007db2:	d041      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d824      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007e11 	.word	0x08007e11
 8007dc8:	08007ddd 	.word	0x08007ddd
 8007dcc:	08007df3 	.word	0x08007df3
 8007dd0:	08007e11 	.word	0x08007e11
 8007dd4:	08007e11 	.word	0x08007e11
 8007dd8:	08007e11 	.word	0x08007e11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	3308      	adds	r3, #8
 8007de2:	2101      	movs	r1, #1
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 ff71 	bl	8008ccc <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007df0:	e00f      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	3328      	adds	r3, #40	@ 0x28
 8007df8:	2101      	movs	r1, #1
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 f818 	bl	8008e30 <RCCEx_PLL3_Config>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e06:	e004      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e0e:	e000      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e1a:	4b96      	ldr	r3, [pc, #600]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1e:	f023 0107 	bic.w	r1, r3, #7
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e28:	4a92      	ldr	r2, [pc, #584]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e2e:	e003      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f002 0304 	and.w	r3, r2, #4
 8007e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	d044      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d825      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e64:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007e85 	.word	0x08007e85
 8007e74:	08007e9b 	.word	0x08007e9b
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eb9 	.word	0x08007eb9
 8007e80:	08007eb9 	.word	0x08007eb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	3308      	adds	r3, #8
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 ff1d 	bl	8008ccc <RCCEx_PLL2_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e98:	e00f      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	3328      	adds	r3, #40	@ 0x28
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ffc4 	bl	8008e30 <RCCEx_PLL3_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007eae:	e004      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec6:	f023 0107 	bic.w	r1, r3, #7
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ed2:	4a68      	ldr	r2, [pc, #416]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ed8:	e003      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f002 0320 	and.w	r3, r2, #32
 8007eee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d055      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f0e:	d033      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f14:	d82c      	bhi.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	d02f      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f20:	d826      	bhi.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f26:	d02b      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f2c:	d820      	bhi.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f32:	d012      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f38:	d81a      	bhi.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d022      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f42:	d115      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f48:	3308      	adds	r3, #8
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 febd 	bl	8008ccc <RCCEx_PLL2_Config>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f58:	e015      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	3328      	adds	r3, #40	@ 0x28
 8007f60:	2102      	movs	r1, #2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 ff64 	bl	8008e30 <RCCEx_PLL3_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f6e:	e00a      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f76:	e006      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f78:	bf00      	nop
 8007f7a:	e004      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e002      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f80:	bf00      	nop
 8007f82:	e000      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f8e:	4b39      	ldr	r3, [pc, #228]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f9e:	4a35      	ldr	r2, [pc, #212]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fa4:	e003      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	d058      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fd6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fda:	d033      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fdc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fe0:	d82c      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe6:	d02f      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fec:	d826      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ff2:	d02b      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ff4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ff8:	d820      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ffe:	d012      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008004:	d81a      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d022      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800800a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800800e:	d115      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	3308      	adds	r3, #8
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fe57 	bl	8008ccc <RCCEx_PLL2_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008024:	e015      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802a:	3328      	adds	r3, #40	@ 0x28
 800802c:	2102      	movs	r1, #2
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fefe 	bl	8008e30 <RCCEx_PLL3_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800803a:	e00a      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008042:	e006      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008044:	bf00      	nop
 8008046:	e004      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10e      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800805a:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800805e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008066:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806a:	4a02      	ldr	r2, [pc, #8]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800806c:	430b      	orrs	r3, r1
 800806e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008070:	e006      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800807c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800808c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008090:	2300      	movs	r3, #0
 8008092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008096:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800809a:	460b      	mov	r3, r1
 800809c:	4313      	orrs	r3, r2
 800809e:	d055      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080ac:	d033      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80080ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080b2:	d82c      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b8:	d02f      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80080ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080be:	d826      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080c4:	d02b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080ca:	d820      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080d0:	d012      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080d6:	d81a      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d022      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e0:	d115      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	3308      	adds	r3, #8
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fdee 	bl	8008ccc <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080f6:	e015      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fc:	3328      	adds	r3, #40	@ 0x28
 80080fe:	2102      	movs	r1, #2
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fe95 	bl	8008e30 <RCCEx_PLL3_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800810c:	e00a      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008114:	e006      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008116:	bf00      	nop
 8008118:	e004      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811a:	bf00      	nop
 800811c:	e002      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811e:	bf00      	nop
 8008120:	e000      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800812c:	4ba1      	ldr	r3, [pc, #644]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008130:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008138:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800813c:	4a9d      	ldr	r2, [pc, #628]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813e:	430b      	orrs	r3, r1
 8008140:	6593      	str	r3, [r2, #88]	@ 0x58
 8008142:	e003      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f002 0308 	and.w	r3, r2, #8
 8008158:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008162:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d01e      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800816c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008178:	d10c      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	3328      	adds	r3, #40	@ 0x28
 8008180:	2102      	movs	r1, #2
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fe54 	bl	8008e30 <RCCEx_PLL3_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008194:	4b87      	ldr	r3, [pc, #540]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008198:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081a4:	4a83      	ldr	r2, [pc, #524]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a6:	430b      	orrs	r3, r1
 80081a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	f002 0310 	and.w	r3, r2, #16
 80081b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081ba:	2300      	movs	r3, #0
 80081bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80081c4:	460b      	mov	r3, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d01e      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081d6:	d10c      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	3328      	adds	r3, #40	@ 0x28
 80081de:	2102      	movs	r1, #2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fe25 	bl	8008e30 <RCCEx_PLL3_Config>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081f2:	4b70      	ldr	r3, [pc, #448]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008202:	4a6c      	ldr	r2, [pc, #432]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008204:	430b      	orrs	r3, r1
 8008206:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008214:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008218:	2300      	movs	r3, #0
 800821a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800821e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008222:	460b      	mov	r3, r1
 8008224:	4313      	orrs	r3, r2
 8008226:	d03e      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008234:	d022      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823a:	d81b      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008244:	d00b      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008246:	e015      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824c:	3308      	adds	r3, #8
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fd3b 	bl	8008ccc <RCCEx_PLL2_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800825c:	e00f      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	3328      	adds	r3, #40	@ 0x28
 8008264:	2102      	movs	r1, #2
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fde2 	bl	8008e30 <RCCEx_PLL3_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008272:	e004      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800827a:	e000      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800827c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008286:	4b4b      	ldr	r3, [pc, #300]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800828a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008296:	4a47      	ldr	r2, [pc, #284]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008298:	430b      	orrs	r3, r1
 800829a:	6593      	str	r3, [r2, #88]	@ 0x58
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082b4:	2300      	movs	r3, #0
 80082b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d03b      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082ce:	d01f      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082d4:	d818      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082da:	d003      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082e0:	d007      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082e2:	e011      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e4:	4b33      	ldr	r3, [pc, #204]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	4a32      	ldr	r2, [pc, #200]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082f0:	e00f      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f6:	3328      	adds	r3, #40	@ 0x28
 80082f8:	2101      	movs	r1, #1
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fd98 	bl	8008e30 <RCCEx_PLL3_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008306:	e004      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800830e:	e000      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10b      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800831a:	4b26      	ldr	r3, [pc, #152]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800831c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800832a:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800832c:	430b      	orrs	r3, r1
 800832e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008330:	e003      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008346:	673b      	str	r3, [r7, #112]	@ 0x70
 8008348:	2300      	movs	r3, #0
 800834a:	677b      	str	r3, [r7, #116]	@ 0x74
 800834c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008350:	460b      	mov	r3, r1
 8008352:	4313      	orrs	r3, r2
 8008354:	d034      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008364:	d007      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008366:	e011      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008368:	4b12      	ldr	r3, [pc, #72]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	4a11      	ldr	r2, [pc, #68]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008374:	e00e      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	3308      	adds	r3, #8
 800837c:	2102      	movs	r1, #2
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fca4 	bl	8008ccc <RCCEx_PLL2_Config>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10d      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800839e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083aa:	4a02      	ldr	r2, [pc, #8]	@ (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083ac:	430b      	orrs	r3, r1
 80083ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083b0:	e006      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80083b2:	bf00      	nop
 80083b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083ce:	2300      	movs	r3, #0
 80083d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80083d6:	460b      	mov	r3, r1
 80083d8:	4313      	orrs	r3, r2
 80083da:	d00c      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	3328      	adds	r3, #40	@ 0x28
 80083e2:	2102      	movs	r1, #2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fd23 	bl	8008e30 <RCCEx_PLL3_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008402:	663b      	str	r3, [r7, #96]	@ 0x60
 8008404:	2300      	movs	r3, #0
 8008406:	667b      	str	r3, [r7, #100]	@ 0x64
 8008408:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800840c:	460b      	mov	r3, r1
 800840e:	4313      	orrs	r3, r2
 8008410:	d038      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800841e:	d018      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008424:	d811      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800842a:	d014      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800842c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008430:	d80b      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d011      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843a:	d106      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800843c:	4bc3      	ldr	r3, [pc, #780]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	4ac2      	ldr	r2, [pc, #776]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008448:	e008      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008450:	e004      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800845a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008464:	4bb9      	ldr	r3, [pc, #740]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008468:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008474:	4ab5      	ldr	r2, [pc, #724]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008476:	430b      	orrs	r3, r1
 8008478:	6553      	str	r3, [r2, #84]	@ 0x54
 800847a:	e003      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008490:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008492:	2300      	movs	r3, #0
 8008494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008496:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800849a:	460b      	mov	r3, r1
 800849c:	4313      	orrs	r3, r2
 800849e:	d009      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084a0:	4baa      	ldr	r3, [pc, #680]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ae:	4aa7      	ldr	r2, [pc, #668]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80084c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80084c2:	2300      	movs	r3, #0
 80084c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80084c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80084ca:	460b      	mov	r3, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	d00a      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084d0:	4b9e      	ldr	r3, [pc, #632]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084e0:	4a9a      	ldr	r2, [pc, #616]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f4:	2300      	movs	r3, #0
 80084f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80084fc:	460b      	mov	r3, r1
 80084fe:	4313      	orrs	r3, r2
 8008500:	d009      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008502:	4b92      	ldr	r3, [pc, #584]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008506:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008510:	4a8e      	ldr	r2, [pc, #568]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008512:	430b      	orrs	r3, r1
 8008514:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008522:	643b      	str	r3, [r7, #64]	@ 0x40
 8008524:	2300      	movs	r3, #0
 8008526:	647b      	str	r3, [r7, #68]	@ 0x44
 8008528:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800852c:	460b      	mov	r3, r1
 800852e:	4313      	orrs	r3, r2
 8008530:	d00e      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008532:	4b86      	ldr	r3, [pc, #536]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4a85      	ldr	r2, [pc, #532]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008538:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800853c:	6113      	str	r3, [r2, #16]
 800853e:	4b83      	ldr	r3, [pc, #524]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008540:	6919      	ldr	r1, [r3, #16]
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008546:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800854a:	4a80      	ldr	r2, [pc, #512]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800854c:	430b      	orrs	r3, r1
 800854e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800855c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008562:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008566:	460b      	mov	r3, r1
 8008568:	4313      	orrs	r3, r2
 800856a:	d009      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800856c:	4b77      	ldr	r3, [pc, #476]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800856e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008570:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857a:	4a74      	ldr	r2, [pc, #464]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800857c:	430b      	orrs	r3, r1
 800857e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800858c:	633b      	str	r3, [r7, #48]	@ 0x30
 800858e:	2300      	movs	r3, #0
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
 8008592:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d00a      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800859c:	4b6b      	ldr	r3, [pc, #428]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ac:	4a67      	ldr	r2, [pc, #412]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ae:	430b      	orrs	r3, r1
 80085b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	2100      	movs	r1, #0
 80085bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085c8:	460b      	mov	r3, r1
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d011      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	3308      	adds	r3, #8
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fb78 	bl	8008ccc <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	2100      	movs	r1, #0
 80085fc:	6239      	str	r1, [r7, #32]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
 8008604:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008608:	460b      	mov	r3, r1
 800860a:	4313      	orrs	r3, r2
 800860c:	d011      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800860e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008612:	3308      	adds	r3, #8
 8008614:	2101      	movs	r1, #1
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fb58 	bl	8008ccc <RCCEx_PLL2_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	2100      	movs	r1, #0
 800863c:	61b9      	str	r1, [r7, #24]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	61fb      	str	r3, [r7, #28]
 8008644:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008648:	460b      	mov	r3, r1
 800864a:	4313      	orrs	r3, r2
 800864c:	d011      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	3308      	adds	r3, #8
 8008654:	2102      	movs	r1, #2
 8008656:	4618      	mov	r0, r3
 8008658:	f000 fb38 	bl	8008ccc <RCCEx_PLL2_Config>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	2100      	movs	r1, #0
 800867c:	6139      	str	r1, [r7, #16]
 800867e:	f003 0308 	and.w	r3, r3, #8
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d011      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008692:	3328      	adds	r3, #40	@ 0x28
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fbca 	bl	8008e30 <RCCEx_PLL3_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	2100      	movs	r1, #0
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	f003 0310 	and.w	r3, r3, #16
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d011      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d2:	3328      	adds	r3, #40	@ 0x28
 80086d4:	2101      	movs	r1, #1
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fbaa 	bl	8008e30 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	2100      	movs	r1, #0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	607b      	str	r3, [r7, #4]
 8008704:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008708:	460b      	mov	r3, r1
 800870a:	4313      	orrs	r3, r2
 800870c:	d011      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008712:	3328      	adds	r3, #40	@ 0x28
 8008714:	2102      	movs	r1, #2
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fb8a 	bl	8008e30 <RCCEx_PLL3_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008732:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	e000      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
}
 8008740:	4618      	mov	r0, r3
 8008742:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008746:	46bd      	mov	sp, r7
 8008748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800874c:	58024400 	.word	0x58024400

08008750 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008754:	f7fe fd54 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8008758:	4602      	mov	r2, r0
 800875a:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	4904      	ldr	r1, [pc, #16]	@ (8008778 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008766:	5ccb      	ldrb	r3, [r1, r3]
 8008768:	f003 031f 	and.w	r3, r3, #31
 800876c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008770:	4618      	mov	r0, r3
 8008772:	bd80      	pop	{r7, pc}
 8008774:	58024400 	.word	0x58024400
 8008778:	0801cdb8 	.word	0x0801cdb8

0800877c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800877c:	b480      	push	{r7}
 800877e:	b089      	sub	sp, #36	@ 0x24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008784:	4ba1      	ldr	r3, [pc, #644]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800878e:	4b9f      	ldr	r3, [pc, #636]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008792:	0b1b      	lsrs	r3, r3, #12
 8008794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008798:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800879a:	4b9c      	ldr	r3, [pc, #624]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087a6:	4b99      	ldr	r3, [pc, #612]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087aa:	08db      	lsrs	r3, r3, #3
 80087ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	fb02 f303 	mul.w	r3, r2, r3
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8111 	beq.w	80089ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	f000 8083 	beq.w	80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	f200 80a1 	bhi.w	800891c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d056      	beq.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087e6:	e099      	b.n	800891c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e8:	4b88      	ldr	r3, [pc, #544]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0320 	and.w	r3, r3, #32
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d02d      	beq.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087f4:	4b85      	ldr	r3, [pc, #532]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	4a84      	ldr	r2, [pc, #528]	@ (8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	ee07 3a90 	vmov	s15, r3
 800880c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881e:	4b7b      	ldr	r3, [pc, #492]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008832:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800884e:	e087      	b.n	8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800885e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008862:	4b6a      	ldr	r3, [pc, #424]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008872:	ed97 6a03 	vldr	s12, [r7, #12]
 8008876:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008892:	e065      	b.n	8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a6:	4b59      	ldr	r3, [pc, #356]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d6:	e043      	b.n	8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ea:	4b48      	ldr	r3, [pc, #288]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800890e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891a:	e021      	b.n	8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800892a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892e:	4b37      	ldr	r3, [pc, #220]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008942:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800895e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008960:	4b2a      	ldr	r3, [pc, #168]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008964:	0a5b      	lsrs	r3, r3, #9
 8008966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800897a:	edd7 6a07 	vldr	s13, [r7, #28]
 800897e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008986:	ee17 2a90 	vmov	r2, s15
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800898e:	4b1f      	ldr	r3, [pc, #124]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008992:	0c1b      	lsrs	r3, r3, #16
 8008994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008998:	ee07 3a90 	vmov	s15, r3
 800899c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b4:	ee17 2a90 	vmov	r2, s15
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c0:	0e1b      	lsrs	r3, r3, #24
 80089c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089e2:	ee17 2a90 	vmov	r2, s15
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089ea:	e008      	b.n	80089fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	609a      	str	r2, [r3, #8]
}
 80089fe:	bf00      	nop
 8008a00:	3724      	adds	r7, #36	@ 0x24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	03d09000 	.word	0x03d09000
 8008a14:	46000000 	.word	0x46000000
 8008a18:	4c742400 	.word	0x4c742400
 8008a1c:	4a742400 	.word	0x4a742400
 8008a20:	4af42400 	.word	0x4af42400

08008a24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	@ 0x24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a2c:	4ba1      	ldr	r3, [pc, #644]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	f003 0303 	and.w	r3, r3, #3
 8008a34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a36:	4b9f      	ldr	r3, [pc, #636]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3a:	0d1b      	lsrs	r3, r3, #20
 8008a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a42:	4b9c      	ldr	r3, [pc, #624]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a4e:	4b99      	ldr	r3, [pc, #612]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a52:	08db      	lsrs	r3, r3, #3
 8008a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8111 	beq.w	8008c94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	f000 8083 	beq.w	8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	f200 80a1 	bhi.w	8008bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d056      	beq.n	8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a8e:	e099      	b.n	8008bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a90:	4b88      	ldr	r3, [pc, #544]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d02d      	beq.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a9c:	4b85      	ldr	r3, [pc, #532]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	4a84      	ldr	r2, [pc, #528]	@ (8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	ee07 3a90 	vmov	s15, r3
 8008ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ada:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008af6:	e087      	b.n	8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3a:	e065      	b.n	8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4e:	4b59      	ldr	r3, [pc, #356]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b7e:	e043      	b.n	8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b92:	4b48      	ldr	r3, [pc, #288]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc2:	e021      	b.n	8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd6:	4b37      	ldr	r3, [pc, #220]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c08:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0c:	0a5b      	lsrs	r3, r3, #9
 8008c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c2e:	ee17 2a90 	vmov	r2, s15
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c36:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c40:	ee07 3a90 	vmov	s15, r3
 8008c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c5c:	ee17 2a90 	vmov	r2, s15
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c64:	4b13      	ldr	r3, [pc, #76]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c68:	0e1b      	lsrs	r3, r3, #24
 8008c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c8a:	ee17 2a90 	vmov	r2, s15
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c92:	e008      	b.n	8008ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]
}
 8008ca6:	bf00      	nop
 8008ca8:	3724      	adds	r7, #36	@ 0x24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	03d09000 	.word	0x03d09000
 8008cbc:	46000000 	.word	0x46000000
 8008cc0:	4c742400 	.word	0x4c742400
 8008cc4:	4a742400 	.word	0x4a742400
 8008cc8:	4af42400 	.word	0x4af42400

08008ccc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cda:	4b53      	ldr	r3, [pc, #332]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d101      	bne.n	8008cea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e099      	b.n	8008e1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008cea:	4b4f      	ldr	r3, [pc, #316]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a4e      	ldr	r2, [pc, #312]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008cf0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cf6:	f7f9 fc43 	bl	8002580 <HAL_GetTick>
 8008cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cfc:	e008      	b.n	8008d10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cfe:	f7f9 fc3f 	bl	8002580 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d901      	bls.n	8008d10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e086      	b.n	8008e1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d10:	4b45      	ldr	r3, [pc, #276]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f0      	bne.n	8008cfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d1c:	4b42      	ldr	r3, [pc, #264]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	031b      	lsls	r3, r3, #12
 8008d2a:	493f      	ldr	r1, [pc, #252]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	025b      	lsls	r3, r3, #9
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	041b      	lsls	r3, r3, #16
 8008d4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	061b      	lsls	r3, r3, #24
 8008d5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d60:	4931      	ldr	r1, [pc, #196]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d66:	4b30      	ldr	r3, [pc, #192]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	492d      	ldr	r1, [pc, #180]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d78:	4b2b      	ldr	r3, [pc, #172]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	f023 0220 	bic.w	r2, r3, #32
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	4928      	ldr	r1, [pc, #160]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d8a:	4b27      	ldr	r3, [pc, #156]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	4a26      	ldr	r2, [pc, #152]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d90:	f023 0310 	bic.w	r3, r3, #16
 8008d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d96:	4b24      	ldr	r3, [pc, #144]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d9a:	4b24      	ldr	r3, [pc, #144]	@ (8008e2c <RCCEx_PLL2_Config+0x160>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	69d2      	ldr	r2, [r2, #28]
 8008da2:	00d2      	lsls	r2, r2, #3
 8008da4:	4920      	ldr	r1, [pc, #128]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008daa:	4b1f      	ldr	r3, [pc, #124]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dae:	4a1e      	ldr	r2, [pc, #120]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008db0:	f043 0310 	orr.w	r3, r3, #16
 8008db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc0:	4a19      	ldr	r2, [pc, #100]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008dc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dc8:	e00f      	b.n	8008dea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d106      	bne.n	8008dde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008dd0:	4b15      	ldr	r3, [pc, #84]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd4:	4a14      	ldr	r2, [pc, #80]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ddc:	e005      	b.n	8008dea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008dde:	4b12      	ldr	r3, [pc, #72]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de2:	4a11      	ldr	r2, [pc, #68]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008de4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008dea:	4b0f      	ldr	r3, [pc, #60]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a0e      	ldr	r2, [pc, #56]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008df0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df6:	f7f9 fbc3 	bl	8002580 <HAL_GetTick>
 8008dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dfc:	e008      	b.n	8008e10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008dfe:	f7f9 fbbf 	bl	8002580 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d901      	bls.n	8008e10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e006      	b.n	8008e1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e10:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <RCCEx_PLL2_Config+0x15c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0f0      	beq.n	8008dfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	ffff0007 	.word	0xffff0007

08008e30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e3e:	4b53      	ldr	r3, [pc, #332]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d101      	bne.n	8008e4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e099      	b.n	8008f82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a4e      	ldr	r2, [pc, #312]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e5a:	f7f9 fb91 	bl	8002580 <HAL_GetTick>
 8008e5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e60:	e008      	b.n	8008e74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e62:	f7f9 fb8d 	bl	8002580 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d901      	bls.n	8008e74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e086      	b.n	8008f82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e74:	4b45      	ldr	r3, [pc, #276]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1f0      	bne.n	8008e62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e80:	4b42      	ldr	r3, [pc, #264]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	051b      	lsls	r3, r3, #20
 8008e8e:	493f      	ldr	r1, [pc, #252]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	025b      	lsls	r3, r3, #9
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	041b      	lsls	r3, r3, #16
 8008eb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	061b      	lsls	r3, r3, #24
 8008ec0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ec4:	4931      	ldr	r1, [pc, #196]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008eca:	4b30      	ldr	r3, [pc, #192]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ece:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	492d      	ldr	r1, [pc, #180]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008edc:	4b2b      	ldr	r3, [pc, #172]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	4928      	ldr	r1, [pc, #160]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008eee:	4b27      	ldr	r3, [pc, #156]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef2:	4a26      	ldr	r2, [pc, #152]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008efa:	4b24      	ldr	r3, [pc, #144]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008efe:	4b24      	ldr	r3, [pc, #144]	@ (8008f90 <RCCEx_PLL3_Config+0x160>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	69d2      	ldr	r2, [r2, #28]
 8008f06:	00d2      	lsls	r2, r2, #3
 8008f08:	4920      	ldr	r1, [pc, #128]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f12:	4a1e      	ldr	r2, [pc, #120]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f20:	4b1a      	ldr	r3, [pc, #104]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f24:	4a19      	ldr	r2, [pc, #100]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f2c:	e00f      	b.n	8008f4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d106      	bne.n	8008f42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f34:	4b15      	ldr	r3, [pc, #84]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	4a14      	ldr	r2, [pc, #80]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f40:	e005      	b.n	8008f4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f42:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f46:	4a11      	ldr	r2, [pc, #68]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a0e      	ldr	r2, [pc, #56]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f5a:	f7f9 fb11 	bl	8002580 <HAL_GetTick>
 8008f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f60:	e008      	b.n	8008f74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f62:	f7f9 fb0d 	bl	8002580 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d901      	bls.n	8008f74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e006      	b.n	8008f82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f74:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <RCCEx_PLL3_Config+0x15c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0f0      	beq.n	8008f62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	58024400 	.word	0x58024400
 8008f90:	ffff0007 	.word	0xffff0007

08008f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e049      	b.n	800903a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f841 	bl	8009042 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f000 f9e8 	bl	80093a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800904a:	bf00      	nop
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
	...

08009058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	d001      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e054      	b.n	800911a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a26      	ldr	r2, [pc, #152]	@ (8009128 <HAL_TIM_Base_Start_IT+0xd0>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d022      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800909a:	d01d      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a22      	ldr	r2, [pc, #136]	@ (800912c <HAL_TIM_Base_Start_IT+0xd4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d018      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a21      	ldr	r2, [pc, #132]	@ (8009130 <HAL_TIM_Base_Start_IT+0xd8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d013      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009134 <HAL_TIM_Base_Start_IT+0xdc>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00e      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a1e      	ldr	r2, [pc, #120]	@ (8009138 <HAL_TIM_Base_Start_IT+0xe0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d009      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a1c      	ldr	r2, [pc, #112]	@ (800913c <HAL_TIM_Base_Start_IT+0xe4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d004      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0x80>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009140 <HAL_TIM_Base_Start_IT+0xe8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d115      	bne.n	8009104 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	4b19      	ldr	r3, [pc, #100]	@ (8009144 <HAL_TIM_Base_Start_IT+0xec>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b06      	cmp	r3, #6
 80090e8:	d015      	beq.n	8009116 <HAL_TIM_Base_Start_IT+0xbe>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f0:	d011      	beq.n	8009116 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0201 	orr.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009102:	e008      	b.n	8009116 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f042 0201 	orr.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e000      	b.n	8009118 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010000 	.word	0x40010000
 800912c:	40000400 	.word	0x40000400
 8009130:	40000800 	.word	0x40000800
 8009134:	40000c00 	.word	0x40000c00
 8009138:	40010400 	.word	0x40010400
 800913c:	40001800 	.word	0x40001800
 8009140:	40014000 	.word	0x40014000
 8009144:	00010007 	.word	0x00010007

08009148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d020      	beq.n	80091ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01b      	beq.n	80091ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0202 	mvn.w	r2, #2
 800917c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f8e9 	bl	800936a <HAL_TIM_IC_CaptureCallback>
 8009198:	e005      	b.n	80091a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f8db 	bl	8009356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8ec 	bl	800937e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d020      	beq.n	80091f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01b      	beq.n	80091f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f06f 0204 	mvn.w	r2, #4
 80091c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f8c3 	bl	800936a <HAL_TIM_IC_CaptureCallback>
 80091e4:	e005      	b.n	80091f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f8b5 	bl	8009356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f8c6 	bl	800937e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d020      	beq.n	8009244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01b      	beq.n	8009244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0208 	mvn.w	r2, #8
 8009214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2204      	movs	r2, #4
 800921a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f89d 	bl	800936a <HAL_TIM_IC_CaptureCallback>
 8009230:	e005      	b.n	800923e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f88f 	bl	8009356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8a0 	bl	800937e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d020      	beq.n	8009290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01b      	beq.n	8009290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0210 	mvn.w	r2, #16
 8009260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2208      	movs	r2, #8
 8009266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f877 	bl	800936a <HAL_TIM_IC_CaptureCallback>
 800927c:	e005      	b.n	800928a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f869 	bl	8009356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f87a 	bl	800937e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00c      	beq.n	80092b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0201 	mvn.w	r2, #1
 80092ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7f8 fcb0 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d104      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00c      	beq.n	80092e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f913 	bl	8009508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00c      	beq.n	8009306 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f90b 	bl	800951c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f834 	bl	8009392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d007      	beq.n	800934e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f06f 0220 	mvn.w	r2, #32
 8009346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f8d3 	bl	80094f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a46      	ldr	r2, [pc, #280]	@ (80094d4 <TIM_Base_SetConfig+0x12c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d013      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c6:	d00f      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a43      	ldr	r2, [pc, #268]	@ (80094d8 <TIM_Base_SetConfig+0x130>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a42      	ldr	r2, [pc, #264]	@ (80094dc <TIM_Base_SetConfig+0x134>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a41      	ldr	r2, [pc, #260]	@ (80094e0 <TIM_Base_SetConfig+0x138>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_Base_SetConfig+0x40>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a40      	ldr	r2, [pc, #256]	@ (80094e4 <TIM_Base_SetConfig+0x13c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d108      	bne.n	80093fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a35      	ldr	r2, [pc, #212]	@ (80094d4 <TIM_Base_SetConfig+0x12c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d01f      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009408:	d01b      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a32      	ldr	r2, [pc, #200]	@ (80094d8 <TIM_Base_SetConfig+0x130>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d017      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a31      	ldr	r2, [pc, #196]	@ (80094dc <TIM_Base_SetConfig+0x134>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d013      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a30      	ldr	r2, [pc, #192]	@ (80094e0 <TIM_Base_SetConfig+0x138>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00f      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2f      	ldr	r2, [pc, #188]	@ (80094e4 <TIM_Base_SetConfig+0x13c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00b      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a2e      	ldr	r2, [pc, #184]	@ (80094e8 <TIM_Base_SetConfig+0x140>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d007      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a2d      	ldr	r2, [pc, #180]	@ (80094ec <TIM_Base_SetConfig+0x144>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_Base_SetConfig+0x9a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a2c      	ldr	r2, [pc, #176]	@ (80094f0 <TIM_Base_SetConfig+0x148>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d108      	bne.n	8009454 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4313      	orrs	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a16      	ldr	r2, [pc, #88]	@ (80094d4 <TIM_Base_SetConfig+0x12c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00f      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a18      	ldr	r2, [pc, #96]	@ (80094e4 <TIM_Base_SetConfig+0x13c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00b      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a17      	ldr	r2, [pc, #92]	@ (80094e8 <TIM_Base_SetConfig+0x140>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d007      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a16      	ldr	r2, [pc, #88]	@ (80094ec <TIM_Base_SetConfig+0x144>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_Base_SetConfig+0xf8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a15      	ldr	r2, [pc, #84]	@ (80094f0 <TIM_Base_SetConfig+0x148>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d103      	bne.n	80094a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d105      	bne.n	80094c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f023 0201 	bic.w	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	611a      	str	r2, [r3, #16]
  }
}
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40000400 	.word	0x40000400
 80094dc:	40000800 	.word	0x40000800
 80094e0:	40000c00 	.word	0x40000c00
 80094e4:	40010400 	.word	0x40010400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800

080094f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e042      	b.n	80095c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7f8 fec1 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2224      	movs	r2, #36	@ 0x24
 800955e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f022 0201 	bic.w	r2, r2, #1
 8009570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 faea 	bl	800ab54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fd7f 	bl	800a084 <UART_SetConfig>
 8009586:	4603      	mov	r3, r0
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e01b      	b.n	80095c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800959e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 fb69 	bl	800ac98 <UART_CheckIdleState>
 80095c6:	4603      	mov	r3, r0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	@ 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d167      	bne.n	80096b8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_UART_Transmit_DMA+0x24>
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e060      	b.n	80096ba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	88fa      	ldrh	r2, [r7, #6]
 800960a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2221      	movs	r2, #33	@ 0x21
 800961a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d028      	beq.n	8009678 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800962a:	4a26      	ldr	r2, [pc, #152]	@ (80096c4 <HAL_UART_Transmit_DMA+0xf4>)
 800962c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009632:	4a25      	ldr	r2, [pc, #148]	@ (80096c8 <HAL_UART_Transmit_DMA+0xf8>)
 8009634:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800963a:	4a24      	ldr	r2, [pc, #144]	@ (80096cc <HAL_UART_Transmit_DMA+0xfc>)
 800963c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009642:	2200      	movs	r2, #0
 8009644:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800964e:	4619      	mov	r1, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3328      	adds	r3, #40	@ 0x28
 8009656:	461a      	mov	r2, r3
 8009658:	88fb      	ldrh	r3, [r7, #6]
 800965a:	f7f9 fbf9 	bl	8002e50 <HAL_DMA_Start_IT>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2210      	movs	r2, #16
 8009668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e020      	b.n	80096ba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2240      	movs	r2, #64	@ 0x40
 800967e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3308      	adds	r3, #8
 8009686:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	613b      	str	r3, [r7, #16]
   return(result);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009696:	627b      	str	r3, [r7, #36]	@ 0x24
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a0:	623a      	str	r2, [r7, #32]
 80096a2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	69f9      	ldr	r1, [r7, #28]
 80096a6:	6a3a      	ldr	r2, [r7, #32]
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e5      	bne.n	8009680 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3728      	adds	r7, #40	@ 0x28
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	0800b165 	.word	0x0800b165
 80096c8:	0800b1fb 	.word	0x0800b1fb
 80096cc:	0800b37d 	.word	0x0800b37d

080096d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08a      	sub	sp, #40	@ 0x28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d137      	bne.n	8009758 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <HAL_UART_Receive_DMA+0x24>
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e030      	b.n	800975a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a18      	ldr	r2, [pc, #96]	@ (8009764 <HAL_UART_Receive_DMA+0x94>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d01f      	beq.n	8009748 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d018      	beq.n	8009748 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	613b      	str	r3, [r7, #16]
   return(result);
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800972a:	627b      	str	r3, [r7, #36]	@ 0x24
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	461a      	mov	r2, r3
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	623b      	str	r3, [r7, #32]
 8009736:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009738:	69f9      	ldr	r1, [r7, #28]
 800973a:	6a3a      	ldr	r2, [r7, #32]
 800973c:	e841 2300 	strex	r3, r2, [r1]
 8009740:	61bb      	str	r3, [r7, #24]
   return(result);
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e6      	bne.n	8009716 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	461a      	mov	r2, r3
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f001 fbba 	bl	800aec8 <UART_Start_Receive_DMA>
 8009754:	4603      	mov	r3, r0
 8009756:	e000      	b.n	800975a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009758:	2302      	movs	r3, #2
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	3728      	adds	r7, #40	@ 0x28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	58000c00 	.word	0x58000c00

08009768 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b090      	sub	sp, #64	@ 0x40
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800978a:	2b80      	cmp	r3, #128	@ 0x80
 800978c:	d139      	bne.n	8009802 <HAL_UART_DMAStop+0x9a>
 800978e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009790:	2b21      	cmp	r3, #33	@ 0x21
 8009792:	d136      	bne.n	8009802 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	e853 3f00 	ldrex	r3, [r3]
 80097a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3308      	adds	r3, #8
 80097b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e5      	bne.n	8009794 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d015      	beq.n	80097fc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7f9 fda5 	bl	8003324 <HAL_DMA_Abort>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00d      	beq.n	80097fc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fb fa2b 	bl	8004c40 <HAL_DMA_GetError>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	d105      	bne.n	80097fc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2210      	movs	r2, #16
 80097f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e047      	b.n	800988c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fc09 	bl	800b014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980c:	2b40      	cmp	r3, #64	@ 0x40
 800980e:	d13c      	bne.n	800988a <HAL_UART_DMAStop+0x122>
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	2b22      	cmp	r3, #34	@ 0x22
 8009814:	d139      	bne.n	800988a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	60bb      	str	r3, [r7, #8]
   return(result);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800982c:	633b      	str	r3, [r7, #48]	@ 0x30
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009836:	61ba      	str	r2, [r7, #24]
 8009838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6979      	ldr	r1, [r7, #20]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	613b      	str	r3, [r7, #16]
   return(result);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009850:	2b00      	cmp	r3, #0
 8009852:	d017      	beq.n	8009884 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985a:	4618      	mov	r0, r3
 800985c:	f7f9 fd62 	bl	8003324 <HAL_DMA_Abort>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00e      	beq.n	8009884 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800986c:	4618      	mov	r0, r3
 800986e:	f7fb f9e7 	bl	8004c40 <HAL_DMA_GetError>
 8009872:	4603      	mov	r3, r0
 8009874:	2b20      	cmp	r3, #32
 8009876:	d105      	bne.n	8009884 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2210      	movs	r2, #16
 800987c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e003      	b.n	800988c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 fc07 	bl	800b098 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3740      	adds	r7, #64	@ 0x40
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b0ba      	sub	sp, #232	@ 0xe8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80098be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80098c2:	4013      	ands	r3, r2
 80098c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80098c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d11b      	bne.n	8009908 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d015      	beq.n	8009908 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098e0:	f003 0320 	and.w	r3, r3, #32
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8377 	beq.w	8009fec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      }
      return;
 8009906:	e371      	b.n	8009fec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8123 	beq.w	8009b58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009912:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009916:	4b8d      	ldr	r3, [pc, #564]	@ (8009b4c <HAL_UART_IRQHandler+0x2b8>)
 8009918:	4013      	ands	r3, r2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800991e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009922:	4b8b      	ldr	r3, [pc, #556]	@ (8009b50 <HAL_UART_IRQHandler+0x2bc>)
 8009924:	4013      	ands	r3, r2
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8116 	beq.w	8009b58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d011      	beq.n	800995c <HAL_UART_IRQHandler+0xc8>
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2201      	movs	r2, #1
 800994a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009952:	f043 0201 	orr.w	r2, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800995c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d011      	beq.n	800998c <HAL_UART_IRQHandler+0xf8>
 8009968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2202      	movs	r2, #2
 800997a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009982:	f043 0204 	orr.w	r2, r3, #4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800998c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d011      	beq.n	80099bc <HAL_UART_IRQHandler+0x128>
 8009998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2204      	movs	r2, #4
 80099aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b2:	f043 0202 	orr.w	r2, r3, #2
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f003 0308 	and.w	r3, r3, #8
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d017      	beq.n	80099f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099d8:	4b5c      	ldr	r3, [pc, #368]	@ (8009b4c <HAL_UART_IRQHandler+0x2b8>)
 80099da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2208      	movs	r2, #8
 80099e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ee:	f043 0208 	orr.w	r2, r3, #8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d012      	beq.n	8009a2a <HAL_UART_IRQHandler+0x196>
 8009a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00c      	beq.n	8009a2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a20:	f043 0220 	orr.w	r2, r3, #32
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 82dd 	beq.w	8009ff0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d013      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a7e:	2b40      	cmp	r3, #64	@ 0x40
 8009a80:	d005      	beq.n	8009a8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d054      	beq.n	8009b38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 fb02 	bl	800b098 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	d146      	bne.n	8009b30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ace:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1d9      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d017      	beq.n	8009b28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afe:	4a15      	ldr	r2, [pc, #84]	@ (8009b54 <HAL_UART_IRQHandler+0x2c0>)
 8009b00:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f9 ff29 	bl	8003960 <HAL_DMA_Abort_IT>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d019      	beq.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009b22:	4610      	mov	r0, r2
 8009b24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b26:	e00f      	b.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa95 	bl	800a058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b2e:	e00b      	b.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa91 	bl	800a058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b36:	e007      	b.n	8009b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa8d 	bl	800a058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009b46:	e253      	b.n	8009ff0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b48:	bf00      	nop
    return;
 8009b4a:	e251      	b.n	8009ff0 <HAL_UART_IRQHandler+0x75c>
 8009b4c:	10000001 	.word	0x10000001
 8009b50:	04000120 	.word	0x04000120
 8009b54:	0800b3fd 	.word	0x0800b3fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	f040 81e7 	bne.w	8009f30 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b66:	f003 0310 	and.w	r3, r3, #16
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 81e0 	beq.w	8009f30 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 81d9 	beq.w	8009f30 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2210      	movs	r2, #16
 8009b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b90:	2b40      	cmp	r3, #64	@ 0x40
 8009b92:	f040 8151 	bne.w	8009e38 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a96      	ldr	r2, [pc, #600]	@ (8009df8 <HAL_UART_IRQHandler+0x564>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d068      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a93      	ldr	r2, [pc, #588]	@ (8009dfc <HAL_UART_IRQHandler+0x568>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d061      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a91      	ldr	r2, [pc, #580]	@ (8009e00 <HAL_UART_IRQHandler+0x56c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d05a      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a8e      	ldr	r2, [pc, #568]	@ (8009e04 <HAL_UART_IRQHandler+0x570>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d053      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a8c      	ldr	r2, [pc, #560]	@ (8009e08 <HAL_UART_IRQHandler+0x574>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d04c      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a89      	ldr	r2, [pc, #548]	@ (8009e0c <HAL_UART_IRQHandler+0x578>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d045      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a87      	ldr	r2, [pc, #540]	@ (8009e10 <HAL_UART_IRQHandler+0x57c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d03e      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a84      	ldr	r2, [pc, #528]	@ (8009e14 <HAL_UART_IRQHandler+0x580>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d037      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a82      	ldr	r2, [pc, #520]	@ (8009e18 <HAL_UART_IRQHandler+0x584>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d030      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a7f      	ldr	r2, [pc, #508]	@ (8009e1c <HAL_UART_IRQHandler+0x588>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d029      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a7d      	ldr	r2, [pc, #500]	@ (8009e20 <HAL_UART_IRQHandler+0x58c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a7a      	ldr	r2, [pc, #488]	@ (8009e24 <HAL_UART_IRQHandler+0x590>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d01b      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a78      	ldr	r2, [pc, #480]	@ (8009e28 <HAL_UART_IRQHandler+0x594>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d014      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a75      	ldr	r2, [pc, #468]	@ (8009e2c <HAL_UART_IRQHandler+0x598>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00d      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a73      	ldr	r2, [pc, #460]	@ (8009e30 <HAL_UART_IRQHandler+0x59c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d006      	beq.n	8009c76 <HAL_UART_IRQHandler+0x3e2>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a70      	ldr	r2, [pc, #448]	@ (8009e34 <HAL_UART_IRQHandler+0x5a0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d106      	bne.n	8009c84 <HAL_UART_IRQHandler+0x3f0>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	e005      	b.n	8009c90 <HAL_UART_IRQHandler+0x3fc>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 81ab 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	f080 81a3 	bcs.w	8009ff4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc4:	f000 8087 	beq.w	8009dd6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1da      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3308      	adds	r3, #8
 8009d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e1      	bne.n	8009d12 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3308      	adds	r3, #8
 8009d54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e3      	bne.n	8009d4e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009da4:	f023 0310 	bic.w	r3, r3, #16
 8009da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009db8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e4      	bne.n	8009d94 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f9 faa7 	bl	8003324 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f93b 	bl	800a06c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009df6:	e0fd      	b.n	8009ff4 <HAL_UART_IRQHandler+0x760>
 8009df8:	40020010 	.word	0x40020010
 8009dfc:	40020028 	.word	0x40020028
 8009e00:	40020040 	.word	0x40020040
 8009e04:	40020058 	.word	0x40020058
 8009e08:	40020070 	.word	0x40020070
 8009e0c:	40020088 	.word	0x40020088
 8009e10:	400200a0 	.word	0x400200a0
 8009e14:	400200b8 	.word	0x400200b8
 8009e18:	40020410 	.word	0x40020410
 8009e1c:	40020428 	.word	0x40020428
 8009e20:	40020440 	.word	0x40020440
 8009e24:	40020458 	.word	0x40020458
 8009e28:	40020470 	.word	0x40020470
 8009e2c:	40020488 	.word	0x40020488
 8009e30:	400204a0 	.word	0x400204a0
 8009e34:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80cf 	beq.w	8009ff8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80ca 	beq.w	8009ff8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	e853 3f00 	ldrex	r3, [r3]
 8009e70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e88:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e4      	bne.n	8009e64 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8009eaa:	6a3a      	ldr	r2, [r7, #32]
 8009eac:	4b55      	ldr	r3, [pc, #340]	@ (800a004 <HAL_UART_IRQHandler+0x770>)
 8009eae:	4013      	ands	r3, r2
 8009eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009ebe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e3      	bne.n	8009e9a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0310 	bic.w	r3, r3, #16
 8009efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009f08:	61fb      	str	r3, [r7, #28]
 8009f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0c:	69b9      	ldr	r1, [r7, #24]
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	e841 2300 	strex	r3, r2, [r1]
 8009f14:	617b      	str	r3, [r7, #20]
   return(result);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1e4      	bne.n	8009ee6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f89f 	bl	800a06c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f2e:	e063      	b.n	8009ff8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <HAL_UART_IRQHandler+0x6c6>
 8009f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d008      	beq.n	8009f5a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009f50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 fa93 	bl	800b47e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f58:	e051      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d014      	beq.n	8009f90 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d105      	bne.n	8009f7e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d008      	beq.n	8009f90 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d03a      	beq.n	8009ffc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
    }
    return;
 8009f8e:	e035      	b.n	8009ffc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d009      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x71c>
 8009f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 fa3d 	bl	800b428 <UART_EndTransmit_IT>
    return;
 8009fae:	e026      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d009      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x73c>
 8009fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 fa6c 	bl	800b4a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fce:	e016      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d010      	beq.n	8009ffe <HAL_UART_IRQHandler+0x76a>
 8009fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	da0c      	bge.n	8009ffe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 fa54 	bl	800b492 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fea:	e008      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
      return;
 8009fec:	bf00      	nop
 8009fee:	e006      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
    return;
 8009ff0:	bf00      	nop
 8009ff2:	e004      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
      return;
 8009ff4:	bf00      	nop
 8009ff6:	e002      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
      return;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <HAL_UART_IRQHandler+0x76a>
    return;
 8009ffc:	bf00      	nop
  }
}
 8009ffe:	37e8      	adds	r7, #232	@ 0xe8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	effffffe 	.word	0xeffffffe

0800a008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a088:	b092      	sub	sp, #72	@ 0x48
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	431a      	orrs	r2, r3
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4bbe      	ldr	r3, [pc, #760]	@ (800a3ac <UART_SetConfig+0x328>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	6812      	ldr	r2, [r2, #0]
 800a0ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4ab3      	ldr	r2, [pc, #716]	@ (800a3b0 <UART_SetConfig+0x32c>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d004      	beq.n	800a0f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	4baf      	ldr	r3, [pc, #700]	@ (800a3b4 <UART_SetConfig+0x330>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a100:	430b      	orrs	r3, r1
 800a102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10a:	f023 010f 	bic.w	r1, r3, #15
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4aa6      	ldr	r2, [pc, #664]	@ (800a3b8 <UART_SetConfig+0x334>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d177      	bne.n	800a214 <UART_SetConfig+0x190>
 800a124:	4ba5      	ldr	r3, [pc, #660]	@ (800a3bc <UART_SetConfig+0x338>)
 800a126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a12c:	2b28      	cmp	r3, #40	@ 0x28
 800a12e:	d86d      	bhi.n	800a20c <UART_SetConfig+0x188>
 800a130:	a201      	add	r2, pc, #4	@ (adr r2, 800a138 <UART_SetConfig+0xb4>)
 800a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a136:	bf00      	nop
 800a138:	0800a1dd 	.word	0x0800a1dd
 800a13c:	0800a20d 	.word	0x0800a20d
 800a140:	0800a20d 	.word	0x0800a20d
 800a144:	0800a20d 	.word	0x0800a20d
 800a148:	0800a20d 	.word	0x0800a20d
 800a14c:	0800a20d 	.word	0x0800a20d
 800a150:	0800a20d 	.word	0x0800a20d
 800a154:	0800a20d 	.word	0x0800a20d
 800a158:	0800a1e5 	.word	0x0800a1e5
 800a15c:	0800a20d 	.word	0x0800a20d
 800a160:	0800a20d 	.word	0x0800a20d
 800a164:	0800a20d 	.word	0x0800a20d
 800a168:	0800a20d 	.word	0x0800a20d
 800a16c:	0800a20d 	.word	0x0800a20d
 800a170:	0800a20d 	.word	0x0800a20d
 800a174:	0800a20d 	.word	0x0800a20d
 800a178:	0800a1ed 	.word	0x0800a1ed
 800a17c:	0800a20d 	.word	0x0800a20d
 800a180:	0800a20d 	.word	0x0800a20d
 800a184:	0800a20d 	.word	0x0800a20d
 800a188:	0800a20d 	.word	0x0800a20d
 800a18c:	0800a20d 	.word	0x0800a20d
 800a190:	0800a20d 	.word	0x0800a20d
 800a194:	0800a20d 	.word	0x0800a20d
 800a198:	0800a1f5 	.word	0x0800a1f5
 800a19c:	0800a20d 	.word	0x0800a20d
 800a1a0:	0800a20d 	.word	0x0800a20d
 800a1a4:	0800a20d 	.word	0x0800a20d
 800a1a8:	0800a20d 	.word	0x0800a20d
 800a1ac:	0800a20d 	.word	0x0800a20d
 800a1b0:	0800a20d 	.word	0x0800a20d
 800a1b4:	0800a20d 	.word	0x0800a20d
 800a1b8:	0800a1fd 	.word	0x0800a1fd
 800a1bc:	0800a20d 	.word	0x0800a20d
 800a1c0:	0800a20d 	.word	0x0800a20d
 800a1c4:	0800a20d 	.word	0x0800a20d
 800a1c8:	0800a20d 	.word	0x0800a20d
 800a1cc:	0800a20d 	.word	0x0800a20d
 800a1d0:	0800a20d 	.word	0x0800a20d
 800a1d4:	0800a20d 	.word	0x0800a20d
 800a1d8:	0800a205 	.word	0x0800a205
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e222      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ea:	e21e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e21a      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e216      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a1fc:	2320      	movs	r3, #32
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e212      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a204:	2340      	movs	r3, #64	@ 0x40
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20a:	e20e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a20c:	2380      	movs	r3, #128	@ 0x80
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a212:	e20a      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a69      	ldr	r2, [pc, #420]	@ (800a3c0 <UART_SetConfig+0x33c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d130      	bne.n	800a280 <UART_SetConfig+0x1fc>
 800a21e:	4b67      	ldr	r3, [pc, #412]	@ (800a3bc <UART_SetConfig+0x338>)
 800a220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	2b05      	cmp	r3, #5
 800a228:	d826      	bhi.n	800a278 <UART_SetConfig+0x1f4>
 800a22a:	a201      	add	r2, pc, #4	@ (adr r2, 800a230 <UART_SetConfig+0x1ac>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a251 	.word	0x0800a251
 800a238:	0800a259 	.word	0x0800a259
 800a23c:	0800a261 	.word	0x0800a261
 800a240:	0800a269 	.word	0x0800a269
 800a244:	0800a271 	.word	0x0800a271
 800a248:	2300      	movs	r3, #0
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24e:	e1ec      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a250:	2304      	movs	r3, #4
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a256:	e1e8      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a258:	2308      	movs	r3, #8
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e1e4      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a260:	2310      	movs	r3, #16
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e1e0      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a268:	2320      	movs	r3, #32
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e1dc      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a270:	2340      	movs	r3, #64	@ 0x40
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a276:	e1d8      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a278:	2380      	movs	r3, #128	@ 0x80
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27e:	e1d4      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a4f      	ldr	r2, [pc, #316]	@ (800a3c4 <UART_SetConfig+0x340>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d130      	bne.n	800a2ec <UART_SetConfig+0x268>
 800a28a:	4b4c      	ldr	r3, [pc, #304]	@ (800a3bc <UART_SetConfig+0x338>)
 800a28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	2b05      	cmp	r3, #5
 800a294:	d826      	bhi.n	800a2e4 <UART_SetConfig+0x260>
 800a296:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <UART_SetConfig+0x218>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2b5 	.word	0x0800a2b5
 800a2a0:	0800a2bd 	.word	0x0800a2bd
 800a2a4:	0800a2c5 	.word	0x0800a2c5
 800a2a8:	0800a2cd 	.word	0x0800a2cd
 800a2ac:	0800a2d5 	.word	0x0800a2d5
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	e1b6      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2bc:	2304      	movs	r3, #4
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e1b2      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e1ae      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2cc:	2310      	movs	r3, #16
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e1aa      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2d4:	2320      	movs	r3, #32
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e1a6      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2dc:	2340      	movs	r3, #64	@ 0x40
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e2:	e1a2      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2e4:	2380      	movs	r3, #128	@ 0x80
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ea:	e19e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a35      	ldr	r2, [pc, #212]	@ (800a3c8 <UART_SetConfig+0x344>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d130      	bne.n	800a358 <UART_SetConfig+0x2d4>
 800a2f6:	4b31      	ldr	r3, [pc, #196]	@ (800a3bc <UART_SetConfig+0x338>)
 800a2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d826      	bhi.n	800a350 <UART_SetConfig+0x2cc>
 800a302:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <UART_SetConfig+0x284>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a321 	.word	0x0800a321
 800a30c:	0800a329 	.word	0x0800a329
 800a310:	0800a331 	.word	0x0800a331
 800a314:	0800a339 	.word	0x0800a339
 800a318:	0800a341 	.word	0x0800a341
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	2300      	movs	r3, #0
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a326:	e180      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a328:	2304      	movs	r3, #4
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e17c      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a330:	2308      	movs	r3, #8
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e178      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a338:	2310      	movs	r3, #16
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e174      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a340:	2320      	movs	r3, #32
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e170      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a348:	2340      	movs	r3, #64	@ 0x40
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34e:	e16c      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a350:	2380      	movs	r3, #128	@ 0x80
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a356:	e168      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1b      	ldr	r2, [pc, #108]	@ (800a3cc <UART_SetConfig+0x348>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d142      	bne.n	800a3e8 <UART_SetConfig+0x364>
 800a362:	4b16      	ldr	r3, [pc, #88]	@ (800a3bc <UART_SetConfig+0x338>)
 800a364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	d838      	bhi.n	800a3e0 <UART_SetConfig+0x35c>
 800a36e:	a201      	add	r2, pc, #4	@ (adr r2, 800a374 <UART_SetConfig+0x2f0>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a38d 	.word	0x0800a38d
 800a378:	0800a395 	.word	0x0800a395
 800a37c:	0800a39d 	.word	0x0800a39d
 800a380:	0800a3a5 	.word	0x0800a3a5
 800a384:	0800a3d1 	.word	0x0800a3d1
 800a388:	0800a3d9 	.word	0x0800a3d9
 800a38c:	2300      	movs	r3, #0
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e14a      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a394:	2304      	movs	r3, #4
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e146      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a39c:	2308      	movs	r3, #8
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e142      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a3a4:	2310      	movs	r3, #16
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e13e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a3ac:	cfff69f3 	.word	0xcfff69f3
 800a3b0:	58000c00 	.word	0x58000c00
 800a3b4:	11fff4ff 	.word	0x11fff4ff
 800a3b8:	40011000 	.word	0x40011000
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	40004400 	.word	0x40004400
 800a3c4:	40004800 	.word	0x40004800
 800a3c8:	40004c00 	.word	0x40004c00
 800a3cc:	40005000 	.word	0x40005000
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e128      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a3d8:	2340      	movs	r3, #64	@ 0x40
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e124      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a3e0:	2380      	movs	r3, #128	@ 0x80
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e120      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4acb      	ldr	r2, [pc, #812]	@ (800a71c <UART_SetConfig+0x698>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d176      	bne.n	800a4e0 <UART_SetConfig+0x45c>
 800a3f2:	4bcb      	ldr	r3, [pc, #812]	@ (800a720 <UART_SetConfig+0x69c>)
 800a3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3fa:	2b28      	cmp	r3, #40	@ 0x28
 800a3fc:	d86c      	bhi.n	800a4d8 <UART_SetConfig+0x454>
 800a3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a404 <UART_SetConfig+0x380>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a4a9 	.word	0x0800a4a9
 800a408:	0800a4d9 	.word	0x0800a4d9
 800a40c:	0800a4d9 	.word	0x0800a4d9
 800a410:	0800a4d9 	.word	0x0800a4d9
 800a414:	0800a4d9 	.word	0x0800a4d9
 800a418:	0800a4d9 	.word	0x0800a4d9
 800a41c:	0800a4d9 	.word	0x0800a4d9
 800a420:	0800a4d9 	.word	0x0800a4d9
 800a424:	0800a4b1 	.word	0x0800a4b1
 800a428:	0800a4d9 	.word	0x0800a4d9
 800a42c:	0800a4d9 	.word	0x0800a4d9
 800a430:	0800a4d9 	.word	0x0800a4d9
 800a434:	0800a4d9 	.word	0x0800a4d9
 800a438:	0800a4d9 	.word	0x0800a4d9
 800a43c:	0800a4d9 	.word	0x0800a4d9
 800a440:	0800a4d9 	.word	0x0800a4d9
 800a444:	0800a4b9 	.word	0x0800a4b9
 800a448:	0800a4d9 	.word	0x0800a4d9
 800a44c:	0800a4d9 	.word	0x0800a4d9
 800a450:	0800a4d9 	.word	0x0800a4d9
 800a454:	0800a4d9 	.word	0x0800a4d9
 800a458:	0800a4d9 	.word	0x0800a4d9
 800a45c:	0800a4d9 	.word	0x0800a4d9
 800a460:	0800a4d9 	.word	0x0800a4d9
 800a464:	0800a4c1 	.word	0x0800a4c1
 800a468:	0800a4d9 	.word	0x0800a4d9
 800a46c:	0800a4d9 	.word	0x0800a4d9
 800a470:	0800a4d9 	.word	0x0800a4d9
 800a474:	0800a4d9 	.word	0x0800a4d9
 800a478:	0800a4d9 	.word	0x0800a4d9
 800a47c:	0800a4d9 	.word	0x0800a4d9
 800a480:	0800a4d9 	.word	0x0800a4d9
 800a484:	0800a4c9 	.word	0x0800a4c9
 800a488:	0800a4d9 	.word	0x0800a4d9
 800a48c:	0800a4d9 	.word	0x0800a4d9
 800a490:	0800a4d9 	.word	0x0800a4d9
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a4d9 	.word	0x0800a4d9
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a4d9 	.word	0x0800a4d9
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e0bc      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e0b8      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4b8:	2308      	movs	r3, #8
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e0b4      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e0b0      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4c8:	2320      	movs	r3, #32
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e0ac      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4d0:	2340      	movs	r3, #64	@ 0x40
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e0a8      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4d8:	2380      	movs	r3, #128	@ 0x80
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4de:	e0a4      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a8f      	ldr	r2, [pc, #572]	@ (800a724 <UART_SetConfig+0x6a0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d130      	bne.n	800a54c <UART_SetConfig+0x4c8>
 800a4ea:	4b8d      	ldr	r3, [pc, #564]	@ (800a720 <UART_SetConfig+0x69c>)
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d826      	bhi.n	800a544 <UART_SetConfig+0x4c0>
 800a4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4fc <UART_SetConfig+0x478>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a515 	.word	0x0800a515
 800a500:	0800a51d 	.word	0x0800a51d
 800a504:	0800a525 	.word	0x0800a525
 800a508:	0800a52d 	.word	0x0800a52d
 800a50c:	0800a535 	.word	0x0800a535
 800a510:	0800a53d 	.word	0x0800a53d
 800a514:	2300      	movs	r3, #0
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e086      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a51c:	2304      	movs	r3, #4
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e082      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a524:	2308      	movs	r3, #8
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e07e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a52c:	2310      	movs	r3, #16
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e07a      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a534:	2320      	movs	r3, #32
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e076      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a53c:	2340      	movs	r3, #64	@ 0x40
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e072      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a544:	2380      	movs	r3, #128	@ 0x80
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e06e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a75      	ldr	r2, [pc, #468]	@ (800a728 <UART_SetConfig+0x6a4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d130      	bne.n	800a5b8 <UART_SetConfig+0x534>
 800a556:	4b72      	ldr	r3, [pc, #456]	@ (800a720 <UART_SetConfig+0x69c>)
 800a558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a55a:	f003 0307 	and.w	r3, r3, #7
 800a55e:	2b05      	cmp	r3, #5
 800a560:	d826      	bhi.n	800a5b0 <UART_SetConfig+0x52c>
 800a562:	a201      	add	r2, pc, #4	@ (adr r2, 800a568 <UART_SetConfig+0x4e4>)
 800a564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a568:	0800a581 	.word	0x0800a581
 800a56c:	0800a589 	.word	0x0800a589
 800a570:	0800a591 	.word	0x0800a591
 800a574:	0800a599 	.word	0x0800a599
 800a578:	0800a5a1 	.word	0x0800a5a1
 800a57c:	0800a5a9 	.word	0x0800a5a9
 800a580:	2300      	movs	r3, #0
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e050      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a588:	2304      	movs	r3, #4
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e04c      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a590:	2308      	movs	r3, #8
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e048      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a598:	2310      	movs	r3, #16
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e044      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a5a0:	2320      	movs	r3, #32
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e040      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a5a8:	2340      	movs	r3, #64	@ 0x40
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e03c      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a5b0:	2380      	movs	r3, #128	@ 0x80
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b6:	e038      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a5b      	ldr	r2, [pc, #364]	@ (800a72c <UART_SetConfig+0x6a8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d130      	bne.n	800a624 <UART_SetConfig+0x5a0>
 800a5c2:	4b57      	ldr	r3, [pc, #348]	@ (800a720 <UART_SetConfig+0x69c>)
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	d826      	bhi.n	800a61c <UART_SetConfig+0x598>
 800a5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d4 <UART_SetConfig+0x550>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a5ed 	.word	0x0800a5ed
 800a5d8:	0800a5f5 	.word	0x0800a5f5
 800a5dc:	0800a5fd 	.word	0x0800a5fd
 800a5e0:	0800a605 	.word	0x0800a605
 800a5e4:	0800a60d 	.word	0x0800a60d
 800a5e8:	0800a615 	.word	0x0800a615
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e01a      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e016      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e012      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a604:	2310      	movs	r3, #16
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e00e      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a60c:	2320      	movs	r3, #32
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a612:	e00a      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a614:	2340      	movs	r3, #64	@ 0x40
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61a:	e006      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a61c:	2380      	movs	r3, #128	@ 0x80
 800a61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a622:	e002      	b.n	800a62a <UART_SetConfig+0x5a6>
 800a624:	2380      	movs	r3, #128	@ 0x80
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a3f      	ldr	r2, [pc, #252]	@ (800a72c <UART_SetConfig+0x6a8>)
 800a630:	4293      	cmp	r3, r2
 800a632:	f040 80f8 	bne.w	800a826 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a636:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	dc46      	bgt.n	800a6cc <UART_SetConfig+0x648>
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f2c0 8082 	blt.w	800a748 <UART_SetConfig+0x6c4>
 800a644:	3b02      	subs	r3, #2
 800a646:	2b1e      	cmp	r3, #30
 800a648:	d87e      	bhi.n	800a748 <UART_SetConfig+0x6c4>
 800a64a:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <UART_SetConfig+0x5cc>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a6d3 	.word	0x0800a6d3
 800a654:	0800a749 	.word	0x0800a749
 800a658:	0800a6db 	.word	0x0800a6db
 800a65c:	0800a749 	.word	0x0800a749
 800a660:	0800a749 	.word	0x0800a749
 800a664:	0800a749 	.word	0x0800a749
 800a668:	0800a6eb 	.word	0x0800a6eb
 800a66c:	0800a749 	.word	0x0800a749
 800a670:	0800a749 	.word	0x0800a749
 800a674:	0800a749 	.word	0x0800a749
 800a678:	0800a749 	.word	0x0800a749
 800a67c:	0800a749 	.word	0x0800a749
 800a680:	0800a749 	.word	0x0800a749
 800a684:	0800a749 	.word	0x0800a749
 800a688:	0800a6fb 	.word	0x0800a6fb
 800a68c:	0800a749 	.word	0x0800a749
 800a690:	0800a749 	.word	0x0800a749
 800a694:	0800a749 	.word	0x0800a749
 800a698:	0800a749 	.word	0x0800a749
 800a69c:	0800a749 	.word	0x0800a749
 800a6a0:	0800a749 	.word	0x0800a749
 800a6a4:	0800a749 	.word	0x0800a749
 800a6a8:	0800a749 	.word	0x0800a749
 800a6ac:	0800a749 	.word	0x0800a749
 800a6b0:	0800a749 	.word	0x0800a749
 800a6b4:	0800a749 	.word	0x0800a749
 800a6b8:	0800a749 	.word	0x0800a749
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a749 	.word	0x0800a749
 800a6c4:	0800a749 	.word	0x0800a749
 800a6c8:	0800a73b 	.word	0x0800a73b
 800a6cc:	2b40      	cmp	r3, #64	@ 0x40
 800a6ce:	d037      	beq.n	800a740 <UART_SetConfig+0x6bc>
 800a6d0:	e03a      	b.n	800a748 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6d2:	f7fe f83d 	bl	8008750 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e03c      	b.n	800a754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe f84c 	bl	800877c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e8:	e034      	b.n	800a754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ea:	f107 0318 	add.w	r3, r7, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe f998 	bl	8008a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f8:	e02c      	b.n	800a754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6fa:	4b09      	ldr	r3, [pc, #36]	@ (800a720 <UART_SetConfig+0x69c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d016      	beq.n	800a734 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a706:	4b06      	ldr	r3, [pc, #24]	@ (800a720 <UART_SetConfig+0x69c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	08db      	lsrs	r3, r3, #3
 800a70c:	f003 0303 	and.w	r3, r3, #3
 800a710:	4a07      	ldr	r2, [pc, #28]	@ (800a730 <UART_SetConfig+0x6ac>)
 800a712:	fa22 f303 	lsr.w	r3, r2, r3
 800a716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a718:	e01c      	b.n	800a754 <UART_SetConfig+0x6d0>
 800a71a:	bf00      	nop
 800a71c:	40011400 	.word	0x40011400
 800a720:	58024400 	.word	0x58024400
 800a724:	40007800 	.word	0x40007800
 800a728:	40007c00 	.word	0x40007c00
 800a72c:	58000c00 	.word	0x58000c00
 800a730:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a734:	4b9d      	ldr	r3, [pc, #628]	@ (800a9ac <UART_SetConfig+0x928>)
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e00c      	b.n	800a754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a73a:	4b9d      	ldr	r3, [pc, #628]	@ (800a9b0 <UART_SetConfig+0x92c>)
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	e009      	b.n	800a754 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a746:	e005      	b.n	800a754 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 81de 	beq.w	800ab18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a760:	4a94      	ldr	r2, [pc, #592]	@ (800a9b4 <UART_SetConfig+0x930>)
 800a762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a766:	461a      	mov	r2, r3
 800a768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a76e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	4613      	mov	r3, r2
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	4413      	add	r3, r2
 800a77a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d305      	bcc.n	800a78c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a788:	429a      	cmp	r2, r3
 800a78a:	d903      	bls.n	800a794 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a792:	e1c1      	b.n	800ab18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a796:	2200      	movs	r2, #0
 800a798:	60bb      	str	r3, [r7, #8]
 800a79a:	60fa      	str	r2, [r7, #12]
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a0:	4a84      	ldr	r2, [pc, #528]	@ (800a9b4 <UART_SetConfig+0x930>)
 800a7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7b6:	f7f5 fe4b 	bl	8000450 <__aeabi_uldivmod>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f04f 0200 	mov.w	r2, #0
 800a7c6:	f04f 0300 	mov.w	r3, #0
 800a7ca:	020b      	lsls	r3, r1, #8
 800a7cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7d0:	0202      	lsls	r2, r0, #8
 800a7d2:	6979      	ldr	r1, [r7, #20]
 800a7d4:	6849      	ldr	r1, [r1, #4]
 800a7d6:	0849      	lsrs	r1, r1, #1
 800a7d8:	2000      	movs	r0, #0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	4605      	mov	r5, r0
 800a7de:	eb12 0804 	adds.w	r8, r2, r4
 800a7e2:	eb43 0905 	adc.w	r9, r3, r5
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	469a      	mov	sl, r3
 800a7ee:	4693      	mov	fp, r2
 800a7f0:	4652      	mov	r2, sl
 800a7f2:	465b      	mov	r3, fp
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	f7f5 fe2a 	bl	8000450 <__aeabi_uldivmod>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4613      	mov	r3, r2
 800a802:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a80a:	d308      	bcc.n	800a81e <UART_SetConfig+0x79a>
 800a80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a812:	d204      	bcs.n	800a81e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a81a:	60da      	str	r2, [r3, #12]
 800a81c:	e17c      	b.n	800ab18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a824:	e178      	b.n	800ab18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a82e:	f040 80c5 	bne.w	800a9bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a836:	2b20      	cmp	r3, #32
 800a838:	dc48      	bgt.n	800a8cc <UART_SetConfig+0x848>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	db7b      	blt.n	800a936 <UART_SetConfig+0x8b2>
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d879      	bhi.n	800a936 <UART_SetConfig+0x8b2>
 800a842:	a201      	add	r2, pc, #4	@ (adr r2, 800a848 <UART_SetConfig+0x7c4>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a8db 	.word	0x0800a8db
 800a850:	0800a937 	.word	0x0800a937
 800a854:	0800a937 	.word	0x0800a937
 800a858:	0800a8e3 	.word	0x0800a8e3
 800a85c:	0800a937 	.word	0x0800a937
 800a860:	0800a937 	.word	0x0800a937
 800a864:	0800a937 	.word	0x0800a937
 800a868:	0800a8f3 	.word	0x0800a8f3
 800a86c:	0800a937 	.word	0x0800a937
 800a870:	0800a937 	.word	0x0800a937
 800a874:	0800a937 	.word	0x0800a937
 800a878:	0800a937 	.word	0x0800a937
 800a87c:	0800a937 	.word	0x0800a937
 800a880:	0800a937 	.word	0x0800a937
 800a884:	0800a937 	.word	0x0800a937
 800a888:	0800a903 	.word	0x0800a903
 800a88c:	0800a937 	.word	0x0800a937
 800a890:	0800a937 	.word	0x0800a937
 800a894:	0800a937 	.word	0x0800a937
 800a898:	0800a937 	.word	0x0800a937
 800a89c:	0800a937 	.word	0x0800a937
 800a8a0:	0800a937 	.word	0x0800a937
 800a8a4:	0800a937 	.word	0x0800a937
 800a8a8:	0800a937 	.word	0x0800a937
 800a8ac:	0800a937 	.word	0x0800a937
 800a8b0:	0800a937 	.word	0x0800a937
 800a8b4:	0800a937 	.word	0x0800a937
 800a8b8:	0800a937 	.word	0x0800a937
 800a8bc:	0800a937 	.word	0x0800a937
 800a8c0:	0800a937 	.word	0x0800a937
 800a8c4:	0800a937 	.word	0x0800a937
 800a8c8:	0800a929 	.word	0x0800a929
 800a8cc:	2b40      	cmp	r3, #64	@ 0x40
 800a8ce:	d02e      	beq.n	800a92e <UART_SetConfig+0x8aa>
 800a8d0:	e031      	b.n	800a936 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d2:	f7fc fcc5 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 800a8d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8d8:	e033      	b.n	800a942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8da:	f7fc fcd7 	bl	800728c <HAL_RCC_GetPCLK2Freq>
 800a8de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8e0:	e02f      	b.n	800a942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fd ff48 	bl	800877c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f0:	e027      	b.n	800a942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f2:	f107 0318 	add.w	r3, r7, #24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe f894 	bl	8008a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e01f      	b.n	800a942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a902:	4b2d      	ldr	r3, [pc, #180]	@ (800a9b8 <UART_SetConfig+0x934>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d009      	beq.n	800a922 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a90e:	4b2a      	ldr	r3, [pc, #168]	@ (800a9b8 <UART_SetConfig+0x934>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	08db      	lsrs	r3, r3, #3
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	4a24      	ldr	r2, [pc, #144]	@ (800a9ac <UART_SetConfig+0x928>)
 800a91a:	fa22 f303 	lsr.w	r3, r2, r3
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a920:	e00f      	b.n	800a942 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a922:	4b22      	ldr	r3, [pc, #136]	@ (800a9ac <UART_SetConfig+0x928>)
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a926:	e00c      	b.n	800a942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a928:	4b21      	ldr	r3, [pc, #132]	@ (800a9b0 <UART_SetConfig+0x92c>)
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92c:	e009      	b.n	800a942 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a92e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a934:	e005      	b.n	800a942 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 80e7 	beq.w	800ab18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	4a19      	ldr	r2, [pc, #100]	@ (800a9b4 <UART_SetConfig+0x930>)
 800a950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a954:	461a      	mov	r2, r3
 800a956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a958:	fbb3 f3f2 	udiv	r3, r3, r2
 800a95c:	005a      	lsls	r2, r3, #1
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	085b      	lsrs	r3, r3, #1
 800a964:	441a      	add	r2, r3
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	2b0f      	cmp	r3, #15
 800a974:	d916      	bls.n	800a9a4 <UART_SetConfig+0x920>
 800a976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a97c:	d212      	bcs.n	800a9a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a980:	b29b      	uxth	r3, r3
 800a982:	f023 030f 	bic.w	r3, r3, #15
 800a986:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98a:	085b      	lsrs	r3, r3, #1
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	b29a      	uxth	r2, r3
 800a994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a996:	4313      	orrs	r3, r2
 800a998:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a9a0:	60da      	str	r2, [r3, #12]
 800a9a2:	e0b9      	b.n	800ab18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9aa:	e0b5      	b.n	800ab18 <UART_SetConfig+0xa94>
 800a9ac:	03d09000 	.word	0x03d09000
 800a9b0:	003d0900 	.word	0x003d0900
 800a9b4:	0801cdf4 	.word	0x0801cdf4
 800a9b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	dc49      	bgt.n	800aa58 <UART_SetConfig+0x9d4>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	db7c      	blt.n	800aac2 <UART_SetConfig+0xa3e>
 800a9c8:	2b20      	cmp	r3, #32
 800a9ca:	d87a      	bhi.n	800aac2 <UART_SetConfig+0xa3e>
 800a9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d4 <UART_SetConfig+0x950>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aa67 	.word	0x0800aa67
 800a9dc:	0800aac3 	.word	0x0800aac3
 800a9e0:	0800aac3 	.word	0x0800aac3
 800a9e4:	0800aa6f 	.word	0x0800aa6f
 800a9e8:	0800aac3 	.word	0x0800aac3
 800a9ec:	0800aac3 	.word	0x0800aac3
 800a9f0:	0800aac3 	.word	0x0800aac3
 800a9f4:	0800aa7f 	.word	0x0800aa7f
 800a9f8:	0800aac3 	.word	0x0800aac3
 800a9fc:	0800aac3 	.word	0x0800aac3
 800aa00:	0800aac3 	.word	0x0800aac3
 800aa04:	0800aac3 	.word	0x0800aac3
 800aa08:	0800aac3 	.word	0x0800aac3
 800aa0c:	0800aac3 	.word	0x0800aac3
 800aa10:	0800aac3 	.word	0x0800aac3
 800aa14:	0800aa8f 	.word	0x0800aa8f
 800aa18:	0800aac3 	.word	0x0800aac3
 800aa1c:	0800aac3 	.word	0x0800aac3
 800aa20:	0800aac3 	.word	0x0800aac3
 800aa24:	0800aac3 	.word	0x0800aac3
 800aa28:	0800aac3 	.word	0x0800aac3
 800aa2c:	0800aac3 	.word	0x0800aac3
 800aa30:	0800aac3 	.word	0x0800aac3
 800aa34:	0800aac3 	.word	0x0800aac3
 800aa38:	0800aac3 	.word	0x0800aac3
 800aa3c:	0800aac3 	.word	0x0800aac3
 800aa40:	0800aac3 	.word	0x0800aac3
 800aa44:	0800aac3 	.word	0x0800aac3
 800aa48:	0800aac3 	.word	0x0800aac3
 800aa4c:	0800aac3 	.word	0x0800aac3
 800aa50:	0800aac3 	.word	0x0800aac3
 800aa54:	0800aab5 	.word	0x0800aab5
 800aa58:	2b40      	cmp	r3, #64	@ 0x40
 800aa5a:	d02e      	beq.n	800aaba <UART_SetConfig+0xa36>
 800aa5c:	e031      	b.n	800aac2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa5e:	f7fc fbff 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 800aa62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa64:	e033      	b.n	800aace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa66:	f7fc fc11 	bl	800728c <HAL_RCC_GetPCLK2Freq>
 800aa6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa6c:	e02f      	b.n	800aace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fd fe82 	bl	800877c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa7c:	e027      	b.n	800aace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa7e:	f107 0318 	add.w	r3, r7, #24
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fd ffce 	bl	8008a24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e01f      	b.n	800aace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ab44 <UART_SetConfig+0xac0>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d009      	beq.n	800aaae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa9a:	4b2a      	ldr	r3, [pc, #168]	@ (800ab44 <UART_SetConfig+0xac0>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	08db      	lsrs	r3, r3, #3
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	4a28      	ldr	r2, [pc, #160]	@ (800ab48 <UART_SetConfig+0xac4>)
 800aaa6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaac:	e00f      	b.n	800aace <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aaae:	4b26      	ldr	r3, [pc, #152]	@ (800ab48 <UART_SetConfig+0xac4>)
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab2:	e00c      	b.n	800aace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aab4:	4b25      	ldr	r3, [pc, #148]	@ (800ab4c <UART_SetConfig+0xac8>)
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab8:	e009      	b.n	800aace <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac0:	e005      	b.n	800aace <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aacc:	bf00      	nop
    }

    if (pclk != 0U)
 800aace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d021      	beq.n	800ab18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab50 <UART_SetConfig+0xacc>)
 800aada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aade:	461a      	mov	r2, r3
 800aae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	441a      	add	r2, r3
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	2b0f      	cmp	r3, #15
 800aafc:	d909      	bls.n	800ab12 <UART_SetConfig+0xa8e>
 800aafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab04:	d205      	bcs.n	800ab12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	e002      	b.n	800ab18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	2200      	movs	r2, #0
 800ab32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3748      	adds	r7, #72	@ 0x48
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab42:	bf00      	nop
 800ab44:	58024400 	.word	0x58024400
 800ab48:	03d09000 	.word	0x03d09000
 800ab4c:	003d0900 	.word	0x003d0900
 800ab50:	0801cdf4 	.word	0x0801cdf4

0800ab54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab60:	f003 0308 	and.w	r3, r3, #8
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00a      	beq.n	800ab7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba4:	f003 0302 	and.w	r3, r3, #2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	430a      	orrs	r2, r1
 800abe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe8:	f003 0310 	and.w	r3, r3, #16
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01a      	beq.n	800ac6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac52:	d10a      	bne.n	800ac6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	605a      	str	r2, [r3, #4]
  }
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b098      	sub	sp, #96	@ 0x60
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aca8:	f7f7 fc6a 	bl	8002580 <HAL_GetTick>
 800acac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0308 	and.w	r3, r3, #8
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d12f      	bne.n	800ad1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acc4:	2200      	movs	r2, #0
 800acc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f88e 	bl	800adec <UART_WaitOnFlagUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d022      	beq.n	800ad1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ace4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acea:	653b      	str	r3, [r7, #80]	@ 0x50
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800acf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acfc:	e841 2300 	strex	r3, r2, [r1]
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e6      	bne.n	800acd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e063      	b.n	800ade4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0304 	and.w	r3, r3, #4
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	d149      	bne.n	800adbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad32:	2200      	movs	r2, #0
 800ad34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f857 	bl	800adec <UART_WaitOnFlagUntilTimeout>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d03c      	beq.n	800adbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	623b      	str	r3, [r7, #32]
   return(result);
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad62:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e6      	bne.n	800ad44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f023 0301 	bic.w	r3, r3, #1
 800ad8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad96:	61fa      	str	r2, [r7, #28]
 800ad98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	69b9      	ldr	r1, [r7, #24]
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	617b      	str	r3, [r7, #20]
   return(result);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e5      	bne.n	800ad76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e012      	b.n	800ade4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3758      	adds	r7, #88	@ 0x58
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	4613      	mov	r3, r2
 800adfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adfc:	e04f      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae04:	d04b      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae06:	f7f7 fbbb 	bl	8002580 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d302      	bcc.n	800ae1c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e04e      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 0304 	and.w	r3, r3, #4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d037      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2b80      	cmp	r3, #128	@ 0x80
 800ae32:	d034      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2b40      	cmp	r3, #64	@ 0x40
 800ae38:	d031      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d110      	bne.n	800ae6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f921 	bl	800b098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2208      	movs	r2, #8
 800ae5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e029      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae78:	d111      	bne.n	800ae9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 f907 	bl	800b098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e00f      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69da      	ldr	r2, [r3, #28]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	4013      	ands	r3, r2
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	bf0c      	ite	eq
 800aeae:	2301      	moveq	r3, #1
 800aeb0:	2300      	movne	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d0a0      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
	...

0800aec8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b096      	sub	sp, #88	@ 0x58
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	88fa      	ldrh	r2, [r7, #6]
 800aee0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2222      	movs	r2, #34	@ 0x22
 800aef0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d02d      	beq.n	800af5a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af04:	4a40      	ldr	r2, [pc, #256]	@ (800b008 <UART_Start_Receive_DMA+0x140>)
 800af06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af0e:	4a3f      	ldr	r2, [pc, #252]	@ (800b00c <UART_Start_Receive_DMA+0x144>)
 800af10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af18:	4a3d      	ldr	r2, [pc, #244]	@ (800b010 <UART_Start_Receive_DMA+0x148>)
 800af1a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af22:	2200      	movs	r2, #0
 800af24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3324      	adds	r3, #36	@ 0x24
 800af32:	4619      	mov	r1, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af38:	461a      	mov	r2, r3
 800af3a:	88fb      	ldrh	r3, [r7, #6]
 800af3c:	f7f7 ff88 	bl	8002e50 <HAL_DMA_Start_IT>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d009      	beq.n	800af5a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2210      	movs	r2, #16
 800af4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e051      	b.n	800affe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d018      	beq.n	800af94 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af76:	657b      	str	r3, [r7, #84]	@ 0x54
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af82:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800af8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e6      	bne.n	800af62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9e:	e853 3f00 	ldrex	r3, [r3]
 800afa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa6:	f043 0301 	orr.w	r3, r3, #1
 800afaa:	653b      	str	r3, [r7, #80]	@ 0x50
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3308      	adds	r3, #8
 800afb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800afb4:	637a      	str	r2, [r7, #52]	@ 0x34
 800afb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800afba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800afc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e5      	bne.n	800af94 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3308      	adds	r3, #8
 800afce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	613b      	str	r3, [r7, #16]
   return(result);
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3308      	adds	r3, #8
 800afe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800afe8:	623a      	str	r2, [r7, #32]
 800afea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afec:	69f9      	ldr	r1, [r7, #28]
 800afee:	6a3a      	ldr	r2, [r7, #32]
 800aff0:	e841 2300 	strex	r3, r2, [r1]
 800aff4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e5      	bne.n	800afc8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3758      	adds	r7, #88	@ 0x58
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	0800b217 	.word	0x0800b217
 800b00c:	0800b33f 	.word	0x0800b33f
 800b010:	0800b37d 	.word	0x0800b37d

0800b014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b014:	b480      	push	{r7}
 800b016:	b08f      	sub	sp, #60	@ 0x3c
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	e853 3f00 	ldrex	r3, [r3]
 800b028:	61fb      	str	r3, [r7, #28]
   return(result);
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b030:	637b      	str	r3, [r7, #52]	@ 0x34
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b03c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e6      	bne.n	800b01c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3308      	adds	r3, #8
 800b054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	e853 3f00 	ldrex	r3, [r3]
 800b05c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b064:	633b      	str	r3, [r7, #48]	@ 0x30
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3308      	adds	r3, #8
 800b06c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b06e:	61ba      	str	r2, [r7, #24]
 800b070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	6979      	ldr	r1, [r7, #20]
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	613b      	str	r3, [r7, #16]
   return(result);
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e5      	bne.n	800b04e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2220      	movs	r2, #32
 800b086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b08a:	bf00      	nop
 800b08c:	373c      	adds	r7, #60	@ 0x3c
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
	...

0800b098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b098:	b480      	push	{r7}
 800b09a:	b095      	sub	sp, #84	@ 0x54
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3308      	adds	r3, #8
 800b0d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e2:	69fa      	ldr	r2, [r7, #28]
 800b0e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b160 <UART_EndRxTransfer+0xc8>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e5      	bne.n	800b0d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d118      	bne.n	800b140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	e853 3f00 	ldrex	r3, [r3]
 800b11a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f023 0310 	bic.w	r3, r3, #16
 800b122:	647b      	str	r3, [r7, #68]	@ 0x44
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b12c:	61bb      	str	r3, [r7, #24]
 800b12e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b130:	6979      	ldr	r1, [r7, #20]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	e841 2300 	strex	r3, r2, [r1]
 800b138:	613b      	str	r3, [r7, #16]
   return(result);
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1e6      	bne.n	800b10e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2220      	movs	r2, #32
 800b144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b154:	bf00      	nop
 800b156:	3754      	adds	r7, #84	@ 0x54
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	effffffe 	.word	0xeffffffe

0800b164 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b090      	sub	sp, #64	@ 0x40
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b170:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b17a:	d037      	beq.n	800b1ec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b17e:	2200      	movs	r2, #0
 800b180:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3308      	adds	r3, #8
 800b18a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	e853 3f00 	ldrex	r3, [r3]
 800b192:	623b      	str	r3, [r7, #32]
   return(result);
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b19a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1a4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1ac:	e841 2300 	strex	r3, r2, [r1]
 800b1b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e5      	bne.n	800b184 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	e853 3f00 	ldrex	r3, [r3]
 800b1c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d6:	61fb      	str	r3, [r7, #28]
 800b1d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1da:	69b9      	ldr	r1, [r7, #24]
 800b1dc:	69fa      	ldr	r2, [r7, #28]
 800b1de:	e841 2300 	strex	r3, r2, [r1]
 800b1e2:	617b      	str	r3, [r7, #20]
   return(result);
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1e6      	bne.n	800b1b8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ea:	e002      	b.n	800b1f2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b1ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b1ee:	f7fe ff0b 	bl	800a008 <HAL_UART_TxCpltCallback>
}
 800b1f2:	bf00      	nop
 800b1f4:	3740      	adds	r7, #64	@ 0x40
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b206:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7fe ff07 	bl	800a01c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b09c      	sub	sp, #112	@ 0x70
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b222:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b22c:	d071      	beq.n	800b312 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b230:	2200      	movs	r2, #0
 800b232:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b24a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	461a      	mov	r2, r3
 800b252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b254:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b256:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b25a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e6      	bne.n	800b236 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3308      	adds	r3, #8
 800b26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27a:	f023 0301 	bic.w	r3, r3, #1
 800b27e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3308      	adds	r3, #8
 800b286:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b288:	647a      	str	r2, [r7, #68]	@ 0x44
 800b28a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b290:	e841 2300 	strex	r3, r2, [r1]
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e5      	bne.n	800b268 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b29c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2b2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c4:	e841 2300 	strex	r3, r2, [r1]
 800b2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1e5      	bne.n	800b29c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d118      	bne.n	800b312 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f023 0310 	bic.w	r3, r3, #16
 800b2f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2fe:	61fb      	str	r3, [r7, #28]
 800b300:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	69b9      	ldr	r1, [r7, #24]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	617b      	str	r3, [r7, #20]
   return(result);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e6      	bne.n	800b2e0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b314:	2200      	movs	r2, #0
 800b316:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b31a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d107      	bne.n	800b330 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b326:	4619      	mov	r1, r3
 800b328:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b32a:	f7fe fe9f 	bl	800a06c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b32e:	e002      	b.n	800b336 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b330:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b332:	f7fe fe7d 	bl	800a030 <HAL_UART_RxCpltCallback>
}
 800b336:	bf00      	nop
 800b338:	3770      	adds	r7, #112	@ 0x70
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2201      	movs	r2, #1
 800b350:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b356:	2b01      	cmp	r3, #1
 800b358:	d109      	bne.n	800b36e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b360:	085b      	lsrs	r3, r3, #1
 800b362:	b29b      	uxth	r3, r3
 800b364:	4619      	mov	r1, r3
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7fe fe80 	bl	800a06c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b36c:	e002      	b.n	800b374 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7fe fe68 	bl	800a044 <HAL_UART_RxHalfCpltCallback>
}
 800b374:	bf00      	nop
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b388:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b390:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b398:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3a4:	2b80      	cmp	r3, #128	@ 0x80
 800b3a6:	d109      	bne.n	800b3bc <UART_DMAError+0x40>
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	2b21      	cmp	r3, #33	@ 0x21
 800b3ac:	d106      	bne.n	800b3bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b3b6:	6978      	ldr	r0, [r7, #20]
 800b3b8:	f7ff fe2c 	bl	800b014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c6:	2b40      	cmp	r3, #64	@ 0x40
 800b3c8:	d109      	bne.n	800b3de <UART_DMAError+0x62>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b22      	cmp	r3, #34	@ 0x22
 800b3ce:	d106      	bne.n	800b3de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b3d8:	6978      	ldr	r0, [r7, #20]
 800b3da:	f7ff fe5d 	bl	800b098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3e4:	f043 0210 	orr.w	r2, r3, #16
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3ee:	6978      	ldr	r0, [r7, #20]
 800b3f0:	f7fe fe32 	bl	800a058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7fe fe1c 	bl	800a058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	e853 3f00 	ldrex	r3, [r3]
 800b43c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b444:	61fb      	str	r3, [r7, #28]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	61bb      	str	r3, [r7, #24]
 800b450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b452:	6979      	ldr	r1, [r7, #20]
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	e841 2300 	strex	r3, r2, [r1]
 800b45a:	613b      	str	r3, [r7, #16]
   return(result);
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1e6      	bne.n	800b430 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2220      	movs	r2, #32
 800b466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fe fdc9 	bl	800a008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b476:	bf00      	nop
 800b478:	3720      	adds	r7, #32
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b486:	bf00      	nop
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b492:	b480      	push	{r7}
 800b494:	b083      	sub	sp, #12
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b49a:	bf00      	nop
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b083      	sub	sp, #12
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4ae:	bf00      	nop
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d101      	bne.n	800b4d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e027      	b.n	800b520 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2224      	movs	r2, #36	@ 0x24
 800b4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0201 	bic.w	r2, r2, #1
 800b4f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b4fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d101      	bne.n	800b544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b540:	2302      	movs	r3, #2
 800b542:	e02d      	b.n	800b5a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2224      	movs	r2, #36	@ 0x24
 800b550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f022 0201 	bic.w	r2, r2, #1
 800b56a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	430a      	orrs	r2, r1
 800b57e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f84f 	bl	800b624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2220      	movs	r2, #32
 800b592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d101      	bne.n	800b5c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5bc:	2302      	movs	r3, #2
 800b5be:	e02d      	b.n	800b61c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2224      	movs	r2, #36	@ 0x24
 800b5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f022 0201 	bic.w	r2, r2, #1
 800b5e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f811 	bl	800b624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2220      	movs	r2, #32
 800b60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b630:	2b00      	cmp	r3, #0
 800b632:	d108      	bne.n	800b646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b644:	e031      	b.n	800b6aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b646:	2310      	movs	r3, #16
 800b648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b64a:	2310      	movs	r3, #16
 800b64c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	0e5b      	lsrs	r3, r3, #25
 800b656:	b2db      	uxtb	r3, r3
 800b658:	f003 0307 	and.w	r3, r3, #7
 800b65c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	0f5b      	lsrs	r3, r3, #29
 800b666:	b2db      	uxtb	r3, r3
 800b668:	f003 0307 	and.w	r3, r3, #7
 800b66c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	7b3a      	ldrb	r2, [r7, #12]
 800b672:	4911      	ldr	r1, [pc, #68]	@ (800b6b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b674:	5c8a      	ldrb	r2, [r1, r2]
 800b676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b67a:	7b3a      	ldrb	r2, [r7, #12]
 800b67c:	490f      	ldr	r1, [pc, #60]	@ (800b6bc <UARTEx_SetNbDataToProcess+0x98>)
 800b67e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b680:	fb93 f3f2 	sdiv	r3, r3, r2
 800b684:	b29a      	uxth	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	7b7a      	ldrb	r2, [r7, #13]
 800b690:	4909      	ldr	r1, [pc, #36]	@ (800b6b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b692:	5c8a      	ldrb	r2, [r1, r2]
 800b694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b698:	7b7a      	ldrb	r2, [r7, #13]
 800b69a:	4908      	ldr	r1, [pc, #32]	@ (800b6bc <UARTEx_SetNbDataToProcess+0x98>)
 800b69c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b69e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	0801ce0c 	.word	0x0801ce0c
 800b6bc:	0801ce14 	.word	0x0801ce14

0800b6c0 <__NVIC_SetPriority>:
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	6039      	str	r1, [r7, #0]
 800b6ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b6cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	db0a      	blt.n	800b6ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	490c      	ldr	r1, [pc, #48]	@ (800b70c <__NVIC_SetPriority+0x4c>)
 800b6da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6de:	0112      	lsls	r2, r2, #4
 800b6e0:	b2d2      	uxtb	r2, r2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b6e8:	e00a      	b.n	800b700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	4908      	ldr	r1, [pc, #32]	@ (800b710 <__NVIC_SetPriority+0x50>)
 800b6f0:	88fb      	ldrh	r3, [r7, #6]
 800b6f2:	f003 030f 	and.w	r3, r3, #15
 800b6f6:	3b04      	subs	r3, #4
 800b6f8:	0112      	lsls	r2, r2, #4
 800b6fa:	b2d2      	uxtb	r2, r2
 800b6fc:	440b      	add	r3, r1
 800b6fe:	761a      	strb	r2, [r3, #24]
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	e000e100 	.word	0xe000e100
 800b710:	e000ed00 	.word	0xe000ed00

0800b714 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b718:	4b05      	ldr	r3, [pc, #20]	@ (800b730 <SysTick_Handler+0x1c>)
 800b71a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b71c:	f002 f982 	bl	800da24 <xTaskGetSchedulerState>
 800b720:	4603      	mov	r3, r0
 800b722:	2b01      	cmp	r3, #1
 800b724:	d001      	beq.n	800b72a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b726:	f000 fd9f 	bl	800c268 <xPortSysTickHandler>
  }
}
 800b72a:	bf00      	nop
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	e000e010 	.word	0xe000e010

0800b734 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b738:	2100      	movs	r1, #0
 800b73a:	f06f 0004 	mvn.w	r0, #4
 800b73e:	f7ff ffbf 	bl	800b6c0 <__NVIC_SetPriority>
#endif
}
 800b742:	bf00      	nop
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b74e:	f3ef 8305 	mrs	r3, IPSR
 800b752:	603b      	str	r3, [r7, #0]
  return(result);
 800b754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b75a:	f06f 0305 	mvn.w	r3, #5
 800b75e:	607b      	str	r3, [r7, #4]
 800b760:	e00c      	b.n	800b77c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b762:	4b0a      	ldr	r3, [pc, #40]	@ (800b78c <osKernelInitialize+0x44>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d105      	bne.n	800b776 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b76a:	4b08      	ldr	r3, [pc, #32]	@ (800b78c <osKernelInitialize+0x44>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b770:	2300      	movs	r3, #0
 800b772:	607b      	str	r3, [r7, #4]
 800b774:	e002      	b.n	800b77c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b77a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b77c:	687b      	ldr	r3, [r7, #4]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	24009c68 	.word	0x24009c68

0800b790 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b796:	f3ef 8305 	mrs	r3, IPSR
 800b79a:	603b      	str	r3, [r7, #0]
  return(result);
 800b79c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b7a2:	f06f 0305 	mvn.w	r3, #5
 800b7a6:	607b      	str	r3, [r7, #4]
 800b7a8:	e010      	b.n	800b7cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d8 <osKernelStart+0x48>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d109      	bne.n	800b7c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b7b2:	f7ff ffbf 	bl	800b734 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b7b6:	4b08      	ldr	r3, [pc, #32]	@ (800b7d8 <osKernelStart+0x48>)
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b7bc:	f001 fcbc 	bl	800d138 <vTaskStartScheduler>
      stat = osOK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	607b      	str	r3, [r7, #4]
 800b7c4:	e002      	b.n	800b7cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b7c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b7cc:	687b      	ldr	r3, [r7, #4]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	24009c68 	.word	0x24009c68

0800b7dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	@ 0x38
 800b7e0:	af04      	add	r7, sp, #16
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ec:	f3ef 8305 	mrs	r3, IPSR
 800b7f0:	617b      	str	r3, [r7, #20]
  return(result);
 800b7f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d17e      	bne.n	800b8f6 <osThreadNew+0x11a>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d07b      	beq.n	800b8f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b7fe:	2380      	movs	r3, #128	@ 0x80
 800b800:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b802:	2318      	movs	r3, #24
 800b804:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b80a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b80e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d045      	beq.n	800b8a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <osThreadNew+0x48>
        name = attr->name;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d008      	beq.n	800b84a <osThreadNew+0x6e>
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	2b38      	cmp	r3, #56	@ 0x38
 800b83c:	d805      	bhi.n	800b84a <osThreadNew+0x6e>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <osThreadNew+0x72>
        return (NULL);
 800b84a:	2300      	movs	r3, #0
 800b84c:	e054      	b.n	800b8f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	089b      	lsrs	r3, r3, #2
 800b85c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00e      	beq.n	800b884 <osThreadNew+0xa8>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	2b5b      	cmp	r3, #91	@ 0x5b
 800b86c:	d90a      	bls.n	800b884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b872:	2b00      	cmp	r3, #0
 800b874:	d006      	beq.n	800b884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <osThreadNew+0xa8>
        mem = 1;
 800b87e:	2301      	movs	r3, #1
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	e010      	b.n	800b8a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10c      	bne.n	800b8a6 <osThreadNew+0xca>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d108      	bne.n	800b8a6 <osThreadNew+0xca>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d104      	bne.n	800b8a6 <osThreadNew+0xca>
          mem = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61bb      	str	r3, [r7, #24]
 800b8a0:	e001      	b.n	800b8a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d110      	bne.n	800b8ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b8b4:	9202      	str	r2, [sp, #8]
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	6a3a      	ldr	r2, [r7, #32]
 800b8c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f001 fa5c 	bl	800cd80 <xTaskCreateStatic>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	613b      	str	r3, [r7, #16]
 800b8cc:	e013      	b.n	800b8f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d110      	bne.n	800b8f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	f107 0310 	add.w	r3, r7, #16
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f001 faaa 	bl	800ce40 <xTaskCreate>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d001      	beq.n	800b8f6 <osThreadNew+0x11a>
            hTask = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b8f6:	693b      	ldr	r3, [r7, #16]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3728      	adds	r7, #40	@ 0x28
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b908:	f3ef 8305 	mrs	r3, IPSR
 800b90c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b90e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <osDelay+0x1c>
    stat = osErrorISR;
 800b914:	f06f 0305 	mvn.w	r3, #5
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	e007      	b.n	800b92c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d002      	beq.n	800b92c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fbd0 	bl	800d0cc <vTaskDelay>
    }
  }

  return (stat);
 800b92c:	68fb      	ldr	r3, [r7, #12]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4a07      	ldr	r2, [pc, #28]	@ (800b964 <vApplicationGetIdleTaskMemory+0x2c>)
 800b948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4a06      	ldr	r2, [pc, #24]	@ (800b968 <vApplicationGetIdleTaskMemory+0x30>)
 800b94e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2280      	movs	r2, #128	@ 0x80
 800b954:	601a      	str	r2, [r3, #0]
}
 800b956:	bf00      	nop
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	24009c6c 	.word	0x24009c6c
 800b968:	24009cc8 	.word	0x24009cc8

0800b96c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4a07      	ldr	r2, [pc, #28]	@ (800b998 <vApplicationGetTimerTaskMemory+0x2c>)
 800b97c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	4a06      	ldr	r2, [pc, #24]	@ (800b99c <vApplicationGetTimerTaskMemory+0x30>)
 800b982:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b98a:	601a      	str	r2, [r3, #0]
}
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	24009ec8 	.word	0x24009ec8
 800b99c:	24009f24 	.word	0x24009f24

0800b9a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08a      	sub	sp, #40	@ 0x28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9ac:	f001 fc2c 	bl	800d208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9b0:	4b5c      	ldr	r3, [pc, #368]	@ (800bb24 <pvPortMalloc+0x184>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9b8:	f000 f924 	bl	800bc04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9bc:	4b5a      	ldr	r3, [pc, #360]	@ (800bb28 <pvPortMalloc+0x188>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f040 8095 	bne.w	800baf4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d01e      	beq.n	800ba0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d015      	beq.n	800ba0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f023 0307 	bic.w	r3, r3, #7
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <pvPortMalloc+0x6e>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	617b      	str	r3, [r7, #20]
}
 800ba08:	bf00      	nop
 800ba0a:	bf00      	nop
 800ba0c:	e7fd      	b.n	800ba0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d06f      	beq.n	800baf4 <pvPortMalloc+0x154>
 800ba14:	4b45      	ldr	r3, [pc, #276]	@ (800bb2c <pvPortMalloc+0x18c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d86a      	bhi.n	800baf4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba1e:	4b44      	ldr	r3, [pc, #272]	@ (800bb30 <pvPortMalloc+0x190>)
 800ba20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba22:	4b43      	ldr	r3, [pc, #268]	@ (800bb30 <pvPortMalloc+0x190>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba28:	e004      	b.n	800ba34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d903      	bls.n	800ba46 <pvPortMalloc+0xa6>
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f1      	bne.n	800ba2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba46:	4b37      	ldr	r3, [pc, #220]	@ (800bb24 <pvPortMalloc+0x184>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d051      	beq.n	800baf4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2208      	movs	r2, #8
 800ba56:	4413      	add	r3, r2
 800ba58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	2308      	movs	r3, #8
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d920      	bls.n	800bab4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4413      	add	r3, r2
 800ba78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	f003 0307 	and.w	r3, r3, #7
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <pvPortMalloc+0xfc>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	613b      	str	r3, [r7, #16]
}
 800ba96:	bf00      	nop
 800ba98:	bf00      	nop
 800ba9a:	e7fd      	b.n	800ba98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800baa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baae:	69b8      	ldr	r0, [r7, #24]
 800bab0:	f000 f90a 	bl	800bcc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bab4:	4b1d      	ldr	r3, [pc, #116]	@ (800bb2c <pvPortMalloc+0x18c>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	4a1b      	ldr	r2, [pc, #108]	@ (800bb2c <pvPortMalloc+0x18c>)
 800bac0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bac2:	4b1a      	ldr	r3, [pc, #104]	@ (800bb2c <pvPortMalloc+0x18c>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	4b1b      	ldr	r3, [pc, #108]	@ (800bb34 <pvPortMalloc+0x194>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d203      	bcs.n	800bad6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bace:	4b17      	ldr	r3, [pc, #92]	@ (800bb2c <pvPortMalloc+0x18c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a18      	ldr	r2, [pc, #96]	@ (800bb34 <pvPortMalloc+0x194>)
 800bad4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	4b13      	ldr	r3, [pc, #76]	@ (800bb28 <pvPortMalloc+0x188>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	431a      	orrs	r2, r3
 800bae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800baea:	4b13      	ldr	r3, [pc, #76]	@ (800bb38 <pvPortMalloc+0x198>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	4a11      	ldr	r2, [pc, #68]	@ (800bb38 <pvPortMalloc+0x198>)
 800baf2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800baf4:	f001 fb96 	bl	800d224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <pvPortMalloc+0x17a>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	60fb      	str	r3, [r7, #12]
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	e7fd      	b.n	800bb16 <pvPortMalloc+0x176>
	return pvReturn;
 800bb1a:	69fb      	ldr	r3, [r7, #28]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3728      	adds	r7, #40	@ 0x28
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	2400df2c 	.word	0x2400df2c
 800bb28:	2400df40 	.word	0x2400df40
 800bb2c:	2400df30 	.word	0x2400df30
 800bb30:	2400df24 	.word	0x2400df24
 800bb34:	2400df34 	.word	0x2400df34
 800bb38:	2400df38 	.word	0x2400df38

0800bb3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d04f      	beq.n	800bbee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb4e:	2308      	movs	r3, #8
 800bb50:	425b      	negs	r3, r3
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	4413      	add	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	4b25      	ldr	r3, [pc, #148]	@ (800bbf8 <vPortFree+0xbc>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4013      	ands	r3, r2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10b      	bne.n	800bb82 <vPortFree+0x46>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60fb      	str	r3, [r7, #12]
}
 800bb7c:	bf00      	nop
 800bb7e:	bf00      	nop
 800bb80:	e7fd      	b.n	800bb7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00b      	beq.n	800bba2 <vPortFree+0x66>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	60bb      	str	r3, [r7, #8]
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	e7fd      	b.n	800bb9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	4b14      	ldr	r3, [pc, #80]	@ (800bbf8 <vPortFree+0xbc>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01e      	beq.n	800bbee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d11a      	bne.n	800bbee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf8 <vPortFree+0xbc>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	43db      	mvns	r3, r3
 800bbc2:	401a      	ands	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbc8:	f001 fb1e 	bl	800d208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <vPortFree+0xc0>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	4a09      	ldr	r2, [pc, #36]	@ (800bbfc <vPortFree+0xc0>)
 800bbd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbda:	6938      	ldr	r0, [r7, #16]
 800bbdc:	f000 f874 	bl	800bcc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbe0:	4b07      	ldr	r3, [pc, #28]	@ (800bc00 <vPortFree+0xc4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	4a06      	ldr	r2, [pc, #24]	@ (800bc00 <vPortFree+0xc4>)
 800bbe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbea:	f001 fb1b 	bl	800d224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbee:	bf00      	nop
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	2400df40 	.word	0x2400df40
 800bbfc:	2400df30 	.word	0x2400df30
 800bc00:	2400df3c 	.word	0x2400df3c

0800bc04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bc0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc10:	4b27      	ldr	r3, [pc, #156]	@ (800bcb0 <prvHeapInit+0xac>)
 800bc12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f003 0307 	and.w	r3, r3, #7
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3307      	adds	r3, #7
 800bc22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0307 	bic.w	r3, r3, #7
 800bc2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	4a1f      	ldr	r2, [pc, #124]	@ (800bcb0 <prvHeapInit+0xac>)
 800bc34:	4413      	add	r3, r2
 800bc36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bcb4 <prvHeapInit+0xb0>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc42:	4b1c      	ldr	r3, [pc, #112]	@ (800bcb4 <prvHeapInit+0xb0>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc50:	2208      	movs	r2, #8
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	1a9b      	subs	r3, r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 0307 	bic.w	r3, r3, #7
 800bc5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4a15      	ldr	r2, [pc, #84]	@ (800bcb8 <prvHeapInit+0xb4>)
 800bc64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc66:	4b14      	ldr	r3, [pc, #80]	@ (800bcb8 <prvHeapInit+0xb4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc6e:	4b12      	ldr	r3, [pc, #72]	@ (800bcb8 <prvHeapInit+0xb4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc84:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb8 <prvHeapInit+0xb4>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4a0a      	ldr	r2, [pc, #40]	@ (800bcbc <prvHeapInit+0xb8>)
 800bc92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	4a09      	ldr	r2, [pc, #36]	@ (800bcc0 <prvHeapInit+0xbc>)
 800bc9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc9c:	4b09      	ldr	r3, [pc, #36]	@ (800bcc4 <prvHeapInit+0xc0>)
 800bc9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bca2:	601a      	str	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	2400a324 	.word	0x2400a324
 800bcb4:	2400df24 	.word	0x2400df24
 800bcb8:	2400df2c 	.word	0x2400df2c
 800bcbc:	2400df34 	.word	0x2400df34
 800bcc0:	2400df30 	.word	0x2400df30
 800bcc4:	2400df40 	.word	0x2400df40

0800bcc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcd0:	4b28      	ldr	r3, [pc, #160]	@ (800bd74 <prvInsertBlockIntoFreeList+0xac>)
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	e002      	b.n	800bcdc <prvInsertBlockIntoFreeList+0x14>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d8f7      	bhi.n	800bcd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d108      	bne.n	800bd0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	441a      	add	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	441a      	add	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d118      	bne.n	800bd50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b15      	ldr	r3, [pc, #84]	@ (800bd78 <prvInsertBlockIntoFreeList+0xb0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d00d      	beq.n	800bd46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	441a      	add	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	e008      	b.n	800bd58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd46:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <prvInsertBlockIntoFreeList+0xb0>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	e003      	b.n	800bd58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d002      	beq.n	800bd66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd66:	bf00      	nop
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	2400df24 	.word	0x2400df24
 800bd78:	2400df2c 	.word	0x2400df2c

0800bd7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f103 0208 	add.w	r2, r3, #8
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f103 0208 	add.w	r2, r3, #8
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f103 0208 	add.w	r2, r3, #8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bdca:	bf00      	nop
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b085      	sub	sp, #20
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	601a      	str	r2, [r3, #0]
}
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be1e:	b480      	push	{r7}
 800be20:	b085      	sub	sp, #20
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be34:	d103      	bne.n	800be3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	e00c      	b.n	800be58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3308      	adds	r3, #8
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	e002      	b.n	800be4c <vListInsert+0x2e>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	429a      	cmp	r2, r3
 800be56:	d2f6      	bcs.n	800be46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	601a      	str	r2, [r3, #0]
}
 800be84:	bf00      	nop
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	6892      	ldr	r2, [r2, #8]
 800bea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	6852      	ldr	r2, [r2, #4]
 800beb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d103      	bne.n	800bec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	1e5a      	subs	r2, r3, #1
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3b04      	subs	r3, #4
 800bef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800befc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3b04      	subs	r3, #4
 800bf02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f023 0201 	bic.w	r2, r3, #1
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3b04      	subs	r3, #4
 800bf12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf14:	4a0c      	ldr	r2, [pc, #48]	@ (800bf48 <pxPortInitialiseStack+0x64>)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3b14      	subs	r3, #20
 800bf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	3b04      	subs	r3, #4
 800bf2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f06f 0202 	mvn.w	r2, #2
 800bf32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3b20      	subs	r3, #32
 800bf38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	0800bf4d 	.word	0x0800bf4d

0800bf4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf56:	4b13      	ldr	r3, [pc, #76]	@ (800bfa4 <prvTaskExitError+0x58>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf5e:	d00b      	beq.n	800bf78 <prvTaskExitError+0x2c>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60fb      	str	r3, [r7, #12]
}
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
 800bf76:	e7fd      	b.n	800bf74 <prvTaskExitError+0x28>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	60bb      	str	r3, [r7, #8]
}
 800bf8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf8c:	bf00      	nop
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d0fc      	beq.n	800bf8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	24000030 	.word	0x24000030
	...

0800bfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfb0:	4b07      	ldr	r3, [pc, #28]	@ (800bfd0 <pxCurrentTCBConst2>)
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	6808      	ldr	r0, [r1, #0]
 800bfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f380 8809 	msr	PSP, r0
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8811 	msr	BASEPRI, r0
 800bfca:	4770      	bx	lr
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <pxCurrentTCBConst2>:
 800bfd0:	2400df8c 	.word	0x2400df8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfd8:	4808      	ldr	r0, [pc, #32]	@ (800bffc <prvPortStartFirstTask+0x24>)
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f380 8808 	msr	MSP, r0
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8814 	msr	CONTROL, r0
 800bfea:	b662      	cpsie	i
 800bfec:	b661      	cpsie	f
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	df00      	svc	0
 800bff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bffa:	bf00      	nop
 800bffc:	e000ed08 	.word	0xe000ed08

0800c000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c006:	4b47      	ldr	r3, [pc, #284]	@ (800c124 <xPortStartScheduler+0x124>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a47      	ldr	r2, [pc, #284]	@ (800c128 <xPortStartScheduler+0x128>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10b      	bne.n	800c028 <xPortStartScheduler+0x28>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	e7fd      	b.n	800c024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c028:	4b3e      	ldr	r3, [pc, #248]	@ (800c124 <xPortStartScheduler+0x124>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a3f      	ldr	r2, [pc, #252]	@ (800c12c <xPortStartScheduler+0x12c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d10b      	bne.n	800c04a <xPortStartScheduler+0x4a>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60fb      	str	r3, [r7, #12]
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop
 800c048:	e7fd      	b.n	800c046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c04a:	4b39      	ldr	r3, [pc, #228]	@ (800c130 <xPortStartScheduler+0x130>)
 800c04c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	b2db      	uxtb	r3, r3
 800c054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	22ff      	movs	r2, #255	@ 0xff
 800c05a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	4b31      	ldr	r3, [pc, #196]	@ (800c134 <xPortStartScheduler+0x134>)
 800c070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c072:	4b31      	ldr	r3, [pc, #196]	@ (800c138 <xPortStartScheduler+0x138>)
 800c074:	2207      	movs	r2, #7
 800c076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c078:	e009      	b.n	800c08e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c07a:	4b2f      	ldr	r3, [pc, #188]	@ (800c138 <xPortStartScheduler+0x138>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3b01      	subs	r3, #1
 800c080:	4a2d      	ldr	r2, [pc, #180]	@ (800c138 <xPortStartScheduler+0x138>)
 800c082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c096:	2b80      	cmp	r3, #128	@ 0x80
 800c098:	d0ef      	beq.n	800c07a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c09a:	4b27      	ldr	r3, [pc, #156]	@ (800c138 <xPortStartScheduler+0x138>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f1c3 0307 	rsb	r3, r3, #7
 800c0a2:	2b04      	cmp	r3, #4
 800c0a4:	d00b      	beq.n	800c0be <xPortStartScheduler+0xbe>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60bb      	str	r3, [r7, #8]
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	e7fd      	b.n	800c0ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0be:	4b1e      	ldr	r3, [pc, #120]	@ (800c138 <xPortStartScheduler+0x138>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	021b      	lsls	r3, r3, #8
 800c0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c138 <xPortStartScheduler+0x138>)
 800c0c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c138 <xPortStartScheduler+0x138>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0d0:	4a19      	ldr	r2, [pc, #100]	@ (800c138 <xPortStartScheduler+0x138>)
 800c0d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0dc:	4b17      	ldr	r3, [pc, #92]	@ (800c13c <xPortStartScheduler+0x13c>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a16      	ldr	r2, [pc, #88]	@ (800c13c <xPortStartScheduler+0x13c>)
 800c0e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c0e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0e8:	4b14      	ldr	r3, [pc, #80]	@ (800c13c <xPortStartScheduler+0x13c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a13      	ldr	r2, [pc, #76]	@ (800c13c <xPortStartScheduler+0x13c>)
 800c0ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c0f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0f4:	f000 f8da 	bl	800c2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0f8:	4b11      	ldr	r3, [pc, #68]	@ (800c140 <xPortStartScheduler+0x140>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0fe:	f000 f8f9 	bl	800c2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c102:	4b10      	ldr	r3, [pc, #64]	@ (800c144 <xPortStartScheduler+0x144>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a0f      	ldr	r2, [pc, #60]	@ (800c144 <xPortStartScheduler+0x144>)
 800c108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c10c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c10e:	f7ff ff63 	bl	800bfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c112:	f001 f9ef 	bl	800d4f4 <vTaskSwitchContext>
	prvTaskExitError();
 800c116:	f7ff ff19 	bl	800bf4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	e000ed00 	.word	0xe000ed00
 800c128:	410fc271 	.word	0x410fc271
 800c12c:	410fc270 	.word	0x410fc270
 800c130:	e000e400 	.word	0xe000e400
 800c134:	2400df44 	.word	0x2400df44
 800c138:	2400df48 	.word	0x2400df48
 800c13c:	e000ed20 	.word	0xe000ed20
 800c140:	24000030 	.word	0x24000030
 800c144:	e000ef34 	.word	0xe000ef34

0800c148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	607b      	str	r3, [r7, #4]
}
 800c160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c162:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <vPortEnterCritical+0x5c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3301      	adds	r3, #1
 800c168:	4a0e      	ldr	r2, [pc, #56]	@ (800c1a4 <vPortEnterCritical+0x5c>)
 800c16a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c16c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a4 <vPortEnterCritical+0x5c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d110      	bne.n	800c196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c174:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a8 <vPortEnterCritical+0x60>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00b      	beq.n	800c196 <vPortEnterCritical+0x4e>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	603b      	str	r3, [r7, #0]
}
 800c190:	bf00      	nop
 800c192:	bf00      	nop
 800c194:	e7fd      	b.n	800c192 <vPortEnterCritical+0x4a>
	}
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	24000030 	.word	0x24000030
 800c1a8:	e000ed04 	.word	0xe000ed04

0800c1ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1b2:	4b12      	ldr	r3, [pc, #72]	@ (800c1fc <vPortExitCritical+0x50>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10b      	bne.n	800c1d2 <vPortExitCritical+0x26>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	607b      	str	r3, [r7, #4]
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	e7fd      	b.n	800c1ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c1fc <vPortExitCritical+0x50>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	4a08      	ldr	r2, [pc, #32]	@ (800c1fc <vPortExitCritical+0x50>)
 800c1da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1dc:	4b07      	ldr	r3, [pc, #28]	@ (800c1fc <vPortExitCritical+0x50>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d105      	bne.n	800c1f0 <vPortExitCritical+0x44>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	24000030 	.word	0x24000030

0800c200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c200:	f3ef 8009 	mrs	r0, PSP
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	4b15      	ldr	r3, [pc, #84]	@ (800c260 <pxCurrentTCBConst>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	f01e 0f10 	tst.w	lr, #16
 800c210:	bf08      	it	eq
 800c212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	6010      	str	r0, [r2, #0]
 800c21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c224:	f380 8811 	msr	BASEPRI, r0
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f001 f960 	bl	800d4f4 <vTaskSwitchContext>
 800c234:	f04f 0000 	mov.w	r0, #0
 800c238:	f380 8811 	msr	BASEPRI, r0
 800c23c:	bc09      	pop	{r0, r3}
 800c23e:	6819      	ldr	r1, [r3, #0]
 800c240:	6808      	ldr	r0, [r1, #0]
 800c242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c246:	f01e 0f10 	tst.w	lr, #16
 800c24a:	bf08      	it	eq
 800c24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c250:	f380 8809 	msr	PSP, r0
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst>:
 800c260:	2400df8c 	.word	0x2400df8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	607b      	str	r3, [r7, #4]
}
 800c280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c282:	f001 f87d 	bl	800d380 <xTaskIncrementTick>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c28c:	4b06      	ldr	r3, [pc, #24]	@ (800c2a8 <xPortSysTickHandler+0x40>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	2300      	movs	r3, #0
 800c296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f383 8811 	msr	BASEPRI, r3
}
 800c29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2e4 <vPortSetupTimerInterrupt+0x38>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e8 <vPortSetupTimerInterrupt+0x3c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c2ec <vPortSetupTimerInterrupt+0x40>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	099b      	lsrs	r3, r3, #6
 800c2c8:	4a09      	ldr	r2, [pc, #36]	@ (800c2f0 <vPortSetupTimerInterrupt+0x44>)
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ce:	4b04      	ldr	r3, [pc, #16]	@ (800c2e0 <vPortSetupTimerInterrupt+0x34>)
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	e000e010 	.word	0xe000e010
 800c2e4:	e000e018 	.word	0xe000e018
 800c2e8:	24000000 	.word	0x24000000
 800c2ec:	10624dd3 	.word	0x10624dd3
 800c2f0:	e000e014 	.word	0xe000e014

0800c2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c304 <vPortEnableVFP+0x10>
 800c2f8:	6801      	ldr	r1, [r0, #0]
 800c2fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c2fe:	6001      	str	r1, [r0, #0]
 800c300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c302:	bf00      	nop
 800c304:	e000ed88 	.word	0xe000ed88

0800c308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c30e:	f3ef 8305 	mrs	r3, IPSR
 800c312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b0f      	cmp	r3, #15
 800c318:	d915      	bls.n	800c346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c31a:	4a18      	ldr	r2, [pc, #96]	@ (800c37c <vPortValidateInterruptPriority+0x74>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c324:	4b16      	ldr	r3, [pc, #88]	@ (800c380 <vPortValidateInterruptPriority+0x78>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	7afa      	ldrb	r2, [r7, #11]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d20b      	bcs.n	800c346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	607b      	str	r3, [r7, #4]
}
 800c340:	bf00      	nop
 800c342:	bf00      	nop
 800c344:	e7fd      	b.n	800c342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c346:	4b0f      	ldr	r3, [pc, #60]	@ (800c384 <vPortValidateInterruptPriority+0x7c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c34e:	4b0e      	ldr	r3, [pc, #56]	@ (800c388 <vPortValidateInterruptPriority+0x80>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d90b      	bls.n	800c36e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	603b      	str	r3, [r7, #0]
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	e7fd      	b.n	800c36a <vPortValidateInterruptPriority+0x62>
	}
 800c36e:	bf00      	nop
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	e000e3f0 	.word	0xe000e3f0
 800c380:	2400df44 	.word	0x2400df44
 800c384:	e000ed0c 	.word	0xe000ed0c
 800c388:	2400df48 	.word	0x2400df48

0800c38c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10b      	bne.n	800c3b8 <xQueueGenericReset+0x2c>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	60bb      	str	r3, [r7, #8]
}
 800c3b2:	bf00      	nop
 800c3b4:	bf00      	nop
 800c3b6:	e7fd      	b.n	800c3b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3b8:	f7ff fec6 	bl	800c148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3c4:	68f9      	ldr	r1, [r7, #12]
 800c3c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c3c8:	fb01 f303 	mul.w	r3, r1, r3
 800c3cc:	441a      	add	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	68f9      	ldr	r1, [r7, #12]
 800c3ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c3ee:	fb01 f303 	mul.w	r3, r1, r3
 800c3f2:	441a      	add	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	22ff      	movs	r2, #255	@ 0xff
 800c3fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	22ff      	movs	r2, #255	@ 0xff
 800c404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d114      	bne.n	800c438 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01a      	beq.n	800c44c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3310      	adds	r3, #16
 800c41a:	4618      	mov	r0, r3
 800c41c:	f001 f91a 	bl	800d654 <xTaskRemoveFromEventList>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d012      	beq.n	800c44c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c426:	4b0d      	ldr	r3, [pc, #52]	@ (800c45c <xQueueGenericReset+0xd0>)
 800c428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	e009      	b.n	800c44c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3310      	adds	r3, #16
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff fc9d 	bl	800bd7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3324      	adds	r3, #36	@ 0x24
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fc98 	bl	800bd7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c44c:	f7ff feae 	bl	800c1ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c450:	2301      	movs	r3, #1
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	e000ed04 	.word	0xe000ed04

0800c460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c460:	b580      	push	{r7, lr}
 800c462:	b08e      	sub	sp, #56	@ 0x38
 800c464:	af02      	add	r7, sp, #8
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10b      	bne.n	800c48c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c486:	bf00      	nop
 800c488:	bf00      	nop
 800c48a:	e7fd      	b.n	800c488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10b      	bne.n	800c4aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	e7fd      	b.n	800c4a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <xQueueGenericCreateStatic+0x56>
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <xQueueGenericCreateStatic+0x5a>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e000      	b.n	800c4bc <xQueueGenericCreateStatic+0x5c>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10b      	bne.n	800c4d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	623b      	str	r3, [r7, #32]
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	e7fd      	b.n	800c4d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d102      	bne.n	800c4e4 <xQueueGenericCreateStatic+0x84>
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <xQueueGenericCreateStatic+0x88>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <xQueueGenericCreateStatic+0x8a>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10b      	bne.n	800c506 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	61fb      	str	r3, [r7, #28]
}
 800c500:	bf00      	nop
 800c502:	bf00      	nop
 800c504:	e7fd      	b.n	800c502 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c506:	2350      	movs	r3, #80	@ 0x50
 800c508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b50      	cmp	r3, #80	@ 0x50
 800c50e:	d00b      	beq.n	800c528 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	61bb      	str	r3, [r7, #24]
}
 800c522:	bf00      	nop
 800c524:	bf00      	nop
 800c526:	e7fd      	b.n	800c524 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c528:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00d      	beq.n	800c550 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c53c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	4613      	mov	r3, r2
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	68b9      	ldr	r1, [r7, #8]
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f000 f805 	bl	800c55a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c552:	4618      	mov	r0, r3
 800c554:	3730      	adds	r7, #48	@ 0x30
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d103      	bne.n	800c576 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	e002      	b.n	800c57c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c588:	2101      	movs	r1, #1
 800c58a:	69b8      	ldr	r0, [r7, #24]
 800c58c:	f7ff fefe 	bl	800c38c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c598:	bf00      	nop
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08e      	sub	sp, #56	@ 0x38
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <xQueueGenericSend+0x34>
	__asm volatile
 800c5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c5ce:	bf00      	nop
 800c5d0:	bf00      	nop
 800c5d2:	e7fd      	b.n	800c5d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <xQueueGenericSend+0x42>
 800c5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <xQueueGenericSend+0x46>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <xQueueGenericSend+0x48>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10b      	bne.n	800c604 <xQueueGenericSend+0x64>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c5fe:	bf00      	nop
 800c600:	bf00      	nop
 800c602:	e7fd      	b.n	800c600 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b02      	cmp	r3, #2
 800c608:	d103      	bne.n	800c612 <xQueueGenericSend+0x72>
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d101      	bne.n	800c616 <xQueueGenericSend+0x76>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <xQueueGenericSend+0x78>
 800c616:	2300      	movs	r3, #0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10b      	bne.n	800c634 <xQueueGenericSend+0x94>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	623b      	str	r3, [r7, #32]
}
 800c62e:	bf00      	nop
 800c630:	bf00      	nop
 800c632:	e7fd      	b.n	800c630 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c634:	f001 f9f6 	bl	800da24 <xTaskGetSchedulerState>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d102      	bne.n	800c644 <xQueueGenericSend+0xa4>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <xQueueGenericSend+0xa8>
 800c644:	2301      	movs	r3, #1
 800c646:	e000      	b.n	800c64a <xQueueGenericSend+0xaa>
 800c648:	2300      	movs	r3, #0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10b      	bne.n	800c666 <xQueueGenericSend+0xc6>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	61fb      	str	r3, [r7, #28]
}
 800c660:	bf00      	nop
 800c662:	bf00      	nop
 800c664:	e7fd      	b.n	800c662 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c666:	f7ff fd6f 	bl	800c148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c66c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c672:	429a      	cmp	r2, r3
 800c674:	d302      	bcc.n	800c67c <xQueueGenericSend+0xdc>
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d129      	bne.n	800c6d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	68b9      	ldr	r1, [r7, #8]
 800c680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c682:	f000 fa0f 	bl	800caa4 <prvCopyDataToQueue>
 800c686:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d010      	beq.n	800c6b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c692:	3324      	adds	r3, #36	@ 0x24
 800c694:	4618      	mov	r0, r3
 800c696:	f000 ffdd 	bl	800d654 <xTaskRemoveFromEventList>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d013      	beq.n	800c6c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c6a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c7a0 <xQueueGenericSend+0x200>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	e00a      	b.n	800c6c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d007      	beq.n	800c6c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c6b8:	4b39      	ldr	r3, [pc, #228]	@ (800c7a0 <xQueueGenericSend+0x200>)
 800c6ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c6c8:	f7ff fd70 	bl	800c1ac <vPortExitCritical>
				return pdPASS;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e063      	b.n	800c798 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d103      	bne.n	800c6de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6d6:	f7ff fd69 	bl	800c1ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e05c      	b.n	800c798 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d106      	bne.n	800c6f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6e4:	f107 0314 	add.w	r3, r7, #20
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f001 f83f 	bl	800d76c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6f2:	f7ff fd5b 	bl	800c1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f6:	f000 fd87 	bl	800d208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6fa:	f7ff fd25 	bl	800c148 <vPortEnterCritical>
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c700:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c704:	b25b      	sxtb	r3, r3
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c70a:	d103      	bne.n	800c714 <xQueueGenericSend+0x174>
 800c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c71a:	b25b      	sxtb	r3, r3
 800c71c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c720:	d103      	bne.n	800c72a <xQueueGenericSend+0x18a>
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	2200      	movs	r2, #0
 800c726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c72a:	f7ff fd3f 	bl	800c1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c72e:	1d3a      	adds	r2, r7, #4
 800c730:	f107 0314 	add.w	r3, r7, #20
 800c734:	4611      	mov	r1, r2
 800c736:	4618      	mov	r0, r3
 800c738:	f001 f82e 	bl	800d798 <xTaskCheckForTimeOut>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d124      	bne.n	800c78c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c742:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c744:	f000 faa6 	bl	800cc94 <prvIsQueueFull>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d018      	beq.n	800c780 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c750:	3310      	adds	r3, #16
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4611      	mov	r1, r2
 800c756:	4618      	mov	r0, r3
 800c758:	f000 ff2a 	bl	800d5b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c75c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c75e:	f000 fa31 	bl	800cbc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c762:	f000 fd5f 	bl	800d224 <xTaskResumeAll>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f47f af7c 	bne.w	800c666 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c76e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a0 <xQueueGenericSend+0x200>)
 800c770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	e772      	b.n	800c666 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c782:	f000 fa1f 	bl	800cbc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c786:	f000 fd4d 	bl	800d224 <xTaskResumeAll>
 800c78a:	e76c      	b.n	800c666 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c78c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c78e:	f000 fa19 	bl	800cbc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c792:	f000 fd47 	bl	800d224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c796:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3738      	adds	r7, #56	@ 0x38
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	e000ed04 	.word	0xe000ed04

0800c7a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b090      	sub	sp, #64	@ 0x40
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	607a      	str	r2, [r7, #4]
 800c7b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10b      	bne.n	800c7d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	e7fd      	b.n	800c7d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d103      	bne.n	800c7e2 <xQueueGenericSendFromISR+0x3e>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <xQueueGenericSendFromISR+0x42>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <xQueueGenericSendFromISR+0x44>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10b      	bne.n	800c804 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c7fe:	bf00      	nop
 800c800:	bf00      	nop
 800c802:	e7fd      	b.n	800c800 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	2b02      	cmp	r3, #2
 800c808:	d103      	bne.n	800c812 <xQueueGenericSendFromISR+0x6e>
 800c80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d101      	bne.n	800c816 <xQueueGenericSendFromISR+0x72>
 800c812:	2301      	movs	r3, #1
 800c814:	e000      	b.n	800c818 <xQueueGenericSendFromISR+0x74>
 800c816:	2300      	movs	r3, #0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10b      	bne.n	800c834 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	623b      	str	r3, [r7, #32]
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	e7fd      	b.n	800c830 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c834:	f7ff fd68 	bl	800c308 <vPortValidateInterruptPriority>
	__asm volatile
 800c838:	f3ef 8211 	mrs	r2, BASEPRI
 800c83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	61fa      	str	r2, [r7, #28]
 800c84e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c850:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c852:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d302      	bcc.n	800c866 <xQueueGenericSendFromISR+0xc2>
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b02      	cmp	r3, #2
 800c864:	d12f      	bne.n	800c8c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c868:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c86c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c874:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c87c:	f000 f912 	bl	800caa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c880:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c888:	d112      	bne.n	800c8b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d016      	beq.n	800c8c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c894:	3324      	adds	r3, #36	@ 0x24
 800c896:	4618      	mov	r0, r3
 800c898:	f000 fedc 	bl	800d654 <xTaskRemoveFromEventList>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00e      	beq.n	800c8c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00b      	beq.n	800c8c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	e007      	b.n	800c8c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	b25a      	sxtb	r2, r3
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c8c4:	e001      	b.n	800c8ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8cc:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f383 8811 	msr	BASEPRI, r3
}
 800c8d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3740      	adds	r7, #64	@ 0x40
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b08c      	sub	sp, #48	@ 0x30
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10b      	bne.n	800c912 <xQueueReceive+0x32>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	623b      	str	r3, [r7, #32]
}
 800c90c:	bf00      	nop
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d103      	bne.n	800c920 <xQueueReceive+0x40>
 800c918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <xQueueReceive+0x44>
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <xQueueReceive+0x46>
 800c924:	2300      	movs	r3, #0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10b      	bne.n	800c942 <xQueueReceive+0x62>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	61fb      	str	r3, [r7, #28]
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	e7fd      	b.n	800c93e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c942:	f001 f86f 	bl	800da24 <xTaskGetSchedulerState>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d102      	bne.n	800c952 <xQueueReceive+0x72>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <xQueueReceive+0x76>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <xQueueReceive+0x78>
 800c956:	2300      	movs	r3, #0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10b      	bne.n	800c974 <xQueueReceive+0x94>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	61bb      	str	r3, [r7, #24]
}
 800c96e:	bf00      	nop
 800c970:	bf00      	nop
 800c972:	e7fd      	b.n	800c970 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c974:	f7ff fbe8 	bl	800c148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c97c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	2b00      	cmp	r3, #0
 800c982:	d01f      	beq.n	800c9c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c984:	68b9      	ldr	r1, [r7, #8]
 800c986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c988:	f000 f8f6 	bl	800cb78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	1e5a      	subs	r2, r3, #1
 800c990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c992:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00f      	beq.n	800c9bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99e:	3310      	adds	r3, #16
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fe57 	bl	800d654 <xTaskRemoveFromEventList>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d007      	beq.n	800c9bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9ac:	4b3c      	ldr	r3, [pc, #240]	@ (800caa0 <xQueueReceive+0x1c0>)
 800c9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	f3bf 8f4f 	dsb	sy
 800c9b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9bc:	f7ff fbf6 	bl	800c1ac <vPortExitCritical>
				return pdPASS;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e069      	b.n	800ca98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d103      	bne.n	800c9d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9ca:	f7ff fbef 	bl	800c1ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e062      	b.n	800ca98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d106      	bne.n	800c9e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9d8:	f107 0310 	add.w	r3, r7, #16
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 fec5 	bl	800d76c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9e6:	f7ff fbe1 	bl	800c1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9ea:	f000 fc0d 	bl	800d208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9ee:	f7ff fbab 	bl	800c148 <vPortEnterCritical>
 800c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9f8:	b25b      	sxtb	r3, r3
 800c9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9fe:	d103      	bne.n	800ca08 <xQueueReceive+0x128>
 800ca00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca0e:	b25b      	sxtb	r3, r3
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca14:	d103      	bne.n	800ca1e <xQueueReceive+0x13e>
 800ca16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca1e:	f7ff fbc5 	bl	800c1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca22:	1d3a      	adds	r2, r7, #4
 800ca24:	f107 0310 	add.w	r3, r7, #16
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 feb4 	bl	800d798 <xTaskCheckForTimeOut>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d123      	bne.n	800ca7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca38:	f000 f916 	bl	800cc68 <prvIsQueueEmpty>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d017      	beq.n	800ca72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca44:	3324      	adds	r3, #36	@ 0x24
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fdb0 	bl	800d5b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca52:	f000 f8b7 	bl	800cbc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca56:	f000 fbe5 	bl	800d224 <xTaskResumeAll>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d189      	bne.n	800c974 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ca60:	4b0f      	ldr	r3, [pc, #60]	@ (800caa0 <xQueueReceive+0x1c0>)
 800ca62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca66:	601a      	str	r2, [r3, #0]
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	e780      	b.n	800c974 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca74:	f000 f8a6 	bl	800cbc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca78:	f000 fbd4 	bl	800d224 <xTaskResumeAll>
 800ca7c:	e77a      	b.n	800c974 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca80:	f000 f8a0 	bl	800cbc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca84:	f000 fbce 	bl	800d224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca8a:	f000 f8ed 	bl	800cc68 <prvIsQueueEmpty>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f43f af6f 	beq.w	800c974 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3730      	adds	r7, #48	@ 0x30
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	e000ed04 	.word	0xe000ed04

0800caa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10d      	bne.n	800cade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d14d      	bne.n	800cb66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 ffc6 	bl	800da60 <xTaskPriorityDisinherit>
 800cad4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	609a      	str	r2, [r3, #8]
 800cadc:	e043      	b.n	800cb66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d119      	bne.n	800cb18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6858      	ldr	r0, [r3, #4]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caec:	461a      	mov	r2, r3
 800caee:	68b9      	ldr	r1, [r7, #8]
 800caf0:	f00f facb 	bl	801c08a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cafc:	441a      	add	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d32b      	bcc.n	800cb66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	605a      	str	r2, [r3, #4]
 800cb16:	e026      	b.n	800cb66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	68d8      	ldr	r0, [r3, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb20:	461a      	mov	r2, r3
 800cb22:	68b9      	ldr	r1, [r7, #8]
 800cb24:	f00f fab1 	bl	801c08a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb30:	425b      	negs	r3, r3
 800cb32:	441a      	add	r2, r3
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	68da      	ldr	r2, [r3, #12]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d207      	bcs.n	800cb54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	689a      	ldr	r2, [r3, #8]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb4c:	425b      	negs	r3, r3
 800cb4e:	441a      	add	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d105      	bne.n	800cb66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cb6e:	697b      	ldr	r3, [r7, #20]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d018      	beq.n	800cbbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb92:	441a      	add	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68da      	ldr	r2, [r3, #12]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d303      	bcc.n	800cbac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	68d9      	ldr	r1, [r3, #12]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	6838      	ldr	r0, [r7, #0]
 800cbb8:	f00f fa67 	bl	801c08a <memcpy>
	}
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cbcc:	f7ff fabc 	bl	800c148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbd8:	e011      	b.n	800cbfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d012      	beq.n	800cc08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3324      	adds	r3, #36	@ 0x24
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 fd34 	bl	800d654 <xTaskRemoveFromEventList>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cbf2:	f000 fe35 	bl	800d860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	dce9      	bgt.n	800cbda <prvUnlockQueue+0x16>
 800cc06:	e000      	b.n	800cc0a <prvUnlockQueue+0x46>
					break;
 800cc08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	22ff      	movs	r2, #255	@ 0xff
 800cc0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cc12:	f7ff facb 	bl	800c1ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc16:	f7ff fa97 	bl	800c148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc22:	e011      	b.n	800cc48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d012      	beq.n	800cc52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3310      	adds	r3, #16
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 fd0f 	bl	800d654 <xTaskRemoveFromEventList>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc3c:	f000 fe10 	bl	800d860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	dce9      	bgt.n	800cc24 <prvUnlockQueue+0x60>
 800cc50:	e000      	b.n	800cc54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	22ff      	movs	r2, #255	@ 0xff
 800cc58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cc5c:	f7ff faa6 	bl	800c1ac <vPortExitCritical>
}
 800cc60:	bf00      	nop
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc70:	f7ff fa6a 	bl	800c148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	e001      	b.n	800cc86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc86:	f7ff fa91 	bl	800c1ac <vPortExitCritical>

	return xReturn;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc9c:	f7ff fa54 	bl	800c148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d102      	bne.n	800ccb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ccac:	2301      	movs	r3, #1
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e001      	b.n	800ccb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ccb6:	f7ff fa79 	bl	800c1ac <vPortExitCritical>

	return xReturn;
 800ccba:	68fb      	ldr	r3, [r7, #12]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	e014      	b.n	800ccfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ccd4:	4a0f      	ldr	r2, [pc, #60]	@ (800cd14 <vQueueAddToRegistry+0x50>)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10b      	bne.n	800ccf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cce0:	490c      	ldr	r1, [pc, #48]	@ (800cd14 <vQueueAddToRegistry+0x50>)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ccea:	4a0a      	ldr	r2, [pc, #40]	@ (800cd14 <vQueueAddToRegistry+0x50>)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	4413      	add	r3, r2
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ccf6:	e006      	b.n	800cd06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b07      	cmp	r3, #7
 800cd02:	d9e7      	bls.n	800ccd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	2400df4c 	.word	0x2400df4c

0800cd18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cd28:	f7ff fa0e 	bl	800c148 <vPortEnterCritical>
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd38:	d103      	bne.n	800cd42 <vQueueWaitForMessageRestricted+0x2a>
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd48:	b25b      	sxtb	r3, r3
 800cd4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd4e:	d103      	bne.n	800cd58 <vQueueWaitForMessageRestricted+0x40>
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd58:	f7ff fa28 	bl	800c1ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d106      	bne.n	800cd72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	3324      	adds	r3, #36	@ 0x24
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fc45 	bl	800d5fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cd72:	6978      	ldr	r0, [r7, #20]
 800cd74:	f7ff ff26 	bl	800cbc4 <prvUnlockQueue>
	}
 800cd78:	bf00      	nop
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08e      	sub	sp, #56	@ 0x38
 800cd84:	af04      	add	r7, sp, #16
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10b      	bne.n	800cdac <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	623b      	str	r3, [r7, #32]
}
 800cda6:	bf00      	nop
 800cda8:	bf00      	nop
 800cdaa:	e7fd      	b.n	800cda8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10b      	bne.n	800cdca <xTaskCreateStatic+0x4a>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	61fb      	str	r3, [r7, #28]
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop
 800cdc8:	e7fd      	b.n	800cdc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cdca:	235c      	movs	r3, #92	@ 0x5c
 800cdcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cdd2:	d00b      	beq.n	800cdec <xTaskCreateStatic+0x6c>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	61bb      	str	r3, [r7, #24]
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	e7fd      	b.n	800cde8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d01e      	beq.n	800ce32 <xTaskCreateStatic+0xb2>
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01b      	beq.n	800ce32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce06:	2202      	movs	r2, #2
 800ce08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9303      	str	r3, [sp, #12]
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	9302      	str	r3, [sp, #8]
 800ce14:	f107 0314 	add.w	r3, r7, #20
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f850 	bl	800ceca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce2c:	f000 f8de 	bl	800cfec <prvAddNewTaskToReadyList>
 800ce30:	e001      	b.n	800ce36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce36:	697b      	ldr	r3, [r7, #20]
	}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3728      	adds	r7, #40	@ 0x28
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08c      	sub	sp, #48	@ 0x30
 800ce44:	af04      	add	r7, sp, #16
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe fda3 	bl	800b9a0 <pvPortMalloc>
 800ce5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00e      	beq.n	800ce80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce62:	205c      	movs	r0, #92	@ 0x5c
 800ce64:	f7fe fd9c 	bl	800b9a0 <pvPortMalloc>
 800ce68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d003      	beq.n	800ce78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce76:	e005      	b.n	800ce84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce78:	6978      	ldr	r0, [r7, #20]
 800ce7a:	f7fe fe5f 	bl	800bb3c <vPortFree>
 800ce7e:	e001      	b.n	800ce84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce80:	2300      	movs	r3, #0
 800ce82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d017      	beq.n	800ceba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce92:	88fa      	ldrh	r2, [r7, #6]
 800ce94:	2300      	movs	r3, #0
 800ce96:	9303      	str	r3, [sp, #12]
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	9302      	str	r3, [sp, #8]
 800ce9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	68b9      	ldr	r1, [r7, #8]
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 f80e 	bl	800ceca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ceae:	69f8      	ldr	r0, [r7, #28]
 800ceb0:	f000 f89c 	bl	800cfec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	61bb      	str	r3, [r7, #24]
 800ceb8:	e002      	b.n	800cec0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ceba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cebe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cec0:	69bb      	ldr	r3, [r7, #24]
	}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3720      	adds	r7, #32
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b088      	sub	sp, #32
 800cece:	af00      	add	r7, sp, #0
 800ced0:	60f8      	str	r0, [r7, #12]
 800ced2:	60b9      	str	r1, [r7, #8]
 800ced4:	607a      	str	r2, [r7, #4]
 800ced6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceda:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	461a      	mov	r2, r3
 800cee2:	21a5      	movs	r1, #165	@ 0xa5
 800cee4:	f00f f808 	bl	801bef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cef2:	440b      	add	r3, r1
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	f023 0307 	bic.w	r3, r3, #7
 800cf00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	f003 0307 	and.w	r3, r3, #7
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00b      	beq.n	800cf24 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	617b      	str	r3, [r7, #20]
}
 800cf1e:	bf00      	nop
 800cf20:	bf00      	nop
 800cf22:	e7fd      	b.n	800cf20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d01f      	beq.n	800cf6a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	61fb      	str	r3, [r7, #28]
 800cf2e:	e012      	b.n	800cf56 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	4413      	add	r3, r2
 800cf36:	7819      	ldrb	r1, [r3, #0]
 800cf38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	3334      	adds	r3, #52	@ 0x34
 800cf40:	460a      	mov	r2, r1
 800cf42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	4413      	add	r3, r2
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	3301      	adds	r3, #1
 800cf54:	61fb      	str	r3, [r7, #28]
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	2b0f      	cmp	r3, #15
 800cf5a:	d9e9      	bls.n	800cf30 <prvInitialiseNewTask+0x66>
 800cf5c:	e000      	b.n	800cf60 <prvInitialiseNewTask+0x96>
			{
				break;
 800cf5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	2200      	movs	r2, #0
 800cf64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cf68:	e003      	b.n	800cf72 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf74:	2b37      	cmp	r3, #55	@ 0x37
 800cf76:	d901      	bls.n	800cf7c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf78:	2337      	movs	r3, #55	@ 0x37
 800cf7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf80:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf86:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	3304      	adds	r3, #4
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe ff12 	bl	800bdbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe ff0d 	bl	800bdbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfb6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfba:	2200      	movs	r2, #0
 800cfbc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	68f9      	ldr	r1, [r7, #12]
 800cfca:	69b8      	ldr	r0, [r7, #24]
 800cfcc:	f7fe ff8a 	bl	800bee4 <pxPortInitialiseStack>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfe2:	bf00      	nop
 800cfe4:	3720      	adds	r7, #32
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cff4:	f7ff f8a8 	bl	800c148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cff8:	4b2d      	ldr	r3, [pc, #180]	@ (800d0b0 <prvAddNewTaskToReadyList+0xc4>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3301      	adds	r3, #1
 800cffe:	4a2c      	ldr	r2, [pc, #176]	@ (800d0b0 <prvAddNewTaskToReadyList+0xc4>)
 800d000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d002:	4b2c      	ldr	r3, [pc, #176]	@ (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d109      	bne.n	800d01e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d00a:	4a2a      	ldr	r2, [pc, #168]	@ (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d010:	4b27      	ldr	r3, [pc, #156]	@ (800d0b0 <prvAddNewTaskToReadyList+0xc4>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d110      	bne.n	800d03a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d018:	f000 fc46 	bl	800d8a8 <prvInitialiseTaskLists>
 800d01c:	e00d      	b.n	800d03a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d01e:	4b26      	ldr	r3, [pc, #152]	@ (800d0b8 <prvAddNewTaskToReadyList+0xcc>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d109      	bne.n	800d03a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d026:	4b23      	ldr	r3, [pc, #140]	@ (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d030:	429a      	cmp	r2, r3
 800d032:	d802      	bhi.n	800d03a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d034:	4a1f      	ldr	r2, [pc, #124]	@ (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d03a:	4b20      	ldr	r3, [pc, #128]	@ (800d0bc <prvAddNewTaskToReadyList+0xd0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3301      	adds	r3, #1
 800d040:	4a1e      	ldr	r2, [pc, #120]	@ (800d0bc <prvAddNewTaskToReadyList+0xd0>)
 800d042:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d044:	4b1d      	ldr	r3, [pc, #116]	@ (800d0bc <prvAddNewTaskToReadyList+0xd0>)
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d050:	4b1b      	ldr	r3, [pc, #108]	@ (800d0c0 <prvAddNewTaskToReadyList+0xd4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d903      	bls.n	800d060 <prvAddNewTaskToReadyList+0x74>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05c:	4a18      	ldr	r2, [pc, #96]	@ (800d0c0 <prvAddNewTaskToReadyList+0xd4>)
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4a15      	ldr	r2, [pc, #84]	@ (800d0c4 <prvAddNewTaskToReadyList+0xd8>)
 800d06e:	441a      	add	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3304      	adds	r3, #4
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f7fe fead 	bl	800bdd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d07c:	f7ff f896 	bl	800c1ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d080:	4b0d      	ldr	r3, [pc, #52]	@ (800d0b8 <prvAddNewTaskToReadyList+0xcc>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00e      	beq.n	800d0a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d088:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d092:	429a      	cmp	r2, r3
 800d094:	d207      	bcs.n	800d0a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d096:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c8 <prvAddNewTaskToReadyList+0xdc>)
 800d098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	2400e460 	.word	0x2400e460
 800d0b4:	2400df8c 	.word	0x2400df8c
 800d0b8:	2400e46c 	.word	0x2400e46c
 800d0bc:	2400e47c 	.word	0x2400e47c
 800d0c0:	2400e468 	.word	0x2400e468
 800d0c4:	2400df90 	.word	0x2400df90
 800d0c8:	e000ed04 	.word	0xe000ed04

0800d0cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d018      	beq.n	800d110 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d0de:	4b14      	ldr	r3, [pc, #80]	@ (800d130 <vTaskDelay+0x64>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00b      	beq.n	800d0fe <vTaskDelay+0x32>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	60bb      	str	r3, [r7, #8]
}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	e7fd      	b.n	800d0fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0fe:	f000 f883 	bl	800d208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d102:	2100      	movs	r1, #0
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fd1b 	bl	800db40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d10a:	f000 f88b 	bl	800d224 <xTaskResumeAll>
 800d10e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d107      	bne.n	800d126 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d116:	4b07      	ldr	r3, [pc, #28]	@ (800d134 <vTaskDelay+0x68>)
 800d118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d11c:	601a      	str	r2, [r3, #0]
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d126:	bf00      	nop
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	2400e488 	.word	0x2400e488
 800d134:	e000ed04 	.word	0xe000ed04

0800d138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08a      	sub	sp, #40	@ 0x28
 800d13c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d142:	2300      	movs	r3, #0
 800d144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d146:	463a      	mov	r2, r7
 800d148:	1d39      	adds	r1, r7, #4
 800d14a:	f107 0308 	add.w	r3, r7, #8
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fbf2 	bl	800b938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68ba      	ldr	r2, [r7, #8]
 800d15a:	9202      	str	r2, [sp, #8]
 800d15c:	9301      	str	r3, [sp, #4]
 800d15e:	2300      	movs	r3, #0
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	2300      	movs	r3, #0
 800d164:	460a      	mov	r2, r1
 800d166:	4922      	ldr	r1, [pc, #136]	@ (800d1f0 <vTaskStartScheduler+0xb8>)
 800d168:	4822      	ldr	r0, [pc, #136]	@ (800d1f4 <vTaskStartScheduler+0xbc>)
 800d16a:	f7ff fe09 	bl	800cd80 <xTaskCreateStatic>
 800d16e:	4603      	mov	r3, r0
 800d170:	4a21      	ldr	r2, [pc, #132]	@ (800d1f8 <vTaskStartScheduler+0xc0>)
 800d172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d174:	4b20      	ldr	r3, [pc, #128]	@ (800d1f8 <vTaskStartScheduler+0xc0>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d17c:	2301      	movs	r3, #1
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	e001      	b.n	800d186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d182:	2300      	movs	r3, #0
 800d184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d102      	bne.n	800d192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d18c:	f000 fd2c 	bl	800dbe8 <xTimerCreateTimerTask>
 800d190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d116      	bne.n	800d1c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	613b      	str	r3, [r7, #16]
}
 800d1aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1ac:	4b13      	ldr	r3, [pc, #76]	@ (800d1fc <vTaskStartScheduler+0xc4>)
 800d1ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1b4:	4b12      	ldr	r3, [pc, #72]	@ (800d200 <vTaskStartScheduler+0xc8>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1ba:	4b12      	ldr	r3, [pc, #72]	@ (800d204 <vTaskStartScheduler+0xcc>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d1c0:	f7fe ff1e 	bl	800c000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d1c4:	e00f      	b.n	800d1e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1cc:	d10b      	bne.n	800d1e6 <vTaskStartScheduler+0xae>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	60fb      	str	r3, [r7, #12]
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	e7fd      	b.n	800d1e2 <vTaskStartScheduler+0xaa>
}
 800d1e6:	bf00      	nop
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0801cd80 	.word	0x0801cd80
 800d1f4:	0800d879 	.word	0x0800d879
 800d1f8:	2400e484 	.word	0x2400e484
 800d1fc:	2400e480 	.word	0x2400e480
 800d200:	2400e46c 	.word	0x2400e46c
 800d204:	2400e464 	.word	0x2400e464

0800d208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d20c:	4b04      	ldr	r3, [pc, #16]	@ (800d220 <vTaskSuspendAll+0x18>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3301      	adds	r3, #1
 800d212:	4a03      	ldr	r2, [pc, #12]	@ (800d220 <vTaskSuspendAll+0x18>)
 800d214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d216:	bf00      	nop
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	2400e488 	.word	0x2400e488

0800d224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d22e:	2300      	movs	r3, #0
 800d230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d232:	4b42      	ldr	r3, [pc, #264]	@ (800d33c <xTaskResumeAll+0x118>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10b      	bne.n	800d252 <xTaskResumeAll+0x2e>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	603b      	str	r3, [r7, #0]
}
 800d24c:	bf00      	nop
 800d24e:	bf00      	nop
 800d250:	e7fd      	b.n	800d24e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d252:	f7fe ff79 	bl	800c148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d256:	4b39      	ldr	r3, [pc, #228]	@ (800d33c <xTaskResumeAll+0x118>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	4a37      	ldr	r2, [pc, #220]	@ (800d33c <xTaskResumeAll+0x118>)
 800d25e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d260:	4b36      	ldr	r3, [pc, #216]	@ (800d33c <xTaskResumeAll+0x118>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d162      	bne.n	800d32e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d268:	4b35      	ldr	r3, [pc, #212]	@ (800d340 <xTaskResumeAll+0x11c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d05e      	beq.n	800d32e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d270:	e02f      	b.n	800d2d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d272:	4b34      	ldr	r3, [pc, #208]	@ (800d344 <xTaskResumeAll+0x120>)
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3318      	adds	r3, #24
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fe06 	bl	800be90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	3304      	adds	r3, #4
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe fe01 	bl	800be90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d292:	4b2d      	ldr	r3, [pc, #180]	@ (800d348 <xTaskResumeAll+0x124>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	429a      	cmp	r2, r3
 800d298:	d903      	bls.n	800d2a2 <xTaskResumeAll+0x7e>
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d29e:	4a2a      	ldr	r2, [pc, #168]	@ (800d348 <xTaskResumeAll+0x124>)
 800d2a0:	6013      	str	r3, [r2, #0]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4a27      	ldr	r2, [pc, #156]	@ (800d34c <xTaskResumeAll+0x128>)
 800d2b0:	441a      	add	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	f7fe fd8c 	bl	800bdd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c2:	4b23      	ldr	r3, [pc, #140]	@ (800d350 <xTaskResumeAll+0x12c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d302      	bcc.n	800d2d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d2cc:	4b21      	ldr	r3, [pc, #132]	@ (800d354 <xTaskResumeAll+0x130>)
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2d2:	4b1c      	ldr	r3, [pc, #112]	@ (800d344 <xTaskResumeAll+0x120>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1cb      	bne.n	800d272 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d2e0:	f000 fb80 	bl	800d9e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2e4:	4b1c      	ldr	r3, [pc, #112]	@ (800d358 <xTaskResumeAll+0x134>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d010      	beq.n	800d312 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2f0:	f000 f846 	bl	800d380 <xTaskIncrementTick>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d2fa:	4b16      	ldr	r3, [pc, #88]	@ (800d354 <xTaskResumeAll+0x130>)
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3b01      	subs	r3, #1
 800d304:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1f1      	bne.n	800d2f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d30c:	4b12      	ldr	r3, [pc, #72]	@ (800d358 <xTaskResumeAll+0x134>)
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d312:	4b10      	ldr	r3, [pc, #64]	@ (800d354 <xTaskResumeAll+0x130>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d009      	beq.n	800d32e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d31a:	2301      	movs	r3, #1
 800d31c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d31e:	4b0f      	ldr	r3, [pc, #60]	@ (800d35c <xTaskResumeAll+0x138>)
 800d320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d324:	601a      	str	r2, [r3, #0]
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d32e:	f7fe ff3d 	bl	800c1ac <vPortExitCritical>

	return xAlreadyYielded;
 800d332:	68bb      	ldr	r3, [r7, #8]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	2400e488 	.word	0x2400e488
 800d340:	2400e460 	.word	0x2400e460
 800d344:	2400e420 	.word	0x2400e420
 800d348:	2400e468 	.word	0x2400e468
 800d34c:	2400df90 	.word	0x2400df90
 800d350:	2400df8c 	.word	0x2400df8c
 800d354:	2400e474 	.word	0x2400e474
 800d358:	2400e470 	.word	0x2400e470
 800d35c:	e000ed04 	.word	0xe000ed04

0800d360 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d366:	4b05      	ldr	r3, [pc, #20]	@ (800d37c <xTaskGetTickCount+0x1c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d36c:	687b      	ldr	r3, [r7, #4]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	2400e464 	.word	0x2400e464

0800d380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d386:	2300      	movs	r3, #0
 800d388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d38a:	4b4f      	ldr	r3, [pc, #316]	@ (800d4c8 <xTaskIncrementTick+0x148>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f040 8090 	bne.w	800d4b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d394:	4b4d      	ldr	r3, [pc, #308]	@ (800d4cc <xTaskIncrementTick+0x14c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3301      	adds	r3, #1
 800d39a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d39c:	4a4b      	ldr	r2, [pc, #300]	@ (800d4cc <xTaskIncrementTick+0x14c>)
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d121      	bne.n	800d3ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d3a8:	4b49      	ldr	r3, [pc, #292]	@ (800d4d0 <xTaskIncrementTick+0x150>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00b      	beq.n	800d3ca <xTaskIncrementTick+0x4a>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	603b      	str	r3, [r7, #0]
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop
 800d3c8:	e7fd      	b.n	800d3c6 <xTaskIncrementTick+0x46>
 800d3ca:	4b41      	ldr	r3, [pc, #260]	@ (800d4d0 <xTaskIncrementTick+0x150>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	4b40      	ldr	r3, [pc, #256]	@ (800d4d4 <xTaskIncrementTick+0x154>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a3e      	ldr	r2, [pc, #248]	@ (800d4d0 <xTaskIncrementTick+0x150>)
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	4a3e      	ldr	r2, [pc, #248]	@ (800d4d4 <xTaskIncrementTick+0x154>)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	4b3e      	ldr	r3, [pc, #248]	@ (800d4d8 <xTaskIncrementTick+0x158>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	4a3c      	ldr	r2, [pc, #240]	@ (800d4d8 <xTaskIncrementTick+0x158>)
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	f000 fafc 	bl	800d9e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3ec:	4b3b      	ldr	r3, [pc, #236]	@ (800d4dc <xTaskIncrementTick+0x15c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d349      	bcc.n	800d48a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3f6:	4b36      	ldr	r3, [pc, #216]	@ (800d4d0 <xTaskIncrementTick+0x150>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d104      	bne.n	800d40a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d400:	4b36      	ldr	r3, [pc, #216]	@ (800d4dc <xTaskIncrementTick+0x15c>)
 800d402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d406:	601a      	str	r2, [r3, #0]
					break;
 800d408:	e03f      	b.n	800d48a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d40a:	4b31      	ldr	r3, [pc, #196]	@ (800d4d0 <xTaskIncrementTick+0x150>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d203      	bcs.n	800d42a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d422:	4a2e      	ldr	r2, [pc, #184]	@ (800d4dc <xTaskIncrementTick+0x15c>)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d428:	e02f      	b.n	800d48a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	3304      	adds	r3, #4
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fd2e 	bl	800be90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	3318      	adds	r3, #24
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe fd25 	bl	800be90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d44a:	4b25      	ldr	r3, [pc, #148]	@ (800d4e0 <xTaskIncrementTick+0x160>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d903      	bls.n	800d45a <xTaskIncrementTick+0xda>
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d456:	4a22      	ldr	r2, [pc, #136]	@ (800d4e0 <xTaskIncrementTick+0x160>)
 800d458:	6013      	str	r3, [r2, #0]
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d45e:	4613      	mov	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4413      	add	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4a1f      	ldr	r2, [pc, #124]	@ (800d4e4 <xTaskIncrementTick+0x164>)
 800d468:	441a      	add	r2, r3
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	3304      	adds	r3, #4
 800d46e:	4619      	mov	r1, r3
 800d470:	4610      	mov	r0, r2
 800d472:	f7fe fcb0 	bl	800bdd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d47a:	4b1b      	ldr	r3, [pc, #108]	@ (800d4e8 <xTaskIncrementTick+0x168>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d480:	429a      	cmp	r2, r3
 800d482:	d3b8      	bcc.n	800d3f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d484:	2301      	movs	r3, #1
 800d486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d488:	e7b5      	b.n	800d3f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d48a:	4b17      	ldr	r3, [pc, #92]	@ (800d4e8 <xTaskIncrementTick+0x168>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d490:	4914      	ldr	r1, [pc, #80]	@ (800d4e4 <xTaskIncrementTick+0x164>)
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	440b      	add	r3, r1
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d901      	bls.n	800d4a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d4a6:	4b11      	ldr	r3, [pc, #68]	@ (800d4ec <xTaskIncrementTick+0x16c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d007      	beq.n	800d4be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e004      	b.n	800d4be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d4b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d4f0 <xTaskIncrementTick+0x170>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d4f0 <xTaskIncrementTick+0x170>)
 800d4bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d4be:	697b      	ldr	r3, [r7, #20]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	2400e488 	.word	0x2400e488
 800d4cc:	2400e464 	.word	0x2400e464
 800d4d0:	2400e418 	.word	0x2400e418
 800d4d4:	2400e41c 	.word	0x2400e41c
 800d4d8:	2400e478 	.word	0x2400e478
 800d4dc:	2400e480 	.word	0x2400e480
 800d4e0:	2400e468 	.word	0x2400e468
 800d4e4:	2400df90 	.word	0x2400df90
 800d4e8:	2400df8c 	.word	0x2400df8c
 800d4ec:	2400e474 	.word	0x2400e474
 800d4f0:	2400e470 	.word	0x2400e470

0800d4f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4fa:	4b28      	ldr	r3, [pc, #160]	@ (800d59c <vTaskSwitchContext+0xa8>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d003      	beq.n	800d50a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d502:	4b27      	ldr	r3, [pc, #156]	@ (800d5a0 <vTaskSwitchContext+0xac>)
 800d504:	2201      	movs	r2, #1
 800d506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d508:	e042      	b.n	800d590 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d50a:	4b25      	ldr	r3, [pc, #148]	@ (800d5a0 <vTaskSwitchContext+0xac>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d510:	4b24      	ldr	r3, [pc, #144]	@ (800d5a4 <vTaskSwitchContext+0xb0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	e011      	b.n	800d53c <vTaskSwitchContext+0x48>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10b      	bne.n	800d536 <vTaskSwitchContext+0x42>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	607b      	str	r3, [r7, #4]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <vTaskSwitchContext+0x3e>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3b01      	subs	r3, #1
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	491a      	ldr	r1, [pc, #104]	@ (800d5a8 <vTaskSwitchContext+0xb4>)
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	4613      	mov	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4413      	add	r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	440b      	add	r3, r1
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d0e3      	beq.n	800d518 <vTaskSwitchContext+0x24>
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	4613      	mov	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4a13      	ldr	r2, [pc, #76]	@ (800d5a8 <vTaskSwitchContext+0xb4>)
 800d55c:	4413      	add	r3, r2
 800d55e:	60bb      	str	r3, [r7, #8]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	605a      	str	r2, [r3, #4]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	685a      	ldr	r2, [r3, #4]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	3308      	adds	r3, #8
 800d572:	429a      	cmp	r2, r3
 800d574:	d104      	bne.n	800d580 <vTaskSwitchContext+0x8c>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	685a      	ldr	r2, [r3, #4]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	605a      	str	r2, [r3, #4]
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	4a09      	ldr	r2, [pc, #36]	@ (800d5ac <vTaskSwitchContext+0xb8>)
 800d588:	6013      	str	r3, [r2, #0]
 800d58a:	4a06      	ldr	r2, [pc, #24]	@ (800d5a4 <vTaskSwitchContext+0xb0>)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6013      	str	r3, [r2, #0]
}
 800d590:	bf00      	nop
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	2400e488 	.word	0x2400e488
 800d5a0:	2400e474 	.word	0x2400e474
 800d5a4:	2400e468 	.word	0x2400e468
 800d5a8:	2400df90 	.word	0x2400df90
 800d5ac:	2400df8c 	.word	0x2400df8c

0800d5b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10b      	bne.n	800d5d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	60fb      	str	r3, [r7, #12]
}
 800d5d2:	bf00      	nop
 800d5d4:	bf00      	nop
 800d5d6:	e7fd      	b.n	800d5d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5d8:	4b07      	ldr	r3, [pc, #28]	@ (800d5f8 <vTaskPlaceOnEventList+0x48>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3318      	adds	r3, #24
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7fe fc1c 	bl	800be1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5e6:	2101      	movs	r1, #1
 800d5e8:	6838      	ldr	r0, [r7, #0]
 800d5ea:	f000 faa9 	bl	800db40 <prvAddCurrentTaskToDelayedList>
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	2400df8c 	.word	0x2400df8c

0800d5fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10b      	bne.n	800d626 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	617b      	str	r3, [r7, #20]
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	e7fd      	b.n	800d622 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d626:	4b0a      	ldr	r3, [pc, #40]	@ (800d650 <vTaskPlaceOnEventListRestricted+0x54>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3318      	adds	r3, #24
 800d62c:	4619      	mov	r1, r3
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7fe fbd1 	bl	800bdd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d63a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d63e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	68b8      	ldr	r0, [r7, #8]
 800d644:	f000 fa7c 	bl	800db40 <prvAddCurrentTaskToDelayedList>
	}
 800d648:	bf00      	nop
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	2400df8c 	.word	0x2400df8c

0800d654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10b      	bne.n	800d682 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	60fb      	str	r3, [r7, #12]
}
 800d67c:	bf00      	nop
 800d67e:	bf00      	nop
 800d680:	e7fd      	b.n	800d67e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	3318      	adds	r3, #24
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe fc02 	bl	800be90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d68c:	4b1d      	ldr	r3, [pc, #116]	@ (800d704 <xTaskRemoveFromEventList+0xb0>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d11d      	bne.n	800d6d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	3304      	adds	r3, #4
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fe fbf9 	bl	800be90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6a2:	4b19      	ldr	r3, [pc, #100]	@ (800d708 <xTaskRemoveFromEventList+0xb4>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d903      	bls.n	800d6b2 <xTaskRemoveFromEventList+0x5e>
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ae:	4a16      	ldr	r2, [pc, #88]	@ (800d708 <xTaskRemoveFromEventList+0xb4>)
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4a13      	ldr	r2, [pc, #76]	@ (800d70c <xTaskRemoveFromEventList+0xb8>)
 800d6c0:	441a      	add	r2, r3
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	f7fe fb84 	bl	800bdd6 <vListInsertEnd>
 800d6ce:	e005      	b.n	800d6dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	3318      	adds	r3, #24
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	480e      	ldr	r0, [pc, #56]	@ (800d710 <xTaskRemoveFromEventList+0xbc>)
 800d6d8:	f7fe fb7d 	bl	800bdd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d714 <xTaskRemoveFromEventList+0xc0>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d905      	bls.n	800d6f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d718 <xTaskRemoveFromEventList+0xc4>)
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e001      	b.n	800d6fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6fa:	697b      	ldr	r3, [r7, #20]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	2400e488 	.word	0x2400e488
 800d708:	2400e468 	.word	0x2400e468
 800d70c:	2400df90 	.word	0x2400df90
 800d710:	2400e420 	.word	0x2400e420
 800d714:	2400df8c 	.word	0x2400df8c
 800d718:	2400e474 	.word	0x2400e474

0800d71c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10b      	bne.n	800d742 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	60fb      	str	r3, [r7, #12]
}
 800d73c:	bf00      	nop
 800d73e:	bf00      	nop
 800d740:	e7fd      	b.n	800d73e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d742:	f7fe fd01 	bl	800c148 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d746:	4b07      	ldr	r3, [pc, #28]	@ (800d764 <vTaskSetTimeOutState+0x48>)
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d74e:	4b06      	ldr	r3, [pc, #24]	@ (800d768 <vTaskSetTimeOutState+0x4c>)
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d756:	f7fe fd29 	bl	800c1ac <vPortExitCritical>
}
 800d75a:	bf00      	nop
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	2400e478 	.word	0x2400e478
 800d768:	2400e464 	.word	0x2400e464

0800d76c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d774:	4b06      	ldr	r3, [pc, #24]	@ (800d790 <vTaskInternalSetTimeOutState+0x24>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d77c:	4b05      	ldr	r3, [pc, #20]	@ (800d794 <vTaskInternalSetTimeOutState+0x28>)
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	605a      	str	r2, [r3, #4]
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	2400e478 	.word	0x2400e478
 800d794:	2400e464 	.word	0x2400e464

0800d798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10b      	bne.n	800d7c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	613b      	str	r3, [r7, #16]
}
 800d7ba:	bf00      	nop
 800d7bc:	bf00      	nop
 800d7be:	e7fd      	b.n	800d7bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10b      	bne.n	800d7de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ca:	f383 8811 	msr	BASEPRI, r3
 800d7ce:	f3bf 8f6f 	isb	sy
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	60fb      	str	r3, [r7, #12]
}
 800d7d8:	bf00      	nop
 800d7da:	bf00      	nop
 800d7dc:	e7fd      	b.n	800d7da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d7de:	f7fe fcb3 	bl	800c148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d7e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d858 <xTaskCheckForTimeOut+0xc0>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7fa:	d102      	bne.n	800d802 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61fb      	str	r3, [r7, #28]
 800d800:	e023      	b.n	800d84a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	4b15      	ldr	r3, [pc, #84]	@ (800d85c <xTaskCheckForTimeOut+0xc4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d007      	beq.n	800d81e <xTaskCheckForTimeOut+0x86>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	69ba      	ldr	r2, [r7, #24]
 800d814:	429a      	cmp	r2, r3
 800d816:	d302      	bcc.n	800d81e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d818:	2301      	movs	r3, #1
 800d81a:	61fb      	str	r3, [r7, #28]
 800d81c:	e015      	b.n	800d84a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	697a      	ldr	r2, [r7, #20]
 800d824:	429a      	cmp	r2, r3
 800d826:	d20b      	bcs.n	800d840 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff ff99 	bl	800d76c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d83a:	2300      	movs	r3, #0
 800d83c:	61fb      	str	r3, [r7, #28]
 800d83e:	e004      	b.n	800d84a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d846:	2301      	movs	r3, #1
 800d848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d84a:	f7fe fcaf 	bl	800c1ac <vPortExitCritical>

	return xReturn;
 800d84e:	69fb      	ldr	r3, [r7, #28]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3720      	adds	r7, #32
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	2400e464 	.word	0x2400e464
 800d85c:	2400e478 	.word	0x2400e478

0800d860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d860:	b480      	push	{r7}
 800d862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d864:	4b03      	ldr	r3, [pc, #12]	@ (800d874 <vTaskMissedYield+0x14>)
 800d866:	2201      	movs	r2, #1
 800d868:	601a      	str	r2, [r3, #0]
}
 800d86a:	bf00      	nop
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr
 800d874:	2400e474 	.word	0x2400e474

0800d878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d880:	f000 f852 	bl	800d928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d884:	4b06      	ldr	r3, [pc, #24]	@ (800d8a0 <prvIdleTask+0x28>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d9f9      	bls.n	800d880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d88c:	4b05      	ldr	r3, [pc, #20]	@ (800d8a4 <prvIdleTask+0x2c>)
 800d88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d89c:	e7f0      	b.n	800d880 <prvIdleTask+0x8>
 800d89e:	bf00      	nop
 800d8a0:	2400df90 	.word	0x2400df90
 800d8a4:	e000ed04 	.word	0xe000ed04

0800d8a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	607b      	str	r3, [r7, #4]
 800d8b2:	e00c      	b.n	800d8ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4a12      	ldr	r2, [pc, #72]	@ (800d908 <prvInitialiseTaskLists+0x60>)
 800d8c0:	4413      	add	r3, r2
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fe fa5a 	bl	800bd7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	607b      	str	r3, [r7, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b37      	cmp	r3, #55	@ 0x37
 800d8d2:	d9ef      	bls.n	800d8b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d8d4:	480d      	ldr	r0, [pc, #52]	@ (800d90c <prvInitialiseTaskLists+0x64>)
 800d8d6:	f7fe fa51 	bl	800bd7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d8da:	480d      	ldr	r0, [pc, #52]	@ (800d910 <prvInitialiseTaskLists+0x68>)
 800d8dc:	f7fe fa4e 	bl	800bd7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d8e0:	480c      	ldr	r0, [pc, #48]	@ (800d914 <prvInitialiseTaskLists+0x6c>)
 800d8e2:	f7fe fa4b 	bl	800bd7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d8e6:	480c      	ldr	r0, [pc, #48]	@ (800d918 <prvInitialiseTaskLists+0x70>)
 800d8e8:	f7fe fa48 	bl	800bd7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d8ec:	480b      	ldr	r0, [pc, #44]	@ (800d91c <prvInitialiseTaskLists+0x74>)
 800d8ee:	f7fe fa45 	bl	800bd7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d8f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d920 <prvInitialiseTaskLists+0x78>)
 800d8f4:	4a05      	ldr	r2, [pc, #20]	@ (800d90c <prvInitialiseTaskLists+0x64>)
 800d8f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d924 <prvInitialiseTaskLists+0x7c>)
 800d8fa:	4a05      	ldr	r2, [pc, #20]	@ (800d910 <prvInitialiseTaskLists+0x68>)
 800d8fc:	601a      	str	r2, [r3, #0]
}
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	2400df90 	.word	0x2400df90
 800d90c:	2400e3f0 	.word	0x2400e3f0
 800d910:	2400e404 	.word	0x2400e404
 800d914:	2400e420 	.word	0x2400e420
 800d918:	2400e434 	.word	0x2400e434
 800d91c:	2400e44c 	.word	0x2400e44c
 800d920:	2400e418 	.word	0x2400e418
 800d924:	2400e41c 	.word	0x2400e41c

0800d928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d92e:	e019      	b.n	800d964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d930:	f7fe fc0a 	bl	800c148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d934:	4b10      	ldr	r3, [pc, #64]	@ (800d978 <prvCheckTasksWaitingTermination+0x50>)
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	3304      	adds	r3, #4
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe faa5 	bl	800be90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d946:	4b0d      	ldr	r3, [pc, #52]	@ (800d97c <prvCheckTasksWaitingTermination+0x54>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	4a0b      	ldr	r2, [pc, #44]	@ (800d97c <prvCheckTasksWaitingTermination+0x54>)
 800d94e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d950:	4b0b      	ldr	r3, [pc, #44]	@ (800d980 <prvCheckTasksWaitingTermination+0x58>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3b01      	subs	r3, #1
 800d956:	4a0a      	ldr	r2, [pc, #40]	@ (800d980 <prvCheckTasksWaitingTermination+0x58>)
 800d958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d95a:	f7fe fc27 	bl	800c1ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f810 	bl	800d984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d964:	4b06      	ldr	r3, [pc, #24]	@ (800d980 <prvCheckTasksWaitingTermination+0x58>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1e1      	bne.n	800d930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d96c:	bf00      	nop
 800d96e:	bf00      	nop
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	2400e434 	.word	0x2400e434
 800d97c:	2400e460 	.word	0x2400e460
 800d980:	2400e448 	.word	0x2400e448

0800d984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d992:	2b00      	cmp	r3, #0
 800d994:	d108      	bne.n	800d9a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fe f8ce 	bl	800bb3c <vPortFree>
				vPortFree( pxTCB );
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7fe f8cb 	bl	800bb3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9a6:	e019      	b.n	800d9dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d103      	bne.n	800d9ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7fe f8c2 	bl	800bb3c <vPortFree>
	}
 800d9b8:	e010      	b.n	800d9dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	d00b      	beq.n	800d9dc <prvDeleteTCB+0x58>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	60fb      	str	r3, [r7, #12]
}
 800d9d6:	bf00      	nop
 800d9d8:	bf00      	nop
 800d9da:	e7fd      	b.n	800d9d8 <prvDeleteTCB+0x54>
	}
 800d9dc:	bf00      	nop
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800da1c <prvResetNextTaskUnblockTime+0x38>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d104      	bne.n	800d9fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800da20 <prvResetNextTaskUnblockTime+0x3c>)
 800d9f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d9fc:	e008      	b.n	800da10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9fe:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <prvResetNextTaskUnblockTime+0x38>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	4a04      	ldr	r2, [pc, #16]	@ (800da20 <prvResetNextTaskUnblockTime+0x3c>)
 800da0e:	6013      	str	r3, [r2, #0]
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr
 800da1c:	2400e418 	.word	0x2400e418
 800da20:	2400e480 	.word	0x2400e480

0800da24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da2a:	4b0b      	ldr	r3, [pc, #44]	@ (800da58 <xTaskGetSchedulerState+0x34>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da32:	2301      	movs	r3, #1
 800da34:	607b      	str	r3, [r7, #4]
 800da36:	e008      	b.n	800da4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da38:	4b08      	ldr	r3, [pc, #32]	@ (800da5c <xTaskGetSchedulerState+0x38>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d102      	bne.n	800da46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da40:	2302      	movs	r3, #2
 800da42:	607b      	str	r3, [r7, #4]
 800da44:	e001      	b.n	800da4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da46:	2300      	movs	r3, #0
 800da48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da4a:	687b      	ldr	r3, [r7, #4]
	}
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	2400e46c 	.word	0x2400e46c
 800da5c:	2400e488 	.word	0x2400e488

0800da60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da6c:	2300      	movs	r3, #0
 800da6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d058      	beq.n	800db28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da76:	4b2f      	ldr	r3, [pc, #188]	@ (800db34 <xTaskPriorityDisinherit+0xd4>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d00b      	beq.n	800da98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	bf00      	nop
 800da96:	e7fd      	b.n	800da94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10b      	bne.n	800dab8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	60bb      	str	r3, [r7, #8]
}
 800dab2:	bf00      	nop
 800dab4:	bf00      	nop
 800dab6:	e7fd      	b.n	800dab4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dabc:	1e5a      	subs	r2, r3, #1
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daca:	429a      	cmp	r2, r3
 800dacc:	d02c      	beq.n	800db28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d128      	bne.n	800db28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	3304      	adds	r3, #4
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe f9d8 	bl	800be90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf8:	4b0f      	ldr	r3, [pc, #60]	@ (800db38 <xTaskPriorityDisinherit+0xd8>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d903      	bls.n	800db08 <xTaskPriorityDisinherit+0xa8>
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db04:	4a0c      	ldr	r2, [pc, #48]	@ (800db38 <xTaskPriorityDisinherit+0xd8>)
 800db06:	6013      	str	r3, [r2, #0]
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4a09      	ldr	r2, [pc, #36]	@ (800db3c <xTaskPriorityDisinherit+0xdc>)
 800db16:	441a      	add	r2, r3
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f7fe f959 	bl	800bdd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db24:	2301      	movs	r3, #1
 800db26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db28:	697b      	ldr	r3, [r7, #20]
	}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3718      	adds	r7, #24
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	2400df8c 	.word	0x2400df8c
 800db38:	2400e468 	.word	0x2400e468
 800db3c:	2400df90 	.word	0x2400df90

0800db40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db4a:	4b21      	ldr	r3, [pc, #132]	@ (800dbd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db50:	4b20      	ldr	r3, [pc, #128]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3304      	adds	r3, #4
 800db56:	4618      	mov	r0, r3
 800db58:	f7fe f99a 	bl	800be90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db62:	d10a      	bne.n	800db7a <prvAddCurrentTaskToDelayedList+0x3a>
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d007      	beq.n	800db7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db6a:	4b1a      	ldr	r3, [pc, #104]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	3304      	adds	r3, #4
 800db70:	4619      	mov	r1, r3
 800db72:	4819      	ldr	r0, [pc, #100]	@ (800dbd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800db74:	f7fe f92f 	bl	800bdd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db78:	e026      	b.n	800dbc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4413      	add	r3, r2
 800db80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db82:	4b14      	ldr	r3, [pc, #80]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68ba      	ldr	r2, [r7, #8]
 800db88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d209      	bcs.n	800dba6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db92:	4b12      	ldr	r3, [pc, #72]	@ (800dbdc <prvAddCurrentTaskToDelayedList+0x9c>)
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	4b0f      	ldr	r3, [pc, #60]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	3304      	adds	r3, #4
 800db9c:	4619      	mov	r1, r3
 800db9e:	4610      	mov	r0, r2
 800dba0:	f7fe f93d 	bl	800be1e <vListInsert>
}
 800dba4:	e010      	b.n	800dbc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dba6:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	4b0a      	ldr	r3, [pc, #40]	@ (800dbd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	f7fe f933 	bl	800be1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d202      	bcs.n	800dbc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dbc2:	4a08      	ldr	r2, [pc, #32]	@ (800dbe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	6013      	str	r3, [r2, #0]
}
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	2400e464 	.word	0x2400e464
 800dbd4:	2400df8c 	.word	0x2400df8c
 800dbd8:	2400e44c 	.word	0x2400e44c
 800dbdc:	2400e41c 	.word	0x2400e41c
 800dbe0:	2400e418 	.word	0x2400e418
 800dbe4:	2400e480 	.word	0x2400e480

0800dbe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08a      	sub	sp, #40	@ 0x28
 800dbec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dbf2:	f000 fb13 	bl	800e21c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dbf6:	4b1d      	ldr	r3, [pc, #116]	@ (800dc6c <xTimerCreateTimerTask+0x84>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d021      	beq.n	800dc42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc02:	2300      	movs	r3, #0
 800dc04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc06:	1d3a      	adds	r2, r7, #4
 800dc08:	f107 0108 	add.w	r1, r7, #8
 800dc0c:	f107 030c 	add.w	r3, r7, #12
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fd feab 	bl	800b96c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc16:	6879      	ldr	r1, [r7, #4]
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	9202      	str	r2, [sp, #8]
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	2302      	movs	r3, #2
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	2300      	movs	r3, #0
 800dc26:	460a      	mov	r2, r1
 800dc28:	4911      	ldr	r1, [pc, #68]	@ (800dc70 <xTimerCreateTimerTask+0x88>)
 800dc2a:	4812      	ldr	r0, [pc, #72]	@ (800dc74 <xTimerCreateTimerTask+0x8c>)
 800dc2c:	f7ff f8a8 	bl	800cd80 <xTaskCreateStatic>
 800dc30:	4603      	mov	r3, r0
 800dc32:	4a11      	ldr	r2, [pc, #68]	@ (800dc78 <xTimerCreateTimerTask+0x90>)
 800dc34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc36:	4b10      	ldr	r3, [pc, #64]	@ (800dc78 <xTimerCreateTimerTask+0x90>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10b      	bne.n	800dc60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	613b      	str	r3, [r7, #16]
}
 800dc5a:	bf00      	nop
 800dc5c:	bf00      	nop
 800dc5e:	e7fd      	b.n	800dc5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dc60:	697b      	ldr	r3, [r7, #20]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3718      	adds	r7, #24
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2400e4bc 	.word	0x2400e4bc
 800dc70:	0801cd88 	.word	0x0801cd88
 800dc74:	0800ddb5 	.word	0x0800ddb5
 800dc78:	2400e4c0 	.word	0x2400e4c0

0800dc7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08a      	sub	sp, #40	@ 0x28
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10b      	bne.n	800dcac <xTimerGenericCommand+0x30>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	623b      	str	r3, [r7, #32]
}
 800dca6:	bf00      	nop
 800dca8:	bf00      	nop
 800dcaa:	e7fd      	b.n	800dca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dcac:	4b19      	ldr	r3, [pc, #100]	@ (800dd14 <xTimerGenericCommand+0x98>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d02a      	beq.n	800dd0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	2b05      	cmp	r3, #5
 800dcc4:	dc18      	bgt.n	800dcf8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dcc6:	f7ff fead 	bl	800da24 <xTaskGetSchedulerState>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d109      	bne.n	800dce4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dcd0:	4b10      	ldr	r3, [pc, #64]	@ (800dd14 <xTimerGenericCommand+0x98>)
 800dcd2:	6818      	ldr	r0, [r3, #0]
 800dcd4:	f107 0110 	add.w	r1, r7, #16
 800dcd8:	2300      	movs	r3, #0
 800dcda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcdc:	f7fe fc60 	bl	800c5a0 <xQueueGenericSend>
 800dce0:	6278      	str	r0, [r7, #36]	@ 0x24
 800dce2:	e012      	b.n	800dd0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dce4:	4b0b      	ldr	r3, [pc, #44]	@ (800dd14 <xTimerGenericCommand+0x98>)
 800dce6:	6818      	ldr	r0, [r3, #0]
 800dce8:	f107 0110 	add.w	r1, r7, #16
 800dcec:	2300      	movs	r3, #0
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f7fe fc56 	bl	800c5a0 <xQueueGenericSend>
 800dcf4:	6278      	str	r0, [r7, #36]	@ 0x24
 800dcf6:	e008      	b.n	800dd0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dcf8:	4b06      	ldr	r3, [pc, #24]	@ (800dd14 <xTimerGenericCommand+0x98>)
 800dcfa:	6818      	ldr	r0, [r3, #0]
 800dcfc:	f107 0110 	add.w	r1, r7, #16
 800dd00:	2300      	movs	r3, #0
 800dd02:	683a      	ldr	r2, [r7, #0]
 800dd04:	f7fe fd4e 	bl	800c7a4 <xQueueGenericSendFromISR>
 800dd08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3728      	adds	r7, #40	@ 0x28
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	2400e4bc 	.word	0x2400e4bc

0800dd18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af02      	add	r7, sp, #8
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd22:	4b23      	ldr	r3, [pc, #140]	@ (800ddb0 <prvProcessExpiredTimer+0x98>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe f8ad 	bl	800be90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd3c:	f003 0304 	and.w	r3, r3, #4
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d023      	beq.n	800dd8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	699a      	ldr	r2, [r3, #24]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	18d1      	adds	r1, r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	6978      	ldr	r0, [r7, #20]
 800dd52:	f000 f8d5 	bl	800df00 <prvInsertTimerInActiveList>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d020      	beq.n	800dd9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	2300      	movs	r3, #0
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	2100      	movs	r1, #0
 800dd66:	6978      	ldr	r0, [r7, #20]
 800dd68:	f7ff ff88 	bl	800dc7c <xTimerGenericCommand>
 800dd6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d114      	bne.n	800dd9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	60fb      	str	r3, [r7, #12]
}
 800dd86:	bf00      	nop
 800dd88:	bf00      	nop
 800dd8a:	e7fd      	b.n	800dd88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd92:	f023 0301 	bic.w	r3, r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	6978      	ldr	r0, [r7, #20]
 800dda4:	4798      	blx	r3
}
 800dda6:	bf00      	nop
 800dda8:	3718      	adds	r7, #24
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	2400e4b4 	.word	0x2400e4b4

0800ddb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ddbc:	f107 0308 	add.w	r3, r7, #8
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 f859 	bl	800de78 <prvGetNextExpireTime>
 800ddc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f000 f805 	bl	800dddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ddd2:	f000 f8d7 	bl	800df84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ddd6:	bf00      	nop
 800ddd8:	e7f0      	b.n	800ddbc <prvTimerTask+0x8>
	...

0800dddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dde6:	f7ff fa0f 	bl	800d208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddea:	f107 0308 	add.w	r3, r7, #8
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 f866 	bl	800dec0 <prvSampleTimeNow>
 800ddf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d130      	bne.n	800de5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10a      	bne.n	800de18 <prvProcessTimerOrBlockTask+0x3c>
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	429a      	cmp	r2, r3
 800de08:	d806      	bhi.n	800de18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de0a:	f7ff fa0b 	bl	800d224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de0e:	68f9      	ldr	r1, [r7, #12]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ff81 	bl	800dd18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de16:	e024      	b.n	800de62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d008      	beq.n	800de30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de1e:	4b13      	ldr	r3, [pc, #76]	@ (800de6c <prvProcessTimerOrBlockTask+0x90>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <prvProcessTimerOrBlockTask+0x50>
 800de28:	2301      	movs	r3, #1
 800de2a:	e000      	b.n	800de2e <prvProcessTimerOrBlockTask+0x52>
 800de2c:	2300      	movs	r3, #0
 800de2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de30:	4b0f      	ldr	r3, [pc, #60]	@ (800de70 <prvProcessTimerOrBlockTask+0x94>)
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	4619      	mov	r1, r3
 800de3e:	f7fe ff6b 	bl	800cd18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de42:	f7ff f9ef 	bl	800d224 <xTaskResumeAll>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10a      	bne.n	800de62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de4c:	4b09      	ldr	r3, [pc, #36]	@ (800de74 <prvProcessTimerOrBlockTask+0x98>)
 800de4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	f3bf 8f6f 	isb	sy
}
 800de5c:	e001      	b.n	800de62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de5e:	f7ff f9e1 	bl	800d224 <xTaskResumeAll>
}
 800de62:	bf00      	nop
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	2400e4b8 	.word	0x2400e4b8
 800de70:	2400e4bc 	.word	0x2400e4bc
 800de74:	e000ed04 	.word	0xe000ed04

0800de78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de80:	4b0e      	ldr	r3, [pc, #56]	@ (800debc <prvGetNextExpireTime+0x44>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <prvGetNextExpireTime+0x16>
 800de8a:	2201      	movs	r2, #1
 800de8c:	e000      	b.n	800de90 <prvGetNextExpireTime+0x18>
 800de8e:	2200      	movs	r2, #0
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d105      	bne.n	800dea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de9c:	4b07      	ldr	r3, [pc, #28]	@ (800debc <prvGetNextExpireTime+0x44>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	e001      	b.n	800deac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800deac:	68fb      	ldr	r3, [r7, #12]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3714      	adds	r7, #20
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	2400e4b4 	.word	0x2400e4b4

0800dec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dec8:	f7ff fa4a 	bl	800d360 <xTaskGetTickCount>
 800decc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dece:	4b0b      	ldr	r3, [pc, #44]	@ (800defc <prvSampleTimeNow+0x3c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d205      	bcs.n	800dee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ded8:	f000 f93a 	bl	800e150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	601a      	str	r2, [r3, #0]
 800dee2:	e002      	b.n	800deea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800deea:	4a04      	ldr	r2, [pc, #16]	@ (800defc <prvSampleTimeNow+0x3c>)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800def0:	68fb      	ldr	r3, [r7, #12]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	2400e4c4 	.word	0x2400e4c4

0800df00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df0e:	2300      	movs	r3, #0
 800df10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	429a      	cmp	r2, r3
 800df24:	d812      	bhi.n	800df4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	1ad2      	subs	r2, r2, r3
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	429a      	cmp	r2, r3
 800df32:	d302      	bcc.n	800df3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800df34:	2301      	movs	r3, #1
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e01b      	b.n	800df72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df3a:	4b10      	ldr	r3, [pc, #64]	@ (800df7c <prvInsertTimerInActiveList+0x7c>)
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3304      	adds	r3, #4
 800df42:	4619      	mov	r1, r3
 800df44:	4610      	mov	r0, r2
 800df46:	f7fd ff6a 	bl	800be1e <vListInsert>
 800df4a:	e012      	b.n	800df72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	429a      	cmp	r2, r3
 800df52:	d206      	bcs.n	800df62 <prvInsertTimerInActiveList+0x62>
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d302      	bcc.n	800df62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
 800df60:	e007      	b.n	800df72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df62:	4b07      	ldr	r3, [pc, #28]	@ (800df80 <prvInsertTimerInActiveList+0x80>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fd ff56 	bl	800be1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df72:	697b      	ldr	r3, [r7, #20]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3718      	adds	r7, #24
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	2400e4b8 	.word	0x2400e4b8
 800df80:	2400e4b4 	.word	0x2400e4b4

0800df84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08e      	sub	sp, #56	@ 0x38
 800df88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df8a:	e0ce      	b.n	800e12a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	da19      	bge.n	800dfc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df92:	1d3b      	adds	r3, r7, #4
 800df94:	3304      	adds	r3, #4
 800df96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10b      	bne.n	800dfb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	61fb      	str	r3, [r7, #28]
}
 800dfb0:	bf00      	nop
 800dfb2:	bf00      	nop
 800dfb4:	e7fd      	b.n	800dfb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfbc:	6850      	ldr	r0, [r2, #4]
 800dfbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfc0:	6892      	ldr	r2, [r2, #8]
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f2c0 80ae 	blt.w	800e12a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d004      	beq.n	800dfe4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfdc:	3304      	adds	r3, #4
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fd ff56 	bl	800be90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfe4:	463b      	mov	r3, r7
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7ff ff6a 	bl	800dec0 <prvSampleTimeNow>
 800dfec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b09      	cmp	r3, #9
 800dff2:	f200 8097 	bhi.w	800e124 <prvProcessReceivedCommands+0x1a0>
 800dff6:	a201      	add	r2, pc, #4	@ (adr r2, 800dffc <prvProcessReceivedCommands+0x78>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e025 	.word	0x0800e025
 800e000:	0800e025 	.word	0x0800e025
 800e004:	0800e025 	.word	0x0800e025
 800e008:	0800e09b 	.word	0x0800e09b
 800e00c:	0800e0af 	.word	0x0800e0af
 800e010:	0800e0fb 	.word	0x0800e0fb
 800e014:	0800e025 	.word	0x0800e025
 800e018:	0800e025 	.word	0x0800e025
 800e01c:	0800e09b 	.word	0x0800e09b
 800e020:	0800e0af 	.word	0x0800e0af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e02a:	f043 0301 	orr.w	r3, r3, #1
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e036:	68ba      	ldr	r2, [r7, #8]
 800e038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	18d1      	adds	r1, r2, r3
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e044:	f7ff ff5c 	bl	800df00 <prvInsertTimerInActiveList>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d06c      	beq.n	800e128 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e05c:	f003 0304 	and.w	r3, r3, #4
 800e060:	2b00      	cmp	r3, #0
 800e062:	d061      	beq.n	800e128 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	441a      	add	r2, r3
 800e06c:	2300      	movs	r3, #0
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	2300      	movs	r3, #0
 800e072:	2100      	movs	r1, #0
 800e074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e076:	f7ff fe01 	bl	800dc7c <xTimerGenericCommand>
 800e07a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d152      	bne.n	800e128 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	61bb      	str	r3, [r7, #24]
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop
 800e098:	e7fd      	b.n	800e096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0a0:	f023 0301 	bic.w	r3, r3, #1
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0ac:	e03d      	b.n	800e12a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0b4:	f043 0301 	orr.w	r3, r3, #1
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c8:	699b      	ldr	r3, [r3, #24]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10b      	bne.n	800e0e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	617b      	str	r3, [r7, #20]
}
 800e0e0:	bf00      	nop
 800e0e2:	bf00      	nop
 800e0e4:	e7fd      	b.n	800e0e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e8:	699a      	ldr	r2, [r3, #24]
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ec:	18d1      	adds	r1, r2, r3
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0f4:	f7ff ff04 	bl	800df00 <prvInsertTimerInActiveList>
					break;
 800e0f8:	e017      	b.n	800e12a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e100:	f003 0302 	and.w	r3, r3, #2
 800e104:	2b00      	cmp	r3, #0
 800e106:	d103      	bne.n	800e110 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e10a:	f7fd fd17 	bl	800bb3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e10e:	e00c      	b.n	800e12a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e112:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e116:	f023 0301 	bic.w	r3, r3, #1
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e122:	e002      	b.n	800e12a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e124:	bf00      	nop
 800e126:	e000      	b.n	800e12a <prvProcessReceivedCommands+0x1a6>
					break;
 800e128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e12a:	4b08      	ldr	r3, [pc, #32]	@ (800e14c <prvProcessReceivedCommands+0x1c8>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	1d39      	adds	r1, r7, #4
 800e130:	2200      	movs	r2, #0
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe fbd4 	bl	800c8e0 <xQueueReceive>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f47f af26 	bne.w	800df8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e140:	bf00      	nop
 800e142:	bf00      	nop
 800e144:	3730      	adds	r7, #48	@ 0x30
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	2400e4bc 	.word	0x2400e4bc

0800e150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e156:	e049      	b.n	800e1ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e158:	4b2e      	ldr	r3, [pc, #184]	@ (800e214 <prvSwitchTimerLists+0xc4>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e162:	4b2c      	ldr	r3, [pc, #176]	@ (800e214 <prvSwitchTimerLists+0xc4>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	3304      	adds	r3, #4
 800e170:	4618      	mov	r0, r3
 800e172:	f7fd fe8d 	bl	800be90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6a1b      	ldr	r3, [r3, #32]
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e184:	f003 0304 	and.w	r3, r3, #4
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d02f      	beq.n	800e1ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	4413      	add	r3, r2
 800e194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d90e      	bls.n	800e1bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1aa:	4b1a      	ldr	r3, [pc, #104]	@ (800e214 <prvSwitchTimerLists+0xc4>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	f7fd fe32 	bl	800be1e <vListInsert>
 800e1ba:	e017      	b.n	800e1ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	693a      	ldr	r2, [r7, #16]
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f7ff fd58 	bl	800dc7c <xTimerGenericCommand>
 800e1cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10b      	bne.n	800e1ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	603b      	str	r3, [r7, #0]
}
 800e1e6:	bf00      	nop
 800e1e8:	bf00      	nop
 800e1ea:	e7fd      	b.n	800e1e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1ec:	4b09      	ldr	r3, [pc, #36]	@ (800e214 <prvSwitchTimerLists+0xc4>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1b0      	bne.n	800e158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1f6:	4b07      	ldr	r3, [pc, #28]	@ (800e214 <prvSwitchTimerLists+0xc4>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1fc:	4b06      	ldr	r3, [pc, #24]	@ (800e218 <prvSwitchTimerLists+0xc8>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a04      	ldr	r2, [pc, #16]	@ (800e214 <prvSwitchTimerLists+0xc4>)
 800e202:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e204:	4a04      	ldr	r2, [pc, #16]	@ (800e218 <prvSwitchTimerLists+0xc8>)
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6013      	str	r3, [r2, #0]
}
 800e20a:	bf00      	nop
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	2400e4b4 	.word	0x2400e4b4
 800e218:	2400e4b8 	.word	0x2400e4b8

0800e21c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e222:	f7fd ff91 	bl	800c148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e226:	4b15      	ldr	r3, [pc, #84]	@ (800e27c <prvCheckForValidListAndQueue+0x60>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d120      	bne.n	800e270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e22e:	4814      	ldr	r0, [pc, #80]	@ (800e280 <prvCheckForValidListAndQueue+0x64>)
 800e230:	f7fd fda4 	bl	800bd7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e234:	4813      	ldr	r0, [pc, #76]	@ (800e284 <prvCheckForValidListAndQueue+0x68>)
 800e236:	f7fd fda1 	bl	800bd7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e23a:	4b13      	ldr	r3, [pc, #76]	@ (800e288 <prvCheckForValidListAndQueue+0x6c>)
 800e23c:	4a10      	ldr	r2, [pc, #64]	@ (800e280 <prvCheckForValidListAndQueue+0x64>)
 800e23e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e240:	4b12      	ldr	r3, [pc, #72]	@ (800e28c <prvCheckForValidListAndQueue+0x70>)
 800e242:	4a10      	ldr	r2, [pc, #64]	@ (800e284 <prvCheckForValidListAndQueue+0x68>)
 800e244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e246:	2300      	movs	r3, #0
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	4b11      	ldr	r3, [pc, #68]	@ (800e290 <prvCheckForValidListAndQueue+0x74>)
 800e24c:	4a11      	ldr	r2, [pc, #68]	@ (800e294 <prvCheckForValidListAndQueue+0x78>)
 800e24e:	2110      	movs	r1, #16
 800e250:	200a      	movs	r0, #10
 800e252:	f7fe f905 	bl	800c460 <xQueueGenericCreateStatic>
 800e256:	4603      	mov	r3, r0
 800e258:	4a08      	ldr	r2, [pc, #32]	@ (800e27c <prvCheckForValidListAndQueue+0x60>)
 800e25a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e25c:	4b07      	ldr	r3, [pc, #28]	@ (800e27c <prvCheckForValidListAndQueue+0x60>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e264:	4b05      	ldr	r3, [pc, #20]	@ (800e27c <prvCheckForValidListAndQueue+0x60>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	490b      	ldr	r1, [pc, #44]	@ (800e298 <prvCheckForValidListAndQueue+0x7c>)
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fd2a 	bl	800ccc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e270:	f7fd ff9c 	bl	800c1ac <vPortExitCritical>
}
 800e274:	bf00      	nop
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	2400e4bc 	.word	0x2400e4bc
 800e280:	2400e48c 	.word	0x2400e48c
 800e284:	2400e4a0 	.word	0x2400e4a0
 800e288:	2400e4b4 	.word	0x2400e4b4
 800e28c:	2400e4b8 	.word	0x2400e4b8
 800e290:	2400e568 	.word	0x2400e568
 800e294:	2400e4c8 	.word	0x2400e4c8
 800e298:	0801cd90 	.word	0x0801cd90

0800e29c <rcl_get_zero_initialized_init_options>:
 800e29c:	2000      	movs	r0, #0
 800e29e:	4770      	bx	lr

0800e2a0 <rcl_init_options_init>:
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a4:	b097      	sub	sp, #92	@ 0x5c
 800e2a6:	ae1d      	add	r6, sp, #116	@ 0x74
 800e2a8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d058      	beq.n	800e362 <rcl_init_options_init+0xc2>
 800e2b0:	6803      	ldr	r3, [r0, #0]
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	b133      	cbz	r3, 800e2c4 <rcl_init_options_init+0x24>
 800e2b6:	2464      	movs	r4, #100	@ 0x64
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	b017      	add	sp, #92	@ 0x5c
 800e2bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e2c0:	b004      	add	sp, #16
 800e2c2:	4770      	bx	lr
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f001 f953 	bl	800f570 <rcutils_allocator_is_valid>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d049      	beq.n	800e362 <rcl_init_options_init+0xc2>
 800e2ce:	46b4      	mov	ip, r6
 800e2d0:	ac11      	add	r4, sp, #68	@ 0x44
 800e2d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2d8:	f8dc 3000 	ldr.w	r3, [ip]
 800e2dc:	2050      	movs	r0, #80	@ 0x50
 800e2de:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e2e4:	4798      	blx	r3
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	6028      	str	r0, [r5, #0]
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d03b      	beq.n	800e366 <rcl_init_options_init+0xc6>
 800e2ee:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e2f2:	4686      	mov	lr, r0
 800e2f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e2fc:	f8dc 3000 	ldr.w	r3, [ip]
 800e300:	a802      	add	r0, sp, #8
 800e302:	f8ce 3000 	str.w	r3, [lr]
 800e306:	f001 f9bf 	bl	800f688 <rmw_get_zero_initialized_init_options>
 800e30a:	f10d 0e08 	add.w	lr, sp, #8
 800e30e:	f104 0c18 	add.w	ip, r4, #24
 800e312:	682f      	ldr	r7, [r5, #0]
 800e314:	ac20      	add	r4, sp, #128	@ 0x80
 800e316:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e31a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e31e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e326:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e32a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e32e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e332:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e33a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e33e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e342:	f107 0018 	add.w	r0, r7, #24
 800e346:	f001 f9cd 	bl	800f6e4 <rmw_init_options_init>
 800e34a:	4604      	mov	r4, r0
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d0b3      	beq.n	800e2b8 <rcl_init_options_init+0x18>
 800e350:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e352:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e354:	6828      	ldr	r0, [r5, #0]
 800e356:	4798      	blx	r3
 800e358:	4620      	mov	r0, r4
 800e35a:	f007 fbbf 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 800e35e:	4604      	mov	r4, r0
 800e360:	e7aa      	b.n	800e2b8 <rcl_init_options_init+0x18>
 800e362:	240b      	movs	r4, #11
 800e364:	e7a8      	b.n	800e2b8 <rcl_init_options_init+0x18>
 800e366:	240a      	movs	r4, #10
 800e368:	e7a6      	b.n	800e2b8 <rcl_init_options_init+0x18>
 800e36a:	bf00      	nop

0800e36c <rcl_init_options_fini>:
 800e36c:	b530      	push	{r4, r5, lr}
 800e36e:	b087      	sub	sp, #28
 800e370:	b1f0      	cbz	r0, 800e3b0 <rcl_init_options_fini+0x44>
 800e372:	6803      	ldr	r3, [r0, #0]
 800e374:	4604      	mov	r4, r0
 800e376:	b1db      	cbz	r3, 800e3b0 <rcl_init_options_fini+0x44>
 800e378:	469c      	mov	ip, r3
 800e37a:	f10d 0e04 	add.w	lr, sp, #4
 800e37e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e382:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e386:	f8dc 3000 	ldr.w	r3, [ip]
 800e38a:	a801      	add	r0, sp, #4
 800e38c:	f8ce 3000 	str.w	r3, [lr]
 800e390:	f001 f8ee 	bl	800f570 <rcutils_allocator_is_valid>
 800e394:	b160      	cbz	r0, 800e3b0 <rcl_init_options_fini+0x44>
 800e396:	6820      	ldr	r0, [r4, #0]
 800e398:	3018      	adds	r0, #24
 800e39a:	f001 fa5d 	bl	800f858 <rmw_init_options_fini>
 800e39e:	4605      	mov	r5, r0
 800e3a0:	b950      	cbnz	r0, 800e3b8 <rcl_init_options_fini+0x4c>
 800e3a2:	6820      	ldr	r0, [r4, #0]
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	9905      	ldr	r1, [sp, #20]
 800e3a8:	4798      	blx	r3
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	b007      	add	sp, #28
 800e3ae:	bd30      	pop	{r4, r5, pc}
 800e3b0:	250b      	movs	r5, #11
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	b007      	add	sp, #28
 800e3b6:	bd30      	pop	{r4, r5, pc}
 800e3b8:	f007 fb90 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 800e3bc:	4605      	mov	r5, r0
 800e3be:	e7f8      	b.n	800e3b2 <rcl_init_options_fini+0x46>

0800e3c0 <rcl_init_options_copy>:
 800e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c4:	b094      	sub	sp, #80	@ 0x50
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d05b      	beq.n	800e482 <rcl_init_options_copy+0xc2>
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	6800      	ldr	r0, [r0, #0]
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d057      	beq.n	800e482 <rcl_init_options_copy+0xc2>
 800e3d2:	460e      	mov	r6, r1
 800e3d4:	f001 f8cc 	bl	800f570 <rcutils_allocator_is_valid>
 800e3d8:	2e00      	cmp	r6, #0
 800e3da:	d052      	beq.n	800e482 <rcl_init_options_copy+0xc2>
 800e3dc:	f080 0001 	eor.w	r0, r0, #1
 800e3e0:	b2c0      	uxtb	r0, r0
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d14d      	bne.n	800e482 <rcl_init_options_copy+0xc2>
 800e3e6:	6833      	ldr	r3, [r6, #0]
 800e3e8:	b123      	cbz	r3, 800e3f4 <rcl_init_options_copy+0x34>
 800e3ea:	2464      	movs	r4, #100	@ 0x64
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	b014      	add	sp, #80	@ 0x50
 800e3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f4:	6827      	ldr	r7, [r4, #0]
 800e3f6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e3f8:	46bc      	mov	ip, r7
 800e3fa:	f8d7 8000 	ldr.w	r8, [r7]
 800e3fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e404:	f8dc 3000 	ldr.w	r3, [ip]
 800e408:	2050      	movs	r0, #80	@ 0x50
 800e40a:	4619      	mov	r1, r3
 800e40c:	602b      	str	r3, [r5, #0]
 800e40e:	47c0      	blx	r8
 800e410:	4605      	mov	r5, r0
 800e412:	6030      	str	r0, [r6, #0]
 800e414:	b3d0      	cbz	r0, 800e48c <rcl_init_options_copy+0xcc>
 800e416:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e41a:	4686      	mov	lr, r0
 800e41c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e420:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e424:	f8dc 3000 	ldr.w	r3, [ip]
 800e428:	4668      	mov	r0, sp
 800e42a:	f8ce 3000 	str.w	r3, [lr]
 800e42e:	f001 f92b 	bl	800f688 <rmw_get_zero_initialized_init_options>
 800e432:	46ee      	mov	lr, sp
 800e434:	f105 0c18 	add.w	ip, r5, #24
 800e438:	6824      	ldr	r4, [r4, #0]
 800e43a:	6835      	ldr	r5, [r6, #0]
 800e43c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e444:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e44c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e454:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e458:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e45c:	f104 0018 	add.w	r0, r4, #24
 800e460:	f105 0118 	add.w	r1, r5, #24
 800e464:	f001 f9a6 	bl	800f7b4 <rmw_init_options_copy>
 800e468:	4604      	mov	r4, r0
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d0be      	beq.n	800e3ec <rcl_init_options_copy+0x2c>
 800e46e:	f001 f88d 	bl	800f58c <rcutils_get_error_string>
 800e472:	f001 f8a1 	bl	800f5b8 <rcutils_reset_error>
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ff78 	bl	800e36c <rcl_init_options_fini>
 800e47c:	b140      	cbz	r0, 800e490 <rcl_init_options_copy+0xd0>
 800e47e:	4604      	mov	r4, r0
 800e480:	e7b4      	b.n	800e3ec <rcl_init_options_copy+0x2c>
 800e482:	240b      	movs	r4, #11
 800e484:	4620      	mov	r0, r4
 800e486:	b014      	add	sp, #80	@ 0x50
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48c:	240a      	movs	r4, #10
 800e48e:	e7ad      	b.n	800e3ec <rcl_init_options_copy+0x2c>
 800e490:	4620      	mov	r0, r4
 800e492:	b014      	add	sp, #80	@ 0x50
 800e494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e498:	f007 bb20 	b.w	8015adc <rcl_convert_rmw_ret_to_rcl_ret>

0800e49c <rcl_init_options_set_domain_id>:
 800e49c:	b120      	cbz	r0, 800e4a8 <rcl_init_options_set_domain_id+0xc>
 800e49e:	6803      	ldr	r3, [r0, #0]
 800e4a0:	b113      	cbz	r3, 800e4a8 <rcl_init_options_set_domain_id+0xc>
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	6259      	str	r1, [r3, #36]	@ 0x24
 800e4a6:	4770      	bx	lr
 800e4a8:	200b      	movs	r0, #11
 800e4aa:	4770      	bx	lr

0800e4ac <rcl_get_zero_initialized_publisher>:
 800e4ac:	4b01      	ldr	r3, [pc, #4]	@ (800e4b4 <rcl_get_zero_initialized_publisher+0x8>)
 800e4ae:	6818      	ldr	r0, [r3, #0]
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	0801ce1c 	.word	0x0801ce1c

0800e4b8 <rcl_publisher_init>:
 800e4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4bc:	b088      	sub	sp, #32
 800e4be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e4c0:	2e00      	cmp	r6, #0
 800e4c2:	d06b      	beq.n	800e59c <rcl_publisher_init+0xe4>
 800e4c4:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460f      	mov	r7, r1
 800e4cc:	4690      	mov	r8, r2
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	4699      	mov	r9, r3
 800e4d2:	f001 f84d 	bl	800f570 <rcutils_allocator_is_valid>
 800e4d6:	f080 0401 	eor.w	r4, r0, #1
 800e4da:	b2e4      	uxtb	r4, r4
 800e4dc:	2c00      	cmp	r4, #0
 800e4de:	d15d      	bne.n	800e59c <rcl_publisher_init+0xe4>
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	d05b      	beq.n	800e59c <rcl_publisher_init+0xe4>
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	b123      	cbz	r3, 800e4f2 <rcl_publisher_init+0x3a>
 800e4e8:	2464      	movs	r4, #100	@ 0x64
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	b008      	add	sp, #32
 800e4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	f007 fdf0 	bl	80160d8 <rcl_node_is_valid>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d054      	beq.n	800e5a6 <rcl_publisher_init+0xee>
 800e4fc:	f1b8 0f00 	cmp.w	r8, #0
 800e500:	d04c      	beq.n	800e59c <rcl_publisher_init+0xe4>
 800e502:	fab9 f389 	clz	r3, r9
 800e506:	095b      	lsrs	r3, r3, #5
 800e508:	f1b9 0f00 	cmp.w	r9, #0
 800e50c:	d046      	beq.n	800e59c <rcl_publisher_init+0xe4>
 800e50e:	aa07      	add	r2, sp, #28
 800e510:	9307      	str	r3, [sp, #28]
 800e512:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e516:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e51a:	9205      	str	r2, [sp, #20]
 800e51c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e520:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e524:	4649      	mov	r1, r9
 800e526:	4638      	mov	r0, r7
 800e528:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800e52c:	f007 fe2c 	bl	8016188 <rcl_node_resolve_name>
 800e530:	2800      	cmp	r0, #0
 800e532:	d14f      	bne.n	800e5d4 <rcl_publisher_init+0x11c>
 800e534:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800e536:	20c8      	movs	r0, #200	@ 0xc8
 800e538:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e53a:	4798      	blx	r3
 800e53c:	6028      	str	r0, [r5, #0]
 800e53e:	2800      	cmp	r0, #0
 800e540:	d050      	beq.n	800e5e4 <rcl_publisher_init+0x12c>
 800e542:	4638      	mov	r0, r7
 800e544:	f007 fdea 	bl	801611c <rcl_node_get_rmw_handle>
 800e548:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e54c:	4641      	mov	r1, r8
 800e54e:	9a07      	ldr	r2, [sp, #28]
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	4633      	mov	r3, r6
 800e554:	682c      	ldr	r4, [r5, #0]
 800e556:	f001 fca5 	bl	800fea4 <rmw_create_publisher>
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800e560:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e564:	b370      	cbz	r0, 800e5c4 <rcl_publisher_init+0x10c>
 800e566:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e56a:	f001 fd7f 	bl	801006c <rmw_publisher_get_actual_qos>
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	4604      	mov	r4, r0
 800e572:	b9d0      	cbnz	r0, 800e5aa <rcl_publisher_init+0xf2>
 800e574:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800e578:	4631      	mov	r1, r6
 800e57a:	4618      	mov	r0, r3
 800e57c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e580:	2270      	movs	r2, #112	@ 0x70
 800e582:	f00d fd82 	bl	801c08a <memcpy>
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e58c:	9807      	ldr	r0, [sp, #28]
 800e58e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e590:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e592:	4798      	blx	r3
 800e594:	4620      	mov	r0, r4
 800e596:	b008      	add	sp, #32
 800e598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e59c:	240b      	movs	r4, #11
 800e59e:	4620      	mov	r0, r4
 800e5a0:	b008      	add	sp, #32
 800e5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a6:	24c8      	movs	r4, #200	@ 0xc8
 800e5a8:	e79f      	b.n	800e4ea <rcl_publisher_init+0x32>
 800e5aa:	b1cb      	cbz	r3, 800e5e0 <rcl_publisher_init+0x128>
 800e5ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e5b0:	b142      	cbz	r2, 800e5c4 <rcl_publisher_init+0x10c>
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	f007 fdb2 	bl	801611c <rcl_node_get_rmw_handle>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e5be:	f001 fd69 	bl	8010094 <rmw_destroy_publisher>
 800e5c2:	682b      	ldr	r3, [r5, #0]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800e5c8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e5ca:	2401      	movs	r4, #1
 800e5cc:	4790      	blx	r2
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	602b      	str	r3, [r5, #0]
 800e5d2:	e7db      	b.n	800e58c <rcl_publisher_init+0xd4>
 800e5d4:	2867      	cmp	r0, #103	@ 0x67
 800e5d6:	d007      	beq.n	800e5e8 <rcl_publisher_init+0x130>
 800e5d8:	2869      	cmp	r0, #105	@ 0x69
 800e5da:	d005      	beq.n	800e5e8 <rcl_publisher_init+0x130>
 800e5dc:	280a      	cmp	r0, #10
 800e5de:	d001      	beq.n	800e5e4 <rcl_publisher_init+0x12c>
 800e5e0:	2401      	movs	r4, #1
 800e5e2:	e7d3      	b.n	800e58c <rcl_publisher_init+0xd4>
 800e5e4:	240a      	movs	r4, #10
 800e5e6:	e7d1      	b.n	800e58c <rcl_publisher_init+0xd4>
 800e5e8:	2467      	movs	r4, #103	@ 0x67
 800e5ea:	e7cf      	b.n	800e58c <rcl_publisher_init+0xd4>

0800e5ec <rcl_publisher_get_default_options>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	4d14      	ldr	r5, [pc, #80]	@ (800e640 <rcl_publisher_get_default_options+0x54>)
 800e5f0:	b088      	sub	sp, #32
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	2250      	movs	r2, #80	@ 0x50
 800e5f6:	4913      	ldr	r1, [pc, #76]	@ (800e644 <rcl_publisher_get_default_options+0x58>)
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	f00d fd46 	bl	801c08a <memcpy>
 800e5fe:	a802      	add	r0, sp, #8
 800e600:	f000 ffa8 	bl	800f554 <rcutils_get_default_allocator>
 800e604:	f10d 0c08 	add.w	ip, sp, #8
 800e608:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e60c:	466e      	mov	r6, sp
 800e60e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e612:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e616:	f8dc 3000 	ldr.w	r3, [ip]
 800e61a:	4630      	mov	r0, r6
 800e61c:	f8ce 3000 	str.w	r3, [lr]
 800e620:	f001 f842 	bl	800f6a8 <rmw_get_default_publisher_options>
 800e624:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e628:	2270      	movs	r2, #112	@ 0x70
 800e62a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e62e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e632:	4629      	mov	r1, r5
 800e634:	4620      	mov	r0, r4
 800e636:	f00d fd28 	bl	801c08a <memcpy>
 800e63a:	4620      	mov	r0, r4
 800e63c:	b008      	add	sp, #32
 800e63e:	bd70      	pop	{r4, r5, r6, pc}
 800e640:	2400e5b8 	.word	0x2400e5b8
 800e644:	0801ce20 	.word	0x0801ce20

0800e648 <rcl_publish>:
 800e648:	b1f8      	cbz	r0, 800e68a <rcl_publish+0x42>
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	4604      	mov	r4, r0
 800e650:	b1b3      	cbz	r3, 800e680 <rcl_publish+0x38>
 800e652:	4616      	mov	r6, r2
 800e654:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e658:	b192      	cbz	r2, 800e680 <rcl_publish+0x38>
 800e65a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e65e:	460d      	mov	r5, r1
 800e660:	f007 fa5a 	bl	8015b18 <rcl_context_is_valid>
 800e664:	b160      	cbz	r0, 800e680 <rcl_publish+0x38>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e66c:	b140      	cbz	r0, 800e680 <rcl_publish+0x38>
 800e66e:	b155      	cbz	r5, 800e686 <rcl_publish+0x3e>
 800e670:	4632      	mov	r2, r6
 800e672:	4629      	mov	r1, r5
 800e674:	f001 fbb6 	bl	800fde4 <rmw_publish>
 800e678:	3800      	subs	r0, #0
 800e67a:	bf18      	it	ne
 800e67c:	2001      	movne	r0, #1
 800e67e:	bd70      	pop	{r4, r5, r6, pc}
 800e680:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e684:	bd70      	pop	{r4, r5, r6, pc}
 800e686:	200b      	movs	r0, #11
 800e688:	bd70      	pop	{r4, r5, r6, pc}
 800e68a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e68e:	4770      	bx	lr

0800e690 <rcl_publisher_is_valid>:
 800e690:	b1a0      	cbz	r0, 800e6bc <rcl_publisher_is_valid+0x2c>
 800e692:	6803      	ldr	r3, [r0, #0]
 800e694:	b510      	push	{r4, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	b173      	cbz	r3, 800e6b8 <rcl_publisher_is_valid+0x28>
 800e69a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e69e:	b15a      	cbz	r2, 800e6b8 <rcl_publisher_is_valid+0x28>
 800e6a0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e6a4:	f007 fa38 	bl	8015b18 <rcl_context_is_valid>
 800e6a8:	b130      	cbz	r0, 800e6b8 <rcl_publisher_is_valid+0x28>
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e6b0:	3800      	subs	r0, #0
 800e6b2:	bf18      	it	ne
 800e6b4:	2001      	movne	r0, #1
 800e6b6:	bd10      	pop	{r4, pc}
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	bd10      	pop	{r4, pc}
 800e6bc:	2000      	movs	r0, #0
 800e6be:	4770      	bx	lr

0800e6c0 <rcl_publisher_is_valid_except_context>:
 800e6c0:	b130      	cbz	r0, 800e6d0 <rcl_publisher_is_valid_except_context+0x10>
 800e6c2:	6800      	ldr	r0, [r0, #0]
 800e6c4:	b120      	cbz	r0, 800e6d0 <rcl_publisher_is_valid_except_context+0x10>
 800e6c6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e6ca:	3800      	subs	r0, #0
 800e6cc:	bf18      	it	ne
 800e6ce:	2001      	movne	r0, #1
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop

0800e6d4 <_rclc_check_for_new_data>:
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d046      	beq.n	800e766 <_rclc_check_for_new_data+0x92>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	b530      	push	{r4, r5, lr}
 800e6dc:	7802      	ldrb	r2, [r0, #0]
 800e6de:	b085      	sub	sp, #20
 800e6e0:	2a0a      	cmp	r2, #10
 800e6e2:	d842      	bhi.n	800e76a <_rclc_check_for_new_data+0x96>
 800e6e4:	e8df f002 	tbb	[pc, r2]
 800e6e8:	14181212 	.word	0x14181212
 800e6ec:	06060614 	.word	0x06060614
 800e6f0:	2e1a      	.short	0x2e1a
 800e6f2:	16          	.byte	0x16
 800e6f3:	00          	.byte	0x00
 800e6f4:	6a0a      	ldr	r2, [r1, #32]
 800e6f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e6fe:	1a12      	subs	r2, r2, r0
 800e700:	bf18      	it	ne
 800e702:	2201      	movne	r2, #1
 800e704:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e708:	b005      	add	sp, #20
 800e70a:	bd30      	pop	{r4, r5, pc}
 800e70c:	680a      	ldr	r2, [r1, #0]
 800e70e:	e7f2      	b.n	800e6f6 <_rclc_check_for_new_data+0x22>
 800e710:	698a      	ldr	r2, [r1, #24]
 800e712:	e7f0      	b.n	800e6f6 <_rclc_check_for_new_data+0x22>
 800e714:	688a      	ldr	r2, [r1, #8]
 800e716:	e7ee      	b.n	800e6f6 <_rclc_check_for_new_data+0x22>
 800e718:	690a      	ldr	r2, [r1, #16]
 800e71a:	e7ec      	b.n	800e6f6 <_rclc_check_for_new_data+0x22>
 800e71c:	685c      	ldr	r4, [r3, #4]
 800e71e:	4608      	mov	r0, r1
 800e720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e728:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800e72c:	f104 0110 	add.w	r1, r4, #16
 800e730:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e734:	9500      	str	r5, [sp, #0]
 800e736:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e73a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e73e:	f009 fb7f 	bl	8017e40 <rcl_action_client_wait_set_get_entities_ready>
 800e742:	e7e1      	b.n	800e708 <_rclc_check_for_new_data+0x34>
 800e744:	685c      	ldr	r4, [r3, #4]
 800e746:	4608      	mov	r0, r1
 800e748:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800e74c:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800e750:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e754:	e9cd 2100 	strd	r2, r1, [sp]
 800e758:	f104 0220 	add.w	r2, r4, #32
 800e75c:	f104 0110 	add.w	r1, r4, #16
 800e760:	f009 fd88 	bl	8018274 <rcl_action_server_wait_set_get_entities_ready>
 800e764:	e7d0      	b.n	800e708 <_rclc_check_for_new_data+0x34>
 800e766:	200b      	movs	r0, #11
 800e768:	4770      	bx	lr
 800e76a:	2001      	movs	r0, #1
 800e76c:	e7cc      	b.n	800e708 <_rclc_check_for_new_data+0x34>
 800e76e:	bf00      	nop

0800e770 <_rclc_take_new_data>:
 800e770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e772:	b09b      	sub	sp, #108	@ 0x6c
 800e774:	2800      	cmp	r0, #0
 800e776:	f000 8088 	beq.w	800e88a <_rclc_take_new_data+0x11a>
 800e77a:	7803      	ldrb	r3, [r0, #0]
 800e77c:	4604      	mov	r4, r0
 800e77e:	2b0a      	cmp	r3, #10
 800e780:	f200 8167 	bhi.w	800ea52 <_rclc_take_new_data+0x2e2>
 800e784:	e8df f003 	tbb	[pc, r3]
 800e788:	44152d2d 	.word	0x44152d2d
 800e78c:	19191944 	.word	0x19191944
 800e790:	065a      	.short	0x065a
 800e792:	15          	.byte	0x15
 800e793:	00          	.byte	0x00
 800e794:	6840      	ldr	r0, [r0, #4]
 800e796:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f040 80b2 	bne.w	800e904 <_rclc_take_new_data+0x194>
 800e7a0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f040 80e4 	bne.w	800e972 <_rclc_take_new_data+0x202>
 800e7aa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d16f      	bne.n	800e892 <_rclc_take_new_data+0x122>
 800e7b2:	2500      	movs	r5, #0
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	b01b      	add	sp, #108	@ 0x6c
 800e7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e7bc:	6a0b      	ldr	r3, [r1, #32]
 800e7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d0f5      	beq.n	800e7b2 <_rclc_take_new_data+0x42>
 800e7c6:	6882      	ldr	r2, [r0, #8]
 800e7c8:	f100 0110 	add.w	r1, r0, #16
 800e7cc:	6840      	ldr	r0, [r0, #4]
 800e7ce:	f007 feb5 	bl	801653c <rcl_take_request>
 800e7d2:	4605      	mov	r5, r0
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d0ec      	beq.n	800e7b2 <_rclc_take_new_data+0x42>
 800e7d8:	f240 2359 	movw	r3, #601	@ 0x259
 800e7dc:	4298      	cmp	r0, r3
 800e7de:	d013      	beq.n	800e808 <_rclc_take_new_data+0x98>
 800e7e0:	e029      	b.n	800e836 <_rclc_take_new_data+0xc6>
 800e7e2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e7e4:	680b      	ldr	r3, [r1, #0]
 800e7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0e1      	beq.n	800e7b2 <_rclc_take_new_data+0x42>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	aa0a      	add	r2, sp, #40	@ 0x28
 800e7f2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e7f6:	f007 ff03 	bl	8016600 <rcl_take>
 800e7fa:	4605      	mov	r5, r0
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d0d9      	beq.n	800e7b4 <_rclc_take_new_data+0x44>
 800e800:	f240 1391 	movw	r3, #401	@ 0x191
 800e804:	4298      	cmp	r0, r3
 800e806:	d116      	bne.n	800e836 <_rclc_take_new_data+0xc6>
 800e808:	2300      	movs	r3, #0
 800e80a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e80e:	e7d1      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800e810:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e812:	698b      	ldr	r3, [r1, #24]
 800e814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d0ca      	beq.n	800e7b2 <_rclc_take_new_data+0x42>
 800e81c:	6882      	ldr	r2, [r0, #8]
 800e81e:	f100 0110 	add.w	r1, r0, #16
 800e822:	6840      	ldr	r0, [r0, #4]
 800e824:	f007 f908 	bl	8015a38 <rcl_take_response>
 800e828:	4605      	mov	r5, r0
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d0c1      	beq.n	800e7b2 <_rclc_take_new_data+0x42>
 800e82e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e832:	4298      	cmp	r0, r3
 800e834:	d0be      	beq.n	800e7b4 <_rclc_take_new_data+0x44>
 800e836:	f000 febf 	bl	800f5b8 <rcutils_reset_error>
 800e83a:	e7bb      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800e83c:	6840      	ldr	r0, [r0, #4]
 800e83e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e842:	2b00      	cmp	r3, #0
 800e844:	d17d      	bne.n	800e942 <_rclc_take_new_data+0x1d2>
 800e846:	69c3      	ldr	r3, [r0, #28]
 800e848:	b11b      	cbz	r3, 800e852 <_rclc_take_new_data+0xe2>
 800e84a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d144      	bne.n	800e8dc <_rclc_take_new_data+0x16c>
 800e852:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e856:	2b00      	cmp	r3, #0
 800e858:	f040 80ac 	bne.w	800e9b4 <_rclc_take_new_data+0x244>
 800e85c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e860:	2b00      	cmp	r3, #0
 800e862:	d0a6      	beq.n	800e7b2 <_rclc_take_new_data+0x42>
 800e864:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e866:	a90a      	add	r1, sp, #40	@ 0x28
 800e868:	3010      	adds	r0, #16
 800e86a:	f009 f9c1 	bl	8017bf0 <rcl_action_take_result_response>
 800e86e:	4605      	mov	r5, r0
 800e870:	2800      	cmp	r0, #0
 800e872:	d1e0      	bne.n	800e836 <_rclc_take_new_data+0xc6>
 800e874:	6860      	ldr	r0, [r4, #4]
 800e876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e87a:	f009 fe2b 	bl	80184d4 <rclc_action_find_handle_by_result_request_sequence_number>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d098      	beq.n	800e7b4 <_rclc_take_new_data+0x44>
 800e882:	2301      	movs	r3, #1
 800e884:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e888:	e794      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800e88a:	250b      	movs	r5, #11
 800e88c:	4628      	mov	r0, r5
 800e88e:	b01b      	add	sp, #108	@ 0x6c
 800e890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e892:	ae04      	add	r6, sp, #16
 800e894:	3010      	adds	r0, #16
 800e896:	aa0a      	add	r2, sp, #40	@ 0x28
 800e898:	4631      	mov	r1, r6
 800e89a:	f009 fc1f 	bl	80180dc <rcl_action_take_cancel_request>
 800e89e:	4605      	mov	r5, r0
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d1c8      	bne.n	800e836 <_rclc_take_new_data+0xc6>
 800e8a4:	a90a      	add	r1, sp, #40	@ 0x28
 800e8a6:	6860      	ldr	r0, [r4, #4]
 800e8a8:	f009 fdd4 	bl	8018454 <rclc_action_find_goal_handle_by_uuid>
 800e8ac:	4607      	mov	r7, r0
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	f000 80bb 	beq.w	800ea2a <_rclc_take_new_data+0x2ba>
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e8ba:	f009 fd55 	bl	8018368 <rcl_action_transition_goal_state>
 800e8be:	2803      	cmp	r0, #3
 800e8c0:	4684      	mov	ip, r0
 800e8c2:	f040 80a7 	bne.w	800ea14 <_rclc_take_new_data+0x2a4>
 800e8c6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e8ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e8cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e8d2:	e884 0003 	stmia.w	r4, {r0, r1}
 800e8d6:	f887 c008 	strb.w	ip, [r7, #8]
 800e8da:	e76b      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800e8dc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e8de:	3010      	adds	r0, #16
 800e8e0:	f009 fa06 	bl	8017cf0 <rcl_action_take_feedback>
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d1a5      	bne.n	800e836 <_rclc_take_new_data+0xc6>
 800e8ea:	6860      	ldr	r0, [r4, #4]
 800e8ec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e8ee:	f009 fdb1 	bl	8018454 <rclc_action_find_goal_handle_by_uuid>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	f000 80a3 	beq.w	800ea40 <_rclc_take_new_data+0x2d0>
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	6860      	ldr	r0, [r4, #4]
 800e8fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e902:	e7a6      	b.n	800e852 <_rclc_take_new_data+0xe2>
 800e904:	f009 fd80 	bl	8018408 <rclc_action_take_goal_handle>
 800e908:	4606      	mov	r6, r0
 800e90a:	6860      	ldr	r0, [r4, #4]
 800e90c:	2e00      	cmp	r6, #0
 800e90e:	f43f af47 	beq.w	800e7a0 <_rclc_take_new_data+0x30>
 800e912:	6070      	str	r0, [r6, #4]
 800e914:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e918:	69f2      	ldr	r2, [r6, #28]
 800e91a:	3010      	adds	r0, #16
 800e91c:	f009 fb26 	bl	8017f6c <rcl_action_take_goal_request>
 800e920:	4605      	mov	r5, r0
 800e922:	2800      	cmp	r0, #0
 800e924:	f040 808e 	bne.w	800ea44 <_rclc_take_new_data+0x2d4>
 800e928:	69f7      	ldr	r7, [r6, #28]
 800e92a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e92c:	7235      	strb	r5, [r6, #8]
 800e92e:	f8c6 0009 	str.w	r0, [r6, #9]
 800e932:	f8c6 100d 	str.w	r1, [r6, #13]
 800e936:	6860      	ldr	r0, [r4, #4]
 800e938:	f8c6 2011 	str.w	r2, [r6, #17]
 800e93c:	f8c6 3015 	str.w	r3, [r6, #21]
 800e940:	e72e      	b.n	800e7a0 <_rclc_take_new_data+0x30>
 800e942:	aa04      	add	r2, sp, #16
 800e944:	a90a      	add	r1, sp, #40	@ 0x28
 800e946:	3010      	adds	r0, #16
 800e948:	f009 f8da 	bl	8017b00 <rcl_action_take_goal_response>
 800e94c:	4605      	mov	r5, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	f47f af71 	bne.w	800e836 <_rclc_take_new_data+0xc6>
 800e954:	6860      	ldr	r0, [r4, #4]
 800e956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e95a:	f009 fda9 	bl	80184b0 <rclc_action_find_handle_by_goal_request_sequence_number>
 800e95e:	b130      	cbz	r0, 800e96e <_rclc_take_new_data+0x1fe>
 800e960:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e964:	2201      	movs	r2, #1
 800e966:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e96a:	f880 2020 	strb.w	r2, [r0, #32]
 800e96e:	6860      	ldr	r0, [r4, #4]
 800e970:	e769      	b.n	800e846 <_rclc_take_new_data+0xd6>
 800e972:	3010      	adds	r0, #16
 800e974:	aa04      	add	r2, sp, #16
 800e976:	a90a      	add	r1, sp, #40	@ 0x28
 800e978:	f009 fb70 	bl	801805c <rcl_action_take_result_request>
 800e97c:	4605      	mov	r5, r0
 800e97e:	2800      	cmp	r0, #0
 800e980:	f47f af59 	bne.w	800e836 <_rclc_take_new_data+0xc6>
 800e984:	a904      	add	r1, sp, #16
 800e986:	6860      	ldr	r0, [r4, #4]
 800e988:	f009 fd64 	bl	8018454 <rclc_action_find_goal_handle_by_uuid>
 800e98c:	4607      	mov	r7, r0
 800e98e:	b160      	cbz	r0, 800e9aa <_rclc_take_new_data+0x23a>
 800e990:	ad0a      	add	r5, sp, #40	@ 0x28
 800e992:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e996:	f04f 0c02 	mov.w	ip, #2
 800e99a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e99c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e99e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e9a2:	e886 0003 	stmia.w	r6, {r0, r1}
 800e9a6:	f887 c008 	strb.w	ip, [r7, #8]
 800e9aa:	6860      	ldr	r0, [r4, #4]
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e9b2:	e6fa      	b.n	800e7aa <_rclc_take_new_data+0x3a>
 800e9b4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e9b8:	a90a      	add	r1, sp, #40	@ 0x28
 800e9ba:	3010      	adds	r0, #16
 800e9bc:	f009 f958 	bl	8017c70 <rcl_action_take_cancel_response>
 800e9c0:	4605      	mov	r5, r0
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f47f af37 	bne.w	800e836 <_rclc_take_new_data+0xc6>
 800e9c8:	6860      	ldr	r0, [r4, #4]
 800e9ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e9ce:	f009 fd93 	bl	80184f8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	6860      	ldr	r0, [r4, #4]
 800e9d6:	2e00      	cmp	r6, #0
 800e9d8:	f43f af40 	beq.w	800e85c <_rclc_take_new_data+0xec>
 800e9dc:	2701      	movs	r7, #1
 800e9de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e9e0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f43f af3a 	beq.w	800e85c <_rclc_take_new_data+0xec>
 800e9e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e9ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e9ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e9f2:	f009 fd2f 	bl	8018454 <rclc_action_find_goal_handle_by_uuid>
 800e9f6:	b138      	cbz	r0, 800ea08 <_rclc_take_new_data+0x298>
 800e9f8:	6860      	ldr	r0, [r4, #4]
 800e9fa:	3501      	adds	r5, #1
 800e9fc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ea00:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ea02:	42ab      	cmp	r3, r5
 800ea04:	d8f0      	bhi.n	800e9e8 <_rclc_take_new_data+0x278>
 800ea06:	e729      	b.n	800e85c <_rclc_take_new_data+0xec>
 800ea08:	6860      	ldr	r0, [r4, #4]
 800ea0a:	3501      	adds	r5, #1
 800ea0c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ea0e:	42ab      	cmp	r3, r5
 800ea10:	d8ea      	bhi.n	800e9e8 <_rclc_take_new_data+0x278>
 800ea12:	e723      	b.n	800e85c <_rclc_take_new_data+0xec>
 800ea14:	ab06      	add	r3, sp, #24
 800ea16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea18:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ea1c:	2103      	movs	r1, #3
 800ea1e:	6860      	ldr	r0, [r4, #4]
 800ea20:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ea24:	f009 fddc 	bl	80185e0 <rclc_action_server_goal_cancel_reject>
 800ea28:	e6c4      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800ea2a:	ab06      	add	r3, sp, #24
 800ea2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ea32:	2102      	movs	r1, #2
 800ea34:	6860      	ldr	r0, [r4, #4]
 800ea36:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ea3a:	f009 fdd1 	bl	80185e0 <rclc_action_server_goal_cancel_reject>
 800ea3e:	e6b9      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800ea40:	6860      	ldr	r0, [r4, #4]
 800ea42:	e706      	b.n	800e852 <_rclc_take_new_data+0xe2>
 800ea44:	4631      	mov	r1, r6
 800ea46:	6860      	ldr	r0, [r4, #4]
 800ea48:	f009 fcee 	bl	8018428 <rclc_action_remove_used_goal_handle>
 800ea4c:	f000 fdb4 	bl	800f5b8 <rcutils_reset_error>
 800ea50:	e6b0      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800ea52:	2501      	movs	r5, #1
 800ea54:	e6ae      	b.n	800e7b4 <_rclc_take_new_data+0x44>
 800ea56:	bf00      	nop

0800ea58 <_rclc_execute.part.0>:
 800ea58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea5a:	7803      	ldrb	r3, [r0, #0]
 800ea5c:	b085      	sub	sp, #20
 800ea5e:	4604      	mov	r4, r0
 800ea60:	2b0a      	cmp	r3, #10
 800ea62:	f200 8139 	bhi.w	800ecd8 <_rclc_execute.part.0+0x280>
 800ea66:	e8df f003 	tbb	[pc, r3]
 800ea6a:	4268      	.short	0x4268
 800ea6c:	06a75b4d 	.word	0x06a75b4d
 800ea70:	721d0606 	.word	0x721d0606
 800ea74:	62          	.byte	0x62
 800ea75:	00          	.byte	0x00
 800ea76:	2b06      	cmp	r3, #6
 800ea78:	f000 8126 	beq.w	800ecc8 <_rclc_execute.part.0+0x270>
 800ea7c:	2b07      	cmp	r3, #7
 800ea7e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ea80:	f040 811c 	bne.w	800ecbc <_rclc_execute.part.0+0x264>
 800ea84:	f104 0510 	add.w	r5, r4, #16
 800ea88:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ea8c:	6880      	ldr	r0, [r0, #8]
 800ea8e:	4798      	blx	r3
 800ea90:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ea92:	4629      	mov	r1, r5
 800ea94:	6860      	ldr	r0, [r4, #4]
 800ea96:	f007 fd91 	bl	80165bc <rcl_send_response>
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	b378      	cbz	r0, 800eafe <_rclc_execute.part.0+0xa6>
 800ea9e:	f000 fd8b 	bl	800f5b8 <rcutils_reset_error>
 800eaa2:	e02c      	b.n	800eafe <_rclc_execute.part.0+0xa6>
 800eaa4:	6840      	ldr	r0, [r0, #4]
 800eaa6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 808e 	beq.w	800ebcc <_rclc_execute.part.0+0x174>
 800eab0:	2600      	movs	r6, #0
 800eab2:	2701      	movs	r7, #1
 800eab4:	e004      	b.n	800eac0 <_rclc_execute.part.0+0x68>
 800eab6:	f009 fc81 	bl	80183bc <rclc_action_send_result_request>
 800eaba:	b998      	cbnz	r0, 800eae4 <_rclc_execute.part.0+0x8c>
 800eabc:	722f      	strb	r7, [r5, #8]
 800eabe:	6860      	ldr	r0, [r4, #4]
 800eac0:	f009 fd2c 	bl	801851c <rclc_action_find_first_handle_with_goal_response>
 800eac4:	4605      	mov	r5, r0
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d07f      	beq.n	800ebca <_rclc_execute.part.0+0x172>
 800eaca:	6863      	ldr	r3, [r4, #4]
 800eacc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ead4:	f885 6020 	strb.w	r6, [r5, #32]
 800ead8:	4798      	blx	r3
 800eada:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800eade:	4628      	mov	r0, r5
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1e8      	bne.n	800eab6 <_rclc_execute.part.0+0x5e>
 800eae4:	6860      	ldr	r0, [r4, #4]
 800eae6:	4629      	mov	r1, r5
 800eae8:	f009 fc9e 	bl	8018428 <rclc_action_remove_used_goal_handle>
 800eaec:	e7e7      	b.n	800eabe <_rclc_execute.part.0+0x66>
 800eaee:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800eaf2:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800eaf6:	b100      	cbz	r0, 800eafa <_rclc_execute.part.0+0xa2>
 800eaf8:	68a0      	ldr	r0, [r4, #8]
 800eafa:	2400      	movs	r4, #0
 800eafc:	4798      	blx	r3
 800eafe:	4620      	mov	r0, r4
 800eb00:	b005      	add	sp, #20
 800eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb04:	6840      	ldr	r0, [r0, #4]
 800eb06:	f008 f8b1 	bl	8016c6c <rcl_timer_call>
 800eb0a:	f240 3321 	movw	r3, #801	@ 0x321
 800eb0e:	4604      	mov	r4, r0
 800eb10:	4298      	cmp	r0, r3
 800eb12:	d001      	beq.n	800eb18 <_rclc_execute.part.0+0xc0>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d1c2      	bne.n	800ea9e <_rclc_execute.part.0+0x46>
 800eb18:	2400      	movs	r4, #0
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	b005      	add	sp, #20
 800eb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb20:	2400      	movs	r4, #0
 800eb22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eb24:	6880      	ldr	r0, [r0, #8]
 800eb26:	4798      	blx	r3
 800eb28:	4620      	mov	r0, r4
 800eb2a:	b005      	add	sp, #20
 800eb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2e:	2400      	movs	r4, #0
 800eb30:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eb32:	4798      	blx	r3
 800eb34:	4620      	mov	r0, r4
 800eb36:	b005      	add	sp, #20
 800eb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb3a:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800eb3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eb40:	b100      	cbz	r0, 800eb44 <_rclc_execute.part.0+0xec>
 800eb42:	68a0      	ldr	r0, [r4, #8]
 800eb44:	2400      	movs	r4, #0
 800eb46:	4798      	blx	r3
 800eb48:	4620      	mov	r0, r4
 800eb4a:	b005      	add	sp, #20
 800eb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb4e:	6840      	ldr	r0, [r0, #4]
 800eb50:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800eb54:	bb3b      	cbnz	r3, 800eba6 <_rclc_execute.part.0+0x14e>
 800eb56:	f890 3020 	ldrb.w	r3, [r0, #32]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d07d      	beq.n	800ec5a <_rclc_execute.part.0+0x202>
 800eb5e:	f640 0634 	movw	r6, #2100	@ 0x834
 800eb62:	2701      	movs	r7, #1
 800eb64:	e007      	b.n	800eb76 <_rclc_execute.part.0+0x11e>
 800eb66:	4628      	mov	r0, r5
 800eb68:	f009 fcf0 	bl	801854c <rclc_action_server_response_goal_request>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	6860      	ldr	r0, [r4, #4]
 800eb70:	f009 fc5a 	bl	8018428 <rclc_action_remove_used_goal_handle>
 800eb74:	6860      	ldr	r0, [r4, #4]
 800eb76:	2100      	movs	r1, #0
 800eb78:	f009 fc82 	bl	8018480 <rclc_action_find_first_handle_by_status>
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d068      	beq.n	800ec54 <_rclc_execute.part.0+0x1fc>
 800eb82:	6863      	ldr	r3, [r4, #4]
 800eb84:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	4798      	blx	r3
 800eb8a:	42b0      	cmp	r0, r6
 800eb8c:	f04f 0100 	mov.w	r1, #0
 800eb90:	d1e9      	bne.n	800eb66 <_rclc_execute.part.0+0x10e>
 800eb92:	2101      	movs	r1, #1
 800eb94:	4628      	mov	r0, r5
 800eb96:	f009 fcd9 	bl	801854c <rclc_action_server_response_goal_request>
 800eb9a:	722f      	strb	r7, [r5, #8]
 800eb9c:	e7ea      	b.n	800eb74 <_rclc_execute.part.0+0x11c>
 800eb9e:	6848      	ldr	r0, [r1, #4]
 800eba0:	f009 fc42 	bl	8018428 <rclc_action_remove_used_goal_handle>
 800eba4:	6860      	ldr	r0, [r4, #4]
 800eba6:	f009 fc77 	bl	8018498 <rclc_action_find_first_terminated_handle>
 800ebaa:	4601      	mov	r1, r0
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d1f6      	bne.n	800eb9e <_rclc_execute.part.0+0x146>
 800ebb0:	6860      	ldr	r0, [r4, #4]
 800ebb2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ebb6:	e7ce      	b.n	800eb56 <_rclc_execute.part.0+0xfe>
 800ebb8:	2400      	movs	r4, #0
 800ebba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ebbc:	f100 0110 	add.w	r1, r0, #16
 800ebc0:	6880      	ldr	r0, [r0, #8]
 800ebc2:	4798      	blx	r3
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	b005      	add	sp, #20
 800ebc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebca:	6860      	ldr	r0, [r4, #4]
 800ebcc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ebd0:	b18b      	cbz	r3, 800ebf6 <_rclc_execute.part.0+0x19e>
 800ebd2:	68c5      	ldr	r5, [r0, #12]
 800ebd4:	b32d      	cbz	r5, 800ec22 <_rclc_execute.part.0+0x1ca>
 800ebd6:	2600      	movs	r6, #0
 800ebd8:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ebdc:	b143      	cbz	r3, 800ebf0 <_rclc_execute.part.0+0x198>
 800ebde:	69c3      	ldr	r3, [r0, #28]
 800ebe0:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ebe4:	b123      	cbz	r3, 800ebf0 <_rclc_execute.part.0+0x198>
 800ebe6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ebe8:	4628      	mov	r0, r5
 800ebea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ebec:	4798      	blx	r3
 800ebee:	6860      	ldr	r0, [r4, #4]
 800ebf0:	682d      	ldr	r5, [r5, #0]
 800ebf2:	2d00      	cmp	r5, #0
 800ebf4:	d1f0      	bne.n	800ebd8 <_rclc_execute.part.0+0x180>
 800ebf6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ebfa:	b193      	cbz	r3, 800ec22 <_rclc_execute.part.0+0x1ca>
 800ebfc:	68c5      	ldr	r5, [r0, #12]
 800ebfe:	b185      	cbz	r5, 800ec22 <_rclc_execute.part.0+0x1ca>
 800ec00:	2600      	movs	r6, #0
 800ec02:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ec06:	b14b      	cbz	r3, 800ec1c <_rclc_execute.part.0+0x1c4>
 800ec08:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ec0a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ec0e:	b12b      	cbz	r3, 800ec1c <_rclc_execute.part.0+0x1c4>
 800ec10:	4628      	mov	r0, r5
 800ec12:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ec16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ec18:	4798      	blx	r3
 800ec1a:	6860      	ldr	r0, [r4, #4]
 800ec1c:	682d      	ldr	r5, [r5, #0]
 800ec1e:	2d00      	cmp	r5, #0
 800ec20:	d1ef      	bne.n	800ec02 <_rclc_execute.part.0+0x1aa>
 800ec22:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f43f af76 	beq.w	800eb18 <_rclc_execute.part.0+0xc0>
 800ec2c:	2700      	movs	r7, #0
 800ec2e:	e00b      	b.n	800ec48 <_rclc_execute.part.0+0x1f0>
 800ec30:	6863      	ldr	r3, [r4, #4]
 800ec32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ec34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ec36:	6a1e      	ldr	r6, [r3, #32]
 800ec38:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ec3c:	47b0      	blx	r6
 800ec3e:	6860      	ldr	r0, [r4, #4]
 800ec40:	4629      	mov	r1, r5
 800ec42:	f009 fbf1 	bl	8018428 <rclc_action_remove_used_goal_handle>
 800ec46:	6860      	ldr	r0, [r4, #4]
 800ec48:	f009 fc74 	bl	8018534 <rclc_action_find_first_handle_with_result_response>
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d1ee      	bne.n	800ec30 <_rclc_execute.part.0+0x1d8>
 800ec52:	e761      	b.n	800eb18 <_rclc_execute.part.0+0xc0>
 800ec54:	6860      	ldr	r0, [r4, #4]
 800ec56:	f880 5020 	strb.w	r5, [r0, #32]
 800ec5a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f43f af5a 	beq.w	800eb18 <_rclc_execute.part.0+0xc0>
 800ec64:	68c5      	ldr	r5, [r0, #12]
 800ec66:	b1b5      	cbz	r5, 800ec96 <_rclc_execute.part.0+0x23e>
 800ec68:	2602      	movs	r6, #2
 800ec6a:	e001      	b.n	800ec70 <_rclc_execute.part.0+0x218>
 800ec6c:	682d      	ldr	r5, [r5, #0]
 800ec6e:	b195      	cbz	r5, 800ec96 <_rclc_execute.part.0+0x23e>
 800ec70:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ec74:	2b03      	cmp	r3, #3
 800ec76:	d1f9      	bne.n	800ec6c <_rclc_execute.part.0+0x214>
 800ec78:	69c3      	ldr	r3, [r0, #28]
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ec7e:	4798      	blx	r3
 800ec80:	4603      	mov	r3, r0
 800ec82:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ec86:	4628      	mov	r0, r5
 800ec88:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ec8c:	b143      	cbz	r3, 800eca0 <_rclc_execute.part.0+0x248>
 800ec8e:	f009 fc7b 	bl	8018588 <rclc_action_server_goal_cancel_accept>
 800ec92:	6860      	ldr	r0, [r4, #4]
 800ec94:	e7ea      	b.n	800ec6c <_rclc_execute.part.0+0x214>
 800ec96:	2300      	movs	r3, #0
 800ec98:	461c      	mov	r4, r3
 800ec9a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ec9e:	e72e      	b.n	800eafe <_rclc_execute.part.0+0xa6>
 800eca0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800eca2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800eca6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ecaa:	2101      	movs	r1, #1
 800ecac:	6860      	ldr	r0, [r4, #4]
 800ecae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecb2:	f009 fc95 	bl	80185e0 <rclc_action_server_goal_cancel_reject>
 800ecb6:	722e      	strb	r6, [r5, #8]
 800ecb8:	6860      	ldr	r0, [r4, #4]
 800ecba:	e7d7      	b.n	800ec6c <_rclc_execute.part.0+0x214>
 800ecbc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ecbe:	f104 0510 	add.w	r5, r4, #16
 800ecc2:	6880      	ldr	r0, [r0, #8]
 800ecc4:	4798      	blx	r3
 800ecc6:	e6e3      	b.n	800ea90 <_rclc_execute.part.0+0x38>
 800ecc8:	f100 0510 	add.w	r5, r0, #16
 800eccc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ecce:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	6880      	ldr	r0, [r0, #8]
 800ecd4:	4798      	blx	r3
 800ecd6:	e6db      	b.n	800ea90 <_rclc_execute.part.0+0x38>
 800ecd8:	2401      	movs	r4, #1
 800ecda:	e710      	b.n	800eafe <_rclc_execute.part.0+0xa6>

0800ecdc <rclc_executor_trigger_any>:
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d03d      	beq.n	800ed5c <rclc_executor_trigger_any+0x80>
 800ece0:	2900      	cmp	r1, #0
 800ece2:	d03c      	beq.n	800ed5e <rclc_executor_trigger_any+0x82>
 800ece4:	4603      	mov	r3, r0
 800ece6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ecea:	2200      	movs	r2, #0
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d035      	beq.n	800ed5c <rclc_executor_trigger_any+0x80>
 800ecf0:	b430      	push	{r4, r5}
 800ecf2:	f893 c000 	ldrb.w	ip, [r3]
 800ecf6:	f1bc 0f08 	cmp.w	ip, #8
 800ecfa:	d11d      	bne.n	800ed38 <rclc_executor_trigger_any+0x5c>
 800ecfc:	685c      	ldr	r4, [r3, #4]
 800ecfe:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ed00:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ed04:	d105      	bne.n	800ed12 <rclc_executor_trigger_any+0x36>
 800ed06:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ed0a:	b910      	cbnz	r0, 800ed12 <rclc_executor_trigger_any+0x36>
 800ed0c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ed10:	b128      	cbz	r0, 800ed1e <rclc_executor_trigger_any+0x42>
 800ed12:	bc30      	pop	{r4, r5}
 800ed14:	4770      	bx	lr
 800ed16:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d1f9      	bne.n	800ed12 <rclc_executor_trigger_any+0x36>
 800ed1e:	3201      	adds	r2, #1
 800ed20:	3340      	adds	r3, #64	@ 0x40
 800ed22:	4291      	cmp	r1, r2
 800ed24:	d017      	beq.n	800ed56 <rclc_executor_trigger_any+0x7a>
 800ed26:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	d0f1      	beq.n	800ed12 <rclc_executor_trigger_any+0x36>
 800ed2e:	f893 c000 	ldrb.w	ip, [r3]
 800ed32:	f1bc 0f08 	cmp.w	ip, #8
 800ed36:	d0e1      	beq.n	800ecfc <rclc_executor_trigger_any+0x20>
 800ed38:	f1bc 0f09 	cmp.w	ip, #9
 800ed3c:	d1eb      	bne.n	800ed16 <rclc_executor_trigger_any+0x3a>
 800ed3e:	685c      	ldr	r4, [r3, #4]
 800ed40:	6a25      	ldr	r5, [r4, #32]
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	d1e5      	bne.n	800ed12 <rclc_executor_trigger_any+0x36>
 800ed46:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d1e1      	bne.n	800ed12 <rclc_executor_trigger_any+0x36>
 800ed4e:	3201      	adds	r2, #1
 800ed50:	3340      	adds	r3, #64	@ 0x40
 800ed52:	4291      	cmp	r1, r2
 800ed54:	d1e7      	bne.n	800ed26 <rclc_executor_trigger_any+0x4a>
 800ed56:	2000      	movs	r0, #0
 800ed58:	bc30      	pop	{r4, r5}
 800ed5a:	4770      	bx	lr
 800ed5c:	4770      	bx	lr
 800ed5e:	4608      	mov	r0, r1
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop

0800ed64 <rclc_executor_get_zero_initialized_executor>:
 800ed64:	b510      	push	{r4, lr}
 800ed66:	4604      	mov	r4, r0
 800ed68:	2288      	movs	r2, #136	@ 0x88
 800ed6a:	4902      	ldr	r1, [pc, #8]	@ (800ed74 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ed6c:	f00d f98d 	bl	801c08a <memcpy>
 800ed70:	4620      	mov	r0, r4
 800ed72:	bd10      	pop	{r4, pc}
 800ed74:	0801ce70 	.word	0x0801ce70

0800ed78 <rclc_executor_init>:
 800ed78:	2900      	cmp	r1, #0
 800ed7a:	d06a      	beq.n	800ee52 <rclc_executor_init+0xda>
 800ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed80:	4605      	mov	r5, r0
 800ed82:	b0b0      	sub	sp, #192	@ 0xc0
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d05c      	beq.n	800ee42 <rclc_executor_init+0xca>
 800ed88:	4616      	mov	r6, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	4688      	mov	r8, r1
 800ed8e:	461f      	mov	r7, r3
 800ed90:	f000 fbee 	bl	800f570 <rcutils_allocator_is_valid>
 800ed94:	2e00      	cmp	r6, #0
 800ed96:	d054      	beq.n	800ee42 <rclc_executor_init+0xca>
 800ed98:	f080 0401 	eor.w	r4, r0, #1
 800ed9c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800eda0:	d14f      	bne.n	800ee42 <rclc_executor_init+0xca>
 800eda2:	2288      	movs	r2, #136	@ 0x88
 800eda4:	4930      	ldr	r1, [pc, #192]	@ (800ee68 <rclc_executor_init+0xf0>)
 800eda6:	a80e      	add	r0, sp, #56	@ 0x38
 800eda8:	f00d f96f 	bl	801c08a <memcpy>
 800edac:	a90e      	add	r1, sp, #56	@ 0x38
 800edae:	2288      	movs	r2, #136	@ 0x88
 800edb0:	4628      	mov	r0, r5
 800edb2:	f00d f96a 	bl	801c08a <memcpy>
 800edb6:	4668      	mov	r0, sp
 800edb8:	f8c5 8000 	str.w	r8, [r5]
 800edbc:	60ae      	str	r6, [r5, #8]
 800edbe:	f008 f8cb 	bl	8016f58 <rcl_get_zero_initialized_wait_set>
 800edc2:	46ec      	mov	ip, sp
 800edc4:	f105 0e14 	add.w	lr, r5, #20
 800edc8:	f8d7 8000 	ldr.w	r8, [r7]
 800edcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edd0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eddc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ede0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800ee60 <rclc_executor_init+0xe8>
 800ede4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ede8:	f8dc 3000 	ldr.w	r3, [ip]
 800edec:	01b0      	lsls	r0, r6, #6
 800edee:	6939      	ldr	r1, [r7, #16]
 800edf0:	f8ce 3000 	str.w	r3, [lr]
 800edf4:	612f      	str	r7, [r5, #16]
 800edf6:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800edfa:	47c0      	blx	r8
 800edfc:	6068      	str	r0, [r5, #4]
 800edfe:	b908      	cbnz	r0, 800ee04 <rclc_executor_init+0x8c>
 800ee00:	e029      	b.n	800ee56 <rclc_executor_init+0xde>
 800ee02:	6868      	ldr	r0, [r5, #4]
 800ee04:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ee08:	3401      	adds	r4, #1
 800ee0a:	4631      	mov	r1, r6
 800ee0c:	f000 fa74 	bl	800f2f8 <rclc_executor_handle_init>
 800ee10:	42a6      	cmp	r6, r4
 800ee12:	d8f6      	bhi.n	800ee02 <rclc_executor_init+0x8a>
 800ee14:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800ee18:	f000 fa62 	bl	800f2e0 <rclc_executor_handle_counters_zero_init>
 800ee1c:	4a13      	ldr	r2, [pc, #76]	@ (800ee6c <rclc_executor_init+0xf4>)
 800ee1e:	2300      	movs	r3, #0
 800ee20:	6868      	ldr	r0, [r5, #4]
 800ee22:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800ee26:	b168      	cbz	r0, 800ee44 <rclc_executor_init+0xcc>
 800ee28:	68ab      	ldr	r3, [r5, #8]
 800ee2a:	b173      	cbz	r3, 800ee4a <rclc_executor_init+0xd2>
 800ee2c:	692a      	ldr	r2, [r5, #16]
 800ee2e:	fab2 f382 	clz	r3, r2
 800ee32:	095b      	lsrs	r3, r3, #5
 800ee34:	b14a      	cbz	r2, 800ee4a <rclc_executor_init+0xd2>
 800ee36:	4618      	mov	r0, r3
 800ee38:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800ee3c:	b030      	add	sp, #192	@ 0xc0
 800ee3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee42:	200b      	movs	r0, #11
 800ee44:	b030      	add	sp, #192	@ 0xc0
 800ee46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	b030      	add	sp, #192	@ 0xc0
 800ee4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee52:	200b      	movs	r0, #11
 800ee54:	4770      	bx	lr
 800ee56:	200a      	movs	r0, #10
 800ee58:	e7f4      	b.n	800ee44 <rclc_executor_init+0xcc>
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w
 800ee60:	3b9aca00 	.word	0x3b9aca00
 800ee64:	00000000 	.word	0x00000000
 800ee68:	0801ce70 	.word	0x0801ce70
 800ee6c:	0800ecdd 	.word	0x0800ecdd

0800ee70 <rclc_executor_add_timer>:
 800ee70:	b351      	cbz	r1, 800eec8 <rclc_executor_add_timer+0x58>
 800ee72:	fab0 f280 	clz	r2, r0
 800ee76:	b570      	push	{r4, r5, r6, lr}
 800ee78:	0952      	lsrs	r2, r2, #5
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	b1e0      	cbz	r0, 800eeb8 <rclc_executor_add_timer+0x48>
 800ee7e:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800ee82:	4283      	cmp	r3, r0
 800ee84:	d301      	bcc.n	800ee8a <rclc_executor_add_timer+0x1a>
 800ee86:	2001      	movs	r0, #1
 800ee88:	bd70      	pop	{r4, r5, r6, pc}
 800ee8a:	6860      	ldr	r0, [r4, #4]
 800ee8c:	019d      	lsls	r5, r3, #6
 800ee8e:	1c5e      	adds	r6, r3, #1
 800ee90:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800ee94:	6059      	str	r1, [r3, #4]
 800ee96:	2102      	movs	r1, #2
 800ee98:	5341      	strh	r1, [r0, r5]
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	f104 0514 	add.w	r5, r4, #20
 800eea0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eea2:	8719      	strh	r1, [r3, #56]	@ 0x38
 800eea4:	4628      	mov	r0, r5
 800eea6:	60e6      	str	r6, [r4, #12]
 800eea8:	f008 f86a 	bl	8016f80 <rcl_wait_set_is_valid>
 800eeac:	b930      	cbnz	r0, 800eebc <rclc_executor_add_timer+0x4c>
 800eeae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}
 800eeb8:	200b      	movs	r0, #11
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	4628      	mov	r0, r5
 800eebe:	f008 f865 	bl	8016f8c <rcl_wait_set_fini>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d0f3      	beq.n	800eeae <rclc_executor_add_timer+0x3e>
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	200b      	movs	r0, #11
 800eeca:	4770      	bx	lr

0800eecc <rclc_executor_prepare>:
 800eecc:	2800      	cmp	r0, #0
 800eece:	d044      	beq.n	800ef5a <rclc_executor_prepare+0x8e>
 800eed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed2:	f100 0514 	add.w	r5, r0, #20
 800eed6:	b09b      	sub	sp, #108	@ 0x6c
 800eed8:	4604      	mov	r4, r0
 800eeda:	4628      	mov	r0, r5
 800eedc:	f008 f850 	bl	8016f80 <rcl_wait_set_is_valid>
 800eee0:	b110      	cbz	r0, 800eee8 <rclc_executor_prepare+0x1c>
 800eee2:	2000      	movs	r0, #0
 800eee4:	b01b      	add	sp, #108	@ 0x6c
 800eee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee8:	4628      	mov	r0, r5
 800eeea:	f008 f84f 	bl	8016f8c <rcl_wait_set_fini>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d130      	bne.n	800ef54 <rclc_executor_prepare+0x88>
 800eef2:	a80c      	add	r0, sp, #48	@ 0x30
 800eef4:	ae04      	add	r6, sp, #16
 800eef6:	f008 f82f 	bl	8016f58 <rcl_get_zero_initialized_wait_set>
 800eefa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800eefe:	46ae      	mov	lr, r5
 800ef00:	6927      	ldr	r7, [r4, #16]
 800ef02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ef0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ef12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ef1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ef1e:	f8ce 3000 	str.w	r3, [lr]
 800ef22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ef24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	4628      	mov	r0, r5
 800ef2a:	6822      	ldr	r2, [r4, #0]
 800ef2c:	6033      	str	r3, [r6, #0]
 800ef2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef30:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ef32:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ef36:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ef3a:	e9cd 2100 	strd	r2, r1, [sp]
 800ef3e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ef40:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ef42:	f008 fb23 	bl	801758c <rcl_wait_set_init>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d0cc      	beq.n	800eee4 <rclc_executor_prepare+0x18>
 800ef4a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ef4c:	f000 fb34 	bl	800f5b8 <rcutils_reset_error>
 800ef50:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ef52:	e7c7      	b.n	800eee4 <rclc_executor_prepare+0x18>
 800ef54:	f000 fb30 	bl	800f5b8 <rcutils_reset_error>
 800ef58:	e7cb      	b.n	800eef2 <rclc_executor_prepare+0x26>
 800ef5a:	200b      	movs	r0, #11
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop

0800ef60 <rclc_executor_spin_some.part.0>:
 800ef60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef64:	4605      	mov	r5, r0
 800ef66:	4691      	mov	r9, r2
 800ef68:	4698      	mov	r8, r3
 800ef6a:	f7ff ffaf 	bl	800eecc <rclc_executor_prepare>
 800ef6e:	f105 0614 	add.w	r6, r5, #20
 800ef72:	4630      	mov	r0, r6
 800ef74:	f008 f8d6 	bl	8017124 <rcl_wait_set_clear>
 800ef78:	4607      	mov	r7, r0
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	f040 80a8 	bne.w	800f0d0 <rclc_executor_spin_some.part.0+0x170>
 800ef80:	68ab      	ldr	r3, [r5, #8]
 800ef82:	b30b      	cbz	r3, 800efc8 <rclc_executor_spin_some.part.0+0x68>
 800ef84:	4604      	mov	r4, r0
 800ef86:	6869      	ldr	r1, [r5, #4]
 800ef88:	01a2      	lsls	r2, r4, #6
 800ef8a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ef8e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ef92:	b1cb      	cbz	r3, 800efc8 <rclc_executor_spin_some.part.0+0x68>
 800ef94:	5c8b      	ldrb	r3, [r1, r2]
 800ef96:	2b0a      	cmp	r3, #10
 800ef98:	f200 80de 	bhi.w	800f158 <rclc_executor_spin_some.part.0+0x1f8>
 800ef9c:	e8df f003 	tbb	[pc, r3]
 800efa0:	8da99d9d 	.word	0x8da99d9d
 800efa4:	0606068d 	.word	0x0606068d
 800efa8:	c1ce      	.short	0xc1ce
 800efaa:	b5          	.byte	0xb5
 800efab:	00          	.byte	0x00
 800efac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800efb0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800efb4:	4630      	mov	r0, r6
 800efb6:	f008 fc05 	bl	80177c4 <rcl_wait_set_add_service>
 800efba:	2800      	cmp	r0, #0
 800efbc:	f040 8087 	bne.w	800f0ce <rclc_executor_spin_some.part.0+0x16e>
 800efc0:	3401      	adds	r4, #1
 800efc2:	68ab      	ldr	r3, [r5, #8]
 800efc4:	429c      	cmp	r4, r3
 800efc6:	d3de      	bcc.n	800ef86 <rclc_executor_spin_some.part.0+0x26>
 800efc8:	4643      	mov	r3, r8
 800efca:	464a      	mov	r2, r9
 800efcc:	4630      	mov	r0, r6
 800efce:	f008 fc27 	bl	8017820 <rcl_wait>
 800efd2:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 80c6 	beq.w	800f168 <rclc_executor_spin_some.part.0+0x208>
 800efdc:	2b01      	cmp	r3, #1
 800efde:	f040 80bb 	bne.w	800f158 <rclc_executor_spin_some.part.0+0x1f8>
 800efe2:	68ab      	ldr	r3, [r5, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 8159 	beq.w	800f29c <rclc_executor_spin_some.part.0+0x33c>
 800efea:	2400      	movs	r4, #0
 800efec:	f240 1991 	movw	r9, #401	@ 0x191
 800eff0:	46a0      	mov	r8, r4
 800eff2:	e00a      	b.n	800f00a <rclc_executor_spin_some.part.0+0xaa>
 800eff4:	f7ff fb6e 	bl	800e6d4 <_rclc_check_for_new_data>
 800eff8:	4604      	mov	r4, r0
 800effa:	b110      	cbz	r0, 800f002 <rclc_executor_spin_some.part.0+0xa2>
 800effc:	4548      	cmp	r0, r9
 800effe:	f040 80b1 	bne.w	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f002:	68ab      	ldr	r3, [r5, #8]
 800f004:	4598      	cmp	r8, r3
 800f006:	f080 8126 	bcs.w	800f256 <rclc_executor_spin_some.part.0+0x2f6>
 800f00a:	686a      	ldr	r2, [r5, #4]
 800f00c:	4631      	mov	r1, r6
 800f00e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f012:	f108 0801 	add.w	r8, r8, #1
 800f016:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f01a:	f1bc 0f00 	cmp.w	ip, #0
 800f01e:	d1e9      	bne.n	800eff4 <rclc_executor_spin_some.part.0+0x94>
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f028:	4798      	blx	r3
 800f02a:	2800      	cmp	r0, #0
 800f02c:	f000 809a 	beq.w	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f030:	68ab      	ldr	r3, [r5, #8]
 800f032:	2b00      	cmp	r3, #0
 800f034:	f000 8096 	beq.w	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f038:	f04f 0800 	mov.w	r8, #0
 800f03c:	f240 1991 	movw	r9, #401	@ 0x191
 800f040:	e009      	b.n	800f056 <rclc_executor_spin_some.part.0+0xf6>
 800f042:	f7ff fb95 	bl	800e770 <_rclc_take_new_data>
 800f046:	4604      	mov	r4, r0
 800f048:	b110      	cbz	r0, 800f050 <rclc_executor_spin_some.part.0+0xf0>
 800f04a:	4548      	cmp	r0, r9
 800f04c:	f040 808a 	bne.w	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f050:	68ab      	ldr	r3, [r5, #8]
 800f052:	4598      	cmp	r8, r3
 800f054:	d209      	bcs.n	800f06a <rclc_executor_spin_some.part.0+0x10a>
 800f056:	6868      	ldr	r0, [r5, #4]
 800f058:	4631      	mov	r1, r6
 800f05a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f05e:	f108 0801 	add.w	r8, r8, #1
 800f062:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f066:	2a00      	cmp	r2, #0
 800f068:	d1eb      	bne.n	800f042 <rclc_executor_spin_some.part.0+0xe2>
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d07a      	beq.n	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f06e:	2600      	movs	r6, #0
 800f070:	e00e      	b.n	800f090 <rclc_executor_spin_some.part.0+0x130>
 800f072:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f076:	2a08      	cmp	r2, #8
 800f078:	f000 80fc 	beq.w	800f274 <rclc_executor_spin_some.part.0+0x314>
 800f07c:	2a09      	cmp	r2, #9
 800f07e:	f000 80ee 	beq.w	800f25e <rclc_executor_spin_some.part.0+0x2fe>
 800f082:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f086:	b98a      	cbnz	r2, 800f0ac <rclc_executor_spin_some.part.0+0x14c>
 800f088:	3601      	adds	r6, #1
 800f08a:	429e      	cmp	r6, r3
 800f08c:	d267      	bcs.n	800f15e <rclc_executor_spin_some.part.0+0x1fe>
 800f08e:	2400      	movs	r4, #0
 800f090:	686a      	ldr	r2, [r5, #4]
 800f092:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f096:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f09a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f09e:	2900      	cmp	r1, #0
 800f0a0:	d060      	beq.n	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f0a2:	7841      	ldrb	r1, [r0, #1]
 800f0a4:	2900      	cmp	r1, #0
 800f0a6:	d0e4      	beq.n	800f072 <rclc_executor_spin_some.part.0+0x112>
 800f0a8:	2901      	cmp	r1, #1
 800f0aa:	d1ed      	bne.n	800f088 <rclc_executor_spin_some.part.0+0x128>
 800f0ac:	f7ff fcd4 	bl	800ea58 <_rclc_execute.part.0>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	f040 80b5 	bne.w	800f220 <rclc_executor_spin_some.part.0+0x2c0>
 800f0b6:	68ab      	ldr	r3, [r5, #8]
 800f0b8:	e7e6      	b.n	800f088 <rclc_executor_spin_some.part.0+0x128>
 800f0ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f0be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	f008 fb52 	bl	801776c <rcl_wait_set_add_client>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	f43f af79 	beq.w	800efc0 <rclc_executor_spin_some.part.0+0x60>
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	f000 fa72 	bl	800f5b8 <rcutils_reset_error>
 800f0d4:	4638      	mov	r0, r7
 800f0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f0de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f007 fff2 	bl	80170cc <rcl_wait_set_add_subscription>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	f43f af69 	beq.w	800efc0 <rclc_executor_spin_some.part.0+0x60>
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	e7ee      	b.n	800f0d0 <rclc_executor_spin_some.part.0+0x170>
 800f0f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f0f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f008 fb06 	bl	801770c <rcl_wait_set_add_timer>
 800f100:	2800      	cmp	r0, #0
 800f102:	f43f af5d 	beq.w	800efc0 <rclc_executor_spin_some.part.0+0x60>
 800f106:	4607      	mov	r7, r0
 800f108:	e7e2      	b.n	800f0d0 <rclc_executor_spin_some.part.0+0x170>
 800f10a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f10e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f112:	4630      	mov	r0, r6
 800f114:	f008 face 	bl	80176b4 <rcl_wait_set_add_guard_condition>
 800f118:	2800      	cmp	r0, #0
 800f11a:	f43f af51 	beq.w	800efc0 <rclc_executor_spin_some.part.0+0x60>
 800f11e:	4607      	mov	r7, r0
 800f120:	e7d6      	b.n	800f0d0 <rclc_executor_spin_some.part.0+0x170>
 800f122:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f126:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f12a:	4630      	mov	r0, r6
 800f12c:	3110      	adds	r1, #16
 800f12e:	f009 f84d 	bl	80181cc <rcl_action_wait_set_add_action_server>
 800f132:	2800      	cmp	r0, #0
 800f134:	f43f af44 	beq.w	800efc0 <rclc_executor_spin_some.part.0+0x60>
 800f138:	4607      	mov	r7, r0
 800f13a:	e7c9      	b.n	800f0d0 <rclc_executor_spin_some.part.0+0x170>
 800f13c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f140:	2300      	movs	r3, #0
 800f142:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f146:	4630      	mov	r0, r6
 800f148:	3110      	adds	r1, #16
 800f14a:	f008 fe15 	bl	8017d78 <rcl_action_wait_set_add_action_client>
 800f14e:	2800      	cmp	r0, #0
 800f150:	f43f af36 	beq.w	800efc0 <rclc_executor_spin_some.part.0+0x60>
 800f154:	4607      	mov	r7, r0
 800f156:	e7bb      	b.n	800f0d0 <rclc_executor_spin_some.part.0+0x170>
 800f158:	2701      	movs	r7, #1
 800f15a:	f000 fa2d 	bl	800f5b8 <rcutils_reset_error>
 800f15e:	4638      	mov	r0, r7
 800f160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f164:	4627      	mov	r7, r4
 800f166:	e7fa      	b.n	800f15e <rclc_executor_spin_some.part.0+0x1fe>
 800f168:	68ab      	ldr	r3, [r5, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 8093 	beq.w	800f296 <rclc_executor_spin_some.part.0+0x336>
 800f170:	2400      	movs	r4, #0
 800f172:	f240 1991 	movw	r9, #401	@ 0x191
 800f176:	46a0      	mov	r8, r4
 800f178:	e008      	b.n	800f18c <rclc_executor_spin_some.part.0+0x22c>
 800f17a:	f7ff faab 	bl	800e6d4 <_rclc_check_for_new_data>
 800f17e:	4604      	mov	r4, r0
 800f180:	b108      	cbz	r0, 800f186 <rclc_executor_spin_some.part.0+0x226>
 800f182:	4548      	cmp	r0, r9
 800f184:	d1ee      	bne.n	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f186:	68ab      	ldr	r3, [r5, #8]
 800f188:	4598      	cmp	r8, r3
 800f18a:	d266      	bcs.n	800f25a <rclc_executor_spin_some.part.0+0x2fa>
 800f18c:	686a      	ldr	r2, [r5, #4]
 800f18e:	4631      	mov	r1, r6
 800f190:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f194:	f108 0801 	add.w	r8, r8, #1
 800f198:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f19c:	f1bc 0f00 	cmp.w	ip, #0
 800f1a0:	d1eb      	bne.n	800f17a <rclc_executor_spin_some.part.0+0x21a>
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f1aa:	4798      	blx	r3
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d0d9      	beq.n	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f1b0:	68ab      	ldr	r3, [r5, #8]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d0d6      	beq.n	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f1b6:	f04f 0a00 	mov.w	sl, #0
 800f1ba:	f240 1891 	movw	r8, #401	@ 0x191
 800f1be:	f240 2959 	movw	r9, #601	@ 0x259
 800f1c2:	e00e      	b.n	800f1e2 <rclc_executor_spin_some.part.0+0x282>
 800f1c4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f1c8:	2b08      	cmp	r3, #8
 800f1ca:	d034      	beq.n	800f236 <rclc_executor_spin_some.part.0+0x2d6>
 800f1cc:	2b09      	cmp	r3, #9
 800f1ce:	d029      	beq.n	800f224 <rclc_executor_spin_some.part.0+0x2c4>
 800f1d0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f1d4:	bb03      	cbnz	r3, 800f218 <rclc_executor_spin_some.part.0+0x2b8>
 800f1d6:	f10a 0a01 	add.w	sl, sl, #1
 800f1da:	68ab      	ldr	r3, [r5, #8]
 800f1dc:	459a      	cmp	sl, r3
 800f1de:	d2be      	bcs.n	800f15e <rclc_executor_spin_some.part.0+0x1fe>
 800f1e0:	2400      	movs	r4, #0
 800f1e2:	6868      	ldr	r0, [r5, #4]
 800f1e4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f1e8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f1ec:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0b7      	beq.n	800f164 <rclc_executor_spin_some.part.0+0x204>
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	f7ff fabb 	bl	800e770 <_rclc_take_new_data>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	bf18      	it	ne
 800f1fe:	4540      	cmpne	r0, r8
 800f200:	d001      	beq.n	800f206 <rclc_executor_spin_some.part.0+0x2a6>
 800f202:	4548      	cmp	r0, r9
 800f204:	d10c      	bne.n	800f220 <rclc_executor_spin_some.part.0+0x2c0>
 800f206:	686b      	ldr	r3, [r5, #4]
 800f208:	eb13 000b 	adds.w	r0, r3, fp
 800f20c:	d021      	beq.n	800f252 <rclc_executor_spin_some.part.0+0x2f2>
 800f20e:	7842      	ldrb	r2, [r0, #1]
 800f210:	2a00      	cmp	r2, #0
 800f212:	d0d7      	beq.n	800f1c4 <rclc_executor_spin_some.part.0+0x264>
 800f214:	2a01      	cmp	r2, #1
 800f216:	d1de      	bne.n	800f1d6 <rclc_executor_spin_some.part.0+0x276>
 800f218:	f7ff fc1e 	bl	800ea58 <_rclc_execute.part.0>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d0da      	beq.n	800f1d6 <rclc_executor_spin_some.part.0+0x276>
 800f220:	4607      	mov	r7, r0
 800f222:	e79c      	b.n	800f15e <rclc_executor_spin_some.part.0+0x1fe>
 800f224:	6843      	ldr	r3, [r0, #4]
 800f226:	6a1a      	ldr	r2, [r3, #32]
 800f228:	2a00      	cmp	r2, #0
 800f22a:	d1f5      	bne.n	800f218 <rclc_executor_spin_some.part.0+0x2b8>
 800f22c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f230:	2b00      	cmp	r3, #0
 800f232:	d0d0      	beq.n	800f1d6 <rclc_executor_spin_some.part.0+0x276>
 800f234:	e7f0      	b.n	800f218 <rclc_executor_spin_some.part.0+0x2b8>
 800f236:	6843      	ldr	r3, [r0, #4]
 800f238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f23a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800f23e:	d1eb      	bne.n	800f218 <rclc_executor_spin_some.part.0+0x2b8>
 800f240:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f244:	2a00      	cmp	r2, #0
 800f246:	d1e7      	bne.n	800f218 <rclc_executor_spin_some.part.0+0x2b8>
 800f248:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d0c2      	beq.n	800f1d6 <rclc_executor_spin_some.part.0+0x276>
 800f250:	e7e2      	b.n	800f218 <rclc_executor_spin_some.part.0+0x2b8>
 800f252:	270b      	movs	r7, #11
 800f254:	e783      	b.n	800f15e <rclc_executor_spin_some.part.0+0x1fe>
 800f256:	686a      	ldr	r2, [r5, #4]
 800f258:	e6e2      	b.n	800f020 <rclc_executor_spin_some.part.0+0xc0>
 800f25a:	686a      	ldr	r2, [r5, #4]
 800f25c:	e7a1      	b.n	800f1a2 <rclc_executor_spin_some.part.0+0x242>
 800f25e:	6842      	ldr	r2, [r0, #4]
 800f260:	6a11      	ldr	r1, [r2, #32]
 800f262:	2900      	cmp	r1, #0
 800f264:	f47f af22 	bne.w	800f0ac <rclc_executor_spin_some.part.0+0x14c>
 800f268:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f26c:	2a00      	cmp	r2, #0
 800f26e:	f43f af0b 	beq.w	800f088 <rclc_executor_spin_some.part.0+0x128>
 800f272:	e71b      	b.n	800f0ac <rclc_executor_spin_some.part.0+0x14c>
 800f274:	6842      	ldr	r2, [r0, #4]
 800f276:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800f278:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800f27c:	f47f af16 	bne.w	800f0ac <rclc_executor_spin_some.part.0+0x14c>
 800f280:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800f284:	2900      	cmp	r1, #0
 800f286:	f47f af11 	bne.w	800f0ac <rclc_executor_spin_some.part.0+0x14c>
 800f28a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800f28e:	2a00      	cmp	r2, #0
 800f290:	f43f aefa 	beq.w	800f088 <rclc_executor_spin_some.part.0+0x128>
 800f294:	e70a      	b.n	800f0ac <rclc_executor_spin_some.part.0+0x14c>
 800f296:	686a      	ldr	r2, [r5, #4]
 800f298:	461c      	mov	r4, r3
 800f29a:	e782      	b.n	800f1a2 <rclc_executor_spin_some.part.0+0x242>
 800f29c:	686a      	ldr	r2, [r5, #4]
 800f29e:	461c      	mov	r4, r3
 800f2a0:	e6be      	b.n	800f020 <rclc_executor_spin_some.part.0+0xc0>
 800f2a2:	bf00      	nop

0800f2a4 <rclc_executor_spin>:
 800f2a4:	b1d0      	cbz	r0, 800f2dc <rclc_executor_spin+0x38>
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	e004      	b.n	800f2b8 <rclc_executor_spin+0x14>
 800f2ae:	f7ff fe57 	bl	800ef60 <rclc_executor_spin_some.part.0>
 800f2b2:	f030 0302 	bics.w	r3, r0, #2
 800f2b6:	d10f      	bne.n	800f2d8 <rclc_executor_spin+0x34>
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800f2be:	e9cd 2300 	strd	r2, r3, [sp]
 800f2c2:	f006 fc29 	bl	8015b18 <rcl_context_is_valid>
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2ce:	2900      	cmp	r1, #0
 800f2d0:	d1ed      	bne.n	800f2ae <rclc_executor_spin+0xa>
 800f2d2:	f000 f971 	bl	800f5b8 <rcutils_reset_error>
 800f2d6:	2001      	movs	r0, #1
 800f2d8:	b002      	add	sp, #8
 800f2da:	bd10      	pop	{r4, pc}
 800f2dc:	200b      	movs	r0, #11
 800f2de:	4770      	bx	lr

0800f2e0 <rclc_executor_handle_counters_zero_init>:
 800f2e0:	b130      	cbz	r0, 800f2f0 <rclc_executor_handle_counters_zero_init+0x10>
 800f2e2:	2220      	movs	r2, #32
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	b508      	push	{r3, lr}
 800f2e8:	f00c fe06 	bl	801bef8 <memset>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	bd08      	pop	{r3, pc}
 800f2f0:	200b      	movs	r0, #11
 800f2f2:	4770      	bx	lr
 800f2f4:	0000      	movs	r0, r0
	...

0800f2f8 <rclc_executor_handle_init>:
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	b178      	cbz	r0, 800f31c <rclc_executor_handle_init+0x24>
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f04f 0c0b 	mov.w	ip, #11
 800f302:	6341      	str	r1, [r0, #52]	@ 0x34
 800f304:	4610      	mov	r0, r2
 800f306:	f8a3 c000 	strh.w	ip, [r3]
 800f30a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f30c:	871a      	strh	r2, [r3, #56]	@ 0x38
 800f30e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800f320 <rclc_executor_handle_init+0x28>
 800f312:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800f316:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800f31a:	4770      	bx	lr
 800f31c:	200b      	movs	r0, #11
 800f31e:	4770      	bx	lr
	...

0800f328 <rclc_support_init_with_options>:
 800f328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f32c:	b083      	sub	sp, #12
 800f32e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800f330:	2b00      	cmp	r3, #0
 800f332:	bf18      	it	ne
 800f334:	2f00      	cmpne	r7, #0
 800f336:	d027      	beq.n	800f388 <rclc_support_init_with_options+0x60>
 800f338:	4604      	mov	r4, r0
 800f33a:	b328      	cbz	r0, 800f388 <rclc_support_init_with_options+0x60>
 800f33c:	46e9      	mov	r9, sp
 800f33e:	461d      	mov	r5, r3
 800f340:	460e      	mov	r6, r1
 800f342:	4690      	mov	r8, r2
 800f344:	4648      	mov	r0, r9
 800f346:	f006 fbdd 	bl	8015b04 <rcl_get_zero_initialized_context>
 800f34a:	462a      	mov	r2, r5
 800f34c:	4623      	mov	r3, r4
 800f34e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f352:	e884 0003 	stmia.w	r4, {r0, r1}
 800f356:	4641      	mov	r1, r8
 800f358:	4630      	mov	r0, r6
 800f35a:	f006 fc43 	bl	8015be4 <rcl_init>
 800f35e:	4605      	mov	r5, r0
 800f360:	b960      	cbnz	r0, 800f37c <rclc_support_init_with_options+0x54>
 800f362:	463a      	mov	r2, r7
 800f364:	f104 010c 	add.w	r1, r4, #12
 800f368:	2003      	movs	r0, #3
 800f36a:	60a7      	str	r7, [r4, #8]
 800f36c:	f007 f9c8 	bl	8016700 <rcl_clock_init>
 800f370:	4605      	mov	r5, r0
 800f372:	b918      	cbnz	r0, 800f37c <rclc_support_init_with_options+0x54>
 800f374:	4628      	mov	r0, r5
 800f376:	b003      	add	sp, #12
 800f378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f37c:	f000 f91c 	bl	800f5b8 <rcutils_reset_error>
 800f380:	4628      	mov	r0, r5
 800f382:	b003      	add	sp, #12
 800f384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f388:	250b      	movs	r5, #11
 800f38a:	4628      	mov	r0, r5
 800f38c:	b003      	add	sp, #12
 800f38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f392:	bf00      	nop

0800f394 <rclc_node_init_default>:
 800f394:	2b00      	cmp	r3, #0
 800f396:	bf18      	it	ne
 800f398:	2a00      	cmpne	r2, #0
 800f39a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f39e:	4616      	mov	r6, r2
 800f3a0:	bf0c      	ite	eq
 800f3a2:	2201      	moveq	r2, #1
 800f3a4:	2200      	movne	r2, #0
 800f3a6:	b0a1      	sub	sp, #132	@ 0x84
 800f3a8:	2900      	cmp	r1, #0
 800f3aa:	bf08      	it	eq
 800f3ac:	f042 0201 	orreq.w	r2, r2, #1
 800f3b0:	bb22      	cbnz	r2, 800f3fc <rclc_node_init_default+0x68>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	b310      	cbz	r0, 800f3fc <rclc_node_init_default+0x68>
 800f3b6:	f10d 0810 	add.w	r8, sp, #16
 800f3ba:	461f      	mov	r7, r3
 800f3bc:	460d      	mov	r5, r1
 800f3be:	f10d 0918 	add.w	r9, sp, #24
 800f3c2:	4640      	mov	r0, r8
 800f3c4:	f006 fd36 	bl	8015e34 <rcl_get_zero_initialized_node>
 800f3c8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f3cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800f3d0:	4648      	mov	r0, r9
 800f3d2:	f006 fea9 	bl	8016128 <rcl_node_get_default_options>
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	f006 fd2c 	bl	8015e34 <rcl_get_zero_initialized_node>
 800f3dc:	f8cd 9000 	str.w	r9, [sp]
 800f3e0:	463b      	mov	r3, r7
 800f3e2:	4632      	mov	r2, r6
 800f3e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f3e8:	e884 0003 	stmia.w	r4, {r0, r1}
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f006 fd2a 	bl	8015e48 <rcl_node_init>
 800f3f4:	b930      	cbnz	r0, 800f404 <rclc_node_init_default+0x70>
 800f3f6:	b021      	add	sp, #132	@ 0x84
 800f3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3fc:	200b      	movs	r0, #11
 800f3fe:	b021      	add	sp, #132	@ 0x84
 800f400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f404:	9003      	str	r0, [sp, #12]
 800f406:	f000 f8d7 	bl	800f5b8 <rcutils_reset_error>
 800f40a:	f000 f8d5 	bl	800f5b8 <rcutils_reset_error>
 800f40e:	9803      	ldr	r0, [sp, #12]
 800f410:	b021      	add	sp, #132	@ 0x84
 800f412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f416:	bf00      	nop

0800f418 <rclc_publisher_init_best_effort>:
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bf18      	it	ne
 800f41c:	2a00      	cmpne	r2, #0
 800f41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f422:	4616      	mov	r6, r2
 800f424:	bf0c      	ite	eq
 800f426:	2201      	moveq	r2, #1
 800f428:	2200      	movne	r2, #0
 800f42a:	b0a0      	sub	sp, #128	@ 0x80
 800f42c:	2900      	cmp	r1, #0
 800f42e:	bf08      	it	eq
 800f430:	f042 0201 	orreq.w	r2, r2, #1
 800f434:	bb1a      	cbnz	r2, 800f47e <rclc_publisher_init_best_effort+0x66>
 800f436:	4604      	mov	r4, r0
 800f438:	b308      	cbz	r0, 800f47e <rclc_publisher_init_best_effort+0x66>
 800f43a:	f10d 0810 	add.w	r8, sp, #16
 800f43e:	461f      	mov	r7, r3
 800f440:	460d      	mov	r5, r1
 800f442:	f7ff f833 	bl	800e4ac <rcl_get_zero_initialized_publisher>
 800f446:	6020      	str	r0, [r4, #0]
 800f448:	4640      	mov	r0, r8
 800f44a:	f7ff f8cf 	bl	800e5ec <rcl_publisher_get_default_options>
 800f44e:	2250      	movs	r2, #80	@ 0x50
 800f450:	490d      	ldr	r1, [pc, #52]	@ (800f488 <rclc_publisher_init_best_effort+0x70>)
 800f452:	4640      	mov	r0, r8
 800f454:	f00c fe19 	bl	801c08a <memcpy>
 800f458:	463b      	mov	r3, r7
 800f45a:	4632      	mov	r2, r6
 800f45c:	4629      	mov	r1, r5
 800f45e:	4620      	mov	r0, r4
 800f460:	f8cd 8000 	str.w	r8, [sp]
 800f464:	f7ff f828 	bl	800e4b8 <rcl_publisher_init>
 800f468:	b910      	cbnz	r0, 800f470 <rclc_publisher_init_best_effort+0x58>
 800f46a:	b020      	add	sp, #128	@ 0x80
 800f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f470:	9003      	str	r0, [sp, #12]
 800f472:	f000 f8a1 	bl	800f5b8 <rcutils_reset_error>
 800f476:	9803      	ldr	r0, [sp, #12]
 800f478:	b020      	add	sp, #128	@ 0x80
 800f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47e:	200b      	movs	r0, #11
 800f480:	b020      	add	sp, #128	@ 0x80
 800f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f486:	bf00      	nop
 800f488:	0801cef8 	.word	0x0801cef8

0800f48c <rclc_timer_init_default>:
 800f48c:	b361      	cbz	r1, 800f4e8 <rclc_timer_init_default+0x5c>
 800f48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f492:	4606      	mov	r6, r0
 800f494:	b08a      	sub	sp, #40	@ 0x28
 800f496:	b318      	cbz	r0, 800f4e0 <rclc_timer_init_default+0x54>
 800f498:	460d      	mov	r5, r1
 800f49a:	4690      	mov	r8, r2
 800f49c:	461f      	mov	r7, r3
 800f49e:	f007 fb27 	bl	8016af0 <rcl_get_zero_initialized_timer>
 800f4a2:	68ac      	ldr	r4, [r5, #8]
 800f4a4:	f10d 0c0c 	add.w	ip, sp, #12
 800f4a8:	6030      	str	r0, [r6, #0]
 800f4aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	462a      	mov	r2, r5
 800f4b4:	f105 010c 	add.w	r1, r5, #12
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f8cc 3000 	str.w	r3, [ip]
 800f4be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4c0:	e9cd 8700 	strd	r8, r7, [sp]
 800f4c4:	9302      	str	r3, [sp, #8]
 800f4c6:	f007 fb1b 	bl	8016b00 <rcl_timer_init>
 800f4ca:	b910      	cbnz	r0, 800f4d2 <rclc_timer_init_default+0x46>
 800f4cc:	b00a      	add	sp, #40	@ 0x28
 800f4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d2:	9009      	str	r0, [sp, #36]	@ 0x24
 800f4d4:	f000 f870 	bl	800f5b8 <rcutils_reset_error>
 800f4d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4da:	b00a      	add	sp, #40	@ 0x28
 800f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e0:	200b      	movs	r0, #11
 800f4e2:	b00a      	add	sp, #40	@ 0x28
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	200b      	movs	r0, #11
 800f4ea:	4770      	bx	lr

0800f4ec <__default_zero_allocate>:
 800f4ec:	f00c b81a 	b.w	801b524 <calloc>

0800f4f0 <__default_reallocate>:
 800f4f0:	f00c b9b8 	b.w	801b864 <realloc>

0800f4f4 <__default_deallocate>:
 800f4f4:	f00c b894 	b.w	801b620 <free>

0800f4f8 <__default_allocate>:
 800f4f8:	f00c b88a 	b.w	801b610 <malloc>

0800f4fc <rcutils_get_zero_initialized_allocator>:
 800f4fc:	b510      	push	{r4, lr}
 800f4fe:	4c05      	ldr	r4, [pc, #20]	@ (800f514 <rcutils_get_zero_initialized_allocator+0x18>)
 800f500:	4686      	mov	lr, r0
 800f502:	4684      	mov	ip, r0
 800f504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	4670      	mov	r0, lr
 800f50e:	f8cc 3000 	str.w	r3, [ip]
 800f512:	bd10      	pop	{r4, pc}
 800f514:	0801cf48 	.word	0x0801cf48

0800f518 <rcutils_set_default_allocator>:
 800f518:	b1a8      	cbz	r0, 800f546 <rcutils_set_default_allocator+0x2e>
 800f51a:	6802      	ldr	r2, [r0, #0]
 800f51c:	b1a2      	cbz	r2, 800f548 <rcutils_set_default_allocator+0x30>
 800f51e:	6841      	ldr	r1, [r0, #4]
 800f520:	b1a1      	cbz	r1, 800f54c <rcutils_set_default_allocator+0x34>
 800f522:	b410      	push	{r4}
 800f524:	68c4      	ldr	r4, [r0, #12]
 800f526:	b164      	cbz	r4, 800f542 <rcutils_set_default_allocator+0x2a>
 800f528:	6880      	ldr	r0, [r0, #8]
 800f52a:	b138      	cbz	r0, 800f53c <rcutils_set_default_allocator+0x24>
 800f52c:	4b08      	ldr	r3, [pc, #32]	@ (800f550 <rcutils_set_default_allocator+0x38>)
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	2200      	movs	r2, #0
 800f532:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f536:	2001      	movs	r0, #1
 800f538:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	4620      	mov	r0, r4
 800f544:	e7fa      	b.n	800f53c <rcutils_set_default_allocator+0x24>
 800f546:	4770      	bx	lr
 800f548:	4610      	mov	r0, r2
 800f54a:	4770      	bx	lr
 800f54c:	4608      	mov	r0, r1
 800f54e:	4770      	bx	lr
 800f550:	24000034 	.word	0x24000034

0800f554 <rcutils_get_default_allocator>:
 800f554:	b510      	push	{r4, lr}
 800f556:	4c05      	ldr	r4, [pc, #20]	@ (800f56c <rcutils_get_default_allocator+0x18>)
 800f558:	4686      	mov	lr, r0
 800f55a:	4684      	mov	ip, r0
 800f55c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f55e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f562:	6823      	ldr	r3, [r4, #0]
 800f564:	4670      	mov	r0, lr
 800f566:	f8cc 3000 	str.w	r3, [ip]
 800f56a:	bd10      	pop	{r4, pc}
 800f56c:	24000034 	.word	0x24000034

0800f570 <rcutils_allocator_is_valid>:
 800f570:	b158      	cbz	r0, 800f58a <rcutils_allocator_is_valid+0x1a>
 800f572:	6803      	ldr	r3, [r0, #0]
 800f574:	b143      	cbz	r3, 800f588 <rcutils_allocator_is_valid+0x18>
 800f576:	6843      	ldr	r3, [r0, #4]
 800f578:	b133      	cbz	r3, 800f588 <rcutils_allocator_is_valid+0x18>
 800f57a:	68c3      	ldr	r3, [r0, #12]
 800f57c:	b123      	cbz	r3, 800f588 <rcutils_allocator_is_valid+0x18>
 800f57e:	6880      	ldr	r0, [r0, #8]
 800f580:	3800      	subs	r0, #0
 800f582:	bf18      	it	ne
 800f584:	2001      	movne	r0, #1
 800f586:	4770      	bx	lr
 800f588:	4618      	mov	r0, r3
 800f58a:	4770      	bx	lr

0800f58c <rcutils_get_error_string>:
 800f58c:	4b06      	ldr	r3, [pc, #24]	@ (800f5a8 <rcutils_get_error_string+0x1c>)
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	b13b      	cbz	r3, 800f5a2 <rcutils_get_error_string+0x16>
 800f592:	4b06      	ldr	r3, [pc, #24]	@ (800f5ac <rcutils_get_error_string+0x20>)
 800f594:	781a      	ldrb	r2, [r3, #0]
 800f596:	b90a      	cbnz	r2, 800f59c <rcutils_get_error_string+0x10>
 800f598:	2201      	movs	r2, #1
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	4b04      	ldr	r3, [pc, #16]	@ (800f5b0 <rcutils_get_error_string+0x24>)
 800f59e:	7818      	ldrb	r0, [r3, #0]
 800f5a0:	4770      	bx	lr
 800f5a2:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <rcutils_get_error_string+0x28>)
 800f5a4:	7818      	ldrb	r0, [r3, #0]
 800f5a6:	4770      	bx	lr
 800f5a8:	2400e628 	.word	0x2400e628
 800f5ac:	2400e641 	.word	0x2400e641
 800f5b0:	2400e640 	.word	0x2400e640
 800f5b4:	0801cf5c 	.word	0x0801cf5c

0800f5b8 <rcutils_reset_error>:
 800f5b8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f5d8 <rcutils_reset_error+0x20>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4a08      	ldr	r2, [pc, #32]	@ (800f5e0 <rcutils_reset_error+0x28>)
 800f5c0:	4808      	ldr	r0, [pc, #32]	@ (800f5e4 <rcutils_reset_error+0x2c>)
 800f5c2:	8013      	strh	r3, [r2, #0]
 800f5c4:	4908      	ldr	r1, [pc, #32]	@ (800f5e8 <rcutils_reset_error+0x30>)
 800f5c6:	7003      	strb	r3, [r0, #0]
 800f5c8:	700b      	strb	r3, [r1, #0]
 800f5ca:	ed82 7b02 	vstr	d7, [r2, #8]
 800f5ce:	4a07      	ldr	r2, [pc, #28]	@ (800f5ec <rcutils_reset_error+0x34>)
 800f5d0:	7013      	strb	r3, [r2, #0]
 800f5d2:	4770      	bx	lr
 800f5d4:	f3af 8000 	nop.w
	...
 800f5e0:	2400e630 	.word	0x2400e630
 800f5e4:	2400e641 	.word	0x2400e641
 800f5e8:	2400e640 	.word	0x2400e640
 800f5ec:	2400e628 	.word	0x2400e628

0800f5f0 <rcutils_system_time_now>:
 800f5f0:	b300      	cbz	r0, 800f634 <rcutils_system_time_now+0x44>
 800f5f2:	b570      	push	{r4, r5, r6, lr}
 800f5f4:	b084      	sub	sp, #16
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	2001      	movs	r0, #1
 800f5fa:	4669      	mov	r1, sp
 800f5fc:	f7f2 fc10 	bl	8001e20 <clock_gettime>
 800f600:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f604:	2900      	cmp	r1, #0
 800f606:	db12      	blt.n	800f62e <rcutils_system_time_now+0x3e>
 800f608:	ea53 0201 	orrs.w	r2, r3, r1
 800f60c:	9d02      	ldr	r5, [sp, #8]
 800f60e:	d101      	bne.n	800f614 <rcutils_system_time_now+0x24>
 800f610:	2d00      	cmp	r5, #0
 800f612:	db0c      	blt.n	800f62e <rcutils_system_time_now+0x3e>
 800f614:	4e08      	ldr	r6, [pc, #32]	@ (800f638 <rcutils_system_time_now+0x48>)
 800f616:	2000      	movs	r0, #0
 800f618:	fba3 3206 	umull	r3, r2, r3, r6
 800f61c:	195b      	adds	r3, r3, r5
 800f61e:	fb06 2201 	mla	r2, r6, r1, r2
 800f622:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f626:	e9c4 3200 	strd	r3, r2, [r4]
 800f62a:	b004      	add	sp, #16
 800f62c:	bd70      	pop	{r4, r5, r6, pc}
 800f62e:	2002      	movs	r0, #2
 800f630:	b004      	add	sp, #16
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	200b      	movs	r0, #11
 800f636:	4770      	bx	lr
 800f638:	3b9aca00 	.word	0x3b9aca00

0800f63c <rcutils_steady_time_now>:
 800f63c:	b300      	cbz	r0, 800f680 <rcutils_steady_time_now+0x44>
 800f63e:	b570      	push	{r4, r5, r6, lr}
 800f640:	b084      	sub	sp, #16
 800f642:	4604      	mov	r4, r0
 800f644:	2000      	movs	r0, #0
 800f646:	4669      	mov	r1, sp
 800f648:	f7f2 fbea 	bl	8001e20 <clock_gettime>
 800f64c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f650:	2900      	cmp	r1, #0
 800f652:	db12      	blt.n	800f67a <rcutils_steady_time_now+0x3e>
 800f654:	ea53 0201 	orrs.w	r2, r3, r1
 800f658:	9d02      	ldr	r5, [sp, #8]
 800f65a:	d101      	bne.n	800f660 <rcutils_steady_time_now+0x24>
 800f65c:	2d00      	cmp	r5, #0
 800f65e:	db0c      	blt.n	800f67a <rcutils_steady_time_now+0x3e>
 800f660:	4e08      	ldr	r6, [pc, #32]	@ (800f684 <rcutils_steady_time_now+0x48>)
 800f662:	2000      	movs	r0, #0
 800f664:	fba3 3206 	umull	r3, r2, r3, r6
 800f668:	195b      	adds	r3, r3, r5
 800f66a:	fb06 2201 	mla	r2, r6, r1, r2
 800f66e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f672:	e9c4 3200 	strd	r3, r2, [r4]
 800f676:	b004      	add	sp, #16
 800f678:	bd70      	pop	{r4, r5, r6, pc}
 800f67a:	2002      	movs	r0, #2
 800f67c:	b004      	add	sp, #16
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
 800f680:	200b      	movs	r0, #11
 800f682:	4770      	bx	lr
 800f684:	3b9aca00 	.word	0x3b9aca00

0800f688 <rmw_get_zero_initialized_init_options>:
 800f688:	b510      	push	{r4, lr}
 800f68a:	4604      	mov	r4, r0
 800f68c:	2238      	movs	r2, #56	@ 0x38
 800f68e:	2100      	movs	r1, #0
 800f690:	f00c fc32 	bl	801bef8 <memset>
 800f694:	f104 0010 	add.w	r0, r4, #16
 800f698:	f000 f80a 	bl	800f6b0 <rmw_get_default_security_options>
 800f69c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	60e3      	str	r3, [r4, #12]
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	bf00      	nop

0800f6a8 <rmw_get_default_publisher_options>:
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	6002      	str	r2, [r0, #0]
 800f6ac:	7102      	strb	r2, [r0, #4]
 800f6ae:	4770      	bx	lr

0800f6b0 <rmw_get_default_security_options>:
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	7002      	strb	r2, [r0, #0]
 800f6b4:	6042      	str	r2, [r0, #4]
 800f6b6:	4770      	bx	lr

0800f6b8 <rmw_uros_set_custom_transport>:
 800f6b8:	b470      	push	{r4, r5, r6}
 800f6ba:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f6be:	b162      	cbz	r2, 800f6da <rmw_uros_set_custom_transport+0x22>
 800f6c0:	b15b      	cbz	r3, 800f6da <rmw_uros_set_custom_transport+0x22>
 800f6c2:	b155      	cbz	r5, 800f6da <rmw_uros_set_custom_transport+0x22>
 800f6c4:	b14e      	cbz	r6, 800f6da <rmw_uros_set_custom_transport+0x22>
 800f6c6:	4c06      	ldr	r4, [pc, #24]	@ (800f6e0 <rmw_uros_set_custom_transport+0x28>)
 800f6c8:	7020      	strb	r0, [r4, #0]
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	6166      	str	r6, [r4, #20]
 800f6ce:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f6d2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f6d6:	bc70      	pop	{r4, r5, r6}
 800f6d8:	4770      	bx	lr
 800f6da:	200b      	movs	r0, #11
 800f6dc:	bc70      	pop	{r4, r5, r6}
 800f6de:	4770      	bx	lr
 800f6e0:	2400e644 	.word	0x2400e644

0800f6e4 <rmw_init_options_init>:
 800f6e4:	b084      	sub	sp, #16
 800f6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	ad09      	add	r5, sp, #36	@ 0x24
 800f6ec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f6f0:	b130      	cbz	r0, 800f700 <rmw_init_options_init+0x1c>
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f7ff ff3b 	bl	800f570 <rcutils_allocator_is_valid>
 800f6fa:	b108      	cbz	r0, 800f700 <rmw_init_options_init+0x1c>
 800f6fc:	68a6      	ldr	r6, [r4, #8]
 800f6fe:	b12e      	cbz	r6, 800f70c <rmw_init_options_init+0x28>
 800f700:	200b      	movs	r0, #11
 800f702:	b003      	add	sp, #12
 800f704:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f708:	b004      	add	sp, #16
 800f70a:	4770      	bx	lr
 800f70c:	2200      	movs	r2, #0
 800f70e:	2300      	movs	r3, #0
 800f710:	f104 0c20 	add.w	ip, r4, #32
 800f714:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f7b0 <rmw_init_options_init+0xcc>
 800f718:	466f      	mov	r7, sp
 800f71a:	e9c4 2300 	strd	r2, r3, [r4]
 800f71e:	4b20      	ldr	r3, [pc, #128]	@ (800f7a0 <rmw_init_options_init+0xbc>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	60a3      	str	r3, [r4, #8]
 800f724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f726:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f72a:	682b      	ldr	r3, [r5, #0]
 800f72c:	4638      	mov	r0, r7
 800f72e:	f8cc 3000 	str.w	r3, [ip]
 800f732:	f8c4 e01c 	str.w	lr, [r4, #28]
 800f736:	60e6      	str	r6, [r4, #12]
 800f738:	f7ff ffba 	bl	800f6b0 <rmw_get_default_security_options>
 800f73c:	f104 0310 	add.w	r3, r4, #16
 800f740:	2203      	movs	r2, #3
 800f742:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f746:	e883 0003 	stmia.w	r3, {r0, r1}
 800f74a:	4816      	ldr	r0, [pc, #88]	@ (800f7a4 <rmw_init_options_init+0xc0>)
 800f74c:	4916      	ldr	r1, [pc, #88]	@ (800f7a8 <rmw_init_options_init+0xc4>)
 800f74e:	7626      	strb	r6, [r4, #24]
 800f750:	f000 fed2 	bl	80104f8 <rmw_uxrce_init_init_options_impl_memory>
 800f754:	4813      	ldr	r0, [pc, #76]	@ (800f7a4 <rmw_init_options_init+0xc0>)
 800f756:	f009 fdb1 	bl	80192bc <get_memory>
 800f75a:	b1f0      	cbz	r0, 800f79a <rmw_init_options_init+0xb6>
 800f75c:	4a13      	ldr	r2, [pc, #76]	@ (800f7ac <rmw_init_options_init+0xc8>)
 800f75e:	6883      	ldr	r3, [r0, #8]
 800f760:	6851      	ldr	r1, [r2, #4]
 800f762:	6363      	str	r3, [r4, #52]	@ 0x34
 800f764:	7810      	ldrb	r0, [r2, #0]
 800f766:	6159      	str	r1, [r3, #20]
 800f768:	68d1      	ldr	r1, [r2, #12]
 800f76a:	7418      	strb	r0, [r3, #16]
 800f76c:	61d9      	str	r1, [r3, #28]
 800f76e:	6911      	ldr	r1, [r2, #16]
 800f770:	6219      	str	r1, [r3, #32]
 800f772:	6951      	ldr	r1, [r2, #20]
 800f774:	6892      	ldr	r2, [r2, #8]
 800f776:	6259      	str	r1, [r3, #36]	@ 0x24
 800f778:	619a      	str	r2, [r3, #24]
 800f77a:	f004 ffd5 	bl	8014728 <uxr_nanos>
 800f77e:	f00c f805 	bl	801b78c <srand>
 800f782:	f00c f831 	bl	801b7e8 <rand>
 800f786:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f788:	6298      	str	r0, [r3, #40]	@ 0x28
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d0f9      	beq.n	800f782 <rmw_init_options_init+0x9e>
 800f78e:	2000      	movs	r0, #0
 800f790:	b003      	add	sp, #12
 800f792:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f796:	b004      	add	sp, #16
 800f798:	4770      	bx	lr
 800f79a:	2001      	movs	r0, #1
 800f79c:	e7b1      	b.n	800f702 <rmw_init_options_init+0x1e>
 800f79e:	bf00      	nop
 800f7a0:	0801d8c4 	.word	0x0801d8c4
 800f7a4:	24012f5c 	.word	0x24012f5c
 800f7a8:	2400e7f8 	.word	0x2400e7f8
 800f7ac:	2400e644 	.word	0x2400e644
 800f7b0:	0801cf60 	.word	0x0801cf60

0800f7b4 <rmw_init_options_copy>:
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d047      	beq.n	800f848 <rmw_init_options_copy+0x94>
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	460d      	mov	r5, r1
 800f7bc:	b149      	cbz	r1, 800f7d2 <rmw_init_options_copy+0x1e>
 800f7be:	4604      	mov	r4, r0
 800f7c0:	6880      	ldr	r0, [r0, #8]
 800f7c2:	b120      	cbz	r0, 800f7ce <rmw_init_options_copy+0x1a>
 800f7c4:	4b22      	ldr	r3, [pc, #136]	@ (800f850 <rmw_init_options_copy+0x9c>)
 800f7c6:	6819      	ldr	r1, [r3, #0]
 800f7c8:	f7f0 fd8a 	bl	80002e0 <strcmp>
 800f7cc:	bba8      	cbnz	r0, 800f83a <rmw_init_options_copy+0x86>
 800f7ce:	68ab      	ldr	r3, [r5, #8]
 800f7d0:	b11b      	cbz	r3, 800f7da <rmw_init_options_copy+0x26>
 800f7d2:	f04f 0c0b 	mov.w	ip, #11
 800f7d6:	4660      	mov	r0, ip
 800f7d8:	bd70      	pop	{r4, r5, r6, pc}
 800f7da:	4623      	mov	r3, r4
 800f7dc:	462a      	mov	r2, r5
 800f7de:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800f7e2:	f8d3 e000 	ldr.w	lr, [r3]
 800f7e6:	3310      	adds	r3, #16
 800f7e8:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800f7ec:	3210      	adds	r2, #16
 800f7ee:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800f7f2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f7f6:	42b3      	cmp	r3, r6
 800f7f8:	f842 ec10 	str.w	lr, [r2, #-16]
 800f7fc:	f842 cc0c 	str.w	ip, [r2, #-12]
 800f800:	f842 0c08 	str.w	r0, [r2, #-8]
 800f804:	f842 1c04 	str.w	r1, [r2, #-4]
 800f808:	d1eb      	bne.n	800f7e2 <rmw_init_options_copy+0x2e>
 800f80a:	6819      	ldr	r1, [r3, #0]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	4811      	ldr	r0, [pc, #68]	@ (800f854 <rmw_init_options_copy+0xa0>)
 800f810:	6011      	str	r1, [r2, #0]
 800f812:	6053      	str	r3, [r2, #4]
 800f814:	f009 fd52 	bl	80192bc <get_memory>
 800f818:	b198      	cbz	r0, 800f842 <rmw_init_options_copy+0x8e>
 800f81a:	6883      	ldr	r3, [r0, #8]
 800f81c:	f04f 0c00 	mov.w	ip, #0
 800f820:	636b      	str	r3, [r5, #52]	@ 0x34
 800f822:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800f824:	f103 0410 	add.w	r4, r3, #16
 800f828:	3510      	adds	r5, #16
 800f82a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f82c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f82e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f836:	4660      	mov	r0, ip
 800f838:	bd70      	pop	{r4, r5, r6, pc}
 800f83a:	f04f 0c0c 	mov.w	ip, #12
 800f83e:	4660      	mov	r0, ip
 800f840:	bd70      	pop	{r4, r5, r6, pc}
 800f842:	f04f 0c01 	mov.w	ip, #1
 800f846:	e7c6      	b.n	800f7d6 <rmw_init_options_copy+0x22>
 800f848:	f04f 0c0b 	mov.w	ip, #11
 800f84c:	4660      	mov	r0, ip
 800f84e:	4770      	bx	lr
 800f850:	0801d8c4 	.word	0x0801d8c4
 800f854:	24012f5c 	.word	0x24012f5c

0800f858 <rmw_init_options_fini>:
 800f858:	b510      	push	{r4, lr}
 800f85a:	b08e      	sub	sp, #56	@ 0x38
 800f85c:	b388      	cbz	r0, 800f8c2 <rmw_init_options_fini+0x6a>
 800f85e:	4604      	mov	r4, r0
 800f860:	3020      	adds	r0, #32
 800f862:	f7ff fe85 	bl	800f570 <rcutils_allocator_is_valid>
 800f866:	b360      	cbz	r0, 800f8c2 <rmw_init_options_fini+0x6a>
 800f868:	68a0      	ldr	r0, [r4, #8]
 800f86a:	b120      	cbz	r0, 800f876 <rmw_init_options_fini+0x1e>
 800f86c:	4b1a      	ldr	r3, [pc, #104]	@ (800f8d8 <rmw_init_options_fini+0x80>)
 800f86e:	6819      	ldr	r1, [r3, #0]
 800f870:	f7f0 fd36 	bl	80002e0 <strcmp>
 800f874:	bb68      	cbnz	r0, 800f8d2 <rmw_init_options_fini+0x7a>
 800f876:	4b19      	ldr	r3, [pc, #100]	@ (800f8dc <rmw_init_options_fini+0x84>)
 800f878:	6819      	ldr	r1, [r3, #0]
 800f87a:	b331      	cbz	r1, 800f8ca <rmw_init_options_fini+0x72>
 800f87c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f87e:	e001      	b.n	800f884 <rmw_init_options_fini+0x2c>
 800f880:	6849      	ldr	r1, [r1, #4]
 800f882:	b311      	cbz	r1, 800f8ca <rmw_init_options_fini+0x72>
 800f884:	688b      	ldr	r3, [r1, #8]
 800f886:	429a      	cmp	r2, r3
 800f888:	d1fa      	bne.n	800f880 <rmw_init_options_fini+0x28>
 800f88a:	4814      	ldr	r0, [pc, #80]	@ (800f8dc <rmw_init_options_fini+0x84>)
 800f88c:	f009 fd26 	bl	80192dc <put_memory>
 800f890:	4668      	mov	r0, sp
 800f892:	f7ff fef9 	bl	800f688 <rmw_get_zero_initialized_init_options>
 800f896:	46ee      	mov	lr, sp
 800f898:	46a4      	mov	ip, r4
 800f89a:	2400      	movs	r4, #0
 800f89c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f8b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f8bc:	4620      	mov	r0, r4
 800f8be:	b00e      	add	sp, #56	@ 0x38
 800f8c0:	bd10      	pop	{r4, pc}
 800f8c2:	240b      	movs	r4, #11
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	b00e      	add	sp, #56	@ 0x38
 800f8c8:	bd10      	pop	{r4, pc}
 800f8ca:	2401      	movs	r4, #1
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	b00e      	add	sp, #56	@ 0x38
 800f8d0:	bd10      	pop	{r4, pc}
 800f8d2:	240c      	movs	r4, #12
 800f8d4:	e7f2      	b.n	800f8bc <rmw_init_options_fini+0x64>
 800f8d6:	bf00      	nop
 800f8d8:	0801d8c4 	.word	0x0801d8c4
 800f8dc:	24012f5c 	.word	0x24012f5c

0800f8e0 <rmw_init>:
 800f8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8e4:	b083      	sub	sp, #12
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	f000 80d3 	beq.w	800fa92 <rmw_init+0x1b2>
 800f8ec:	460e      	mov	r6, r1
 800f8ee:	2900      	cmp	r1, #0
 800f8f0:	f000 80cf 	beq.w	800fa92 <rmw_init+0x1b2>
 800f8f4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f000 80ca 	beq.w	800fa92 <rmw_init+0x1b2>
 800f8fe:	4b78      	ldr	r3, [pc, #480]	@ (800fae0 <rmw_init+0x200>)
 800f900:	6880      	ldr	r0, [r0, #8]
 800f902:	681f      	ldr	r7, [r3, #0]
 800f904:	b128      	cbz	r0, 800f912 <rmw_init+0x32>
 800f906:	4639      	mov	r1, r7
 800f908:	f7f0 fcea 	bl	80002e0 <strcmp>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	f040 80ca 	bne.w	800faa6 <rmw_init+0x1c6>
 800f912:	4c74      	ldr	r4, [pc, #464]	@ (800fae4 <rmw_init+0x204>)
 800f914:	f04f 0800 	mov.w	r8, #0
 800f918:	4973      	ldr	r1, [pc, #460]	@ (800fae8 <rmw_init+0x208>)
 800f91a:	4874      	ldr	r0, [pc, #464]	@ (800faec <rmw_init+0x20c>)
 800f91c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f920:	60b7      	str	r7, [r6, #8]
 800f922:	e9c6 2300 	strd	r2, r3, [r6]
 800f926:	68eb      	ldr	r3, [r5, #12]
 800f928:	2201      	movs	r2, #1
 800f92a:	64b3      	str	r3, [r6, #72]	@ 0x48
 800f92c:	f000 fd84 	bl	8010438 <rmw_uxrce_init_session_memory>
 800f930:	4620      	mov	r0, r4
 800f932:	2204      	movs	r2, #4
 800f934:	496e      	ldr	r1, [pc, #440]	@ (800faf0 <rmw_init+0x210>)
 800f936:	f000 fdbf 	bl	80104b8 <rmw_uxrce_init_static_input_buffer_memory>
 800f93a:	486c      	ldr	r0, [pc, #432]	@ (800faec <rmw_init+0x20c>)
 800f93c:	f884 800d 	strb.w	r8, [r4, #13]
 800f940:	f009 fcbc 	bl	80192bc <get_memory>
 800f944:	2800      	cmp	r0, #0
 800f946:	f000 80a9 	beq.w	800fa9c <rmw_init+0x1bc>
 800f94a:	6884      	ldr	r4, [r0, #8]
 800f94c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800f94e:	f104 0910 	add.w	r9, r4, #16
 800f952:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f954:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f958:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f95c:	9101      	str	r1, [sp, #4]
 800f95e:	4661      	mov	r1, ip
 800f960:	6a00      	ldr	r0, [r0, #32]
 800f962:	9000      	str	r0, [sp, #0]
 800f964:	4648      	mov	r0, r9
 800f966:	f002 fe6d 	bl	8012644 <uxr_set_custom_transport_callbacks>
 800f96a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f96e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f972:	4960      	ldr	r1, [pc, #384]	@ (800faf4 <rmw_init+0x214>)
 800f974:	4860      	ldr	r0, [pc, #384]	@ (800faf8 <rmw_init+0x218>)
 800f976:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f97a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f97e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f982:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f986:	2201      	movs	r2, #1
 800f988:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f98c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f990:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f994:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f998:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800f99a:	f000 fd2d 	bl	80103f8 <rmw_uxrce_init_node_memory>
 800f99e:	2205      	movs	r2, #5
 800f9a0:	4956      	ldr	r1, [pc, #344]	@ (800fafc <rmw_init+0x21c>)
 800f9a2:	4857      	ldr	r0, [pc, #348]	@ (800fb00 <rmw_init+0x220>)
 800f9a4:	f000 fd08 	bl	80103b8 <rmw_uxrce_init_subscription_memory>
 800f9a8:	220a      	movs	r2, #10
 800f9aa:	4956      	ldr	r1, [pc, #344]	@ (800fb04 <rmw_init+0x224>)
 800f9ac:	4856      	ldr	r0, [pc, #344]	@ (800fb08 <rmw_init+0x228>)
 800f9ae:	f000 fce3 	bl	8010378 <rmw_uxrce_init_publisher_memory>
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	4955      	ldr	r1, [pc, #340]	@ (800fb0c <rmw_init+0x22c>)
 800f9b6:	4856      	ldr	r0, [pc, #344]	@ (800fb10 <rmw_init+0x230>)
 800f9b8:	f000 fc9e 	bl	80102f8 <rmw_uxrce_init_service_memory>
 800f9bc:	2201      	movs	r2, #1
 800f9be:	4955      	ldr	r1, [pc, #340]	@ (800fb14 <rmw_init+0x234>)
 800f9c0:	4855      	ldr	r0, [pc, #340]	@ (800fb18 <rmw_init+0x238>)
 800f9c2:	f000 fcb9 	bl	8010338 <rmw_uxrce_init_client_memory>
 800f9c6:	220f      	movs	r2, #15
 800f9c8:	4954      	ldr	r1, [pc, #336]	@ (800fb1c <rmw_init+0x23c>)
 800f9ca:	4855      	ldr	r0, [pc, #340]	@ (800fb20 <rmw_init+0x240>)
 800f9cc:	f000 fd54 	bl	8010478 <rmw_uxrce_init_topic_memory>
 800f9d0:	2203      	movs	r2, #3
 800f9d2:	4954      	ldr	r1, [pc, #336]	@ (800fb24 <rmw_init+0x244>)
 800f9d4:	4854      	ldr	r0, [pc, #336]	@ (800fb28 <rmw_init+0x248>)
 800f9d6:	f000 fd8f 	bl	80104f8 <rmw_uxrce_init_init_options_impl_memory>
 800f9da:	2204      	movs	r2, #4
 800f9dc:	4953      	ldr	r1, [pc, #332]	@ (800fb2c <rmw_init+0x24c>)
 800f9de:	4854      	ldr	r0, [pc, #336]	@ (800fb30 <rmw_init+0x250>)
 800f9e0:	f000 fdaa 	bl	8010538 <rmw_uxrce_init_wait_set_memory>
 800f9e4:	4953      	ldr	r1, [pc, #332]	@ (800fb34 <rmw_init+0x254>)
 800f9e6:	4854      	ldr	r0, [pc, #336]	@ (800fb38 <rmw_init+0x258>)
 800f9e8:	2204      	movs	r2, #4
 800f9ea:	f000 fdc5 	bl	8010578 <rmw_uxrce_init_guard_condition_memory>
 800f9ee:	4642      	mov	r2, r8
 800f9f0:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f9f2:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800f9f4:	f000 fc48 	bl	8010288 <rmw_uxrce_transport_init>
 800f9f8:	4607      	mov	r7, r0
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d158      	bne.n	800fab0 <rmw_init+0x1d0>
 800f9fe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800fa00:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800fa04:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800fa08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	f003 f810 	bl	8012a30 <uxr_init_session>
 800fa10:	4622      	mov	r2, r4
 800fa12:	494a      	ldr	r1, [pc, #296]	@ (800fb3c <rmw_init+0x25c>)
 800fa14:	4628      	mov	r0, r5
 800fa16:	f003 f82f 	bl	8012a78 <uxr_set_topic_callback>
 800fa1a:	463a      	mov	r2, r7
 800fa1c:	4948      	ldr	r1, [pc, #288]	@ (800fb40 <rmw_init+0x260>)
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f003 f826 	bl	8012a70 <uxr_set_status_callback>
 800fa24:	463a      	mov	r2, r7
 800fa26:	4947      	ldr	r1, [pc, #284]	@ (800fb44 <rmw_init+0x264>)
 800fa28:	4628      	mov	r0, r5
 800fa2a:	f003 f829 	bl	8012a80 <uxr_set_request_callback>
 800fa2e:	463a      	mov	r2, r7
 800fa30:	4945      	ldr	r1, [pc, #276]	@ (800fb48 <rmw_init+0x268>)
 800fa32:	4628      	mov	r0, r5
 800fa34:	f003 f828 	bl	8012a88 <uxr_set_reply_callback>
 800fa38:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fa3c:	2304      	movs	r3, #4
 800fa3e:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800fa42:	0092      	lsls	r2, r2, #2
 800fa44:	4628      	mov	r0, r5
 800fa46:	f003 f85f 	bl	8012b08 <uxr_create_input_reliable_stream>
 800fa4a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fa4e:	2304      	movs	r3, #4
 800fa50:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800fa54:	0092      	lsls	r2, r2, #2
 800fa56:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	f003 f82a 	bl	8012ab4 <uxr_create_output_reliable_stream>
 800fa60:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800fa64:	4628      	mov	r0, r5
 800fa66:	f003 f849 	bl	8012afc <uxr_create_input_best_effort_stream>
 800fa6a:	f241 3194 	movw	r1, #5012	@ 0x1394
 800fa6e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800fa72:	4628      	mov	r0, r5
 800fa74:	4421      	add	r1, r4
 800fa76:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fa7a:	f003 f809 	bl	8012a90 <uxr_create_output_best_effort_stream>
 800fa7e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800fa82:	4628      	mov	r0, r5
 800fa84:	f003 fde8 	bl	8013658 <uxr_create_session>
 800fa88:	b1f8      	cbz	r0, 800faca <rmw_init+0x1ea>
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	b003      	add	sp, #12
 800fa8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa92:	270b      	movs	r7, #11
 800fa94:	4638      	mov	r0, r7
 800fa96:	b003      	add	sp, #12
 800fa98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa9c:	2701      	movs	r7, #1
 800fa9e:	4638      	mov	r0, r7
 800faa0:	b003      	add	sp, #12
 800faa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faa6:	270c      	movs	r7, #12
 800faa8:	4638      	mov	r0, r7
 800faaa:	b003      	add	sp, #12
 800faac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab0:	4648      	mov	r0, r9
 800fab2:	f002 fe05 	bl	80126c0 <uxr_close_custom_transport>
 800fab6:	4621      	mov	r1, r4
 800fab8:	480c      	ldr	r0, [pc, #48]	@ (800faec <rmw_init+0x20c>)
 800faba:	f009 fc0f 	bl	80192dc <put_memory>
 800fabe:	4638      	mov	r0, r7
 800fac0:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800fac4:	b003      	add	sp, #12
 800fac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faca:	4648      	mov	r0, r9
 800facc:	f002 fdf8 	bl	80126c0 <uxr_close_custom_transport>
 800fad0:	4621      	mov	r1, r4
 800fad2:	4806      	ldr	r0, [pc, #24]	@ (800faec <rmw_init+0x20c>)
 800fad4:	f009 fc02 	bl	80192dc <put_memory>
 800fad8:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800fada:	2701      	movs	r7, #1
 800fadc:	e7d5      	b.n	800fa8a <rmw_init+0x1aa>
 800fade:	bf00      	nop
 800fae0:	0801d8c4 	.word	0x0801d8c4
 800fae4:	24012fac 	.word	0x24012fac
 800fae8:	2400f258 	.word	0x2400f258
 800faec:	24012f9c 	.word	0x24012f9c
 800faf0:	24010800 	.word	0x24010800
 800faf4:	2400e87c 	.word	0x2400e87c
 800faf8:	24012f6c 	.word	0x24012f6c
 800fafc:	24012900 	.word	0x24012900
 800fb00:	24012fbc 	.word	0x24012fbc
 800fb04:	2400e920 	.word	0x2400e920
 800fb08:	24012f7c 	.word	0x24012f7c
 800fb0c:	2400f190 	.word	0x2400f190
 800fb10:	24012f8c 	.word	0x24012f8c
 800fb14:	2400e6b0 	.word	0x2400e6b0
 800fb18:	2400e69c 	.word	0x2400e69c
 800fb1c:	24012d38 	.word	0x24012d38
 800fb20:	24012fcc 	.word	0x24012fcc
 800fb24:	2400e7f8 	.word	0x2400e7f8
 800fb28:	24012f5c 	.word	0x24012f5c
 800fb2c:	24012edc 	.word	0x24012edc
 800fb30:	24012fdc 	.word	0x24012fdc
 800fb34:	2400e778 	.word	0x2400e778
 800fb38:	24012f4c 	.word	0x24012f4c
 800fb3c:	080190f5 	.word	0x080190f5
 800fb40:	080190ed 	.word	0x080190ed
 800fb44:	0801918d 	.word	0x0801918d
 800fb48:	08019229 	.word	0x08019229

0800fb4c <rmw_context_fini>:
 800fb4c:	4b17      	ldr	r3, [pc, #92]	@ (800fbac <rmw_context_fini+0x60>)
 800fb4e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800fb50:	b570      	push	{r4, r5, r6, lr}
 800fb52:	681c      	ldr	r4, [r3, #0]
 800fb54:	4605      	mov	r5, r0
 800fb56:	b334      	cbz	r4, 800fba6 <rmw_context_fini+0x5a>
 800fb58:	2600      	movs	r6, #0
 800fb5a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800fb5e:	6902      	ldr	r2, [r0, #16]
 800fb60:	428a      	cmp	r2, r1
 800fb62:	d018      	beq.n	800fb96 <rmw_context_fini+0x4a>
 800fb64:	2c00      	cmp	r4, #0
 800fb66:	d1f8      	bne.n	800fb5a <rmw_context_fini+0xe>
 800fb68:	b189      	cbz	r1, 800fb8e <rmw_context_fini+0x42>
 800fb6a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800fb6e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800fb72:	789b      	ldrb	r3, [r3, #2]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	bf14      	ite	ne
 800fb78:	210a      	movne	r1, #10
 800fb7a:	2100      	moveq	r1, #0
 800fb7c:	f003 fd44 	bl	8013608 <uxr_delete_session_retries>
 800fb80:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800fb82:	f000 fd19 	bl	80105b8 <rmw_uxrce_fini_session_memory>
 800fb86:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800fb88:	3010      	adds	r0, #16
 800fb8a:	f002 fd99 	bl	80126c0 <uxr_close_custom_transport>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	4630      	mov	r0, r6
 800fb92:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800fb94:	bd70      	pop	{r4, r5, r6, pc}
 800fb96:	3018      	adds	r0, #24
 800fb98:	f000 f89c 	bl	800fcd4 <rmw_destroy_node>
 800fb9c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800fb9e:	4606      	mov	r6, r0
 800fba0:	2c00      	cmp	r4, #0
 800fba2:	d1da      	bne.n	800fb5a <rmw_context_fini+0xe>
 800fba4:	e7e0      	b.n	800fb68 <rmw_context_fini+0x1c>
 800fba6:	4626      	mov	r6, r4
 800fba8:	e7de      	b.n	800fb68 <rmw_context_fini+0x1c>
 800fbaa:	bf00      	nop
 800fbac:	24012f6c 	.word	0x24012f6c

0800fbb0 <create_node>:
 800fbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbb4:	b083      	sub	sp, #12
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d064      	beq.n	800fc84 <create_node+0xd4>
 800fbba:	4606      	mov	r6, r0
 800fbbc:	4838      	ldr	r0, [pc, #224]	@ (800fca0 <create_node+0xf0>)
 800fbbe:	460f      	mov	r7, r1
 800fbc0:	4690      	mov	r8, r2
 800fbc2:	461d      	mov	r5, r3
 800fbc4:	f009 fb7a 	bl	80192bc <get_memory>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d05b      	beq.n	800fc84 <create_node+0xd4>
 800fbcc:	6884      	ldr	r4, [r0, #8]
 800fbce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800fbd0:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800fbd4:	f104 0518 	add.w	r5, r4, #24
 800fbd8:	6123      	str	r3, [r4, #16]
 800fbda:	f009 fbd7 	bl	801938c <rmw_get_implementation_identifier>
 800fbde:	f8c4 9020 	str.w	r9, [r4, #32]
 800fbe2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f7f0 fb84 	bl	80002f4 <strlen>
 800fbec:	1c42      	adds	r2, r0, #1
 800fbee:	2a3c      	cmp	r2, #60	@ 0x3c
 800fbf0:	d840      	bhi.n	800fc74 <create_node+0xc4>
 800fbf2:	4648      	mov	r0, r9
 800fbf4:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800fbf8:	4631      	mov	r1, r6
 800fbfa:	f00c fa46 	bl	801c08a <memcpy>
 800fbfe:	4638      	mov	r0, r7
 800fc00:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800fc04:	f7f0 fb76 	bl	80002f4 <strlen>
 800fc08:	1c42      	adds	r2, r0, #1
 800fc0a:	2a3c      	cmp	r2, #60	@ 0x3c
 800fc0c:	d832      	bhi.n	800fc74 <create_node+0xc4>
 800fc0e:	4639      	mov	r1, r7
 800fc10:	4648      	mov	r0, r9
 800fc12:	f00c fa3a 	bl	801c08a <memcpy>
 800fc16:	6923      	ldr	r3, [r4, #16]
 800fc18:	2101      	movs	r1, #1
 800fc1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fc1e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800fc22:	1842      	adds	r2, r0, r1
 800fc24:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800fc28:	f002 fd4e 	bl	80126c8 <uxr_object_id>
 800fc2c:	6160      	str	r0, [r4, #20]
 800fc2e:	783b      	ldrb	r3, [r7, #0]
 800fc30:	2b2f      	cmp	r3, #47	@ 0x2f
 800fc32:	d12c      	bne.n	800fc8e <create_node+0xde>
 800fc34:	787b      	ldrb	r3, [r7, #1]
 800fc36:	bb53      	cbnz	r3, 800fc8e <create_node+0xde>
 800fc38:	4633      	mov	r3, r6
 800fc3a:	4a1a      	ldr	r2, [pc, #104]	@ (800fca4 <create_node+0xf4>)
 800fc3c:	213c      	movs	r1, #60	@ 0x3c
 800fc3e:	481a      	ldr	r0, [pc, #104]	@ (800fca8 <create_node+0xf8>)
 800fc40:	f00b ffec 	bl	801bc1c <sniprintf>
 800fc44:	6920      	ldr	r0, [r4, #16]
 800fc46:	2106      	movs	r1, #6
 800fc48:	fa1f f388 	uxth.w	r3, r8
 800fc4c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800fc50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fc54:	9101      	str	r1, [sp, #4]
 800fc56:	4914      	ldr	r1, [pc, #80]	@ (800fca8 <create_node+0xf8>)
 800fc58:	9100      	str	r1, [sp, #0]
 800fc5a:	6811      	ldr	r1, [r2, #0]
 800fc5c:	6962      	ldr	r2, [r4, #20]
 800fc5e:	f002 fb67 	bl	8012330 <uxr_buffer_create_participant_bin>
 800fc62:	4602      	mov	r2, r0
 800fc64:	6920      	ldr	r0, [r4, #16]
 800fc66:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fc6a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fc6e:	f000 fe25 	bl	80108bc <run_xrce_session>
 800fc72:	b918      	cbnz	r0, 800fc7c <create_node+0xcc>
 800fc74:	4628      	mov	r0, r5
 800fc76:	2500      	movs	r5, #0
 800fc78:	f000 fca4 	bl	80105c4 <rmw_uxrce_fini_node_memory>
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	b003      	add	sp, #12
 800fc80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc84:	2500      	movs	r5, #0
 800fc86:	4628      	mov	r0, r5
 800fc88:	b003      	add	sp, #12
 800fc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc8e:	463b      	mov	r3, r7
 800fc90:	4a06      	ldr	r2, [pc, #24]	@ (800fcac <create_node+0xfc>)
 800fc92:	213c      	movs	r1, #60	@ 0x3c
 800fc94:	9600      	str	r6, [sp, #0]
 800fc96:	4804      	ldr	r0, [pc, #16]	@ (800fca8 <create_node+0xf8>)
 800fc98:	f00b ffc0 	bl	801bc1c <sniprintf>
 800fc9c:	e7d2      	b.n	800fc44 <create_node+0x94>
 800fc9e:	bf00      	nop
 800fca0:	24012f6c 	.word	0x24012f6c
 800fca4:	0801cfa0 	.word	0x0801cfa0
 800fca8:	2400e660 	.word	0x2400e660
 800fcac:	0801cf64 	.word	0x0801cf64

0800fcb0 <rmw_create_node>:
 800fcb0:	468c      	mov	ip, r1
 800fcb2:	4611      	mov	r1, r2
 800fcb4:	f1bc 0f00 	cmp.w	ip, #0
 800fcb8:	d00a      	beq.n	800fcd0 <rmw_create_node+0x20>
 800fcba:	f89c 3000 	ldrb.w	r3, [ip]
 800fcbe:	b13b      	cbz	r3, 800fcd0 <rmw_create_node+0x20>
 800fcc0:	b132      	cbz	r2, 800fcd0 <rmw_create_node+0x20>
 800fcc2:	7813      	ldrb	r3, [r2, #0]
 800fcc4:	b123      	cbz	r3, 800fcd0 <rmw_create_node+0x20>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800fcca:	4660      	mov	r0, ip
 800fccc:	f7ff bf70 	b.w	800fbb0 <create_node>
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	4770      	bx	lr

0800fcd4 <rmw_destroy_node>:
 800fcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd6:	b328      	cbz	r0, 800fd24 <rmw_destroy_node+0x50>
 800fcd8:	4607      	mov	r7, r0
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	b120      	cbz	r0, 800fce8 <rmw_destroy_node+0x14>
 800fcde:	4b37      	ldr	r3, [pc, #220]	@ (800fdbc <rmw_destroy_node+0xe8>)
 800fce0:	6819      	ldr	r1, [r3, #0]
 800fce2:	f7f0 fafd 	bl	80002e0 <strcmp>
 800fce6:	b9e8      	cbnz	r0, 800fd24 <rmw_destroy_node+0x50>
 800fce8:	687d      	ldr	r5, [r7, #4]
 800fcea:	b1dd      	cbz	r5, 800fd24 <rmw_destroy_node+0x50>
 800fcec:	4b34      	ldr	r3, [pc, #208]	@ (800fdc0 <rmw_destroy_node+0xec>)
 800fcee:	681c      	ldr	r4, [r3, #0]
 800fcf0:	2c00      	cmp	r4, #0
 800fcf2:	d060      	beq.n	800fdb6 <rmw_destroy_node+0xe2>
 800fcf4:	2600      	movs	r6, #0
 800fcf6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fcfa:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800fcfe:	429d      	cmp	r5, r3
 800fd00:	d013      	beq.n	800fd2a <rmw_destroy_node+0x56>
 800fd02:	2c00      	cmp	r4, #0
 800fd04:	d1f7      	bne.n	800fcf6 <rmw_destroy_node+0x22>
 800fd06:	4b2f      	ldr	r3, [pc, #188]	@ (800fdc4 <rmw_destroy_node+0xf0>)
 800fd08:	681c      	ldr	r4, [r3, #0]
 800fd0a:	b1c4      	cbz	r4, 800fd3e <rmw_destroy_node+0x6a>
 800fd0c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fd10:	6a0b      	ldr	r3, [r1, #32]
 800fd12:	429d      	cmp	r5, r3
 800fd14:	d1f9      	bne.n	800fd0a <rmw_destroy_node+0x36>
 800fd16:	317c      	adds	r1, #124	@ 0x7c
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f000 fa53 	bl	80101c4 <rmw_destroy_subscription>
 800fd1e:	2801      	cmp	r0, #1
 800fd20:	4606      	mov	r6, r0
 800fd22:	d1f2      	bne.n	800fd0a <rmw_destroy_node+0x36>
 800fd24:	2601      	movs	r6, #1
 800fd26:	4630      	mov	r0, r6
 800fd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd2a:	3184      	adds	r1, #132	@ 0x84
 800fd2c:	4638      	mov	r0, r7
 800fd2e:	f000 f9b1 	bl	8010094 <rmw_destroy_publisher>
 800fd32:	2801      	cmp	r0, #1
 800fd34:	4606      	mov	r6, r0
 800fd36:	d0f5      	beq.n	800fd24 <rmw_destroy_node+0x50>
 800fd38:	2c00      	cmp	r4, #0
 800fd3a:	d1dc      	bne.n	800fcf6 <rmw_destroy_node+0x22>
 800fd3c:	e7e3      	b.n	800fd06 <rmw_destroy_node+0x32>
 800fd3e:	4b22      	ldr	r3, [pc, #136]	@ (800fdc8 <rmw_destroy_node+0xf4>)
 800fd40:	681c      	ldr	r4, [r3, #0]
 800fd42:	b16c      	cbz	r4, 800fd60 <rmw_destroy_node+0x8c>
 800fd44:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fd48:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fd4a:	429d      	cmp	r5, r3
 800fd4c:	d1f9      	bne.n	800fd42 <rmw_destroy_node+0x6e>
 800fd4e:	317c      	adds	r1, #124	@ 0x7c
 800fd50:	4638      	mov	r0, r7
 800fd52:	f000 f9f3 	bl	801013c <rmw_destroy_service>
 800fd56:	2801      	cmp	r0, #1
 800fd58:	4606      	mov	r6, r0
 800fd5a:	d0e3      	beq.n	800fd24 <rmw_destroy_node+0x50>
 800fd5c:	2c00      	cmp	r4, #0
 800fd5e:	d1f1      	bne.n	800fd44 <rmw_destroy_node+0x70>
 800fd60:	4b1a      	ldr	r3, [pc, #104]	@ (800fdcc <rmw_destroy_node+0xf8>)
 800fd62:	681c      	ldr	r4, [r3, #0]
 800fd64:	b16c      	cbz	r4, 800fd82 <rmw_destroy_node+0xae>
 800fd66:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fd6a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fd6c:	429d      	cmp	r5, r3
 800fd6e:	d1f9      	bne.n	800fd64 <rmw_destroy_node+0x90>
 800fd70:	317c      	adds	r1, #124	@ 0x7c
 800fd72:	4638      	mov	r0, r7
 800fd74:	f009 fac6 	bl	8019304 <rmw_destroy_client>
 800fd78:	2801      	cmp	r0, #1
 800fd7a:	4606      	mov	r6, r0
 800fd7c:	d0d2      	beq.n	800fd24 <rmw_destroy_node+0x50>
 800fd7e:	2c00      	cmp	r4, #0
 800fd80:	d1f1      	bne.n	800fd66 <rmw_destroy_node+0x92>
 800fd82:	6928      	ldr	r0, [r5, #16]
 800fd84:	696a      	ldr	r2, [r5, #20]
 800fd86:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fd8a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd8e:	6819      	ldr	r1, [r3, #0]
 800fd90:	f002 fa82 	bl	8012298 <uxr_buffer_delete_entity>
 800fd94:	4602      	mov	r2, r0
 800fd96:	6928      	ldr	r0, [r5, #16]
 800fd98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fd9c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fda0:	f000 fd8c 	bl	80108bc <run_xrce_session>
 800fda4:	4603      	mov	r3, r0
 800fda6:	4638      	mov	r0, r7
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	bf08      	it	eq
 800fdac:	2602      	moveq	r6, #2
 800fdae:	f000 fc09 	bl	80105c4 <rmw_uxrce_fini_node_memory>
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb6:	4626      	mov	r6, r4
 800fdb8:	e7a5      	b.n	800fd06 <rmw_destroy_node+0x32>
 800fdba:	bf00      	nop
 800fdbc:	0801d8c4 	.word	0x0801d8c4
 800fdc0:	24012f7c 	.word	0x24012f7c
 800fdc4:	24012fbc 	.word	0x24012fbc
 800fdc8:	24012f8c 	.word	0x24012f8c
 800fdcc:	2400e69c 	.word	0x2400e69c

0800fdd0 <rmw_node_get_graph_guard_condition>:
 800fdd0:	6843      	ldr	r3, [r0, #4]
 800fdd2:	6918      	ldr	r0, [r3, #16]
 800fdd4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop

0800fddc <flush_session>:
 800fddc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800fdde:	f003 ba73 	b.w	80132c8 <uxr_run_session_until_confirm_delivery>
 800fde2:	bf00      	nop

0800fde4 <rmw_publish>:
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d053      	beq.n	800fe90 <rmw_publish+0xac>
 800fde8:	b570      	push	{r4, r5, r6, lr}
 800fdea:	460d      	mov	r5, r1
 800fdec:	b08e      	sub	sp, #56	@ 0x38
 800fdee:	2900      	cmp	r1, #0
 800fdf0:	d04b      	beq.n	800fe8a <rmw_publish+0xa6>
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	6800      	ldr	r0, [r0, #0]
 800fdf6:	f000 fddb 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d045      	beq.n	800fe8a <rmw_publish+0xa6>
 800fdfe:	6866      	ldr	r6, [r4, #4]
 800fe00:	2e00      	cmp	r6, #0
 800fe02:	d042      	beq.n	800fe8a <rmw_publish+0xa6>
 800fe04:	69b4      	ldr	r4, [r6, #24]
 800fe06:	4628      	mov	r0, r5
 800fe08:	6923      	ldr	r3, [r4, #16]
 800fe0a:	4798      	blx	r3
 800fe0c:	69f3      	ldr	r3, [r6, #28]
 800fe0e:	9005      	str	r0, [sp, #20]
 800fe10:	b113      	cbz	r3, 800fe18 <rmw_publish+0x34>
 800fe12:	a805      	add	r0, sp, #20
 800fe14:	4798      	blx	r3
 800fe16:	9805      	ldr	r0, [sp, #20]
 800fe18:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fe1c:	691b      	ldr	r3, [r3, #16]
 800fe1e:	9000      	str	r0, [sp, #0]
 800fe20:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fe24:	6972      	ldr	r2, [r6, #20]
 800fe26:	ab06      	add	r3, sp, #24
 800fe28:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fe2a:	f004 fd1d 	bl	8014868 <uxr_prepare_output_stream>
 800fe2e:	b1d8      	cbz	r0, 800fe68 <rmw_publish+0x84>
 800fe30:	68a3      	ldr	r3, [r4, #8]
 800fe32:	a906      	add	r1, sp, #24
 800fe34:	4628      	mov	r0, r5
 800fe36:	4798      	blx	r3
 800fe38:	6a33      	ldr	r3, [r6, #32]
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b10b      	cbz	r3, 800fe42 <rmw_publish+0x5e>
 800fe3e:	a806      	add	r0, sp, #24
 800fe40:	4798      	blx	r3
 800fe42:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fe4c:	d022      	beq.n	800fe94 <rmw_publish+0xb0>
 800fe4e:	6918      	ldr	r0, [r3, #16]
 800fe50:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800fe52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe56:	f003 fa37 	bl	80132c8 <uxr_run_session_until_confirm_delivery>
 800fe5a:	4020      	ands	r0, r4
 800fe5c:	b2c4      	uxtb	r4, r0
 800fe5e:	f084 0001 	eor.w	r0, r4, #1
 800fe62:	b2c0      	uxtb	r0, r0
 800fe64:	b00e      	add	sp, #56	@ 0x38
 800fe66:	bd70      	pop	{r4, r5, r6, pc}
 800fe68:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fe6c:	6918      	ldr	r0, [r3, #16]
 800fe6e:	9b05      	ldr	r3, [sp, #20]
 800fe70:	9602      	str	r6, [sp, #8]
 800fe72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	4b09      	ldr	r3, [pc, #36]	@ (800fea0 <rmw_publish+0xbc>)
 800fe7a:	9301      	str	r3, [sp, #4]
 800fe7c:	ab06      	add	r3, sp, #24
 800fe7e:	6972      	ldr	r2, [r6, #20]
 800fe80:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fe82:	f004 fd21 	bl	80148c8 <uxr_prepare_output_stream_fragmented>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	d1d2      	bne.n	800fe30 <rmw_publish+0x4c>
 800fe8a:	2001      	movs	r0, #1
 800fe8c:	b00e      	add	sp, #56	@ 0x38
 800fe8e:	bd70      	pop	{r4, r5, r6, pc}
 800fe90:	2001      	movs	r0, #1
 800fe92:	4770      	bx	lr
 800fe94:	6918      	ldr	r0, [r3, #16]
 800fe96:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe9a:	f002 fe5b 	bl	8012b54 <uxr_flash_output_streams>
 800fe9e:	e7de      	b.n	800fe5e <rmw_publish+0x7a>
 800fea0:	0800fddd 	.word	0x0800fddd

0800fea4 <rmw_create_publisher>:
 800fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea8:	b087      	sub	sp, #28
 800feaa:	2800      	cmp	r0, #0
 800feac:	f000 80d2 	beq.w	8010054 <rmw_create_publisher+0x1b0>
 800feb0:	460e      	mov	r6, r1
 800feb2:	2900      	cmp	r1, #0
 800feb4:	f000 80ce 	beq.w	8010054 <rmw_create_publisher+0x1b0>
 800feb8:	4604      	mov	r4, r0
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	4615      	mov	r5, r2
 800febe:	461f      	mov	r7, r3
 800fec0:	f000 fd76 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 800fec4:	f080 0001 	eor.w	r0, r0, #1
 800fec8:	b2c0      	uxtb	r0, r0
 800feca:	2800      	cmp	r0, #0
 800fecc:	f040 80c2 	bne.w	8010054 <rmw_create_publisher+0x1b0>
 800fed0:	2d00      	cmp	r5, #0
 800fed2:	f000 80bf 	beq.w	8010054 <rmw_create_publisher+0x1b0>
 800fed6:	782b      	ldrb	r3, [r5, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 80bb 	beq.w	8010054 <rmw_create_publisher+0x1b0>
 800fede:	2f00      	cmp	r7, #0
 800fee0:	f000 80b8 	beq.w	8010054 <rmw_create_publisher+0x1b0>
 800fee4:	485e      	ldr	r0, [pc, #376]	@ (8010060 <rmw_create_publisher+0x1bc>)
 800fee6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800feea:	f009 f9e7 	bl	80192bc <get_memory>
 800feee:	2800      	cmp	r0, #0
 800fef0:	f000 80b0 	beq.w	8010054 <rmw_create_publisher+0x1b0>
 800fef4:	6884      	ldr	r4, [r0, #8]
 800fef6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800fefa:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fefe:	f009 fa45 	bl	801938c <rmw_get_implementation_identifier>
 800ff02:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800ff06:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f7f0 f9f2 	bl	80002f4 <strlen>
 800ff10:	3001      	adds	r0, #1
 800ff12:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800ff16:	283c      	cmp	r0, #60	@ 0x3c
 800ff18:	f200 808f 	bhi.w	801003a <rmw_create_publisher+0x196>
 800ff1c:	462b      	mov	r3, r5
 800ff1e:	4a51      	ldr	r2, [pc, #324]	@ (8010064 <rmw_create_publisher+0x1c0>)
 800ff20:	213c      	movs	r1, #60	@ 0x3c
 800ff22:	4650      	mov	r0, sl
 800ff24:	f00b fe7a 	bl	801bc1c <sniprintf>
 800ff28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff2c:	4639      	mov	r1, r7
 800ff2e:	2250      	movs	r2, #80	@ 0x50
 800ff30:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ff32:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ff36:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ff3a:	f00c f8a6 	bl	801c08a <memcpy>
 800ff3e:	7a3b      	ldrb	r3, [r7, #8]
 800ff40:	4630      	mov	r0, r6
 800ff42:	4949      	ldr	r1, [pc, #292]	@ (8010068 <rmw_create_publisher+0x1c4>)
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff4a:	bf0c      	ite	eq
 800ff4c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ff50:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ff54:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ff56:	2300      	movs	r3, #0
 800ff58:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ff5c:	f000 fd36 	bl	80109cc <get_message_typesupport_handle>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d06a      	beq.n	801003a <rmw_create_publisher+0x196>
 800ff64:	6842      	ldr	r2, [r0, #4]
 800ff66:	61a2      	str	r2, [r4, #24]
 800ff68:	2a00      	cmp	r2, #0
 800ff6a:	d066      	beq.n	801003a <rmw_create_publisher+0x196>
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	463b      	mov	r3, r7
 800ff70:	4648      	mov	r0, r9
 800ff72:	f009 fa11 	bl	8019398 <create_topic>
 800ff76:	6260      	str	r0, [r4, #36]	@ 0x24
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	d062      	beq.n	8010042 <rmw_create_publisher+0x19e>
 800ff7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff80:	2103      	movs	r1, #3
 800ff82:	2506      	movs	r5, #6
 800ff84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ff88:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ff8c:	1c42      	adds	r2, r0, #1
 800ff8e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ff92:	f002 fb99 	bl	80126c8 <uxr_object_id>
 800ff96:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ff9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff9e:	6120      	str	r0, [r4, #16]
 800ffa0:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ffa4:	6910      	ldr	r0, [r2, #16]
 800ffa6:	9500      	str	r5, [sp, #0]
 800ffa8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ffac:	6819      	ldr	r1, [r3, #0]
 800ffae:	6922      	ldr	r2, [r4, #16]
 800ffb0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ffb4:	f002 fa24 	bl	8012400 <uxr_buffer_create_publisher_bin>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ffbe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ffc2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ffc6:	f000 fc79 	bl	80108bc <run_xrce_session>
 800ffca:	b3b0      	cbz	r0, 801003a <rmw_create_publisher+0x196>
 800ffcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffd0:	2105      	movs	r1, #5
 800ffd2:	f10d 0a10 	add.w	sl, sp, #16
 800ffd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ffda:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ffde:	1c42      	adds	r2, r0, #1
 800ffe0:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ffe4:	f002 fb70 	bl	80126c8 <uxr_object_id>
 800ffe8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ffec:	4639      	mov	r1, r7
 800ffee:	6160      	str	r0, [r4, #20]
 800fff0:	691e      	ldr	r6, [r3, #16]
 800fff2:	4650      	mov	r0, sl
 800fff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fff8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800fffc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010000:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8010004:	f000 fc76 	bl	80108f4 <convert_qos_profile>
 8010008:	9503      	str	r5, [sp, #12]
 801000a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801000e:	9001      	str	r0, [sp, #4]
 8010010:	4630      	mov	r0, r6
 8010012:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010016:	f8db 3010 	ldr.w	r3, [fp, #16]
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	6839      	ldr	r1, [r7, #0]
 801001e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010022:	f002 fa1d 	bl	8012460 <uxr_buffer_create_datawriter_bin>
 8010026:	4602      	mov	r2, r0
 8010028:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801002c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010030:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010034:	f000 fc42 	bl	80108bc <run_xrce_session>
 8010038:	b970      	cbnz	r0, 8010058 <rmw_create_publisher+0x1b4>
 801003a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801003c:	b108      	cbz	r0, 8010042 <rmw_create_publisher+0x19e>
 801003e:	f000 fb31 	bl	80106a4 <rmw_uxrce_fini_topic_memory>
 8010042:	4640      	mov	r0, r8
 8010044:	f04f 0800 	mov.w	r8, #0
 8010048:	f000 fad4 	bl	80105f4 <rmw_uxrce_fini_publisher_memory>
 801004c:	4640      	mov	r0, r8
 801004e:	b007      	add	sp, #28
 8010050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010054:	f04f 0800 	mov.w	r8, #0
 8010058:	4640      	mov	r0, r8
 801005a:	b007      	add	sp, #28
 801005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010060:	24012f7c 	.word	0x24012f7c
 8010064:	0801cfa0 	.word	0x0801cfa0
 8010068:	0801cf6c 	.word	0x0801cf6c

0801006c <rmw_publisher_get_actual_qos>:
 801006c:	b178      	cbz	r0, 801008e <rmw_publisher_get_actual_qos+0x22>
 801006e:	b510      	push	{r4, lr}
 8010070:	fab1 f481 	clz	r4, r1
 8010074:	0964      	lsrs	r4, r4, #5
 8010076:	b141      	cbz	r1, 801008a <rmw_publisher_get_actual_qos+0x1e>
 8010078:	6843      	ldr	r3, [r0, #4]
 801007a:	2250      	movs	r2, #80	@ 0x50
 801007c:	4608      	mov	r0, r1
 801007e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8010082:	f00c f802 	bl	801c08a <memcpy>
 8010086:	4620      	mov	r0, r4
 8010088:	bd10      	pop	{r4, pc}
 801008a:	200b      	movs	r0, #11
 801008c:	bd10      	pop	{r4, pc}
 801008e:	200b      	movs	r0, #11
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop

08010094 <rmw_destroy_publisher>:
 8010094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010098:	b128      	cbz	r0, 80100a6 <rmw_destroy_publisher+0x12>
 801009a:	4604      	mov	r4, r0
 801009c:	6800      	ldr	r0, [r0, #0]
 801009e:	460d      	mov	r5, r1
 80100a0:	f000 fc86 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 80100a4:	b918      	cbnz	r0, 80100ae <rmw_destroy_publisher+0x1a>
 80100a6:	2401      	movs	r4, #1
 80100a8:	4620      	mov	r0, r4
 80100aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ae:	6863      	ldr	r3, [r4, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d0f8      	beq.n	80100a6 <rmw_destroy_publisher+0x12>
 80100b4:	fab5 f485 	clz	r4, r5
 80100b8:	0964      	lsrs	r4, r4, #5
 80100ba:	2d00      	cmp	r5, #0
 80100bc:	d0f3      	beq.n	80100a6 <rmw_destroy_publisher+0x12>
 80100be:	6828      	ldr	r0, [r5, #0]
 80100c0:	f000 fc76 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d0ee      	beq.n	80100a6 <rmw_destroy_publisher+0x12>
 80100c8:	686e      	ldr	r6, [r5, #4]
 80100ca:	2e00      	cmp	r6, #0
 80100cc:	d0eb      	beq.n	80100a6 <rmw_destroy_publisher+0x12>
 80100ce:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80100d0:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 80100d4:	f009 f9b0 	bl	8019438 <destroy_topic>
 80100d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80100dc:	6972      	ldr	r2, [r6, #20]
 80100de:	6918      	ldr	r0, [r3, #16]
 80100e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80100e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100e8:	6819      	ldr	r1, [r3, #0]
 80100ea:	f002 f8d5 	bl	8012298 <uxr_buffer_delete_entity>
 80100ee:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80100f2:	4680      	mov	r8, r0
 80100f4:	6932      	ldr	r2, [r6, #16]
 80100f6:	6918      	ldr	r0, [r3, #16]
 80100f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80100fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010100:	6819      	ldr	r1, [r3, #0]
 8010102:	f002 f8c9 	bl	8012298 <uxr_buffer_delete_entity>
 8010106:	4606      	mov	r6, r0
 8010108:	6938      	ldr	r0, [r7, #16]
 801010a:	4642      	mov	r2, r8
 801010c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010110:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010114:	f000 fbd2 	bl	80108bc <run_xrce_session>
 8010118:	693f      	ldr	r7, [r7, #16]
 801011a:	4632      	mov	r2, r6
 801011c:	4606      	mov	r6, r0
 801011e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010122:	4638      	mov	r0, r7
 8010124:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010128:	f000 fbc8 	bl	80108bc <run_xrce_session>
 801012c:	b126      	cbz	r6, 8010138 <rmw_destroy_publisher+0xa4>
 801012e:	b118      	cbz	r0, 8010138 <rmw_destroy_publisher+0xa4>
 8010130:	4628      	mov	r0, r5
 8010132:	f000 fa5f 	bl	80105f4 <rmw_uxrce_fini_publisher_memory>
 8010136:	e7b7      	b.n	80100a8 <rmw_destroy_publisher+0x14>
 8010138:	2402      	movs	r4, #2
 801013a:	e7f9      	b.n	8010130 <rmw_destroy_publisher+0x9c>

0801013c <rmw_destroy_service>:
 801013c:	b570      	push	{r4, r5, r6, lr}
 801013e:	b128      	cbz	r0, 801014c <rmw_destroy_service+0x10>
 8010140:	4604      	mov	r4, r0
 8010142:	6800      	ldr	r0, [r0, #0]
 8010144:	460d      	mov	r5, r1
 8010146:	f000 fc33 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 801014a:	b910      	cbnz	r0, 8010152 <rmw_destroy_service+0x16>
 801014c:	2401      	movs	r4, #1
 801014e:	4620      	mov	r0, r4
 8010150:	bd70      	pop	{r4, r5, r6, pc}
 8010152:	6863      	ldr	r3, [r4, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0f9      	beq.n	801014c <rmw_destroy_service+0x10>
 8010158:	2d00      	cmp	r5, #0
 801015a:	d0f7      	beq.n	801014c <rmw_destroy_service+0x10>
 801015c:	6828      	ldr	r0, [r5, #0]
 801015e:	f000 fc27 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 8010162:	2800      	cmp	r0, #0
 8010164:	d0f2      	beq.n	801014c <rmw_destroy_service+0x10>
 8010166:	686e      	ldr	r6, [r5, #4]
 8010168:	2e00      	cmp	r6, #0
 801016a:	d0ef      	beq.n	801014c <rmw_destroy_service+0x10>
 801016c:	6864      	ldr	r4, [r4, #4]
 801016e:	6932      	ldr	r2, [r6, #16]
 8010170:	6920      	ldr	r0, [r4, #16]
 8010172:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010176:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801017a:	6819      	ldr	r1, [r3, #0]
 801017c:	f002 fad4 	bl	8012728 <uxr_buffer_cancel_data>
 8010180:	4602      	mov	r2, r0
 8010182:	6920      	ldr	r0, [r4, #16]
 8010184:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010188:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801018c:	f000 fb96 	bl	80108bc <run_xrce_session>
 8010190:	6920      	ldr	r0, [r4, #16]
 8010192:	6932      	ldr	r2, [r6, #16]
 8010194:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010198:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801019c:	6819      	ldr	r1, [r3, #0]
 801019e:	f002 f87b 	bl	8012298 <uxr_buffer_delete_entity>
 80101a2:	4602      	mov	r2, r0
 80101a4:	6920      	ldr	r0, [r4, #16]
 80101a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101ae:	f000 fb85 	bl	80108bc <run_xrce_session>
 80101b2:	4603      	mov	r3, r0
 80101b4:	4628      	mov	r0, r5
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	bf14      	ite	ne
 80101ba:	2400      	movne	r4, #0
 80101bc:	2402      	moveq	r4, #2
 80101be:	f000 fa45 	bl	801064c <rmw_uxrce_fini_service_memory>
 80101c2:	e7c4      	b.n	801014e <rmw_destroy_service+0x12>

080101c4 <rmw_destroy_subscription>:
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c8:	b128      	cbz	r0, 80101d6 <rmw_destroy_subscription+0x12>
 80101ca:	4604      	mov	r4, r0
 80101cc:	6800      	ldr	r0, [r0, #0]
 80101ce:	460d      	mov	r5, r1
 80101d0:	f000 fbee 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 80101d4:	b918      	cbnz	r0, 80101de <rmw_destroy_subscription+0x1a>
 80101d6:	2401      	movs	r4, #1
 80101d8:	4620      	mov	r0, r4
 80101da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101de:	6863      	ldr	r3, [r4, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d0f8      	beq.n	80101d6 <rmw_destroy_subscription+0x12>
 80101e4:	fab5 f485 	clz	r4, r5
 80101e8:	0964      	lsrs	r4, r4, #5
 80101ea:	2d00      	cmp	r5, #0
 80101ec:	d0f3      	beq.n	80101d6 <rmw_destroy_subscription+0x12>
 80101ee:	6828      	ldr	r0, [r5, #0]
 80101f0:	f000 fbde 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d0ee      	beq.n	80101d6 <rmw_destroy_subscription+0x12>
 80101f8:	686e      	ldr	r6, [r5, #4]
 80101fa:	2e00      	cmp	r6, #0
 80101fc:	d0eb      	beq.n	80101d6 <rmw_destroy_subscription+0x12>
 80101fe:	6a37      	ldr	r7, [r6, #32]
 8010200:	6972      	ldr	r2, [r6, #20]
 8010202:	6938      	ldr	r0, [r7, #16]
 8010204:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801020c:	6819      	ldr	r1, [r3, #0]
 801020e:	f002 fa8b 	bl	8012728 <uxr_buffer_cancel_data>
 8010212:	4602      	mov	r2, r0
 8010214:	6938      	ldr	r0, [r7, #16]
 8010216:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801021a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801021e:	f000 fb4d 	bl	80108bc <run_xrce_session>
 8010222:	69f0      	ldr	r0, [r6, #28]
 8010224:	f009 f908 	bl	8019438 <destroy_topic>
 8010228:	6a33      	ldr	r3, [r6, #32]
 801022a:	6972      	ldr	r2, [r6, #20]
 801022c:	6918      	ldr	r0, [r3, #16]
 801022e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010232:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010236:	6819      	ldr	r1, [r3, #0]
 8010238:	f002 f82e 	bl	8012298 <uxr_buffer_delete_entity>
 801023c:	6a33      	ldr	r3, [r6, #32]
 801023e:	4680      	mov	r8, r0
 8010240:	6932      	ldr	r2, [r6, #16]
 8010242:	6918      	ldr	r0, [r3, #16]
 8010244:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010248:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801024c:	6819      	ldr	r1, [r3, #0]
 801024e:	f002 f823 	bl	8012298 <uxr_buffer_delete_entity>
 8010252:	4606      	mov	r6, r0
 8010254:	6938      	ldr	r0, [r7, #16]
 8010256:	4642      	mov	r2, r8
 8010258:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801025c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010260:	f000 fb2c 	bl	80108bc <run_xrce_session>
 8010264:	693f      	ldr	r7, [r7, #16]
 8010266:	4632      	mov	r2, r6
 8010268:	4606      	mov	r6, r0
 801026a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801026e:	4638      	mov	r0, r7
 8010270:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010274:	f000 fb22 	bl	80108bc <run_xrce_session>
 8010278:	b126      	cbz	r6, 8010284 <rmw_destroy_subscription+0xc0>
 801027a:	b118      	cbz	r0, 8010284 <rmw_destroy_subscription+0xc0>
 801027c:	4628      	mov	r0, r5
 801027e:	f000 f9cf 	bl	8010620 <rmw_uxrce_fini_subscription_memory>
 8010282:	e7a9      	b.n	80101d8 <rmw_destroy_subscription+0x14>
 8010284:	2402      	movs	r4, #2
 8010286:	e7f9      	b.n	801027c <rmw_destroy_subscription+0xb8>

08010288 <rmw_uxrce_transport_init>:
 8010288:	b508      	push	{r3, lr}
 801028a:	b108      	cbz	r0, 8010290 <rmw_uxrce_transport_init+0x8>
 801028c:	f100 0210 	add.w	r2, r0, #16
 8010290:	b139      	cbz	r1, 80102a2 <rmw_uxrce_transport_init+0x1a>
 8010292:	6949      	ldr	r1, [r1, #20]
 8010294:	4610      	mov	r0, r2
 8010296:	f002 f9df 	bl	8012658 <uxr_init_custom_transport>
 801029a:	f080 0001 	eor.w	r0, r0, #1
 801029e:	b2c0      	uxtb	r0, r0
 80102a0:	bd08      	pop	{r3, pc}
 80102a2:	4b04      	ldr	r3, [pc, #16]	@ (80102b4 <rmw_uxrce_transport_init+0x2c>)
 80102a4:	4610      	mov	r0, r2
 80102a6:	6859      	ldr	r1, [r3, #4]
 80102a8:	f002 f9d6 	bl	8012658 <uxr_init_custom_transport>
 80102ac:	f080 0001 	eor.w	r0, r0, #1
 80102b0:	b2c0      	uxtb	r0, r0
 80102b2:	bd08      	pop	{r3, pc}
 80102b4:	2400e644 	.word	0x2400e644

080102b8 <rmw_uros_epoch_nanos>:
 80102b8:	4b05      	ldr	r3, [pc, #20]	@ (80102d0 <rmw_uros_epoch_nanos+0x18>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	b123      	cbz	r3, 80102c8 <rmw_uros_epoch_nanos+0x10>
 80102be:	6898      	ldr	r0, [r3, #8]
 80102c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102c4:	f002 bc3c 	b.w	8012b40 <uxr_epoch_nanos>
 80102c8:	2000      	movs	r0, #0
 80102ca:	2100      	movs	r1, #0
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	24012f9c 	.word	0x24012f9c

080102d4 <rmw_uros_sync_session>:
 80102d4:	b508      	push	{r3, lr}
 80102d6:	4b07      	ldr	r3, [pc, #28]	@ (80102f4 <rmw_uros_sync_session+0x20>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	b14b      	cbz	r3, 80102f0 <rmw_uros_sync_session+0x1c>
 80102dc:	4601      	mov	r1, r0
 80102de:	6898      	ldr	r0, [r3, #8]
 80102e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102e4:	f003 f86c 	bl	80133c0 <uxr_sync_session>
 80102e8:	f080 0001 	eor.w	r0, r0, #1
 80102ec:	b2c0      	uxtb	r0, r0
 80102ee:	bd08      	pop	{r3, pc}
 80102f0:	2001      	movs	r0, #1
 80102f2:	bd08      	pop	{r3, pc}
 80102f4:	24012f9c 	.word	0x24012f9c

080102f8 <rmw_uxrce_init_service_memory>:
 80102f8:	b1e2      	cbz	r2, 8010334 <rmw_uxrce_init_service_memory+0x3c>
 80102fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102fe:	7b05      	ldrb	r5, [r0, #12]
 8010300:	4606      	mov	r6, r0
 8010302:	b9ad      	cbnz	r5, 8010330 <rmw_uxrce_init_service_memory+0x38>
 8010304:	23c8      	movs	r3, #200	@ 0xc8
 8010306:	4617      	mov	r7, r2
 8010308:	460c      	mov	r4, r1
 801030a:	46a8      	mov	r8, r5
 801030c:	6083      	str	r3, [r0, #8]
 801030e:	f240 1301 	movw	r3, #257	@ 0x101
 8010312:	e9c0 5500 	strd	r5, r5, [r0]
 8010316:	8183      	strh	r3, [r0, #12]
 8010318:	3501      	adds	r5, #1
 801031a:	4621      	mov	r1, r4
 801031c:	4630      	mov	r0, r6
 801031e:	f008 ffdd 	bl	80192dc <put_memory>
 8010322:	42af      	cmp	r7, r5
 8010324:	60a4      	str	r4, [r4, #8]
 8010326:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801032a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801032e:	d1f3      	bne.n	8010318 <rmw_uxrce_init_service_memory+0x20>
 8010330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop

08010338 <rmw_uxrce_init_client_memory>:
 8010338:	b1e2      	cbz	r2, 8010374 <rmw_uxrce_init_client_memory+0x3c>
 801033a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801033e:	7b05      	ldrb	r5, [r0, #12]
 8010340:	4606      	mov	r6, r0
 8010342:	b9ad      	cbnz	r5, 8010370 <rmw_uxrce_init_client_memory+0x38>
 8010344:	23c8      	movs	r3, #200	@ 0xc8
 8010346:	4617      	mov	r7, r2
 8010348:	460c      	mov	r4, r1
 801034a:	46a8      	mov	r8, r5
 801034c:	6083      	str	r3, [r0, #8]
 801034e:	f240 1301 	movw	r3, #257	@ 0x101
 8010352:	e9c0 5500 	strd	r5, r5, [r0]
 8010356:	8183      	strh	r3, [r0, #12]
 8010358:	3501      	adds	r5, #1
 801035a:	4621      	mov	r1, r4
 801035c:	4630      	mov	r0, r6
 801035e:	f008 ffbd 	bl	80192dc <put_memory>
 8010362:	42af      	cmp	r7, r5
 8010364:	60a4      	str	r4, [r4, #8]
 8010366:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801036a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801036e:	d1f3      	bne.n	8010358 <rmw_uxrce_init_client_memory+0x20>
 8010370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop

08010378 <rmw_uxrce_init_publisher_memory>:
 8010378:	b1e2      	cbz	r2, 80103b4 <rmw_uxrce_init_publisher_memory+0x3c>
 801037a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037e:	7b05      	ldrb	r5, [r0, #12]
 8010380:	4606      	mov	r6, r0
 8010382:	b9ad      	cbnz	r5, 80103b0 <rmw_uxrce_init_publisher_memory+0x38>
 8010384:	23d8      	movs	r3, #216	@ 0xd8
 8010386:	4617      	mov	r7, r2
 8010388:	460c      	mov	r4, r1
 801038a:	46a8      	mov	r8, r5
 801038c:	6083      	str	r3, [r0, #8]
 801038e:	f240 1301 	movw	r3, #257	@ 0x101
 8010392:	e9c0 5500 	strd	r5, r5, [r0]
 8010396:	8183      	strh	r3, [r0, #12]
 8010398:	3501      	adds	r5, #1
 801039a:	4621      	mov	r1, r4
 801039c:	4630      	mov	r0, r6
 801039e:	f008 ff9d 	bl	80192dc <put_memory>
 80103a2:	42af      	cmp	r7, r5
 80103a4:	60a4      	str	r4, [r4, #8]
 80103a6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80103aa:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80103ae:	d1f3      	bne.n	8010398 <rmw_uxrce_init_publisher_memory+0x20>
 80103b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop

080103b8 <rmw_uxrce_init_subscription_memory>:
 80103b8:	b1e2      	cbz	r2, 80103f4 <rmw_uxrce_init_subscription_memory+0x3c>
 80103ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103be:	7b05      	ldrb	r5, [r0, #12]
 80103c0:	4606      	mov	r6, r0
 80103c2:	b9ad      	cbnz	r5, 80103f0 <rmw_uxrce_init_subscription_memory+0x38>
 80103c4:	23d8      	movs	r3, #216	@ 0xd8
 80103c6:	4617      	mov	r7, r2
 80103c8:	460c      	mov	r4, r1
 80103ca:	46a8      	mov	r8, r5
 80103cc:	6083      	str	r3, [r0, #8]
 80103ce:	f240 1301 	movw	r3, #257	@ 0x101
 80103d2:	e9c0 5500 	strd	r5, r5, [r0]
 80103d6:	8183      	strh	r3, [r0, #12]
 80103d8:	3501      	adds	r5, #1
 80103da:	4621      	mov	r1, r4
 80103dc:	4630      	mov	r0, r6
 80103de:	f008 ff7d 	bl	80192dc <put_memory>
 80103e2:	42af      	cmp	r7, r5
 80103e4:	60a4      	str	r4, [r4, #8]
 80103e6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80103ea:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80103ee:	d1f3      	bne.n	80103d8 <rmw_uxrce_init_subscription_memory+0x20>
 80103f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop

080103f8 <rmw_uxrce_init_node_memory>:
 80103f8:	b1e2      	cbz	r2, 8010434 <rmw_uxrce_init_node_memory+0x3c>
 80103fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103fe:	7b05      	ldrb	r5, [r0, #12]
 8010400:	4606      	mov	r6, r0
 8010402:	b9ad      	cbnz	r5, 8010430 <rmw_uxrce_init_node_memory+0x38>
 8010404:	23a4      	movs	r3, #164	@ 0xa4
 8010406:	4617      	mov	r7, r2
 8010408:	460c      	mov	r4, r1
 801040a:	46a8      	mov	r8, r5
 801040c:	6083      	str	r3, [r0, #8]
 801040e:	f240 1301 	movw	r3, #257	@ 0x101
 8010412:	e9c0 5500 	strd	r5, r5, [r0]
 8010416:	8183      	strh	r3, [r0, #12]
 8010418:	3501      	adds	r5, #1
 801041a:	4621      	mov	r1, r4
 801041c:	4630      	mov	r0, r6
 801041e:	f008 ff5d 	bl	80192dc <put_memory>
 8010422:	42af      	cmp	r7, r5
 8010424:	60a4      	str	r4, [r4, #8]
 8010426:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801042a:	f804 8c98 	strb.w	r8, [r4, #-152]
 801042e:	d1f3      	bne.n	8010418 <rmw_uxrce_init_node_memory+0x20>
 8010430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop

08010438 <rmw_uxrce_init_session_memory>:
 8010438:	b1ea      	cbz	r2, 8010476 <rmw_uxrce_init_session_memory+0x3e>
 801043a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801043e:	7b05      	ldrb	r5, [r0, #12]
 8010440:	4606      	mov	r6, r0
 8010442:	b9b5      	cbnz	r5, 8010472 <rmw_uxrce_init_session_memory+0x3a>
 8010444:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010448:	f240 1301 	movw	r3, #257	@ 0x101
 801044c:	4617      	mov	r7, r2
 801044e:	460c      	mov	r4, r1
 8010450:	46a9      	mov	r9, r5
 8010452:	f8c0 8008 	str.w	r8, [r0, #8]
 8010456:	8183      	strh	r3, [r0, #12]
 8010458:	e9c0 5500 	strd	r5, r5, [r0]
 801045c:	3501      	adds	r5, #1
 801045e:	4621      	mov	r1, r4
 8010460:	4630      	mov	r0, r6
 8010462:	f008 ff3b 	bl	80192dc <put_memory>
 8010466:	42af      	cmp	r7, r5
 8010468:	60a4      	str	r4, [r4, #8]
 801046a:	f884 900c 	strb.w	r9, [r4, #12]
 801046e:	4444      	add	r4, r8
 8010470:	d1f4      	bne.n	801045c <rmw_uxrce_init_session_memory+0x24>
 8010472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010476:	4770      	bx	lr

08010478 <rmw_uxrce_init_topic_memory>:
 8010478:	b1e2      	cbz	r2, 80104b4 <rmw_uxrce_init_topic_memory+0x3c>
 801047a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801047e:	7b05      	ldrb	r5, [r0, #12]
 8010480:	4606      	mov	r6, r0
 8010482:	b9ad      	cbnz	r5, 80104b0 <rmw_uxrce_init_topic_memory+0x38>
 8010484:	231c      	movs	r3, #28
 8010486:	4617      	mov	r7, r2
 8010488:	460c      	mov	r4, r1
 801048a:	46a8      	mov	r8, r5
 801048c:	6083      	str	r3, [r0, #8]
 801048e:	f240 1301 	movw	r3, #257	@ 0x101
 8010492:	e9c0 5500 	strd	r5, r5, [r0]
 8010496:	8183      	strh	r3, [r0, #12]
 8010498:	3501      	adds	r5, #1
 801049a:	4621      	mov	r1, r4
 801049c:	4630      	mov	r0, r6
 801049e:	f008 ff1d 	bl	80192dc <put_memory>
 80104a2:	42af      	cmp	r7, r5
 80104a4:	60a4      	str	r4, [r4, #8]
 80104a6:	f104 041c 	add.w	r4, r4, #28
 80104aa:	f804 8c10 	strb.w	r8, [r4, #-16]
 80104ae:	d1f3      	bne.n	8010498 <rmw_uxrce_init_topic_memory+0x20>
 80104b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop

080104b8 <rmw_uxrce_init_static_input_buffer_memory>:
 80104b8:	b1ea      	cbz	r2, 80104f6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80104ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104be:	7b05      	ldrb	r5, [r0, #12]
 80104c0:	4606      	mov	r6, r0
 80104c2:	b9b5      	cbnz	r5, 80104f2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80104c4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80104c8:	4617      	mov	r7, r2
 80104ca:	460c      	mov	r4, r1
 80104cc:	46a8      	mov	r8, r5
 80104ce:	6083      	str	r3, [r0, #8]
 80104d0:	f240 1301 	movw	r3, #257	@ 0x101
 80104d4:	e9c0 5500 	strd	r5, r5, [r0]
 80104d8:	8183      	strh	r3, [r0, #12]
 80104da:	3501      	adds	r5, #1
 80104dc:	4621      	mov	r1, r4
 80104de:	4630      	mov	r0, r6
 80104e0:	f008 fefc 	bl	80192dc <put_memory>
 80104e4:	42af      	cmp	r7, r5
 80104e6:	60a4      	str	r4, [r4, #8]
 80104e8:	f884 800c 	strb.w	r8, [r4, #12]
 80104ec:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80104f0:	d1f3      	bne.n	80104da <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80104f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f6:	4770      	bx	lr

080104f8 <rmw_uxrce_init_init_options_impl_memory>:
 80104f8:	b1e2      	cbz	r2, 8010534 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80104fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104fe:	7b05      	ldrb	r5, [r0, #12]
 8010500:	4606      	mov	r6, r0
 8010502:	b9ad      	cbnz	r5, 8010530 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010504:	232c      	movs	r3, #44	@ 0x2c
 8010506:	4617      	mov	r7, r2
 8010508:	460c      	mov	r4, r1
 801050a:	46a8      	mov	r8, r5
 801050c:	6083      	str	r3, [r0, #8]
 801050e:	f240 1301 	movw	r3, #257	@ 0x101
 8010512:	e9c0 5500 	strd	r5, r5, [r0]
 8010516:	8183      	strh	r3, [r0, #12]
 8010518:	3501      	adds	r5, #1
 801051a:	4621      	mov	r1, r4
 801051c:	4630      	mov	r0, r6
 801051e:	f008 fedd 	bl	80192dc <put_memory>
 8010522:	42af      	cmp	r7, r5
 8010524:	60a4      	str	r4, [r4, #8]
 8010526:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801052a:	f804 8c20 	strb.w	r8, [r4, #-32]
 801052e:	d1f3      	bne.n	8010518 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop

08010538 <rmw_uxrce_init_wait_set_memory>:
 8010538:	b1e2      	cbz	r2, 8010574 <rmw_uxrce_init_wait_set_memory+0x3c>
 801053a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801053e:	7b05      	ldrb	r5, [r0, #12]
 8010540:	4606      	mov	r6, r0
 8010542:	b9ad      	cbnz	r5, 8010570 <rmw_uxrce_init_wait_set_memory+0x38>
 8010544:	231c      	movs	r3, #28
 8010546:	4617      	mov	r7, r2
 8010548:	460c      	mov	r4, r1
 801054a:	46a8      	mov	r8, r5
 801054c:	6083      	str	r3, [r0, #8]
 801054e:	f240 1301 	movw	r3, #257	@ 0x101
 8010552:	e9c0 5500 	strd	r5, r5, [r0]
 8010556:	8183      	strh	r3, [r0, #12]
 8010558:	3501      	adds	r5, #1
 801055a:	4621      	mov	r1, r4
 801055c:	4630      	mov	r0, r6
 801055e:	f008 febd 	bl	80192dc <put_memory>
 8010562:	42af      	cmp	r7, r5
 8010564:	60a4      	str	r4, [r4, #8]
 8010566:	f104 041c 	add.w	r4, r4, #28
 801056a:	f804 8c10 	strb.w	r8, [r4, #-16]
 801056e:	d1f3      	bne.n	8010558 <rmw_uxrce_init_wait_set_memory+0x20>
 8010570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <rmw_uxrce_init_guard_condition_memory>:
 8010578:	b1e2      	cbz	r2, 80105b4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801057a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057e:	7b05      	ldrb	r5, [r0, #12]
 8010580:	4606      	mov	r6, r0
 8010582:	b9ad      	cbnz	r5, 80105b0 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010584:	2320      	movs	r3, #32
 8010586:	4617      	mov	r7, r2
 8010588:	460c      	mov	r4, r1
 801058a:	46a8      	mov	r8, r5
 801058c:	6083      	str	r3, [r0, #8]
 801058e:	f240 1301 	movw	r3, #257	@ 0x101
 8010592:	e9c0 5500 	strd	r5, r5, [r0]
 8010596:	8183      	strh	r3, [r0, #12]
 8010598:	3501      	adds	r5, #1
 801059a:	4621      	mov	r1, r4
 801059c:	4630      	mov	r0, r6
 801059e:	f008 fe9d 	bl	80192dc <put_memory>
 80105a2:	42af      	cmp	r7, r5
 80105a4:	60a4      	str	r4, [r4, #8]
 80105a6:	f104 0420 	add.w	r4, r4, #32
 80105aa:	f804 8c14 	strb.w	r8, [r4, #-20]
 80105ae:	d1f3      	bne.n	8010598 <rmw_uxrce_init_guard_condition_memory+0x20>
 80105b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop

080105b8 <rmw_uxrce_fini_session_memory>:
 80105b8:	4601      	mov	r1, r0
 80105ba:	4801      	ldr	r0, [pc, #4]	@ (80105c0 <rmw_uxrce_fini_session_memory+0x8>)
 80105bc:	f008 be8e 	b.w	80192dc <put_memory>
 80105c0:	24012f9c 	.word	0x24012f9c

080105c4 <rmw_uxrce_fini_node_memory>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4604      	mov	r4, r0
 80105c8:	6800      	ldr	r0, [r0, #0]
 80105ca:	b128      	cbz	r0, 80105d8 <rmw_uxrce_fini_node_memory+0x14>
 80105cc:	4b07      	ldr	r3, [pc, #28]	@ (80105ec <rmw_uxrce_fini_node_memory+0x28>)
 80105ce:	6819      	ldr	r1, [r3, #0]
 80105d0:	f7ef fe86 	bl	80002e0 <strcmp>
 80105d4:	b940      	cbnz	r0, 80105e8 <rmw_uxrce_fini_node_memory+0x24>
 80105d6:	6020      	str	r0, [r4, #0]
 80105d8:	6861      	ldr	r1, [r4, #4]
 80105da:	b129      	cbz	r1, 80105e8 <rmw_uxrce_fini_node_memory+0x24>
 80105dc:	2500      	movs	r5, #0
 80105de:	4804      	ldr	r0, [pc, #16]	@ (80105f0 <rmw_uxrce_fini_node_memory+0x2c>)
 80105e0:	610d      	str	r5, [r1, #16]
 80105e2:	f008 fe7b 	bl	80192dc <put_memory>
 80105e6:	6065      	str	r5, [r4, #4]
 80105e8:	bd38      	pop	{r3, r4, r5, pc}
 80105ea:	bf00      	nop
 80105ec:	0801d8c4 	.word	0x0801d8c4
 80105f0:	24012f6c 	.word	0x24012f6c

080105f4 <rmw_uxrce_fini_publisher_memory>:
 80105f4:	b510      	push	{r4, lr}
 80105f6:	4604      	mov	r4, r0
 80105f8:	6800      	ldr	r0, [r0, #0]
 80105fa:	b128      	cbz	r0, 8010608 <rmw_uxrce_fini_publisher_memory+0x14>
 80105fc:	4b06      	ldr	r3, [pc, #24]	@ (8010618 <rmw_uxrce_fini_publisher_memory+0x24>)
 80105fe:	6819      	ldr	r1, [r3, #0]
 8010600:	f7ef fe6e 	bl	80002e0 <strcmp>
 8010604:	b938      	cbnz	r0, 8010616 <rmw_uxrce_fini_publisher_memory+0x22>
 8010606:	6020      	str	r0, [r4, #0]
 8010608:	6861      	ldr	r1, [r4, #4]
 801060a:	b121      	cbz	r1, 8010616 <rmw_uxrce_fini_publisher_memory+0x22>
 801060c:	4803      	ldr	r0, [pc, #12]	@ (801061c <rmw_uxrce_fini_publisher_memory+0x28>)
 801060e:	f008 fe65 	bl	80192dc <put_memory>
 8010612:	2300      	movs	r3, #0
 8010614:	6063      	str	r3, [r4, #4]
 8010616:	bd10      	pop	{r4, pc}
 8010618:	0801d8c4 	.word	0x0801d8c4
 801061c:	24012f7c 	.word	0x24012f7c

08010620 <rmw_uxrce_fini_subscription_memory>:
 8010620:	b510      	push	{r4, lr}
 8010622:	4604      	mov	r4, r0
 8010624:	6800      	ldr	r0, [r0, #0]
 8010626:	b128      	cbz	r0, 8010634 <rmw_uxrce_fini_subscription_memory+0x14>
 8010628:	4b06      	ldr	r3, [pc, #24]	@ (8010644 <rmw_uxrce_fini_subscription_memory+0x24>)
 801062a:	6819      	ldr	r1, [r3, #0]
 801062c:	f7ef fe58 	bl	80002e0 <strcmp>
 8010630:	b938      	cbnz	r0, 8010642 <rmw_uxrce_fini_subscription_memory+0x22>
 8010632:	6020      	str	r0, [r4, #0]
 8010634:	6861      	ldr	r1, [r4, #4]
 8010636:	b121      	cbz	r1, 8010642 <rmw_uxrce_fini_subscription_memory+0x22>
 8010638:	4803      	ldr	r0, [pc, #12]	@ (8010648 <rmw_uxrce_fini_subscription_memory+0x28>)
 801063a:	f008 fe4f 	bl	80192dc <put_memory>
 801063e:	2300      	movs	r3, #0
 8010640:	6063      	str	r3, [r4, #4]
 8010642:	bd10      	pop	{r4, pc}
 8010644:	0801d8c4 	.word	0x0801d8c4
 8010648:	24012fbc 	.word	0x24012fbc

0801064c <rmw_uxrce_fini_service_memory>:
 801064c:	b510      	push	{r4, lr}
 801064e:	4604      	mov	r4, r0
 8010650:	6800      	ldr	r0, [r0, #0]
 8010652:	b128      	cbz	r0, 8010660 <rmw_uxrce_fini_service_memory+0x14>
 8010654:	4b06      	ldr	r3, [pc, #24]	@ (8010670 <rmw_uxrce_fini_service_memory+0x24>)
 8010656:	6819      	ldr	r1, [r3, #0]
 8010658:	f7ef fe42 	bl	80002e0 <strcmp>
 801065c:	b938      	cbnz	r0, 801066e <rmw_uxrce_fini_service_memory+0x22>
 801065e:	6020      	str	r0, [r4, #0]
 8010660:	6861      	ldr	r1, [r4, #4]
 8010662:	b121      	cbz	r1, 801066e <rmw_uxrce_fini_service_memory+0x22>
 8010664:	4803      	ldr	r0, [pc, #12]	@ (8010674 <rmw_uxrce_fini_service_memory+0x28>)
 8010666:	f008 fe39 	bl	80192dc <put_memory>
 801066a:	2300      	movs	r3, #0
 801066c:	6063      	str	r3, [r4, #4]
 801066e:	bd10      	pop	{r4, pc}
 8010670:	0801d8c4 	.word	0x0801d8c4
 8010674:	24012f8c 	.word	0x24012f8c

08010678 <rmw_uxrce_fini_client_memory>:
 8010678:	b510      	push	{r4, lr}
 801067a:	4604      	mov	r4, r0
 801067c:	6800      	ldr	r0, [r0, #0]
 801067e:	b128      	cbz	r0, 801068c <rmw_uxrce_fini_client_memory+0x14>
 8010680:	4b06      	ldr	r3, [pc, #24]	@ (801069c <rmw_uxrce_fini_client_memory+0x24>)
 8010682:	6819      	ldr	r1, [r3, #0]
 8010684:	f7ef fe2c 	bl	80002e0 <strcmp>
 8010688:	b938      	cbnz	r0, 801069a <rmw_uxrce_fini_client_memory+0x22>
 801068a:	6020      	str	r0, [r4, #0]
 801068c:	6861      	ldr	r1, [r4, #4]
 801068e:	b121      	cbz	r1, 801069a <rmw_uxrce_fini_client_memory+0x22>
 8010690:	4803      	ldr	r0, [pc, #12]	@ (80106a0 <rmw_uxrce_fini_client_memory+0x28>)
 8010692:	f008 fe23 	bl	80192dc <put_memory>
 8010696:	2300      	movs	r3, #0
 8010698:	6063      	str	r3, [r4, #4]
 801069a:	bd10      	pop	{r4, pc}
 801069c:	0801d8c4 	.word	0x0801d8c4
 80106a0:	2400e69c 	.word	0x2400e69c

080106a4 <rmw_uxrce_fini_topic_memory>:
 80106a4:	b510      	push	{r4, lr}
 80106a6:	4604      	mov	r4, r0
 80106a8:	4803      	ldr	r0, [pc, #12]	@ (80106b8 <rmw_uxrce_fini_topic_memory+0x14>)
 80106aa:	4621      	mov	r1, r4
 80106ac:	f008 fe16 	bl	80192dc <put_memory>
 80106b0:	2300      	movs	r3, #0
 80106b2:	61a3      	str	r3, [r4, #24]
 80106b4:	bd10      	pop	{r4, pc}
 80106b6:	bf00      	nop
 80106b8:	24012fcc 	.word	0x24012fcc

080106bc <rmw_uxrce_get_static_input_buffer_for_entity>:
 80106bc:	b082      	sub	sp, #8
 80106be:	492b      	ldr	r1, [pc, #172]	@ (801076c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80106c0:	b530      	push	{r4, r5, lr}
 80106c2:	680d      	ldr	r5, [r1, #0]
 80106c4:	ac03      	add	r4, sp, #12
 80106c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80106ca:	461c      	mov	r4, r3
 80106cc:	2d00      	cmp	r5, #0
 80106ce:	d04b      	beq.n	8010768 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 80106d0:	462b      	mov	r3, r5
 80106d2:	2100      	movs	r1, #0
 80106d4:	689a      	ldr	r2, [r3, #8]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80106dc:	4290      	cmp	r0, r2
 80106de:	bf08      	it	eq
 80106e0:	3101      	addeq	r1, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1f6      	bne.n	80106d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80106e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	d029      	beq.n	8010742 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80106ee:	d820      	bhi.n	8010732 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 80106f0:	428c      	cmp	r4, r1
 80106f2:	d828      	bhi.n	8010746 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80106f4:	fab4 f284 	clz	r2, r4
 80106f8:	0952      	lsrs	r2, r2, #5
 80106fa:	b324      	cbz	r4, 8010746 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80106fc:	b1dd      	cbz	r5, 8010736 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 80106fe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010702:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010706:	e001      	b.n	801070c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010708:	686d      	ldr	r5, [r5, #4]
 801070a:	b1ad      	cbz	r5, 8010738 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801070c:	68ab      	ldr	r3, [r5, #8]
 801070e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8010712:	4288      	cmp	r0, r1
 8010714:	d1f8      	bne.n	8010708 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010716:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801071a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801071e:	4561      	cmp	r1, ip
 8010720:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010724:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010728:	daee      	bge.n	8010708 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801072a:	468c      	mov	ip, r1
 801072c:	461c      	mov	r4, r3
 801072e:	462a      	mov	r2, r5
 8010730:	e7ea      	b.n	8010708 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010732:	2b03      	cmp	r3, #3
 8010734:	d0dc      	beq.n	80106f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8010736:	2200      	movs	r2, #0
 8010738:	4610      	mov	r0, r2
 801073a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801073e:	b002      	add	sp, #8
 8010740:	4770      	bx	lr
 8010742:	428c      	cmp	r4, r1
 8010744:	d905      	bls.n	8010752 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8010746:	4809      	ldr	r0, [pc, #36]	@ (801076c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801074c:	b002      	add	sp, #8
 801074e:	f008 bdb5 	b.w	80192bc <get_memory>
 8010752:	fab4 f284 	clz	r2, r4
 8010756:	0952      	lsrs	r2, r2, #5
 8010758:	2c00      	cmp	r4, #0
 801075a:	d1ed      	bne.n	8010738 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801075c:	4803      	ldr	r0, [pc, #12]	@ (801076c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801075e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010762:	b002      	add	sp, #8
 8010764:	f008 bdaa 	b.w	80192bc <get_memory>
 8010768:	4629      	mov	r1, r5
 801076a:	e7bc      	b.n	80106e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801076c:	24012fac 	.word	0x24012fac

08010770 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010770:	4b12      	ldr	r3, [pc, #72]	@ (80107bc <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	b530      	push	{r4, r5, lr}
 8010776:	b1f3      	cbz	r3, 80107b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010778:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801077c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010780:	2400      	movs	r4, #0
 8010782:	e001      	b.n	8010788 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	b1a3      	cbz	r3, 80107b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010788:	689a      	ldr	r2, [r3, #8]
 801078a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801078e:	4288      	cmp	r0, r1
 8010790:	d1f8      	bne.n	8010784 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010792:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010796:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801079a:	4571      	cmp	r1, lr
 801079c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80107a0:	eb72 050c 	sbcs.w	r5, r2, ip
 80107a4:	daee      	bge.n	8010784 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80107a6:	461c      	mov	r4, r3
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	468e      	mov	lr, r1
 80107ac:	4694      	mov	ip, r2
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1ea      	bne.n	8010788 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80107b2:	4620      	mov	r0, r4
 80107b4:	bd30      	pop	{r4, r5, pc}
 80107b6:	461c      	mov	r4, r3
 80107b8:	4620      	mov	r0, r4
 80107ba:	bd30      	pop	{r4, r5, pc}
 80107bc:	24012fac 	.word	0x24012fac

080107c0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80107c0:	4b3d      	ldr	r3, [pc, #244]	@ (80108b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80107c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c6:	681f      	ldr	r7, [r3, #0]
 80107c8:	ed2d 8b06 	vpush	{d8-d10}
 80107cc:	b08d      	sub	sp, #52	@ 0x34
 80107ce:	f7ff fd73 	bl	80102b8 <rmw_uros_epoch_nanos>
 80107d2:	2f00      	cmp	r7, #0
 80107d4:	d05d      	beq.n	8010892 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80107d6:	46b8      	mov	r8, r7
 80107d8:	4681      	mov	r9, r0
 80107da:	468a      	mov	sl, r1
 80107dc:	ac04      	add	r4, sp, #16
 80107de:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80107e2:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80107e6:	2b04      	cmp	r3, #4
 80107e8:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80108a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80107ec:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80108a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80107f0:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80108b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80107f4:	d03f      	beq.n	8010876 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80107f6:	2b05      	cmp	r3, #5
 80107f8:	d044      	beq.n	8010884 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	d03b      	beq.n	8010876 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80107fe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010802:	ed8d ab06 	vstr	d10, [sp, #24]
 8010806:	ab08      	add	r3, sp, #32
 8010808:	ed8d 8b08 	vstr	d8, [sp, #32]
 801080c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010812:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010816:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801081a:	f008 fa89 	bl	8018d30 <rmw_time_equal>
 801081e:	b118      	cbz	r0, 8010828 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010820:	ed8d 9b04 	vstr	d9, [sp, #16]
 8010824:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010828:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801082c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8010830:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8010834:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010838:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801083c:	f008 face 	bl	8018ddc <rmw_time_total_nsec>
 8010840:	1830      	adds	r0, r6, r0
 8010842:	eb47 0101 	adc.w	r1, r7, r1
 8010846:	4548      	cmp	r0, r9
 8010848:	eb71 030a 	sbcs.w	r3, r1, sl
 801084c:	db05      	blt.n	801085a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801084e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8010852:	4591      	cmp	r9, r2
 8010854:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010858:	da03      	bge.n	8010862 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801085a:	4641      	mov	r1, r8
 801085c:	4816      	ldr	r0, [pc, #88]	@ (80108b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801085e:	f008 fd3d 	bl	80192dc <put_memory>
 8010862:	f1bb 0f00 	cmp.w	fp, #0
 8010866:	d014      	beq.n	8010892 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010868:	46d8      	mov	r8, fp
 801086a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801086e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010872:	2b04      	cmp	r3, #4
 8010874:	d1bf      	bne.n	80107f6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010876:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801087a:	3340      	adds	r3, #64	@ 0x40
 801087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801087e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010882:	e7c0      	b.n	8010806 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010884:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010888:	3348      	adds	r3, #72	@ 0x48
 801088a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801088c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010890:	e7b9      	b.n	8010806 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010892:	b00d      	add	sp, #52	@ 0x34
 8010894:	ecbd 8b06 	vpop	{d8-d10}
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	f3af 8000 	nop.w
	...
 80108a8:	00000001 	.word	0x00000001
 80108ac:	00000000 	.word	0x00000000
 80108b0:	0000001e 	.word	0x0000001e
 80108b4:	00000000 	.word	0x00000000
 80108b8:	24012fac 	.word	0x24012fac

080108bc <run_xrce_session>:
 80108bc:	b510      	push	{r4, lr}
 80108be:	788c      	ldrb	r4, [r1, #2]
 80108c0:	b086      	sub	sp, #24
 80108c2:	2c01      	cmp	r4, #1
 80108c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80108c8:	d00c      	beq.n	80108e4 <run_xrce_session+0x28>
 80108ca:	2401      	movs	r4, #1
 80108cc:	4619      	mov	r1, r3
 80108ce:	f10d 020e 	add.w	r2, sp, #14
 80108d2:	f10d 0317 	add.w	r3, sp, #23
 80108d6:	9400      	str	r4, [sp, #0]
 80108d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108dc:	f002 fd18 	bl	8013310 <uxr_run_session_until_all_status>
 80108e0:	b006      	add	sp, #24
 80108e2:	bd10      	pop	{r4, pc}
 80108e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108e8:	f002 f934 	bl	8012b54 <uxr_flash_output_streams>
 80108ec:	4620      	mov	r0, r4
 80108ee:	b006      	add	sp, #24
 80108f0:	bd10      	pop	{r4, pc}
 80108f2:	bf00      	nop

080108f4 <convert_qos_profile>:
 80108f4:	7a4a      	ldrb	r2, [r1, #9]
 80108f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80108fa:	2a02      	cmp	r2, #2
 80108fc:	bf18      	it	ne
 80108fe:	2200      	movne	r2, #0
 8010900:	7002      	strb	r2, [r0, #0]
 8010902:	f1ac 0202 	sub.w	r2, ip, #2
 8010906:	fab2 f282 	clz	r2, r2
 801090a:	0952      	lsrs	r2, r2, #5
 801090c:	7042      	strb	r2, [r0, #1]
 801090e:	780a      	ldrb	r2, [r1, #0]
 8010910:	8889      	ldrh	r1, [r1, #4]
 8010912:	f1a2 0202 	sub.w	r2, r2, #2
 8010916:	8081      	strh	r1, [r0, #4]
 8010918:	fab2 f282 	clz	r2, r2
 801091c:	0952      	lsrs	r2, r2, #5
 801091e:	7082      	strb	r2, [r0, #2]
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop

08010924 <generate_type_name>:
 8010924:	2300      	movs	r3, #0
 8010926:	b530      	push	{r4, r5, lr}
 8010928:	700b      	strb	r3, [r1, #0]
 801092a:	b087      	sub	sp, #28
 801092c:	6803      	ldr	r3, [r0, #0]
 801092e:	4614      	mov	r4, r2
 8010930:	b1bb      	cbz	r3, 8010962 <generate_type_name+0x3e>
 8010932:	4a0e      	ldr	r2, [pc, #56]	@ (801096c <generate_type_name+0x48>)
 8010934:	4615      	mov	r5, r2
 8010936:	9500      	str	r5, [sp, #0]
 8010938:	9203      	str	r2, [sp, #12]
 801093a:	4d0d      	ldr	r5, [pc, #52]	@ (8010970 <generate_type_name+0x4c>)
 801093c:	6842      	ldr	r2, [r0, #4]
 801093e:	4608      	mov	r0, r1
 8010940:	490c      	ldr	r1, [pc, #48]	@ (8010974 <generate_type_name+0x50>)
 8010942:	9204      	str	r2, [sp, #16]
 8010944:	9105      	str	r1, [sp, #20]
 8010946:	9102      	str	r1, [sp, #8]
 8010948:	4621      	mov	r1, r4
 801094a:	4a0b      	ldr	r2, [pc, #44]	@ (8010978 <generate_type_name+0x54>)
 801094c:	9501      	str	r5, [sp, #4]
 801094e:	f00b f965 	bl	801bc1c <sniprintf>
 8010952:	2800      	cmp	r0, #0
 8010954:	bfa8      	it	ge
 8010956:	4284      	cmpge	r4, r0
 8010958:	bfcc      	ite	gt
 801095a:	2001      	movgt	r0, #1
 801095c:	2000      	movle	r0, #0
 801095e:	b007      	add	sp, #28
 8010960:	bd30      	pop	{r4, r5, pc}
 8010962:	4b06      	ldr	r3, [pc, #24]	@ (801097c <generate_type_name+0x58>)
 8010964:	4a01      	ldr	r2, [pc, #4]	@ (801096c <generate_type_name+0x48>)
 8010966:	461d      	mov	r5, r3
 8010968:	e7e5      	b.n	8010936 <generate_type_name+0x12>
 801096a:	bf00      	nop
 801096c:	0801cf90 	.word	0x0801cf90
 8010970:	0801cfa8 	.word	0x0801cfa8
 8010974:	0801cfa4 	.word	0x0801cfa4
 8010978:	0801cf94 	.word	0x0801cf94
 801097c:	0801d9b0 	.word	0x0801d9b0

08010980 <generate_topic_name>:
 8010980:	b530      	push	{r4, r5, lr}
 8010982:	4614      	mov	r4, r2
 8010984:	b083      	sub	sp, #12
 8010986:	4605      	mov	r5, r0
 8010988:	4b07      	ldr	r3, [pc, #28]	@ (80109a8 <generate_topic_name+0x28>)
 801098a:	4a08      	ldr	r2, [pc, #32]	@ (80109ac <generate_topic_name+0x2c>)
 801098c:	4608      	mov	r0, r1
 801098e:	9500      	str	r5, [sp, #0]
 8010990:	4621      	mov	r1, r4
 8010992:	f00b f943 	bl	801bc1c <sniprintf>
 8010996:	2800      	cmp	r0, #0
 8010998:	bfa8      	it	ge
 801099a:	4284      	cmpge	r4, r0
 801099c:	bfcc      	ite	gt
 801099e:	2001      	movgt	r0, #1
 80109a0:	2000      	movle	r0, #0
 80109a2:	b003      	add	sp, #12
 80109a4:	bd30      	pop	{r4, r5, pc}
 80109a6:	bf00      	nop
 80109a8:	0801cfb4 	.word	0x0801cfb4
 80109ac:	0801cfac 	.word	0x0801cfac

080109b0 <is_uxrce_rmw_identifier_valid>:
 80109b0:	b510      	push	{r4, lr}
 80109b2:	4604      	mov	r4, r0
 80109b4:	b140      	cbz	r0, 80109c8 <is_uxrce_rmw_identifier_valid+0x18>
 80109b6:	f008 fce9 	bl	801938c <rmw_get_implementation_identifier>
 80109ba:	4601      	mov	r1, r0
 80109bc:	4620      	mov	r0, r4
 80109be:	f7ef fc8f 	bl	80002e0 <strcmp>
 80109c2:	fab0 f080 	clz	r0, r0
 80109c6:	0940      	lsrs	r0, r0, #5
 80109c8:	bd10      	pop	{r4, pc}
 80109ca:	bf00      	nop

080109cc <get_message_typesupport_handle>:
 80109cc:	6883      	ldr	r3, [r0, #8]
 80109ce:	4718      	bx	r3

080109d0 <get_message_typesupport_handle_function>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	4604      	mov	r4, r0
 80109d4:	6800      	ldr	r0, [r0, #0]
 80109d6:	f7ef fc83 	bl	80002e0 <strcmp>
 80109da:	2800      	cmp	r0, #0
 80109dc:	bf0c      	ite	eq
 80109de:	4620      	moveq	r0, r4
 80109e0:	2000      	movne	r0, #0
 80109e2:	bd10      	pop	{r4, pc}

080109e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80109e4:	4b04      	ldr	r3, [pc, #16]	@ (80109f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	b10a      	cbz	r2, 80109ee <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 80109ea:	4803      	ldr	r0, [pc, #12]	@ (80109f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80109ec:	4770      	bx	lr
 80109ee:	4a03      	ldr	r2, [pc, #12]	@ (80109fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 80109f0:	4801      	ldr	r0, [pc, #4]	@ (80109f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80109f2:	6812      	ldr	r2, [r2, #0]
 80109f4:	601a      	str	r2, [r3, #0]
 80109f6:	4770      	bx	lr
 80109f8:	24000050 	.word	0x24000050
 80109fc:	240001b4 	.word	0x240001b4

08010a00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010a00:	4a02      	ldr	r2, [pc, #8]	@ (8010a0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 8010a02:	4b03      	ldr	r3, [pc, #12]	@ (8010a10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 8010a04:	6812      	ldr	r2, [r2, #0]
 8010a06:	601a      	str	r2, [r3, #0]
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	240001b4 	.word	0x240001b4
 8010a10:	24000050 	.word	0x24000050

08010a14 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 8010a14:	6840      	ldr	r0, [r0, #4]
 8010a16:	4770      	bx	lr

08010a18 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8010a18:	6800      	ldr	r0, [r0, #0]
 8010a1a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010a1e:	4770      	bx	lr

08010a20 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8010a20:	6803      	ldr	r3, [r0, #0]
 8010a22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a2a:	e9c2 0100 	strd	r0, r1, [r2]
 8010a2e:	4770      	bx	lr

08010a30 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 8010a30:	6803      	ldr	r3, [r0, #0]
 8010a32:	ed92 7b00 	vldr	d7, [r2]
 8010a36:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010a3a:	ed81 7b00 	vstr	d7, [r1]
 8010a3e:	4770      	bx	lr

08010a40 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 8010a40:	f009 b89c 	b.w	8019b7c <std_msgs__msg__Float64MultiArray__init>

08010a44 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 8010a44:	f009 b8be 	b.w	8019bc4 <std_msgs__msg__Float64MultiArray__fini>

08010a48 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	b082      	sub	sp, #8
 8010a4e:	9101      	str	r1, [sp, #4]
 8010a50:	f009 f852 	bl	8019af8 <rosidl_runtime_c__double__Sequence__fini>
 8010a54:	9901      	ldr	r1, [sp, #4]
 8010a56:	4620      	mov	r0, r4
 8010a58:	b002      	add	sp, #8
 8010a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a5e:	f009 b833 	b.w	8019ac8 <rosidl_runtime_c__double__Sequence__init>
 8010a62:	bf00      	nop

08010a64 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 8010a64:	6800      	ldr	r0, [r0, #0]
 8010a66:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010a6a:	4770      	bx	lr

08010a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010a6c:	b508      	push	{r3, lr}
 8010a6e:	f000 f857 	bl	8010b20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010a72:	4b06      	ldr	r3, [pc, #24]	@ (8010a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8010a74:	4906      	ldr	r1, [pc, #24]	@ (8010a90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	60c8      	str	r0, [r1, #12]
 8010a7a:	b10a      	cbz	r2, 8010a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 8010a7c:	4803      	ldr	r0, [pc, #12]	@ (8010a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8010a7e:	bd08      	pop	{r3, pc}
 8010a80:	4a04      	ldr	r2, [pc, #16]	@ (8010a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 8010a82:	4802      	ldr	r0, [pc, #8]	@ (8010a8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 8010a84:	6812      	ldr	r2, [r2, #0]
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	bd08      	pop	{r3, pc}
 8010a8a:	bf00      	nop
 8010a8c:	240000d4 	.word	0x240000d4
 8010a90:	2400005c 	.word	0x2400005c
 8010a94:	240001b8 	.word	0x240001b8

08010a98 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8010a98:	6840      	ldr	r0, [r0, #4]
 8010a9a:	4770      	bx	lr

08010a9c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8010a9c:	6800      	ldr	r0, [r0, #0]
 8010a9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010aa2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010aa6:	4770      	bx	lr

08010aa8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8010aa8:	6803      	ldr	r3, [r0, #0]
 8010aaa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010aae:	4694      	mov	ip, r2
 8010ab0:	b500      	push	{lr}
 8010ab2:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8010ab6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010aba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010abe:	f8de 3000 	ldr.w	r3, [lr]
 8010ac2:	f8cc 3000 	str.w	r3, [ip]
 8010ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aca:	bf00      	nop

08010acc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8010acc:	6803      	ldr	r3, [r0, #0]
 8010ace:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010ad2:	b500      	push	{lr}
 8010ad4:	4696      	mov	lr, r2
 8010ad6:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8010ada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ade:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ae2:	f8de 3000 	ldr.w	r3, [lr]
 8010ae6:	f8cc 3000 	str.w	r3, [ip]
 8010aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aee:	bf00      	nop

08010af0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8010af0:	f009 b8fc 	b.w	8019cec <std_msgs__msg__MultiArrayLayout__init>

08010af4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 8010af4:	f009 b90c 	b.w	8019d10 <std_msgs__msg__MultiArrayLayout__fini>

08010af8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8010af8:	b510      	push	{r4, lr}
 8010afa:	4604      	mov	r4, r0
 8010afc:	b082      	sub	sp, #8
 8010afe:	9101      	str	r1, [sp, #4]
 8010b00:	f009 f8cc 	bl	8019c9c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8010b04:	9901      	ldr	r1, [sp, #4]
 8010b06:	4620      	mov	r0, r4
 8010b08:	b002      	add	sp, #8
 8010b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b0e:	f009 b8c1 	b.w	8019c94 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8010b12:	bf00      	nop

08010b14 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 8010b14:	6800      	ldr	r0, [r0, #0]
 8010b16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010b1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010b1e:	4770      	bx	lr

08010b20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010b20:	b508      	push	{r3, lr}
 8010b22:	f009 f8fd 	bl	8019d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010b26:	4b06      	ldr	r3, [pc, #24]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010b28:	4906      	ldr	r1, [pc, #24]	@ (8010b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	60c8      	str	r0, [r1, #12]
 8010b2e:	b10a      	cbz	r2, 8010b34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8010b30:	4803      	ldr	r0, [pc, #12]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010b32:	bd08      	pop	{r3, pc}
 8010b34:	4a04      	ldr	r2, [pc, #16]	@ (8010b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 8010b36:	4802      	ldr	r0, [pc, #8]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010b38:	6812      	ldr	r2, [r2, #0]
 8010b3a:	601a      	str	r2, [r3, #0]
 8010b3c:	bd08      	pop	{r3, pc}
 8010b3e:	bf00      	nop
 8010b40:	24000158 	.word	0x24000158
 8010b44:	240000e0 	.word	0x240000e0
 8010b48:	240001b8 	.word	0x240001b8

08010b4c <_Float64MultiArray__max_serialized_size>:
 8010b4c:	b500      	push	{lr}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	2301      	movs	r3, #1
 8010b52:	2100      	movs	r1, #0
 8010b54:	f10d 0007 	add.w	r0, sp, #7
 8010b58:	f88d 3007 	strb.w	r3, [sp, #7]
 8010b5c:	f000 f91c 	bl	8010d98 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010b60:	b003      	add	sp, #12
 8010b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b66:	bf00      	nop

08010b68 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	b160      	cbz	r0, 8010b88 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 8010b6e:	460d      	mov	r5, r1
 8010b70:	f000 f8b6 	bl	8010ce0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010b74:	6966      	ldr	r6, [r4, #20]
 8010b76:	2104      	movs	r1, #4
 8010b78:	182c      	adds	r4, r5, r0
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f001 fa98 	bl	80120b0 <ucdr_alignment>
 8010b80:	1d03      	adds	r3, r0, #4
 8010b82:	441c      	add	r4, r3
 8010b84:	b90e      	cbnz	r6, 8010b8a <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 8010b86:	1b60      	subs	r0, r4, r5
 8010b88:	bd70      	pop	{r4, r5, r6, pc}
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	2108      	movs	r1, #8
 8010b8e:	f001 fa8f 	bl	80120b0 <ucdr_alignment>
 8010b92:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010b96:	181c      	adds	r4, r3, r0
 8010b98:	1b60      	subs	r0, r4, r5
 8010b9a:	e7f5      	b.n	8010b88 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

08010b9c <_Float64MultiArray__cdr_deserialize>:
 8010b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	b1d9      	cbz	r1, 8010bdc <_Float64MultiArray__cdr_deserialize+0x40>
 8010ba4:	4606      	mov	r6, r0
 8010ba6:	f000 f901 	bl	8010dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010baa:	4603      	mov	r3, r0
 8010bac:	4621      	mov	r1, r4
 8010bae:	4630      	mov	r0, r6
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	4798      	blx	r3
 8010bb6:	69a7      	ldr	r7, [r4, #24]
 8010bb8:	ab01      	add	r3, sp, #4
 8010bba:	6921      	ldr	r1, [r4, #16]
 8010bbc:	463a      	mov	r2, r7
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f001 fb50 	bl	8012264 <ucdr_deserialize_sequence_double>
 8010bc4:	9b01      	ldr	r3, [sp, #4]
 8010bc6:	4605      	mov	r5, r0
 8010bc8:	b920      	cbnz	r0, 8010bd4 <_Float64MultiArray__cdr_deserialize+0x38>
 8010bca:	429f      	cmp	r7, r3
 8010bcc:	d30a      	bcc.n	8010be4 <_Float64MultiArray__cdr_deserialize+0x48>
 8010bce:	4628      	mov	r0, r5
 8010bd0:	b003      	add	sp, #12
 8010bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	6163      	str	r3, [r4, #20]
 8010bd8:	b003      	add	sp, #12
 8010bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bdc:	460d      	mov	r5, r1
 8010bde:	4628      	mov	r0, r5
 8010be0:	b003      	add	sp, #12
 8010be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010be4:	2301      	movs	r3, #1
 8010be6:	4630      	mov	r0, r6
 8010be8:	75b5      	strb	r5, [r6, #22]
 8010bea:	2108      	movs	r1, #8
 8010bec:	7573      	strb	r3, [r6, #21]
 8010bee:	6165      	str	r5, [r4, #20]
 8010bf0:	f001 fa76 	bl	80120e0 <ucdr_align_to>
 8010bf4:	9901      	ldr	r1, [sp, #4]
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	00c9      	lsls	r1, r1, #3
 8010bfa:	f001 faa9 	bl	8012150 <ucdr_advance_buffer>
 8010bfe:	4628      	mov	r0, r5
 8010c00:	b003      	add	sp, #12
 8010c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c04 <_Float64MultiArray__cdr_serialize>:
 8010c04:	b188      	cbz	r0, 8010c2a <_Float64MultiArray__cdr_serialize+0x26>
 8010c06:	b538      	push	{r3, r4, r5, lr}
 8010c08:	4604      	mov	r4, r0
 8010c0a:	460d      	mov	r5, r1
 8010c0c:	f000 f8ce 	bl	8010dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010c10:	4603      	mov	r3, r0
 8010c12:	4629      	mov	r1, r5
 8010c14:	4620      	mov	r0, r4
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	689b      	ldr	r3, [r3, #8]
 8010c1a:	4798      	blx	r3
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8010c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c26:	f001 bb0b 	b.w	8012240 <ucdr_serialize_sequence_double>
 8010c2a:	4770      	bx	lr

08010c2c <_Float64MultiArray__get_serialized_size>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	4604      	mov	r4, r0
 8010c30:	b150      	cbz	r0, 8010c48 <_Float64MultiArray__get_serialized_size+0x1c>
 8010c32:	2100      	movs	r1, #0
 8010c34:	f000 f854 	bl	8010ce0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010c38:	6965      	ldr	r5, [r4, #20]
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	f001 fa37 	bl	80120b0 <ucdr_alignment>
 8010c42:	4404      	add	r4, r0
 8010c44:	3404      	adds	r4, #4
 8010c46:	b90d      	cbnz	r5, 8010c4c <_Float64MultiArray__get_serialized_size+0x20>
 8010c48:	4620      	mov	r0, r4
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010c52:	2108      	movs	r1, #8
 8010c54:	f001 fa2c 	bl	80120b0 <ucdr_alignment>
 8010c58:	4404      	add	r4, r0
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	bd38      	pop	{r3, r4, r5, pc}
 8010c5e:	bf00      	nop

08010c60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010c60:	4800      	ldr	r0, [pc, #0]	@ (8010c64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 8010c62:	4770      	bx	lr
 8010c64:	24000164 	.word	0x24000164

08010c68 <_MultiArrayLayout__max_serialized_size>:
 8010c68:	2104      	movs	r1, #4
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	b508      	push	{r3, lr}
 8010c6e:	f001 fa1f 	bl	80120b0 <ucdr_alignment>
 8010c72:	3004      	adds	r0, #4
 8010c74:	bd08      	pop	{r3, pc}
 8010c76:	bf00      	nop

08010c78 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8010c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c7c:	4689      	mov	r9, r1
 8010c7e:	4607      	mov	r7, r0
 8010c80:	2104      	movs	r1, #4
 8010c82:	4648      	mov	r0, r9
 8010c84:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8010c88:	f001 fa12 	bl	80120b0 <ucdr_alignment>
 8010c8c:	f109 0304 	add.w	r3, r9, #4
 8010c90:	18c6      	adds	r6, r0, r3
 8010c92:	f1b8 0f00 	cmp.w	r8, #0
 8010c96:	d018      	beq.n	8010cca <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8010c98:	2500      	movs	r5, #0
 8010c9a:	f009 f8df 	bl	8019e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8010ca4:	6843      	ldr	r3, [r0, #4]
 8010ca6:	4631      	mov	r1, r6
 8010ca8:	3501      	adds	r5, #1
 8010caa:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8010cae:	695b      	ldr	r3, [r3, #20]
 8010cb0:	4798      	blx	r3
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	2c04      	cmp	r4, #4
 8010cb8:	4621      	mov	r1, r4
 8010cba:	bf28      	it	cs
 8010cbc:	2104      	movcs	r1, #4
 8010cbe:	f001 f9f7 	bl	80120b0 <ucdr_alignment>
 8010cc2:	45a8      	cmp	r8, r5
 8010cc4:	4404      	add	r4, r0
 8010cc6:	4426      	add	r6, r4
 8010cc8:	d1e7      	bne.n	8010c9a <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8010cca:	f1c9 0904 	rsb	r9, r9, #4
 8010cce:	4630      	mov	r0, r6
 8010cd0:	2104      	movs	r1, #4
 8010cd2:	444e      	add	r6, r9
 8010cd4:	f001 f9ec 	bl	80120b0 <ucdr_alignment>
 8010cd8:	4430      	add	r0, r6
 8010cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cde:	bf00      	nop

08010ce0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010ce0:	b108      	cbz	r0, 8010ce6 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8010ce2:	f7ff bfc9 	b.w	8010c78 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010ce6:	4770      	bx	lr

08010ce8 <_MultiArrayLayout__get_serialized_size>:
 8010ce8:	b110      	cbz	r0, 8010cf0 <_MultiArrayLayout__get_serialized_size+0x8>
 8010cea:	2100      	movs	r1, #0
 8010cec:	f7ff bfc4 	b.w	8010c78 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop

08010cf4 <_MultiArrayLayout__cdr_deserialize>:
 8010cf4:	b349      	cbz	r1, 8010d4a <_MultiArrayLayout__cdr_deserialize+0x56>
 8010cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf8:	b083      	sub	sp, #12
 8010cfa:	460e      	mov	r6, r1
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	a901      	add	r1, sp, #4
 8010d00:	f000 fbcc 	bl	801149c <ucdr_deserialize_uint32_t>
 8010d04:	9b01      	ldr	r3, [sp, #4]
 8010d06:	68b2      	ldr	r2, [r6, #8]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d31b      	bcc.n	8010d44 <_MultiArrayLayout__cdr_deserialize+0x50>
 8010d0c:	6073      	str	r3, [r6, #4]
 8010d0e:	b18b      	cbz	r3, 8010d34 <_MultiArrayLayout__cdr_deserialize+0x40>
 8010d10:	2400      	movs	r4, #0
 8010d12:	4625      	mov	r5, r4
 8010d14:	e002      	b.n	8010d1c <_MultiArrayLayout__cdr_deserialize+0x28>
 8010d16:	9b01      	ldr	r3, [sp, #4]
 8010d18:	429d      	cmp	r5, r3
 8010d1a:	d20b      	bcs.n	8010d34 <_MultiArrayLayout__cdr_deserialize+0x40>
 8010d1c:	f009 f89e 	bl	8019e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010d20:	6831      	ldr	r1, [r6, #0]
 8010d22:	6843      	ldr	r3, [r0, #4]
 8010d24:	4638      	mov	r0, r7
 8010d26:	4421      	add	r1, r4
 8010d28:	3501      	adds	r5, #1
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	3414      	adds	r4, #20
 8010d2e:	4798      	blx	r3
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d1f0      	bne.n	8010d16 <_MultiArrayLayout__cdr_deserialize+0x22>
 8010d34:	f106 010c 	add.w	r1, r6, #12
 8010d38:	4638      	mov	r0, r7
 8010d3a:	b003      	add	sp, #12
 8010d3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d40:	f000 bbac 	b.w	801149c <ucdr_deserialize_uint32_t>
 8010d44:	2000      	movs	r0, #0
 8010d46:	b003      	add	sp, #12
 8010d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop

08010d50 <_MultiArrayLayout__cdr_serialize>:
 8010d50:	b308      	cbz	r0, 8010d96 <_MultiArrayLayout__cdr_serialize+0x46>
 8010d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d54:	6847      	ldr	r7, [r0, #4]
 8010d56:	4605      	mov	r5, r0
 8010d58:	460e      	mov	r6, r1
 8010d5a:	4608      	mov	r0, r1
 8010d5c:	4639      	mov	r1, r7
 8010d5e:	f000 fa6d 	bl	801123c <ucdr_serialize_uint32_t>
 8010d62:	b190      	cbz	r0, 8010d8a <_MultiArrayLayout__cdr_serialize+0x3a>
 8010d64:	b18f      	cbz	r7, 8010d8a <_MultiArrayLayout__cdr_serialize+0x3a>
 8010d66:	2400      	movs	r4, #0
 8010d68:	e001      	b.n	8010d6e <_MultiArrayLayout__cdr_serialize+0x1e>
 8010d6a:	42a7      	cmp	r7, r4
 8010d6c:	d00d      	beq.n	8010d8a <_MultiArrayLayout__cdr_serialize+0x3a>
 8010d6e:	f009 f875 	bl	8019e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010d72:	682a      	ldr	r2, [r5, #0]
 8010d74:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8010d78:	6843      	ldr	r3, [r0, #4]
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	3401      	adds	r4, #1
 8010d7e:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	4798      	blx	r3
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d1ef      	bne.n	8010d6a <_MultiArrayLayout__cdr_serialize+0x1a>
 8010d8a:	68e9      	ldr	r1, [r5, #12]
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d92:	f000 ba53 	b.w	801123c <ucdr_serialize_uint32_t>
 8010d96:	4770      	bx	lr

08010d98 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010d98:	b508      	push	{r3, lr}
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	4608      	mov	r0, r1
 8010da0:	2104      	movs	r1, #4
 8010da2:	701a      	strb	r2, [r3, #0]
 8010da4:	f001 f984 	bl	80120b0 <ucdr_alignment>
 8010da8:	3004      	adds	r0, #4
 8010daa:	bd08      	pop	{r3, pc}

08010dac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010dac:	4800      	ldr	r0, [pc, #0]	@ (8010db0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8010dae:	4770      	bx	lr
 8010db0:	2400018c 	.word	0x2400018c

08010db4 <ucdr_serialize_bool>:
 8010db4:	b538      	push	{r3, r4, r5, lr}
 8010db6:	460d      	mov	r5, r1
 8010db8:	2101      	movs	r1, #1
 8010dba:	4604      	mov	r4, r0
 8010dbc:	f001 f92c 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010dc0:	b148      	cbz	r0, 8010dd6 <ucdr_serialize_bool+0x22>
 8010dc2:	68a3      	ldr	r3, [r4, #8]
 8010dc4:	2101      	movs	r1, #1
 8010dc6:	701d      	strb	r5, [r3, #0]
 8010dc8:	68a2      	ldr	r2, [r4, #8]
 8010dca:	6923      	ldr	r3, [r4, #16]
 8010dcc:	440a      	add	r2, r1
 8010dce:	7561      	strb	r1, [r4, #21]
 8010dd0:	440b      	add	r3, r1
 8010dd2:	60a2      	str	r2, [r4, #8]
 8010dd4:	6123      	str	r3, [r4, #16]
 8010dd6:	7da0      	ldrb	r0, [r4, #22]
 8010dd8:	f080 0001 	eor.w	r0, r0, #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <ucdr_deserialize_bool>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	460d      	mov	r5, r1
 8010de4:	2101      	movs	r1, #1
 8010de6:	4604      	mov	r4, r0
 8010de8:	f001 f916 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010dec:	b160      	cbz	r0, 8010e08 <ucdr_deserialize_bool+0x28>
 8010dee:	68a2      	ldr	r2, [r4, #8]
 8010df0:	2101      	movs	r1, #1
 8010df2:	6923      	ldr	r3, [r4, #16]
 8010df4:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010df8:	440b      	add	r3, r1
 8010dfa:	3800      	subs	r0, #0
 8010dfc:	bf18      	it	ne
 8010dfe:	2001      	movne	r0, #1
 8010e00:	7028      	strb	r0, [r5, #0]
 8010e02:	60a2      	str	r2, [r4, #8]
 8010e04:	6123      	str	r3, [r4, #16]
 8010e06:	7561      	strb	r1, [r4, #21]
 8010e08:	7da0      	ldrb	r0, [r4, #22]
 8010e0a:	f080 0001 	eor.w	r0, r0, #1
 8010e0e:	bd38      	pop	{r3, r4, r5, pc}

08010e10 <ucdr_serialize_uint8_t>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	460d      	mov	r5, r1
 8010e14:	2101      	movs	r1, #1
 8010e16:	4604      	mov	r4, r0
 8010e18:	f001 f8fe 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010e1c:	b148      	cbz	r0, 8010e32 <ucdr_serialize_uint8_t+0x22>
 8010e1e:	68a3      	ldr	r3, [r4, #8]
 8010e20:	2101      	movs	r1, #1
 8010e22:	701d      	strb	r5, [r3, #0]
 8010e24:	68a2      	ldr	r2, [r4, #8]
 8010e26:	6923      	ldr	r3, [r4, #16]
 8010e28:	440a      	add	r2, r1
 8010e2a:	7561      	strb	r1, [r4, #21]
 8010e2c:	440b      	add	r3, r1
 8010e2e:	60a2      	str	r2, [r4, #8]
 8010e30:	6123      	str	r3, [r4, #16]
 8010e32:	7da0      	ldrb	r0, [r4, #22]
 8010e34:	f080 0001 	eor.w	r0, r0, #1
 8010e38:	bd38      	pop	{r3, r4, r5, pc}
 8010e3a:	bf00      	nop

08010e3c <ucdr_deserialize_uint8_t>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	460d      	mov	r5, r1
 8010e40:	2101      	movs	r1, #1
 8010e42:	4604      	mov	r4, r0
 8010e44:	f001 f8e8 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010e48:	b150      	cbz	r0, 8010e60 <ucdr_deserialize_uint8_t+0x24>
 8010e4a:	68a3      	ldr	r3, [r4, #8]
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	702b      	strb	r3, [r5, #0]
 8010e52:	68a2      	ldr	r2, [r4, #8]
 8010e54:	6923      	ldr	r3, [r4, #16]
 8010e56:	440a      	add	r2, r1
 8010e58:	7561      	strb	r1, [r4, #21]
 8010e5a:	440b      	add	r3, r1
 8010e5c:	60a2      	str	r2, [r4, #8]
 8010e5e:	6123      	str	r3, [r4, #16]
 8010e60:	7da0      	ldrb	r0, [r4, #22]
 8010e62:	f080 0001 	eor.w	r0, r0, #1
 8010e66:	bd38      	pop	{r3, r4, r5, pc}

08010e68 <ucdr_serialize_uint16_t>:
 8010e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	b082      	sub	sp, #8
 8010e70:	4604      	mov	r4, r0
 8010e72:	2102      	movs	r1, #2
 8010e74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010e78:	f001 f922 	bl	80120c0 <ucdr_buffer_alignment>
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	4620      	mov	r0, r4
 8010e80:	7d67      	ldrb	r7, [r4, #21]
 8010e82:	f001 f965 	bl	8012150 <ucdr_advance_buffer>
 8010e86:	2102      	movs	r1, #2
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f001 f8b9 	bl	8012000 <ucdr_check_buffer_available_for>
 8010e8e:	bb78      	cbnz	r0, 8010ef0 <ucdr_serialize_uint16_t+0x88>
 8010e90:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010e94:	42ab      	cmp	r3, r5
 8010e96:	d926      	bls.n	8010ee6 <ucdr_serialize_uint16_t+0x7e>
 8010e98:	1b5e      	subs	r6, r3, r5
 8010e9a:	60a3      	str	r3, [r4, #8]
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f1c6 0802 	rsb	r8, r6, #2
 8010ea4:	4433      	add	r3, r6
 8010ea6:	4641      	mov	r1, r8
 8010ea8:	6123      	str	r3, [r4, #16]
 8010eaa:	f001 f8b5 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d03b      	beq.n	8010f2a <ucdr_serialize_uint16_t+0xc2>
 8010eb2:	7d23      	ldrb	r3, [r4, #20]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d04a      	beq.n	8010f4e <ucdr_serialize_uint16_t+0xe6>
 8010eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ebc:	702b      	strb	r3, [r5, #0]
 8010ebe:	2e00      	cmp	r6, #0
 8010ec0:	d040      	beq.n	8010f44 <ucdr_serialize_uint16_t+0xdc>
 8010ec2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010ec6:	706b      	strb	r3, [r5, #1]
 8010ec8:	6923      	ldr	r3, [r4, #16]
 8010eca:	2102      	movs	r1, #2
 8010ecc:	68a2      	ldr	r2, [r4, #8]
 8010ece:	3302      	adds	r3, #2
 8010ed0:	7da0      	ldrb	r0, [r4, #22]
 8010ed2:	4442      	add	r2, r8
 8010ed4:	7561      	strb	r1, [r4, #21]
 8010ed6:	1b9e      	subs	r6, r3, r6
 8010ed8:	f080 0001 	eor.w	r0, r0, #1
 8010edc:	60a2      	str	r2, [r4, #8]
 8010ede:	6126      	str	r6, [r4, #16]
 8010ee0:	b002      	add	sp, #8
 8010ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee6:	2102      	movs	r1, #2
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f001 f895 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010eee:	b190      	cbz	r0, 8010f16 <ucdr_serialize_uint16_t+0xae>
 8010ef0:	7d23      	ldrb	r3, [r4, #20]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	68a3      	ldr	r3, [r4, #8]
 8010ef6:	d014      	beq.n	8010f22 <ucdr_serialize_uint16_t+0xba>
 8010ef8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010efc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f00:	7019      	strb	r1, [r3, #0]
 8010f02:	68a3      	ldr	r3, [r4, #8]
 8010f04:	705a      	strb	r2, [r3, #1]
 8010f06:	2102      	movs	r1, #2
 8010f08:	68a2      	ldr	r2, [r4, #8]
 8010f0a:	6923      	ldr	r3, [r4, #16]
 8010f0c:	440a      	add	r2, r1
 8010f0e:	7561      	strb	r1, [r4, #21]
 8010f10:	440b      	add	r3, r1
 8010f12:	60a2      	str	r2, [r4, #8]
 8010f14:	6123      	str	r3, [r4, #16]
 8010f16:	7da0      	ldrb	r0, [r4, #22]
 8010f18:	f080 0001 	eor.w	r0, r0, #1
 8010f1c:	b002      	add	sp, #8
 8010f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010f26:	801a      	strh	r2, [r3, #0]
 8010f28:	e7ed      	b.n	8010f06 <ucdr_serialize_uint16_t+0x9e>
 8010f2a:	68a2      	ldr	r2, [r4, #8]
 8010f2c:	6923      	ldr	r3, [r4, #16]
 8010f2e:	7da0      	ldrb	r0, [r4, #22]
 8010f30:	1b92      	subs	r2, r2, r6
 8010f32:	1b9b      	subs	r3, r3, r6
 8010f34:	7567      	strb	r7, [r4, #21]
 8010f36:	f080 0001 	eor.w	r0, r0, #1
 8010f3a:	60a2      	str	r2, [r4, #8]
 8010f3c:	6123      	str	r3, [r4, #16]
 8010f3e:	b002      	add	sp, #8
 8010f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f44:	68a3      	ldr	r3, [r4, #8]
 8010f46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f4a:	701a      	strb	r2, [r3, #0]
 8010f4c:	e7bc      	b.n	8010ec8 <ucdr_serialize_uint16_t+0x60>
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f10d 0506 	add.w	r5, sp, #6
 8010f54:	4632      	mov	r2, r6
 8010f56:	4629      	mov	r1, r5
 8010f58:	f00b f897 	bl	801c08a <memcpy>
 8010f5c:	4642      	mov	r2, r8
 8010f5e:	19a9      	adds	r1, r5, r6
 8010f60:	68a0      	ldr	r0, [r4, #8]
 8010f62:	f00b f892 	bl	801c08a <memcpy>
 8010f66:	e7af      	b.n	8010ec8 <ucdr_serialize_uint16_t+0x60>

08010f68 <ucdr_serialize_endian_uint16_t>:
 8010f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	b083      	sub	sp, #12
 8010f70:	460d      	mov	r5, r1
 8010f72:	2102      	movs	r1, #2
 8010f74:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010f78:	f001 f8a2 	bl	80120c0 <ucdr_buffer_alignment>
 8010f7c:	4601      	mov	r1, r0
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f84:	f001 f8e4 	bl	8012150 <ucdr_advance_buffer>
 8010f88:	2102      	movs	r1, #2
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f001 f838 	bl	8012000 <ucdr_check_buffer_available_for>
 8010f90:	bb70      	cbnz	r0, 8010ff0 <ucdr_serialize_endian_uint16_t+0x88>
 8010f92:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010f96:	42be      	cmp	r6, r7
 8010f98:	d925      	bls.n	8010fe6 <ucdr_serialize_endian_uint16_t+0x7e>
 8010f9a:	6923      	ldr	r3, [r4, #16]
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	60a6      	str	r6, [r4, #8]
 8010fa0:	1bf6      	subs	r6, r6, r7
 8010fa2:	4433      	add	r3, r6
 8010fa4:	f1c6 0902 	rsb	r9, r6, #2
 8010fa8:	6123      	str	r3, [r4, #16]
 8010faa:	4649      	mov	r1, r9
 8010fac:	f001 f834 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	d039      	beq.n	8011028 <ucdr_serialize_endian_uint16_t+0xc0>
 8010fb4:	2d01      	cmp	r5, #1
 8010fb6:	d04a      	beq.n	801104e <ucdr_serialize_endian_uint16_t+0xe6>
 8010fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010fbc:	703b      	strb	r3, [r7, #0]
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	d040      	beq.n	8011044 <ucdr_serialize_endian_uint16_t+0xdc>
 8010fc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010fc6:	707b      	strb	r3, [r7, #1]
 8010fc8:	6923      	ldr	r3, [r4, #16]
 8010fca:	2102      	movs	r1, #2
 8010fcc:	68a2      	ldr	r2, [r4, #8]
 8010fce:	7da0      	ldrb	r0, [r4, #22]
 8010fd0:	3302      	adds	r3, #2
 8010fd2:	444a      	add	r2, r9
 8010fd4:	7561      	strb	r1, [r4, #21]
 8010fd6:	1b9b      	subs	r3, r3, r6
 8010fd8:	f080 0001 	eor.w	r0, r0, #1
 8010fdc:	60a2      	str	r2, [r4, #8]
 8010fde:	6123      	str	r3, [r4, #16]
 8010fe0:	b003      	add	sp, #12
 8010fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fe6:	2102      	movs	r1, #2
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f001 f815 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8010fee:	b188      	cbz	r0, 8011014 <ucdr_serialize_endian_uint16_t+0xac>
 8010ff0:	2d01      	cmp	r5, #1
 8010ff2:	68a3      	ldr	r3, [r4, #8]
 8010ff4:	d014      	beq.n	8011020 <ucdr_serialize_endian_uint16_t+0xb8>
 8010ff6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010ffa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ffe:	7019      	strb	r1, [r3, #0]
 8011000:	68a3      	ldr	r3, [r4, #8]
 8011002:	705a      	strb	r2, [r3, #1]
 8011004:	2102      	movs	r1, #2
 8011006:	68a2      	ldr	r2, [r4, #8]
 8011008:	6923      	ldr	r3, [r4, #16]
 801100a:	440a      	add	r2, r1
 801100c:	7561      	strb	r1, [r4, #21]
 801100e:	440b      	add	r3, r1
 8011010:	60a2      	str	r2, [r4, #8]
 8011012:	6123      	str	r3, [r4, #16]
 8011014:	7da0      	ldrb	r0, [r4, #22]
 8011016:	f080 0001 	eor.w	r0, r0, #1
 801101a:	b003      	add	sp, #12
 801101c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011020:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011024:	801a      	strh	r2, [r3, #0]
 8011026:	e7ed      	b.n	8011004 <ucdr_serialize_endian_uint16_t+0x9c>
 8011028:	68a2      	ldr	r2, [r4, #8]
 801102a:	6923      	ldr	r3, [r4, #16]
 801102c:	7da0      	ldrb	r0, [r4, #22]
 801102e:	1b92      	subs	r2, r2, r6
 8011030:	1b9b      	subs	r3, r3, r6
 8011032:	f884 8015 	strb.w	r8, [r4, #21]
 8011036:	f080 0001 	eor.w	r0, r0, #1
 801103a:	60a2      	str	r2, [r4, #8]
 801103c:	6123      	str	r3, [r4, #16]
 801103e:	b003      	add	sp, #12
 8011040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011044:	68a3      	ldr	r3, [r4, #8]
 8011046:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801104a:	701a      	strb	r2, [r3, #0]
 801104c:	e7bc      	b.n	8010fc8 <ucdr_serialize_endian_uint16_t+0x60>
 801104e:	f10d 0506 	add.w	r5, sp, #6
 8011052:	4632      	mov	r2, r6
 8011054:	4638      	mov	r0, r7
 8011056:	4629      	mov	r1, r5
 8011058:	f00b f817 	bl	801c08a <memcpy>
 801105c:	464a      	mov	r2, r9
 801105e:	19a9      	adds	r1, r5, r6
 8011060:	68a0      	ldr	r0, [r4, #8]
 8011062:	f00b f812 	bl	801c08a <memcpy>
 8011066:	e7af      	b.n	8010fc8 <ucdr_serialize_endian_uint16_t+0x60>

08011068 <ucdr_deserialize_uint16_t>:
 8011068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801106c:	4604      	mov	r4, r0
 801106e:	460d      	mov	r5, r1
 8011070:	2102      	movs	r1, #2
 8011072:	f001 f825 	bl	80120c0 <ucdr_buffer_alignment>
 8011076:	4601      	mov	r1, r0
 8011078:	4620      	mov	r0, r4
 801107a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801107e:	f001 f867 	bl	8012150 <ucdr_advance_buffer>
 8011082:	2102      	movs	r1, #2
 8011084:	4620      	mov	r0, r4
 8011086:	f000 ffbb 	bl	8012000 <ucdr_check_buffer_available_for>
 801108a:	bb60      	cbnz	r0, 80110e6 <ucdr_deserialize_uint16_t+0x7e>
 801108c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011090:	42be      	cmp	r6, r7
 8011092:	d923      	bls.n	80110dc <ucdr_deserialize_uint16_t+0x74>
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	4620      	mov	r0, r4
 8011098:	60a6      	str	r6, [r4, #8]
 801109a:	1bf6      	subs	r6, r6, r7
 801109c:	4433      	add	r3, r6
 801109e:	f1c6 0902 	rsb	r9, r6, #2
 80110a2:	6123      	str	r3, [r4, #16]
 80110a4:	4649      	mov	r1, r9
 80110a6:	f000 ffb7 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80110aa:	2800      	cmp	r0, #0
 80110ac:	d034      	beq.n	8011118 <ucdr_deserialize_uint16_t+0xb0>
 80110ae:	7d23      	ldrb	r3, [r4, #20]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d042      	beq.n	801113a <ucdr_deserialize_uint16_t+0xd2>
 80110b4:	787b      	ldrb	r3, [r7, #1]
 80110b6:	702b      	strb	r3, [r5, #0]
 80110b8:	2e00      	cmp	r6, #0
 80110ba:	d03a      	beq.n	8011132 <ucdr_deserialize_uint16_t+0xca>
 80110bc:	783b      	ldrb	r3, [r7, #0]
 80110be:	706b      	strb	r3, [r5, #1]
 80110c0:	6923      	ldr	r3, [r4, #16]
 80110c2:	2102      	movs	r1, #2
 80110c4:	68a2      	ldr	r2, [r4, #8]
 80110c6:	3302      	adds	r3, #2
 80110c8:	7da0      	ldrb	r0, [r4, #22]
 80110ca:	444a      	add	r2, r9
 80110cc:	7561      	strb	r1, [r4, #21]
 80110ce:	1b9b      	subs	r3, r3, r6
 80110d0:	f080 0001 	eor.w	r0, r0, #1
 80110d4:	60a2      	str	r2, [r4, #8]
 80110d6:	6123      	str	r3, [r4, #16]
 80110d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110dc:	2102      	movs	r1, #2
 80110de:	4620      	mov	r0, r4
 80110e0:	f000 ff9a 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80110e4:	b180      	cbz	r0, 8011108 <ucdr_deserialize_uint16_t+0xa0>
 80110e6:	7d23      	ldrb	r3, [r4, #20]
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	68a3      	ldr	r3, [r4, #8]
 80110ec:	d011      	beq.n	8011112 <ucdr_deserialize_uint16_t+0xaa>
 80110ee:	785b      	ldrb	r3, [r3, #1]
 80110f0:	702b      	strb	r3, [r5, #0]
 80110f2:	68a3      	ldr	r3, [r4, #8]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	706b      	strb	r3, [r5, #1]
 80110f8:	2102      	movs	r1, #2
 80110fa:	68a2      	ldr	r2, [r4, #8]
 80110fc:	6923      	ldr	r3, [r4, #16]
 80110fe:	440a      	add	r2, r1
 8011100:	7561      	strb	r1, [r4, #21]
 8011102:	440b      	add	r3, r1
 8011104:	60a2      	str	r2, [r4, #8]
 8011106:	6123      	str	r3, [r4, #16]
 8011108:	7da0      	ldrb	r0, [r4, #22]
 801110a:	f080 0001 	eor.w	r0, r0, #1
 801110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	802b      	strh	r3, [r5, #0]
 8011116:	e7ef      	b.n	80110f8 <ucdr_deserialize_uint16_t+0x90>
 8011118:	68a2      	ldr	r2, [r4, #8]
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	1b92      	subs	r2, r2, r6
 801111e:	7da0      	ldrb	r0, [r4, #22]
 8011120:	1b9b      	subs	r3, r3, r6
 8011122:	f884 8015 	strb.w	r8, [r4, #21]
 8011126:	f080 0001 	eor.w	r0, r0, #1
 801112a:	60a2      	str	r2, [r4, #8]
 801112c:	6123      	str	r3, [r4, #16]
 801112e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011132:	68a3      	ldr	r3, [r4, #8]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	706b      	strb	r3, [r5, #1]
 8011138:	e7c2      	b.n	80110c0 <ucdr_deserialize_uint16_t+0x58>
 801113a:	4639      	mov	r1, r7
 801113c:	4632      	mov	r2, r6
 801113e:	4628      	mov	r0, r5
 8011140:	f00a ffa3 	bl	801c08a <memcpy>
 8011144:	464a      	mov	r2, r9
 8011146:	19a8      	adds	r0, r5, r6
 8011148:	68a1      	ldr	r1, [r4, #8]
 801114a:	f00a ff9e 	bl	801c08a <memcpy>
 801114e:	e7b7      	b.n	80110c0 <ucdr_deserialize_uint16_t+0x58>

08011150 <ucdr_deserialize_endian_uint16_t>:
 8011150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011154:	4604      	mov	r4, r0
 8011156:	460e      	mov	r6, r1
 8011158:	2102      	movs	r1, #2
 801115a:	4615      	mov	r5, r2
 801115c:	f000 ffb0 	bl	80120c0 <ucdr_buffer_alignment>
 8011160:	4601      	mov	r1, r0
 8011162:	4620      	mov	r0, r4
 8011164:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011168:	f000 fff2 	bl	8012150 <ucdr_advance_buffer>
 801116c:	2102      	movs	r1, #2
 801116e:	4620      	mov	r0, r4
 8011170:	f000 ff46 	bl	8012000 <ucdr_check_buffer_available_for>
 8011174:	bb70      	cbnz	r0, 80111d4 <ucdr_deserialize_endian_uint16_t+0x84>
 8011176:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801117a:	454f      	cmp	r7, r9
 801117c:	d925      	bls.n	80111ca <ucdr_deserialize_endian_uint16_t+0x7a>
 801117e:	6923      	ldr	r3, [r4, #16]
 8011180:	4620      	mov	r0, r4
 8011182:	60a7      	str	r7, [r4, #8]
 8011184:	eba7 0709 	sub.w	r7, r7, r9
 8011188:	443b      	add	r3, r7
 801118a:	f1c7 0a02 	rsb	sl, r7, #2
 801118e:	6123      	str	r3, [r4, #16]
 8011190:	4651      	mov	r1, sl
 8011192:	f000 ff41 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011196:	2800      	cmp	r0, #0
 8011198:	d034      	beq.n	8011204 <ucdr_deserialize_endian_uint16_t+0xb4>
 801119a:	2e01      	cmp	r6, #1
 801119c:	d043      	beq.n	8011226 <ucdr_deserialize_endian_uint16_t+0xd6>
 801119e:	f899 3001 	ldrb.w	r3, [r9, #1]
 80111a2:	702b      	strb	r3, [r5, #0]
 80111a4:	2f00      	cmp	r7, #0
 80111a6:	d03a      	beq.n	801121e <ucdr_deserialize_endian_uint16_t+0xce>
 80111a8:	f899 3000 	ldrb.w	r3, [r9]
 80111ac:	706b      	strb	r3, [r5, #1]
 80111ae:	6923      	ldr	r3, [r4, #16]
 80111b0:	2102      	movs	r1, #2
 80111b2:	68a2      	ldr	r2, [r4, #8]
 80111b4:	3302      	adds	r3, #2
 80111b6:	7da0      	ldrb	r0, [r4, #22]
 80111b8:	4452      	add	r2, sl
 80111ba:	7561      	strb	r1, [r4, #21]
 80111bc:	1bdb      	subs	r3, r3, r7
 80111be:	f080 0001 	eor.w	r0, r0, #1
 80111c2:	60a2      	str	r2, [r4, #8]
 80111c4:	6123      	str	r3, [r4, #16]
 80111c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ca:	2102      	movs	r1, #2
 80111cc:	4620      	mov	r0, r4
 80111ce:	f000 ff23 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80111d2:	b178      	cbz	r0, 80111f4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80111d4:	2e01      	cmp	r6, #1
 80111d6:	68a3      	ldr	r3, [r4, #8]
 80111d8:	d011      	beq.n	80111fe <ucdr_deserialize_endian_uint16_t+0xae>
 80111da:	785b      	ldrb	r3, [r3, #1]
 80111dc:	702b      	strb	r3, [r5, #0]
 80111de:	68a3      	ldr	r3, [r4, #8]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	706b      	strb	r3, [r5, #1]
 80111e4:	2102      	movs	r1, #2
 80111e6:	68a2      	ldr	r2, [r4, #8]
 80111e8:	6923      	ldr	r3, [r4, #16]
 80111ea:	440a      	add	r2, r1
 80111ec:	7561      	strb	r1, [r4, #21]
 80111ee:	440b      	add	r3, r1
 80111f0:	60a2      	str	r2, [r4, #8]
 80111f2:	6123      	str	r3, [r4, #16]
 80111f4:	7da0      	ldrb	r0, [r4, #22]
 80111f6:	f080 0001 	eor.w	r0, r0, #1
 80111fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	802b      	strh	r3, [r5, #0]
 8011202:	e7ef      	b.n	80111e4 <ucdr_deserialize_endian_uint16_t+0x94>
 8011204:	68a2      	ldr	r2, [r4, #8]
 8011206:	6923      	ldr	r3, [r4, #16]
 8011208:	1bd2      	subs	r2, r2, r7
 801120a:	7da0      	ldrb	r0, [r4, #22]
 801120c:	1bdb      	subs	r3, r3, r7
 801120e:	f884 8015 	strb.w	r8, [r4, #21]
 8011212:	f080 0001 	eor.w	r0, r0, #1
 8011216:	60a2      	str	r2, [r4, #8]
 8011218:	6123      	str	r3, [r4, #16]
 801121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801121e:	68a3      	ldr	r3, [r4, #8]
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	706b      	strb	r3, [r5, #1]
 8011224:	e7c3      	b.n	80111ae <ucdr_deserialize_endian_uint16_t+0x5e>
 8011226:	4649      	mov	r1, r9
 8011228:	463a      	mov	r2, r7
 801122a:	4628      	mov	r0, r5
 801122c:	f00a ff2d 	bl	801c08a <memcpy>
 8011230:	4652      	mov	r2, sl
 8011232:	19e8      	adds	r0, r5, r7
 8011234:	68a1      	ldr	r1, [r4, #8]
 8011236:	f00a ff28 	bl	801c08a <memcpy>
 801123a:	e7b8      	b.n	80111ae <ucdr_deserialize_endian_uint16_t+0x5e>

0801123c <ucdr_serialize_uint32_t>:
 801123c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011240:	b082      	sub	sp, #8
 8011242:	4604      	mov	r4, r0
 8011244:	9101      	str	r1, [sp, #4]
 8011246:	2104      	movs	r1, #4
 8011248:	f000 ff3a 	bl	80120c0 <ucdr_buffer_alignment>
 801124c:	4601      	mov	r1, r0
 801124e:	4620      	mov	r0, r4
 8011250:	7d67      	ldrb	r7, [r4, #21]
 8011252:	f000 ff7d 	bl	8012150 <ucdr_advance_buffer>
 8011256:	2104      	movs	r1, #4
 8011258:	4620      	mov	r0, r4
 801125a:	f000 fed1 	bl	8012000 <ucdr_check_buffer_available_for>
 801125e:	2800      	cmp	r0, #0
 8011260:	d139      	bne.n	80112d6 <ucdr_serialize_uint32_t+0x9a>
 8011262:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011266:	42ab      	cmp	r3, r5
 8011268:	d930      	bls.n	80112cc <ucdr_serialize_uint32_t+0x90>
 801126a:	1b5e      	subs	r6, r3, r5
 801126c:	60a3      	str	r3, [r4, #8]
 801126e:	6923      	ldr	r3, [r4, #16]
 8011270:	4620      	mov	r0, r4
 8011272:	f1c6 0804 	rsb	r8, r6, #4
 8011276:	4433      	add	r3, r6
 8011278:	4641      	mov	r1, r8
 801127a:	6123      	str	r3, [r4, #16]
 801127c:	f000 fecc 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011280:	2800      	cmp	r0, #0
 8011282:	d04c      	beq.n	801131e <ucdr_serialize_uint32_t+0xe2>
 8011284:	7d23      	ldrb	r3, [r4, #20]
 8011286:	2b01      	cmp	r3, #1
 8011288:	d063      	beq.n	8011352 <ucdr_serialize_uint32_t+0x116>
 801128a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801128e:	702b      	strb	r3, [r5, #0]
 8011290:	2e00      	cmp	r6, #0
 8011292:	d051      	beq.n	8011338 <ucdr_serialize_uint32_t+0xfc>
 8011294:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011298:	2e01      	cmp	r6, #1
 801129a:	706b      	strb	r3, [r5, #1]
 801129c:	d050      	beq.n	8011340 <ucdr_serialize_uint32_t+0x104>
 801129e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80112a2:	2e02      	cmp	r6, #2
 80112a4:	70ab      	strb	r3, [r5, #2]
 80112a6:	d04f      	beq.n	8011348 <ucdr_serialize_uint32_t+0x10c>
 80112a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112ac:	70eb      	strb	r3, [r5, #3]
 80112ae:	6923      	ldr	r3, [r4, #16]
 80112b0:	2104      	movs	r1, #4
 80112b2:	68a2      	ldr	r2, [r4, #8]
 80112b4:	3304      	adds	r3, #4
 80112b6:	7da0      	ldrb	r0, [r4, #22]
 80112b8:	4442      	add	r2, r8
 80112ba:	7561      	strb	r1, [r4, #21]
 80112bc:	1b9e      	subs	r6, r3, r6
 80112be:	f080 0001 	eor.w	r0, r0, #1
 80112c2:	60a2      	str	r2, [r4, #8]
 80112c4:	6126      	str	r6, [r4, #16]
 80112c6:	b002      	add	sp, #8
 80112c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112cc:	2104      	movs	r1, #4
 80112ce:	4620      	mov	r0, r4
 80112d0:	f000 fea2 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80112d4:	b1d0      	cbz	r0, 801130c <ucdr_serialize_uint32_t+0xd0>
 80112d6:	7d23      	ldrb	r3, [r4, #20]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	68a3      	ldr	r3, [r4, #8]
 80112dc:	d01c      	beq.n	8011318 <ucdr_serialize_uint32_t+0xdc>
 80112de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80112e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80112ea:	7018      	strb	r0, [r3, #0]
 80112ec:	68a3      	ldr	r3, [r4, #8]
 80112ee:	705a      	strb	r2, [r3, #1]
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80112f6:	7099      	strb	r1, [r3, #2]
 80112f8:	68a3      	ldr	r3, [r4, #8]
 80112fa:	70da      	strb	r2, [r3, #3]
 80112fc:	2104      	movs	r1, #4
 80112fe:	68a2      	ldr	r2, [r4, #8]
 8011300:	6923      	ldr	r3, [r4, #16]
 8011302:	440a      	add	r2, r1
 8011304:	7561      	strb	r1, [r4, #21]
 8011306:	440b      	add	r3, r1
 8011308:	60a2      	str	r2, [r4, #8]
 801130a:	6123      	str	r3, [r4, #16]
 801130c:	7da0      	ldrb	r0, [r4, #22]
 801130e:	f080 0001 	eor.w	r0, r0, #1
 8011312:	b002      	add	sp, #8
 8011314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011318:	9a01      	ldr	r2, [sp, #4]
 801131a:	601a      	str	r2, [r3, #0]
 801131c:	e7ee      	b.n	80112fc <ucdr_serialize_uint32_t+0xc0>
 801131e:	68a2      	ldr	r2, [r4, #8]
 8011320:	6923      	ldr	r3, [r4, #16]
 8011322:	7da0      	ldrb	r0, [r4, #22]
 8011324:	1b92      	subs	r2, r2, r6
 8011326:	1b9b      	subs	r3, r3, r6
 8011328:	7567      	strb	r7, [r4, #21]
 801132a:	f080 0001 	eor.w	r0, r0, #1
 801132e:	60a2      	str	r2, [r4, #8]
 8011330:	6123      	str	r3, [r4, #16]
 8011332:	b002      	add	sp, #8
 8011334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011338:	68a3      	ldr	r3, [r4, #8]
 801133a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801133e:	701a      	strb	r2, [r3, #0]
 8011340:	68a3      	ldr	r3, [r4, #8]
 8011342:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011346:	701a      	strb	r2, [r3, #0]
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801134e:	701a      	strb	r2, [r3, #0]
 8011350:	e7ad      	b.n	80112ae <ucdr_serialize_uint32_t+0x72>
 8011352:	4628      	mov	r0, r5
 8011354:	ad01      	add	r5, sp, #4
 8011356:	4632      	mov	r2, r6
 8011358:	4629      	mov	r1, r5
 801135a:	f00a fe96 	bl	801c08a <memcpy>
 801135e:	4642      	mov	r2, r8
 8011360:	19a9      	adds	r1, r5, r6
 8011362:	68a0      	ldr	r0, [r4, #8]
 8011364:	f00a fe91 	bl	801c08a <memcpy>
 8011368:	e7a1      	b.n	80112ae <ucdr_serialize_uint32_t+0x72>
 801136a:	bf00      	nop

0801136c <ucdr_serialize_endian_uint32_t>:
 801136c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011370:	4604      	mov	r4, r0
 8011372:	b083      	sub	sp, #12
 8011374:	460d      	mov	r5, r1
 8011376:	2104      	movs	r1, #4
 8011378:	9201      	str	r2, [sp, #4]
 801137a:	f000 fea1 	bl	80120c0 <ucdr_buffer_alignment>
 801137e:	4601      	mov	r1, r0
 8011380:	4620      	mov	r0, r4
 8011382:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011386:	f000 fee3 	bl	8012150 <ucdr_advance_buffer>
 801138a:	2104      	movs	r1, #4
 801138c:	4620      	mov	r0, r4
 801138e:	f000 fe37 	bl	8012000 <ucdr_check_buffer_available_for>
 8011392:	2800      	cmp	r0, #0
 8011394:	d138      	bne.n	8011408 <ucdr_serialize_endian_uint32_t+0x9c>
 8011396:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801139a:	42b7      	cmp	r7, r6
 801139c:	d92f      	bls.n	80113fe <ucdr_serialize_endian_uint32_t+0x92>
 801139e:	6923      	ldr	r3, [r4, #16]
 80113a0:	4620      	mov	r0, r4
 80113a2:	60a7      	str	r7, [r4, #8]
 80113a4:	1bbf      	subs	r7, r7, r6
 80113a6:	443b      	add	r3, r7
 80113a8:	f1c7 0904 	rsb	r9, r7, #4
 80113ac:	6123      	str	r3, [r4, #16]
 80113ae:	4649      	mov	r1, r9
 80113b0:	f000 fe32 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d04a      	beq.n	801144e <ucdr_serialize_endian_uint32_t+0xe2>
 80113b8:	2d01      	cmp	r5, #1
 80113ba:	d063      	beq.n	8011484 <ucdr_serialize_endian_uint32_t+0x118>
 80113bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113c0:	7033      	strb	r3, [r6, #0]
 80113c2:	2f00      	cmp	r7, #0
 80113c4:	d051      	beq.n	801146a <ucdr_serialize_endian_uint32_t+0xfe>
 80113c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113ca:	2f01      	cmp	r7, #1
 80113cc:	7073      	strb	r3, [r6, #1]
 80113ce:	d050      	beq.n	8011472 <ucdr_serialize_endian_uint32_t+0x106>
 80113d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80113d4:	2f02      	cmp	r7, #2
 80113d6:	70b3      	strb	r3, [r6, #2]
 80113d8:	d04f      	beq.n	801147a <ucdr_serialize_endian_uint32_t+0x10e>
 80113da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80113de:	70f3      	strb	r3, [r6, #3]
 80113e0:	6923      	ldr	r3, [r4, #16]
 80113e2:	2104      	movs	r1, #4
 80113e4:	68a2      	ldr	r2, [r4, #8]
 80113e6:	7da0      	ldrb	r0, [r4, #22]
 80113e8:	3304      	adds	r3, #4
 80113ea:	444a      	add	r2, r9
 80113ec:	7561      	strb	r1, [r4, #21]
 80113ee:	1bdb      	subs	r3, r3, r7
 80113f0:	f080 0001 	eor.w	r0, r0, #1
 80113f4:	60a2      	str	r2, [r4, #8]
 80113f6:	6123      	str	r3, [r4, #16]
 80113f8:	b003      	add	sp, #12
 80113fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113fe:	2104      	movs	r1, #4
 8011400:	4620      	mov	r0, r4
 8011402:	f000 fe09 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011406:	b1c8      	cbz	r0, 801143c <ucdr_serialize_endian_uint32_t+0xd0>
 8011408:	2d01      	cmp	r5, #1
 801140a:	68a3      	ldr	r3, [r4, #8]
 801140c:	d01c      	beq.n	8011448 <ucdr_serialize_endian_uint32_t+0xdc>
 801140e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011412:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011416:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801141a:	7018      	strb	r0, [r3, #0]
 801141c:	68a3      	ldr	r3, [r4, #8]
 801141e:	705a      	strb	r2, [r3, #1]
 8011420:	68a3      	ldr	r3, [r4, #8]
 8011422:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011426:	7099      	strb	r1, [r3, #2]
 8011428:	68a3      	ldr	r3, [r4, #8]
 801142a:	70da      	strb	r2, [r3, #3]
 801142c:	2104      	movs	r1, #4
 801142e:	68a2      	ldr	r2, [r4, #8]
 8011430:	6923      	ldr	r3, [r4, #16]
 8011432:	440a      	add	r2, r1
 8011434:	7561      	strb	r1, [r4, #21]
 8011436:	440b      	add	r3, r1
 8011438:	60a2      	str	r2, [r4, #8]
 801143a:	6123      	str	r3, [r4, #16]
 801143c:	7da0      	ldrb	r0, [r4, #22]
 801143e:	f080 0001 	eor.w	r0, r0, #1
 8011442:	b003      	add	sp, #12
 8011444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011448:	9a01      	ldr	r2, [sp, #4]
 801144a:	601a      	str	r2, [r3, #0]
 801144c:	e7ee      	b.n	801142c <ucdr_serialize_endian_uint32_t+0xc0>
 801144e:	68a2      	ldr	r2, [r4, #8]
 8011450:	6923      	ldr	r3, [r4, #16]
 8011452:	7da0      	ldrb	r0, [r4, #22]
 8011454:	1bd2      	subs	r2, r2, r7
 8011456:	1bdb      	subs	r3, r3, r7
 8011458:	f884 8015 	strb.w	r8, [r4, #21]
 801145c:	f080 0001 	eor.w	r0, r0, #1
 8011460:	60a2      	str	r2, [r4, #8]
 8011462:	6123      	str	r3, [r4, #16]
 8011464:	b003      	add	sp, #12
 8011466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801146a:	68a3      	ldr	r3, [r4, #8]
 801146c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011470:	701a      	strb	r2, [r3, #0]
 8011472:	68a3      	ldr	r3, [r4, #8]
 8011474:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011478:	701a      	strb	r2, [r3, #0]
 801147a:	68a3      	ldr	r3, [r4, #8]
 801147c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011480:	701a      	strb	r2, [r3, #0]
 8011482:	e7ad      	b.n	80113e0 <ucdr_serialize_endian_uint32_t+0x74>
 8011484:	ad01      	add	r5, sp, #4
 8011486:	463a      	mov	r2, r7
 8011488:	4630      	mov	r0, r6
 801148a:	4629      	mov	r1, r5
 801148c:	f00a fdfd 	bl	801c08a <memcpy>
 8011490:	464a      	mov	r2, r9
 8011492:	19e9      	adds	r1, r5, r7
 8011494:	68a0      	ldr	r0, [r4, #8]
 8011496:	f00a fdf8 	bl	801c08a <memcpy>
 801149a:	e7a1      	b.n	80113e0 <ucdr_serialize_endian_uint32_t+0x74>

0801149c <ucdr_deserialize_uint32_t>:
 801149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a0:	4604      	mov	r4, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	2104      	movs	r1, #4
 80114a6:	f000 fe0b 	bl	80120c0 <ucdr_buffer_alignment>
 80114aa:	4601      	mov	r1, r0
 80114ac:	4620      	mov	r0, r4
 80114ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114b2:	f000 fe4d 	bl	8012150 <ucdr_advance_buffer>
 80114b6:	2104      	movs	r1, #4
 80114b8:	4620      	mov	r0, r4
 80114ba:	f000 fda1 	bl	8012000 <ucdr_check_buffer_available_for>
 80114be:	2800      	cmp	r0, #0
 80114c0:	d138      	bne.n	8011534 <ucdr_deserialize_uint32_t+0x98>
 80114c2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80114c6:	42b7      	cmp	r7, r6
 80114c8:	d92f      	bls.n	801152a <ucdr_deserialize_uint32_t+0x8e>
 80114ca:	6923      	ldr	r3, [r4, #16]
 80114cc:	4620      	mov	r0, r4
 80114ce:	60a7      	str	r7, [r4, #8]
 80114d0:	1bbf      	subs	r7, r7, r6
 80114d2:	443b      	add	r3, r7
 80114d4:	f1c7 0904 	rsb	r9, r7, #4
 80114d8:	6123      	str	r3, [r4, #16]
 80114da:	4649      	mov	r1, r9
 80114dc:	f000 fd9c 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d046      	beq.n	8011572 <ucdr_deserialize_uint32_t+0xd6>
 80114e4:	7d23      	ldrb	r3, [r4, #20]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	d05c      	beq.n	80115a4 <ucdr_deserialize_uint32_t+0x108>
 80114ea:	78f3      	ldrb	r3, [r6, #3]
 80114ec:	702b      	strb	r3, [r5, #0]
 80114ee:	2f00      	cmp	r7, #0
 80114f0:	d04c      	beq.n	801158c <ucdr_deserialize_uint32_t+0xf0>
 80114f2:	78b3      	ldrb	r3, [r6, #2]
 80114f4:	2f01      	cmp	r7, #1
 80114f6:	706b      	strb	r3, [r5, #1]
 80114f8:	f105 0302 	add.w	r3, r5, #2
 80114fc:	d04a      	beq.n	8011594 <ucdr_deserialize_uint32_t+0xf8>
 80114fe:	7873      	ldrb	r3, [r6, #1]
 8011500:	2f02      	cmp	r7, #2
 8011502:	70ab      	strb	r3, [r5, #2]
 8011504:	f105 0303 	add.w	r3, r5, #3
 8011508:	d048      	beq.n	801159c <ucdr_deserialize_uint32_t+0x100>
 801150a:	7833      	ldrb	r3, [r6, #0]
 801150c:	70eb      	strb	r3, [r5, #3]
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	2104      	movs	r1, #4
 8011512:	68a2      	ldr	r2, [r4, #8]
 8011514:	3304      	adds	r3, #4
 8011516:	7da0      	ldrb	r0, [r4, #22]
 8011518:	444a      	add	r2, r9
 801151a:	7561      	strb	r1, [r4, #21]
 801151c:	1bdb      	subs	r3, r3, r7
 801151e:	f080 0001 	eor.w	r0, r0, #1
 8011522:	60a2      	str	r2, [r4, #8]
 8011524:	6123      	str	r3, [r4, #16]
 8011526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801152a:	2104      	movs	r1, #4
 801152c:	4620      	mov	r0, r4
 801152e:	f000 fd73 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011532:	b1b0      	cbz	r0, 8011562 <ucdr_deserialize_uint32_t+0xc6>
 8011534:	7d23      	ldrb	r3, [r4, #20]
 8011536:	2b01      	cmp	r3, #1
 8011538:	68a3      	ldr	r3, [r4, #8]
 801153a:	d017      	beq.n	801156c <ucdr_deserialize_uint32_t+0xd0>
 801153c:	78db      	ldrb	r3, [r3, #3]
 801153e:	702b      	strb	r3, [r5, #0]
 8011540:	68a3      	ldr	r3, [r4, #8]
 8011542:	789b      	ldrb	r3, [r3, #2]
 8011544:	706b      	strb	r3, [r5, #1]
 8011546:	68a3      	ldr	r3, [r4, #8]
 8011548:	785b      	ldrb	r3, [r3, #1]
 801154a:	70ab      	strb	r3, [r5, #2]
 801154c:	68a3      	ldr	r3, [r4, #8]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	70eb      	strb	r3, [r5, #3]
 8011552:	2104      	movs	r1, #4
 8011554:	68a2      	ldr	r2, [r4, #8]
 8011556:	6923      	ldr	r3, [r4, #16]
 8011558:	440a      	add	r2, r1
 801155a:	7561      	strb	r1, [r4, #21]
 801155c:	440b      	add	r3, r1
 801155e:	60a2      	str	r2, [r4, #8]
 8011560:	6123      	str	r3, [r4, #16]
 8011562:	7da0      	ldrb	r0, [r4, #22]
 8011564:	f080 0001 	eor.w	r0, r0, #1
 8011568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	602b      	str	r3, [r5, #0]
 8011570:	e7ef      	b.n	8011552 <ucdr_deserialize_uint32_t+0xb6>
 8011572:	68a2      	ldr	r2, [r4, #8]
 8011574:	6923      	ldr	r3, [r4, #16]
 8011576:	1bd2      	subs	r2, r2, r7
 8011578:	7da0      	ldrb	r0, [r4, #22]
 801157a:	1bdb      	subs	r3, r3, r7
 801157c:	f884 8015 	strb.w	r8, [r4, #21]
 8011580:	f080 0001 	eor.w	r0, r0, #1
 8011584:	60a2      	str	r2, [r4, #8]
 8011586:	6123      	str	r3, [r4, #16]
 8011588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801158c:	68a3      	ldr	r3, [r4, #8]
 801158e:	789b      	ldrb	r3, [r3, #2]
 8011590:	706b      	strb	r3, [r5, #1]
 8011592:	1cab      	adds	r3, r5, #2
 8011594:	68a2      	ldr	r2, [r4, #8]
 8011596:	7852      	ldrb	r2, [r2, #1]
 8011598:	f803 2b01 	strb.w	r2, [r3], #1
 801159c:	68a2      	ldr	r2, [r4, #8]
 801159e:	7812      	ldrb	r2, [r2, #0]
 80115a0:	701a      	strb	r2, [r3, #0]
 80115a2:	e7b4      	b.n	801150e <ucdr_deserialize_uint32_t+0x72>
 80115a4:	4631      	mov	r1, r6
 80115a6:	463a      	mov	r2, r7
 80115a8:	4628      	mov	r0, r5
 80115aa:	f00a fd6e 	bl	801c08a <memcpy>
 80115ae:	464a      	mov	r2, r9
 80115b0:	19e8      	adds	r0, r5, r7
 80115b2:	68a1      	ldr	r1, [r4, #8]
 80115b4:	f00a fd69 	bl	801c08a <memcpy>
 80115b8:	e7a9      	b.n	801150e <ucdr_deserialize_uint32_t+0x72>
 80115ba:	bf00      	nop

080115bc <ucdr_deserialize_endian_uint32_t>:
 80115bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c0:	4604      	mov	r4, r0
 80115c2:	460e      	mov	r6, r1
 80115c4:	2104      	movs	r1, #4
 80115c6:	4615      	mov	r5, r2
 80115c8:	f000 fd7a 	bl	80120c0 <ucdr_buffer_alignment>
 80115cc:	4601      	mov	r1, r0
 80115ce:	4620      	mov	r0, r4
 80115d0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80115d4:	f000 fdbc 	bl	8012150 <ucdr_advance_buffer>
 80115d8:	2104      	movs	r1, #4
 80115da:	4620      	mov	r0, r4
 80115dc:	f000 fd10 	bl	8012000 <ucdr_check_buffer_available_for>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d13c      	bne.n	801165e <ucdr_deserialize_endian_uint32_t+0xa2>
 80115e4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80115e8:	42bb      	cmp	r3, r7
 80115ea:	d933      	bls.n	8011654 <ucdr_deserialize_endian_uint32_t+0x98>
 80115ec:	eba3 0907 	sub.w	r9, r3, r7
 80115f0:	60a3      	str	r3, [r4, #8]
 80115f2:	6923      	ldr	r3, [r4, #16]
 80115f4:	4620      	mov	r0, r4
 80115f6:	f1c9 0a04 	rsb	sl, r9, #4
 80115fa:	444b      	add	r3, r9
 80115fc:	4651      	mov	r1, sl
 80115fe:	6123      	str	r3, [r4, #16]
 8011600:	f000 fd0a 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011604:	2800      	cmp	r0, #0
 8011606:	d048      	beq.n	801169a <ucdr_deserialize_endian_uint32_t+0xde>
 8011608:	2e01      	cmp	r6, #1
 801160a:	d061      	beq.n	80116d0 <ucdr_deserialize_endian_uint32_t+0x114>
 801160c:	78fb      	ldrb	r3, [r7, #3]
 801160e:	702b      	strb	r3, [r5, #0]
 8011610:	f1b9 0f00 	cmp.w	r9, #0
 8011614:	d050      	beq.n	80116b8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011616:	78bb      	ldrb	r3, [r7, #2]
 8011618:	f1b9 0f01 	cmp.w	r9, #1
 801161c:	706b      	strb	r3, [r5, #1]
 801161e:	f105 0302 	add.w	r3, r5, #2
 8011622:	d04d      	beq.n	80116c0 <ucdr_deserialize_endian_uint32_t+0x104>
 8011624:	787b      	ldrb	r3, [r7, #1]
 8011626:	f1b9 0f02 	cmp.w	r9, #2
 801162a:	70ab      	strb	r3, [r5, #2]
 801162c:	f105 0303 	add.w	r3, r5, #3
 8011630:	d04a      	beq.n	80116c8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011632:	783b      	ldrb	r3, [r7, #0]
 8011634:	70eb      	strb	r3, [r5, #3]
 8011636:	6923      	ldr	r3, [r4, #16]
 8011638:	2104      	movs	r1, #4
 801163a:	68a2      	ldr	r2, [r4, #8]
 801163c:	3304      	adds	r3, #4
 801163e:	7da0      	ldrb	r0, [r4, #22]
 8011640:	4452      	add	r2, sl
 8011642:	7561      	strb	r1, [r4, #21]
 8011644:	eba3 0309 	sub.w	r3, r3, r9
 8011648:	f080 0001 	eor.w	r0, r0, #1
 801164c:	60a2      	str	r2, [r4, #8]
 801164e:	6123      	str	r3, [r4, #16]
 8011650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011654:	2104      	movs	r1, #4
 8011656:	4620      	mov	r0, r4
 8011658:	f000 fcde 	bl	8012018 <ucdr_check_final_buffer_behavior>
 801165c:	b1a8      	cbz	r0, 801168a <ucdr_deserialize_endian_uint32_t+0xce>
 801165e:	2e01      	cmp	r6, #1
 8011660:	68a3      	ldr	r3, [r4, #8]
 8011662:	d017      	beq.n	8011694 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011664:	78db      	ldrb	r3, [r3, #3]
 8011666:	702b      	strb	r3, [r5, #0]
 8011668:	68a3      	ldr	r3, [r4, #8]
 801166a:	789b      	ldrb	r3, [r3, #2]
 801166c:	706b      	strb	r3, [r5, #1]
 801166e:	68a3      	ldr	r3, [r4, #8]
 8011670:	785b      	ldrb	r3, [r3, #1]
 8011672:	70ab      	strb	r3, [r5, #2]
 8011674:	68a3      	ldr	r3, [r4, #8]
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	70eb      	strb	r3, [r5, #3]
 801167a:	2104      	movs	r1, #4
 801167c:	68a2      	ldr	r2, [r4, #8]
 801167e:	6923      	ldr	r3, [r4, #16]
 8011680:	440a      	add	r2, r1
 8011682:	7561      	strb	r1, [r4, #21]
 8011684:	440b      	add	r3, r1
 8011686:	60a2      	str	r2, [r4, #8]
 8011688:	6123      	str	r3, [r4, #16]
 801168a:	7da0      	ldrb	r0, [r4, #22]
 801168c:	f080 0001 	eor.w	r0, r0, #1
 8011690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	602b      	str	r3, [r5, #0]
 8011698:	e7ef      	b.n	801167a <ucdr_deserialize_endian_uint32_t+0xbe>
 801169a:	68a2      	ldr	r2, [r4, #8]
 801169c:	6923      	ldr	r3, [r4, #16]
 801169e:	eba2 0209 	sub.w	r2, r2, r9
 80116a2:	7da0      	ldrb	r0, [r4, #22]
 80116a4:	eba3 0309 	sub.w	r3, r3, r9
 80116a8:	f884 8015 	strb.w	r8, [r4, #21]
 80116ac:	f080 0001 	eor.w	r0, r0, #1
 80116b0:	60a2      	str	r2, [r4, #8]
 80116b2:	6123      	str	r3, [r4, #16]
 80116b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b8:	68a3      	ldr	r3, [r4, #8]
 80116ba:	789b      	ldrb	r3, [r3, #2]
 80116bc:	706b      	strb	r3, [r5, #1]
 80116be:	1cab      	adds	r3, r5, #2
 80116c0:	68a2      	ldr	r2, [r4, #8]
 80116c2:	7852      	ldrb	r2, [r2, #1]
 80116c4:	f803 2b01 	strb.w	r2, [r3], #1
 80116c8:	68a2      	ldr	r2, [r4, #8]
 80116ca:	7812      	ldrb	r2, [r2, #0]
 80116cc:	701a      	strb	r2, [r3, #0]
 80116ce:	e7b2      	b.n	8011636 <ucdr_deserialize_endian_uint32_t+0x7a>
 80116d0:	4639      	mov	r1, r7
 80116d2:	464a      	mov	r2, r9
 80116d4:	4628      	mov	r0, r5
 80116d6:	f00a fcd8 	bl	801c08a <memcpy>
 80116da:	4652      	mov	r2, sl
 80116dc:	eb05 0009 	add.w	r0, r5, r9
 80116e0:	68a1      	ldr	r1, [r4, #8]
 80116e2:	f00a fcd2 	bl	801c08a <memcpy>
 80116e6:	e7a6      	b.n	8011636 <ucdr_deserialize_endian_uint32_t+0x7a>

080116e8 <ucdr_serialize_uint64_t>:
 80116e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ec:	4604      	mov	r4, r0
 80116ee:	b082      	sub	sp, #8
 80116f0:	2108      	movs	r1, #8
 80116f2:	e9cd 2300 	strd	r2, r3, [sp]
 80116f6:	f000 fce3 	bl	80120c0 <ucdr_buffer_alignment>
 80116fa:	4601      	mov	r1, r0
 80116fc:	4620      	mov	r0, r4
 80116fe:	7d67      	ldrb	r7, [r4, #21]
 8011700:	f000 fd26 	bl	8012150 <ucdr_advance_buffer>
 8011704:	2108      	movs	r1, #8
 8011706:	4620      	mov	r0, r4
 8011708:	f000 fc7a 	bl	8012000 <ucdr_check_buffer_available_for>
 801170c:	2800      	cmp	r0, #0
 801170e:	d14e      	bne.n	80117ae <ucdr_serialize_uint64_t+0xc6>
 8011710:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011714:	42ab      	cmp	r3, r5
 8011716:	d945      	bls.n	80117a4 <ucdr_serialize_uint64_t+0xbc>
 8011718:	1b5e      	subs	r6, r3, r5
 801171a:	60a3      	str	r3, [r4, #8]
 801171c:	6923      	ldr	r3, [r4, #16]
 801171e:	4620      	mov	r0, r4
 8011720:	f1c6 0808 	rsb	r8, r6, #8
 8011724:	4433      	add	r3, r6
 8011726:	4641      	mov	r1, r8
 8011728:	6123      	str	r3, [r4, #16]
 801172a:	f000 fc75 	bl	8012018 <ucdr_check_final_buffer_behavior>
 801172e:	2800      	cmp	r0, #0
 8011730:	d074      	beq.n	801181c <ucdr_serialize_uint64_t+0x134>
 8011732:	7d23      	ldrb	r3, [r4, #20]
 8011734:	2b01      	cmp	r3, #1
 8011736:	f000 809b 	beq.w	8011870 <ucdr_serialize_uint64_t+0x188>
 801173a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801173e:	702b      	strb	r3, [r5, #0]
 8011740:	2e00      	cmp	r6, #0
 8011742:	d078      	beq.n	8011836 <ucdr_serialize_uint64_t+0x14e>
 8011744:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011748:	2e01      	cmp	r6, #1
 801174a:	706b      	strb	r3, [r5, #1]
 801174c:	d077      	beq.n	801183e <ucdr_serialize_uint64_t+0x156>
 801174e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011752:	2e02      	cmp	r6, #2
 8011754:	70ab      	strb	r3, [r5, #2]
 8011756:	d076      	beq.n	8011846 <ucdr_serialize_uint64_t+0x15e>
 8011758:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801175c:	2e03      	cmp	r6, #3
 801175e:	70eb      	strb	r3, [r5, #3]
 8011760:	d075      	beq.n	801184e <ucdr_serialize_uint64_t+0x166>
 8011762:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011766:	2e04      	cmp	r6, #4
 8011768:	712b      	strb	r3, [r5, #4]
 801176a:	d074      	beq.n	8011856 <ucdr_serialize_uint64_t+0x16e>
 801176c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011770:	2e05      	cmp	r6, #5
 8011772:	716b      	strb	r3, [r5, #5]
 8011774:	d073      	beq.n	801185e <ucdr_serialize_uint64_t+0x176>
 8011776:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801177a:	2e06      	cmp	r6, #6
 801177c:	71ab      	strb	r3, [r5, #6]
 801177e:	d072      	beq.n	8011866 <ucdr_serialize_uint64_t+0x17e>
 8011780:	f89d 3000 	ldrb.w	r3, [sp]
 8011784:	71eb      	strb	r3, [r5, #7]
 8011786:	6923      	ldr	r3, [r4, #16]
 8011788:	2108      	movs	r1, #8
 801178a:	68a2      	ldr	r2, [r4, #8]
 801178c:	3308      	adds	r3, #8
 801178e:	7da0      	ldrb	r0, [r4, #22]
 8011790:	4442      	add	r2, r8
 8011792:	7561      	strb	r1, [r4, #21]
 8011794:	1b9e      	subs	r6, r3, r6
 8011796:	f080 0001 	eor.w	r0, r0, #1
 801179a:	60a2      	str	r2, [r4, #8]
 801179c:	6126      	str	r6, [r4, #16]
 801179e:	b002      	add	sp, #8
 80117a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a4:	2108      	movs	r1, #8
 80117a6:	4620      	mov	r0, r4
 80117a8:	f000 fc36 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80117ac:	b350      	cbz	r0, 8011804 <ucdr_serialize_uint64_t+0x11c>
 80117ae:	7d23      	ldrb	r3, [r4, #20]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d02d      	beq.n	8011810 <ucdr_serialize_uint64_t+0x128>
 80117b4:	68a3      	ldr	r3, [r4, #8]
 80117b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80117ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80117be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80117c2:	7018      	strb	r0, [r3, #0]
 80117c4:	68a3      	ldr	r3, [r4, #8]
 80117c6:	705a      	strb	r2, [r3, #1]
 80117c8:	68a3      	ldr	r3, [r4, #8]
 80117ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80117d2:	7099      	strb	r1, [r3, #2]
 80117d4:	68a3      	ldr	r3, [r4, #8]
 80117d6:	70da      	strb	r2, [r3, #3]
 80117d8:	68a3      	ldr	r3, [r4, #8]
 80117da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80117de:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80117e2:	7118      	strb	r0, [r3, #4]
 80117e4:	68a3      	ldr	r3, [r4, #8]
 80117e6:	715a      	strb	r2, [r3, #5]
 80117e8:	68a3      	ldr	r3, [r4, #8]
 80117ea:	f89d 2000 	ldrb.w	r2, [sp]
 80117ee:	7199      	strb	r1, [r3, #6]
 80117f0:	68a3      	ldr	r3, [r4, #8]
 80117f2:	71da      	strb	r2, [r3, #7]
 80117f4:	2108      	movs	r1, #8
 80117f6:	68a2      	ldr	r2, [r4, #8]
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	440a      	add	r2, r1
 80117fc:	7561      	strb	r1, [r4, #21]
 80117fe:	440b      	add	r3, r1
 8011800:	60a2      	str	r2, [r4, #8]
 8011802:	6123      	str	r3, [r4, #16]
 8011804:	7da0      	ldrb	r0, [r4, #22]
 8011806:	f080 0001 	eor.w	r0, r0, #1
 801180a:	b002      	add	sp, #8
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	466b      	mov	r3, sp
 8011812:	68a2      	ldr	r2, [r4, #8]
 8011814:	cb03      	ldmia	r3!, {r0, r1}
 8011816:	6010      	str	r0, [r2, #0]
 8011818:	6051      	str	r1, [r2, #4]
 801181a:	e7eb      	b.n	80117f4 <ucdr_serialize_uint64_t+0x10c>
 801181c:	68a2      	ldr	r2, [r4, #8]
 801181e:	6923      	ldr	r3, [r4, #16]
 8011820:	7da0      	ldrb	r0, [r4, #22]
 8011822:	1b92      	subs	r2, r2, r6
 8011824:	1b9b      	subs	r3, r3, r6
 8011826:	7567      	strb	r7, [r4, #21]
 8011828:	f080 0001 	eor.w	r0, r0, #1
 801182c:	60a2      	str	r2, [r4, #8]
 801182e:	6123      	str	r3, [r4, #16]
 8011830:	b002      	add	sp, #8
 8011832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011836:	68a3      	ldr	r3, [r4, #8]
 8011838:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801183c:	701a      	strb	r2, [r3, #0]
 801183e:	68a3      	ldr	r3, [r4, #8]
 8011840:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011844:	701a      	strb	r2, [r3, #0]
 8011846:	68a3      	ldr	r3, [r4, #8]
 8011848:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801184c:	701a      	strb	r2, [r3, #0]
 801184e:	68a3      	ldr	r3, [r4, #8]
 8011850:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011854:	701a      	strb	r2, [r3, #0]
 8011856:	68a3      	ldr	r3, [r4, #8]
 8011858:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801185c:	701a      	strb	r2, [r3, #0]
 801185e:	68a3      	ldr	r3, [r4, #8]
 8011860:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011864:	701a      	strb	r2, [r3, #0]
 8011866:	68a3      	ldr	r3, [r4, #8]
 8011868:	f89d 2000 	ldrb.w	r2, [sp]
 801186c:	701a      	strb	r2, [r3, #0]
 801186e:	e78a      	b.n	8011786 <ucdr_serialize_uint64_t+0x9e>
 8011870:	4628      	mov	r0, r5
 8011872:	466d      	mov	r5, sp
 8011874:	4632      	mov	r2, r6
 8011876:	4629      	mov	r1, r5
 8011878:	f00a fc07 	bl	801c08a <memcpy>
 801187c:	4642      	mov	r2, r8
 801187e:	19a9      	adds	r1, r5, r6
 8011880:	68a0      	ldr	r0, [r4, #8]
 8011882:	f00a fc02 	bl	801c08a <memcpy>
 8011886:	e77e      	b.n	8011786 <ucdr_serialize_uint64_t+0x9e>

08011888 <ucdr_serialize_int16_t>:
 8011888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801188c:	460b      	mov	r3, r1
 801188e:	b082      	sub	sp, #8
 8011890:	4604      	mov	r4, r0
 8011892:	2102      	movs	r1, #2
 8011894:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011898:	f000 fc12 	bl	80120c0 <ucdr_buffer_alignment>
 801189c:	4601      	mov	r1, r0
 801189e:	4620      	mov	r0, r4
 80118a0:	7d67      	ldrb	r7, [r4, #21]
 80118a2:	f000 fc55 	bl	8012150 <ucdr_advance_buffer>
 80118a6:	2102      	movs	r1, #2
 80118a8:	4620      	mov	r0, r4
 80118aa:	f000 fba9 	bl	8012000 <ucdr_check_buffer_available_for>
 80118ae:	bb78      	cbnz	r0, 8011910 <ucdr_serialize_int16_t+0x88>
 80118b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80118b4:	42ab      	cmp	r3, r5
 80118b6:	d926      	bls.n	8011906 <ucdr_serialize_int16_t+0x7e>
 80118b8:	1b5e      	subs	r6, r3, r5
 80118ba:	60a3      	str	r3, [r4, #8]
 80118bc:	6923      	ldr	r3, [r4, #16]
 80118be:	4620      	mov	r0, r4
 80118c0:	f1c6 0802 	rsb	r8, r6, #2
 80118c4:	4433      	add	r3, r6
 80118c6:	4641      	mov	r1, r8
 80118c8:	6123      	str	r3, [r4, #16]
 80118ca:	f000 fba5 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d03b      	beq.n	801194a <ucdr_serialize_int16_t+0xc2>
 80118d2:	7d23      	ldrb	r3, [r4, #20]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d04a      	beq.n	801196e <ucdr_serialize_int16_t+0xe6>
 80118d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80118dc:	702b      	strb	r3, [r5, #0]
 80118de:	2e00      	cmp	r6, #0
 80118e0:	d040      	beq.n	8011964 <ucdr_serialize_int16_t+0xdc>
 80118e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80118e6:	706b      	strb	r3, [r5, #1]
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	2102      	movs	r1, #2
 80118ec:	68a2      	ldr	r2, [r4, #8]
 80118ee:	3302      	adds	r3, #2
 80118f0:	7da0      	ldrb	r0, [r4, #22]
 80118f2:	4442      	add	r2, r8
 80118f4:	7561      	strb	r1, [r4, #21]
 80118f6:	1b9e      	subs	r6, r3, r6
 80118f8:	f080 0001 	eor.w	r0, r0, #1
 80118fc:	60a2      	str	r2, [r4, #8]
 80118fe:	6126      	str	r6, [r4, #16]
 8011900:	b002      	add	sp, #8
 8011902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011906:	2102      	movs	r1, #2
 8011908:	4620      	mov	r0, r4
 801190a:	f000 fb85 	bl	8012018 <ucdr_check_final_buffer_behavior>
 801190e:	b190      	cbz	r0, 8011936 <ucdr_serialize_int16_t+0xae>
 8011910:	7d23      	ldrb	r3, [r4, #20]
 8011912:	2b01      	cmp	r3, #1
 8011914:	68a3      	ldr	r3, [r4, #8]
 8011916:	d014      	beq.n	8011942 <ucdr_serialize_int16_t+0xba>
 8011918:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801191c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011920:	7019      	strb	r1, [r3, #0]
 8011922:	68a3      	ldr	r3, [r4, #8]
 8011924:	705a      	strb	r2, [r3, #1]
 8011926:	2102      	movs	r1, #2
 8011928:	68a2      	ldr	r2, [r4, #8]
 801192a:	6923      	ldr	r3, [r4, #16]
 801192c:	440a      	add	r2, r1
 801192e:	7561      	strb	r1, [r4, #21]
 8011930:	440b      	add	r3, r1
 8011932:	60a2      	str	r2, [r4, #8]
 8011934:	6123      	str	r3, [r4, #16]
 8011936:	7da0      	ldrb	r0, [r4, #22]
 8011938:	f080 0001 	eor.w	r0, r0, #1
 801193c:	b002      	add	sp, #8
 801193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011942:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011946:	801a      	strh	r2, [r3, #0]
 8011948:	e7ed      	b.n	8011926 <ucdr_serialize_int16_t+0x9e>
 801194a:	68a2      	ldr	r2, [r4, #8]
 801194c:	6923      	ldr	r3, [r4, #16]
 801194e:	7da0      	ldrb	r0, [r4, #22]
 8011950:	1b92      	subs	r2, r2, r6
 8011952:	1b9b      	subs	r3, r3, r6
 8011954:	7567      	strb	r7, [r4, #21]
 8011956:	f080 0001 	eor.w	r0, r0, #1
 801195a:	60a2      	str	r2, [r4, #8]
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	b002      	add	sp, #8
 8011960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011964:	68a3      	ldr	r3, [r4, #8]
 8011966:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801196a:	701a      	strb	r2, [r3, #0]
 801196c:	e7bc      	b.n	80118e8 <ucdr_serialize_int16_t+0x60>
 801196e:	4628      	mov	r0, r5
 8011970:	f10d 0506 	add.w	r5, sp, #6
 8011974:	4632      	mov	r2, r6
 8011976:	4629      	mov	r1, r5
 8011978:	f00a fb87 	bl	801c08a <memcpy>
 801197c:	4642      	mov	r2, r8
 801197e:	19a9      	adds	r1, r5, r6
 8011980:	68a0      	ldr	r0, [r4, #8]
 8011982:	f00a fb82 	bl	801c08a <memcpy>
 8011986:	e7af      	b.n	80118e8 <ucdr_serialize_int16_t+0x60>

08011988 <ucdr_deserialize_int16_t>:
 8011988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801198c:	4604      	mov	r4, r0
 801198e:	460d      	mov	r5, r1
 8011990:	2102      	movs	r1, #2
 8011992:	f000 fb95 	bl	80120c0 <ucdr_buffer_alignment>
 8011996:	4601      	mov	r1, r0
 8011998:	4620      	mov	r0, r4
 801199a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801199e:	f000 fbd7 	bl	8012150 <ucdr_advance_buffer>
 80119a2:	2102      	movs	r1, #2
 80119a4:	4620      	mov	r0, r4
 80119a6:	f000 fb2b 	bl	8012000 <ucdr_check_buffer_available_for>
 80119aa:	bb60      	cbnz	r0, 8011a06 <ucdr_deserialize_int16_t+0x7e>
 80119ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80119b0:	42be      	cmp	r6, r7
 80119b2:	d923      	bls.n	80119fc <ucdr_deserialize_int16_t+0x74>
 80119b4:	6923      	ldr	r3, [r4, #16]
 80119b6:	4620      	mov	r0, r4
 80119b8:	60a6      	str	r6, [r4, #8]
 80119ba:	1bf6      	subs	r6, r6, r7
 80119bc:	4433      	add	r3, r6
 80119be:	f1c6 0902 	rsb	r9, r6, #2
 80119c2:	6123      	str	r3, [r4, #16]
 80119c4:	4649      	mov	r1, r9
 80119c6:	f000 fb27 	bl	8012018 <ucdr_check_final_buffer_behavior>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d034      	beq.n	8011a38 <ucdr_deserialize_int16_t+0xb0>
 80119ce:	7d23      	ldrb	r3, [r4, #20]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d042      	beq.n	8011a5a <ucdr_deserialize_int16_t+0xd2>
 80119d4:	787b      	ldrb	r3, [r7, #1]
 80119d6:	702b      	strb	r3, [r5, #0]
 80119d8:	2e00      	cmp	r6, #0
 80119da:	d03a      	beq.n	8011a52 <ucdr_deserialize_int16_t+0xca>
 80119dc:	783b      	ldrb	r3, [r7, #0]
 80119de:	706b      	strb	r3, [r5, #1]
 80119e0:	6923      	ldr	r3, [r4, #16]
 80119e2:	2102      	movs	r1, #2
 80119e4:	68a2      	ldr	r2, [r4, #8]
 80119e6:	3302      	adds	r3, #2
 80119e8:	7da0      	ldrb	r0, [r4, #22]
 80119ea:	444a      	add	r2, r9
 80119ec:	7561      	strb	r1, [r4, #21]
 80119ee:	1b9b      	subs	r3, r3, r6
 80119f0:	f080 0001 	eor.w	r0, r0, #1
 80119f4:	60a2      	str	r2, [r4, #8]
 80119f6:	6123      	str	r3, [r4, #16]
 80119f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119fc:	2102      	movs	r1, #2
 80119fe:	4620      	mov	r0, r4
 8011a00:	f000 fb0a 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011a04:	b180      	cbz	r0, 8011a28 <ucdr_deserialize_int16_t+0xa0>
 8011a06:	7d23      	ldrb	r3, [r4, #20]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	68a3      	ldr	r3, [r4, #8]
 8011a0c:	d011      	beq.n	8011a32 <ucdr_deserialize_int16_t+0xaa>
 8011a0e:	785b      	ldrb	r3, [r3, #1]
 8011a10:	702b      	strb	r3, [r5, #0]
 8011a12:	68a3      	ldr	r3, [r4, #8]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	706b      	strb	r3, [r5, #1]
 8011a18:	2102      	movs	r1, #2
 8011a1a:	68a2      	ldr	r2, [r4, #8]
 8011a1c:	6923      	ldr	r3, [r4, #16]
 8011a1e:	440a      	add	r2, r1
 8011a20:	7561      	strb	r1, [r4, #21]
 8011a22:	440b      	add	r3, r1
 8011a24:	60a2      	str	r2, [r4, #8]
 8011a26:	6123      	str	r3, [r4, #16]
 8011a28:	7da0      	ldrb	r0, [r4, #22]
 8011a2a:	f080 0001 	eor.w	r0, r0, #1
 8011a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	802b      	strh	r3, [r5, #0]
 8011a36:	e7ef      	b.n	8011a18 <ucdr_deserialize_int16_t+0x90>
 8011a38:	68a2      	ldr	r2, [r4, #8]
 8011a3a:	6923      	ldr	r3, [r4, #16]
 8011a3c:	1b92      	subs	r2, r2, r6
 8011a3e:	7da0      	ldrb	r0, [r4, #22]
 8011a40:	1b9b      	subs	r3, r3, r6
 8011a42:	f884 8015 	strb.w	r8, [r4, #21]
 8011a46:	f080 0001 	eor.w	r0, r0, #1
 8011a4a:	60a2      	str	r2, [r4, #8]
 8011a4c:	6123      	str	r3, [r4, #16]
 8011a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a52:	68a3      	ldr	r3, [r4, #8]
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	706b      	strb	r3, [r5, #1]
 8011a58:	e7c2      	b.n	80119e0 <ucdr_deserialize_int16_t+0x58>
 8011a5a:	4639      	mov	r1, r7
 8011a5c:	4632      	mov	r2, r6
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f00a fb13 	bl	801c08a <memcpy>
 8011a64:	464a      	mov	r2, r9
 8011a66:	19a8      	adds	r0, r5, r6
 8011a68:	68a1      	ldr	r1, [r4, #8]
 8011a6a:	f00a fb0e 	bl	801c08a <memcpy>
 8011a6e:	e7b7      	b.n	80119e0 <ucdr_deserialize_int16_t+0x58>

08011a70 <ucdr_serialize_int32_t>:
 8011a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a74:	b082      	sub	sp, #8
 8011a76:	4604      	mov	r4, r0
 8011a78:	9101      	str	r1, [sp, #4]
 8011a7a:	2104      	movs	r1, #4
 8011a7c:	f000 fb20 	bl	80120c0 <ucdr_buffer_alignment>
 8011a80:	4601      	mov	r1, r0
 8011a82:	4620      	mov	r0, r4
 8011a84:	7d67      	ldrb	r7, [r4, #21]
 8011a86:	f000 fb63 	bl	8012150 <ucdr_advance_buffer>
 8011a8a:	2104      	movs	r1, #4
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f000 fab7 	bl	8012000 <ucdr_check_buffer_available_for>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d139      	bne.n	8011b0a <ucdr_serialize_int32_t+0x9a>
 8011a96:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011a9a:	42ab      	cmp	r3, r5
 8011a9c:	d930      	bls.n	8011b00 <ucdr_serialize_int32_t+0x90>
 8011a9e:	1b5e      	subs	r6, r3, r5
 8011aa0:	60a3      	str	r3, [r4, #8]
 8011aa2:	6923      	ldr	r3, [r4, #16]
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	f1c6 0804 	rsb	r8, r6, #4
 8011aaa:	4433      	add	r3, r6
 8011aac:	4641      	mov	r1, r8
 8011aae:	6123      	str	r3, [r4, #16]
 8011ab0:	f000 fab2 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d04c      	beq.n	8011b52 <ucdr_serialize_int32_t+0xe2>
 8011ab8:	7d23      	ldrb	r3, [r4, #20]
 8011aba:	2b01      	cmp	r3, #1
 8011abc:	d063      	beq.n	8011b86 <ucdr_serialize_int32_t+0x116>
 8011abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ac2:	702b      	strb	r3, [r5, #0]
 8011ac4:	2e00      	cmp	r6, #0
 8011ac6:	d051      	beq.n	8011b6c <ucdr_serialize_int32_t+0xfc>
 8011ac8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011acc:	2e01      	cmp	r6, #1
 8011ace:	706b      	strb	r3, [r5, #1]
 8011ad0:	d050      	beq.n	8011b74 <ucdr_serialize_int32_t+0x104>
 8011ad2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ad6:	2e02      	cmp	r6, #2
 8011ad8:	70ab      	strb	r3, [r5, #2]
 8011ada:	d04f      	beq.n	8011b7c <ucdr_serialize_int32_t+0x10c>
 8011adc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ae0:	70eb      	strb	r3, [r5, #3]
 8011ae2:	6923      	ldr	r3, [r4, #16]
 8011ae4:	2104      	movs	r1, #4
 8011ae6:	68a2      	ldr	r2, [r4, #8]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	7da0      	ldrb	r0, [r4, #22]
 8011aec:	4442      	add	r2, r8
 8011aee:	7561      	strb	r1, [r4, #21]
 8011af0:	1b9e      	subs	r6, r3, r6
 8011af2:	f080 0001 	eor.w	r0, r0, #1
 8011af6:	60a2      	str	r2, [r4, #8]
 8011af8:	6126      	str	r6, [r4, #16]
 8011afa:	b002      	add	sp, #8
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	2104      	movs	r1, #4
 8011b02:	4620      	mov	r0, r4
 8011b04:	f000 fa88 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011b08:	b1d0      	cbz	r0, 8011b40 <ucdr_serialize_int32_t+0xd0>
 8011b0a:	7d23      	ldrb	r3, [r4, #20]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	68a3      	ldr	r3, [r4, #8]
 8011b10:	d01c      	beq.n	8011b4c <ucdr_serialize_int32_t+0xdc>
 8011b12:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011b16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b1a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011b1e:	7018      	strb	r0, [r3, #0]
 8011b20:	68a3      	ldr	r3, [r4, #8]
 8011b22:	705a      	strb	r2, [r3, #1]
 8011b24:	68a3      	ldr	r3, [r4, #8]
 8011b26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b2a:	7099      	strb	r1, [r3, #2]
 8011b2c:	68a3      	ldr	r3, [r4, #8]
 8011b2e:	70da      	strb	r2, [r3, #3]
 8011b30:	2104      	movs	r1, #4
 8011b32:	68a2      	ldr	r2, [r4, #8]
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	440a      	add	r2, r1
 8011b38:	7561      	strb	r1, [r4, #21]
 8011b3a:	440b      	add	r3, r1
 8011b3c:	60a2      	str	r2, [r4, #8]
 8011b3e:	6123      	str	r3, [r4, #16]
 8011b40:	7da0      	ldrb	r0, [r4, #22]
 8011b42:	f080 0001 	eor.w	r0, r0, #1
 8011b46:	b002      	add	sp, #8
 8011b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b4c:	9a01      	ldr	r2, [sp, #4]
 8011b4e:	601a      	str	r2, [r3, #0]
 8011b50:	e7ee      	b.n	8011b30 <ucdr_serialize_int32_t+0xc0>
 8011b52:	68a2      	ldr	r2, [r4, #8]
 8011b54:	6923      	ldr	r3, [r4, #16]
 8011b56:	7da0      	ldrb	r0, [r4, #22]
 8011b58:	1b92      	subs	r2, r2, r6
 8011b5a:	1b9b      	subs	r3, r3, r6
 8011b5c:	7567      	strb	r7, [r4, #21]
 8011b5e:	f080 0001 	eor.w	r0, r0, #1
 8011b62:	60a2      	str	r2, [r4, #8]
 8011b64:	6123      	str	r3, [r4, #16]
 8011b66:	b002      	add	sp, #8
 8011b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b6c:	68a3      	ldr	r3, [r4, #8]
 8011b6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b72:	701a      	strb	r2, [r3, #0]
 8011b74:	68a3      	ldr	r3, [r4, #8]
 8011b76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b7a:	701a      	strb	r2, [r3, #0]
 8011b7c:	68a3      	ldr	r3, [r4, #8]
 8011b7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b82:	701a      	strb	r2, [r3, #0]
 8011b84:	e7ad      	b.n	8011ae2 <ucdr_serialize_int32_t+0x72>
 8011b86:	4628      	mov	r0, r5
 8011b88:	ad01      	add	r5, sp, #4
 8011b8a:	4632      	mov	r2, r6
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	f00a fa7c 	bl	801c08a <memcpy>
 8011b92:	4642      	mov	r2, r8
 8011b94:	19a9      	adds	r1, r5, r6
 8011b96:	68a0      	ldr	r0, [r4, #8]
 8011b98:	f00a fa77 	bl	801c08a <memcpy>
 8011b9c:	e7a1      	b.n	8011ae2 <ucdr_serialize_int32_t+0x72>
 8011b9e:	bf00      	nop

08011ba0 <ucdr_deserialize_int32_t>:
 8011ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	2104      	movs	r1, #4
 8011baa:	f000 fa89 	bl	80120c0 <ucdr_buffer_alignment>
 8011bae:	4601      	mov	r1, r0
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011bb6:	f000 facb 	bl	8012150 <ucdr_advance_buffer>
 8011bba:	2104      	movs	r1, #4
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f000 fa1f 	bl	8012000 <ucdr_check_buffer_available_for>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d138      	bne.n	8011c38 <ucdr_deserialize_int32_t+0x98>
 8011bc6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011bca:	42b7      	cmp	r7, r6
 8011bcc:	d92f      	bls.n	8011c2e <ucdr_deserialize_int32_t+0x8e>
 8011bce:	6923      	ldr	r3, [r4, #16]
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	60a7      	str	r7, [r4, #8]
 8011bd4:	1bbf      	subs	r7, r7, r6
 8011bd6:	443b      	add	r3, r7
 8011bd8:	f1c7 0904 	rsb	r9, r7, #4
 8011bdc:	6123      	str	r3, [r4, #16]
 8011bde:	4649      	mov	r1, r9
 8011be0:	f000 fa1a 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011be4:	2800      	cmp	r0, #0
 8011be6:	d046      	beq.n	8011c76 <ucdr_deserialize_int32_t+0xd6>
 8011be8:	7d23      	ldrb	r3, [r4, #20]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d05c      	beq.n	8011ca8 <ucdr_deserialize_int32_t+0x108>
 8011bee:	78f3      	ldrb	r3, [r6, #3]
 8011bf0:	702b      	strb	r3, [r5, #0]
 8011bf2:	2f00      	cmp	r7, #0
 8011bf4:	d04c      	beq.n	8011c90 <ucdr_deserialize_int32_t+0xf0>
 8011bf6:	78b3      	ldrb	r3, [r6, #2]
 8011bf8:	2f01      	cmp	r7, #1
 8011bfa:	706b      	strb	r3, [r5, #1]
 8011bfc:	f105 0302 	add.w	r3, r5, #2
 8011c00:	d04a      	beq.n	8011c98 <ucdr_deserialize_int32_t+0xf8>
 8011c02:	7873      	ldrb	r3, [r6, #1]
 8011c04:	2f02      	cmp	r7, #2
 8011c06:	70ab      	strb	r3, [r5, #2]
 8011c08:	f105 0303 	add.w	r3, r5, #3
 8011c0c:	d048      	beq.n	8011ca0 <ucdr_deserialize_int32_t+0x100>
 8011c0e:	7833      	ldrb	r3, [r6, #0]
 8011c10:	70eb      	strb	r3, [r5, #3]
 8011c12:	6923      	ldr	r3, [r4, #16]
 8011c14:	2104      	movs	r1, #4
 8011c16:	68a2      	ldr	r2, [r4, #8]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	7da0      	ldrb	r0, [r4, #22]
 8011c1c:	444a      	add	r2, r9
 8011c1e:	7561      	strb	r1, [r4, #21]
 8011c20:	1bdb      	subs	r3, r3, r7
 8011c22:	f080 0001 	eor.w	r0, r0, #1
 8011c26:	60a2      	str	r2, [r4, #8]
 8011c28:	6123      	str	r3, [r4, #16]
 8011c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c2e:	2104      	movs	r1, #4
 8011c30:	4620      	mov	r0, r4
 8011c32:	f000 f9f1 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011c36:	b1b0      	cbz	r0, 8011c66 <ucdr_deserialize_int32_t+0xc6>
 8011c38:	7d23      	ldrb	r3, [r4, #20]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	68a3      	ldr	r3, [r4, #8]
 8011c3e:	d017      	beq.n	8011c70 <ucdr_deserialize_int32_t+0xd0>
 8011c40:	78db      	ldrb	r3, [r3, #3]
 8011c42:	702b      	strb	r3, [r5, #0]
 8011c44:	68a3      	ldr	r3, [r4, #8]
 8011c46:	789b      	ldrb	r3, [r3, #2]
 8011c48:	706b      	strb	r3, [r5, #1]
 8011c4a:	68a3      	ldr	r3, [r4, #8]
 8011c4c:	785b      	ldrb	r3, [r3, #1]
 8011c4e:	70ab      	strb	r3, [r5, #2]
 8011c50:	68a3      	ldr	r3, [r4, #8]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	70eb      	strb	r3, [r5, #3]
 8011c56:	2104      	movs	r1, #4
 8011c58:	68a2      	ldr	r2, [r4, #8]
 8011c5a:	6923      	ldr	r3, [r4, #16]
 8011c5c:	440a      	add	r2, r1
 8011c5e:	7561      	strb	r1, [r4, #21]
 8011c60:	440b      	add	r3, r1
 8011c62:	60a2      	str	r2, [r4, #8]
 8011c64:	6123      	str	r3, [r4, #16]
 8011c66:	7da0      	ldrb	r0, [r4, #22]
 8011c68:	f080 0001 	eor.w	r0, r0, #1
 8011c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	602b      	str	r3, [r5, #0]
 8011c74:	e7ef      	b.n	8011c56 <ucdr_deserialize_int32_t+0xb6>
 8011c76:	68a2      	ldr	r2, [r4, #8]
 8011c78:	6923      	ldr	r3, [r4, #16]
 8011c7a:	1bd2      	subs	r2, r2, r7
 8011c7c:	7da0      	ldrb	r0, [r4, #22]
 8011c7e:	1bdb      	subs	r3, r3, r7
 8011c80:	f884 8015 	strb.w	r8, [r4, #21]
 8011c84:	f080 0001 	eor.w	r0, r0, #1
 8011c88:	60a2      	str	r2, [r4, #8]
 8011c8a:	6123      	str	r3, [r4, #16]
 8011c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c90:	68a3      	ldr	r3, [r4, #8]
 8011c92:	789b      	ldrb	r3, [r3, #2]
 8011c94:	706b      	strb	r3, [r5, #1]
 8011c96:	1cab      	adds	r3, r5, #2
 8011c98:	68a2      	ldr	r2, [r4, #8]
 8011c9a:	7852      	ldrb	r2, [r2, #1]
 8011c9c:	f803 2b01 	strb.w	r2, [r3], #1
 8011ca0:	68a2      	ldr	r2, [r4, #8]
 8011ca2:	7812      	ldrb	r2, [r2, #0]
 8011ca4:	701a      	strb	r2, [r3, #0]
 8011ca6:	e7b4      	b.n	8011c12 <ucdr_deserialize_int32_t+0x72>
 8011ca8:	4631      	mov	r1, r6
 8011caa:	463a      	mov	r2, r7
 8011cac:	4628      	mov	r0, r5
 8011cae:	f00a f9ec 	bl	801c08a <memcpy>
 8011cb2:	464a      	mov	r2, r9
 8011cb4:	19e8      	adds	r0, r5, r7
 8011cb6:	68a1      	ldr	r1, [r4, #8]
 8011cb8:	f00a f9e7 	bl	801c08a <memcpy>
 8011cbc:	e7a9      	b.n	8011c12 <ucdr_deserialize_int32_t+0x72>
 8011cbe:	bf00      	nop

08011cc0 <ucdr_serialize_endian_double>:
 8011cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	460e      	mov	r6, r1
 8011cca:	2108      	movs	r1, #8
 8011ccc:	ed8d 0b00 	vstr	d0, [sp]
 8011cd0:	f000 f9f6 	bl	80120c0 <ucdr_buffer_alignment>
 8011cd4:	4601      	mov	r1, r0
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011cdc:	f000 fa38 	bl	8012150 <ucdr_advance_buffer>
 8011ce0:	2108      	movs	r1, #8
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f000 f98c 	bl	8012000 <ucdr_check_buffer_available_for>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	d14d      	bne.n	8011d88 <ucdr_serialize_endian_double+0xc8>
 8011cec:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8011cf0:	42bd      	cmp	r5, r7
 8011cf2:	d944      	bls.n	8011d7e <ucdr_serialize_endian_double+0xbe>
 8011cf4:	6923      	ldr	r3, [r4, #16]
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	60a5      	str	r5, [r4, #8]
 8011cfa:	1bed      	subs	r5, r5, r7
 8011cfc:	442b      	add	r3, r5
 8011cfe:	f1c5 0908 	rsb	r9, r5, #8
 8011d02:	6123      	str	r3, [r4, #16]
 8011d04:	4649      	mov	r1, r9
 8011d06:	f000 f987 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	d072      	beq.n	8011df4 <ucdr_serialize_endian_double+0x134>
 8011d0e:	2e01      	cmp	r6, #1
 8011d10:	f000 809b 	beq.w	8011e4a <ucdr_serialize_endian_double+0x18a>
 8011d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d18:	703b      	strb	r3, [r7, #0]
 8011d1a:	2d00      	cmp	r5, #0
 8011d1c:	d078      	beq.n	8011e10 <ucdr_serialize_endian_double+0x150>
 8011d1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d22:	2d01      	cmp	r5, #1
 8011d24:	707b      	strb	r3, [r7, #1]
 8011d26:	d077      	beq.n	8011e18 <ucdr_serialize_endian_double+0x158>
 8011d28:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011d2c:	2d02      	cmp	r5, #2
 8011d2e:	70bb      	strb	r3, [r7, #2]
 8011d30:	d076      	beq.n	8011e20 <ucdr_serialize_endian_double+0x160>
 8011d32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d36:	2d03      	cmp	r5, #3
 8011d38:	70fb      	strb	r3, [r7, #3]
 8011d3a:	d075      	beq.n	8011e28 <ucdr_serialize_endian_double+0x168>
 8011d3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d40:	2d04      	cmp	r5, #4
 8011d42:	713b      	strb	r3, [r7, #4]
 8011d44:	d074      	beq.n	8011e30 <ucdr_serialize_endian_double+0x170>
 8011d46:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011d4a:	2d05      	cmp	r5, #5
 8011d4c:	717b      	strb	r3, [r7, #5]
 8011d4e:	d073      	beq.n	8011e38 <ucdr_serialize_endian_double+0x178>
 8011d50:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011d54:	2d06      	cmp	r5, #6
 8011d56:	71bb      	strb	r3, [r7, #6]
 8011d58:	d072      	beq.n	8011e40 <ucdr_serialize_endian_double+0x180>
 8011d5a:	f89d 3000 	ldrb.w	r3, [sp]
 8011d5e:	71fb      	strb	r3, [r7, #7]
 8011d60:	6923      	ldr	r3, [r4, #16]
 8011d62:	2108      	movs	r1, #8
 8011d64:	68a2      	ldr	r2, [r4, #8]
 8011d66:	3308      	adds	r3, #8
 8011d68:	7da0      	ldrb	r0, [r4, #22]
 8011d6a:	444a      	add	r2, r9
 8011d6c:	7561      	strb	r1, [r4, #21]
 8011d6e:	1b5d      	subs	r5, r3, r5
 8011d70:	f080 0001 	eor.w	r0, r0, #1
 8011d74:	60a2      	str	r2, [r4, #8]
 8011d76:	6125      	str	r5, [r4, #16]
 8011d78:	b003      	add	sp, #12
 8011d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d7e:	2108      	movs	r1, #8
 8011d80:	4620      	mov	r0, r4
 8011d82:	f000 f949 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011d86:	b348      	cbz	r0, 8011ddc <ucdr_serialize_endian_double+0x11c>
 8011d88:	2e01      	cmp	r6, #1
 8011d8a:	d02d      	beq.n	8011de8 <ucdr_serialize_endian_double+0x128>
 8011d8c:	68a3      	ldr	r3, [r4, #8]
 8011d8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011d92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d96:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011d9a:	7018      	strb	r0, [r3, #0]
 8011d9c:	68a3      	ldr	r3, [r4, #8]
 8011d9e:	705a      	strb	r2, [r3, #1]
 8011da0:	68a3      	ldr	r3, [r4, #8]
 8011da2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011da6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011daa:	7099      	strb	r1, [r3, #2]
 8011dac:	68a3      	ldr	r3, [r4, #8]
 8011dae:	70da      	strb	r2, [r3, #3]
 8011db0:	68a3      	ldr	r3, [r4, #8]
 8011db2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011db6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011dba:	7118      	strb	r0, [r3, #4]
 8011dbc:	68a3      	ldr	r3, [r4, #8]
 8011dbe:	715a      	strb	r2, [r3, #5]
 8011dc0:	68a3      	ldr	r3, [r4, #8]
 8011dc2:	f89d 2000 	ldrb.w	r2, [sp]
 8011dc6:	7199      	strb	r1, [r3, #6]
 8011dc8:	68a3      	ldr	r3, [r4, #8]
 8011dca:	71da      	strb	r2, [r3, #7]
 8011dcc:	2108      	movs	r1, #8
 8011dce:	68a2      	ldr	r2, [r4, #8]
 8011dd0:	6923      	ldr	r3, [r4, #16]
 8011dd2:	440a      	add	r2, r1
 8011dd4:	7561      	strb	r1, [r4, #21]
 8011dd6:	440b      	add	r3, r1
 8011dd8:	60a2      	str	r2, [r4, #8]
 8011dda:	6123      	str	r3, [r4, #16]
 8011ddc:	7da0      	ldrb	r0, [r4, #22]
 8011dde:	f080 0001 	eor.w	r0, r0, #1
 8011de2:	b003      	add	sp, #12
 8011de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011de8:	466b      	mov	r3, sp
 8011dea:	68a2      	ldr	r2, [r4, #8]
 8011dec:	cb03      	ldmia	r3!, {r0, r1}
 8011dee:	6010      	str	r0, [r2, #0]
 8011df0:	6051      	str	r1, [r2, #4]
 8011df2:	e7eb      	b.n	8011dcc <ucdr_serialize_endian_double+0x10c>
 8011df4:	68a2      	ldr	r2, [r4, #8]
 8011df6:	6923      	ldr	r3, [r4, #16]
 8011df8:	7da0      	ldrb	r0, [r4, #22]
 8011dfa:	1b52      	subs	r2, r2, r5
 8011dfc:	1b5b      	subs	r3, r3, r5
 8011dfe:	f884 8015 	strb.w	r8, [r4, #21]
 8011e02:	f080 0001 	eor.w	r0, r0, #1
 8011e06:	60a2      	str	r2, [r4, #8]
 8011e08:	6123      	str	r3, [r4, #16]
 8011e0a:	b003      	add	sp, #12
 8011e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e10:	68a3      	ldr	r3, [r4, #8]
 8011e12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e16:	701a      	strb	r2, [r3, #0]
 8011e18:	68a3      	ldr	r3, [r4, #8]
 8011e1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e1e:	701a      	strb	r2, [r3, #0]
 8011e20:	68a3      	ldr	r3, [r4, #8]
 8011e22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e26:	701a      	strb	r2, [r3, #0]
 8011e28:	68a3      	ldr	r3, [r4, #8]
 8011e2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011e2e:	701a      	strb	r2, [r3, #0]
 8011e30:	68a3      	ldr	r3, [r4, #8]
 8011e32:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011e36:	701a      	strb	r2, [r3, #0]
 8011e38:	68a3      	ldr	r3, [r4, #8]
 8011e3a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011e3e:	701a      	strb	r2, [r3, #0]
 8011e40:	68a3      	ldr	r3, [r4, #8]
 8011e42:	f89d 2000 	ldrb.w	r2, [sp]
 8011e46:	701a      	strb	r2, [r3, #0]
 8011e48:	e78a      	b.n	8011d60 <ucdr_serialize_endian_double+0xa0>
 8011e4a:	466e      	mov	r6, sp
 8011e4c:	462a      	mov	r2, r5
 8011e4e:	4638      	mov	r0, r7
 8011e50:	4631      	mov	r1, r6
 8011e52:	f00a f91a 	bl	801c08a <memcpy>
 8011e56:	464a      	mov	r2, r9
 8011e58:	1971      	adds	r1, r6, r5
 8011e5a:	68a0      	ldr	r0, [r4, #8]
 8011e5c:	f00a f915 	bl	801c08a <memcpy>
 8011e60:	e77e      	b.n	8011d60 <ucdr_serialize_endian_double+0xa0>
 8011e62:	bf00      	nop

08011e64 <ucdr_deserialize_endian_double>:
 8011e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e68:	4604      	mov	r4, r0
 8011e6a:	460f      	mov	r7, r1
 8011e6c:	2108      	movs	r1, #8
 8011e6e:	4615      	mov	r5, r2
 8011e70:	f000 f926 	bl	80120c0 <ucdr_buffer_alignment>
 8011e74:	4601      	mov	r1, r0
 8011e76:	4620      	mov	r0, r4
 8011e78:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e7c:	f000 f968 	bl	8012150 <ucdr_advance_buffer>
 8011e80:	2108      	movs	r1, #8
 8011e82:	4620      	mov	r0, r4
 8011e84:	f000 f8bc 	bl	8012000 <ucdr_check_buffer_available_for>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	d159      	bne.n	8011f40 <ucdr_deserialize_endian_double+0xdc>
 8011e8c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 8011e90:	454e      	cmp	r6, r9
 8011e92:	d950      	bls.n	8011f36 <ucdr_deserialize_endian_double+0xd2>
 8011e94:	6923      	ldr	r3, [r4, #16]
 8011e96:	4620      	mov	r0, r4
 8011e98:	60a6      	str	r6, [r4, #8]
 8011e9a:	eba6 0609 	sub.w	r6, r6, r9
 8011e9e:	4433      	add	r3, r6
 8011ea0:	f1c6 0a08 	rsb	sl, r6, #8
 8011ea4:	6123      	str	r3, [r4, #16]
 8011ea6:	4651      	mov	r1, sl
 8011ea8:	f000 f8b6 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d073      	beq.n	8011f98 <ucdr_deserialize_endian_double+0x134>
 8011eb0:	2f01      	cmp	r7, #1
 8011eb2:	f000 809a 	beq.w	8011fea <ucdr_deserialize_endian_double+0x186>
 8011eb6:	f899 3007 	ldrb.w	r3, [r9, #7]
 8011eba:	702b      	strb	r3, [r5, #0]
 8011ebc:	2e00      	cmp	r6, #0
 8011ebe:	d078      	beq.n	8011fb2 <ucdr_deserialize_endian_double+0x14e>
 8011ec0:	f899 3006 	ldrb.w	r3, [r9, #6]
 8011ec4:	2e01      	cmp	r6, #1
 8011ec6:	706b      	strb	r3, [r5, #1]
 8011ec8:	f105 0302 	add.w	r3, r5, #2
 8011ecc:	d075      	beq.n	8011fba <ucdr_deserialize_endian_double+0x156>
 8011ece:	f899 3005 	ldrb.w	r3, [r9, #5]
 8011ed2:	2e02      	cmp	r6, #2
 8011ed4:	70ab      	strb	r3, [r5, #2]
 8011ed6:	f105 0303 	add.w	r3, r5, #3
 8011eda:	d072      	beq.n	8011fc2 <ucdr_deserialize_endian_double+0x15e>
 8011edc:	f899 3004 	ldrb.w	r3, [r9, #4]
 8011ee0:	2e03      	cmp	r6, #3
 8011ee2:	70eb      	strb	r3, [r5, #3]
 8011ee4:	f105 0304 	add.w	r3, r5, #4
 8011ee8:	d06f      	beq.n	8011fca <ucdr_deserialize_endian_double+0x166>
 8011eea:	f899 3003 	ldrb.w	r3, [r9, #3]
 8011eee:	2e04      	cmp	r6, #4
 8011ef0:	712b      	strb	r3, [r5, #4]
 8011ef2:	f105 0305 	add.w	r3, r5, #5
 8011ef6:	d06c      	beq.n	8011fd2 <ucdr_deserialize_endian_double+0x16e>
 8011ef8:	f899 3002 	ldrb.w	r3, [r9, #2]
 8011efc:	2e05      	cmp	r6, #5
 8011efe:	716b      	strb	r3, [r5, #5]
 8011f00:	f105 0306 	add.w	r3, r5, #6
 8011f04:	d069      	beq.n	8011fda <ucdr_deserialize_endian_double+0x176>
 8011f06:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011f0a:	2e06      	cmp	r6, #6
 8011f0c:	71ab      	strb	r3, [r5, #6]
 8011f0e:	f105 0307 	add.w	r3, r5, #7
 8011f12:	d066      	beq.n	8011fe2 <ucdr_deserialize_endian_double+0x17e>
 8011f14:	f899 3000 	ldrb.w	r3, [r9]
 8011f18:	71eb      	strb	r3, [r5, #7]
 8011f1a:	6923      	ldr	r3, [r4, #16]
 8011f1c:	2108      	movs	r1, #8
 8011f1e:	68a2      	ldr	r2, [r4, #8]
 8011f20:	3308      	adds	r3, #8
 8011f22:	7da0      	ldrb	r0, [r4, #22]
 8011f24:	4452      	add	r2, sl
 8011f26:	7561      	strb	r1, [r4, #21]
 8011f28:	1b9e      	subs	r6, r3, r6
 8011f2a:	f080 0001 	eor.w	r0, r0, #1
 8011f2e:	60a2      	str	r2, [r4, #8]
 8011f30:	6126      	str	r6, [r4, #16]
 8011f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f36:	2108      	movs	r1, #8
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 f86d 	bl	8012018 <ucdr_check_final_buffer_behavior>
 8011f3e:	b308      	cbz	r0, 8011f84 <ucdr_deserialize_endian_double+0x120>
 8011f40:	2f01      	cmp	r7, #1
 8011f42:	68a3      	ldr	r3, [r4, #8]
 8011f44:	d023      	beq.n	8011f8e <ucdr_deserialize_endian_double+0x12a>
 8011f46:	79db      	ldrb	r3, [r3, #7]
 8011f48:	702b      	strb	r3, [r5, #0]
 8011f4a:	68a3      	ldr	r3, [r4, #8]
 8011f4c:	799b      	ldrb	r3, [r3, #6]
 8011f4e:	706b      	strb	r3, [r5, #1]
 8011f50:	68a3      	ldr	r3, [r4, #8]
 8011f52:	795b      	ldrb	r3, [r3, #5]
 8011f54:	70ab      	strb	r3, [r5, #2]
 8011f56:	68a3      	ldr	r3, [r4, #8]
 8011f58:	791b      	ldrb	r3, [r3, #4]
 8011f5a:	70eb      	strb	r3, [r5, #3]
 8011f5c:	68a3      	ldr	r3, [r4, #8]
 8011f5e:	78db      	ldrb	r3, [r3, #3]
 8011f60:	712b      	strb	r3, [r5, #4]
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	789b      	ldrb	r3, [r3, #2]
 8011f66:	716b      	strb	r3, [r5, #5]
 8011f68:	68a3      	ldr	r3, [r4, #8]
 8011f6a:	785b      	ldrb	r3, [r3, #1]
 8011f6c:	71ab      	strb	r3, [r5, #6]
 8011f6e:	68a3      	ldr	r3, [r4, #8]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	71eb      	strb	r3, [r5, #7]
 8011f74:	2108      	movs	r1, #8
 8011f76:	68a2      	ldr	r2, [r4, #8]
 8011f78:	6923      	ldr	r3, [r4, #16]
 8011f7a:	440a      	add	r2, r1
 8011f7c:	7561      	strb	r1, [r4, #21]
 8011f7e:	440b      	add	r3, r1
 8011f80:	60a2      	str	r2, [r4, #8]
 8011f82:	6123      	str	r3, [r4, #16]
 8011f84:	7da0      	ldrb	r0, [r4, #22]
 8011f86:	f080 0001 	eor.w	r0, r0, #1
 8011f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	602a      	str	r2, [r5, #0]
 8011f94:	606b      	str	r3, [r5, #4]
 8011f96:	e7ed      	b.n	8011f74 <ucdr_deserialize_endian_double+0x110>
 8011f98:	68a2      	ldr	r2, [r4, #8]
 8011f9a:	6923      	ldr	r3, [r4, #16]
 8011f9c:	1b92      	subs	r2, r2, r6
 8011f9e:	7da0      	ldrb	r0, [r4, #22]
 8011fa0:	1b9b      	subs	r3, r3, r6
 8011fa2:	f884 8015 	strb.w	r8, [r4, #21]
 8011fa6:	f080 0001 	eor.w	r0, r0, #1
 8011faa:	60a2      	str	r2, [r4, #8]
 8011fac:	6123      	str	r3, [r4, #16]
 8011fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb2:	68a3      	ldr	r3, [r4, #8]
 8011fb4:	799b      	ldrb	r3, [r3, #6]
 8011fb6:	706b      	strb	r3, [r5, #1]
 8011fb8:	1cab      	adds	r3, r5, #2
 8011fba:	68a2      	ldr	r2, [r4, #8]
 8011fbc:	7952      	ldrb	r2, [r2, #5]
 8011fbe:	f803 2b01 	strb.w	r2, [r3], #1
 8011fc2:	68a2      	ldr	r2, [r4, #8]
 8011fc4:	7912      	ldrb	r2, [r2, #4]
 8011fc6:	f803 2b01 	strb.w	r2, [r3], #1
 8011fca:	68a2      	ldr	r2, [r4, #8]
 8011fcc:	78d2      	ldrb	r2, [r2, #3]
 8011fce:	f803 2b01 	strb.w	r2, [r3], #1
 8011fd2:	68a2      	ldr	r2, [r4, #8]
 8011fd4:	7892      	ldrb	r2, [r2, #2]
 8011fd6:	f803 2b01 	strb.w	r2, [r3], #1
 8011fda:	68a2      	ldr	r2, [r4, #8]
 8011fdc:	7852      	ldrb	r2, [r2, #1]
 8011fde:	f803 2b01 	strb.w	r2, [r3], #1
 8011fe2:	68a2      	ldr	r2, [r4, #8]
 8011fe4:	7812      	ldrb	r2, [r2, #0]
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	e797      	b.n	8011f1a <ucdr_deserialize_endian_double+0xb6>
 8011fea:	4649      	mov	r1, r9
 8011fec:	4632      	mov	r2, r6
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f00a f84b 	bl	801c08a <memcpy>
 8011ff4:	4652      	mov	r2, sl
 8011ff6:	19a8      	adds	r0, r5, r6
 8011ff8:	68a1      	ldr	r1, [r4, #8]
 8011ffa:	f00a f846 	bl	801c08a <memcpy>
 8011ffe:	e78c      	b.n	8011f1a <ucdr_deserialize_endian_double+0xb6>

08012000 <ucdr_check_buffer_available_for>:
 8012000:	7d83      	ldrb	r3, [r0, #22]
 8012002:	b93b      	cbnz	r3, 8012014 <ucdr_check_buffer_available_for+0x14>
 8012004:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012008:	4419      	add	r1, r3
 801200a:	4288      	cmp	r0, r1
 801200c:	bf34      	ite	cc
 801200e:	2000      	movcc	r0, #0
 8012010:	2001      	movcs	r0, #1
 8012012:	4770      	bx	lr
 8012014:	2000      	movs	r0, #0
 8012016:	4770      	bx	lr

08012018 <ucdr_check_final_buffer_behavior>:
 8012018:	7d83      	ldrb	r3, [r0, #22]
 801201a:	b943      	cbnz	r3, 801202e <ucdr_check_final_buffer_behavior+0x16>
 801201c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012020:	b510      	push	{r4, lr}
 8012022:	4291      	cmp	r1, r2
 8012024:	4604      	mov	r4, r0
 8012026:	d205      	bcs.n	8012034 <ucdr_check_final_buffer_behavior+0x1c>
 8012028:	2301      	movs	r3, #1
 801202a:	4618      	mov	r0, r3
 801202c:	bd10      	pop	{r4, pc}
 801202e:	2300      	movs	r3, #0
 8012030:	4618      	mov	r0, r3
 8012032:	4770      	bx	lr
 8012034:	6982      	ldr	r2, [r0, #24]
 8012036:	b13a      	cbz	r2, 8012048 <ucdr_check_final_buffer_behavior+0x30>
 8012038:	69c1      	ldr	r1, [r0, #28]
 801203a:	4790      	blx	r2
 801203c:	f080 0301 	eor.w	r3, r0, #1
 8012040:	75a0      	strb	r0, [r4, #22]
 8012042:	b2db      	uxtb	r3, r3
 8012044:	4618      	mov	r0, r3
 8012046:	bd10      	pop	{r4, pc}
 8012048:	2001      	movs	r0, #1
 801204a:	75a0      	strb	r0, [r4, #22]
 801204c:	e7fa      	b.n	8012044 <ucdr_check_final_buffer_behavior+0x2c>
 801204e:	bf00      	nop

08012050 <ucdr_set_on_full_buffer_callback>:
 8012050:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <ucdr_init_buffer_origin_offset_endian>:
 8012058:	b410      	push	{r4}
 801205a:	9c01      	ldr	r4, [sp, #4]
 801205c:	440a      	add	r2, r1
 801205e:	6001      	str	r1, [r0, #0]
 8012060:	6042      	str	r2, [r0, #4]
 8012062:	190a      	adds	r2, r1, r4
 8012064:	441c      	add	r4, r3
 8012066:	6082      	str	r2, [r0, #8]
 8012068:	2200      	movs	r2, #0
 801206a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801206e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012072:	7542      	strb	r2, [r0, #21]
 8012074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012078:	7582      	strb	r2, [r0, #22]
 801207a:	7503      	strb	r3, [r0, #20]
 801207c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop

08012084 <ucdr_init_buffer_origin_offset>:
 8012084:	b510      	push	{r4, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	9c04      	ldr	r4, [sp, #16]
 801208a:	9400      	str	r4, [sp, #0]
 801208c:	2401      	movs	r4, #1
 801208e:	9401      	str	r4, [sp, #4]
 8012090:	f7ff ffe2 	bl	8012058 <ucdr_init_buffer_origin_offset_endian>
 8012094:	b002      	add	sp, #8
 8012096:	bd10      	pop	{r4, pc}

08012098 <ucdr_init_buffer_origin>:
 8012098:	b510      	push	{r4, lr}
 801209a:	2400      	movs	r4, #0
 801209c:	b082      	sub	sp, #8
 801209e:	9400      	str	r4, [sp, #0]
 80120a0:	f7ff fff0 	bl	8012084 <ucdr_init_buffer_origin_offset>
 80120a4:	b002      	add	sp, #8
 80120a6:	bd10      	pop	{r4, pc}

080120a8 <ucdr_init_buffer>:
 80120a8:	2300      	movs	r3, #0
 80120aa:	f7ff bff5 	b.w	8012098 <ucdr_init_buffer_origin>
 80120ae:	bf00      	nop

080120b0 <ucdr_alignment>:
 80120b0:	fbb0 f2f1 	udiv	r2, r0, r1
 80120b4:	fb02 0011 	mls	r0, r2, r1, r0
 80120b8:	1e4b      	subs	r3, r1, #1
 80120ba:	1a08      	subs	r0, r1, r0
 80120bc:	4018      	ands	r0, r3
 80120be:	4770      	bx	lr

080120c0 <ucdr_buffer_alignment>:
 80120c0:	7d43      	ldrb	r3, [r0, #21]
 80120c2:	428b      	cmp	r3, r1
 80120c4:	d209      	bcs.n	80120da <ucdr_buffer_alignment+0x1a>
 80120c6:	6903      	ldr	r3, [r0, #16]
 80120c8:	1e4a      	subs	r2, r1, #1
 80120ca:	fbb3 f0f1 	udiv	r0, r3, r1
 80120ce:	fb01 3010 	mls	r0, r1, r0, r3
 80120d2:	1a09      	subs	r1, r1, r0
 80120d4:	ea01 0002 	and.w	r0, r1, r2
 80120d8:	4770      	bx	lr
 80120da:	2000      	movs	r0, #0
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop

080120e0 <ucdr_align_to>:
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	4604      	mov	r4, r0
 80120e4:	460d      	mov	r5, r1
 80120e6:	f7ff ffeb 	bl	80120c0 <ucdr_buffer_alignment>
 80120ea:	68a3      	ldr	r3, [r4, #8]
 80120ec:	7565      	strb	r5, [r4, #21]
 80120ee:	181a      	adds	r2, r3, r0
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	4418      	add	r0, r3
 80120f4:	6863      	ldr	r3, [r4, #4]
 80120f6:	4293      	cmp	r3, r2
 80120f8:	6120      	str	r0, [r4, #16]
 80120fa:	bf28      	it	cs
 80120fc:	4613      	movcs	r3, r2
 80120fe:	60a3      	str	r3, [r4, #8]
 8012100:	bd38      	pop	{r3, r4, r5, pc}
 8012102:	bf00      	nop

08012104 <ucdr_buffer_length>:
 8012104:	6882      	ldr	r2, [r0, #8]
 8012106:	6800      	ldr	r0, [r0, #0]
 8012108:	1a10      	subs	r0, r2, r0
 801210a:	4770      	bx	lr

0801210c <ucdr_buffer_remaining>:
 801210c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012110:	1a10      	subs	r0, r2, r0
 8012112:	4770      	bx	lr

08012114 <ucdr_check_final_buffer_behavior_array>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	7d83      	ldrb	r3, [r0, #22]
 8012118:	b9a3      	cbnz	r3, 8012144 <ucdr_check_final_buffer_behavior_array+0x30>
 801211a:	4604      	mov	r4, r0
 801211c:	460d      	mov	r5, r1
 801211e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8012122:	429a      	cmp	r2, r3
 8012124:	d300      	bcc.n	8012128 <ucdr_check_final_buffer_behavior_array+0x14>
 8012126:	b931      	cbnz	r1, 8012136 <ucdr_check_final_buffer_behavior_array+0x22>
 8012128:	4620      	mov	r0, r4
 801212a:	f7ff ffef 	bl	801210c <ucdr_buffer_remaining>
 801212e:	42a8      	cmp	r0, r5
 8012130:	bf28      	it	cs
 8012132:	4628      	movcs	r0, r5
 8012134:	bd38      	pop	{r3, r4, r5, pc}
 8012136:	6983      	ldr	r3, [r0, #24]
 8012138:	b133      	cbz	r3, 8012148 <ucdr_check_final_buffer_behavior_array+0x34>
 801213a:	69c1      	ldr	r1, [r0, #28]
 801213c:	4798      	blx	r3
 801213e:	75a0      	strb	r0, [r4, #22]
 8012140:	2800      	cmp	r0, #0
 8012142:	d0f1      	beq.n	8012128 <ucdr_check_final_buffer_behavior_array+0x14>
 8012144:	2000      	movs	r0, #0
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	2301      	movs	r3, #1
 801214a:	7583      	strb	r3, [r0, #22]
 801214c:	e7fa      	b.n	8012144 <ucdr_check_final_buffer_behavior_array+0x30>
 801214e:	bf00      	nop

08012150 <ucdr_advance_buffer>:
 8012150:	b538      	push	{r3, r4, r5, lr}
 8012152:	4604      	mov	r4, r0
 8012154:	460d      	mov	r5, r1
 8012156:	f7ff ff53 	bl	8012000 <ucdr_check_buffer_available_for>
 801215a:	b178      	cbz	r0, 801217c <ucdr_advance_buffer+0x2c>
 801215c:	6923      	ldr	r3, [r4, #16]
 801215e:	68a2      	ldr	r2, [r4, #8]
 8012160:	442b      	add	r3, r5
 8012162:	442a      	add	r2, r5
 8012164:	6123      	str	r3, [r4, #16]
 8012166:	2301      	movs	r3, #1
 8012168:	60a2      	str	r2, [r4, #8]
 801216a:	7563      	strb	r3, [r4, #21]
 801216c:	bd38      	pop	{r3, r4, r5, pc}
 801216e:	68a2      	ldr	r2, [r4, #8]
 8012170:	1a2d      	subs	r5, r5, r0
 8012172:	6923      	ldr	r3, [r4, #16]
 8012174:	4402      	add	r2, r0
 8012176:	4418      	add	r0, r3
 8012178:	60a2      	str	r2, [r4, #8]
 801217a:	6120      	str	r0, [r4, #16]
 801217c:	4629      	mov	r1, r5
 801217e:	2201      	movs	r2, #1
 8012180:	4620      	mov	r0, r4
 8012182:	f7ff ffc7 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 8012186:	2800      	cmp	r0, #0
 8012188:	d1f1      	bne.n	801216e <ucdr_advance_buffer+0x1e>
 801218a:	2301      	movs	r3, #1
 801218c:	7563      	strb	r3, [r4, #21]
 801218e:	bd38      	pop	{r3, r4, r5, pc}

08012190 <ucdr_serialize_sequence_char>:
 8012190:	b570      	push	{r4, r5, r6, lr}
 8012192:	4615      	mov	r5, r2
 8012194:	460e      	mov	r6, r1
 8012196:	7d01      	ldrb	r1, [r0, #20]
 8012198:	4604      	mov	r4, r0
 801219a:	f7ff f8e7 	bl	801136c <ucdr_serialize_endian_uint32_t>
 801219e:	b90d      	cbnz	r5, 80121a4 <ucdr_serialize_sequence_char+0x14>
 80121a0:	2001      	movs	r0, #1
 80121a2:	bd70      	pop	{r4, r5, r6, pc}
 80121a4:	462b      	mov	r3, r5
 80121a6:	4632      	mov	r2, r6
 80121a8:	7d21      	ldrb	r1, [r4, #20]
 80121aa:	4620      	mov	r0, r4
 80121ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121b0:	f007 be58 	b.w	8019e64 <ucdr_serialize_endian_array_char>

080121b4 <ucdr_deserialize_sequence_char>:
 80121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b8:	461d      	mov	r5, r3
 80121ba:	4616      	mov	r6, r2
 80121bc:	460f      	mov	r7, r1
 80121be:	461a      	mov	r2, r3
 80121c0:	7d01      	ldrb	r1, [r0, #20]
 80121c2:	4604      	mov	r4, r0
 80121c4:	f7ff f9fa 	bl	80115bc <ucdr_deserialize_endian_uint32_t>
 80121c8:	682b      	ldr	r3, [r5, #0]
 80121ca:	429e      	cmp	r6, r3
 80121cc:	d201      	bcs.n	80121d2 <ucdr_deserialize_sequence_char+0x1e>
 80121ce:	2201      	movs	r2, #1
 80121d0:	75a2      	strb	r2, [r4, #22]
 80121d2:	b913      	cbnz	r3, 80121da <ucdr_deserialize_sequence_char+0x26>
 80121d4:	2001      	movs	r0, #1
 80121d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121da:	463a      	mov	r2, r7
 80121dc:	7d21      	ldrb	r1, [r4, #20]
 80121de:	4620      	mov	r0, r4
 80121e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121e4:	f007 be70 	b.w	8019ec8 <ucdr_deserialize_endian_array_char>

080121e8 <ucdr_serialize_sequence_uint8_t>:
 80121e8:	b570      	push	{r4, r5, r6, lr}
 80121ea:	4615      	mov	r5, r2
 80121ec:	460e      	mov	r6, r1
 80121ee:	7d01      	ldrb	r1, [r0, #20]
 80121f0:	4604      	mov	r4, r0
 80121f2:	f7ff f8bb 	bl	801136c <ucdr_serialize_endian_uint32_t>
 80121f6:	b90d      	cbnz	r5, 80121fc <ucdr_serialize_sequence_uint8_t+0x14>
 80121f8:	2001      	movs	r0, #1
 80121fa:	bd70      	pop	{r4, r5, r6, pc}
 80121fc:	462b      	mov	r3, r5
 80121fe:	4632      	mov	r2, r6
 8012200:	7d21      	ldrb	r1, [r4, #20]
 8012202:	4620      	mov	r0, r4
 8012204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012208:	f007 bec4 	b.w	8019f94 <ucdr_serialize_endian_array_uint8_t>

0801220c <ucdr_deserialize_sequence_uint8_t>:
 801220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012210:	461d      	mov	r5, r3
 8012212:	4616      	mov	r6, r2
 8012214:	460f      	mov	r7, r1
 8012216:	461a      	mov	r2, r3
 8012218:	7d01      	ldrb	r1, [r0, #20]
 801221a:	4604      	mov	r4, r0
 801221c:	f7ff f9ce 	bl	80115bc <ucdr_deserialize_endian_uint32_t>
 8012220:	682b      	ldr	r3, [r5, #0]
 8012222:	429e      	cmp	r6, r3
 8012224:	d201      	bcs.n	801222a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8012226:	2201      	movs	r2, #1
 8012228:	75a2      	strb	r2, [r4, #22]
 801222a:	b913      	cbnz	r3, 8012232 <ucdr_deserialize_sequence_uint8_t+0x26>
 801222c:	2001      	movs	r0, #1
 801222e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012232:	463a      	mov	r2, r7
 8012234:	7d21      	ldrb	r1, [r4, #20]
 8012236:	4620      	mov	r0, r4
 8012238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801223c:	f007 bf10 	b.w	801a060 <ucdr_deserialize_endian_array_uint8_t>

08012240 <ucdr_serialize_sequence_double>:
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	4615      	mov	r5, r2
 8012244:	460e      	mov	r6, r1
 8012246:	7d01      	ldrb	r1, [r0, #20]
 8012248:	4604      	mov	r4, r0
 801224a:	f7ff f88f 	bl	801136c <ucdr_serialize_endian_uint32_t>
 801224e:	b90d      	cbnz	r5, 8012254 <ucdr_serialize_sequence_double+0x14>
 8012250:	2001      	movs	r0, #1
 8012252:	bd70      	pop	{r4, r5, r6, pc}
 8012254:	462b      	mov	r3, r5
 8012256:	4632      	mov	r2, r6
 8012258:	7d21      	ldrb	r1, [r4, #20]
 801225a:	4620      	mov	r0, r4
 801225c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012260:	f007 bf32 	b.w	801a0c8 <ucdr_serialize_endian_array_double>

08012264 <ucdr_deserialize_sequence_double>:
 8012264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012268:	461d      	mov	r5, r3
 801226a:	4616      	mov	r6, r2
 801226c:	460f      	mov	r7, r1
 801226e:	461a      	mov	r2, r3
 8012270:	7d01      	ldrb	r1, [r0, #20]
 8012272:	4604      	mov	r4, r0
 8012274:	f7ff f9a2 	bl	80115bc <ucdr_deserialize_endian_uint32_t>
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	429e      	cmp	r6, r3
 801227c:	d201      	bcs.n	8012282 <ucdr_deserialize_sequence_double+0x1e>
 801227e:	2201      	movs	r2, #1
 8012280:	75a2      	strb	r2, [r4, #22]
 8012282:	b913      	cbnz	r3, 801228a <ucdr_deserialize_sequence_double+0x26>
 8012284:	2001      	movs	r0, #1
 8012286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801228a:	463a      	mov	r2, r7
 801228c:	7d21      	ldrb	r1, [r4, #20]
 801228e:	4620      	mov	r0, r4
 8012290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012294:	f007 bf6c 	b.w	801a170 <ucdr_deserialize_endian_array_double>

08012298 <uxr_buffer_delete_entity>:
 8012298:	b510      	push	{r4, lr}
 801229a:	2300      	movs	r3, #0
 801229c:	b08e      	sub	sp, #56	@ 0x38
 801229e:	4604      	mov	r4, r0
 80122a0:	9103      	str	r1, [sp, #12]
 80122a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80122a6:	2303      	movs	r3, #3
 80122a8:	2204      	movs	r2, #4
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	ab06      	add	r3, sp, #24
 80122ae:	f001 fab1 	bl	8013814 <uxr_prepare_stream_to_write_submessage>
 80122b2:	b918      	cbnz	r0, 80122bc <uxr_buffer_delete_entity+0x24>
 80122b4:	4604      	mov	r4, r0
 80122b6:	4620      	mov	r0, r4
 80122b8:	b00e      	add	sp, #56	@ 0x38
 80122ba:	bd10      	pop	{r4, pc}
 80122bc:	9902      	ldr	r1, [sp, #8]
 80122be:	aa05      	add	r2, sp, #20
 80122c0:	4620      	mov	r0, r4
 80122c2:	f001 fbe3 	bl	8013a8c <uxr_init_base_object_request>
 80122c6:	4604      	mov	r4, r0
 80122c8:	a905      	add	r1, sp, #20
 80122ca:	a806      	add	r0, sp, #24
 80122cc:	f003 f9c8 	bl	8015660 <uxr_serialize_DELETE_Payload>
 80122d0:	4620      	mov	r0, r4
 80122d2:	b00e      	add	sp, #56	@ 0x38
 80122d4:	bd10      	pop	{r4, pc}
 80122d6:	bf00      	nop

080122d8 <uxr_common_create_entity>:
 80122d8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80122dc:	b510      	push	{r4, lr}
 80122de:	f1bc 0f01 	cmp.w	ip, #1
 80122e2:	b08c      	sub	sp, #48	@ 0x30
 80122e4:	4604      	mov	r4, r0
 80122e6:	9202      	str	r2, [sp, #8]
 80122e8:	bf0c      	ite	eq
 80122ea:	f003 0201 	andeq.w	r2, r3, #1
 80122ee:	2200      	movne	r2, #0
 80122f0:	330e      	adds	r3, #14
 80122f2:	9103      	str	r1, [sp, #12]
 80122f4:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80122f8:	441a      	add	r2, r3
 80122fa:	ab04      	add	r3, sp, #16
 80122fc:	9101      	str	r1, [sp, #4]
 80122fe:	2101      	movs	r1, #1
 8012300:	b292      	uxth	r2, r2
 8012302:	9100      	str	r1, [sp, #0]
 8012304:	9903      	ldr	r1, [sp, #12]
 8012306:	f001 fa85 	bl	8013814 <uxr_prepare_stream_to_write_submessage>
 801230a:	b918      	cbnz	r0, 8012314 <uxr_common_create_entity+0x3c>
 801230c:	4604      	mov	r4, r0
 801230e:	4620      	mov	r0, r4
 8012310:	b00c      	add	sp, #48	@ 0x30
 8012312:	bd10      	pop	{r4, pc}
 8012314:	9902      	ldr	r1, [sp, #8]
 8012316:	4620      	mov	r0, r4
 8012318:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801231a:	f001 fbb7 	bl	8013a8c <uxr_init_base_object_request>
 801231e:	4604      	mov	r4, r0
 8012320:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012322:	a804      	add	r0, sp, #16
 8012324:	f003 f8f6 	bl	8015514 <uxr_serialize_CREATE_Payload>
 8012328:	4620      	mov	r0, r4
 801232a:	b00c      	add	sp, #48	@ 0x30
 801232c:	bd10      	pop	{r4, pc}
 801232e:	bf00      	nop

08012330 <uxr_buffer_create_participant_bin>:
 8012330:	b570      	push	{r4, r5, r6, lr}
 8012332:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012336:	4605      	mov	r5, r0
 8012338:	ac11      	add	r4, sp, #68	@ 0x44
 801233a:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801233e:	2303      	movs	r3, #3
 8012340:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012344:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012348:	7223      	strb	r3, [r4, #8]
 801234a:	2300      	movs	r3, #0
 801234c:	2201      	movs	r2, #1
 801234e:	f88d 3014 	strb.w	r3, [sp, #20]
 8012352:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012354:	7122      	strb	r2, [r4, #4]
 8012356:	b1cb      	cbz	r3, 801238c <uxr_buffer_create_participant_bin+0x5c>
 8012358:	f88d 201c 	strb.w	r2, [sp, #28]
 801235c:	9308      	str	r3, [sp, #32]
 801235e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012362:	a915      	add	r1, sp, #84	@ 0x54
 8012364:	a809      	add	r0, sp, #36	@ 0x24
 8012366:	f7ff fe9f 	bl	80120a8 <ucdr_init_buffer>
 801236a:	a905      	add	r1, sp, #20
 801236c:	a809      	add	r0, sp, #36	@ 0x24
 801236e:	f002 fda7 	bl	8014ec0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012374:	9600      	str	r6, [sp, #0]
 8012376:	4628      	mov	r0, r5
 8012378:	9401      	str	r4, [sp, #4]
 801237a:	60e3      	str	r3, [r4, #12]
 801237c:	b29b      	uxth	r3, r3
 801237e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012382:	f7ff ffa9 	bl	80122d8 <uxr_common_create_entity>
 8012386:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801238a:	bd70      	pop	{r4, r5, r6, pc}
 801238c:	f88d 301c 	strb.w	r3, [sp, #28]
 8012390:	e7e5      	b.n	801235e <uxr_buffer_create_participant_bin+0x2e>
 8012392:	bf00      	nop

08012394 <uxr_buffer_create_topic_bin>:
 8012394:	b570      	push	{r4, r5, r6, lr}
 8012396:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801239a:	4605      	mov	r5, r0
 801239c:	4618      	mov	r0, r3
 801239e:	9105      	str	r1, [sp, #20]
 80123a0:	a997      	add	r1, sp, #604	@ 0x25c
 80123a2:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80123a6:	ac13      	add	r4, sp, #76	@ 0x4c
 80123a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80123ac:	2302      	movs	r3, #2
 80123ae:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80123b2:	f000 f9ab 	bl	801270c <uxr_object_id_to_raw>
 80123b6:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80123b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123bc:	a917      	add	r1, sp, #92	@ 0x5c
 80123be:	a80b      	add	r0, sp, #44	@ 0x2c
 80123c0:	9306      	str	r3, [sp, #24]
 80123c2:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80123c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80123c6:	2303      	movs	r3, #3
 80123c8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80123cc:	2301      	movs	r3, #1
 80123ce:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80123d2:	2300      	movs	r3, #0
 80123d4:	f88d 301c 	strb.w	r3, [sp, #28]
 80123d8:	f7ff fe66 	bl	80120a8 <ucdr_init_buffer>
 80123dc:	a906      	add	r1, sp, #24
 80123de:	a80b      	add	r0, sp, #44	@ 0x2c
 80123e0:	f002 fd90 	bl	8014f04 <uxr_serialize_OBJK_Topic_Binary>
 80123e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123e6:	4628      	mov	r0, r5
 80123e8:	9600      	str	r6, [sp, #0]
 80123ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	9401      	str	r4, [sp, #4]
 80123f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80123f4:	f7ff ff70 	bl	80122d8 <uxr_common_create_entity>
 80123f8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80123fc:	bd70      	pop	{r4, r5, r6, pc}
 80123fe:	bf00      	nop

08012400 <uxr_buffer_create_publisher_bin>:
 8012400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012402:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012406:	2603      	movs	r6, #3
 8012408:	4605      	mov	r5, r0
 801240a:	4618      	mov	r0, r3
 801240c:	9105      	str	r1, [sp, #20]
 801240e:	a992      	add	r1, sp, #584	@ 0x248
 8012410:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012414:	ac0e      	add	r4, sp, #56	@ 0x38
 8012416:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801241a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801241e:	f000 f975 	bl	801270c <uxr_object_id_to_raw>
 8012422:	2300      	movs	r3, #0
 8012424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012428:	a912      	add	r1, sp, #72	@ 0x48
 801242a:	a806      	add	r0, sp, #24
 801242c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012430:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012434:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012438:	f7ff fe36 	bl	80120a8 <ucdr_init_buffer>
 801243c:	a993      	add	r1, sp, #588	@ 0x24c
 801243e:	a806      	add	r0, sp, #24
 8012440:	f002 fe14 	bl	801506c <uxr_serialize_OBJK_Publisher_Binary>
 8012444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012446:	4628      	mov	r0, r5
 8012448:	9700      	str	r7, [sp, #0]
 801244a:	9311      	str	r3, [sp, #68]	@ 0x44
 801244c:	b29b      	uxth	r3, r3
 801244e:	9401      	str	r4, [sp, #4]
 8012450:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012454:	f7ff ff40 	bl	80122d8 <uxr_common_create_entity>
 8012458:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801245e:	bf00      	nop

08012460 <uxr_buffer_create_datawriter_bin>:
 8012460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012464:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012468:	4606      	mov	r6, r0
 801246a:	4618      	mov	r0, r3
 801246c:	2703      	movs	r7, #3
 801246e:	ac1d      	add	r4, sp, #116	@ 0x74
 8012470:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012474:	9105      	str	r1, [sp, #20]
 8012476:	a9a1      	add	r1, sp, #644	@ 0x284
 8012478:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801247c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012480:	2305      	movs	r3, #5
 8012482:	7123      	strb	r3, [r4, #4]
 8012484:	f000 f942 	bl	801270c <uxr_object_id_to_raw>
 8012488:	a90e      	add	r1, sp, #56	@ 0x38
 801248a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801248c:	7227      	strb	r7, [r4, #8]
 801248e:	f000 f93d 	bl	801270c <uxr_object_id_to_raw>
 8012492:	2300      	movs	r3, #0
 8012494:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012498:	3d00      	subs	r5, #0
 801249a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801249e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80124a2:	bf18      	it	ne
 80124a4:	2501      	movne	r5, #1
 80124a6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80124aa:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80124ae:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80124b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80124b6:	2301      	movs	r3, #1
 80124b8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80124bc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80124c0:	bb8a      	cbnz	r2, 8012526 <uxr_buffer_create_datawriter_bin+0xc6>
 80124c2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80124c6:	f04f 0c13 	mov.w	ip, #19
 80124ca:	250b      	movs	r5, #11
 80124cc:	2221      	movs	r2, #33	@ 0x21
 80124ce:	2111      	movs	r1, #17
 80124d0:	2009      	movs	r0, #9
 80124d2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80124d6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80124da:	b923      	cbnz	r3, 80124e6 <uxr_buffer_create_datawriter_bin+0x86>
 80124dc:	4672      	mov	r2, lr
 80124de:	4661      	mov	r1, ip
 80124e0:	4628      	mov	r0, r5
 80124e2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80124e6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80124ea:	2b01      	cmp	r3, #1
 80124ec:	d025      	beq.n	801253a <uxr_buffer_create_datawriter_bin+0xda>
 80124ee:	2b03      	cmp	r3, #3
 80124f0:	d029      	beq.n	8012546 <uxr_buffer_create_datawriter_bin+0xe6>
 80124f2:	b32b      	cbz	r3, 8012540 <uxr_buffer_create_datawriter_bin+0xe0>
 80124f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124f8:	a921      	add	r1, sp, #132	@ 0x84
 80124fa:	a806      	add	r0, sp, #24
 80124fc:	f7ff fdd4 	bl	80120a8 <ucdr_init_buffer>
 8012500:	a90e      	add	r1, sp, #56	@ 0x38
 8012502:	a806      	add	r0, sp, #24
 8012504:	f002 fe28 	bl	8015158 <uxr_serialize_OBJK_DataWriter_Binary>
 8012508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801250a:	f8cd 8000 	str.w	r8, [sp]
 801250e:	4630      	mov	r0, r6
 8012510:	9401      	str	r4, [sp, #4]
 8012512:	60e3      	str	r3, [r4, #12]
 8012514:	b29b      	uxth	r3, r3
 8012516:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801251a:	f7ff fedd 	bl	80122d8 <uxr_common_create_entity>
 801251e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012526:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801252a:	f04f 0c12 	mov.w	ip, #18
 801252e:	250a      	movs	r5, #10
 8012530:	2220      	movs	r2, #32
 8012532:	2110      	movs	r1, #16
 8012534:	2008      	movs	r0, #8
 8012536:	2702      	movs	r7, #2
 8012538:	e7cd      	b.n	80124d6 <uxr_buffer_create_datawriter_bin+0x76>
 801253a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801253e:	e7d9      	b.n	80124f4 <uxr_buffer_create_datawriter_bin+0x94>
 8012540:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012544:	e7d6      	b.n	80124f4 <uxr_buffer_create_datawriter_bin+0x94>
 8012546:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801254a:	e7d3      	b.n	80124f4 <uxr_buffer_create_datawriter_bin+0x94>

0801254c <get_custom_error>:
 801254c:	4b01      	ldr	r3, [pc, #4]	@ (8012554 <get_custom_error+0x8>)
 801254e:	7818      	ldrb	r0, [r3, #0]
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	24012fec 	.word	0x24012fec

08012558 <recv_custom_msg>:
 8012558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255c:	4693      	mov	fp, r2
 801255e:	b089      	sub	sp, #36	@ 0x24
 8012560:	2200      	movs	r2, #0
 8012562:	4604      	mov	r4, r0
 8012564:	468a      	mov	sl, r1
 8012566:	9305      	str	r3, [sp, #20]
 8012568:	f88d 201e 	strb.w	r2, [sp, #30]
 801256c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8012570:	b322      	cbz	r2, 80125bc <recv_custom_msg+0x64>
 8012572:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8012576:	f10d 081f 	add.w	r8, sp, #31
 801257a:	af05      	add	r7, sp, #20
 801257c:	f10d 061e 	add.w	r6, sp, #30
 8012580:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8012584:	e002      	b.n	801258c <recv_custom_msg+0x34>
 8012586:	9b05      	ldr	r3, [sp, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	dd0f      	ble.n	80125ac <recv_custom_msg+0x54>
 801258c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8012590:	4623      	mov	r3, r4
 8012592:	4622      	mov	r2, r4
 8012594:	4648      	mov	r0, r9
 8012596:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801259a:	e9cd 5600 	strd	r5, r6, [sp]
 801259e:	f001 fc8b 	bl	8013eb8 <uxr_read_framed_msg>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d0ef      	beq.n	8012586 <recv_custom_msg+0x2e>
 80125a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80125aa:	b1b3      	cbz	r3, 80125da <recv_custom_msg+0x82>
 80125ac:	4b0f      	ldr	r3, [pc, #60]	@ (80125ec <recv_custom_msg+0x94>)
 80125ae:	2000      	movs	r0, #0
 80125b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80125b4:	701a      	strb	r2, [r3, #0]
 80125b6:	b009      	add	sp, #36	@ 0x24
 80125b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125bc:	f10d 021f 	add.w	r2, sp, #31
 80125c0:	4601      	mov	r1, r0
 80125c2:	9200      	str	r2, [sp, #0]
 80125c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125c8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80125cc:	47a8      	blx	r5
 80125ce:	2800      	cmp	r0, #0
 80125d0:	d0ec      	beq.n	80125ac <recv_custom_msg+0x54>
 80125d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1e8      	bne.n	80125ac <recv_custom_msg+0x54>
 80125da:	f8cb 0000 	str.w	r0, [fp]
 80125de:	2001      	movs	r0, #1
 80125e0:	f8ca 4000 	str.w	r4, [sl]
 80125e4:	b009      	add	sp, #36	@ 0x24
 80125e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ea:	bf00      	nop
 80125ec:	24012fec 	.word	0x24012fec

080125f0 <send_custom_msg>:
 80125f0:	b530      	push	{r4, r5, lr}
 80125f2:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80125f6:	b087      	sub	sp, #28
 80125f8:	4614      	mov	r4, r2
 80125fa:	b995      	cbnz	r5, 8012622 <send_custom_msg+0x32>
 80125fc:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8012600:	f10d 0317 	add.w	r3, sp, #23
 8012604:	47a8      	blx	r5
 8012606:	1e03      	subs	r3, r0, #0
 8012608:	bf18      	it	ne
 801260a:	2301      	movne	r3, #1
 801260c:	42a0      	cmp	r0, r4
 801260e:	bf18      	it	ne
 8012610:	2300      	movne	r3, #0
 8012612:	b91b      	cbnz	r3, 801261c <send_custom_msg+0x2c>
 8012614:	4a0a      	ldr	r2, [pc, #40]	@ (8012640 <send_custom_msg+0x50>)
 8012616:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801261a:	7011      	strb	r1, [r2, #0]
 801261c:	4618      	mov	r0, r3
 801261e:	b007      	add	sp, #28
 8012620:	bd30      	pop	{r4, r5, pc}
 8012622:	460b      	mov	r3, r1
 8012624:	2200      	movs	r2, #0
 8012626:	f10d 0117 	add.w	r1, sp, #23
 801262a:	9400      	str	r4, [sp, #0]
 801262c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012630:	4602      	mov	r2, r0
 8012632:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8012636:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801263a:	f001 fa5f 	bl	8013afc <uxr_write_framed_msg>
 801263e:	e7e2      	b.n	8012606 <send_custom_msg+0x16>
 8012640:	24012fec 	.word	0x24012fec

08012644 <uxr_set_custom_transport_callbacks>:
 8012644:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8012648:	9901      	ldr	r1, [sp, #4]
 801264a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801264e:	9b00      	ldr	r3, [sp, #0]
 8012650:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8012654:	4770      	bx	lr
 8012656:	bf00      	nop

08012658 <uxr_init_custom_transport>:
 8012658:	b538      	push	{r3, r4, r5, lr}
 801265a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801265e:	b303      	cbz	r3, 80126a2 <uxr_init_custom_transport+0x4a>
 8012660:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8012664:	4604      	mov	r4, r0
 8012666:	b1e2      	cbz	r2, 80126a2 <uxr_init_custom_transport+0x4a>
 8012668:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801266c:	b1ca      	cbz	r2, 80126a2 <uxr_init_custom_transport+0x4a>
 801266e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8012672:	b1b2      	cbz	r2, 80126a2 <uxr_init_custom_transport+0x4a>
 8012674:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012678:	4798      	blx	r3
 801267a:	4605      	mov	r5, r0
 801267c:	b188      	cbz	r0, 80126a2 <uxr_init_custom_transport+0x4a>
 801267e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8012682:	b98b      	cbnz	r3, 80126a8 <uxr_init_custom_transport+0x50>
 8012684:	4b0b      	ldr	r3, [pc, #44]	@ (80126b4 <uxr_init_custom_transport+0x5c>)
 8012686:	4628      	mov	r0, r5
 8012688:	490b      	ldr	r1, [pc, #44]	@ (80126b8 <uxr_init_custom_transport+0x60>)
 801268a:	4a0c      	ldr	r2, [pc, #48]	@ (80126bc <uxr_init_custom_transport+0x64>)
 801268c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8012690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012694:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012698:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801269c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80126a0:	bd38      	pop	{r3, r4, r5, pc}
 80126a2:	2500      	movs	r5, #0
 80126a4:	4628      	mov	r0, r5
 80126a6:	bd38      	pop	{r3, r4, r5, pc}
 80126a8:	2100      	movs	r1, #0
 80126aa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80126ae:	f001 fa1f 	bl	8013af0 <uxr_init_framing_io>
 80126b2:	e7e7      	b.n	8012684 <uxr_init_custom_transport+0x2c>
 80126b4:	08012559 	.word	0x08012559
 80126b8:	080125f1 	.word	0x080125f1
 80126bc:	0801254d 	.word	0x0801254d

080126c0 <uxr_close_custom_transport>:
 80126c0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80126c4:	4718      	bx	r3
 80126c6:	bf00      	nop

080126c8 <uxr_object_id>:
 80126c8:	b082      	sub	sp, #8
 80126ca:	2300      	movs	r3, #0
 80126cc:	f88d 1006 	strb.w	r1, [sp, #6]
 80126d0:	f360 030f 	bfi	r3, r0, #0, #16
 80126d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80126d8:	f362 431f 	bfi	r3, r2, #16, #16
 80126dc:	4618      	mov	r0, r3
 80126de:	b002      	add	sp, #8
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop

080126e4 <uxr_object_id_from_raw>:
 80126e4:	7843      	ldrb	r3, [r0, #1]
 80126e6:	b082      	sub	sp, #8
 80126e8:	7801      	ldrb	r1, [r0, #0]
 80126ea:	2000      	movs	r0, #0
 80126ec:	091a      	lsrs	r2, r3, #4
 80126ee:	f003 030f 	and.w	r3, r3, #15
 80126f2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80126f6:	f88d 3006 	strb.w	r3, [sp, #6]
 80126fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80126fe:	f362 000f 	bfi	r0, r2, #0, #16
 8012702:	f363 401f 	bfi	r0, r3, #16, #16
 8012706:	b002      	add	sp, #8
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop

0801270c <uxr_object_id_to_raw>:
 801270c:	4602      	mov	r2, r0
 801270e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8012712:	b082      	sub	sp, #8
 8012714:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012718:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801271c:	f881 c000 	strb.w	ip, [r1]
 8012720:	7048      	strb	r0, [r1, #1]
 8012722:	b002      	add	sp, #8
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop

08012728 <uxr_buffer_cancel_data>:
 8012728:	b510      	push	{r4, lr}
 801272a:	2300      	movs	r3, #0
 801272c:	b094      	sub	sp, #80	@ 0x50
 801272e:	4604      	mov	r4, r0
 8012730:	9205      	str	r2, [sp, #20]
 8012732:	9301      	str	r3, [sp, #4]
 8012734:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012738:	f88d 301e 	strb.w	r3, [sp, #30]
 801273c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8012740:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012744:	2308      	movs	r3, #8
 8012746:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801274a:	2201      	movs	r2, #1
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	ab0c      	add	r3, sp, #48	@ 0x30
 8012750:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012754:	2210      	movs	r2, #16
 8012756:	f001 f85d 	bl	8013814 <uxr_prepare_stream_to_write_submessage>
 801275a:	b918      	cbnz	r0, 8012764 <uxr_buffer_cancel_data+0x3c>
 801275c:	4604      	mov	r4, r0
 801275e:	4620      	mov	r0, r4
 8012760:	b014      	add	sp, #80	@ 0x50
 8012762:	bd10      	pop	{r4, pc}
 8012764:	9905      	ldr	r1, [sp, #20]
 8012766:	aa06      	add	r2, sp, #24
 8012768:	4620      	mov	r0, r4
 801276a:	f001 f98f 	bl	8013a8c <uxr_init_base_object_request>
 801276e:	4604      	mov	r4, r0
 8012770:	a906      	add	r1, sp, #24
 8012772:	a80c      	add	r0, sp, #48	@ 0x30
 8012774:	f003 f81e 	bl	80157b4 <uxr_serialize_READ_DATA_Payload>
 8012778:	4620      	mov	r0, r4
 801277a:	b014      	add	sp, #80	@ 0x50
 801277c:	bd10      	pop	{r4, pc}
 801277e:	bf00      	nop

08012780 <read_submessage_format>:
 8012780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012784:	b095      	sub	sp, #84	@ 0x54
 8012786:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801278a:	b113      	cbz	r3, 8012792 <read_submessage_format+0x12>
 801278c:	b015      	add	sp, #84	@ 0x54
 801278e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012792:	4606      	mov	r6, r0
 8012794:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012796:	460c      	mov	r4, r1
 8012798:	4615      	mov	r5, r2
 801279a:	9004      	str	r0, [sp, #16]
 801279c:	4699      	mov	r9, r3
 801279e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80127a0:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80127a4:	9005      	str	r0, [sp, #20]
 80127a6:	a80c      	add	r0, sp, #48	@ 0x30
 80127a8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80127ac:	1a52      	subs	r2, r2, r1
 80127ae:	f7ff fc7b 	bl	80120a8 <ucdr_init_buffer>
 80127b2:	a80c      	add	r0, sp, #48	@ 0x30
 80127b4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80127b8:	f7ff fc4a 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 80127bc:	69e2      	ldr	r2, [r4, #28]
 80127be:	b19a      	cbz	r2, 80127e8 <read_submessage_format+0x68>
 80127c0:	f1b8 0f07 	cmp.w	r8, #7
 80127c4:	f882 9014 	strb.w	r9, [r2, #20]
 80127c8:	d040      	beq.n	801284c <read_submessage_format+0xcc>
 80127ca:	f1b8 0f08 	cmp.w	r8, #8
 80127ce:	d02e      	beq.n	801282e <read_submessage_format+0xae>
 80127d0:	f1b8 0f06 	cmp.w	r8, #6
 80127d4:	d011      	beq.n	80127fa <read_submessage_format+0x7a>
 80127d6:	2301      	movs	r3, #1
 80127d8:	7513      	strb	r3, [r2, #20]
 80127da:	4629      	mov	r1, r5
 80127dc:	4620      	mov	r0, r4
 80127de:	f7ff fcb7 	bl	8012150 <ucdr_advance_buffer>
 80127e2:	b015      	add	sp, #84	@ 0x54
 80127e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127e8:	f1b8 0f07 	cmp.w	r8, #7
 80127ec:	d02e      	beq.n	801284c <read_submessage_format+0xcc>
 80127ee:	f1b8 0f08 	cmp.w	r8, #8
 80127f2:	d01c      	beq.n	801282e <read_submessage_format+0xae>
 80127f4:	f1b8 0f06 	cmp.w	r8, #6
 80127f8:	d1ef      	bne.n	80127da <read_submessage_format+0x5a>
 80127fa:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 80127fe:	f1b8 0f00 	cmp.w	r8, #0
 8012802:	d011      	beq.n	8012828 <read_submessage_format+0xa8>
 8012804:	ab0c      	add	r3, sp, #48	@ 0x30
 8012806:	9501      	str	r5, [sp, #4]
 8012808:	463a      	mov	r2, r7
 801280a:	4630      	mov	r0, r6
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	2306      	movs	r3, #6
 8012810:	f88d 3016 	strb.w	r3, [sp, #22]
 8012814:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8012818:	9302      	str	r3, [sp, #8]
 801281a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801281e:	47c0      	blx	r8
 8012820:	2301      	movs	r3, #1
 8012822:	69e2      	ldr	r2, [r4, #28]
 8012824:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012828:	2a00      	cmp	r2, #0
 801282a:	d1d4      	bne.n	80127d6 <read_submessage_format+0x56>
 801282c:	e7d5      	b.n	80127da <read_submessage_format+0x5a>
 801282e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8012832:	2b00      	cmp	r3, #0
 8012834:	d0f8      	beq.n	8012828 <read_submessage_format+0xa8>
 8012836:	a80c      	add	r0, sp, #48	@ 0x30
 8012838:	a906      	add	r1, sp, #24
 801283a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801283e:	f003 f893 	bl	8015968 <uxr_deserialize_SampleIdentity>
 8012842:	b9a0      	cbnz	r0, 801286e <read_submessage_format+0xee>
 8012844:	69e2      	ldr	r2, [r4, #28]
 8012846:	2a00      	cmp	r2, #0
 8012848:	d1c5      	bne.n	80127d6 <read_submessage_format+0x56>
 801284a:	e7c6      	b.n	80127da <read_submessage_format+0x5a>
 801284c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8012850:	b13b      	cbz	r3, 8012862 <read_submessage_format+0xe2>
 8012852:	a906      	add	r1, sp, #24
 8012854:	a80c      	add	r0, sp, #48	@ 0x30
 8012856:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801285a:	f002 fd4b 	bl	80152f4 <uxr_deserialize_BaseObjectRequest>
 801285e:	bb60      	cbnz	r0, 80128ba <read_submessage_format+0x13a>
 8012860:	69e2      	ldr	r2, [r4, #28]
 8012862:	68a3      	ldr	r3, [r4, #8]
 8012864:	442b      	add	r3, r5
 8012866:	60a3      	str	r3, [r4, #8]
 8012868:	2a00      	cmp	r2, #0
 801286a:	d1b4      	bne.n	80127d6 <read_submessage_format+0x56>
 801286c:	e7b5      	b.n	80127da <read_submessage_format+0x5a>
 801286e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012870:	a80c      	add	r0, sp, #48	@ 0x30
 8012872:	eba8 0803 	sub.w	r8, r8, r3
 8012876:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801287a:	44a8      	add	r8, r5
 801287c:	1a52      	subs	r2, r2, r1
 801287e:	f7ff fc13 	bl	80120a8 <ucdr_init_buffer>
 8012882:	a80c      	add	r0, sp, #48	@ 0x30
 8012884:	fa1f f888 	uxth.w	r8, r8
 8012888:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801288c:	f7ff fbe0 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 8012890:	ab0c      	add	r3, sp, #48	@ 0x30
 8012892:	2108      	movs	r1, #8
 8012894:	f8cd 8004 	str.w	r8, [sp, #4]
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	463a      	mov	r2, r7
 801289c:	f88d 1016 	strb.w	r1, [sp, #22]
 80128a0:	ab06      	add	r3, sp, #24
 80128a2:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80128a6:	4630      	mov	r0, r6
 80128a8:	9102      	str	r1, [sp, #8]
 80128aa:	9905      	ldr	r1, [sp, #20]
 80128ac:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80128b0:	47b8      	blx	r7
 80128b2:	2301      	movs	r3, #1
 80128b4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80128b8:	e7c4      	b.n	8012844 <read_submessage_format+0xc4>
 80128ba:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80128be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80128c0:	a80c      	add	r0, sp, #48	@ 0x30
 80128c2:	1a52      	subs	r2, r2, r1
 80128c4:	eba8 0803 	sub.w	r8, r8, r3
 80128c8:	f7ff fbee 	bl	80120a8 <ucdr_init_buffer>
 80128cc:	a80c      	add	r0, sp, #48	@ 0x30
 80128ce:	44a8      	add	r8, r5
 80128d0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80128d4:	f7ff fbbc 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 80128d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80128da:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80128de:	fa1f f888 	uxth.w	r8, r8
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	463a      	mov	r2, r7
 80128e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80128ea:	4630      	mov	r0, r6
 80128ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80128f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80128f4:	2107      	movs	r1, #7
 80128f6:	f88d 1016 	strb.w	r1, [sp, #22]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8012900:	9102      	str	r1, [sp, #8]
 8012902:	9905      	ldr	r1, [sp, #20]
 8012904:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8012908:	47b8      	blx	r7
 801290a:	2301      	movs	r3, #1
 801290c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012910:	e7a6      	b.n	8012860 <read_submessage_format+0xe0>
 8012912:	bf00      	nop

08012914 <on_get_fragmentation_info>:
 8012914:	b500      	push	{lr}
 8012916:	b08b      	sub	sp, #44	@ 0x2c
 8012918:	4601      	mov	r1, r0
 801291a:	2204      	movs	r2, #4
 801291c:	a802      	add	r0, sp, #8
 801291e:	f7ff fbc3 	bl	80120a8 <ucdr_init_buffer>
 8012922:	f10d 0305 	add.w	r3, sp, #5
 8012926:	f10d 0206 	add.w	r2, sp, #6
 801292a:	a901      	add	r1, sp, #4
 801292c:	a802      	add	r0, sp, #8
 801292e:	f001 feb3 	bl	8014698 <uxr_read_submessage_header>
 8012932:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012936:	2b0d      	cmp	r3, #13
 8012938:	d003      	beq.n	8012942 <on_get_fragmentation_info+0x2e>
 801293a:	2000      	movs	r0, #0
 801293c:	b00b      	add	sp, #44	@ 0x2c
 801293e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012942:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012946:	f013 0f02 	tst.w	r3, #2
 801294a:	bf14      	ite	ne
 801294c:	2002      	movne	r0, #2
 801294e:	2001      	moveq	r0, #1
 8012950:	b00b      	add	sp, #44	@ 0x2c
 8012952:	f85d fb04 	ldr.w	pc, [sp], #4
 8012956:	bf00      	nop

08012958 <read_submessage_get_info>:
 8012958:	b570      	push	{r4, r5, r6, lr}
 801295a:	2500      	movs	r5, #0
 801295c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8012960:	460e      	mov	r6, r1
 8012962:	4604      	mov	r4, r0
 8012964:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8012968:	4629      	mov	r1, r5
 801296a:	a810      	add	r0, sp, #64	@ 0x40
 801296c:	9503      	str	r5, [sp, #12]
 801296e:	9504      	str	r5, [sp, #16]
 8012970:	f009 fac2 	bl	801bef8 <memset>
 8012974:	a903      	add	r1, sp, #12
 8012976:	4630      	mov	r0, r6
 8012978:	f002 fe5c 	bl	8015634 <uxr_deserialize_GET_INFO_Payload>
 801297c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012980:	4620      	mov	r0, r4
 8012982:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012986:	f001 f879 	bl	8013a7c <uxr_session_header_offset>
 801298a:	462b      	mov	r3, r5
 801298c:	220c      	movs	r2, #12
 801298e:	a905      	add	r1, sp, #20
 8012990:	9000      	str	r0, [sp, #0]
 8012992:	a808      	add	r0, sp, #32
 8012994:	f7ff fb76 	bl	8012084 <ucdr_init_buffer_origin_offset>
 8012998:	a910      	add	r1, sp, #64	@ 0x40
 801299a:	a808      	add	r0, sp, #32
 801299c:	f002 febe 	bl	801571c <uxr_serialize_INFO_Payload>
 80129a0:	9b08      	ldr	r3, [sp, #32]
 80129a2:	462a      	mov	r2, r5
 80129a4:	4629      	mov	r1, r5
 80129a6:	4620      	mov	r0, r4
 80129a8:	f001 f814 	bl	80139d4 <uxr_stamp_session_header>
 80129ac:	a808      	add	r0, sp, #32
 80129ae:	f7ff fba9 	bl	8012104 <ucdr_buffer_length>
 80129b2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80129b4:	4602      	mov	r2, r0
 80129b6:	a905      	add	r1, sp, #20
 80129b8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80129bc:	47a0      	blx	r4
 80129be:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80129c2:	bd70      	pop	{r4, r5, r6, pc}

080129c4 <write_submessage_acknack.isra.0>:
 80129c4:	b570      	push	{r4, r5, r6, lr}
 80129c6:	b092      	sub	sp, #72	@ 0x48
 80129c8:	4605      	mov	r5, r0
 80129ca:	460e      	mov	r6, r1
 80129cc:	4614      	mov	r4, r2
 80129ce:	f001 f855 	bl	8013a7c <uxr_session_header_offset>
 80129d2:	a905      	add	r1, sp, #20
 80129d4:	9000      	str	r0, [sp, #0]
 80129d6:	2300      	movs	r3, #0
 80129d8:	a80a      	add	r0, sp, #40	@ 0x28
 80129da:	2211      	movs	r2, #17
 80129dc:	f7ff fb52 	bl	8012084 <ucdr_init_buffer_origin_offset>
 80129e0:	2218      	movs	r2, #24
 80129e2:	2300      	movs	r3, #0
 80129e4:	210a      	movs	r1, #10
 80129e6:	fb02 5404 	mla	r4, r2, r4, r5
 80129ea:	a80a      	add	r0, sp, #40	@ 0x28
 80129ec:	2205      	movs	r2, #5
 80129ee:	3450      	adds	r4, #80	@ 0x50
 80129f0:	f001 fe38 	bl	8014664 <uxr_buffer_submessage_header>
 80129f4:	a903      	add	r1, sp, #12
 80129f6:	4620      	mov	r0, r4
 80129f8:	f007 fdc2 	bl	801a580 <uxr_compute_acknack>
 80129fc:	ba40      	rev16	r0, r0
 80129fe:	a903      	add	r1, sp, #12
 8012a00:	f88d 6010 	strb.w	r6, [sp, #16]
 8012a04:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012a08:	a80a      	add	r0, sp, #40	@ 0x28
 8012a0a:	f002 fef9 	bl	8015800 <uxr_serialize_ACKNACK_Payload>
 8012a0e:	2200      	movs	r2, #0
 8012a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a12:	4628      	mov	r0, r5
 8012a14:	4611      	mov	r1, r2
 8012a16:	f000 ffdd 	bl	80139d4 <uxr_stamp_session_header>
 8012a1a:	a80a      	add	r0, sp, #40	@ 0x28
 8012a1c:	f7ff fb72 	bl	8012104 <ucdr_buffer_length>
 8012a20:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012a22:	4602      	mov	r2, r0
 8012a24:	a905      	add	r1, sp, #20
 8012a26:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012a2a:	47a0      	blx	r4
 8012a2c:	b012      	add	sp, #72	@ 0x48
 8012a2e:	bd70      	pop	{r4, r5, r6, pc}

08012a30 <uxr_init_session>:
 8012a30:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012a68 <uxr_init_session+0x38>
 8012a34:	2300      	movs	r3, #0
 8012a36:	b510      	push	{r4, lr}
 8012a38:	4604      	mov	r4, r0
 8012a3a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012a3e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012a42:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012a46:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012a4a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8012a4e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012a52:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012a56:	2181      	movs	r1, #129	@ 0x81
 8012a58:	f000 ff20 	bl	801389c <uxr_init_session_info>
 8012a5c:	f104 0008 	add.w	r0, r4, #8
 8012a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a64:	f001 bd1a 	b.w	801449c <uxr_init_stream_storage>
	...

08012a70 <uxr_set_status_callback>:
 8012a70:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop

08012a78 <uxr_set_topic_callback>:
 8012a78:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop

08012a80 <uxr_set_request_callback>:
 8012a80:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012a84:	4770      	bx	lr
 8012a86:	bf00      	nop

08012a88 <uxr_set_reply_callback>:
 8012a88:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop

08012a90 <uxr_create_output_best_effort_stream>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	4604      	mov	r4, r0
 8012a94:	b084      	sub	sp, #16
 8012a96:	e9cd 2100 	strd	r2, r1, [sp]
 8012a9a:	f000 ffef 	bl	8013a7c <uxr_session_header_offset>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	f104 0008 	add.w	r0, r4, #8
 8012aa4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012aa8:	b004      	add	sp, #16
 8012aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aae:	f001 bd3b 	b.w	8014528 <uxr_add_output_best_effort_buffer>
 8012ab2:	bf00      	nop

08012ab4 <uxr_create_output_reliable_stream>:
 8012ab4:	b530      	push	{r4, r5, lr}
 8012ab6:	b089      	sub	sp, #36	@ 0x24
 8012ab8:	4604      	mov	r4, r0
 8012aba:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012abe:	9303      	str	r3, [sp, #12]
 8012ac0:	f000 ffdc 	bl	8013a7c <uxr_session_header_offset>
 8012ac4:	4605      	mov	r5, r0
 8012ac6:	9905      	ldr	r1, [sp, #20]
 8012ac8:	f104 0008 	add.w	r0, r4, #8
 8012acc:	9500      	str	r5, [sp, #0]
 8012ace:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012ad2:	f001 fd3d 	bl	8014550 <uxr_add_output_reliable_buffer>
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	fa5f fc80 	uxtb.w	ip, r0
 8012adc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012ae0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012ae4:	0e03      	lsrs	r3, r0, #24
 8012ae6:	f36c 0207 	bfi	r2, ip, #0, #8
 8012aea:	f364 220f 	bfi	r2, r4, #8, #8
 8012aee:	f361 4217 	bfi	r2, r1, #16, #8
 8012af2:	f363 621f 	bfi	r2, r3, #24, #8
 8012af6:	4610      	mov	r0, r2
 8012af8:	b009      	add	sp, #36	@ 0x24
 8012afa:	bd30      	pop	{r4, r5, pc}

08012afc <uxr_create_input_best_effort_stream>:
 8012afc:	b082      	sub	sp, #8
 8012afe:	3008      	adds	r0, #8
 8012b00:	b002      	add	sp, #8
 8012b02:	f001 bd3f 	b.w	8014584 <uxr_add_input_best_effort_buffer>
 8012b06:	bf00      	nop

08012b08 <uxr_create_input_reliable_stream>:
 8012b08:	b510      	push	{r4, lr}
 8012b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8012b3c <uxr_create_input_reliable_stream+0x34>)
 8012b0c:	b084      	sub	sp, #16
 8012b0e:	3008      	adds	r0, #8
 8012b10:	9400      	str	r4, [sp, #0]
 8012b12:	f001 fd4d 	bl	80145b0 <uxr_add_input_reliable_buffer>
 8012b16:	2200      	movs	r2, #0
 8012b18:	fa5f fe80 	uxtb.w	lr, r0
 8012b1c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8012b20:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012b24:	0e03      	lsrs	r3, r0, #24
 8012b26:	f36e 0207 	bfi	r2, lr, #0, #8
 8012b2a:	f36c 220f 	bfi	r2, ip, #8, #8
 8012b2e:	f361 4217 	bfi	r2, r1, #16, #8
 8012b32:	f363 621f 	bfi	r2, r3, #24, #8
 8012b36:	4610      	mov	r0, r2
 8012b38:	b004      	add	sp, #16
 8012b3a:	bd10      	pop	{r4, pc}
 8012b3c:	08012915 	.word	0x08012915

08012b40 <uxr_epoch_nanos>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	4604      	mov	r4, r0
 8012b44:	f001 fdf0 	bl	8014728 <uxr_nanos>
 8012b48:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012b4c:	1ac0      	subs	r0, r0, r3
 8012b4e:	eb61 0102 	sbc.w	r1, r1, r2
 8012b52:	bd10      	pop	{r4, pc}

08012b54 <uxr_flash_output_streams>:
 8012b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b58:	7e03      	ldrb	r3, [r0, #24]
 8012b5a:	b084      	sub	sp, #16
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	b1fb      	cbz	r3, 8012ba0 <uxr_flash_output_streams+0x4c>
 8012b60:	f04f 0900 	mov.w	r9, #0
 8012b64:	f10d 0802 	add.w	r8, sp, #2
 8012b68:	af03      	add	r7, sp, #12
 8012b6a:	ae02      	add	r6, sp, #8
 8012b6c:	4648      	mov	r0, r9
 8012b6e:	2201      	movs	r2, #1
 8012b70:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012b74:	4611      	mov	r1, r2
 8012b76:	3508      	adds	r5, #8
 8012b78:	f001 fc36 	bl	80143e8 <uxr_stream_id>
 8012b7c:	4684      	mov	ip, r0
 8012b7e:	4643      	mov	r3, r8
 8012b80:	463a      	mov	r2, r7
 8012b82:	4631      	mov	r1, r6
 8012b84:	4628      	mov	r0, r5
 8012b86:	f8cd c004 	str.w	ip, [sp, #4]
 8012b8a:	f007 fd83 	bl	801a694 <uxr_prepare_best_effort_buffer_to_send>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d13d      	bne.n	8012c0e <uxr_flash_output_streams+0xba>
 8012b92:	f109 0901 	add.w	r9, r9, #1
 8012b96:	7e23      	ldrb	r3, [r4, #24]
 8012b98:	fa5f f089 	uxtb.w	r0, r9
 8012b9c:	4283      	cmp	r3, r0
 8012b9e:	d8e6      	bhi.n	8012b6e <uxr_flash_output_streams+0x1a>
 8012ba0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012ba4:	b383      	cbz	r3, 8012c08 <uxr_flash_output_streams+0xb4>
 8012ba6:	f04f 0900 	mov.w	r9, #0
 8012baa:	f10d 0802 	add.w	r8, sp, #2
 8012bae:	af03      	add	r7, sp, #12
 8012bb0:	ae02      	add	r6, sp, #8
 8012bb2:	4648      	mov	r0, r9
 8012bb4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012bb8:	2201      	movs	r2, #1
 8012bba:	2102      	movs	r1, #2
 8012bbc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012bc0:	f001 fc12 	bl	80143e8 <uxr_stream_id>
 8012bc4:	9001      	str	r0, [sp, #4]
 8012bc6:	3520      	adds	r5, #32
 8012bc8:	e00c      	b.n	8012be4 <uxr_flash_output_streams+0x90>
 8012bca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012bce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012bd2:	9b02      	ldr	r3, [sp, #8]
 8012bd4:	f000 fefe 	bl	80139d4 <uxr_stamp_session_header>
 8012bd8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012bda:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012bde:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012be2:	47d0      	blx	sl
 8012be4:	4643      	mov	r3, r8
 8012be6:	463a      	mov	r2, r7
 8012be8:	4631      	mov	r1, r6
 8012bea:	4628      	mov	r0, r5
 8012bec:	f007 ff74 	bl	801aad8 <uxr_prepare_next_reliable_buffer_to_send>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1e8      	bne.n	8012bca <uxr_flash_output_streams+0x76>
 8012bf8:	f109 0901 	add.w	r9, r9, #1
 8012bfc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012c00:	fa5f f089 	uxtb.w	r0, r9
 8012c04:	4283      	cmp	r3, r0
 8012c06:	d8d5      	bhi.n	8012bb4 <uxr_flash_output_streams+0x60>
 8012c08:	b004      	add	sp, #16
 8012c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0e:	9b02      	ldr	r3, [sp, #8]
 8012c10:	4620      	mov	r0, r4
 8012c12:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c16:	f109 0901 	add.w	r9, r9, #1
 8012c1a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012c1e:	f000 fed9 	bl	80139d4 <uxr_stamp_session_header>
 8012c22:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c24:	9a03      	ldr	r2, [sp, #12]
 8012c26:	685d      	ldr	r5, [r3, #4]
 8012c28:	6818      	ldr	r0, [r3, #0]
 8012c2a:	9902      	ldr	r1, [sp, #8]
 8012c2c:	47a8      	blx	r5
 8012c2e:	7e23      	ldrb	r3, [r4, #24]
 8012c30:	fa5f f089 	uxtb.w	r0, r9
 8012c34:	4283      	cmp	r3, r0
 8012c36:	d89a      	bhi.n	8012b6e <uxr_flash_output_streams+0x1a>
 8012c38:	e7b2      	b.n	8012ba0 <uxr_flash_output_streams+0x4c>
 8012c3a:	bf00      	nop

08012c3c <read_submessage_info>:
 8012c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c40:	460d      	mov	r5, r1
 8012c42:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012c46:	4606      	mov	r6, r0
 8012c48:	4669      	mov	r1, sp
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	f002 fc04 	bl	8015458 <uxr_deserialize_BaseObjectReply>
 8012c50:	4604      	mov	r4, r0
 8012c52:	a902      	add	r1, sp, #8
 8012c54:	4628      	mov	r0, r5
 8012c56:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8012c5a:	f7fe f8c1 	bl	8010de0 <ucdr_deserialize_bool>
 8012c5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012c62:	4004      	ands	r4, r0
 8012c64:	b2e4      	uxtb	r4, r4
 8012c66:	b95b      	cbnz	r3, 8012c80 <read_submessage_info+0x44>
 8012c68:	a987      	add	r1, sp, #540	@ 0x21c
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	f7fe f8b8 	bl	8010de0 <ucdr_deserialize_bool>
 8012c70:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012c74:	4680      	mov	r8, r0
 8012c76:	b94b      	cbnz	r3, 8012c8c <read_submessage_info+0x50>
 8012c78:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c80:	a903      	add	r1, sp, #12
 8012c82:	4628      	mov	r0, r5
 8012c84:	f002 fa94 	bl	80151b0 <uxr_deserialize_ObjectVariant>
 8012c88:	4004      	ands	r4, r0
 8012c8a:	e7ed      	b.n	8012c68 <read_submessage_info+0x2c>
 8012c8c:	a988      	add	r1, sp, #544	@ 0x220
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f7fe f8d4 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8012c94:	ea14 0f08 	tst.w	r4, r8
 8012c98:	d0ee      	beq.n	8012c78 <read_submessage_info+0x3c>
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	d0ec      	beq.n	8012c78 <read_submessage_info+0x3c>
 8012c9e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012ca2:	2b0d      	cmp	r3, #13
 8012ca4:	d1e8      	bne.n	8012c78 <read_submessage_info+0x3c>
 8012ca6:	a98a      	add	r1, sp, #552	@ 0x228
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f7fe fe6d 	bl	8011988 <ucdr_deserialize_int16_t>
 8012cae:	b138      	cbz	r0, 8012cc0 <read_submessage_info+0x84>
 8012cb0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	dd06      	ble.n	8012cc6 <read_submessage_info+0x8a>
 8012cb8:	2f00      	cmp	r7, #0
 8012cba:	bf14      	ite	ne
 8012cbc:	2001      	movne	r0, #1
 8012cbe:	2002      	moveq	r0, #2
 8012cc0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8012cc4:	e7d8      	b.n	8012c78 <read_submessage_info+0x3c>
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	e7fa      	b.n	8012cc0 <read_submessage_info+0x84>
 8012cca:	bf00      	nop

08012ccc <read_submessage_list>:
 8012ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	b097      	sub	sp, #92	@ 0x5c
 8012cd4:	460d      	mov	r5, r1
 8012cd6:	4ec1      	ldr	r6, [pc, #772]	@ (8012fdc <read_submessage_list+0x310>)
 8012cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cda:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012cde:	aa0c      	add	r2, sp, #48	@ 0x30
 8012ce0:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	f001 fcd7 	bl	8014698 <uxr_read_submessage_header>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	f000 8142 	beq.w	8012f74 <read_submessage_list+0x2a8>
 8012cf0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012cf4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012cf8:	3b02      	subs	r3, #2
 8012cfa:	2b0d      	cmp	r3, #13
 8012cfc:	d8ed      	bhi.n	8012cda <read_submessage_list+0xe>
 8012cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8012d04 <read_submessage_list+0x38>)
 8012d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d04:	08012f6b 	.word	0x08012f6b
 8012d08:	08012cdb 	.word	0x08012cdb
 8012d0c:	08012f5b 	.word	0x08012f5b
 8012d10:	08012ef9 	.word	0x08012ef9
 8012d14:	08012eef 	.word	0x08012eef
 8012d18:	08012cdb 	.word	0x08012cdb
 8012d1c:	08012cdb 	.word	0x08012cdb
 8012d20:	08012e45 	.word	0x08012e45
 8012d24:	08012dd7 	.word	0x08012dd7
 8012d28:	08012d97 	.word	0x08012d97
 8012d2c:	08012cdb 	.word	0x08012cdb
 8012d30:	08012cdb 	.word	0x08012cdb
 8012d34:	08012cdb 	.word	0x08012cdb
 8012d38:	08012d3d 	.word	0x08012d3d
 8012d3c:	a910      	add	r1, sp, #64	@ 0x40
 8012d3e:	4628      	mov	r0, r5
 8012d40:	f002 fdc0 	bl	80158c4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012d44:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8012d48:	f1b8 0f00 	cmp.w	r8, #0
 8012d4c:	f000 811a 	beq.w	8012f84 <read_submessage_list+0x2b8>
 8012d50:	f001 fcea 	bl	8014728 <uxr_nanos>
 8012d54:	4602      	mov	r2, r0
 8012d56:	460b      	mov	r3, r1
 8012d58:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012d60:	9006      	str	r0, [sp, #24]
 8012d62:	468c      	mov	ip, r1
 8012d64:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8012d66:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012d6a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012d6c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012d70:	468c      	mov	ip, r1
 8012d72:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012d74:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012d78:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8012d7c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8012d80:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012d84:	e9cd 0100 	strd	r0, r1, [sp]
 8012d88:	4620      	mov	r0, r4
 8012d8a:	47c0      	blx	r8
 8012d8c:	f04f 0301 	mov.w	r3, #1
 8012d90:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012d94:	e7a1      	b.n	8012cda <read_submessage_list+0xe>
 8012d96:	a910      	add	r1, sp, #64	@ 0x40
 8012d98:	4628      	mov	r0, r5
 8012d9a:	f002 fd71 	bl	8015880 <uxr_deserialize_HEARTBEAT_Payload>
 8012d9e:	2100      	movs	r1, #0
 8012da0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012da4:	f001 fb4e 	bl	8014444 <uxr_stream_id_from_raw>
 8012da8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012dac:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012dae:	f104 0008 	add.w	r0, r4, #8
 8012db2:	4641      	mov	r1, r8
 8012db4:	f001 fc34 	bl	8014620 <uxr_get_input_reliable_stream>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	d08e      	beq.n	8012cda <read_submessage_list+0xe>
 8012dbc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8012dc0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012dc4:	f007 fbd0 	bl	801a568 <uxr_process_heartbeat>
 8012dc8:	4642      	mov	r2, r8
 8012dca:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f7ff fdf8 	bl	80129c4 <write_submessage_acknack.isra.0>
 8012dd4:	e781      	b.n	8012cda <read_submessage_list+0xe>
 8012dd6:	a910      	add	r1, sp, #64	@ 0x40
 8012dd8:	4628      	mov	r0, r5
 8012dda:	f002 fd29 	bl	8015830 <uxr_deserialize_ACKNACK_Payload>
 8012dde:	2100      	movs	r1, #0
 8012de0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012de4:	f001 fb2e 	bl	8014444 <uxr_stream_id_from_raw>
 8012de8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012dec:	900d      	str	r0, [sp, #52]	@ 0x34
 8012dee:	f104 0008 	add.w	r0, r4, #8
 8012df2:	f001 fbff 	bl	80145f4 <uxr_get_output_reliable_stream>
 8012df6:	4680      	mov	r8, r0
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	f43f af6e 	beq.w	8012cda <read_submessage_list+0xe>
 8012dfe:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012e02:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012e06:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8012e0a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012e0e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012e12:	b289      	uxth	r1, r1
 8012e14:	f007 ff08 	bl	801ac28 <uxr_process_acknack>
 8012e18:	4640      	mov	r0, r8
 8012e1a:	f007 fec9 	bl	801abb0 <uxr_begin_output_nack_buffer_it>
 8012e1e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012e22:	e005      	b.n	8012e30 <read_submessage_list+0x164>
 8012e24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012e26:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8012e2a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8012e2e:	47c8      	blx	r9
 8012e30:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012e34:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012e36:	4651      	mov	r1, sl
 8012e38:	4640      	mov	r0, r8
 8012e3a:	f007 febb 	bl	801abb4 <uxr_next_reliable_nack_buffer_to_send>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	d1f0      	bne.n	8012e24 <read_submessage_list+0x158>
 8012e42:	e74a      	b.n	8012cda <read_submessage_list+0xe>
 8012e44:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012e48:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012e4c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8012e50:	4628      	mov	r0, r5
 8012e52:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012e56:	4651      	mov	r1, sl
 8012e58:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012e5c:	f1a8 0804 	sub.w	r8, r8, #4
 8012e60:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012e64:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012e68:	fa1f f888 	uxth.w	r8, r8
 8012e6c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012e70:	f009 090e 	and.w	r9, r9, #14
 8012e74:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012e78:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012e7c:	f002 fa3a 	bl	80152f4 <uxr_deserialize_BaseObjectRequest>
 8012e80:	4650      	mov	r0, sl
 8012e82:	a90f      	add	r1, sp, #60	@ 0x3c
 8012e84:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012e88:	f000 fe20 	bl	8013acc <uxr_parse_base_object_request>
 8012e8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012e8e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012e92:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012e96:	9110      	str	r1, [sp, #64]	@ 0x40
 8012e98:	f1bb 0f00 	cmp.w	fp, #0
 8012e9c:	d006      	beq.n	8012eac <read_submessage_list+0x1e0>
 8012e9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012ea2:	4652      	mov	r2, sl
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	9300      	str	r3, [sp, #0]
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	47d8      	blx	fp
 8012eac:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012eae:	b182      	cbz	r2, 8012ed2 <read_submessage_list+0x206>
 8012eb0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8012eb2:	f04f 0c00 	mov.w	ip, #0
 8012eb6:	3902      	subs	r1, #2
 8012eb8:	e003      	b.n	8012ec2 <read_submessage_list+0x1f6>
 8012eba:	f10c 0c01 	add.w	ip, ip, #1
 8012ebe:	4594      	cmp	ip, r2
 8012ec0:	d007      	beq.n	8012ed2 <read_submessage_list+0x206>
 8012ec2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012ec6:	4553      	cmp	r3, sl
 8012ec8:	d1f7      	bne.n	8012eba <read_submessage_list+0x1ee>
 8012eca:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f803 200c 	strb.w	r2, [r3, ip]
 8012ed2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012ed6:	464b      	mov	r3, r9
 8012ed8:	4642      	mov	r2, r8
 8012eda:	4620      	mov	r0, r4
 8012edc:	9102      	str	r1, [sp, #8]
 8012ede:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012ee0:	9101      	str	r1, [sp, #4]
 8012ee2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012ee4:	9100      	str	r1, [sp, #0]
 8012ee6:	4629      	mov	r1, r5
 8012ee8:	f7ff fc4a 	bl	8012780 <read_submessage_format>
 8012eec:	e6f5      	b.n	8012cda <read_submessage_list+0xe>
 8012eee:	4629      	mov	r1, r5
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f7ff fea3 	bl	8012c3c <read_submessage_info>
 8012ef6:	e6f0      	b.n	8012cda <read_submessage_list+0xe>
 8012ef8:	2a00      	cmp	r2, #0
 8012efa:	d03e      	beq.n	8012f7a <read_submessage_list+0x2ae>
 8012efc:	a910      	add	r1, sp, #64	@ 0x40
 8012efe:	4628      	mov	r0, r5
 8012f00:	f002 fbee 	bl	80156e0 <uxr_deserialize_STATUS_Payload>
 8012f04:	a90e      	add	r1, sp, #56	@ 0x38
 8012f06:	aa0d      	add	r2, sp, #52	@ 0x34
 8012f08:	a810      	add	r0, sp, #64	@ 0x40
 8012f0a:	f000 fddf 	bl	8013acc <uxr_parse_base_object_request>
 8012f0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012f10:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012f14:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012f18:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8012f1c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012f1e:	f1ba 0f00 	cmp.w	sl, #0
 8012f22:	d006      	beq.n	8012f32 <read_submessage_list+0x266>
 8012f24:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012f28:	4642      	mov	r2, r8
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	464b      	mov	r3, r9
 8012f30:	47d0      	blx	sl
 8012f32:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012f34:	2a00      	cmp	r2, #0
 8012f36:	f43f aed0 	beq.w	8012cda <read_submessage_list+0xe>
 8012f3a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	3802      	subs	r0, #2
 8012f40:	e003      	b.n	8012f4a <read_submessage_list+0x27e>
 8012f42:	3101      	adds	r1, #1
 8012f44:	4291      	cmp	r1, r2
 8012f46:	f43f aec8 	beq.w	8012cda <read_submessage_list+0xe>
 8012f4a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012f4e:	4543      	cmp	r3, r8
 8012f50:	d1f7      	bne.n	8012f42 <read_submessage_list+0x276>
 8012f52:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012f54:	f803 9001 	strb.w	r9, [r3, r1]
 8012f58:	e6bf      	b.n	8012cda <read_submessage_list+0xe>
 8012f5a:	2a00      	cmp	r2, #0
 8012f5c:	f47f aebd 	bne.w	8012cda <read_submessage_list+0xe>
 8012f60:	4629      	mov	r1, r5
 8012f62:	4620      	mov	r0, r4
 8012f64:	f000 fcf6 	bl	8013954 <uxr_read_create_session_status>
 8012f68:	e6b7      	b.n	8012cda <read_submessage_list+0xe>
 8012f6a:	4629      	mov	r1, r5
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7ff fcf3 	bl	8012958 <read_submessage_get_info>
 8012f72:	e6b2      	b.n	8012cda <read_submessage_list+0xe>
 8012f74:	b017      	add	sp, #92	@ 0x5c
 8012f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f000 fcf7 	bl	8013970 <uxr_read_delete_session_status>
 8012f82:	e6aa      	b.n	8012cda <read_submessage_list+0xe>
 8012f84:	f001 fbd0 	bl	8014728 <uxr_nanos>
 8012f88:	4642      	mov	r2, r8
 8012f8a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012f8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012f8e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012f92:	1818      	adds	r0, r3, r0
 8012f94:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012f96:	eb42 0101 	adc.w	r1, r2, r1
 8012f9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012f9c:	4642      	mov	r2, r8
 8012f9e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012fa2:	469c      	mov	ip, r3
 8012fa4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8012fa8:	fbc3 7806 	smlal	r7, r8, r3, r6
 8012fac:	4643      	mov	r3, r8
 8012fae:	eb1c 0c07 	adds.w	ip, ip, r7
 8012fb2:	eb42 0203 	adc.w	r2, r2, r3
 8012fb6:	ebb0 030c 	subs.w	r3, r0, ip
 8012fba:	eb61 0202 	sbc.w	r2, r1, r2
 8012fbe:	2a00      	cmp	r2, #0
 8012fc0:	db08      	blt.n	8012fd4 <read_submessage_list+0x308>
 8012fc2:	085b      	lsrs	r3, r3, #1
 8012fc4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012fc8:	1052      	asrs	r2, r2, #1
 8012fca:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8012fce:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8012fd2:	e6db      	b.n	8012d8c <read_submessage_list+0xc0>
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	f142 0200 	adc.w	r2, r2, #0
 8012fda:	e7f2      	b.n	8012fc2 <read_submessage_list+0x2f6>
 8012fdc:	3b9aca00 	.word	0x3b9aca00

08012fe0 <listen_message_reliably>:
 8012fe0:	1e0b      	subs	r3, r1, #0
 8012fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe6:	bfb8      	it	lt
 8012fe8:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8012fec:	b09d      	sub	sp, #116	@ 0x74
 8012fee:	4680      	mov	r8, r0
 8012ff0:	9305      	str	r3, [sp, #20]
 8012ff2:	f001 fb7d 	bl	80146f0 <uxr_millis>
 8012ff6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8012ffa:	4681      	mov	r9, r0
 8012ffc:	2a00      	cmp	r2, #0
 8012ffe:	f000 809a 	beq.w	8013136 <listen_message_reliably+0x156>
 8013002:	2600      	movs	r6, #0
 8013004:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013008:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801300c:	460f      	mov	r7, r1
 801300e:	4630      	mov	r0, r6
 8013010:	9303      	str	r3, [sp, #12]
 8013012:	e00e      	b.n	8013032 <listen_message_reliably+0x52>
 8013014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013016:	3601      	adds	r6, #1
 8013018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801301a:	455a      	cmp	r2, fp
 801301c:	9903      	ldr	r1, [sp, #12]
 801301e:	b2f0      	uxtb	r0, r6
 8013020:	eb73 0101 	sbcs.w	r1, r3, r1
 8013024:	da01      	bge.n	801302a <listen_message_reliably+0x4a>
 8013026:	4693      	mov	fp, r2
 8013028:	9303      	str	r3, [sp, #12]
 801302a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801302e:	4283      	cmp	r3, r0
 8013030:	d95f      	bls.n	80130f2 <listen_message_reliably+0x112>
 8013032:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013036:	2102      	movs	r1, #2
 8013038:	2201      	movs	r2, #1
 801303a:	00e4      	lsls	r4, r4, #3
 801303c:	f001 f9d4 	bl	80143e8 <uxr_stream_id>
 8013040:	4601      	mov	r1, r0
 8013042:	f104 0520 	add.w	r5, r4, #32
 8013046:	463b      	mov	r3, r7
 8013048:	464a      	mov	r2, r9
 801304a:	9109      	str	r1, [sp, #36]	@ 0x24
 801304c:	4445      	add	r5, r8
 801304e:	4628      	mov	r0, r5
 8013050:	f007 fd82 	bl	801ab58 <uxr_update_output_stream_heartbeat_timestamp>
 8013054:	eb08 0304 	add.w	r3, r8, r4
 8013058:	2800      	cmp	r0, #0
 801305a:	d0db      	beq.n	8013014 <listen_message_reliably+0x34>
 801305c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013060:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013064:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013068:	4640      	mov	r0, r8
 801306a:	3501      	adds	r5, #1
 801306c:	4444      	add	r4, r8
 801306e:	9304      	str	r3, [sp, #16]
 8013070:	f000 fd04 	bl	8013a7c <uxr_session_header_offset>
 8013074:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013078:	2300      	movs	r3, #0
 801307a:	2211      	movs	r2, #17
 801307c:	a90c      	add	r1, sp, #48	@ 0x30
 801307e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013082:	9000      	str	r0, [sp, #0]
 8013084:	4650      	mov	r0, sl
 8013086:	3601      	adds	r6, #1
 8013088:	f7fe fffc 	bl	8012084 <ucdr_init_buffer_origin_offset>
 801308c:	2300      	movs	r3, #0
 801308e:	2205      	movs	r2, #5
 8013090:	210b      	movs	r1, #11
 8013092:	4650      	mov	r0, sl
 8013094:	f001 fae6 	bl	8014664 <uxr_buffer_submessage_header>
 8013098:	2101      	movs	r1, #1
 801309a:	8968      	ldrh	r0, [r5, #10]
 801309c:	f007 fe20 	bl	801ace0 <uxr_seq_num_add>
 80130a0:	892b      	ldrh	r3, [r5, #8]
 80130a2:	4602      	mov	r2, r0
 80130a4:	a90a      	add	r1, sp, #40	@ 0x28
 80130a6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80130aa:	4650      	mov	r0, sl
 80130ac:	9b04      	ldr	r3, [sp, #16]
 80130ae:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80130b2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80130b6:	f002 fbcf 	bl	8015858 <uxr_serialize_HEARTBEAT_Payload>
 80130ba:	2200      	movs	r2, #0
 80130bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80130be:	4640      	mov	r0, r8
 80130c0:	4611      	mov	r1, r2
 80130c2:	f000 fc87 	bl	80139d4 <uxr_stamp_session_header>
 80130c6:	4650      	mov	r0, sl
 80130c8:	f7ff f81c 	bl	8012104 <ucdr_buffer_length>
 80130cc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80130d0:	4602      	mov	r2, r0
 80130d2:	a90c      	add	r1, sp, #48	@ 0x30
 80130d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80130d8:	47a8      	blx	r5
 80130da:	9903      	ldr	r1, [sp, #12]
 80130dc:	b2f0      	uxtb	r0, r6
 80130de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80130e2:	455a      	cmp	r2, fp
 80130e4:	eb73 0101 	sbcs.w	r1, r3, r1
 80130e8:	db9d      	blt.n	8013026 <listen_message_reliably+0x46>
 80130ea:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80130ee:	4283      	cmp	r3, r0
 80130f0:	d89f      	bhi.n	8013032 <listen_message_reliably+0x52>
 80130f2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80130f6:	9a03      	ldr	r2, [sp, #12]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	bf08      	it	eq
 80130fc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013100:	d019      	beq.n	8013136 <listen_message_reliably+0x156>
 8013102:	ebab 0309 	sub.w	r3, fp, r9
 8013106:	2b00      	cmp	r3, #0
 8013108:	9d05      	ldr	r5, [sp, #20]
 801310a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801310e:	aa08      	add	r2, sp, #32
 8013110:	bf08      	it	eq
 8013112:	2301      	moveq	r3, #1
 8013114:	a907      	add	r1, sp, #28
 8013116:	6884      	ldr	r4, [r0, #8]
 8013118:	429d      	cmp	r5, r3
 801311a:	6800      	ldr	r0, [r0, #0]
 801311c:	bfa8      	it	ge
 801311e:	461d      	movge	r5, r3
 8013120:	462b      	mov	r3, r5
 8013122:	47a0      	blx	r4
 8013124:	b948      	cbnz	r0, 801313a <listen_message_reliably+0x15a>
 8013126:	9b05      	ldr	r3, [sp, #20]
 8013128:	1b5b      	subs	r3, r3, r5
 801312a:	2b00      	cmp	r3, #0
 801312c:	9305      	str	r3, [sp, #20]
 801312e:	f73f af60 	bgt.w	8012ff2 <listen_message_reliably+0x12>
 8013132:	4604      	mov	r4, r0
 8013134:	e012      	b.n	801315c <listen_message_reliably+0x17c>
 8013136:	9b05      	ldr	r3, [sp, #20]
 8013138:	e7e5      	b.n	8013106 <listen_message_reliably+0x126>
 801313a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801313e:	4604      	mov	r4, r0
 8013140:	2500      	movs	r5, #0
 8013142:	a80c      	add	r0, sp, #48	@ 0x30
 8013144:	f7fe ffb0 	bl	80120a8 <ucdr_init_buffer>
 8013148:	f10d 031a 	add.w	r3, sp, #26
 801314c:	aa06      	add	r2, sp, #24
 801314e:	a90c      	add	r1, sp, #48	@ 0x30
 8013150:	4640      	mov	r0, r8
 8013152:	f88d 5018 	strb.w	r5, [sp, #24]
 8013156:	f000 fc51 	bl	80139fc <uxr_read_session_header>
 801315a:	b918      	cbnz	r0, 8013164 <listen_message_reliably+0x184>
 801315c:	4620      	mov	r0, r4
 801315e:	b01d      	add	sp, #116	@ 0x74
 8013160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013164:	4629      	mov	r1, r5
 8013166:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801316a:	f001 f96b 	bl	8014444 <uxr_stream_id_from_raw>
 801316e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8013172:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013176:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801317a:	2e01      	cmp	r6, #1
 801317c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013180:	d04b      	beq.n	801321a <listen_message_reliably+0x23a>
 8013182:	2e02      	cmp	r6, #2
 8013184:	d00f      	beq.n	80131a6 <listen_message_reliably+0x1c6>
 8013186:	2e00      	cmp	r6, #0
 8013188:	d1e8      	bne.n	801315c <listen_message_reliably+0x17c>
 801318a:	4631      	mov	r1, r6
 801318c:	4630      	mov	r0, r6
 801318e:	f001 f959 	bl	8014444 <uxr_stream_id_from_raw>
 8013192:	4602      	mov	r2, r0
 8013194:	a90c      	add	r1, sp, #48	@ 0x30
 8013196:	4640      	mov	r0, r8
 8013198:	920a      	str	r2, [sp, #40]	@ 0x28
 801319a:	f7ff fd97 	bl	8012ccc <read_submessage_list>
 801319e:	4620      	mov	r0, r4
 80131a0:	b01d      	add	sp, #116	@ 0x74
 80131a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a6:	4629      	mov	r1, r5
 80131a8:	f108 0008 	add.w	r0, r8, #8
 80131ac:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80131b0:	f001 fa36 	bl	8014620 <uxr_get_input_reliable_stream>
 80131b4:	4607      	mov	r7, r0
 80131b6:	b338      	cbz	r0, 8013208 <listen_message_reliably+0x228>
 80131b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131ba:	a80c      	add	r0, sp, #48	@ 0x30
 80131bc:	9203      	str	r2, [sp, #12]
 80131be:	f7fe ffa5 	bl	801210c <ucdr_buffer_remaining>
 80131c2:	4603      	mov	r3, r0
 80131c4:	f10d 0019 	add.w	r0, sp, #25
 80131c8:	9a03      	ldr	r2, [sp, #12]
 80131ca:	4651      	mov	r1, sl
 80131cc:	9000      	str	r0, [sp, #0]
 80131ce:	4638      	mov	r0, r7
 80131d0:	f007 f8ce 	bl	801a370 <uxr_receive_reliable_message>
 80131d4:	b1c0      	cbz	r0, 8013208 <listen_message_reliably+0x228>
 80131d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80131da:	b393      	cbz	r3, 8013242 <listen_message_reliably+0x262>
 80131dc:	ae14      	add	r6, sp, #80	@ 0x50
 80131de:	f04f 0a02 	mov.w	sl, #2
 80131e2:	e00a      	b.n	80131fa <listen_message_reliably+0x21a>
 80131e4:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80131e8:	4631      	mov	r1, r6
 80131ea:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80131ee:	4640      	mov	r0, r8
 80131f0:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80131f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80131f6:	f7ff fd69 	bl	8012ccc <read_submessage_list>
 80131fa:	2204      	movs	r2, #4
 80131fc:	4631      	mov	r1, r6
 80131fe:	4638      	mov	r0, r7
 8013200:	f007 f938 	bl	801a474 <uxr_next_input_reliable_buffer_available>
 8013204:	2800      	cmp	r0, #0
 8013206:	d1ed      	bne.n	80131e4 <listen_message_reliably+0x204>
 8013208:	4640      	mov	r0, r8
 801320a:	462a      	mov	r2, r5
 801320c:	4649      	mov	r1, r9
 801320e:	f7ff fbd9 	bl	80129c4 <write_submessage_acknack.isra.0>
 8013212:	4620      	mov	r0, r4
 8013214:	b01d      	add	sp, #116	@ 0x74
 8013216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801321a:	4629      	mov	r1, r5
 801321c:	f108 0008 	add.w	r0, r8, #8
 8013220:	f001 f9f4 	bl	801460c <uxr_get_input_best_effort_stream>
 8013224:	2800      	cmp	r0, #0
 8013226:	d099      	beq.n	801315c <listen_message_reliably+0x17c>
 8013228:	4651      	mov	r1, sl
 801322a:	f007 f817 	bl	801a25c <uxr_receive_best_effort_message>
 801322e:	2800      	cmp	r0, #0
 8013230:	d094      	beq.n	801315c <listen_message_reliably+0x17c>
 8013232:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013236:	a90c      	add	r1, sp, #48	@ 0x30
 8013238:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801323a:	4640      	mov	r0, r8
 801323c:	f7ff fd46 	bl	8012ccc <read_submessage_list>
 8013240:	e78c      	b.n	801315c <listen_message_reliably+0x17c>
 8013242:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013246:	a90c      	add	r1, sp, #48	@ 0x30
 8013248:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801324a:	4640      	mov	r0, r8
 801324c:	f7ff fd3e 	bl	8012ccc <read_submessage_list>
 8013250:	e7c4      	b.n	80131dc <listen_message_reliably+0x1fc>
 8013252:	bf00      	nop

08013254 <uxr_run_session_timeout>:
 8013254:	b570      	push	{r4, r5, r6, lr}
 8013256:	4604      	mov	r4, r0
 8013258:	460d      	mov	r5, r1
 801325a:	f001 fa49 	bl	80146f0 <uxr_millis>
 801325e:	4606      	mov	r6, r0
 8013260:	4620      	mov	r0, r4
 8013262:	f7ff fc77 	bl	8012b54 <uxr_flash_output_streams>
 8013266:	4629      	mov	r1, r5
 8013268:	4620      	mov	r0, r4
 801326a:	f7ff feb9 	bl	8012fe0 <listen_message_reliably>
 801326e:	f001 fa3f 	bl	80146f0 <uxr_millis>
 8013272:	1b83      	subs	r3, r0, r6
 8013274:	1ae9      	subs	r1, r5, r3
 8013276:	2900      	cmp	r1, #0
 8013278:	dcf6      	bgt.n	8013268 <uxr_run_session_timeout+0x14>
 801327a:	f104 0008 	add.w	r0, r4, #8
 801327e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013282:	f001 b9d9 	b.w	8014638 <uxr_output_streams_confirmed>
 8013286:	bf00      	nop

08013288 <uxr_run_session_until_data>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	4604      	mov	r4, r0
 801328c:	460d      	mov	r5, r1
 801328e:	f001 fa2f 	bl	80146f0 <uxr_millis>
 8013292:	4606      	mov	r6, r0
 8013294:	4620      	mov	r0, r4
 8013296:	f7ff fc5d 	bl	8012b54 <uxr_flash_output_streams>
 801329a:	2300      	movs	r3, #0
 801329c:	4629      	mov	r1, r5
 801329e:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80132a2:	e005      	b.n	80132b0 <uxr_run_session_until_data+0x28>
 80132a4:	f001 fa24 	bl	80146f0 <uxr_millis>
 80132a8:	1b83      	subs	r3, r0, r6
 80132aa:	1ae9      	subs	r1, r5, r3
 80132ac:	2900      	cmp	r1, #0
 80132ae:	dd07      	ble.n	80132c0 <uxr_run_session_until_data+0x38>
 80132b0:	4620      	mov	r0, r4
 80132b2:	f7ff fe95 	bl	8012fe0 <listen_message_reliably>
 80132b6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d0f2      	beq.n	80132a4 <uxr_run_session_until_data+0x1c>
 80132be:	bd70      	pop	{r4, r5, r6, pc}
 80132c0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80132c4:	bd70      	pop	{r4, r5, r6, pc}
 80132c6:	bf00      	nop

080132c8 <uxr_run_session_until_confirm_delivery>:
 80132c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132cc:	4606      	mov	r6, r0
 80132ce:	460d      	mov	r5, r1
 80132d0:	f001 fa0e 	bl	80146f0 <uxr_millis>
 80132d4:	4607      	mov	r7, r0
 80132d6:	4630      	mov	r0, r6
 80132d8:	f106 0808 	add.w	r8, r6, #8
 80132dc:	f7ff fc3a 	bl	8012b54 <uxr_flash_output_streams>
 80132e0:	2d00      	cmp	r5, #0
 80132e2:	db10      	blt.n	8013306 <uxr_run_session_until_confirm_delivery+0x3e>
 80132e4:	462c      	mov	r4, r5
 80132e6:	e006      	b.n	80132f6 <uxr_run_session_until_confirm_delivery+0x2e>
 80132e8:	f7ff fe7a 	bl	8012fe0 <listen_message_reliably>
 80132ec:	f001 fa00 	bl	80146f0 <uxr_millis>
 80132f0:	1bc3      	subs	r3, r0, r7
 80132f2:	1aec      	subs	r4, r5, r3
 80132f4:	d407      	bmi.n	8013306 <uxr_run_session_until_confirm_delivery+0x3e>
 80132f6:	4640      	mov	r0, r8
 80132f8:	f001 f99e 	bl	8014638 <uxr_output_streams_confirmed>
 80132fc:	4603      	mov	r3, r0
 80132fe:	4621      	mov	r1, r4
 8013300:	4630      	mov	r0, r6
 8013302:	2b00      	cmp	r3, #0
 8013304:	d0f0      	beq.n	80132e8 <uxr_run_session_until_confirm_delivery+0x20>
 8013306:	4640      	mov	r0, r8
 8013308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801330c:	f001 b994 	b.w	8014638 <uxr_output_streams_confirmed>

08013310 <uxr_run_session_until_all_status>:
 8013310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8013318:	4606      	mov	r6, r0
 801331a:	4688      	mov	r8, r1
 801331c:	4692      	mov	sl, r2
 801331e:	461f      	mov	r7, r3
 8013320:	f7ff fc18 	bl	8012b54 <uxr_flash_output_streams>
 8013324:	f1bb 0f00 	cmp.w	fp, #0
 8013328:	d004      	beq.n	8013334 <uxr_run_session_until_all_status+0x24>
 801332a:	465a      	mov	r2, fp
 801332c:	21ff      	movs	r1, #255	@ 0xff
 801332e:	4638      	mov	r0, r7
 8013330:	f008 fde2 	bl	801bef8 <memset>
 8013334:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8013338:	1e7d      	subs	r5, r7, #1
 801333a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801333e:	f001 f9d7 	bl	80146f0 <uxr_millis>
 8013342:	4641      	mov	r1, r8
 8013344:	4681      	mov	r9, r0
 8013346:	4630      	mov	r0, r6
 8013348:	f7ff fe4a 	bl	8012fe0 <listen_message_reliably>
 801334c:	f001 f9d0 	bl	80146f0 <uxr_millis>
 8013350:	eba0 0009 	sub.w	r0, r0, r9
 8013354:	eba8 0100 	sub.w	r1, r8, r0
 8013358:	f1bb 0f00 	cmp.w	fp, #0
 801335c:	d029      	beq.n	80133b2 <uxr_run_session_until_all_status+0xa2>
 801335e:	46ae      	mov	lr, r5
 8013360:	f04f 0c00 	mov.w	ip, #0
 8013364:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8013368:	2cff      	cmp	r4, #255	@ 0xff
 801336a:	d015      	beq.n	8013398 <uxr_run_session_until_all_status+0x88>
 801336c:	f10c 0c01 	add.w	ip, ip, #1
 8013370:	45e3      	cmp	fp, ip
 8013372:	d8f7      	bhi.n	8013364 <uxr_run_session_until_all_status+0x54>
 8013374:	2300      	movs	r3, #0
 8013376:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8013378:	e000      	b.n	801337c <uxr_run_session_until_all_status+0x6c>
 801337a:	b158      	cbz	r0, 8013394 <uxr_run_session_until_all_status+0x84>
 801337c:	462b      	mov	r3, r5
 801337e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8013382:	3302      	adds	r3, #2
 8013384:	2801      	cmp	r0, #1
 8013386:	eba3 0307 	sub.w	r3, r3, r7
 801338a:	bf8c      	ite	hi
 801338c:	2000      	movhi	r0, #0
 801338e:	2001      	movls	r0, #1
 8013390:	459b      	cmp	fp, r3
 8013392:	d8f2      	bhi.n	801337a <uxr_run_session_until_all_status+0x6a>
 8013394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013398:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801339c:	f10c 0c01 	add.w	ip, ip, #1
 80133a0:	45dc      	cmp	ip, fp
 80133a2:	d201      	bcs.n	80133a8 <uxr_run_session_until_all_status+0x98>
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d0dd      	beq.n	8013364 <uxr_run_session_until_all_status+0x54>
 80133a8:	2900      	cmp	r1, #0
 80133aa:	dde3      	ble.n	8013374 <uxr_run_session_until_all_status+0x64>
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d1ca      	bne.n	8013346 <uxr_run_session_until_all_status+0x36>
 80133b0:	e7e0      	b.n	8013374 <uxr_run_session_until_all_status+0x64>
 80133b2:	2001      	movs	r0, #1
 80133b4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80133b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133bc:	0000      	movs	r0, r0
	...

080133c0 <uxr_sync_session>:
 80133c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133c2:	b093      	sub	sp, #76	@ 0x4c
 80133c4:	4604      	mov	r4, r0
 80133c6:	460d      	mov	r5, r1
 80133c8:	f000 fb58 	bl	8013a7c <uxr_session_header_offset>
 80133cc:	2214      	movs	r2, #20
 80133ce:	2300      	movs	r3, #0
 80133d0:	9000      	str	r0, [sp, #0]
 80133d2:	a80a      	add	r0, sp, #40	@ 0x28
 80133d4:	eb0d 0102 	add.w	r1, sp, r2
 80133d8:	f7fe fe54 	bl	8012084 <ucdr_init_buffer_origin_offset>
 80133dc:	2300      	movs	r3, #0
 80133de:	2208      	movs	r2, #8
 80133e0:	210e      	movs	r1, #14
 80133e2:	a80a      	add	r0, sp, #40	@ 0x28
 80133e4:	f001 f93e 	bl	8014664 <uxr_buffer_submessage_header>
 80133e8:	f001 f99e 	bl	8014728 <uxr_nanos>
 80133ec:	460e      	mov	r6, r1
 80133ee:	4607      	mov	r7, r0
 80133f0:	a31b      	add	r3, pc, #108	@ (adr r3, 8013460 <uxr_sync_session+0xa0>)
 80133f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f6:	f7ec ffdb 	bl	80003b0 <__aeabi_ldivmod>
 80133fa:	4631      	mov	r1, r6
 80133fc:	9003      	str	r0, [sp, #12]
 80133fe:	4638      	mov	r0, r7
 8013400:	a317      	add	r3, pc, #92	@ (adr r3, 8013460 <uxr_sync_session+0xa0>)
 8013402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013406:	f7ec ffd3 	bl	80003b0 <__aeabi_ldivmod>
 801340a:	a903      	add	r1, sp, #12
 801340c:	a80a      	add	r0, sp, #40	@ 0x28
 801340e:	9204      	str	r2, [sp, #16]
 8013410:	f002 fa4a 	bl	80158a8 <uxr_serialize_TIMESTAMP_Payload>
 8013414:	2200      	movs	r2, #0
 8013416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013418:	4620      	mov	r0, r4
 801341a:	4611      	mov	r1, r2
 801341c:	f000 fada 	bl	80139d4 <uxr_stamp_session_header>
 8013420:	a80a      	add	r0, sp, #40	@ 0x28
 8013422:	f7fe fe6f 	bl	8012104 <ucdr_buffer_length>
 8013426:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013428:	4602      	mov	r2, r0
 801342a:	a905      	add	r1, sp, #20
 801342c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8013430:	47b0      	blx	r6
 8013432:	f001 f95d 	bl	80146f0 <uxr_millis>
 8013436:	2300      	movs	r3, #0
 8013438:	4606      	mov	r6, r0
 801343a:	4629      	mov	r1, r5
 801343c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8013440:	e000      	b.n	8013444 <uxr_sync_session+0x84>
 8013442:	b950      	cbnz	r0, 801345a <uxr_sync_session+0x9a>
 8013444:	4620      	mov	r0, r4
 8013446:	f7ff fdcb 	bl	8012fe0 <listen_message_reliably>
 801344a:	f001 f951 	bl	80146f0 <uxr_millis>
 801344e:	1b83      	subs	r3, r0, r6
 8013450:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8013454:	1ae9      	subs	r1, r5, r3
 8013456:	2900      	cmp	r1, #0
 8013458:	dcf3      	bgt.n	8013442 <uxr_sync_session+0x82>
 801345a:	b013      	add	sp, #76	@ 0x4c
 801345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801345e:	bf00      	nop
 8013460:	3b9aca00 	.word	0x3b9aca00
 8013464:	00000000 	.word	0x00000000

08013468 <wait_session_status>:
 8013468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	4604      	mov	r4, r0
 801346e:	b09d      	sub	sp, #116	@ 0x74
 8013470:	20ff      	movs	r0, #255	@ 0xff
 8013472:	9303      	str	r3, [sp, #12]
 8013474:	7160      	strb	r0, [r4, #5]
 8013476:	2b00      	cmp	r3, #0
 8013478:	f000 80b6 	beq.w	80135e8 <wait_session_status+0x180>
 801347c:	4689      	mov	r9, r1
 801347e:	4692      	mov	sl, r2
 8013480:	f04f 0b00 	mov.w	fp, #0
 8013484:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013486:	4652      	mov	r2, sl
 8013488:	4649      	mov	r1, r9
 801348a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801348e:	47a8      	blx	r5
 8013490:	f001 f92e 	bl	80146f0 <uxr_millis>
 8013494:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013498:	4605      	mov	r5, r0
 801349a:	e009      	b.n	80134b0 <wait_session_status+0x48>
 801349c:	f001 f928 	bl	80146f0 <uxr_millis>
 80134a0:	1b40      	subs	r0, r0, r5
 80134a2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	dd40      	ble.n	801352c <wait_session_status+0xc4>
 80134aa:	7960      	ldrb	r0, [r4, #5]
 80134ac:	28ff      	cmp	r0, #255	@ 0xff
 80134ae:	d145      	bne.n	801353c <wait_session_status+0xd4>
 80134b0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80134b2:	a908      	add	r1, sp, #32
 80134b4:	6896      	ldr	r6, [r2, #8]
 80134b6:	6810      	ldr	r0, [r2, #0]
 80134b8:	aa09      	add	r2, sp, #36	@ 0x24
 80134ba:	47b0      	blx	r6
 80134bc:	2800      	cmp	r0, #0
 80134be:	d0ed      	beq.n	801349c <wait_session_status+0x34>
 80134c0:	a80c      	add	r0, sp, #48	@ 0x30
 80134c2:	2600      	movs	r6, #0
 80134c4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80134c8:	f7fe fdee 	bl	80120a8 <ucdr_init_buffer>
 80134cc:	f10d 031e 	add.w	r3, sp, #30
 80134d0:	aa07      	add	r2, sp, #28
 80134d2:	a90c      	add	r1, sp, #48	@ 0x30
 80134d4:	4620      	mov	r0, r4
 80134d6:	f88d 601c 	strb.w	r6, [sp, #28]
 80134da:	f000 fa8f 	bl	80139fc <uxr_read_session_header>
 80134de:	2800      	cmp	r0, #0
 80134e0:	d0dc      	beq.n	801349c <wait_session_status+0x34>
 80134e2:	4631      	mov	r1, r6
 80134e4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80134e8:	f000 ffac 	bl	8014444 <uxr_stream_id_from_raw>
 80134ec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80134f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80134f4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80134f8:	2f01      	cmp	r7, #1
 80134fa:	9302      	str	r3, [sp, #8]
 80134fc:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8013500:	d05c      	beq.n	80135bc <wait_session_status+0x154>
 8013502:	2f02      	cmp	r7, #2
 8013504:	d020      	beq.n	8013548 <wait_session_status+0xe0>
 8013506:	2f00      	cmp	r7, #0
 8013508:	d1c8      	bne.n	801349c <wait_session_status+0x34>
 801350a:	4639      	mov	r1, r7
 801350c:	4638      	mov	r0, r7
 801350e:	f000 ff99 	bl	8014444 <uxr_stream_id_from_raw>
 8013512:	a90c      	add	r1, sp, #48	@ 0x30
 8013514:	4602      	mov	r2, r0
 8013516:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013518:	4620      	mov	r0, r4
 801351a:	f7ff fbd7 	bl	8012ccc <read_submessage_list>
 801351e:	f001 f8e7 	bl	80146f0 <uxr_millis>
 8013522:	1b40      	subs	r0, r0, r5
 8013524:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013528:	2b00      	cmp	r3, #0
 801352a:	dcbe      	bgt.n	80134aa <wait_session_status+0x42>
 801352c:	f10b 0b01 	add.w	fp, fp, #1
 8013530:	9b03      	ldr	r3, [sp, #12]
 8013532:	7960      	ldrb	r0, [r4, #5]
 8013534:	455b      	cmp	r3, fp
 8013536:	d001      	beq.n	801353c <wait_session_status+0xd4>
 8013538:	28ff      	cmp	r0, #255	@ 0xff
 801353a:	d0a3      	beq.n	8013484 <wait_session_status+0x1c>
 801353c:	38ff      	subs	r0, #255	@ 0xff
 801353e:	bf18      	it	ne
 8013540:	2001      	movne	r0, #1
 8013542:	b01d      	add	sp, #116	@ 0x74
 8013544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013548:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801354c:	4631      	mov	r1, r6
 801354e:	f104 0008 	add.w	r0, r4, #8
 8013552:	9304      	str	r3, [sp, #16]
 8013554:	f001 f864 	bl	8014620 <uxr_get_input_reliable_stream>
 8013558:	4680      	mov	r8, r0
 801355a:	b348      	cbz	r0, 80135b0 <wait_session_status+0x148>
 801355c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801355e:	a80c      	add	r0, sp, #48	@ 0x30
 8013560:	9205      	str	r2, [sp, #20]
 8013562:	f7fe fdd3 	bl	801210c <ucdr_buffer_remaining>
 8013566:	4603      	mov	r3, r0
 8013568:	f10d 001d 	add.w	r0, sp, #29
 801356c:	9a05      	ldr	r2, [sp, #20]
 801356e:	9000      	str	r0, [sp, #0]
 8013570:	4640      	mov	r0, r8
 8013572:	9902      	ldr	r1, [sp, #8]
 8013574:	f006 fefc 	bl	801a370 <uxr_receive_reliable_message>
 8013578:	b1d0      	cbz	r0, 80135b0 <wait_session_status+0x148>
 801357a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d03a      	beq.n	80135f8 <wait_session_status+0x190>
 8013582:	9f04      	ldr	r7, [sp, #16]
 8013584:	e00a      	b.n	801359c <wait_session_status+0x134>
 8013586:	f04f 0302 	mov.w	r3, #2
 801358a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801358e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8013592:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8013596:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013598:	f7ff fb98 	bl	8012ccc <read_submessage_list>
 801359c:	a914      	add	r1, sp, #80	@ 0x50
 801359e:	2204      	movs	r2, #4
 80135a0:	4640      	mov	r0, r8
 80135a2:	f006 ff67 	bl	801a474 <uxr_next_input_reliable_buffer_available>
 80135a6:	4603      	mov	r3, r0
 80135a8:	a914      	add	r1, sp, #80	@ 0x50
 80135aa:	4620      	mov	r0, r4
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d1ea      	bne.n	8013586 <wait_session_status+0x11e>
 80135b0:	4632      	mov	r2, r6
 80135b2:	9904      	ldr	r1, [sp, #16]
 80135b4:	4620      	mov	r0, r4
 80135b6:	f7ff fa05 	bl	80129c4 <write_submessage_acknack.isra.0>
 80135ba:	e76f      	b.n	801349c <wait_session_status+0x34>
 80135bc:	4631      	mov	r1, r6
 80135be:	f104 0008 	add.w	r0, r4, #8
 80135c2:	f001 f823 	bl	801460c <uxr_get_input_best_effort_stream>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	f43f af68 	beq.w	801349c <wait_session_status+0x34>
 80135cc:	9902      	ldr	r1, [sp, #8]
 80135ce:	f006 fe45 	bl	801a25c <uxr_receive_best_effort_message>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	f43f af62 	beq.w	801349c <wait_session_status+0x34>
 80135d8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80135dc:	a90c      	add	r1, sp, #48	@ 0x30
 80135de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80135e0:	4620      	mov	r0, r4
 80135e2:	f7ff fb73 	bl	8012ccc <read_submessage_list>
 80135e6:	e759      	b.n	801349c <wait_session_status+0x34>
 80135e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80135ea:	e9d3 0400 	ldrd	r0, r4, [r3]
 80135ee:	47a0      	blx	r4
 80135f0:	2001      	movs	r0, #1
 80135f2:	b01d      	add	sp, #116	@ 0x74
 80135f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80135fc:	a90c      	add	r1, sp, #48	@ 0x30
 80135fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013600:	4620      	mov	r0, r4
 8013602:	f7ff fb63 	bl	8012ccc <read_submessage_list>
 8013606:	e7bc      	b.n	8013582 <wait_session_status+0x11a>

08013608 <uxr_delete_session_retries>:
 8013608:	b530      	push	{r4, r5, lr}
 801360a:	b08f      	sub	sp, #60	@ 0x3c
 801360c:	4604      	mov	r4, r0
 801360e:	460d      	mov	r5, r1
 8013610:	f000 fa34 	bl	8013a7c <uxr_session_header_offset>
 8013614:	2300      	movs	r3, #0
 8013616:	2210      	movs	r2, #16
 8013618:	a902      	add	r1, sp, #8
 801361a:	9000      	str	r0, [sp, #0]
 801361c:	a806      	add	r0, sp, #24
 801361e:	f7fe fd31 	bl	8012084 <ucdr_init_buffer_origin_offset>
 8013622:	a906      	add	r1, sp, #24
 8013624:	4620      	mov	r0, r4
 8013626:	f000 f979 	bl	801391c <uxr_buffer_delete_session>
 801362a:	2200      	movs	r2, #0
 801362c:	9b06      	ldr	r3, [sp, #24]
 801362e:	4620      	mov	r0, r4
 8013630:	4611      	mov	r1, r2
 8013632:	f000 f9cf 	bl	80139d4 <uxr_stamp_session_header>
 8013636:	a806      	add	r0, sp, #24
 8013638:	f7fe fd64 	bl	8012104 <ucdr_buffer_length>
 801363c:	462b      	mov	r3, r5
 801363e:	4602      	mov	r2, r0
 8013640:	a902      	add	r1, sp, #8
 8013642:	4620      	mov	r0, r4
 8013644:	f7ff ff10 	bl	8013468 <wait_session_status>
 8013648:	b118      	cbz	r0, 8013652 <uxr_delete_session_retries+0x4a>
 801364a:	7960      	ldrb	r0, [r4, #5]
 801364c:	fab0 f080 	clz	r0, r0
 8013650:	0940      	lsrs	r0, r0, #5
 8013652:	b00f      	add	sp, #60	@ 0x3c
 8013654:	bd30      	pop	{r4, r5, pc}
 8013656:	bf00      	nop

08013658 <uxr_create_session>:
 8013658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801365c:	f100 0b08 	add.w	fp, r0, #8
 8013660:	4604      	mov	r4, r0
 8013662:	b0ab      	sub	sp, #172	@ 0xac
 8013664:	4658      	mov	r0, fp
 8013666:	465e      	mov	r6, fp
 8013668:	f000 ff22 	bl	80144b0 <uxr_reset_stream_storage>
 801366c:	4620      	mov	r0, r4
 801366e:	f000 fa05 	bl	8013a7c <uxr_session_header_offset>
 8013672:	2300      	movs	r3, #0
 8013674:	221c      	movs	r2, #28
 8013676:	a90b      	add	r1, sp, #44	@ 0x2c
 8013678:	9000      	str	r0, [sp, #0]
 801367a:	a812      	add	r0, sp, #72	@ 0x48
 801367c:	f7fe fd02 	bl	8012084 <ucdr_init_buffer_origin_offset>
 8013680:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013682:	a912      	add	r1, sp, #72	@ 0x48
 8013684:	4620      	mov	r0, r4
 8013686:	8a1a      	ldrh	r2, [r3, #16]
 8013688:	3a04      	subs	r2, #4
 801368a:	b292      	uxth	r2, r2
 801368c:	f000 f91c 	bl	80138c8 <uxr_buffer_create_session>
 8013690:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013692:	4620      	mov	r0, r4
 8013694:	f000 f98a 	bl	80139ac <uxr_stamp_create_session_header>
 8013698:	a812      	add	r0, sp, #72	@ 0x48
 801369a:	f7fe fd33 	bl	8012104 <ucdr_buffer_length>
 801369e:	23ff      	movs	r3, #255	@ 0xff
 80136a0:	4681      	mov	r9, r0
 80136a2:	7163      	strb	r3, [r4, #5]
 80136a4:	230a      	movs	r3, #10
 80136a6:	9303      	str	r3, [sp, #12]
 80136a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80136aa:	464a      	mov	r2, r9
 80136ac:	a90b      	add	r1, sp, #44	@ 0x2c
 80136ae:	e9d3 0500 	ldrd	r0, r5, [r3]
 80136b2:	47a8      	blx	r5
 80136b4:	f001 f81c 	bl	80146f0 <uxr_millis>
 80136b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80136bc:	4605      	mov	r5, r0
 80136be:	e009      	b.n	80136d4 <uxr_create_session+0x7c>
 80136c0:	f001 f816 	bl	80146f0 <uxr_millis>
 80136c4:	1b40      	subs	r0, r0, r5
 80136c6:	7962      	ldrb	r2, [r4, #5]
 80136c8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	dd38      	ble.n	8013742 <uxr_create_session+0xea>
 80136d0:	2aff      	cmp	r2, #255	@ 0xff
 80136d2:	d13c      	bne.n	801374e <uxr_create_session+0xf6>
 80136d4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80136d6:	a907      	add	r1, sp, #28
 80136d8:	6897      	ldr	r7, [r2, #8]
 80136da:	6810      	ldr	r0, [r2, #0]
 80136dc:	aa08      	add	r2, sp, #32
 80136de:	47b8      	blx	r7
 80136e0:	2800      	cmp	r0, #0
 80136e2:	d0ed      	beq.n	80136c0 <uxr_create_session+0x68>
 80136e4:	a81a      	add	r0, sp, #104	@ 0x68
 80136e6:	2700      	movs	r7, #0
 80136e8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80136ec:	f7fe fcdc 	bl	80120a8 <ucdr_init_buffer>
 80136f0:	f10d 031a 	add.w	r3, sp, #26
 80136f4:	aa06      	add	r2, sp, #24
 80136f6:	a91a      	add	r1, sp, #104	@ 0x68
 80136f8:	4620      	mov	r0, r4
 80136fa:	f88d 7018 	strb.w	r7, [sp, #24]
 80136fe:	f000 f97d 	bl	80139fc <uxr_read_session_header>
 8013702:	2800      	cmp	r0, #0
 8013704:	d0dc      	beq.n	80136c0 <uxr_create_session+0x68>
 8013706:	4639      	mov	r1, r7
 8013708:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801370c:	f000 fe9a 	bl	8014444 <uxr_stream_id_from_raw>
 8013710:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013714:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8013718:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801371c:	2f01      	cmp	r7, #1
 801371e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013722:	d053      	beq.n	80137cc <uxr_create_session+0x174>
 8013724:	2f02      	cmp	r7, #2
 8013726:	d018      	beq.n	801375a <uxr_create_session+0x102>
 8013728:	2f00      	cmp	r7, #0
 801372a:	d1c9      	bne.n	80136c0 <uxr_create_session+0x68>
 801372c:	4639      	mov	r1, r7
 801372e:	4638      	mov	r0, r7
 8013730:	f000 fe88 	bl	8014444 <uxr_stream_id_from_raw>
 8013734:	a91a      	add	r1, sp, #104	@ 0x68
 8013736:	4602      	mov	r2, r0
 8013738:	900a      	str	r0, [sp, #40]	@ 0x28
 801373a:	4620      	mov	r0, r4
 801373c:	f7ff fac6 	bl	8012ccc <read_submessage_list>
 8013740:	e7be      	b.n	80136c0 <uxr_create_session+0x68>
 8013742:	9b03      	ldr	r3, [sp, #12]
 8013744:	3b01      	subs	r3, #1
 8013746:	9303      	str	r3, [sp, #12]
 8013748:	d001      	beq.n	801374e <uxr_create_session+0xf6>
 801374a:	2aff      	cmp	r2, #255	@ 0xff
 801374c:	d0ac      	beq.n	80136a8 <uxr_create_session+0x50>
 801374e:	2a00      	cmp	r2, #0
 8013750:	d051      	beq.n	80137f6 <uxr_create_session+0x19e>
 8013752:	2000      	movs	r0, #0
 8013754:	b02b      	add	sp, #172	@ 0xac
 8013756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801375e:	4641      	mov	r1, r8
 8013760:	4630      	mov	r0, r6
 8013762:	9304      	str	r3, [sp, #16]
 8013764:	f000 ff5c 	bl	8014620 <uxr_get_input_reliable_stream>
 8013768:	4682      	mov	sl, r0
 801376a:	b348      	cbz	r0, 80137c0 <uxr_create_session+0x168>
 801376c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801376e:	a81a      	add	r0, sp, #104	@ 0x68
 8013770:	9205      	str	r2, [sp, #20]
 8013772:	f7fe fccb 	bl	801210c <ucdr_buffer_remaining>
 8013776:	4603      	mov	r3, r0
 8013778:	f10d 0019 	add.w	r0, sp, #25
 801377c:	9a05      	ldr	r2, [sp, #20]
 801377e:	4659      	mov	r1, fp
 8013780:	9000      	str	r0, [sp, #0]
 8013782:	4650      	mov	r0, sl
 8013784:	f006 fdf4 	bl	801a370 <uxr_receive_reliable_message>
 8013788:	b1d0      	cbz	r0, 80137c0 <uxr_create_session+0x168>
 801378a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d038      	beq.n	8013804 <uxr_create_session+0x1ac>
 8013792:	9f04      	ldr	r7, [sp, #16]
 8013794:	e00a      	b.n	80137ac <uxr_create_session+0x154>
 8013796:	f04f 0302 	mov.w	r3, #2
 801379a:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801379e:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 80137a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80137a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137a8:	f7ff fa90 	bl	8012ccc <read_submessage_list>
 80137ac:	a922      	add	r1, sp, #136	@ 0x88
 80137ae:	2204      	movs	r2, #4
 80137b0:	4650      	mov	r0, sl
 80137b2:	f006 fe5f 	bl	801a474 <uxr_next_input_reliable_buffer_available>
 80137b6:	4603      	mov	r3, r0
 80137b8:	a922      	add	r1, sp, #136	@ 0x88
 80137ba:	4620      	mov	r0, r4
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d1ea      	bne.n	8013796 <uxr_create_session+0x13e>
 80137c0:	4642      	mov	r2, r8
 80137c2:	9904      	ldr	r1, [sp, #16]
 80137c4:	4620      	mov	r0, r4
 80137c6:	f7ff f8fd 	bl	80129c4 <write_submessage_acknack.isra.0>
 80137ca:	e779      	b.n	80136c0 <uxr_create_session+0x68>
 80137cc:	4641      	mov	r1, r8
 80137ce:	4630      	mov	r0, r6
 80137d0:	f000 ff1c 	bl	801460c <uxr_get_input_best_effort_stream>
 80137d4:	2800      	cmp	r0, #0
 80137d6:	f43f af73 	beq.w	80136c0 <uxr_create_session+0x68>
 80137da:	4659      	mov	r1, fp
 80137dc:	f006 fd3e 	bl	801a25c <uxr_receive_best_effort_message>
 80137e0:	2800      	cmp	r0, #0
 80137e2:	f43f af6d 	beq.w	80136c0 <uxr_create_session+0x68>
 80137e6:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80137ea:	a91a      	add	r1, sp, #104	@ 0x68
 80137ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137ee:	4620      	mov	r0, r4
 80137f0:	f7ff fa6c 	bl	8012ccc <read_submessage_list>
 80137f4:	e764      	b.n	80136c0 <uxr_create_session+0x68>
 80137f6:	4630      	mov	r0, r6
 80137f8:	f000 fe5a 	bl	80144b0 <uxr_reset_stream_storage>
 80137fc:	2001      	movs	r0, #1
 80137fe:	b02b      	add	sp, #172	@ 0xac
 8013800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013804:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8013808:	a91a      	add	r1, sp, #104	@ 0x68
 801380a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801380c:	4620      	mov	r0, r4
 801380e:	f7ff fa5d 	bl	8012ccc <read_submessage_list>
 8013812:	e7be      	b.n	8013792 <uxr_create_session+0x13a>

08013814 <uxr_prepare_stream_to_write_submessage>:
 8013814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013818:	b082      	sub	sp, #8
 801381a:	4604      	mov	r4, r0
 801381c:	4610      	mov	r0, r2
 801381e:	4615      	mov	r5, r2
 8013820:	461e      	mov	r6, r3
 8013822:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8013826:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801382a:	f105 0904 	add.w	r9, r5, #4
 801382e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8013832:	9101      	str	r1, [sp, #4]
 8013834:	f000 ff56 	bl	80146e4 <uxr_submessage_padding>
 8013838:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801383c:	4481      	add	r9, r0
 801383e:	2b01      	cmp	r3, #1
 8013840:	d01d      	beq.n	801387e <uxr_prepare_stream_to_write_submessage+0x6a>
 8013842:	2b02      	cmp	r3, #2
 8013844:	d116      	bne.n	8013874 <uxr_prepare_stream_to_write_submessage+0x60>
 8013846:	f104 0008 	add.w	r0, r4, #8
 801384a:	4651      	mov	r1, sl
 801384c:	f000 fed2 	bl	80145f4 <uxr_get_output_reliable_stream>
 8013850:	4604      	mov	r4, r0
 8013852:	b158      	cbz	r0, 801386c <uxr_prepare_stream_to_write_submessage+0x58>
 8013854:	4649      	mov	r1, r9
 8013856:	4632      	mov	r2, r6
 8013858:	f006 ffd0 	bl	801a7fc <uxr_prepare_reliable_buffer_to_write>
 801385c:	4604      	mov	r4, r0
 801385e:	b12c      	cbz	r4, 801386c <uxr_prepare_stream_to_write_submessage+0x58>
 8013860:	4643      	mov	r3, r8
 8013862:	b2aa      	uxth	r2, r5
 8013864:	4639      	mov	r1, r7
 8013866:	4630      	mov	r0, r6
 8013868:	f000 fefc 	bl	8014664 <uxr_buffer_submessage_header>
 801386c:	4620      	mov	r0, r4
 801386e:	b002      	add	sp, #8
 8013870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013874:	2400      	movs	r4, #0
 8013876:	4620      	mov	r0, r4
 8013878:	b002      	add	sp, #8
 801387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801387e:	f104 0008 	add.w	r0, r4, #8
 8013882:	4651      	mov	r1, sl
 8013884:	f000 feae 	bl	80145e4 <uxr_get_output_best_effort_stream>
 8013888:	4604      	mov	r4, r0
 801388a:	2800      	cmp	r0, #0
 801388c:	d0ee      	beq.n	801386c <uxr_prepare_stream_to_write_submessage+0x58>
 801388e:	4649      	mov	r1, r9
 8013890:	4632      	mov	r2, r6
 8013892:	f006 fedf 	bl	801a654 <uxr_prepare_best_effort_buffer_to_write>
 8013896:	4604      	mov	r4, r0
 8013898:	e7e1      	b.n	801385e <uxr_prepare_stream_to_write_submessage+0x4a>
 801389a:	bf00      	nop

0801389c <uxr_init_session_info>:
 801389c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80138a0:	23ff      	movs	r3, #255	@ 0xff
 80138a2:	7102      	strb	r2, [r0, #4]
 80138a4:	f880 c001 	strb.w	ip, [r0, #1]
 80138a8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80138ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80138b0:	7001      	strb	r1, [r0, #0]
 80138b2:	f880 c002 	strb.w	ip, [r0, #2]
 80138b6:	7143      	strb	r3, [r0, #5]
 80138b8:	70c2      	strb	r2, [r0, #3]
 80138ba:	b500      	push	{lr}
 80138bc:	f04f 0e09 	mov.w	lr, #9
 80138c0:	f8a0 e006 	strh.w	lr, [r0, #6]
 80138c4:	f85d fb04 	ldr.w	pc, [sp], #4

080138c8 <uxr_buffer_create_session>:
 80138c8:	b530      	push	{r4, r5, lr}
 80138ca:	2300      	movs	r3, #0
 80138cc:	b089      	sub	sp, #36	@ 0x24
 80138ce:	4d12      	ldr	r5, [pc, #72]	@ (8013918 <uxr_buffer_create_session+0x50>)
 80138d0:	460c      	mov	r4, r1
 80138d2:	9307      	str	r3, [sp, #28]
 80138d4:	4619      	mov	r1, r3
 80138d6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80138da:	2201      	movs	r2, #1
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	80c2      	strh	r2, [r0, #6]
 80138e0:	f88d 2004 	strb.w	r2, [sp, #4]
 80138e4:	682a      	ldr	r2, [r5, #0]
 80138e6:	9303      	str	r3, [sp, #12]
 80138e8:	9200      	str	r2, [sp, #0]
 80138ea:	88aa      	ldrh	r2, [r5, #4]
 80138ec:	9306      	str	r3, [sp, #24]
 80138ee:	f8ad 2006 	strh.w	r2, [sp, #6]
 80138f2:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80138f6:	9202      	str	r2, [sp, #8]
 80138f8:	7802      	ldrb	r2, [r0, #0]
 80138fa:	4620      	mov	r0, r4
 80138fc:	f88d 200c 	strb.w	r2, [sp, #12]
 8013900:	2210      	movs	r2, #16
 8013902:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013906:	f000 fead 	bl	8014664 <uxr_buffer_submessage_header>
 801390a:	4669      	mov	r1, sp
 801390c:	4620      	mov	r0, r4
 801390e:	f001 fdff 	bl	8015510 <uxr_serialize_CREATE_CLIENT_Payload>
 8013912:	b009      	add	sp, #36	@ 0x24
 8013914:	bd30      	pop	{r4, r5, pc}
 8013916:	bf00      	nop
 8013918:	0801cd98 	.word	0x0801cd98

0801391c <uxr_buffer_delete_session>:
 801391c:	4a0c      	ldr	r2, [pc, #48]	@ (8013950 <uxr_buffer_delete_session+0x34>)
 801391e:	2302      	movs	r3, #2
 8013920:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8013924:	b510      	push	{r4, lr}
 8013926:	460c      	mov	r4, r1
 8013928:	b082      	sub	sp, #8
 801392a:	8911      	ldrh	r1, [r2, #8]
 801392c:	2204      	movs	r2, #4
 801392e:	80c3      	strh	r3, [r0, #6]
 8013930:	2300      	movs	r3, #0
 8013932:	f8ad 1006 	strh.w	r1, [sp, #6]
 8013936:	4620      	mov	r0, r4
 8013938:	2103      	movs	r1, #3
 801393a:	f8ad c004 	strh.w	ip, [sp, #4]
 801393e:	f000 fe91 	bl	8014664 <uxr_buffer_submessage_header>
 8013942:	a901      	add	r1, sp, #4
 8013944:	4620      	mov	r0, r4
 8013946:	f001 fe8b 	bl	8015660 <uxr_serialize_DELETE_Payload>
 801394a:	b002      	add	sp, #8
 801394c:	bd10      	pop	{r4, pc}
 801394e:	bf00      	nop
 8013950:	0801cd98 	.word	0x0801cd98

08013954 <uxr_read_create_session_status>:
 8013954:	b510      	push	{r4, lr}
 8013956:	460b      	mov	r3, r1
 8013958:	b088      	sub	sp, #32
 801395a:	4604      	mov	r4, r0
 801395c:	a901      	add	r1, sp, #4
 801395e:	4618      	mov	r0, r3
 8013960:	f001 fe8e 	bl	8015680 <uxr_deserialize_STATUS_AGENT_Payload>
 8013964:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013968:	7163      	strb	r3, [r4, #5]
 801396a:	b008      	add	sp, #32
 801396c:	bd10      	pop	{r4, pc}
 801396e:	bf00      	nop

08013970 <uxr_read_delete_session_status>:
 8013970:	b510      	push	{r4, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	4604      	mov	r4, r0
 8013976:	4608      	mov	r0, r1
 8013978:	a902      	add	r1, sp, #8
 801397a:	f001 feb1 	bl	80156e0 <uxr_deserialize_STATUS_Payload>
 801397e:	88e3      	ldrh	r3, [r4, #6]
 8013980:	2b02      	cmp	r3, #2
 8013982:	d001      	beq.n	8013988 <uxr_read_delete_session_status+0x18>
 8013984:	b004      	add	sp, #16
 8013986:	bd10      	pop	{r4, pc}
 8013988:	f10d 000a 	add.w	r0, sp, #10
 801398c:	f7fe feaa 	bl	80126e4 <uxr_object_id_from_raw>
 8013990:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013994:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013998:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801399c:	b29b      	uxth	r3, r3
 801399e:	2b02      	cmp	r3, #2
 80139a0:	d1f0      	bne.n	8013984 <uxr_read_delete_session_status+0x14>
 80139a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80139a6:	7163      	strb	r3, [r4, #5]
 80139a8:	e7ec      	b.n	8013984 <uxr_read_delete_session_status+0x14>
 80139aa:	bf00      	nop

080139ac <uxr_stamp_create_session_header>:
 80139ac:	b510      	push	{r4, lr}
 80139ae:	2208      	movs	r2, #8
 80139b0:	b08a      	sub	sp, #40	@ 0x28
 80139b2:	4604      	mov	r4, r0
 80139b4:	eb0d 0002 	add.w	r0, sp, r2
 80139b8:	f7fe fb76 	bl	80120a8 <ucdr_init_buffer>
 80139bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c0:	2300      	movs	r3, #0
 80139c2:	a802      	add	r0, sp, #8
 80139c4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80139c8:	9400      	str	r4, [sp, #0]
 80139ca:	461a      	mov	r2, r3
 80139cc:	f001 f846 	bl	8014a5c <uxr_serialize_message_header>
 80139d0:	b00a      	add	sp, #40	@ 0x28
 80139d2:	bd10      	pop	{r4, pc}

080139d4 <uxr_stamp_session_header>:
 80139d4:	b530      	push	{r4, r5, lr}
 80139d6:	b08d      	sub	sp, #52	@ 0x34
 80139d8:	4604      	mov	r4, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	4619      	mov	r1, r3
 80139de:	a804      	add	r0, sp, #16
 80139e0:	9203      	str	r2, [sp, #12]
 80139e2:	2208      	movs	r2, #8
 80139e4:	f7fe fb60 	bl	80120a8 <ucdr_init_buffer>
 80139e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ec:	9b03      	ldr	r3, [sp, #12]
 80139ee:	462a      	mov	r2, r5
 80139f0:	a804      	add	r0, sp, #16
 80139f2:	9400      	str	r4, [sp, #0]
 80139f4:	f001 f832 	bl	8014a5c <uxr_serialize_message_header>
 80139f8:	b00d      	add	sp, #52	@ 0x34
 80139fa:	bd30      	pop	{r4, r5, pc}

080139fc <uxr_read_session_header>:
 80139fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a00:	4607      	mov	r7, r0
 8013a02:	b084      	sub	sp, #16
 8013a04:	4608      	mov	r0, r1
 8013a06:	460c      	mov	r4, r1
 8013a08:	4615      	mov	r5, r2
 8013a0a:	461e      	mov	r6, r3
 8013a0c:	f7fe fb7e 	bl	801210c <ucdr_buffer_remaining>
 8013a10:	2808      	cmp	r0, #8
 8013a12:	d803      	bhi.n	8013a1c <uxr_read_session_header+0x20>
 8013a14:	2000      	movs	r0, #0
 8013a16:	b004      	add	sp, #16
 8013a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a1c:	f10d 080c 	add.w	r8, sp, #12
 8013a20:	4633      	mov	r3, r6
 8013a22:	462a      	mov	r2, r5
 8013a24:	4620      	mov	r0, r4
 8013a26:	f10d 010b 	add.w	r1, sp, #11
 8013a2a:	f8cd 8000 	str.w	r8, [sp]
 8013a2e:	f001 f833 	bl	8014a98 <uxr_deserialize_message_header>
 8013a32:	783a      	ldrb	r2, [r7, #0]
 8013a34:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013a38:	4293      	cmp	r3, r2
 8013a3a:	d1eb      	bne.n	8013a14 <uxr_read_session_header+0x18>
 8013a3c:	061b      	lsls	r3, r3, #24
 8013a3e:	d41b      	bmi.n	8013a78 <uxr_read_session_header+0x7c>
 8013a40:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013a44:	787b      	ldrb	r3, [r7, #1]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d003      	beq.n	8013a52 <uxr_read_session_header+0x56>
 8013a4a:	2001      	movs	r0, #1
 8013a4c:	f080 0001 	eor.w	r0, r0, #1
 8013a50:	e7e1      	b.n	8013a16 <uxr_read_session_header+0x1a>
 8013a52:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013a56:	1cb8      	adds	r0, r7, #2
 8013a58:	78bb      	ldrb	r3, [r7, #2]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d1f5      	bne.n	8013a4a <uxr_read_session_header+0x4e>
 8013a5e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013a62:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d1ef      	bne.n	8013a4a <uxr_read_session_header+0x4e>
 8013a6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013a6e:	7843      	ldrb	r3, [r0, #1]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d1ea      	bne.n	8013a4a <uxr_read_session_header+0x4e>
 8013a74:	2000      	movs	r0, #0
 8013a76:	e7e9      	b.n	8013a4c <uxr_read_session_header+0x50>
 8013a78:	2001      	movs	r0, #1
 8013a7a:	e7cc      	b.n	8013a16 <uxr_read_session_header+0x1a>

08013a7c <uxr_session_header_offset>:
 8013a7c:	f990 3000 	ldrsb.w	r3, [r0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	bfac      	ite	ge
 8013a84:	2008      	movge	r0, #8
 8013a86:	2004      	movlt	r0, #4
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop

08013a8c <uxr_init_base_object_request>:
 8013a8c:	b510      	push	{r4, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013a94:	9101      	str	r1, [sp, #4]
 8013a96:	88c3      	ldrh	r3, [r0, #6]
 8013a98:	f1a3 010a 	sub.w	r1, r3, #10
 8013a9c:	b289      	uxth	r1, r1
 8013a9e:	42a1      	cmp	r1, r4
 8013aa0:	d80f      	bhi.n	8013ac2 <uxr_init_base_object_request+0x36>
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	b29c      	uxth	r4, r3
 8013aa6:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	80c4      	strh	r4, [r0, #6]
 8013aae:	1c91      	adds	r1, r2, #2
 8013ab0:	9801      	ldr	r0, [sp, #4]
 8013ab2:	f882 c000 	strb.w	ip, [r2]
 8013ab6:	7053      	strb	r3, [r2, #1]
 8013ab8:	f7fe fe28 	bl	801270c <uxr_object_id_to_raw>
 8013abc:	4620      	mov	r0, r4
 8013abe:	b002      	add	sp, #8
 8013ac0:	bd10      	pop	{r4, pc}
 8013ac2:	230a      	movs	r3, #10
 8013ac4:	f04f 0c00 	mov.w	ip, #0
 8013ac8:	461c      	mov	r4, r3
 8013aca:	e7ef      	b.n	8013aac <uxr_init_base_object_request+0x20>

08013acc <uxr_parse_base_object_request>:
 8013acc:	b570      	push	{r4, r5, r6, lr}
 8013ace:	4604      	mov	r4, r0
 8013ad0:	3002      	adds	r0, #2
 8013ad2:	460d      	mov	r5, r1
 8013ad4:	4616      	mov	r6, r2
 8013ad6:	f7fe fe05 	bl	80126e4 <uxr_object_id_from_raw>
 8013ada:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013ade:	8028      	strh	r0, [r5, #0]
 8013ae0:	806b      	strh	r3, [r5, #2]
 8013ae2:	7822      	ldrb	r2, [r4, #0]
 8013ae4:	7863      	ldrb	r3, [r4, #1]
 8013ae6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013aea:	8033      	strh	r3, [r6, #0]
 8013aec:	bd70      	pop	{r4, r5, r6, pc}
 8013aee:	bf00      	nop

08013af0 <uxr_init_framing_io>:
 8013af0:	2300      	movs	r3, #0
 8013af2:	7041      	strb	r1, [r0, #1]
 8013af4:	7003      	strb	r3, [r0, #0]
 8013af6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013af8:	4770      	bx	lr
 8013afa:	bf00      	nop

08013afc <uxr_write_framed_msg>:
 8013afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b00:	4617      	mov	r7, r2
 8013b02:	7842      	ldrb	r2, [r0, #1]
 8013b04:	460e      	mov	r6, r1
 8013b06:	b083      	sub	sp, #12
 8013b08:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8013b0c:	469b      	mov	fp, r3
 8013b0e:	237e      	movs	r3, #126	@ 0x7e
 8013b10:	4604      	mov	r4, r0
 8013b12:	2901      	cmp	r1, #1
 8013b14:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8013b18:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013b1c:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8013b20:	f240 8115 	bls.w	8013d4e <uxr_write_framed_msg+0x252>
 8013b24:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013b28:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8013b2c:	2202      	movs	r2, #2
 8013b2e:	2901      	cmp	r1, #1
 8013b30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013b34:	d952      	bls.n	8013bdc <uxr_write_framed_msg+0xe0>
 8013b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b38:	2103      	movs	r1, #3
 8013b3a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8013b3e:	b2dd      	uxtb	r5, r3
 8013b40:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013b44:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8013b48:	2a01      	cmp	r2, #1
 8013b4a:	d95c      	bls.n	8013c06 <uxr_write_framed_msg+0x10a>
 8013b4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b4e:	1862      	adds	r2, r4, r1
 8013b50:	3101      	adds	r1, #1
 8013b52:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8013b56:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8013b5a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013b5e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8013b62:	2a01      	cmp	r2, #1
 8013b64:	d961      	bls.n	8013c2a <uxr_write_framed_msg+0x12e>
 8013b66:	1c4a      	adds	r2, r1, #1
 8013b68:	4421      	add	r1, r4
 8013b6a:	b2d2      	uxtb	r2, r2
 8013b6c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8013b70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d06a      	beq.n	8013c4e <uxr_write_framed_msg+0x152>
 8013b78:	f04f 0800 	mov.w	r8, #0
 8013b7c:	46c1      	mov	r9, r8
 8013b7e:	e016      	b.n	8013bae <uxr_write_framed_msg+0xb2>
 8013b80:	2a29      	cmp	r2, #41	@ 0x29
 8013b82:	d868      	bhi.n	8013c56 <uxr_write_framed_msg+0x15a>
 8013b84:	18a0      	adds	r0, r4, r2
 8013b86:	3201      	adds	r2, #1
 8013b88:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013b8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013b90:	ea88 0101 	eor.w	r1, r8, r1
 8013b94:	4b7d      	ldr	r3, [pc, #500]	@ (8013d8c <uxr_write_framed_msg+0x290>)
 8013b96:	f109 0901 	add.w	r9, r9, #1
 8013b9a:	b2c9      	uxtb	r1, r1
 8013b9c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8013ba0:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8013ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ba6:	454b      	cmp	r3, r9
 8013ba8:	d969      	bls.n	8013c7e <uxr_write_framed_msg+0x182>
 8013baa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013bae:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8013bb2:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013bb6:	2801      	cmp	r0, #1
 8013bb8:	d8e2      	bhi.n	8013b80 <uxr_write_framed_msg+0x84>
 8013bba:	1c50      	adds	r0, r2, #1
 8013bbc:	b2c0      	uxtb	r0, r0
 8013bbe:	2829      	cmp	r0, #41	@ 0x29
 8013bc0:	d849      	bhi.n	8013c56 <uxr_write_framed_msg+0x15a>
 8013bc2:	18a0      	adds	r0, r4, r2
 8013bc4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013bc8:	3202      	adds	r2, #2
 8013bca:	f081 0520 	eor.w	r5, r1, #32
 8013bce:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013bd2:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013bd6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013bda:	e7d9      	b.n	8013b90 <uxr_write_framed_msg+0x94>
 8013bdc:	2104      	movs	r1, #4
 8013bde:	f04f 0c03 	mov.w	ip, #3
 8013be2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013be4:	4422      	add	r2, r4
 8013be6:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013bea:	44a4      	add	ip, r4
 8013bec:	b2dd      	uxtb	r5, r3
 8013bee:	f080 0020 	eor.w	r0, r0, #32
 8013bf2:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8013bf6:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8013bfa:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013bfe:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013c02:	2a01      	cmp	r2, #1
 8013c04:	d8a2      	bhi.n	8013b4c <uxr_write_framed_msg+0x50>
 8013c06:	1862      	adds	r2, r4, r1
 8013c08:	207d      	movs	r0, #125	@ 0x7d
 8013c0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c0c:	f085 0520 	eor.w	r5, r5, #32
 8013c10:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8013c14:	3102      	adds	r1, #2
 8013c16:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8013c1a:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8013c1e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013c22:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8013c26:	2a01      	cmp	r2, #1
 8013c28:	d89d      	bhi.n	8013b66 <uxr_write_framed_msg+0x6a>
 8013c2a:	1c4d      	adds	r5, r1, #1
 8013c2c:	1c8a      	adds	r2, r1, #2
 8013c2e:	f080 0020 	eor.w	r0, r0, #32
 8013c32:	4421      	add	r1, r4
 8013c34:	fa54 f585 	uxtab	r5, r4, r5
 8013c38:	b2d2      	uxtb	r2, r2
 8013c3a:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013c3e:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8013c42:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8013c46:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d194      	bne.n	8013b78 <uxr_write_framed_msg+0x7c>
 8013c4e:	4619      	mov	r1, r3
 8013c50:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013c54:	e019      	b.n	8013c8a <uxr_write_framed_msg+0x18e>
 8013c56:	2500      	movs	r5, #0
 8013c58:	e000      	b.n	8013c5c <uxr_write_framed_msg+0x160>
 8013c5a:	b160      	cbz	r0, 8013c76 <uxr_write_framed_msg+0x17a>
 8013c5c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013c60:	1b52      	subs	r2, r2, r5
 8013c62:	4653      	mov	r3, sl
 8013c64:	4638      	mov	r0, r7
 8013c66:	4421      	add	r1, r4
 8013c68:	47b0      	blx	r6
 8013c6a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013c6e:	4405      	add	r5, r0
 8013c70:	4295      	cmp	r5, r2
 8013c72:	d3f2      	bcc.n	8013c5a <uxr_write_framed_msg+0x15e>
 8013c74:	d066      	beq.n	8013d44 <uxr_write_framed_msg+0x248>
 8013c76:	2000      	movs	r0, #0
 8013c78:	b003      	add	sp, #12
 8013c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c7e:	fa5f f188 	uxtb.w	r1, r8
 8013c82:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013c86:	f8ad 8004 	strh.w	r8, [sp, #4]
 8013c8a:	f04f 0900 	mov.w	r9, #0
 8013c8e:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8013c92:	46c8      	mov	r8, r9
 8013c94:	e013      	b.n	8013cbe <uxr_write_framed_msg+0x1c2>
 8013c96:	2a29      	cmp	r2, #41	@ 0x29
 8013c98:	d824      	bhi.n	8013ce4 <uxr_write_framed_msg+0x1e8>
 8013c9a:	18a3      	adds	r3, r4, r2
 8013c9c:	3201      	adds	r2, #1
 8013c9e:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8013ca2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013ca6:	f109 0901 	add.w	r9, r9, #1
 8013caa:	f1b9 0f02 	cmp.w	r9, #2
 8013cae:	d02d      	beq.n	8013d0c <uxr_write_framed_msg+0x210>
 8013cb0:	f109 0308 	add.w	r3, r9, #8
 8013cb4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013cb8:	446b      	add	r3, sp
 8013cba:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8013cbe:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8013cc2:	2b01      	cmp	r3, #1
 8013cc4:	d8e7      	bhi.n	8013c96 <uxr_write_framed_msg+0x19a>
 8013cc6:	1c53      	adds	r3, r2, #1
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	2b29      	cmp	r3, #41	@ 0x29
 8013ccc:	d80a      	bhi.n	8013ce4 <uxr_write_framed_msg+0x1e8>
 8013cce:	18a3      	adds	r3, r4, r2
 8013cd0:	f081 0120 	eor.w	r1, r1, #32
 8013cd4:	3202      	adds	r2, #2
 8013cd6:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8013cda:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8013cde:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013ce2:	e7e0      	b.n	8013ca6 <uxr_write_framed_msg+0x1aa>
 8013ce4:	2500      	movs	r5, #0
 8013ce6:	e001      	b.n	8013cec <uxr_write_framed_msg+0x1f0>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	d0c4      	beq.n	8013c76 <uxr_write_framed_msg+0x17a>
 8013cec:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013cf0:	1b52      	subs	r2, r2, r5
 8013cf2:	4653      	mov	r3, sl
 8013cf4:	4638      	mov	r0, r7
 8013cf6:	4421      	add	r1, r4
 8013cf8:	47b0      	blx	r6
 8013cfa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013cfe:	4405      	add	r5, r0
 8013d00:	4295      	cmp	r5, r2
 8013d02:	d3f1      	bcc.n	8013ce8 <uxr_write_framed_msg+0x1ec>
 8013d04:	d1b7      	bne.n	8013c76 <uxr_write_framed_msg+0x17a>
 8013d06:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8013d0a:	e7d1      	b.n	8013cb0 <uxr_write_framed_msg+0x1b4>
 8013d0c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013d10:	b19a      	cbz	r2, 8013d3a <uxr_write_framed_msg+0x23e>
 8013d12:	2500      	movs	r5, #0
 8013d14:	e001      	b.n	8013d1a <uxr_write_framed_msg+0x21e>
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d0ad      	beq.n	8013c76 <uxr_write_framed_msg+0x17a>
 8013d1a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013d1e:	1b52      	subs	r2, r2, r5
 8013d20:	4653      	mov	r3, sl
 8013d22:	4638      	mov	r0, r7
 8013d24:	4421      	add	r1, r4
 8013d26:	47b0      	blx	r6
 8013d28:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013d2c:	4405      	add	r5, r0
 8013d2e:	4295      	cmp	r5, r2
 8013d30:	d3f1      	bcc.n	8013d16 <uxr_write_framed_msg+0x21a>
 8013d32:	d1a0      	bne.n	8013c76 <uxr_write_framed_msg+0x17a>
 8013d34:	2300      	movs	r3, #0
 8013d36:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013d3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d3c:	b298      	uxth	r0, r3
 8013d3e:	b003      	add	sp, #12
 8013d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d44:	f04f 0300 	mov.w	r3, #0
 8013d48:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013d4c:	e72a      	b.n	8013ba4 <uxr_write_framed_msg+0xa8>
 8013d4e:	217d      	movs	r1, #125	@ 0x7d
 8013d50:	f082 0220 	eor.w	r2, r2, #32
 8013d54:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8013d58:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013d5c:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8013d60:	2203      	movs	r2, #3
 8013d62:	2901      	cmp	r1, #1
 8013d64:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013d68:	d803      	bhi.n	8013d72 <uxr_write_framed_msg+0x276>
 8013d6a:	2105      	movs	r1, #5
 8013d6c:	f04f 0c04 	mov.w	ip, #4
 8013d70:	e737      	b.n	8013be2 <uxr_write_framed_msg+0xe6>
 8013d72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d74:	2104      	movs	r1, #4
 8013d76:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8013d7a:	b2dd      	uxtb	r5, r3
 8013d7c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013d80:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8013d84:	2a01      	cmp	r2, #1
 8013d86:	f63f aee1 	bhi.w	8013b4c <uxr_write_framed_msg+0x50>
 8013d8a:	e73c      	b.n	8013c06 <uxr_write_framed_msg+0x10a>
 8013d8c:	0801d168 	.word	0x0801d168

08013d90 <uxr_framing_read_transport>:
 8013d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d94:	4604      	mov	r4, r0
 8013d96:	b085      	sub	sp, #20
 8013d98:	4692      	mov	sl, r2
 8013d9a:	4689      	mov	r9, r1
 8013d9c:	461d      	mov	r5, r3
 8013d9e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8013da0:	f000 fca6 	bl	80146f0 <uxr_millis>
 8013da4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8013da8:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8013dac:	4680      	mov	r8, r0
 8013dae:	42ba      	cmp	r2, r7
 8013db0:	d05f      	beq.n	8013e72 <uxr_framing_read_transport+0xe2>
 8013db2:	d817      	bhi.n	8013de4 <uxr_framing_read_transport+0x54>
 8013db4:	3f01      	subs	r7, #1
 8013db6:	1aba      	subs	r2, r7, r2
 8013db8:	2700      	movs	r7, #0
 8013dba:	b2d2      	uxtb	r2, r2
 8013dbc:	42b2      	cmp	r2, r6
 8013dbe:	d81a      	bhi.n	8013df6 <uxr_framing_read_transport+0x66>
 8013dc0:	19d3      	adds	r3, r2, r7
 8013dc2:	42b3      	cmp	r3, r6
 8013dc4:	d852      	bhi.n	8013e6c <uxr_framing_read_transport+0xdc>
 8013dc6:	b9d2      	cbnz	r2, 8013dfe <uxr_framing_read_transport+0x6e>
 8013dc8:	2600      	movs	r6, #0
 8013dca:	f000 fc91 	bl	80146f0 <uxr_millis>
 8013dce:	682b      	ldr	r3, [r5, #0]
 8013dd0:	eba0 0008 	sub.w	r0, r0, r8
 8013dd4:	1a1b      	subs	r3, r3, r0
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	b005      	add	sp, #20
 8013de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de4:	2f00      	cmp	r7, #0
 8013de6:	d060      	beq.n	8013eaa <uxr_framing_read_transport+0x11a>
 8013de8:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8013dec:	3f01      	subs	r7, #1
 8013dee:	b2d2      	uxtb	r2, r2
 8013df0:	b2ff      	uxtb	r7, r7
 8013df2:	42b2      	cmp	r2, r6
 8013df4:	d9e4      	bls.n	8013dc0 <uxr_framing_read_transport+0x30>
 8013df6:	b2f2      	uxtb	r2, r6
 8013df8:	2700      	movs	r7, #0
 8013dfa:	2a00      	cmp	r2, #0
 8013dfc:	d0e4      	beq.n	8013dc8 <uxr_framing_read_transport+0x38>
 8013dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e00:	4650      	mov	r0, sl
 8013e02:	9203      	str	r2, [sp, #12]
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013e0a:	682b      	ldr	r3, [r5, #0]
 8013e0c:	3102      	adds	r1, #2
 8013e0e:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8013eb4 <uxr_framing_read_transport+0x124>
 8013e12:	4421      	add	r1, r4
 8013e14:	47c8      	blx	r9
 8013e16:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013e1a:	4606      	mov	r6, r0
 8013e1c:	4403      	add	r3, r0
 8013e1e:	0859      	lsrs	r1, r3, #1
 8013e20:	fbab 2101 	umull	r2, r1, fp, r1
 8013e24:	222a      	movs	r2, #42	@ 0x2a
 8013e26:	0889      	lsrs	r1, r1, #2
 8013e28:	fb02 3111 	mls	r1, r2, r1, r3
 8013e2c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d0c9      	beq.n	8013dc8 <uxr_framing_read_transport+0x38>
 8013e34:	9a03      	ldr	r2, [sp, #12]
 8013e36:	4290      	cmp	r0, r2
 8013e38:	d1c7      	bne.n	8013dca <uxr_framing_read_transport+0x3a>
 8013e3a:	2f00      	cmp	r7, #0
 8013e3c:	d0c5      	beq.n	8013dca <uxr_framing_read_transport+0x3a>
 8013e3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e40:	3102      	adds	r1, #2
 8013e42:	463a      	mov	r2, r7
 8013e44:	4650      	mov	r0, sl
 8013e46:	4421      	add	r1, r4
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	47c8      	blx	r9
 8013e4e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8013e52:	4406      	add	r6, r0
 8013e54:	1813      	adds	r3, r2, r0
 8013e56:	085a      	lsrs	r2, r3, #1
 8013e58:	fbab 1b02 	umull	r1, fp, fp, r2
 8013e5c:	222a      	movs	r2, #42	@ 0x2a
 8013e5e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8013e62:	fb02 331b 	mls	r3, r2, fp, r3
 8013e66:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013e6a:	e7ae      	b.n	8013dca <uxr_framing_read_transport+0x3a>
 8013e6c:	1ab6      	subs	r6, r6, r2
 8013e6e:	b2f7      	uxtb	r7, r6
 8013e70:	e7a9      	b.n	8013dc6 <uxr_framing_read_transport+0x36>
 8013e72:	2300      	movs	r3, #0
 8013e74:	2e28      	cmp	r6, #40	@ 0x28
 8013e76:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8013e78:	d9bd      	bls.n	8013df6 <uxr_framing_read_transport+0x66>
 8013e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e7c:	2229      	movs	r2, #41	@ 0x29
 8013e7e:	1ca1      	adds	r1, r4, #2
 8013e80:	4650      	mov	r0, sl
 8013e82:	9300      	str	r3, [sp, #0]
 8013e84:	682b      	ldr	r3, [r5, #0]
 8013e86:	47c8      	blx	r9
 8013e88:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013e8c:	4606      	mov	r6, r0
 8013e8e:	212a      	movs	r1, #42	@ 0x2a
 8013e90:	4403      	add	r3, r0
 8013e92:	4808      	ldr	r0, [pc, #32]	@ (8013eb4 <uxr_framing_read_transport+0x124>)
 8013e94:	085a      	lsrs	r2, r3, #1
 8013e96:	fba0 0202 	umull	r0, r2, r0, r2
 8013e9a:	0892      	lsrs	r2, r2, #2
 8013e9c:	fb01 3312 	mls	r3, r1, r2, r3
 8013ea0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013ea4:	2e00      	cmp	r6, #0
 8013ea6:	d08f      	beq.n	8013dc8 <uxr_framing_read_transport+0x38>
 8013ea8:	e78f      	b.n	8013dca <uxr_framing_read_transport+0x3a>
 8013eaa:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8013eae:	b2d2      	uxtb	r2, r2
 8013eb0:	e784      	b.n	8013dbc <uxr_framing_read_transport+0x2c>
 8013eb2:	bf00      	nop
 8013eb4:	30c30c31 	.word	0x30c30c31

08013eb8 <uxr_read_framed_msg>:
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	461e      	mov	r6, r3
 8013ebe:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013ec2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	4604      	mov	r4, r0
 8013eca:	4688      	mov	r8, r1
 8013ecc:	429d      	cmp	r5, r3
 8013ece:	4691      	mov	r9, r2
 8013ed0:	f000 818c 	beq.w	80141ec <uxr_read_framed_msg+0x334>
 8013ed4:	7823      	ldrb	r3, [r4, #0]
 8013ed6:	4dc3      	ldr	r5, [pc, #780]	@ (80141e4 <uxr_read_framed_msg+0x32c>)
 8013ed8:	4fc3      	ldr	r7, [pc, #780]	@ (80141e8 <uxr_read_framed_msg+0x330>)
 8013eda:	2b07      	cmp	r3, #7
 8013edc:	d8fd      	bhi.n	8013eda <uxr_read_framed_msg+0x22>
 8013ede:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013ee2:	011c      	.short	0x011c
 8013ee4:	00d900fb 	.word	0x00d900fb
 8013ee8:	008f00ba 	.word	0x008f00ba
 8013eec:	00320051 	.word	0x00320051
 8013ef0:	0008      	.short	0x0008
 8013ef2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013ef6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013efa:	4299      	cmp	r1, r3
 8013efc:	f000 814d 	beq.w	801419a <uxr_read_framed_msg+0x2e2>
 8013f00:	18e2      	adds	r2, r4, r3
 8013f02:	7892      	ldrb	r2, [r2, #2]
 8013f04:	2a7d      	cmp	r2, #125	@ 0x7d
 8013f06:	f000 81b8 	beq.w	801427a <uxr_read_framed_msg+0x3c2>
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	212a      	movs	r1, #42	@ 0x2a
 8013f0e:	2a7e      	cmp	r2, #126	@ 0x7e
 8013f10:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8013f14:	fba5 c000 	umull	ip, r0, r5, r0
 8013f18:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013f1c:	fb01 3310 	mls	r3, r1, r0, r3
 8013f20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013f24:	f000 8257 	beq.w	80143d6 <uxr_read_framed_msg+0x51e>
 8013f28:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8013f2e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013f32:	7020      	strb	r0, [r4, #0]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	4299      	cmp	r1, r3
 8013f38:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013f3a:	f000 8178 	beq.w	801422e <uxr_read_framed_msg+0x376>
 8013f3e:	2000      	movs	r0, #0
 8013f40:	b003      	add	sp, #12
 8013f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f46:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013f4a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013f4e:	4298      	cmp	r0, r3
 8013f50:	f000 8132 	beq.w	80141b8 <uxr_read_framed_msg+0x300>
 8013f54:	18e2      	adds	r2, r4, r3
 8013f56:	7891      	ldrb	r1, [r2, #2]
 8013f58:	297d      	cmp	r1, #125	@ 0x7d
 8013f5a:	f000 8170 	beq.w	801423e <uxr_read_framed_msg+0x386>
 8013f5e:	3301      	adds	r3, #1
 8013f60:	202a      	movs	r0, #42	@ 0x2a
 8013f62:	297e      	cmp	r1, #126	@ 0x7e
 8013f64:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013f68:	fba5 c202 	umull	ip, r2, r5, r2
 8013f6c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013f70:	fb00 3312 	mls	r3, r0, r2, r3
 8013f74:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013f78:	f000 821d 	beq.w	80143b6 <uxr_read_framed_msg+0x4fe>
 8013f7c:	2307      	movs	r3, #7
 8013f7e:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8013f80:	7023      	strb	r3, [r4, #0]
 8013f82:	e7aa      	b.n	8013eda <uxr_read_framed_msg+0x22>
 8013f84:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013f86:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013f8a:	459e      	cmp	lr, r3
 8013f8c:	d827      	bhi.n	8013fde <uxr_read_framed_msg+0x126>
 8013f8e:	e032      	b.n	8013ff6 <uxr_read_framed_msg+0x13e>
 8013f90:	fba5 b101 	umull	fp, r1, r5, r1
 8013f94:	f89c c002 	ldrb.w	ip, [ip, #2]
 8013f98:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8013f9c:	0889      	lsrs	r1, r1, #2
 8013f9e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8013fa2:	fb0b 0111 	mls	r1, fp, r1, r0
 8013fa6:	f000 80d4 	beq.w	8014152 <uxr_read_framed_msg+0x29a>
 8013faa:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013fae:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8013fb2:	f000 80cb 	beq.w	801414c <uxr_read_framed_msg+0x294>
 8013fb6:	f806 c003 	strb.w	ip, [r6, r3]
 8013fba:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8013fbc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013fbe:	ea80 010c 	eor.w	r1, r0, ip
 8013fc2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	b2c9      	uxtb	r1, r1
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8013fd0:	4573      	cmp	r3, lr
 8013fd2:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013fd4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013fd8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013fda:	f080 811d 	bcs.w	8014218 <uxr_read_framed_msg+0x360>
 8013fde:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013fe2:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8013fe6:	1c50      	adds	r0, r2, #1
 8013fe8:	eb04 0c02 	add.w	ip, r4, r2
 8013fec:	4592      	cmp	sl, r2
 8013fee:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8013ff2:	d1cd      	bne.n	8013f90 <uxr_read_framed_msg+0xd8>
 8013ff4:	459e      	cmp	lr, r3
 8013ff6:	f040 8114 	bne.w	8014222 <uxr_read_framed_msg+0x36a>
 8013ffa:	2306      	movs	r3, #6
 8013ffc:	7023      	strb	r3, [r4, #0]
 8013ffe:	e76c      	b.n	8013eda <uxr_read_framed_msg+0x22>
 8014000:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014004:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014008:	4298      	cmp	r0, r3
 801400a:	f000 80c6 	beq.w	801419a <uxr_read_framed_msg+0x2e2>
 801400e:	18e2      	adds	r2, r4, r3
 8014010:	7891      	ldrb	r1, [r2, #2]
 8014012:	297d      	cmp	r1, #125	@ 0x7d
 8014014:	f000 8193 	beq.w	801433e <uxr_read_framed_msg+0x486>
 8014018:	3301      	adds	r3, #1
 801401a:	202a      	movs	r0, #42	@ 0x2a
 801401c:	297e      	cmp	r1, #126	@ 0x7e
 801401e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014022:	fba5 c202 	umull	ip, r2, r5, r2
 8014026:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801402a:	fb00 3312 	mls	r3, r0, r2, r3
 801402e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014032:	f000 81d0 	beq.w	80143d6 <uxr_read_framed_msg+0x51e>
 8014036:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014038:	2000      	movs	r0, #0
 801403a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801403e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014040:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014042:	b29b      	uxth	r3, r3
 8014044:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014046:	428b      	cmp	r3, r1
 8014048:	8623      	strh	r3, [r4, #48]	@ 0x30
 801404a:	f240 80e2 	bls.w	8014212 <uxr_read_framed_msg+0x35a>
 801404e:	7020      	strb	r0, [r4, #0]
 8014050:	b003      	add	sp, #12
 8014052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014056:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801405a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801405e:	4298      	cmp	r0, r3
 8014060:	f000 80aa 	beq.w	80141b8 <uxr_read_framed_msg+0x300>
 8014064:	18e2      	adds	r2, r4, r3
 8014066:	7891      	ldrb	r1, [r2, #2]
 8014068:	297d      	cmp	r1, #125	@ 0x7d
 801406a:	f000 8186 	beq.w	801437a <uxr_read_framed_msg+0x4c2>
 801406e:	3301      	adds	r3, #1
 8014070:	202a      	movs	r0, #42	@ 0x2a
 8014072:	297e      	cmp	r1, #126	@ 0x7e
 8014074:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014078:	fba5 c202 	umull	ip, r2, r5, r2
 801407c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014080:	fb00 3312 	mls	r3, r0, r2, r3
 8014084:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014088:	f000 8195 	beq.w	80143b6 <uxr_read_framed_msg+0x4fe>
 801408c:	2304      	movs	r3, #4
 801408e:	8621      	strh	r1, [r4, #48]	@ 0x30
 8014090:	7023      	strb	r3, [r4, #0]
 8014092:	e722      	b.n	8013eda <uxr_read_framed_msg+0x22>
 8014094:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014098:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801409c:	4290      	cmp	r0, r2
 801409e:	f000 80b4 	beq.w	801420a <uxr_read_framed_msg+0x352>
 80140a2:	18a3      	adds	r3, r4, r2
 80140a4:	7899      	ldrb	r1, [r3, #2]
 80140a6:	297d      	cmp	r1, #125	@ 0x7d
 80140a8:	f000 8107 	beq.w	80142ba <uxr_read_framed_msg+0x402>
 80140ac:	3201      	adds	r2, #1
 80140ae:	232a      	movs	r3, #42	@ 0x2a
 80140b0:	297e      	cmp	r1, #126	@ 0x7e
 80140b2:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80140b6:	fba5 c000 	umull	ip, r0, r5, r0
 80140ba:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80140be:	fb03 2210 	mls	r2, r3, r0, r2
 80140c2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80140c6:	f000 818a 	beq.w	80143de <uxr_read_framed_msg+0x526>
 80140ca:	7863      	ldrb	r3, [r4, #1]
 80140cc:	428b      	cmp	r3, r1
 80140ce:	bf0c      	ite	eq
 80140d0:	2303      	moveq	r3, #3
 80140d2:	2300      	movne	r3, #0
 80140d4:	7023      	strb	r3, [r4, #0]
 80140d6:	e700      	b.n	8013eda <uxr_read_framed_msg+0x22>
 80140d8:	2300      	movs	r3, #0
 80140da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80140de:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 80140e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80140e6:	4299      	cmp	r1, r3
 80140e8:	d06a      	beq.n	80141c0 <uxr_read_framed_msg+0x308>
 80140ea:	18e2      	adds	r2, r4, r3
 80140ec:	7890      	ldrb	r0, [r2, #2]
 80140ee:	287d      	cmp	r0, #125	@ 0x7d
 80140f0:	f000 8100 	beq.w	80142f4 <uxr_read_framed_msg+0x43c>
 80140f4:	3301      	adds	r3, #1
 80140f6:	212a      	movs	r1, #42	@ 0x2a
 80140f8:	287e      	cmp	r0, #126	@ 0x7e
 80140fa:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80140fe:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014102:	fba5 c202 	umull	ip, r2, r5, r2
 8014106:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801410a:	fb01 3312 	mls	r3, r1, r2, r3
 801410e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014112:	d055      	beq.n	80141c0 <uxr_read_framed_msg+0x308>
 8014114:	2302      	movs	r3, #2
 8014116:	7023      	strb	r3, [r4, #0]
 8014118:	e6df      	b.n	8013eda <uxr_read_framed_msg+0x22>
 801411a:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801411e:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014122:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014126:	1c5a      	adds	r2, r3, #1
 8014128:	459c      	cmp	ip, r3
 801412a:	eb04 0103 	add.w	r1, r4, r3
 801412e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8014132:	f43f af04 	beq.w	8013f3e <uxr_read_framed_msg+0x86>
 8014136:	fba5 0303 	umull	r0, r3, r5, r3
 801413a:	7889      	ldrb	r1, [r1, #2]
 801413c:	089b      	lsrs	r3, r3, #2
 801413e:	297e      	cmp	r1, #126	@ 0x7e
 8014140:	fb0e 2313 	mls	r3, lr, r3, r2
 8014144:	b2db      	uxtb	r3, r3
 8014146:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801414a:	d1ec      	bne.n	8014126 <uxr_read_framed_msg+0x26e>
 801414c:	2301      	movs	r3, #1
 801414e:	7023      	strb	r3, [r4, #0]
 8014150:	e6c3      	b.n	8013eda <uxr_read_framed_msg+0x22>
 8014152:	1c50      	adds	r0, r2, #1
 8014154:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8014158:	3202      	adds	r2, #2
 801415a:	0841      	lsrs	r1, r0, #1
 801415c:	fba5 c101 	umull	ip, r1, r5, r1
 8014160:	0889      	lsrs	r1, r1, #2
 8014162:	fb0b 0111 	mls	r1, fp, r1, r0
 8014166:	1860      	adds	r0, r4, r1
 8014168:	b2c9      	uxtb	r1, r1
 801416a:	458a      	cmp	sl, r1
 801416c:	f43f af42 	beq.w	8013ff4 <uxr_read_framed_msg+0x13c>
 8014170:	0851      	lsrs	r1, r2, #1
 8014172:	7880      	ldrb	r0, [r0, #2]
 8014174:	fba5 a101 	umull	sl, r1, r5, r1
 8014178:	287e      	cmp	r0, #126	@ 0x7e
 801417a:	f080 0c20 	eor.w	ip, r0, #32
 801417e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8014182:	fb0b 2211 	mls	r2, fp, r1, r2
 8014186:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801418a:	f47f af14 	bne.w	8013fb6 <uxr_read_framed_msg+0xfe>
 801418e:	459e      	cmp	lr, r3
 8014190:	f43f af33 	beq.w	8013ffa <uxr_read_framed_msg+0x142>
 8014194:	2301      	movs	r3, #1
 8014196:	7023      	strb	r3, [r4, #0]
 8014198:	e69f      	b.n	8013eda <uxr_read_framed_msg+0x22>
 801419a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801419c:	9300      	str	r3, [sp, #0]
 801419e:	2301      	movs	r3, #1
 80141a0:	9301      	str	r3, [sp, #4]
 80141a2:	464a      	mov	r2, r9
 80141a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141a6:	4641      	mov	r1, r8
 80141a8:	4620      	mov	r0, r4
 80141aa:	f7ff fdf1 	bl	8013d90 <uxr_framing_read_transport>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	f43f aec5 	beq.w	8013f3e <uxr_read_framed_msg+0x86>
 80141b4:	7823      	ldrb	r3, [r4, #0]
 80141b6:	e690      	b.n	8013eda <uxr_read_framed_msg+0x22>
 80141b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	2302      	movs	r3, #2
 80141be:	e7ef      	b.n	80141a0 <uxr_read_framed_msg+0x2e8>
 80141c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141c2:	464a      	mov	r2, r9
 80141c4:	4641      	mov	r1, r8
 80141c6:	4620      	mov	r0, r4
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	2304      	movs	r3, #4
 80141cc:	9301      	str	r3, [sp, #4]
 80141ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141d0:	f7ff fdde 	bl	8013d90 <uxr_framing_read_transport>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	d1ed      	bne.n	80141b4 <uxr_read_framed_msg+0x2fc>
 80141d8:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80141dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80141de:	d0e9      	beq.n	80141b4 <uxr_read_framed_msg+0x2fc>
 80141e0:	e6ad      	b.n	8013f3e <uxr_read_framed_msg+0x86>
 80141e2:	bf00      	nop
 80141e4:	30c30c31 	.word	0x30c30c31
 80141e8:	0801d168 	.word	0x0801d168
 80141ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	2305      	movs	r3, #5
 80141f2:	9301      	str	r3, [sp, #4]
 80141f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141f6:	f7ff fdcb 	bl	8013d90 <uxr_framing_read_transport>
 80141fa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80141fe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014202:	429a      	cmp	r2, r3
 8014204:	f43f ae9b 	beq.w	8013f3e <uxr_read_framed_msg+0x86>
 8014208:	e664      	b.n	8013ed4 <uxr_read_framed_msg+0x1c>
 801420a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	2303      	movs	r3, #3
 8014210:	e7c6      	b.n	80141a0 <uxr_read_framed_msg+0x2e8>
 8014212:	2305      	movs	r3, #5
 8014214:	7023      	strb	r3, [r4, #0]
 8014216:	e660      	b.n	8013eda <uxr_read_framed_msg+0x22>
 8014218:	f43f aeef 	beq.w	8013ffa <uxr_read_framed_msg+0x142>
 801421c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014220:	d094      	beq.n	801414c <uxr_read_framed_msg+0x294>
 8014222:	ebae 0303 	sub.w	r3, lr, r3
 8014226:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014228:	3302      	adds	r3, #2
 801422a:	9200      	str	r2, [sp, #0]
 801422c:	e7b8      	b.n	80141a0 <uxr_read_framed_msg+0x2e8>
 801422e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014232:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014234:	7013      	strb	r3, [r2, #0]
 8014236:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014238:	b003      	add	sp, #12
 801423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423e:	1c59      	adds	r1, r3, #1
 8014240:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014244:	084a      	lsrs	r2, r1, #1
 8014246:	fba5 e202 	umull	lr, r2, r5, r2
 801424a:	0892      	lsrs	r2, r2, #2
 801424c:	fb0c 1212 	mls	r2, ip, r2, r1
 8014250:	b2d1      	uxtb	r1, r2
 8014252:	4288      	cmp	r0, r1
 8014254:	d0b0      	beq.n	80141b8 <uxr_read_framed_msg+0x300>
 8014256:	3302      	adds	r3, #2
 8014258:	4422      	add	r2, r4
 801425a:	7891      	ldrb	r1, [r2, #2]
 801425c:	085a      	lsrs	r2, r3, #1
 801425e:	fba5 0202 	umull	r0, r2, r5, r2
 8014262:	297e      	cmp	r1, #126	@ 0x7e
 8014264:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014268:	fb0c 3312 	mls	r3, ip, r2, r3
 801426c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014270:	f000 80a1 	beq.w	80143b6 <uxr_read_framed_msg+0x4fe>
 8014274:	f081 0120 	eor.w	r1, r1, #32
 8014278:	e680      	b.n	8013f7c <uxr_read_framed_msg+0xc4>
 801427a:	f103 0c01 	add.w	ip, r3, #1
 801427e:	202a      	movs	r0, #42	@ 0x2a
 8014280:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014284:	fba5 e202 	umull	lr, r2, r5, r2
 8014288:	0892      	lsrs	r2, r2, #2
 801428a:	fb00 c212 	mls	r2, r0, r2, ip
 801428e:	fa5f fc82 	uxtb.w	ip, r2
 8014292:	4561      	cmp	r1, ip
 8014294:	d081      	beq.n	801419a <uxr_read_framed_msg+0x2e2>
 8014296:	3302      	adds	r3, #2
 8014298:	4422      	add	r2, r4
 801429a:	0859      	lsrs	r1, r3, #1
 801429c:	7892      	ldrb	r2, [r2, #2]
 801429e:	fba5 c101 	umull	ip, r1, r5, r1
 80142a2:	2a7e      	cmp	r2, #126	@ 0x7e
 80142a4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80142a8:	fb00 3311 	mls	r3, r0, r1, r3
 80142ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80142b0:	f000 8091 	beq.w	80143d6 <uxr_read_framed_msg+0x51e>
 80142b4:	f082 0220 	eor.w	r2, r2, #32
 80142b8:	e636      	b.n	8013f28 <uxr_read_framed_msg+0x70>
 80142ba:	1c51      	adds	r1, r2, #1
 80142bc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80142c0:	084b      	lsrs	r3, r1, #1
 80142c2:	fba5 e303 	umull	lr, r3, r5, r3
 80142c6:	089b      	lsrs	r3, r3, #2
 80142c8:	fb0c 1313 	mls	r3, ip, r3, r1
 80142cc:	b2d9      	uxtb	r1, r3
 80142ce:	4288      	cmp	r0, r1
 80142d0:	d09b      	beq.n	801420a <uxr_read_framed_msg+0x352>
 80142d2:	3202      	adds	r2, #2
 80142d4:	4423      	add	r3, r4
 80142d6:	0850      	lsrs	r0, r2, #1
 80142d8:	789b      	ldrb	r3, [r3, #2]
 80142da:	fba5 1000 	umull	r1, r0, r5, r0
 80142de:	2b7e      	cmp	r3, #126	@ 0x7e
 80142e0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80142e4:	fb0c 2210 	mls	r2, ip, r0, r2
 80142e8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80142ec:	d077      	beq.n	80143de <uxr_read_framed_msg+0x526>
 80142ee:	f083 0120 	eor.w	r1, r3, #32
 80142f2:	e6ea      	b.n	80140ca <uxr_read_framed_msg+0x212>
 80142f4:	f103 0c01 	add.w	ip, r3, #1
 80142f8:	202a      	movs	r0, #42	@ 0x2a
 80142fa:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80142fe:	fba5 e202 	umull	lr, r2, r5, r2
 8014302:	0892      	lsrs	r2, r2, #2
 8014304:	fb00 c212 	mls	r2, r0, r2, ip
 8014308:	fa5f fc82 	uxtb.w	ip, r2
 801430c:	4561      	cmp	r1, ip
 801430e:	f43f af57 	beq.w	80141c0 <uxr_read_framed_msg+0x308>
 8014312:	3302      	adds	r3, #2
 8014314:	4422      	add	r2, r4
 8014316:	7891      	ldrb	r1, [r2, #2]
 8014318:	085a      	lsrs	r2, r3, #1
 801431a:	fba5 c202 	umull	ip, r2, r5, r2
 801431e:	297e      	cmp	r1, #126	@ 0x7e
 8014320:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8014324:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014328:	fb00 3312 	mls	r3, r0, r2, r3
 801432c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014330:	f43f af46 	beq.w	80141c0 <uxr_read_framed_msg+0x308>
 8014334:	f081 0120 	eor.w	r1, r1, #32
 8014338:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801433c:	e6ea      	b.n	8014114 <uxr_read_framed_msg+0x25c>
 801433e:	1c59      	adds	r1, r3, #1
 8014340:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014344:	084a      	lsrs	r2, r1, #1
 8014346:	fba5 e202 	umull	lr, r2, r5, r2
 801434a:	0892      	lsrs	r2, r2, #2
 801434c:	fb0c 1212 	mls	r2, ip, r2, r1
 8014350:	b2d1      	uxtb	r1, r2
 8014352:	4288      	cmp	r0, r1
 8014354:	f43f af21 	beq.w	801419a <uxr_read_framed_msg+0x2e2>
 8014358:	3302      	adds	r3, #2
 801435a:	4422      	add	r2, r4
 801435c:	7891      	ldrb	r1, [r2, #2]
 801435e:	085a      	lsrs	r2, r3, #1
 8014360:	fba5 0202 	umull	r0, r2, r5, r2
 8014364:	297e      	cmp	r1, #126	@ 0x7e
 8014366:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801436a:	fb0c 3312 	mls	r3, ip, r2, r3
 801436e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014372:	d030      	beq.n	80143d6 <uxr_read_framed_msg+0x51e>
 8014374:	f081 0120 	eor.w	r1, r1, #32
 8014378:	e65d      	b.n	8014036 <uxr_read_framed_msg+0x17e>
 801437a:	1c59      	adds	r1, r3, #1
 801437c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014380:	084a      	lsrs	r2, r1, #1
 8014382:	fba5 e202 	umull	lr, r2, r5, r2
 8014386:	0892      	lsrs	r2, r2, #2
 8014388:	fb0c 1212 	mls	r2, ip, r2, r1
 801438c:	b2d1      	uxtb	r1, r2
 801438e:	4288      	cmp	r0, r1
 8014390:	f43f af12 	beq.w	80141b8 <uxr_read_framed_msg+0x300>
 8014394:	3302      	adds	r3, #2
 8014396:	4422      	add	r2, r4
 8014398:	7891      	ldrb	r1, [r2, #2]
 801439a:	085a      	lsrs	r2, r3, #1
 801439c:	fba5 0202 	umull	r0, r2, r5, r2
 80143a0:	297e      	cmp	r1, #126	@ 0x7e
 80143a2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80143a6:	fb0c 3312 	mls	r3, ip, r2, r3
 80143aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80143ae:	d002      	beq.n	80143b6 <uxr_read_framed_msg+0x4fe>
 80143b0:	f081 0120 	eor.w	r1, r1, #32
 80143b4:	e66a      	b.n	801408c <uxr_read_framed_msg+0x1d4>
 80143b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	2302      	movs	r3, #2
 80143bc:	9301      	str	r3, [sp, #4]
 80143be:	464a      	mov	r2, r9
 80143c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80143c2:	4641      	mov	r1, r8
 80143c4:	4620      	mov	r0, r4
 80143c6:	f7ff fce3 	bl	8013d90 <uxr_framing_read_transport>
 80143ca:	2800      	cmp	r0, #0
 80143cc:	f47f aef2 	bne.w	80141b4 <uxr_read_framed_msg+0x2fc>
 80143d0:	2301      	movs	r3, #1
 80143d2:	7023      	strb	r3, [r4, #0]
 80143d4:	e581      	b.n	8013eda <uxr_read_framed_msg+0x22>
 80143d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143d8:	9300      	str	r3, [sp, #0]
 80143da:	2301      	movs	r3, #1
 80143dc:	e7ee      	b.n	80143bc <uxr_read_framed_msg+0x504>
 80143de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143e0:	9300      	str	r3, [sp, #0]
 80143e2:	2303      	movs	r3, #3
 80143e4:	e7ea      	b.n	80143bc <uxr_read_framed_msg+0x504>
 80143e6:	bf00      	nop

080143e8 <uxr_stream_id>:
 80143e8:	2901      	cmp	r1, #1
 80143ea:	4684      	mov	ip, r0
 80143ec:	b500      	push	{lr}
 80143ee:	b083      	sub	sp, #12
 80143f0:	d01f      	beq.n	8014432 <uxr_stream_id+0x4a>
 80143f2:	2902      	cmp	r1, #2
 80143f4:	f04f 0e00 	mov.w	lr, #0
 80143f8:	d020      	beq.n	801443c <uxr_stream_id+0x54>
 80143fa:	2300      	movs	r3, #0
 80143fc:	2000      	movs	r0, #0
 80143fe:	f36e 0307 	bfi	r3, lr, #0, #8
 8014402:	f36c 230f 	bfi	r3, ip, #8, #8
 8014406:	f361 4317 	bfi	r3, r1, #16, #8
 801440a:	f362 631f 	bfi	r3, r2, #24, #8
 801440e:	fa5f fc83 	uxtb.w	ip, r3
 8014412:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014416:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801441a:	0e1b      	lsrs	r3, r3, #24
 801441c:	f36c 0007 	bfi	r0, ip, #0, #8
 8014420:	f361 200f 	bfi	r0, r1, #8, #8
 8014424:	f362 4017 	bfi	r0, r2, #16, #8
 8014428:	f363 601f 	bfi	r0, r3, #24, #8
 801442c:	b003      	add	sp, #12
 801442e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014432:	f100 0e01 	add.w	lr, r0, #1
 8014436:	fa5f fe8e 	uxtb.w	lr, lr
 801443a:	e7de      	b.n	80143fa <uxr_stream_id+0x12>
 801443c:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8014440:	e7db      	b.n	80143fa <uxr_stream_id+0x12>
 8014442:	bf00      	nop

08014444 <uxr_stream_id_from_raw>:
 8014444:	b082      	sub	sp, #8
 8014446:	b130      	cbz	r0, 8014456 <uxr_stream_id_from_raw+0x12>
 8014448:	0603      	lsls	r3, r0, #24
 801444a:	d421      	bmi.n	8014490 <uxr_stream_id_from_raw+0x4c>
 801444c:	1e42      	subs	r2, r0, #1
 801444e:	f04f 0c01 	mov.w	ip, #1
 8014452:	b2d2      	uxtb	r2, r2
 8014454:	e001      	b.n	801445a <uxr_stream_id_from_raw+0x16>
 8014456:	4684      	mov	ip, r0
 8014458:	4602      	mov	r2, r0
 801445a:	2300      	movs	r3, #0
 801445c:	f360 0307 	bfi	r3, r0, #0, #8
 8014460:	2000      	movs	r0, #0
 8014462:	f362 230f 	bfi	r3, r2, #8, #8
 8014466:	f36c 4317 	bfi	r3, ip, #16, #8
 801446a:	f361 631f 	bfi	r3, r1, #24, #8
 801446e:	fa5f fc83 	uxtb.w	ip, r3
 8014472:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014476:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801447a:	0e1b      	lsrs	r3, r3, #24
 801447c:	f36c 0007 	bfi	r0, ip, #0, #8
 8014480:	f361 200f 	bfi	r0, r1, #8, #8
 8014484:	f362 4017 	bfi	r0, r2, #16, #8
 8014488:	f363 601f 	bfi	r0, r3, #24, #8
 801448c:	b002      	add	sp, #8
 801448e:	4770      	bx	lr
 8014490:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8014494:	f04f 0c02 	mov.w	ip, #2
 8014498:	e7df      	b.n	801445a <uxr_stream_id_from_raw+0x16>
 801449a:	bf00      	nop

0801449c <uxr_init_stream_storage>:
 801449c:	2300      	movs	r3, #0
 801449e:	7403      	strb	r3, [r0, #16]
 80144a0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80144a4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80144a8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80144ac:	4770      	bx	lr
 80144ae:	bf00      	nop

080144b0 <uxr_reset_stream_storage>:
 80144b0:	b570      	push	{r4, r5, r6, lr}
 80144b2:	7c03      	ldrb	r3, [r0, #16]
 80144b4:	4604      	mov	r4, r0
 80144b6:	b14b      	cbz	r3, 80144cc <uxr_reset_stream_storage+0x1c>
 80144b8:	4606      	mov	r6, r0
 80144ba:	2500      	movs	r5, #0
 80144bc:	4630      	mov	r0, r6
 80144be:	3501      	adds	r5, #1
 80144c0:	f006 f8c2 	bl	801a648 <uxr_reset_output_best_effort_stream>
 80144c4:	7c23      	ldrb	r3, [r4, #16]
 80144c6:	3610      	adds	r6, #16
 80144c8:	42ab      	cmp	r3, r5
 80144ca:	d8f7      	bhi.n	80144bc <uxr_reset_stream_storage+0xc>
 80144cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80144d0:	b15b      	cbz	r3, 80144ea <uxr_reset_stream_storage+0x3a>
 80144d2:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144d6:	2500      	movs	r5, #0
 80144d8:	4630      	mov	r0, r6
 80144da:	3501      	adds	r5, #1
 80144dc:	f005 feba 	bl	801a254 <uxr_reset_input_best_effort_stream>
 80144e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80144e4:	3602      	adds	r6, #2
 80144e6:	42ab      	cmp	r3, r5
 80144e8:	d8f6      	bhi.n	80144d8 <uxr_reset_stream_storage+0x28>
 80144ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80144ee:	b15b      	cbz	r3, 8014508 <uxr_reset_stream_storage+0x58>
 80144f0:	f104 0618 	add.w	r6, r4, #24
 80144f4:	2500      	movs	r5, #0
 80144f6:	4630      	mov	r0, r6
 80144f8:	3501      	adds	r5, #1
 80144fa:	f006 f951 	bl	801a7a0 <uxr_reset_output_reliable_stream>
 80144fe:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014502:	3628      	adds	r6, #40	@ 0x28
 8014504:	42ab      	cmp	r3, r5
 8014506:	d8f6      	bhi.n	80144f6 <uxr_reset_stream_storage+0x46>
 8014508:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801450c:	b15b      	cbz	r3, 8014526 <uxr_reset_stream_storage+0x76>
 801450e:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014512:	2500      	movs	r5, #0
 8014514:	4630      	mov	r0, r6
 8014516:	3501      	adds	r5, #1
 8014518:	f005 ff08 	bl	801a32c <uxr_reset_input_reliable_stream>
 801451c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014520:	3618      	adds	r6, #24
 8014522:	42ab      	cmp	r3, r5
 8014524:	d8f6      	bhi.n	8014514 <uxr_reset_stream_storage+0x64>
 8014526:	bd70      	pop	{r4, r5, r6, pc}

08014528 <uxr_add_output_best_effort_buffer>:
 8014528:	b510      	push	{r4, lr}
 801452a:	7c04      	ldrb	r4, [r0, #16]
 801452c:	b082      	sub	sp, #8
 801452e:	f104 0c01 	add.w	ip, r4, #1
 8014532:	f880 c010 	strb.w	ip, [r0, #16]
 8014536:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801453a:	f006 f87b 	bl	801a634 <uxr_init_output_best_effort_stream>
 801453e:	2201      	movs	r2, #1
 8014540:	4620      	mov	r0, r4
 8014542:	4611      	mov	r1, r2
 8014544:	b002      	add	sp, #8
 8014546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801454a:	f7ff bf4d 	b.w	80143e8 <uxr_stream_id>
 801454e:	bf00      	nop

08014550 <uxr_add_output_reliable_buffer>:
 8014550:	b510      	push	{r4, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	4684      	mov	ip, r0
 8014556:	2028      	movs	r0, #40	@ 0x28
 8014558:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801455c:	9400      	str	r4, [sp, #0]
 801455e:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8014562:	fb00 c004 	mla	r0, r0, r4, ip
 8014566:	f104 0e01 	add.w	lr, r4, #1
 801456a:	3018      	adds	r0, #24
 801456c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014570:	f006 f8e0 	bl	801a734 <uxr_init_output_reliable_stream>
 8014574:	2201      	movs	r2, #1
 8014576:	2102      	movs	r1, #2
 8014578:	4620      	mov	r0, r4
 801457a:	b004      	add	sp, #16
 801457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014580:	f7ff bf32 	b.w	80143e8 <uxr_stream_id>

08014584 <uxr_add_input_best_effort_buffer>:
 8014584:	b510      	push	{r4, lr}
 8014586:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801458a:	b082      	sub	sp, #8
 801458c:	1c62      	adds	r2, r4, #1
 801458e:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014592:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8014596:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801459a:	f005 fe57 	bl	801a24c <uxr_init_input_best_effort_stream>
 801459e:	2200      	movs	r2, #0
 80145a0:	2101      	movs	r1, #1
 80145a2:	4620      	mov	r0, r4
 80145a4:	b002      	add	sp, #8
 80145a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145aa:	f7ff bf1d 	b.w	80143e8 <uxr_stream_id>
 80145ae:	bf00      	nop

080145b0 <uxr_add_input_reliable_buffer>:
 80145b0:	b510      	push	{r4, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	4684      	mov	ip, r0
 80145b6:	2018      	movs	r0, #24
 80145b8:	9c06      	ldr	r4, [sp, #24]
 80145ba:	9400      	str	r4, [sp, #0]
 80145bc:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80145c0:	fb00 c004 	mla	r0, r0, r4, ip
 80145c4:	f104 0e01 	add.w	lr, r4, #1
 80145c8:	3048      	adds	r0, #72	@ 0x48
 80145ca:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80145ce:	f005 fe87 	bl	801a2e0 <uxr_init_input_reliable_stream>
 80145d2:	2200      	movs	r2, #0
 80145d4:	2102      	movs	r1, #2
 80145d6:	4620      	mov	r0, r4
 80145d8:	b004      	add	sp, #16
 80145da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145de:	f7ff bf03 	b.w	80143e8 <uxr_stream_id>
 80145e2:	bf00      	nop

080145e4 <uxr_get_output_best_effort_stream>:
 80145e4:	7c03      	ldrb	r3, [r0, #16]
 80145e6:	428b      	cmp	r3, r1
 80145e8:	bf8c      	ite	hi
 80145ea:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80145ee:	2000      	movls	r0, #0
 80145f0:	4770      	bx	lr
 80145f2:	bf00      	nop

080145f4 <uxr_get_output_reliable_stream>:
 80145f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80145f8:	428b      	cmp	r3, r1
 80145fa:	d904      	bls.n	8014606 <uxr_get_output_reliable_stream+0x12>
 80145fc:	2328      	movs	r3, #40	@ 0x28
 80145fe:	fb03 0001 	mla	r0, r3, r1, r0
 8014602:	3018      	adds	r0, #24
 8014604:	4770      	bx	lr
 8014606:	2000      	movs	r0, #0
 8014608:	4770      	bx	lr
 801460a:	bf00      	nop

0801460c <uxr_get_input_best_effort_stream>:
 801460c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014610:	428b      	cmp	r3, r1
 8014612:	d903      	bls.n	801461c <uxr_get_input_best_effort_stream+0x10>
 8014614:	3121      	adds	r1, #33	@ 0x21
 8014616:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801461a:	4770      	bx	lr
 801461c:	2000      	movs	r0, #0
 801461e:	4770      	bx	lr

08014620 <uxr_get_input_reliable_stream>:
 8014620:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014624:	428b      	cmp	r3, r1
 8014626:	d904      	bls.n	8014632 <uxr_get_input_reliable_stream+0x12>
 8014628:	2318      	movs	r3, #24
 801462a:	fb03 0001 	mla	r0, r3, r1, r0
 801462e:	3048      	adds	r0, #72	@ 0x48
 8014630:	4770      	bx	lr
 8014632:	2000      	movs	r0, #0
 8014634:	4770      	bx	lr
 8014636:	bf00      	nop

08014638 <uxr_output_streams_confirmed>:
 8014638:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801463c:	b183      	cbz	r3, 8014660 <uxr_output_streams_confirmed+0x28>
 801463e:	b570      	push	{r4, r5, r6, lr}
 8014640:	4606      	mov	r6, r0
 8014642:	f100 0518 	add.w	r5, r0, #24
 8014646:	2400      	movs	r4, #0
 8014648:	e000      	b.n	801464c <uxr_output_streams_confirmed+0x14>
 801464a:	b140      	cbz	r0, 801465e <uxr_output_streams_confirmed+0x26>
 801464c:	4628      	mov	r0, r5
 801464e:	3401      	adds	r4, #1
 8014650:	f006 fb1a 	bl	801ac88 <uxr_is_output_up_to_date>
 8014654:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014658:	3528      	adds	r5, #40	@ 0x28
 801465a:	42a3      	cmp	r3, r4
 801465c:	d8f5      	bhi.n	801464a <uxr_output_streams_confirmed+0x12>
 801465e:	bd70      	pop	{r4, r5, r6, pc}
 8014660:	2001      	movs	r0, #1
 8014662:	4770      	bx	lr

08014664 <uxr_buffer_submessage_header>:
 8014664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014666:	460e      	mov	r6, r1
 8014668:	2104      	movs	r1, #4
 801466a:	4604      	mov	r4, r0
 801466c:	4615      	mov	r5, r2
 801466e:	461f      	mov	r7, r3
 8014670:	f7fd fd36 	bl	80120e0 <ucdr_align_to>
 8014674:	2301      	movs	r3, #1
 8014676:	4631      	mov	r1, r6
 8014678:	4620      	mov	r0, r4
 801467a:	ea47 0203 	orr.w	r2, r7, r3
 801467e:	7523      	strb	r3, [r4, #20]
 8014680:	462b      	mov	r3, r5
 8014682:	f000 fa29 	bl	8014ad8 <uxr_serialize_submessage_header>
 8014686:	4620      	mov	r0, r4
 8014688:	f7fd fd40 	bl	801210c <ucdr_buffer_remaining>
 801468c:	42a8      	cmp	r0, r5
 801468e:	bf34      	ite	cc
 8014690:	2000      	movcc	r0, #0
 8014692:	2001      	movcs	r0, #1
 8014694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014696:	bf00      	nop

08014698 <uxr_read_submessage_header>:
 8014698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801469c:	4604      	mov	r4, r0
 801469e:	460d      	mov	r5, r1
 80146a0:	2104      	movs	r1, #4
 80146a2:	4616      	mov	r6, r2
 80146a4:	4698      	mov	r8, r3
 80146a6:	f7fd fd1b 	bl	80120e0 <ucdr_align_to>
 80146aa:	4620      	mov	r0, r4
 80146ac:	f7fd fd2e 	bl	801210c <ucdr_buffer_remaining>
 80146b0:	2803      	cmp	r0, #3
 80146b2:	bf8c      	ite	hi
 80146b4:	2701      	movhi	r7, #1
 80146b6:	2700      	movls	r7, #0
 80146b8:	d802      	bhi.n	80146c0 <uxr_read_submessage_header+0x28>
 80146ba:	4638      	mov	r0, r7
 80146bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146c0:	4633      	mov	r3, r6
 80146c2:	4642      	mov	r2, r8
 80146c4:	4620      	mov	r0, r4
 80146c6:	4629      	mov	r1, r5
 80146c8:	f000 fa1a 	bl	8014b00 <uxr_deserialize_submessage_header>
 80146cc:	f898 3000 	ldrb.w	r3, [r8]
 80146d0:	4638      	mov	r0, r7
 80146d2:	f003 0201 	and.w	r2, r3, #1
 80146d6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80146da:	f888 3000 	strb.w	r3, [r8]
 80146de:	7522      	strb	r2, [r4, #20]
 80146e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146e4 <uxr_submessage_padding>:
 80146e4:	f010 0003 	ands.w	r0, r0, #3
 80146e8:	bf18      	it	ne
 80146ea:	f1c0 0004 	rsbne	r0, r0, #4
 80146ee:	4770      	bx	lr

080146f0 <uxr_millis>:
 80146f0:	b510      	push	{r4, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	2001      	movs	r0, #1
 80146f6:	4669      	mov	r1, sp
 80146f8:	f7ed fb92 	bl	8001e20 <clock_gettime>
 80146fc:	4908      	ldr	r1, [pc, #32]	@ (8014720 <uxr_millis+0x30>)
 80146fe:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014702:	fba0 0301 	umull	r0, r3, r0, r1
 8014706:	1900      	adds	r0, r0, r4
 8014708:	fb01 3102 	mla	r1, r1, r2, r3
 801470c:	4a05      	ldr	r2, [pc, #20]	@ (8014724 <uxr_millis+0x34>)
 801470e:	f04f 0300 	mov.w	r3, #0
 8014712:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014716:	f7eb fe4b 	bl	80003b0 <__aeabi_ldivmod>
 801471a:	b004      	add	sp, #16
 801471c:	bd10      	pop	{r4, pc}
 801471e:	bf00      	nop
 8014720:	3b9aca00 	.word	0x3b9aca00
 8014724:	000f4240 	.word	0x000f4240

08014728 <uxr_nanos>:
 8014728:	b510      	push	{r4, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	2001      	movs	r0, #1
 801472e:	4669      	mov	r1, sp
 8014730:	f7ed fb76 	bl	8001e20 <clock_gettime>
 8014734:	4a06      	ldr	r2, [pc, #24]	@ (8014750 <uxr_nanos+0x28>)
 8014736:	9800      	ldr	r0, [sp, #0]
 8014738:	9902      	ldr	r1, [sp, #8]
 801473a:	fba0 0302 	umull	r0, r3, r0, r2
 801473e:	9c01      	ldr	r4, [sp, #4]
 8014740:	1840      	adds	r0, r0, r1
 8014742:	fb02 3304 	mla	r3, r2, r4, r3
 8014746:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801474a:	b004      	add	sp, #16
 801474c:	bd10      	pop	{r4, pc}
 801474e:	bf00      	nop
 8014750:	3b9aca00 	.word	0x3b9aca00

08014754 <on_full_output_buffer_fragmented>:
 8014754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014758:	460c      	mov	r4, r1
 801475a:	b08a      	sub	sp, #40	@ 0x28
 801475c:	4606      	mov	r6, r0
 801475e:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8014762:	f104 0008 	add.w	r0, r4, #8
 8014766:	f7ff ff45 	bl	80145f4 <uxr_get_output_reliable_stream>
 801476a:	4605      	mov	r5, r0
 801476c:	f006 fa96 	bl	801ac9c <get_available_free_slots>
 8014770:	b968      	cbnz	r0, 801478e <on_full_output_buffer_fragmented+0x3a>
 8014772:	4620      	mov	r0, r4
 8014774:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014778:	4798      	blx	r3
 801477a:	b918      	cbnz	r0, 8014784 <on_full_output_buffer_fragmented+0x30>
 801477c:	2001      	movs	r0, #1
 801477e:	b00a      	add	sp, #40	@ 0x28
 8014780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014784:	4628      	mov	r0, r5
 8014786:	f006 fa89 	bl	801ac9c <get_available_free_slots>
 801478a:	2800      	cmp	r0, #0
 801478c:	d0f6      	beq.n	801477c <on_full_output_buffer_fragmented+0x28>
 801478e:	8929      	ldrh	r1, [r5, #8]
 8014790:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8014794:	89eb      	ldrh	r3, [r5, #14]
 8014796:	7b28      	ldrb	r0, [r5, #12]
 8014798:	686f      	ldr	r7, [r5, #4]
 801479a:	1a12      	subs	r2, r2, r0
 801479c:	fbb3 f0f1 	udiv	r0, r3, r1
 80147a0:	fbb7 f7f1 	udiv	r7, r7, r1
 80147a4:	fb01 3110 	mls	r1, r1, r0, r3
 80147a8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80147ac:	b289      	uxth	r1, r1
 80147ae:	fb07 f101 	mul.w	r1, r7, r1
 80147b2:	3f04      	subs	r7, #4
 80147b4:	443a      	add	r2, r7
 80147b6:	3104      	adds	r1, #4
 80147b8:	fa1f f882 	uxth.w	r8, r2
 80147bc:	463a      	mov	r2, r7
 80147be:	eba3 0308 	sub.w	r3, r3, r8
 80147c2:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80147c6:	682b      	ldr	r3, [r5, #0]
 80147c8:	4419      	add	r1, r3
 80147ca:	2300      	movs	r3, #0
 80147cc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80147d0:	9000      	str	r0, [sp, #0]
 80147d2:	a802      	add	r0, sp, #8
 80147d4:	f7fd fc56 	bl	8012084 <ucdr_init_buffer_origin_offset>
 80147d8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80147dc:	f102 0308 	add.w	r3, r2, #8
 80147e0:	42bb      	cmp	r3, r7
 80147e2:	d927      	bls.n	8014834 <on_full_output_buffer_fragmented+0xe0>
 80147e4:	4642      	mov	r2, r8
 80147e6:	2300      	movs	r3, #0
 80147e8:	210d      	movs	r1, #13
 80147ea:	a802      	add	r0, sp, #8
 80147ec:	f7ff ff3a 	bl	8014664 <uxr_buffer_submessage_header>
 80147f0:	8929      	ldrh	r1, [r5, #8]
 80147f2:	89eb      	ldrh	r3, [r5, #14]
 80147f4:	686a      	ldr	r2, [r5, #4]
 80147f6:	fbb3 f0f1 	udiv	r0, r3, r1
 80147fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80147fe:	fb01 3310 	mls	r3, r1, r0, r3
 8014802:	b29b      	uxth	r3, r3
 8014804:	fb02 f303 	mul.w	r3, r2, r3
 8014808:	682a      	ldr	r2, [r5, #0]
 801480a:	50d7      	str	r7, [r2, r3]
 801480c:	2101      	movs	r1, #1
 801480e:	89e8      	ldrh	r0, [r5, #14]
 8014810:	f006 fa66 	bl	801ace0 <uxr_seq_num_add>
 8014814:	9904      	ldr	r1, [sp, #16]
 8014816:	9a03      	ldr	r2, [sp, #12]
 8014818:	81e8      	strh	r0, [r5, #14]
 801481a:	4630      	mov	r0, r6
 801481c:	1a52      	subs	r2, r2, r1
 801481e:	f7fd fc43 	bl	80120a8 <ucdr_init_buffer>
 8014822:	4630      	mov	r0, r6
 8014824:	4622      	mov	r2, r4
 8014826:	490f      	ldr	r1, [pc, #60]	@ (8014864 <on_full_output_buffer_fragmented+0x110>)
 8014828:	f7fd fc12 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 801482c:	2000      	movs	r0, #0
 801482e:	b00a      	add	sp, #40	@ 0x28
 8014830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014834:	b292      	uxth	r2, r2
 8014836:	2302      	movs	r3, #2
 8014838:	210d      	movs	r1, #13
 801483a:	a802      	add	r0, sp, #8
 801483c:	f7ff ff12 	bl	8014664 <uxr_buffer_submessage_header>
 8014840:	8928      	ldrh	r0, [r5, #8]
 8014842:	89eb      	ldrh	r3, [r5, #14]
 8014844:	6869      	ldr	r1, [r5, #4]
 8014846:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801484a:	fbb3 f7f0 	udiv	r7, r3, r0
 801484e:	fbb1 f1f0 	udiv	r1, r1, r0
 8014852:	fb00 3317 	mls	r3, r0, r7, r3
 8014856:	3208      	adds	r2, #8
 8014858:	b29b      	uxth	r3, r3
 801485a:	fb01 f303 	mul.w	r3, r1, r3
 801485e:	6829      	ldr	r1, [r5, #0]
 8014860:	50ca      	str	r2, [r1, r3]
 8014862:	e7d3      	b.n	801480c <on_full_output_buffer_fragmented+0xb8>
 8014864:	08014755 	.word	0x08014755

08014868 <uxr_prepare_output_stream>:
 8014868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801486a:	b087      	sub	sp, #28
 801486c:	2707      	movs	r7, #7
 801486e:	2500      	movs	r5, #0
 8014870:	461c      	mov	r4, r3
 8014872:	4606      	mov	r6, r0
 8014874:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801487a:	e9cd 7500 	strd	r7, r5, [sp]
 801487e:	3204      	adds	r2, #4
 8014880:	f7fe ffc8 	bl	8013814 <uxr_prepare_stream_to_write_submessage>
 8014884:	f080 0201 	eor.w	r2, r0, #1
 8014888:	b2d2      	uxtb	r2, r2
 801488a:	75a2      	strb	r2, [r4, #22]
 801488c:	b112      	cbz	r2, 8014894 <uxr_prepare_output_stream+0x2c>
 801488e:	4628      	mov	r0, r5
 8014890:	b007      	add	sp, #28
 8014892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014894:	aa05      	add	r2, sp, #20
 8014896:	9902      	ldr	r1, [sp, #8]
 8014898:	4630      	mov	r0, r6
 801489a:	f7ff f8f7 	bl	8013a8c <uxr_init_base_object_request>
 801489e:	a905      	add	r1, sp, #20
 80148a0:	4605      	mov	r5, r0
 80148a2:	4620      	mov	r0, r4
 80148a4:	f000 ff9c 	bl	80157e0 <uxr_serialize_WRITE_DATA_Payload_Data>
 80148a8:	69a6      	ldr	r6, [r4, #24]
 80148aa:	69e7      	ldr	r7, [r4, #28]
 80148ac:	4620      	mov	r0, r4
 80148ae:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80148b2:	1a52      	subs	r2, r2, r1
 80148b4:	f7fd fbf8 	bl	80120a8 <ucdr_init_buffer>
 80148b8:	4620      	mov	r0, r4
 80148ba:	463a      	mov	r2, r7
 80148bc:	4631      	mov	r1, r6
 80148be:	f7fd fbc7 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 80148c2:	4628      	mov	r0, r5
 80148c4:	b007      	add	sp, #28
 80148c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148c8 <uxr_prepare_output_stream_fragmented>:
 80148c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148cc:	b091      	sub	sp, #68	@ 0x44
 80148ce:	4605      	mov	r5, r0
 80148d0:	3008      	adds	r0, #8
 80148d2:	461e      	mov	r6, r3
 80148d4:	9105      	str	r1, [sp, #20]
 80148d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80148da:	9204      	str	r2, [sp, #16]
 80148dc:	f7ff fe8a 	bl	80145f4 <uxr_get_output_reliable_stream>
 80148e0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	f000 8093 	beq.w	8014a10 <uxr_prepare_output_stream_fragmented+0x148>
 80148ea:	4604      	mov	r4, r0
 80148ec:	2800      	cmp	r0, #0
 80148ee:	f000 808f 	beq.w	8014a10 <uxr_prepare_output_stream_fragmented+0x148>
 80148f2:	f006 f9d3 	bl	801ac9c <get_available_free_slots>
 80148f6:	2800      	cmp	r0, #0
 80148f8:	f000 8085 	beq.w	8014a06 <uxr_prepare_output_stream_fragmented+0x13e>
 80148fc:	8923      	ldrh	r3, [r4, #8]
 80148fe:	89e7      	ldrh	r7, [r4, #14]
 8014900:	6862      	ldr	r2, [r4, #4]
 8014902:	fbb7 f9f3 	udiv	r9, r7, r3
 8014906:	fbb2 f2f3 	udiv	r2, r2, r3
 801490a:	fb03 7919 	mls	r9, r3, r9, r7
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	f1a2 0b04 	sub.w	fp, r2, #4
 8014914:	9203      	str	r2, [sp, #12]
 8014916:	fa1f f989 	uxth.w	r9, r9
 801491a:	fb02 f909 	mul.w	r9, r2, r9
 801491e:	f109 0904 	add.w	r9, r9, #4
 8014922:	4499      	add	r9, r3
 8014924:	7b23      	ldrb	r3, [r4, #12]
 8014926:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801492a:	4543      	cmp	r3, r8
 801492c:	d37c      	bcc.n	8014a28 <uxr_prepare_output_stream_fragmented+0x160>
 801492e:	f1ab 0a04 	sub.w	sl, fp, #4
 8014932:	465a      	mov	r2, fp
 8014934:	4649      	mov	r1, r9
 8014936:	a808      	add	r0, sp, #32
 8014938:	ebaa 0a03 	sub.w	sl, sl, r3
 801493c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801493e:	f8cd 8000 	str.w	r8, [sp]
 8014942:	3308      	adds	r3, #8
 8014944:	fa1f fa8a 	uxth.w	sl, sl
 8014948:	9302      	str	r3, [sp, #8]
 801494a:	2300      	movs	r3, #0
 801494c:	f7fd fb9a 	bl	8012084 <ucdr_init_buffer_origin_offset>
 8014950:	9b02      	ldr	r3, [sp, #8]
 8014952:	4652      	mov	r2, sl
 8014954:	210d      	movs	r1, #13
 8014956:	455b      	cmp	r3, fp
 8014958:	bf34      	ite	cc
 801495a:	2302      	movcc	r3, #2
 801495c:	2300      	movcs	r3, #0
 801495e:	a808      	add	r0, sp, #32
 8014960:	f7ff fe80 	bl	8014664 <uxr_buffer_submessage_header>
 8014964:	8921      	ldrh	r1, [r4, #8]
 8014966:	6863      	ldr	r3, [r4, #4]
 8014968:	4638      	mov	r0, r7
 801496a:	fbb7 f2f1 	udiv	r2, r7, r1
 801496e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014972:	fb01 7212 	mls	r2, r1, r2, r7
 8014976:	2101      	movs	r1, #1
 8014978:	b292      	uxth	r2, r2
 801497a:	fb02 f303 	mul.w	r3, r2, r3
 801497e:	6822      	ldr	r2, [r4, #0]
 8014980:	f842 b003 	str.w	fp, [r2, r3]
 8014984:	f006 f9ac 	bl	801ace0 <uxr_seq_num_add>
 8014988:	9b03      	ldr	r3, [sp, #12]
 801498a:	f108 0104 	add.w	r1, r8, #4
 801498e:	4607      	mov	r7, r0
 8014990:	f1a3 0208 	sub.w	r2, r3, #8
 8014994:	4630      	mov	r0, r6
 8014996:	4449      	add	r1, r9
 8014998:	eba2 0208 	sub.w	r2, r2, r8
 801499c:	f7fd fb84 	bl	80120a8 <ucdr_init_buffer>
 80149a0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80149a2:	2107      	movs	r1, #7
 80149a4:	81e7      	strh	r7, [r4, #14]
 80149a6:	1d1a      	adds	r2, r3, #4
 80149a8:	2300      	movs	r3, #0
 80149aa:	4630      	mov	r0, r6
 80149ac:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80149b0:	bf28      	it	cs
 80149b2:	461a      	movcs	r2, r3
 80149b4:	b292      	uxth	r2, r2
 80149b6:	f7ff fe55 	bl	8014664 <uxr_buffer_submessage_header>
 80149ba:	aa07      	add	r2, sp, #28
 80149bc:	9904      	ldr	r1, [sp, #16]
 80149be:	4628      	mov	r0, r5
 80149c0:	f7ff f864 	bl	8013a8c <uxr_init_base_object_request>
 80149c4:	4604      	mov	r4, r0
 80149c6:	b320      	cbz	r0, 8014a12 <uxr_prepare_output_stream_fragmented+0x14a>
 80149c8:	a907      	add	r1, sp, #28
 80149ca:	4630      	mov	r0, r6
 80149cc:	f000 ff08 	bl	80157e0 <uxr_serialize_WRITE_DATA_Payload_Data>
 80149d0:	4630      	mov	r0, r6
 80149d2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80149d6:	1a52      	subs	r2, r2, r1
 80149d8:	f7fd fb66 	bl	80120a8 <ucdr_init_buffer>
 80149dc:	9b05      	ldr	r3, [sp, #20]
 80149de:	9a02      	ldr	r2, [sp, #8]
 80149e0:	4630      	mov	r0, r6
 80149e2:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80149e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80149e8:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80149ec:	462a      	mov	r2, r5
 80149ee:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80149f2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80149f4:	4918      	ldr	r1, [pc, #96]	@ (8014a58 <uxr_prepare_output_stream_fragmented+0x190>)
 80149f6:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80149fa:	f7fd fb29 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 80149fe:	4620      	mov	r0, r4
 8014a00:	b011      	add	sp, #68	@ 0x44
 8014a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a06:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8014a08:	4628      	mov	r0, r5
 8014a0a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014a0c:	4798      	blx	r3
 8014a0e:	b920      	cbnz	r0, 8014a1a <uxr_prepare_output_stream_fragmented+0x152>
 8014a10:	2400      	movs	r4, #0
 8014a12:	4620      	mov	r0, r4
 8014a14:	b011      	add	sp, #68	@ 0x44
 8014a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	f006 f93e 	bl	801ac9c <get_available_free_slots>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	f47f af6b 	bne.w	80148fc <uxr_prepare_output_stream_fragmented+0x34>
 8014a26:	e7f3      	b.n	8014a10 <uxr_prepare_output_stream_fragmented+0x148>
 8014a28:	4638      	mov	r0, r7
 8014a2a:	2101      	movs	r1, #1
 8014a2c:	f006 f958 	bl	801ace0 <uxr_seq_num_add>
 8014a30:	8922      	ldrh	r2, [r4, #8]
 8014a32:	6863      	ldr	r3, [r4, #4]
 8014a34:	4607      	mov	r7, r0
 8014a36:	fbb3 f9f2 	udiv	r9, r3, r2
 8014a3a:	fbb0 f3f2 	udiv	r3, r0, r2
 8014a3e:	fb02 0313 	mls	r3, r2, r3, r0
 8014a42:	b29b      	uxth	r3, r3
 8014a44:	fb03 f909 	mul.w	r9, r3, r9
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	f109 0904 	add.w	r9, r9, #4
 8014a4e:	4499      	add	r9, r3
 8014a50:	7b23      	ldrb	r3, [r4, #12]
 8014a52:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014a56:	e76a      	b.n	801492e <uxr_prepare_output_stream_fragmented+0x66>
 8014a58:	08014755 	.word	0x08014755

08014a5c <uxr_serialize_message_header>:
 8014a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a5e:	4616      	mov	r6, r2
 8014a60:	b083      	sub	sp, #12
 8014a62:	4604      	mov	r4, r0
 8014a64:	460d      	mov	r5, r1
 8014a66:	9301      	str	r3, [sp, #4]
 8014a68:	9f08      	ldr	r7, [sp, #32]
 8014a6a:	f7fc f9d1 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014a6e:	4631      	mov	r1, r6
 8014a70:	4620      	mov	r0, r4
 8014a72:	f7fc f9cd 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014a76:	9a01      	ldr	r2, [sp, #4]
 8014a78:	2101      	movs	r1, #1
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f7fc fa74 	bl	8010f68 <ucdr_serialize_endian_uint16_t>
 8014a80:	062b      	lsls	r3, r5, #24
 8014a82:	d501      	bpl.n	8014a88 <uxr_serialize_message_header+0x2c>
 8014a84:	b003      	add	sp, #12
 8014a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a88:	2204      	movs	r2, #4
 8014a8a:	4639      	mov	r1, r7
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	b003      	add	sp, #12
 8014a90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a94:	f005 ba4c 	b.w	8019f30 <ucdr_serialize_array_uint8_t>

08014a98 <uxr_deserialize_message_header>:
 8014a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a9a:	4616      	mov	r6, r2
 8014a9c:	b083      	sub	sp, #12
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	460d      	mov	r5, r1
 8014aa2:	9301      	str	r3, [sp, #4]
 8014aa4:	9f08      	ldr	r7, [sp, #32]
 8014aa6:	f7fc f9c9 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8014aaa:	4631      	mov	r1, r6
 8014aac:	4620      	mov	r0, r4
 8014aae:	f7fc f9c5 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8014ab2:	9a01      	ldr	r2, [sp, #4]
 8014ab4:	2101      	movs	r1, #1
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f7fc fb4a 	bl	8011150 <ucdr_deserialize_endian_uint16_t>
 8014abc:	f995 3000 	ldrsb.w	r3, [r5]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	da01      	bge.n	8014ac8 <uxr_deserialize_message_header+0x30>
 8014ac4:	b003      	add	sp, #12
 8014ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ac8:	2204      	movs	r2, #4
 8014aca:	4639      	mov	r1, r7
 8014acc:	4620      	mov	r0, r4
 8014ace:	b003      	add	sp, #12
 8014ad0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ad4:	f005 ba90 	b.w	8019ff8 <ucdr_deserialize_array_uint8_t>

08014ad8 <uxr_serialize_submessage_header>:
 8014ad8:	b530      	push	{r4, r5, lr}
 8014ada:	4615      	mov	r5, r2
 8014adc:	b083      	sub	sp, #12
 8014ade:	4604      	mov	r4, r0
 8014ae0:	9301      	str	r3, [sp, #4]
 8014ae2:	f7fc f995 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014ae6:	4629      	mov	r1, r5
 8014ae8:	4620      	mov	r0, r4
 8014aea:	f7fc f991 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014aee:	9a01      	ldr	r2, [sp, #4]
 8014af0:	2101      	movs	r1, #1
 8014af2:	4620      	mov	r0, r4
 8014af4:	b003      	add	sp, #12
 8014af6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014afa:	f7fc ba35 	b.w	8010f68 <ucdr_serialize_endian_uint16_t>
 8014afe:	bf00      	nop

08014b00 <uxr_deserialize_submessage_header>:
 8014b00:	b530      	push	{r4, r5, lr}
 8014b02:	4615      	mov	r5, r2
 8014b04:	b083      	sub	sp, #12
 8014b06:	4604      	mov	r4, r0
 8014b08:	9301      	str	r3, [sp, #4]
 8014b0a:	f7fc f997 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8014b0e:	4629      	mov	r1, r5
 8014b10:	4620      	mov	r0, r4
 8014b12:	f7fc f993 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8014b16:	9a01      	ldr	r2, [sp, #4]
 8014b18:	2101      	movs	r1, #1
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	b003      	add	sp, #12
 8014b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b22:	f7fc bb15 	b.w	8011150 <ucdr_deserialize_endian_uint16_t>
 8014b26:	bf00      	nop

08014b28 <uxr_serialize_CLIENT_Representation>:
 8014b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b2c:	2204      	movs	r2, #4
 8014b2e:	460e      	mov	r6, r1
 8014b30:	4605      	mov	r5, r0
 8014b32:	f005 f9fd 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014b36:	4607      	mov	r7, r0
 8014b38:	2202      	movs	r2, #2
 8014b3a:	1d31      	adds	r1, r6, #4
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	f005 f9f7 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014b42:	4038      	ands	r0, r7
 8014b44:	2202      	movs	r2, #2
 8014b46:	1db1      	adds	r1, r6, #6
 8014b48:	b2c7      	uxtb	r7, r0
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f005 f9f0 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014b50:	2204      	movs	r2, #4
 8014b52:	4007      	ands	r7, r0
 8014b54:	f106 0108 	add.w	r1, r6, #8
 8014b58:	4628      	mov	r0, r5
 8014b5a:	f005 f9e9 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014b5e:	4007      	ands	r7, r0
 8014b60:	7b31      	ldrb	r1, [r6, #12]
 8014b62:	4628      	mov	r0, r5
 8014b64:	f7fc f954 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014b68:	7b71      	ldrb	r1, [r6, #13]
 8014b6a:	4007      	ands	r7, r0
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f7fc f921 	bl	8010db4 <ucdr_serialize_bool>
 8014b72:	7b73      	ldrb	r3, [r6, #13]
 8014b74:	ea07 0800 	and.w	r8, r7, r0
 8014b78:	b93b      	cbnz	r3, 8014b8a <uxr_serialize_CLIENT_Representation+0x62>
 8014b7a:	8bb1      	ldrh	r1, [r6, #28]
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	f7fc f973 	bl	8010e68 <ucdr_serialize_uint16_t>
 8014b82:	ea08 0000 	and.w	r0, r8, r0
 8014b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b8a:	6931      	ldr	r1, [r6, #16]
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	f7fc fb55 	bl	801123c <ucdr_serialize_uint32_t>
 8014b92:	6933      	ldr	r3, [r6, #16]
 8014b94:	b1e3      	cbz	r3, 8014bd0 <uxr_serialize_CLIENT_Representation+0xa8>
 8014b96:	b1c0      	cbz	r0, 8014bca <uxr_serialize_CLIENT_Representation+0xa2>
 8014b98:	4637      	mov	r7, r6
 8014b9a:	f04f 0900 	mov.w	r9, #0
 8014b9e:	e000      	b.n	8014ba2 <uxr_serialize_CLIENT_Representation+0x7a>
 8014ba0:	b19c      	cbz	r4, 8014bca <uxr_serialize_CLIENT_Representation+0xa2>
 8014ba2:	6979      	ldr	r1, [r7, #20]
 8014ba4:	4628      	mov	r0, r5
 8014ba6:	f005 fb39 	bl	801a21c <ucdr_serialize_string>
 8014baa:	69b9      	ldr	r1, [r7, #24]
 8014bac:	4604      	mov	r4, r0
 8014bae:	4628      	mov	r0, r5
 8014bb0:	f005 fb34 	bl	801a21c <ucdr_serialize_string>
 8014bb4:	f109 0901 	add.w	r9, r9, #1
 8014bb8:	6933      	ldr	r3, [r6, #16]
 8014bba:	4004      	ands	r4, r0
 8014bbc:	3708      	adds	r7, #8
 8014bbe:	4599      	cmp	r9, r3
 8014bc0:	b2e4      	uxtb	r4, r4
 8014bc2:	d3ed      	bcc.n	8014ba0 <uxr_serialize_CLIENT_Representation+0x78>
 8014bc4:	ea08 0804 	and.w	r8, r8, r4
 8014bc8:	e7d7      	b.n	8014b7a <uxr_serialize_CLIENT_Representation+0x52>
 8014bca:	f04f 0800 	mov.w	r8, #0
 8014bce:	e7d4      	b.n	8014b7a <uxr_serialize_CLIENT_Representation+0x52>
 8014bd0:	ea08 0800 	and.w	r8, r8, r0
 8014bd4:	e7d1      	b.n	8014b7a <uxr_serialize_CLIENT_Representation+0x52>
 8014bd6:	bf00      	nop

08014bd8 <uxr_deserialize_CLIENT_Representation>:
 8014bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bdc:	2204      	movs	r2, #4
 8014bde:	460c      	mov	r4, r1
 8014be0:	4605      	mov	r5, r0
 8014be2:	f005 fa09 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8014be6:	4607      	mov	r7, r0
 8014be8:	2202      	movs	r2, #2
 8014bea:	1d21      	adds	r1, r4, #4
 8014bec:	4628      	mov	r0, r5
 8014bee:	f005 fa03 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8014bf2:	4038      	ands	r0, r7
 8014bf4:	2202      	movs	r2, #2
 8014bf6:	1da1      	adds	r1, r4, #6
 8014bf8:	b2c6      	uxtb	r6, r0
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	f005 f9fc 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8014c00:	2204      	movs	r2, #4
 8014c02:	4006      	ands	r6, r0
 8014c04:	f104 0108 	add.w	r1, r4, #8
 8014c08:	4628      	mov	r0, r5
 8014c0a:	f005 f9f5 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8014c0e:	4006      	ands	r6, r0
 8014c10:	f104 010c 	add.w	r1, r4, #12
 8014c14:	4628      	mov	r0, r5
 8014c16:	f7fc f911 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8014c1a:	f104 010d 	add.w	r1, r4, #13
 8014c1e:	ea06 0700 	and.w	r7, r6, r0
 8014c22:	4628      	mov	r0, r5
 8014c24:	f7fc f8dc 	bl	8010de0 <ucdr_deserialize_bool>
 8014c28:	7b63      	ldrb	r3, [r4, #13]
 8014c2a:	4007      	ands	r7, r0
 8014c2c:	b93b      	cbnz	r3, 8014c3e <uxr_deserialize_CLIENT_Representation+0x66>
 8014c2e:	f104 011c 	add.w	r1, r4, #28
 8014c32:	4628      	mov	r0, r5
 8014c34:	f7fc fa18 	bl	8011068 <ucdr_deserialize_uint16_t>
 8014c38:	4038      	ands	r0, r7
 8014c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c3e:	f104 0110 	add.w	r1, r4, #16
 8014c42:	4628      	mov	r0, r5
 8014c44:	f7fc fc2a 	bl	801149c <ucdr_deserialize_uint32_t>
 8014c48:	6923      	ldr	r3, [r4, #16]
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d903      	bls.n	8014c56 <uxr_deserialize_CLIENT_Representation+0x7e>
 8014c4e:	2301      	movs	r3, #1
 8014c50:	2700      	movs	r7, #0
 8014c52:	75ab      	strb	r3, [r5, #22]
 8014c54:	e7eb      	b.n	8014c2e <uxr_deserialize_CLIENT_Representation+0x56>
 8014c56:	b30b      	cbz	r3, 8014c9c <uxr_deserialize_CLIENT_Representation+0xc4>
 8014c58:	b1f0      	cbz	r0, 8014c98 <uxr_deserialize_CLIENT_Representation+0xc0>
 8014c5a:	46a0      	mov	r8, r4
 8014c5c:	f04f 0900 	mov.w	r9, #0
 8014c60:	e000      	b.n	8014c64 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014c62:	b1ce      	cbz	r6, 8014c98 <uxr_deserialize_CLIENT_Representation+0xc0>
 8014c64:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014c68:	f108 0808 	add.w	r8, r8, #8
 8014c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c70:	4628      	mov	r0, r5
 8014c72:	f005 fae3 	bl	801a23c <ucdr_deserialize_string>
 8014c76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c80:	4628      	mov	r0, r5
 8014c82:	f109 0901 	add.w	r9, r9, #1
 8014c86:	f005 fad9 	bl	801a23c <ucdr_deserialize_string>
 8014c8a:	6923      	ldr	r3, [r4, #16]
 8014c8c:	4006      	ands	r6, r0
 8014c8e:	4599      	cmp	r9, r3
 8014c90:	b2f6      	uxtb	r6, r6
 8014c92:	d3e6      	bcc.n	8014c62 <uxr_deserialize_CLIENT_Representation+0x8a>
 8014c94:	4037      	ands	r7, r6
 8014c96:	e7ca      	b.n	8014c2e <uxr_deserialize_CLIENT_Representation+0x56>
 8014c98:	2700      	movs	r7, #0
 8014c9a:	e7c8      	b.n	8014c2e <uxr_deserialize_CLIENT_Representation+0x56>
 8014c9c:	4007      	ands	r7, r0
 8014c9e:	e7c6      	b.n	8014c2e <uxr_deserialize_CLIENT_Representation+0x56>

08014ca0 <uxr_serialize_AGENT_Representation>:
 8014ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ca4:	2204      	movs	r2, #4
 8014ca6:	460f      	mov	r7, r1
 8014ca8:	4605      	mov	r5, r0
 8014caa:	f005 f941 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014cae:	4604      	mov	r4, r0
 8014cb0:	2202      	movs	r2, #2
 8014cb2:	1d39      	adds	r1, r7, #4
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f005 f93b 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014cba:	4020      	ands	r0, r4
 8014cbc:	2202      	movs	r2, #2
 8014cbe:	1db9      	adds	r1, r7, #6
 8014cc0:	b2c4      	uxtb	r4, r0
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f005 f934 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014cc8:	7a39      	ldrb	r1, [r7, #8]
 8014cca:	4004      	ands	r4, r0
 8014ccc:	4628      	mov	r0, r5
 8014cce:	f7fc f871 	bl	8010db4 <ucdr_serialize_bool>
 8014cd2:	7a3b      	ldrb	r3, [r7, #8]
 8014cd4:	ea00 0804 	and.w	r8, r0, r4
 8014cd8:	b913      	cbnz	r3, 8014ce0 <uxr_serialize_AGENT_Representation+0x40>
 8014cda:	4640      	mov	r0, r8
 8014cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ce0:	68f9      	ldr	r1, [r7, #12]
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	f7fc faaa 	bl	801123c <ucdr_serialize_uint32_t>
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	b303      	cbz	r3, 8014d2e <uxr_serialize_AGENT_Representation+0x8e>
 8014cec:	b1d0      	cbz	r0, 8014d24 <uxr_serialize_AGENT_Representation+0x84>
 8014cee:	463e      	mov	r6, r7
 8014cf0:	f04f 0900 	mov.w	r9, #0
 8014cf4:	e000      	b.n	8014cf8 <uxr_serialize_AGENT_Representation+0x58>
 8014cf6:	b1ac      	cbz	r4, 8014d24 <uxr_serialize_AGENT_Representation+0x84>
 8014cf8:	6931      	ldr	r1, [r6, #16]
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	f005 fa8e 	bl	801a21c <ucdr_serialize_string>
 8014d00:	6971      	ldr	r1, [r6, #20]
 8014d02:	4604      	mov	r4, r0
 8014d04:	4628      	mov	r0, r5
 8014d06:	f005 fa89 	bl	801a21c <ucdr_serialize_string>
 8014d0a:	f109 0901 	add.w	r9, r9, #1
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	4004      	ands	r4, r0
 8014d12:	3608      	adds	r6, #8
 8014d14:	4599      	cmp	r9, r3
 8014d16:	b2e4      	uxtb	r4, r4
 8014d18:	d3ed      	bcc.n	8014cf6 <uxr_serialize_AGENT_Representation+0x56>
 8014d1a:	ea08 0804 	and.w	r8, r8, r4
 8014d1e:	4640      	mov	r0, r8
 8014d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d24:	f04f 0800 	mov.w	r8, #0
 8014d28:	4640      	mov	r0, r8
 8014d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d2e:	ea08 0800 	and.w	r8, r8, r0
 8014d32:	e7d2      	b.n	8014cda <uxr_serialize_AGENT_Representation+0x3a>

08014d34 <uxr_serialize_DATAWRITER_Representation>:
 8014d34:	b570      	push	{r4, r5, r6, lr}
 8014d36:	460d      	mov	r5, r1
 8014d38:	7809      	ldrb	r1, [r1, #0]
 8014d3a:	4606      	mov	r6, r0
 8014d3c:	f7fc f868 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014d40:	4604      	mov	r4, r0
 8014d42:	b130      	cbz	r0, 8014d52 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014d44:	782b      	ldrb	r3, [r5, #0]
 8014d46:	2b02      	cmp	r3, #2
 8014d48:	d00c      	beq.n	8014d64 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014d4a:	2b03      	cmp	r3, #3
 8014d4c:	d010      	beq.n	8014d70 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d008      	beq.n	8014d64 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014d52:	2202      	movs	r2, #2
 8014d54:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014d58:	4630      	mov	r0, r6
 8014d5a:	f005 f8e9 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014d5e:	4020      	ands	r0, r4
 8014d60:	b2c0      	uxtb	r0, r0
 8014d62:	bd70      	pop	{r4, r5, r6, pc}
 8014d64:	6869      	ldr	r1, [r5, #4]
 8014d66:	4630      	mov	r0, r6
 8014d68:	f005 fa58 	bl	801a21c <ucdr_serialize_string>
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	e7f0      	b.n	8014d52 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014d70:	4629      	mov	r1, r5
 8014d72:	4630      	mov	r0, r6
 8014d74:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014d78:	3104      	adds	r1, #4
 8014d7a:	f7fd fa35 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 8014d7e:	4604      	mov	r4, r0
 8014d80:	e7e7      	b.n	8014d52 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014d82:	bf00      	nop

08014d84 <uxr_serialize_ObjectVariant.part.0>:
 8014d84:	b570      	push	{r4, r5, r6, lr}
 8014d86:	780b      	ldrb	r3, [r1, #0]
 8014d88:	460c      	mov	r4, r1
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	2b0d      	cmp	r3, #13
 8014d90:	d854      	bhi.n	8014e3c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014d92:	e8df f003 	tbb	[pc, r3]
 8014d96:	0730      	.short	0x0730
 8014d98:	07071b1b 	.word	0x07071b1b
 8014d9c:	0c530707 	.word	0x0c530707
 8014da0:	494e0c0c 	.word	0x494e0c0c
 8014da4:	3104      	adds	r1, #4
 8014da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014daa:	f7ff bfc3 	b.w	8014d34 <uxr_serialize_DATAWRITER_Representation>
 8014dae:	7909      	ldrb	r1, [r1, #4]
 8014db0:	f7fc f82e 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014db4:	b1e8      	cbz	r0, 8014df2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014db6:	7923      	ldrb	r3, [r4, #4]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d001      	beq.n	8014dc0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014dbc:	2b02      	cmp	r3, #2
 8014dbe:	d13d      	bne.n	8014e3c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014dc0:	68a1      	ldr	r1, [r4, #8]
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dc8:	f005 ba28 	b.w	801a21c <ucdr_serialize_string>
 8014dcc:	7909      	ldrb	r1, [r1, #4]
 8014dce:	f7fc f81f 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	b120      	cbz	r0, 8014de0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014dd6:	7923      	ldrb	r3, [r4, #4]
 8014dd8:	2b02      	cmp	r3, #2
 8014dda:	d039      	beq.n	8014e50 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8014ddc:	2b03      	cmp	r3, #3
 8014dde:	d02f      	beq.n	8014e40 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014de0:	2202      	movs	r2, #2
 8014de2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014de6:	4628      	mov	r0, r5
 8014de8:	f005 f8a2 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8014dec:	4030      	ands	r0, r6
 8014dee:	b2c0      	uxtb	r0, r0
 8014df0:	bd70      	pop	{r4, r5, r6, pc}
 8014df2:	2000      	movs	r0, #0
 8014df4:	bd70      	pop	{r4, r5, r6, pc}
 8014df6:	7909      	ldrb	r1, [r1, #4]
 8014df8:	f7fc f80a 	bl	8010e10 <ucdr_serialize_uint8_t>
 8014dfc:	4606      	mov	r6, r0
 8014dfe:	b158      	cbz	r0, 8014e18 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014e00:	7923      	ldrb	r3, [r4, #4]
 8014e02:	2b02      	cmp	r3, #2
 8014e04:	d003      	beq.n	8014e0e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8014e06:	2b03      	cmp	r3, #3
 8014e08:	d028      	beq.n	8014e5c <uxr_serialize_ObjectVariant.part.0+0xd8>
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	d104      	bne.n	8014e18 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014e0e:	68a1      	ldr	r1, [r4, #8]
 8014e10:	4628      	mov	r0, r5
 8014e12:	f005 fa03 	bl	801a21c <ucdr_serialize_string>
 8014e16:	4606      	mov	r6, r0
 8014e18:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	f7fc fd33 	bl	8011888 <ucdr_serialize_int16_t>
 8014e22:	4030      	ands	r0, r6
 8014e24:	b2c0      	uxtb	r0, r0
 8014e26:	bd70      	pop	{r4, r5, r6, pc}
 8014e28:	3104      	adds	r1, #4
 8014e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e2e:	f7ff be7b 	b.w	8014b28 <uxr_serialize_CLIENT_Representation>
 8014e32:	3104      	adds	r1, #4
 8014e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e38:	f7ff bf32 	b.w	8014ca0 <uxr_serialize_AGENT_Representation>
 8014e3c:	2001      	movs	r0, #1
 8014e3e:	bd70      	pop	{r4, r5, r6, pc}
 8014e40:	68a2      	ldr	r2, [r4, #8]
 8014e42:	f104 010c 	add.w	r1, r4, #12
 8014e46:	4628      	mov	r0, r5
 8014e48:	f7fd f9ce 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 8014e4c:	4606      	mov	r6, r0
 8014e4e:	e7c7      	b.n	8014de0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014e50:	68a1      	ldr	r1, [r4, #8]
 8014e52:	4628      	mov	r0, r5
 8014e54:	f005 f9e2 	bl	801a21c <ucdr_serialize_string>
 8014e58:	4606      	mov	r6, r0
 8014e5a:	e7c1      	b.n	8014de0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014e5c:	68a2      	ldr	r2, [r4, #8]
 8014e5e:	f104 010c 	add.w	r1, r4, #12
 8014e62:	4628      	mov	r0, r5
 8014e64:	f7fd f9c0 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 8014e68:	4606      	mov	r6, r0
 8014e6a:	e7d5      	b.n	8014e18 <uxr_serialize_ObjectVariant.part.0+0x94>

08014e6c <uxr_deserialize_DATAWRITER_Representation>:
 8014e6c:	b570      	push	{r4, r5, r6, lr}
 8014e6e:	4606      	mov	r6, r0
 8014e70:	460d      	mov	r5, r1
 8014e72:	f7fb ffe3 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8014e76:	4604      	mov	r4, r0
 8014e78:	b130      	cbz	r0, 8014e88 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014e7a:	782b      	ldrb	r3, [r5, #0]
 8014e7c:	2b02      	cmp	r3, #2
 8014e7e:	d00c      	beq.n	8014e9a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014e80:	2b03      	cmp	r3, #3
 8014e82:	d012      	beq.n	8014eaa <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014e84:	2b01      	cmp	r3, #1
 8014e86:	d008      	beq.n	8014e9a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014e88:	2202      	movs	r2, #2
 8014e8a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014e8e:	4630      	mov	r0, r6
 8014e90:	f005 f8b2 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8014e94:	4020      	ands	r0, r4
 8014e96:	b2c0      	uxtb	r0, r0
 8014e98:	bd70      	pop	{r4, r5, r6, pc}
 8014e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e9e:	6869      	ldr	r1, [r5, #4]
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	f005 f9cb 	bl	801a23c <ucdr_deserialize_string>
 8014ea6:	4604      	mov	r4, r0
 8014ea8:	e7ee      	b.n	8014e88 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014eaa:	1d2b      	adds	r3, r5, #4
 8014eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014eb0:	f105 0108 	add.w	r1, r5, #8
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	f7fd f9a9 	bl	801220c <ucdr_deserialize_sequence_uint8_t>
 8014eba:	4604      	mov	r4, r0
 8014ebc:	e7e4      	b.n	8014e88 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014ebe:	bf00      	nop

08014ec0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014ec0:	b570      	push	{r4, r5, r6, lr}
 8014ec2:	460d      	mov	r5, r1
 8014ec4:	7809      	ldrb	r1, [r1, #0]
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	f7fb ff74 	bl	8010db4 <ucdr_serialize_bool>
 8014ecc:	782b      	ldrb	r3, [r5, #0]
 8014ece:	4604      	mov	r4, r0
 8014ed0:	b94b      	cbnz	r3, 8014ee6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014ed2:	7a29      	ldrb	r1, [r5, #8]
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f7fb ff6d 	bl	8010db4 <ucdr_serialize_bool>
 8014eda:	7a2b      	ldrb	r3, [r5, #8]
 8014edc:	4004      	ands	r4, r0
 8014ede:	b2e4      	uxtb	r4, r4
 8014ee0:	b943      	cbnz	r3, 8014ef4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	bd70      	pop	{r4, r5, r6, pc}
 8014ee6:	6869      	ldr	r1, [r5, #4]
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f005 f997 	bl	801a21c <ucdr_serialize_string>
 8014eee:	4004      	ands	r4, r0
 8014ef0:	b2e4      	uxtb	r4, r4
 8014ef2:	e7ee      	b.n	8014ed2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014ef4:	68e9      	ldr	r1, [r5, #12]
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f005 f990 	bl	801a21c <ucdr_serialize_string>
 8014efc:	4004      	ands	r4, r0
 8014efe:	4620      	mov	r0, r4
 8014f00:	bd70      	pop	{r4, r5, r6, pc}
 8014f02:	bf00      	nop

08014f04 <uxr_serialize_OBJK_Topic_Binary>:
 8014f04:	b570      	push	{r4, r5, r6, lr}
 8014f06:	460d      	mov	r5, r1
 8014f08:	4606      	mov	r6, r0
 8014f0a:	6809      	ldr	r1, [r1, #0]
 8014f0c:	f005 f986 	bl	801a21c <ucdr_serialize_string>
 8014f10:	4604      	mov	r4, r0
 8014f12:	7929      	ldrb	r1, [r5, #4]
 8014f14:	4630      	mov	r0, r6
 8014f16:	f7fb ff4d 	bl	8010db4 <ucdr_serialize_bool>
 8014f1a:	792b      	ldrb	r3, [r5, #4]
 8014f1c:	4004      	ands	r4, r0
 8014f1e:	b2e4      	uxtb	r4, r4
 8014f20:	b943      	cbnz	r3, 8014f34 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014f22:	7b29      	ldrb	r1, [r5, #12]
 8014f24:	4630      	mov	r0, r6
 8014f26:	f7fb ff45 	bl	8010db4 <ucdr_serialize_bool>
 8014f2a:	7b2b      	ldrb	r3, [r5, #12]
 8014f2c:	4004      	ands	r4, r0
 8014f2e:	b93b      	cbnz	r3, 8014f40 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014f30:	4620      	mov	r0, r4
 8014f32:	bd70      	pop	{r4, r5, r6, pc}
 8014f34:	68a9      	ldr	r1, [r5, #8]
 8014f36:	4630      	mov	r0, r6
 8014f38:	f005 f970 	bl	801a21c <ucdr_serialize_string>
 8014f3c:	4004      	ands	r4, r0
 8014f3e:	e7f0      	b.n	8014f22 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014f40:	6929      	ldr	r1, [r5, #16]
 8014f42:	4630      	mov	r0, r6
 8014f44:	f005 f96a 	bl	801a21c <ucdr_serialize_string>
 8014f48:	4004      	ands	r4, r0
 8014f4a:	b2e4      	uxtb	r4, r4
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	bd70      	pop	{r4, r5, r6, pc}

08014f50 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f54:	460c      	mov	r4, r1
 8014f56:	7809      	ldrb	r1, [r1, #0]
 8014f58:	4606      	mov	r6, r0
 8014f5a:	f7fb ff2b 	bl	8010db4 <ucdr_serialize_bool>
 8014f5e:	7823      	ldrb	r3, [r4, #0]
 8014f60:	4605      	mov	r5, r0
 8014f62:	b96b      	cbnz	r3, 8014f80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014f64:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014f68:	4630      	mov	r0, r6
 8014f6a:	f7fb ff23 	bl	8010db4 <ucdr_serialize_bool>
 8014f6e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014f72:	4005      	ands	r5, r0
 8014f74:	b2ed      	uxtb	r5, r5
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d169      	bne.n	801504e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f80:	6861      	ldr	r1, [r4, #4]
 8014f82:	4630      	mov	r0, r6
 8014f84:	f7fc f95a 	bl	801123c <ucdr_serialize_uint32_t>
 8014f88:	6863      	ldr	r3, [r4, #4]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d06b      	beq.n	8015066 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d067      	beq.n	8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014f92:	68a1      	ldr	r1, [r4, #8]
 8014f94:	4630      	mov	r0, r6
 8014f96:	f005 f941 	bl	801a21c <ucdr_serialize_string>
 8014f9a:	6863      	ldr	r3, [r4, #4]
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d953      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d05e      	beq.n	8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014fa4:	68e1      	ldr	r1, [r4, #12]
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f005 f938 	bl	801a21c <ucdr_serialize_string>
 8014fac:	6863      	ldr	r3, [r4, #4]
 8014fae:	2b02      	cmp	r3, #2
 8014fb0:	d94a      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d055      	beq.n	8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014fb6:	6921      	ldr	r1, [r4, #16]
 8014fb8:	4630      	mov	r0, r6
 8014fba:	f005 f92f 	bl	801a21c <ucdr_serialize_string>
 8014fbe:	6863      	ldr	r3, [r4, #4]
 8014fc0:	2b03      	cmp	r3, #3
 8014fc2:	d941      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	d04c      	beq.n	8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014fc8:	6961      	ldr	r1, [r4, #20]
 8014fca:	4630      	mov	r0, r6
 8014fcc:	f005 f926 	bl	801a21c <ucdr_serialize_string>
 8014fd0:	6863      	ldr	r3, [r4, #4]
 8014fd2:	2b04      	cmp	r3, #4
 8014fd4:	d938      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d043      	beq.n	8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014fda:	69a1      	ldr	r1, [r4, #24]
 8014fdc:	4630      	mov	r0, r6
 8014fde:	f005 f91d 	bl	801a21c <ucdr_serialize_string>
 8014fe2:	6863      	ldr	r3, [r4, #4]
 8014fe4:	2b05      	cmp	r3, #5
 8014fe6:	d92f      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	d03a      	beq.n	8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014fec:	69e1      	ldr	r1, [r4, #28]
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f005 f914 	bl	801a21c <ucdr_serialize_string>
 8014ff4:	6863      	ldr	r3, [r4, #4]
 8014ff6:	2b06      	cmp	r3, #6
 8014ff8:	d926      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ffa:	b390      	cbz	r0, 8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ffc:	6a21      	ldr	r1, [r4, #32]
 8014ffe:	4630      	mov	r0, r6
 8015000:	f005 f90c 	bl	801a21c <ucdr_serialize_string>
 8015004:	6863      	ldr	r3, [r4, #4]
 8015006:	2b07      	cmp	r3, #7
 8015008:	d91e      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801500a:	b350      	cbz	r0, 8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801500c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801500e:	4630      	mov	r0, r6
 8015010:	f005 f904 	bl	801a21c <ucdr_serialize_string>
 8015014:	6863      	ldr	r3, [r4, #4]
 8015016:	2b08      	cmp	r3, #8
 8015018:	d916      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801501a:	b310      	cbz	r0, 8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801501c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801501e:	4630      	mov	r0, r6
 8015020:	f005 f8fc 	bl	801a21c <ucdr_serialize_string>
 8015024:	6863      	ldr	r3, [r4, #4]
 8015026:	2b09      	cmp	r3, #9
 8015028:	d90e      	bls.n	8015048 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801502a:	b1d0      	cbz	r0, 8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801502c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015030:	2709      	movs	r7, #9
 8015032:	e000      	b.n	8015036 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015034:	b1a8      	cbz	r0, 8015062 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015036:	f858 1b04 	ldr.w	r1, [r8], #4
 801503a:	4630      	mov	r0, r6
 801503c:	f005 f8ee 	bl	801a21c <ucdr_serialize_string>
 8015040:	3701      	adds	r7, #1
 8015042:	6862      	ldr	r2, [r4, #4]
 8015044:	4297      	cmp	r7, r2
 8015046:	d3f5      	bcc.n	8015034 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015048:	4005      	ands	r5, r0
 801504a:	b2ed      	uxtb	r5, r5
 801504c:	e78a      	b.n	8014f64 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801504e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015050:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015054:	4630      	mov	r0, r6
 8015056:	f7fd f8c7 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 801505a:	4005      	ands	r5, r0
 801505c:	4628      	mov	r0, r5
 801505e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015062:	2500      	movs	r5, #0
 8015064:	e77e      	b.n	8014f64 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015066:	4028      	ands	r0, r5
 8015068:	b2c5      	uxtb	r5, r0
 801506a:	e77b      	b.n	8014f64 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801506c <uxr_serialize_OBJK_Publisher_Binary>:
 801506c:	b570      	push	{r4, r5, r6, lr}
 801506e:	460d      	mov	r5, r1
 8015070:	7809      	ldrb	r1, [r1, #0]
 8015072:	4606      	mov	r6, r0
 8015074:	f7fb fe9e 	bl	8010db4 <ucdr_serialize_bool>
 8015078:	782b      	ldrb	r3, [r5, #0]
 801507a:	4604      	mov	r4, r0
 801507c:	b94b      	cbnz	r3, 8015092 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801507e:	7a29      	ldrb	r1, [r5, #8]
 8015080:	4630      	mov	r0, r6
 8015082:	f7fb fe97 	bl	8010db4 <ucdr_serialize_bool>
 8015086:	7a2b      	ldrb	r3, [r5, #8]
 8015088:	4004      	ands	r4, r0
 801508a:	b2e4      	uxtb	r4, r4
 801508c:	b943      	cbnz	r3, 80150a0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801508e:	4620      	mov	r0, r4
 8015090:	bd70      	pop	{r4, r5, r6, pc}
 8015092:	6869      	ldr	r1, [r5, #4]
 8015094:	4630      	mov	r0, r6
 8015096:	f005 f8c1 	bl	801a21c <ucdr_serialize_string>
 801509a:	4004      	ands	r4, r0
 801509c:	b2e4      	uxtb	r4, r4
 801509e:	e7ee      	b.n	801507e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80150a0:	f105 010c 	add.w	r1, r5, #12
 80150a4:	4630      	mov	r0, r6
 80150a6:	f7ff ff53 	bl	8014f50 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80150aa:	4004      	ands	r4, r0
 80150ac:	4620      	mov	r0, r4
 80150ae:	bd70      	pop	{r4, r5, r6, pc}

080150b0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80150b0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80150b4:	4688      	mov	r8, r1
 80150b6:	4681      	mov	r9, r0
 80150b8:	8809      	ldrh	r1, [r1, #0]
 80150ba:	f7fb fed5 	bl	8010e68 <ucdr_serialize_uint16_t>
 80150be:	4606      	mov	r6, r0
 80150c0:	f898 1002 	ldrb.w	r1, [r8, #2]
 80150c4:	4648      	mov	r0, r9
 80150c6:	f7fb fe75 	bl	8010db4 <ucdr_serialize_bool>
 80150ca:	f898 3002 	ldrb.w	r3, [r8, #2]
 80150ce:	4006      	ands	r6, r0
 80150d0:	b2f5      	uxtb	r5, r6
 80150d2:	b9eb      	cbnz	r3, 8015110 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80150d4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80150d8:	4648      	mov	r0, r9
 80150da:	f7fb fe6b 	bl	8010db4 <ucdr_serialize_bool>
 80150de:	f898 3006 	ldrb.w	r3, [r8, #6]
 80150e2:	4005      	ands	r5, r0
 80150e4:	bb7b      	cbnz	r3, 8015146 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80150e6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80150ea:	4648      	mov	r0, r9
 80150ec:	f7fb fe62 	bl	8010db4 <ucdr_serialize_bool>
 80150f0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80150f4:	4005      	ands	r5, r0
 80150f6:	b9f3      	cbnz	r3, 8015136 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80150f8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80150fc:	4648      	mov	r0, r9
 80150fe:	f7fb fe59 	bl	8010db4 <ucdr_serialize_bool>
 8015102:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015106:	4005      	ands	r5, r0
 8015108:	b94b      	cbnz	r3, 801511e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801510a:	4628      	mov	r0, r5
 801510c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015110:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015114:	4648      	mov	r0, r9
 8015116:	f7fb fea7 	bl	8010e68 <ucdr_serialize_uint16_t>
 801511a:	4005      	ands	r5, r0
 801511c:	e7da      	b.n	80150d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801511e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015122:	f108 011c 	add.w	r1, r8, #28
 8015126:	4648      	mov	r0, r9
 8015128:	f7fd f85e 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 801512c:	4028      	ands	r0, r5
 801512e:	b2c5      	uxtb	r5, r0
 8015130:	4628      	mov	r0, r5
 8015132:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015136:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801513a:	4648      	mov	r0, r9
 801513c:	f7fc f87e 	bl	801123c <ucdr_serialize_uint32_t>
 8015140:	4028      	ands	r0, r5
 8015142:	b2c5      	uxtb	r5, r0
 8015144:	e7d8      	b.n	80150f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015146:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801514a:	4648      	mov	r0, r9
 801514c:	f7fc f876 	bl	801123c <ucdr_serialize_uint32_t>
 8015150:	4028      	ands	r0, r5
 8015152:	b2c5      	uxtb	r5, r0
 8015154:	e7c7      	b.n	80150e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015156:	bf00      	nop

08015158 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515a:	2202      	movs	r2, #2
 801515c:	460d      	mov	r5, r1
 801515e:	4606      	mov	r6, r0
 8015160:	f004 fee6 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8015164:	4604      	mov	r4, r0
 8015166:	78a9      	ldrb	r1, [r5, #2]
 8015168:	4630      	mov	r0, r6
 801516a:	f7fb fe23 	bl	8010db4 <ucdr_serialize_bool>
 801516e:	78ab      	ldrb	r3, [r5, #2]
 8015170:	4004      	ands	r4, r0
 8015172:	b2e4      	uxtb	r4, r4
 8015174:	b90b      	cbnz	r3, 801517a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015176:	4620      	mov	r0, r4
 8015178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801517a:	f105 0108 	add.w	r1, r5, #8
 801517e:	4630      	mov	r0, r6
 8015180:	f7ff ff96 	bl	80150b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015184:	4607      	mov	r7, r0
 8015186:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801518a:	4630      	mov	r0, r6
 801518c:	f7fb fe12 	bl	8010db4 <ucdr_serialize_bool>
 8015190:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015194:	4038      	ands	r0, r7
 8015196:	b2c7      	uxtb	r7, r0
 8015198:	b913      	cbnz	r3, 80151a0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801519a:	403c      	ands	r4, r7
 801519c:	4620      	mov	r0, r4
 801519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151a0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80151a4:	4630      	mov	r0, r6
 80151a6:	f7fc fa9f 	bl	80116e8 <ucdr_serialize_uint64_t>
 80151aa:	4007      	ands	r7, r0
 80151ac:	e7f5      	b.n	801519a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80151ae:	bf00      	nop

080151b0 <uxr_deserialize_ObjectVariant>:
 80151b0:	b570      	push	{r4, r5, r6, lr}
 80151b2:	4605      	mov	r5, r0
 80151b4:	460e      	mov	r6, r1
 80151b6:	f7fb fe41 	bl	8010e3c <ucdr_deserialize_uint8_t>
 80151ba:	b168      	cbz	r0, 80151d8 <uxr_deserialize_ObjectVariant+0x28>
 80151bc:	7833      	ldrb	r3, [r6, #0]
 80151be:	4604      	mov	r4, r0
 80151c0:	3b01      	subs	r3, #1
 80151c2:	2b0d      	cmp	r3, #13
 80151c4:	d809      	bhi.n	80151da <uxr_deserialize_ObjectVariant+0x2a>
 80151c6:	e8df f003 	tbb	[pc, r3]
 80151ca:	0a41      	.short	0x0a41
 80151cc:	0a0a2323 	.word	0x0a0a2323
 80151d0:	10080a0a 	.word	0x10080a0a
 80151d4:	565c1010 	.word	0x565c1010
 80151d8:	2400      	movs	r4, #0
 80151da:	4620      	mov	r0, r4
 80151dc:	bd70      	pop	{r4, r5, r6, pc}
 80151de:	1d31      	adds	r1, r6, #4
 80151e0:	4628      	mov	r0, r5
 80151e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e6:	f7ff be41 	b.w	8014e6c <uxr_deserialize_DATAWRITER_Representation>
 80151ea:	1d31      	adds	r1, r6, #4
 80151ec:	4628      	mov	r0, r5
 80151ee:	f7fb fe25 	bl	8010e3c <ucdr_deserialize_uint8_t>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d0f0      	beq.n	80151d8 <uxr_deserialize_ObjectVariant+0x28>
 80151f6:	7933      	ldrb	r3, [r6, #4]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d001      	beq.n	8015200 <uxr_deserialize_ObjectVariant+0x50>
 80151fc:	2b02      	cmp	r3, #2
 80151fe:	d1ec      	bne.n	80151da <uxr_deserialize_ObjectVariant+0x2a>
 8015200:	68b1      	ldr	r1, [r6, #8]
 8015202:	4628      	mov	r0, r5
 8015204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801520c:	f005 b816 	b.w	801a23c <ucdr_deserialize_string>
 8015210:	1d31      	adds	r1, r6, #4
 8015212:	4628      	mov	r0, r5
 8015214:	f7fb fe12 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015218:	4604      	mov	r4, r0
 801521a:	b170      	cbz	r0, 801523a <uxr_deserialize_ObjectVariant+0x8a>
 801521c:	7933      	ldrb	r3, [r6, #4]
 801521e:	2b02      	cmp	r3, #2
 8015220:	d04c      	beq.n	80152bc <uxr_deserialize_ObjectVariant+0x10c>
 8015222:	2b03      	cmp	r3, #3
 8015224:	d109      	bne.n	801523a <uxr_deserialize_ObjectVariant+0x8a>
 8015226:	f106 0308 	add.w	r3, r6, #8
 801522a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801522e:	f106 010c 	add.w	r1, r6, #12
 8015232:	4628      	mov	r0, r5
 8015234:	f7fc ffea 	bl	801220c <ucdr_deserialize_sequence_uint8_t>
 8015238:	4604      	mov	r4, r0
 801523a:	2202      	movs	r2, #2
 801523c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015240:	4628      	mov	r0, r5
 8015242:	f004 fed9 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015246:	4020      	ands	r0, r4
 8015248:	b2c4      	uxtb	r4, r0
 801524a:	e7c6      	b.n	80151da <uxr_deserialize_ObjectVariant+0x2a>
 801524c:	1d31      	adds	r1, r6, #4
 801524e:	4628      	mov	r0, r5
 8015250:	f7fb fdf4 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015254:	4604      	mov	r4, r0
 8015256:	b130      	cbz	r0, 8015266 <uxr_deserialize_ObjectVariant+0xb6>
 8015258:	7933      	ldrb	r3, [r6, #4]
 801525a:	2b02      	cmp	r3, #2
 801525c:	d036      	beq.n	80152cc <uxr_deserialize_ObjectVariant+0x11c>
 801525e:	2b03      	cmp	r3, #3
 8015260:	d03c      	beq.n	80152dc <uxr_deserialize_ObjectVariant+0x12c>
 8015262:	2b01      	cmp	r3, #1
 8015264:	d032      	beq.n	80152cc <uxr_deserialize_ObjectVariant+0x11c>
 8015266:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801526a:	4628      	mov	r0, r5
 801526c:	f7fc fb8c 	bl	8011988 <ucdr_deserialize_int16_t>
 8015270:	4020      	ands	r0, r4
 8015272:	b2c4      	uxtb	r4, r0
 8015274:	e7b1      	b.n	80151da <uxr_deserialize_ObjectVariant+0x2a>
 8015276:	1d31      	adds	r1, r6, #4
 8015278:	4628      	mov	r0, r5
 801527a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801527e:	f7ff bcab 	b.w	8014bd8 <uxr_deserialize_CLIENT_Representation>
 8015282:	2204      	movs	r2, #4
 8015284:	4628      	mov	r0, r5
 8015286:	18b1      	adds	r1, r6, r2
 8015288:	f004 feb6 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 801528c:	4604      	mov	r4, r0
 801528e:	2202      	movs	r2, #2
 8015290:	f106 0108 	add.w	r1, r6, #8
 8015294:	4628      	mov	r0, r5
 8015296:	f004 feaf 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 801529a:	4004      	ands	r4, r0
 801529c:	2202      	movs	r2, #2
 801529e:	f106 010a 	add.w	r1, r6, #10
 80152a2:	4628      	mov	r0, r5
 80152a4:	b2e4      	uxtb	r4, r4
 80152a6:	f004 fea7 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80152aa:	4603      	mov	r3, r0
 80152ac:	f106 010c 	add.w	r1, r6, #12
 80152b0:	4628      	mov	r0, r5
 80152b2:	401c      	ands	r4, r3
 80152b4:	f7fb fd94 	bl	8010de0 <ucdr_deserialize_bool>
 80152b8:	4004      	ands	r4, r0
 80152ba:	e78e      	b.n	80151da <uxr_deserialize_ObjectVariant+0x2a>
 80152bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80152c0:	68b1      	ldr	r1, [r6, #8]
 80152c2:	4628      	mov	r0, r5
 80152c4:	f004 ffba 	bl	801a23c <ucdr_deserialize_string>
 80152c8:	4604      	mov	r4, r0
 80152ca:	e7b6      	b.n	801523a <uxr_deserialize_ObjectVariant+0x8a>
 80152cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80152d0:	68b1      	ldr	r1, [r6, #8]
 80152d2:	4628      	mov	r0, r5
 80152d4:	f004 ffb2 	bl	801a23c <ucdr_deserialize_string>
 80152d8:	4604      	mov	r4, r0
 80152da:	e7c4      	b.n	8015266 <uxr_deserialize_ObjectVariant+0xb6>
 80152dc:	f106 0308 	add.w	r3, r6, #8
 80152e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80152e4:	f106 010c 	add.w	r1, r6, #12
 80152e8:	4628      	mov	r0, r5
 80152ea:	f7fc ff8f 	bl	801220c <ucdr_deserialize_sequence_uint8_t>
 80152ee:	4604      	mov	r4, r0
 80152f0:	e7b9      	b.n	8015266 <uxr_deserialize_ObjectVariant+0xb6>
 80152f2:	bf00      	nop

080152f4 <uxr_deserialize_BaseObjectRequest>:
 80152f4:	b570      	push	{r4, r5, r6, lr}
 80152f6:	2202      	movs	r2, #2
 80152f8:	4605      	mov	r5, r0
 80152fa:	460e      	mov	r6, r1
 80152fc:	f004 fe7c 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015300:	2202      	movs	r2, #2
 8015302:	4604      	mov	r4, r0
 8015304:	4628      	mov	r0, r5
 8015306:	18b1      	adds	r1, r6, r2
 8015308:	f004 fe76 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 801530c:	4020      	ands	r0, r4
 801530e:	b2c0      	uxtb	r0, r0
 8015310:	bd70      	pop	{r4, r5, r6, pc}
 8015312:	bf00      	nop

08015314 <uxr_serialize_ActivityInfoVariant>:
 8015314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015318:	460e      	mov	r6, r1
 801531a:	7809      	ldrb	r1, [r1, #0]
 801531c:	4680      	mov	r8, r0
 801531e:	f7fb fd77 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015322:	4607      	mov	r7, r0
 8015324:	b138      	cbz	r0, 8015336 <uxr_serialize_ActivityInfoVariant+0x22>
 8015326:	7833      	ldrb	r3, [r6, #0]
 8015328:	2b06      	cmp	r3, #6
 801532a:	f000 8081 	beq.w	8015430 <uxr_serialize_ActivityInfoVariant+0x11c>
 801532e:	2b0d      	cmp	r3, #13
 8015330:	d014      	beq.n	801535c <uxr_serialize_ActivityInfoVariant+0x48>
 8015332:	2b05      	cmp	r3, #5
 8015334:	d002      	beq.n	801533c <uxr_serialize_ActivityInfoVariant+0x28>
 8015336:	4638      	mov	r0, r7
 8015338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801533c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015340:	4640      	mov	r0, r8
 8015342:	f7fc faa1 	bl	8011888 <ucdr_serialize_int16_t>
 8015346:	4607      	mov	r7, r0
 8015348:	4640      	mov	r0, r8
 801534a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801534e:	f7fc f9cb 	bl	80116e8 <ucdr_serialize_uint64_t>
 8015352:	4038      	ands	r0, r7
 8015354:	b2c7      	uxtb	r7, r0
 8015356:	4638      	mov	r0, r7
 8015358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801535c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015360:	4640      	mov	r0, r8
 8015362:	f7fc fa91 	bl	8011888 <ucdr_serialize_int16_t>
 8015366:	68f1      	ldr	r1, [r6, #12]
 8015368:	4607      	mov	r7, r0
 801536a:	4640      	mov	r0, r8
 801536c:	f7fb ff66 	bl	801123c <ucdr_serialize_uint32_t>
 8015370:	68f3      	ldr	r3, [r6, #12]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d0ed      	beq.n	8015352 <uxr_serialize_ActivityInfoVariant+0x3e>
 8015376:	b318      	cbz	r0, 80153c0 <uxr_serialize_ActivityInfoVariant+0xac>
 8015378:	f106 090c 	add.w	r9, r6, #12
 801537c:	2400      	movs	r4, #0
 801537e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8015382:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8015386:	7c29      	ldrb	r1, [r5, #16]
 8015388:	4640      	mov	r0, r8
 801538a:	f7fb fd41 	bl	8010e10 <ucdr_serialize_uint8_t>
 801538e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8015392:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8015396:	2800      	cmp	r0, #0
 8015398:	d051      	beq.n	801543e <uxr_serialize_ActivityInfoVariant+0x12a>
 801539a:	7c2b      	ldrb	r3, [r5, #16]
 801539c:	00c9      	lsls	r1, r1, #3
 801539e:	2b03      	cmp	r3, #3
 80153a0:	d854      	bhi.n	801544c <uxr_serialize_ActivityInfoVariant+0x138>
 80153a2:	e8df f003 	tbb	[pc, r3]
 80153a6:	2133      	.short	0x2133
 80153a8:	020f      	.short	0x020f
 80153aa:	4449      	add	r1, r9
 80153ac:	4640      	mov	r0, r8
 80153ae:	6889      	ldr	r1, [r1, #8]
 80153b0:	f004 ff34 	bl	801a21c <ucdr_serialize_string>
 80153b4:	3401      	adds	r4, #1
 80153b6:	68f2      	ldr	r2, [r6, #12]
 80153b8:	4294      	cmp	r4, r2
 80153ba:	d244      	bcs.n	8015446 <uxr_serialize_ActivityInfoVariant+0x132>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d1de      	bne.n	801537e <uxr_serialize_ActivityInfoVariant+0x6a>
 80153c0:	2700      	movs	r7, #0
 80153c2:	e7b8      	b.n	8015336 <uxr_serialize_ActivityInfoVariant+0x22>
 80153c4:	3108      	adds	r1, #8
 80153c6:	44a2      	add	sl, r4
 80153c8:	2210      	movs	r2, #16
 80153ca:	4640      	mov	r0, r8
 80153cc:	4449      	add	r1, r9
 80153ce:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80153d2:	f004 fdad 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80153d6:	4605      	mov	r5, r0
 80153d8:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 80153dc:	4640      	mov	r0, r8
 80153de:	f7fb ff2d 	bl	801123c <ucdr_serialize_uint32_t>
 80153e2:	4028      	ands	r0, r5
 80153e4:	b2c0      	uxtb	r0, r0
 80153e6:	e7e5      	b.n	80153b4 <uxr_serialize_ActivityInfoVariant+0xa0>
 80153e8:	3108      	adds	r1, #8
 80153ea:	44a2      	add	sl, r4
 80153ec:	2204      	movs	r2, #4
 80153ee:	4640      	mov	r0, r8
 80153f0:	4449      	add	r1, r9
 80153f2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80153f6:	f004 fd9b 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80153fa:	4605      	mov	r5, r0
 80153fc:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8015400:	4640      	mov	r0, r8
 8015402:	f7fb fd31 	bl	8010e68 <ucdr_serialize_uint16_t>
 8015406:	4028      	ands	r0, r5
 8015408:	b2c0      	uxtb	r0, r0
 801540a:	e7d3      	b.n	80153b4 <uxr_serialize_ActivityInfoVariant+0xa0>
 801540c:	3108      	adds	r1, #8
 801540e:	44a2      	add	sl, r4
 8015410:	2202      	movs	r2, #2
 8015412:	4640      	mov	r0, r8
 8015414:	4449      	add	r1, r9
 8015416:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801541a:	f004 fd89 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 801541e:	4605      	mov	r5, r0
 8015420:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8015424:	4640      	mov	r0, r8
 8015426:	f7fb fcf3 	bl	8010e10 <ucdr_serialize_uint8_t>
 801542a:	4028      	ands	r0, r5
 801542c:	b2c0      	uxtb	r0, r0
 801542e:	e7c1      	b.n	80153b4 <uxr_serialize_ActivityInfoVariant+0xa0>
 8015430:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015434:	4640      	mov	r0, r8
 8015436:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801543a:	f7fc ba25 	b.w	8011888 <ucdr_serialize_int16_t>
 801543e:	3401      	adds	r4, #1
 8015440:	68f2      	ldr	r2, [r6, #12]
 8015442:	42a2      	cmp	r2, r4
 8015444:	d8bc      	bhi.n	80153c0 <uxr_serialize_ActivityInfoVariant+0xac>
 8015446:	4007      	ands	r7, r0
 8015448:	b2ff      	uxtb	r7, r7
 801544a:	e774      	b.n	8015336 <uxr_serialize_ActivityInfoVariant+0x22>
 801544c:	3401      	adds	r4, #1
 801544e:	68f3      	ldr	r3, [r6, #12]
 8015450:	3518      	adds	r5, #24
 8015452:	429c      	cmp	r4, r3
 8015454:	d397      	bcc.n	8015386 <uxr_serialize_ActivityInfoVariant+0x72>
 8015456:	e76e      	b.n	8015336 <uxr_serialize_ActivityInfoVariant+0x22>

08015458 <uxr_deserialize_BaseObjectReply>:
 8015458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801545c:	2202      	movs	r2, #2
 801545e:	4606      	mov	r6, r0
 8015460:	460f      	mov	r7, r1
 8015462:	f004 fdc9 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015466:	2202      	movs	r2, #2
 8015468:	4605      	mov	r5, r0
 801546a:	4630      	mov	r0, r6
 801546c:	18b9      	adds	r1, r7, r2
 801546e:	f004 fdc3 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015472:	4680      	mov	r8, r0
 8015474:	1d39      	adds	r1, r7, #4
 8015476:	4630      	mov	r0, r6
 8015478:	f7fb fce0 	bl	8010e3c <ucdr_deserialize_uint8_t>
 801547c:	ea05 0508 	and.w	r5, r5, r8
 8015480:	4604      	mov	r4, r0
 8015482:	1d79      	adds	r1, r7, #5
 8015484:	4630      	mov	r0, r6
 8015486:	402c      	ands	r4, r5
 8015488:	f7fb fcd8 	bl	8010e3c <ucdr_deserialize_uint8_t>
 801548c:	4020      	ands	r0, r4
 801548e:	b2c0      	uxtb	r0, r0
 8015490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015494 <uxr_serialize_ReadSpecification>:
 8015494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015496:	460e      	mov	r6, r1
 8015498:	4607      	mov	r7, r0
 801549a:	7809      	ldrb	r1, [r1, #0]
 801549c:	f7fb fcb8 	bl	8010e10 <ucdr_serialize_uint8_t>
 80154a0:	4604      	mov	r4, r0
 80154a2:	7871      	ldrb	r1, [r6, #1]
 80154a4:	4638      	mov	r0, r7
 80154a6:	f7fb fcb3 	bl	8010e10 <ucdr_serialize_uint8_t>
 80154aa:	4004      	ands	r4, r0
 80154ac:	78b1      	ldrb	r1, [r6, #2]
 80154ae:	4638      	mov	r0, r7
 80154b0:	f7fb fc80 	bl	8010db4 <ucdr_serialize_bool>
 80154b4:	78b3      	ldrb	r3, [r6, #2]
 80154b6:	b2e4      	uxtb	r4, r4
 80154b8:	4004      	ands	r4, r0
 80154ba:	b943      	cbnz	r3, 80154ce <uxr_serialize_ReadSpecification+0x3a>
 80154bc:	7a31      	ldrb	r1, [r6, #8]
 80154be:	4638      	mov	r0, r7
 80154c0:	f7fb fc78 	bl	8010db4 <ucdr_serialize_bool>
 80154c4:	7a33      	ldrb	r3, [r6, #8]
 80154c6:	4004      	ands	r4, r0
 80154c8:	b93b      	cbnz	r3, 80154da <uxr_serialize_ReadSpecification+0x46>
 80154ca:	4620      	mov	r0, r4
 80154cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154ce:	6871      	ldr	r1, [r6, #4]
 80154d0:	4638      	mov	r0, r7
 80154d2:	f004 fea3 	bl	801a21c <ucdr_serialize_string>
 80154d6:	4004      	ands	r4, r0
 80154d8:	e7f0      	b.n	80154bc <uxr_serialize_ReadSpecification+0x28>
 80154da:	8971      	ldrh	r1, [r6, #10]
 80154dc:	4638      	mov	r0, r7
 80154de:	f7fb fcc3 	bl	8010e68 <ucdr_serialize_uint16_t>
 80154e2:	4605      	mov	r5, r0
 80154e4:	89b1      	ldrh	r1, [r6, #12]
 80154e6:	4638      	mov	r0, r7
 80154e8:	f7fb fcbe 	bl	8010e68 <ucdr_serialize_uint16_t>
 80154ec:	4005      	ands	r5, r0
 80154ee:	89f1      	ldrh	r1, [r6, #14]
 80154f0:	4638      	mov	r0, r7
 80154f2:	b2ed      	uxtb	r5, r5
 80154f4:	f7fb fcb8 	bl	8010e68 <ucdr_serialize_uint16_t>
 80154f8:	8a31      	ldrh	r1, [r6, #16]
 80154fa:	4025      	ands	r5, r4
 80154fc:	4604      	mov	r4, r0
 80154fe:	4638      	mov	r0, r7
 8015500:	4025      	ands	r5, r4
 8015502:	f7fb fcb1 	bl	8010e68 <ucdr_serialize_uint16_t>
 8015506:	ea00 0405 	and.w	r4, r0, r5
 801550a:	4620      	mov	r0, r4
 801550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801550e:	bf00      	nop

08015510 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015510:	f7ff bb0a 	b.w	8014b28 <uxr_serialize_CLIENT_Representation>

08015514 <uxr_serialize_CREATE_Payload>:
 8015514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015516:	2202      	movs	r2, #2
 8015518:	4607      	mov	r7, r0
 801551a:	460e      	mov	r6, r1
 801551c:	f004 fd08 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8015520:	2202      	movs	r2, #2
 8015522:	4605      	mov	r5, r0
 8015524:	4638      	mov	r0, r7
 8015526:	18b1      	adds	r1, r6, r2
 8015528:	f004 fd02 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 801552c:	7931      	ldrb	r1, [r6, #4]
 801552e:	4604      	mov	r4, r0
 8015530:	4638      	mov	r0, r7
 8015532:	f7fb fc6d 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015536:	b170      	cbz	r0, 8015556 <uxr_serialize_CREATE_Payload+0x42>
 8015538:	7933      	ldrb	r3, [r6, #4]
 801553a:	402c      	ands	r4, r5
 801553c:	3b01      	subs	r3, #1
 801553e:	b2e4      	uxtb	r4, r4
 8015540:	2b0d      	cmp	r3, #13
 8015542:	d809      	bhi.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 8015544:	e8df f003 	tbb	[pc, r3]
 8015548:	23230a4c 	.word	0x23230a4c
 801554c:	0a0a0a0a 	.word	0x0a0a0a0a
 8015550:	12121208 	.word	0x12121208
 8015554:	3e45      	.short	0x3e45
 8015556:	2400      	movs	r4, #0
 8015558:	4620      	mov	r0, r4
 801555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801555c:	f106 0108 	add.w	r1, r6, #8
 8015560:	4638      	mov	r0, r7
 8015562:	f7ff fbe7 	bl	8014d34 <uxr_serialize_DATAWRITER_Representation>
 8015566:	4004      	ands	r4, r0
 8015568:	4620      	mov	r0, r4
 801556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556c:	7a31      	ldrb	r1, [r6, #8]
 801556e:	4638      	mov	r0, r7
 8015570:	f7fb fc4e 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015574:	2800      	cmp	r0, #0
 8015576:	d0ee      	beq.n	8015556 <uxr_serialize_CREATE_Payload+0x42>
 8015578:	7a33      	ldrb	r3, [r6, #8]
 801557a:	2b01      	cmp	r3, #1
 801557c:	d001      	beq.n	8015582 <uxr_serialize_CREATE_Payload+0x6e>
 801557e:	2b02      	cmp	r3, #2
 8015580:	d1ea      	bne.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 8015582:	68f1      	ldr	r1, [r6, #12]
 8015584:	4638      	mov	r0, r7
 8015586:	f004 fe49 	bl	801a21c <ucdr_serialize_string>
 801558a:	4004      	ands	r4, r0
 801558c:	e7e4      	b.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 801558e:	7a31      	ldrb	r1, [r6, #8]
 8015590:	4638      	mov	r0, r7
 8015592:	f7fb fc3d 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015596:	4605      	mov	r5, r0
 8015598:	b158      	cbz	r0, 80155b2 <uxr_serialize_CREATE_Payload+0x9e>
 801559a:	7a33      	ldrb	r3, [r6, #8]
 801559c:	2b02      	cmp	r3, #2
 801559e:	d034      	beq.n	801560a <uxr_serialize_CREATE_Payload+0xf6>
 80155a0:	2b03      	cmp	r3, #3
 80155a2:	d106      	bne.n	80155b2 <uxr_serialize_CREATE_Payload+0x9e>
 80155a4:	68f2      	ldr	r2, [r6, #12]
 80155a6:	f106 0110 	add.w	r1, r6, #16
 80155aa:	4638      	mov	r0, r7
 80155ac:	f7fc fe1c 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 80155b0:	4605      	mov	r5, r0
 80155b2:	2202      	movs	r2, #2
 80155b4:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80155b8:	4638      	mov	r0, r7
 80155ba:	f004 fcb9 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80155be:	4028      	ands	r0, r5
 80155c0:	4004      	ands	r4, r0
 80155c2:	e7c9      	b.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 80155c4:	f106 0108 	add.w	r1, r6, #8
 80155c8:	4638      	mov	r0, r7
 80155ca:	f7ff faad 	bl	8014b28 <uxr_serialize_CLIENT_Representation>
 80155ce:	4004      	ands	r4, r0
 80155d0:	e7c2      	b.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 80155d2:	f106 0108 	add.w	r1, r6, #8
 80155d6:	4638      	mov	r0, r7
 80155d8:	f7ff fb62 	bl	8014ca0 <uxr_serialize_AGENT_Representation>
 80155dc:	4004      	ands	r4, r0
 80155de:	e7bb      	b.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 80155e0:	7a31      	ldrb	r1, [r6, #8]
 80155e2:	4638      	mov	r0, r7
 80155e4:	f7fb fc14 	bl	8010e10 <ucdr_serialize_uint8_t>
 80155e8:	4605      	mov	r5, r0
 80155ea:	b130      	cbz	r0, 80155fa <uxr_serialize_CREATE_Payload+0xe6>
 80155ec:	7a33      	ldrb	r3, [r6, #8]
 80155ee:	2b02      	cmp	r3, #2
 80155f0:	d011      	beq.n	8015616 <uxr_serialize_CREATE_Payload+0x102>
 80155f2:	2b03      	cmp	r3, #3
 80155f4:	d015      	beq.n	8015622 <uxr_serialize_CREATE_Payload+0x10e>
 80155f6:	2b01      	cmp	r3, #1
 80155f8:	d00d      	beq.n	8015616 <uxr_serialize_CREATE_Payload+0x102>
 80155fa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80155fe:	4638      	mov	r0, r7
 8015600:	f7fc f942 	bl	8011888 <ucdr_serialize_int16_t>
 8015604:	4028      	ands	r0, r5
 8015606:	4004      	ands	r4, r0
 8015608:	e7a6      	b.n	8015558 <uxr_serialize_CREATE_Payload+0x44>
 801560a:	68f1      	ldr	r1, [r6, #12]
 801560c:	4638      	mov	r0, r7
 801560e:	f004 fe05 	bl	801a21c <ucdr_serialize_string>
 8015612:	4605      	mov	r5, r0
 8015614:	e7cd      	b.n	80155b2 <uxr_serialize_CREATE_Payload+0x9e>
 8015616:	68f1      	ldr	r1, [r6, #12]
 8015618:	4638      	mov	r0, r7
 801561a:	f004 fdff 	bl	801a21c <ucdr_serialize_string>
 801561e:	4605      	mov	r5, r0
 8015620:	e7eb      	b.n	80155fa <uxr_serialize_CREATE_Payload+0xe6>
 8015622:	68f2      	ldr	r2, [r6, #12]
 8015624:	f106 0110 	add.w	r1, r6, #16
 8015628:	4638      	mov	r0, r7
 801562a:	f7fc fddd 	bl	80121e8 <ucdr_serialize_sequence_uint8_t>
 801562e:	4605      	mov	r5, r0
 8015630:	e7e3      	b.n	80155fa <uxr_serialize_CREATE_Payload+0xe6>
 8015632:	bf00      	nop

08015634 <uxr_deserialize_GET_INFO_Payload>:
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	2202      	movs	r2, #2
 8015638:	4605      	mov	r5, r0
 801563a:	460e      	mov	r6, r1
 801563c:	f004 fcdc 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015640:	2202      	movs	r2, #2
 8015642:	4604      	mov	r4, r0
 8015644:	4628      	mov	r0, r5
 8015646:	18b1      	adds	r1, r6, r2
 8015648:	f004 fcd6 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 801564c:	4603      	mov	r3, r0
 801564e:	1d31      	adds	r1, r6, #4
 8015650:	4628      	mov	r0, r5
 8015652:	401c      	ands	r4, r3
 8015654:	f7fb ff22 	bl	801149c <ucdr_deserialize_uint32_t>
 8015658:	b2e4      	uxtb	r4, r4
 801565a:	4020      	ands	r0, r4
 801565c:	bd70      	pop	{r4, r5, r6, pc}
 801565e:	bf00      	nop

08015660 <uxr_serialize_DELETE_Payload>:
 8015660:	b570      	push	{r4, r5, r6, lr}
 8015662:	2202      	movs	r2, #2
 8015664:	4605      	mov	r5, r0
 8015666:	460e      	mov	r6, r1
 8015668:	f004 fc62 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 801566c:	2202      	movs	r2, #2
 801566e:	4604      	mov	r4, r0
 8015670:	4628      	mov	r0, r5
 8015672:	18b1      	adds	r1, r6, r2
 8015674:	f004 fc5c 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8015678:	4020      	ands	r0, r4
 801567a:	b2c0      	uxtb	r0, r0
 801567c:	bd70      	pop	{r4, r5, r6, pc}
 801567e:	bf00      	nop

08015680 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015684:	460e      	mov	r6, r1
 8015686:	4605      	mov	r5, r0
 8015688:	f7fb fbd8 	bl	8010e3c <ucdr_deserialize_uint8_t>
 801568c:	4604      	mov	r4, r0
 801568e:	1c71      	adds	r1, r6, #1
 8015690:	4628      	mov	r0, r5
 8015692:	f7fb fbd3 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015696:	2204      	movs	r2, #4
 8015698:	4681      	mov	r9, r0
 801569a:	4628      	mov	r0, r5
 801569c:	18b1      	adds	r1, r6, r2
 801569e:	f004 fcab 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80156a2:	f106 0108 	add.w	r1, r6, #8
 80156a6:	4680      	mov	r8, r0
 80156a8:	2202      	movs	r2, #2
 80156aa:	4628      	mov	r0, r5
 80156ac:	f004 fca4 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80156b0:	ea04 0309 	and.w	r3, r4, r9
 80156b4:	4607      	mov	r7, r0
 80156b6:	2202      	movs	r2, #2
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	f106 010a 	add.w	r1, r6, #10
 80156be:	4628      	mov	r0, r5
 80156c0:	ea03 0408 	and.w	r4, r3, r8
 80156c4:	f004 fc98 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80156c8:	4603      	mov	r3, r0
 80156ca:	4628      	mov	r0, r5
 80156cc:	403c      	ands	r4, r7
 80156ce:	f106 010c 	add.w	r1, r6, #12
 80156d2:	461d      	mov	r5, r3
 80156d4:	f7fb fb84 	bl	8010de0 <ucdr_deserialize_bool>
 80156d8:	4025      	ands	r5, r4
 80156da:	4028      	ands	r0, r5
 80156dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080156e0 <uxr_deserialize_STATUS_Payload>:
 80156e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e4:	2202      	movs	r2, #2
 80156e6:	4606      	mov	r6, r0
 80156e8:	460f      	mov	r7, r1
 80156ea:	f004 fc85 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80156ee:	2202      	movs	r2, #2
 80156f0:	4605      	mov	r5, r0
 80156f2:	4630      	mov	r0, r6
 80156f4:	18b9      	adds	r1, r7, r2
 80156f6:	f004 fc7f 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80156fa:	4680      	mov	r8, r0
 80156fc:	1d39      	adds	r1, r7, #4
 80156fe:	4630      	mov	r0, r6
 8015700:	f7fb fb9c 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015704:	ea05 0508 	and.w	r5, r5, r8
 8015708:	4604      	mov	r4, r0
 801570a:	1d79      	adds	r1, r7, #5
 801570c:	4630      	mov	r0, r6
 801570e:	402c      	ands	r4, r5
 8015710:	f7fb fb94 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015714:	4020      	ands	r0, r4
 8015716:	b2c0      	uxtb	r0, r0
 8015718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801571c <uxr_serialize_INFO_Payload>:
 801571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015720:	2202      	movs	r2, #2
 8015722:	460c      	mov	r4, r1
 8015724:	4605      	mov	r5, r0
 8015726:	f004 fc03 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 801572a:	2202      	movs	r2, #2
 801572c:	4680      	mov	r8, r0
 801572e:	4628      	mov	r0, r5
 8015730:	18a1      	adds	r1, r4, r2
 8015732:	f004 fbfd 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8015736:	4607      	mov	r7, r0
 8015738:	7921      	ldrb	r1, [r4, #4]
 801573a:	4628      	mov	r0, r5
 801573c:	f7fb fb68 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015740:	ea08 0807 	and.w	r8, r8, r7
 8015744:	4606      	mov	r6, r0
 8015746:	7961      	ldrb	r1, [r4, #5]
 8015748:	4628      	mov	r0, r5
 801574a:	ea06 0608 	and.w	r6, r6, r8
 801574e:	f7fb fb5f 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015752:	7a21      	ldrb	r1, [r4, #8]
 8015754:	4030      	ands	r0, r6
 8015756:	b2c7      	uxtb	r7, r0
 8015758:	4628      	mov	r0, r5
 801575a:	f7fb fb2b 	bl	8010db4 <ucdr_serialize_bool>
 801575e:	7a23      	ldrb	r3, [r4, #8]
 8015760:	4606      	mov	r6, r0
 8015762:	b96b      	cbnz	r3, 8015780 <uxr_serialize_INFO_Payload+0x64>
 8015764:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8015768:	4628      	mov	r0, r5
 801576a:	f7fb fb23 	bl	8010db4 <ucdr_serialize_bool>
 801576e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015772:	4030      	ands	r0, r6
 8015774:	b2c6      	uxtb	r6, r0
 8015776:	b983      	cbnz	r3, 801579a <uxr_serialize_INFO_Payload+0x7e>
 8015778:	ea06 0007 	and.w	r0, r6, r7
 801577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015780:	7b21      	ldrb	r1, [r4, #12]
 8015782:	4628      	mov	r0, r5
 8015784:	f7fb fb44 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015788:	b188      	cbz	r0, 80157ae <uxr_serialize_INFO_Payload+0x92>
 801578a:	f104 010c 	add.w	r1, r4, #12
 801578e:	4628      	mov	r0, r5
 8015790:	f7ff faf8 	bl	8014d84 <uxr_serialize_ObjectVariant.part.0>
 8015794:	4030      	ands	r0, r6
 8015796:	b2c6      	uxtb	r6, r0
 8015798:	e7e4      	b.n	8015764 <uxr_serialize_INFO_Payload+0x48>
 801579a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801579e:	4628      	mov	r0, r5
 80157a0:	f7ff fdb8 	bl	8015314 <uxr_serialize_ActivityInfoVariant>
 80157a4:	4006      	ands	r6, r0
 80157a6:	ea06 0007 	and.w	r0, r6, r7
 80157aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ae:	4606      	mov	r6, r0
 80157b0:	e7d8      	b.n	8015764 <uxr_serialize_INFO_Payload+0x48>
 80157b2:	bf00      	nop

080157b4 <uxr_serialize_READ_DATA_Payload>:
 80157b4:	b570      	push	{r4, r5, r6, lr}
 80157b6:	2202      	movs	r2, #2
 80157b8:	4605      	mov	r5, r0
 80157ba:	460e      	mov	r6, r1
 80157bc:	f004 fbb8 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80157c0:	2202      	movs	r2, #2
 80157c2:	4604      	mov	r4, r0
 80157c4:	4628      	mov	r0, r5
 80157c6:	18b1      	adds	r1, r6, r2
 80157c8:	f004 fbb2 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80157cc:	4603      	mov	r3, r0
 80157ce:	1d31      	adds	r1, r6, #4
 80157d0:	4628      	mov	r0, r5
 80157d2:	401c      	ands	r4, r3
 80157d4:	f7ff fe5e 	bl	8015494 <uxr_serialize_ReadSpecification>
 80157d8:	b2e4      	uxtb	r4, r4
 80157da:	4020      	ands	r0, r4
 80157dc:	bd70      	pop	{r4, r5, r6, pc}
 80157de:	bf00      	nop

080157e0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80157e0:	b570      	push	{r4, r5, r6, lr}
 80157e2:	2202      	movs	r2, #2
 80157e4:	4605      	mov	r5, r0
 80157e6:	460e      	mov	r6, r1
 80157e8:	f004 fba2 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80157ec:	2202      	movs	r2, #2
 80157ee:	4604      	mov	r4, r0
 80157f0:	4628      	mov	r0, r5
 80157f2:	18b1      	adds	r1, r6, r2
 80157f4:	f004 fb9c 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 80157f8:	4020      	ands	r0, r4
 80157fa:	b2c0      	uxtb	r0, r0
 80157fc:	bd70      	pop	{r4, r5, r6, pc}
 80157fe:	bf00      	nop

08015800 <uxr_serialize_ACKNACK_Payload>:
 8015800:	b570      	push	{r4, r5, r6, lr}
 8015802:	460c      	mov	r4, r1
 8015804:	4605      	mov	r5, r0
 8015806:	460e      	mov	r6, r1
 8015808:	f834 1b02 	ldrh.w	r1, [r4], #2
 801580c:	f7fb fb2c 	bl	8010e68 <ucdr_serialize_uint16_t>
 8015810:	2202      	movs	r2, #2
 8015812:	4621      	mov	r1, r4
 8015814:	4604      	mov	r4, r0
 8015816:	4628      	mov	r0, r5
 8015818:	f004 fb8a 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 801581c:	4603      	mov	r3, r0
 801581e:	7931      	ldrb	r1, [r6, #4]
 8015820:	4628      	mov	r0, r5
 8015822:	401c      	ands	r4, r3
 8015824:	f7fb faf4 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015828:	b2e4      	uxtb	r4, r4
 801582a:	4020      	ands	r0, r4
 801582c:	bd70      	pop	{r4, r5, r6, pc}
 801582e:	bf00      	nop

08015830 <uxr_deserialize_ACKNACK_Payload>:
 8015830:	b570      	push	{r4, r5, r6, lr}
 8015832:	460e      	mov	r6, r1
 8015834:	4605      	mov	r5, r0
 8015836:	f7fb fc17 	bl	8011068 <ucdr_deserialize_uint16_t>
 801583a:	2202      	movs	r2, #2
 801583c:	4604      	mov	r4, r0
 801583e:	4628      	mov	r0, r5
 8015840:	18b1      	adds	r1, r6, r2
 8015842:	f004 fbd9 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015846:	4603      	mov	r3, r0
 8015848:	1d31      	adds	r1, r6, #4
 801584a:	4628      	mov	r0, r5
 801584c:	401c      	ands	r4, r3
 801584e:	f7fb faf5 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015852:	b2e4      	uxtb	r4, r4
 8015854:	4020      	ands	r0, r4
 8015856:	bd70      	pop	{r4, r5, r6, pc}

08015858 <uxr_serialize_HEARTBEAT_Payload>:
 8015858:	b570      	push	{r4, r5, r6, lr}
 801585a:	460d      	mov	r5, r1
 801585c:	4606      	mov	r6, r0
 801585e:	8809      	ldrh	r1, [r1, #0]
 8015860:	f7fb fb02 	bl	8010e68 <ucdr_serialize_uint16_t>
 8015864:	8869      	ldrh	r1, [r5, #2]
 8015866:	4604      	mov	r4, r0
 8015868:	4630      	mov	r0, r6
 801586a:	f7fb fafd 	bl	8010e68 <ucdr_serialize_uint16_t>
 801586e:	4603      	mov	r3, r0
 8015870:	7929      	ldrb	r1, [r5, #4]
 8015872:	4630      	mov	r0, r6
 8015874:	401c      	ands	r4, r3
 8015876:	f7fb facb 	bl	8010e10 <ucdr_serialize_uint8_t>
 801587a:	b2e4      	uxtb	r4, r4
 801587c:	4020      	ands	r0, r4
 801587e:	bd70      	pop	{r4, r5, r6, pc}

08015880 <uxr_deserialize_HEARTBEAT_Payload>:
 8015880:	b570      	push	{r4, r5, r6, lr}
 8015882:	460e      	mov	r6, r1
 8015884:	4605      	mov	r5, r0
 8015886:	f7fb fbef 	bl	8011068 <ucdr_deserialize_uint16_t>
 801588a:	4604      	mov	r4, r0
 801588c:	1cb1      	adds	r1, r6, #2
 801588e:	4628      	mov	r0, r5
 8015890:	f7fb fbea 	bl	8011068 <ucdr_deserialize_uint16_t>
 8015894:	4603      	mov	r3, r0
 8015896:	1d31      	adds	r1, r6, #4
 8015898:	4628      	mov	r0, r5
 801589a:	401c      	ands	r4, r3
 801589c:	f7fb face 	bl	8010e3c <ucdr_deserialize_uint8_t>
 80158a0:	b2e4      	uxtb	r4, r4
 80158a2:	4020      	ands	r0, r4
 80158a4:	bd70      	pop	{r4, r5, r6, pc}
 80158a6:	bf00      	nop

080158a8 <uxr_serialize_TIMESTAMP_Payload>:
 80158a8:	b570      	push	{r4, r5, r6, lr}
 80158aa:	460d      	mov	r5, r1
 80158ac:	4606      	mov	r6, r0
 80158ae:	6809      	ldr	r1, [r1, #0]
 80158b0:	f7fc f8de 	bl	8011a70 <ucdr_serialize_int32_t>
 80158b4:	4604      	mov	r4, r0
 80158b6:	6869      	ldr	r1, [r5, #4]
 80158b8:	4630      	mov	r0, r6
 80158ba:	f7fb fcbf 	bl	801123c <ucdr_serialize_uint32_t>
 80158be:	4020      	ands	r0, r4
 80158c0:	b2c0      	uxtb	r0, r0
 80158c2:	bd70      	pop	{r4, r5, r6, pc}

080158c4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80158c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c8:	460e      	mov	r6, r1
 80158ca:	4605      	mov	r5, r0
 80158cc:	f7fc f968 	bl	8011ba0 <ucdr_deserialize_int32_t>
 80158d0:	4607      	mov	r7, r0
 80158d2:	1d31      	adds	r1, r6, #4
 80158d4:	4628      	mov	r0, r5
 80158d6:	f7fb fde1 	bl	801149c <ucdr_deserialize_uint32_t>
 80158da:	4680      	mov	r8, r0
 80158dc:	f106 0108 	add.w	r1, r6, #8
 80158e0:	4628      	mov	r0, r5
 80158e2:	f7fc f95d 	bl	8011ba0 <ucdr_deserialize_int32_t>
 80158e6:	ea07 0708 	and.w	r7, r7, r8
 80158ea:	4604      	mov	r4, r0
 80158ec:	f106 010c 	add.w	r1, r6, #12
 80158f0:	4628      	mov	r0, r5
 80158f2:	403c      	ands	r4, r7
 80158f4:	f7fb fdd2 	bl	801149c <ucdr_deserialize_uint32_t>
 80158f8:	f106 0110 	add.w	r1, r6, #16
 80158fc:	4004      	ands	r4, r0
 80158fe:	4628      	mov	r0, r5
 8015900:	f7fc f94e 	bl	8011ba0 <ucdr_deserialize_int32_t>
 8015904:	4603      	mov	r3, r0
 8015906:	b2e4      	uxtb	r4, r4
 8015908:	4628      	mov	r0, r5
 801590a:	461d      	mov	r5, r3
 801590c:	f106 0114 	add.w	r1, r6, #20
 8015910:	f7fb fdc4 	bl	801149c <ucdr_deserialize_uint32_t>
 8015914:	402c      	ands	r4, r5
 8015916:	4020      	ands	r0, r4
 8015918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801591c <uxr_serialize_SampleIdentity>:
 801591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015920:	4604      	mov	r4, r0
 8015922:	460d      	mov	r5, r1
 8015924:	220c      	movs	r2, #12
 8015926:	f004 fb03 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 801592a:	2203      	movs	r2, #3
 801592c:	f105 010c 	add.w	r1, r5, #12
 8015930:	4607      	mov	r7, r0
 8015932:	4620      	mov	r0, r4
 8015934:	f004 fafc 	bl	8019f30 <ucdr_serialize_array_uint8_t>
 8015938:	7be9      	ldrb	r1, [r5, #15]
 801593a:	4680      	mov	r8, r0
 801593c:	4620      	mov	r0, r4
 801593e:	f7fb fa67 	bl	8010e10 <ucdr_serialize_uint8_t>
 8015942:	6929      	ldr	r1, [r5, #16]
 8015944:	4606      	mov	r6, r0
 8015946:	4620      	mov	r0, r4
 8015948:	f7fc f892 	bl	8011a70 <ucdr_serialize_int32_t>
 801594c:	ea07 0708 	and.w	r7, r7, r8
 8015950:	4603      	mov	r3, r0
 8015952:	4620      	mov	r0, r4
 8015954:	403e      	ands	r6, r7
 8015956:	6969      	ldr	r1, [r5, #20]
 8015958:	461c      	mov	r4, r3
 801595a:	f7fb fc6f 	bl	801123c <ucdr_serialize_uint32_t>
 801595e:	4034      	ands	r4, r6
 8015960:	4020      	ands	r0, r4
 8015962:	b2c0      	uxtb	r0, r0
 8015964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015968 <uxr_deserialize_SampleIdentity>:
 8015968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801596c:	4604      	mov	r4, r0
 801596e:	460d      	mov	r5, r1
 8015970:	220c      	movs	r2, #12
 8015972:	f004 fb41 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015976:	2203      	movs	r2, #3
 8015978:	f105 010c 	add.w	r1, r5, #12
 801597c:	4607      	mov	r7, r0
 801597e:	4620      	mov	r0, r4
 8015980:	f004 fb3a 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8015984:	f105 010f 	add.w	r1, r5, #15
 8015988:	4680      	mov	r8, r0
 801598a:	4620      	mov	r0, r4
 801598c:	f7fb fa56 	bl	8010e3c <ucdr_deserialize_uint8_t>
 8015990:	f105 0110 	add.w	r1, r5, #16
 8015994:	4606      	mov	r6, r0
 8015996:	4620      	mov	r0, r4
 8015998:	f7fc f902 	bl	8011ba0 <ucdr_deserialize_int32_t>
 801599c:	ea07 0708 	and.w	r7, r7, r8
 80159a0:	4603      	mov	r3, r0
 80159a2:	4620      	mov	r0, r4
 80159a4:	403e      	ands	r6, r7
 80159a6:	f105 0114 	add.w	r1, r5, #20
 80159aa:	461c      	mov	r4, r3
 80159ac:	f7fb fd76 	bl	801149c <ucdr_deserialize_uint32_t>
 80159b0:	4034      	ands	r4, r6
 80159b2:	4020      	ands	r0, r4
 80159b4:	b2c0      	uxtb	r0, r0
 80159b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ba:	bf00      	nop

080159bc <rcl_client_get_rmw_handle>:
 80159bc:	b118      	cbz	r0, 80159c6 <rcl_client_get_rmw_handle+0xa>
 80159be:	6800      	ldr	r0, [r0, #0]
 80159c0:	b108      	cbz	r0, 80159c6 <rcl_client_get_rmw_handle+0xa>
 80159c2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80159c6:	4770      	bx	lr

080159c8 <rcl_send_request>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	b1f8      	cbz	r0, 8015a0e <rcl_send_request+0x46>
 80159ce:	4604      	mov	r4, r0
 80159d0:	6800      	ldr	r0, [r0, #0]
 80159d2:	b1e0      	cbz	r0, 8015a0e <rcl_send_request+0x46>
 80159d4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80159d8:	b1cb      	cbz	r3, 8015a0e <rcl_send_request+0x46>
 80159da:	460e      	mov	r6, r1
 80159dc:	b1e1      	cbz	r1, 8015a18 <rcl_send_request+0x50>
 80159de:	4615      	mov	r5, r2
 80159e0:	b1d2      	cbz	r2, 8015a18 <rcl_send_request+0x50>
 80159e2:	2105      	movs	r1, #5
 80159e4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80159e8:	f002 fe1a 	bl	8018620 <__atomic_load_8>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4631      	mov	r1, r6
 80159f2:	e9c5 2300 	strd	r2, r3, [r5]
 80159f6:	6823      	ldr	r3, [r4, #0]
 80159f8:	462a      	mov	r2, r5
 80159fa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80159fe:	f003 fd3d 	bl	801947c <rmw_send_request>
 8015a02:	4606      	mov	r6, r0
 8015a04:	b160      	cbz	r0, 8015a20 <rcl_send_request+0x58>
 8015a06:	2601      	movs	r6, #1
 8015a08:	4630      	mov	r0, r6
 8015a0a:	b002      	add	sp, #8
 8015a0c:	bd70      	pop	{r4, r5, r6, pc}
 8015a0e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8015a12:	4630      	mov	r0, r6
 8015a14:	b002      	add	sp, #8
 8015a16:	bd70      	pop	{r4, r5, r6, pc}
 8015a18:	260b      	movs	r6, #11
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	b002      	add	sp, #8
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}
 8015a20:	6820      	ldr	r0, [r4, #0]
 8015a22:	2105      	movs	r1, #5
 8015a24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a28:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015a2c:	9100      	str	r1, [sp, #0]
 8015a2e:	f002 fe63 	bl	80186f8 <__atomic_exchange_8>
 8015a32:	4630      	mov	r0, r6
 8015a34:	b002      	add	sp, #8
 8015a36:	bd70      	pop	{r4, r5, r6, pc}

08015a38 <rcl_take_response>:
 8015a38:	b570      	push	{r4, r5, r6, lr}
 8015a3a:	468e      	mov	lr, r1
 8015a3c:	b08c      	sub	sp, #48	@ 0x30
 8015a3e:	460c      	mov	r4, r1
 8015a40:	4616      	mov	r6, r2
 8015a42:	f10d 0c18 	add.w	ip, sp, #24
 8015a46:	4605      	mov	r5, r0
 8015a48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a50:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a54:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a58:	b35d      	cbz	r5, 8015ab2 <rcl_take_response+0x7a>
 8015a5a:	682b      	ldr	r3, [r5, #0]
 8015a5c:	b34b      	cbz	r3, 8015ab2 <rcl_take_response+0x7a>
 8015a5e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015a62:	b330      	cbz	r0, 8015ab2 <rcl_take_response+0x7a>
 8015a64:	b346      	cbz	r6, 8015ab8 <rcl_take_response+0x80>
 8015a66:	2300      	movs	r3, #0
 8015a68:	4632      	mov	r2, r6
 8015a6a:	a902      	add	r1, sp, #8
 8015a6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8015a70:	f10d 0307 	add.w	r3, sp, #7
 8015a74:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015ac0 <rcl_take_response+0x88>
 8015a78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015a80:	f003 fe04 	bl	801968c <rmw_take_response>
 8015a84:	4605      	mov	r5, r0
 8015a86:	b9c8      	cbnz	r0, 8015abc <rcl_take_response+0x84>
 8015a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015a8c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015a90:	2a00      	cmp	r2, #0
 8015a92:	bf08      	it	eq
 8015a94:	461d      	moveq	r5, r3
 8015a96:	f10d 0e18 	add.w	lr, sp, #24
 8015a9a:	46a4      	mov	ip, r4
 8015a9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015aa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015aa4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015aa8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015aac:	4628      	mov	r0, r5
 8015aae:	b00c      	add	sp, #48	@ 0x30
 8015ab0:	bd70      	pop	{r4, r5, r6, pc}
 8015ab2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8015ab6:	e7ee      	b.n	8015a96 <rcl_take_response+0x5e>
 8015ab8:	250b      	movs	r5, #11
 8015aba:	e7ec      	b.n	8015a96 <rcl_take_response+0x5e>
 8015abc:	2501      	movs	r5, #1
 8015abe:	e7ea      	b.n	8015a96 <rcl_take_response+0x5e>
	...

08015ac8 <rcl_client_is_valid>:
 8015ac8:	b130      	cbz	r0, 8015ad8 <rcl_client_is_valid+0x10>
 8015aca:	6800      	ldr	r0, [r0, #0]
 8015acc:	b120      	cbz	r0, 8015ad8 <rcl_client_is_valid+0x10>
 8015ace:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015ad2:	3800      	subs	r0, #0
 8015ad4:	bf18      	it	ne
 8015ad6:	2001      	movne	r0, #1
 8015ad8:	4770      	bx	lr
 8015ada:	bf00      	nop

08015adc <rcl_convert_rmw_ret_to_rcl_ret>:
 8015adc:	280b      	cmp	r0, #11
 8015ade:	dc0d      	bgt.n	8015afc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	db09      	blt.n	8015af8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015ae4:	280b      	cmp	r0, #11
 8015ae6:	d807      	bhi.n	8015af8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015ae8:	e8df f000 	tbb	[pc, r0]
 8015aec:	07060607 	.word	0x07060607
 8015af0:	06060606 	.word	0x06060606
 8015af4:	07070606 	.word	0x07070606
 8015af8:	2001      	movs	r0, #1
 8015afa:	4770      	bx	lr
 8015afc:	28cb      	cmp	r0, #203	@ 0xcb
 8015afe:	bf18      	it	ne
 8015b00:	2001      	movne	r0, #1
 8015b02:	4770      	bx	lr

08015b04 <rcl_get_zero_initialized_context>:
 8015b04:	4a03      	ldr	r2, [pc, #12]	@ (8015b14 <rcl_get_zero_initialized_context+0x10>)
 8015b06:	4603      	mov	r3, r0
 8015b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015b0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015b10:	4618      	mov	r0, r3
 8015b12:	4770      	bx	lr
 8015b14:	0801d368 	.word	0x0801d368

08015b18 <rcl_context_is_valid>:
 8015b18:	b118      	cbz	r0, 8015b22 <rcl_context_is_valid+0xa>
 8015b1a:	6840      	ldr	r0, [r0, #4]
 8015b1c:	3800      	subs	r0, #0
 8015b1e:	bf18      	it	ne
 8015b20:	2001      	movne	r0, #1
 8015b22:	4770      	bx	lr

08015b24 <__cleanup_context>:
 8015b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b28:	4606      	mov	r6, r0
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	6800      	ldr	r0, [r0, #0]
 8015b2e:	6073      	str	r3, [r6, #4]
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d049      	beq.n	8015bc8 <__cleanup_context+0xa4>
 8015b34:	6947      	ldr	r7, [r0, #20]
 8015b36:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015b3a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015b3e:	b137      	cbz	r7, 8015b4e <__cleanup_context+0x2a>
 8015b40:	3014      	adds	r0, #20
 8015b42:	f7f8 fc13 	bl	800e36c <rcl_init_options_fini>
 8015b46:	4607      	mov	r7, r0
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d144      	bne.n	8015bd6 <__cleanup_context+0xb2>
 8015b4c:	6830      	ldr	r0, [r6, #0]
 8015b4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015b50:	b143      	cbz	r3, 8015b64 <__cleanup_context+0x40>
 8015b52:	3028      	adds	r0, #40	@ 0x28
 8015b54:	f7f9 fffa 	bl	800fb4c <rmw_context_fini>
 8015b58:	b118      	cbz	r0, 8015b62 <__cleanup_context+0x3e>
 8015b5a:	2f00      	cmp	r7, #0
 8015b5c:	d03e      	beq.n	8015bdc <__cleanup_context+0xb8>
 8015b5e:	f7f9 fd2b 	bl	800f5b8 <rcutils_reset_error>
 8015b62:	6830      	ldr	r0, [r6, #0]
 8015b64:	6a03      	ldr	r3, [r0, #32]
 8015b66:	b1db      	cbz	r3, 8015ba0 <__cleanup_context+0x7c>
 8015b68:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015b6c:	2a01      	cmp	r2, #1
 8015b6e:	f17c 0100 	sbcs.w	r1, ip, #0
 8015b72:	db11      	blt.n	8015b98 <__cleanup_context+0x74>
 8015b74:	2400      	movs	r4, #0
 8015b76:	4625      	mov	r5, r4
 8015b78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015b7c:	4649      	mov	r1, r9
 8015b7e:	b1b8      	cbz	r0, 8015bb0 <__cleanup_context+0x8c>
 8015b80:	47c0      	blx	r8
 8015b82:	6833      	ldr	r3, [r6, #0]
 8015b84:	3401      	adds	r4, #1
 8015b86:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015b8a:	f145 0500 	adc.w	r5, r5, #0
 8015b8e:	6a1b      	ldr	r3, [r3, #32]
 8015b90:	4294      	cmp	r4, r2
 8015b92:	eb75 010c 	sbcs.w	r1, r5, ip
 8015b96:	dbef      	blt.n	8015b78 <__cleanup_context+0x54>
 8015b98:	4618      	mov	r0, r3
 8015b9a:	4649      	mov	r1, r9
 8015b9c:	47c0      	blx	r8
 8015b9e:	6830      	ldr	r0, [r6, #0]
 8015ba0:	4649      	mov	r1, r9
 8015ba2:	47c0      	blx	r8
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	4638      	mov	r0, r7
 8015ba8:	e9c6 3300 	strd	r3, r3, [r6]
 8015bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bb0:	3401      	adds	r4, #1
 8015bb2:	f145 0500 	adc.w	r5, r5, #0
 8015bb6:	4294      	cmp	r4, r2
 8015bb8:	eb75 010c 	sbcs.w	r1, r5, ip
 8015bbc:	dbdc      	blt.n	8015b78 <__cleanup_context+0x54>
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	4649      	mov	r1, r9
 8015bc2:	47c0      	blx	r8
 8015bc4:	6830      	ldr	r0, [r6, #0]
 8015bc6:	e7eb      	b.n	8015ba0 <__cleanup_context+0x7c>
 8015bc8:	4607      	mov	r7, r0
 8015bca:	2300      	movs	r3, #0
 8015bcc:	4638      	mov	r0, r7
 8015bce:	e9c6 3300 	strd	r3, r3, [r6]
 8015bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bd6:	f7f9 fcef 	bl	800f5b8 <rcutils_reset_error>
 8015bda:	e7b7      	b.n	8015b4c <__cleanup_context+0x28>
 8015bdc:	f7ff ff7e 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 8015be0:	4607      	mov	r7, r0
 8015be2:	e7bc      	b.n	8015b5e <__cleanup_context+0x3a>

08015be4 <rcl_init>:
 8015be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be8:	1e05      	subs	r5, r0, #0
 8015bea:	b09e      	sub	sp, #120	@ 0x78
 8015bec:	460e      	mov	r6, r1
 8015bee:	4690      	mov	r8, r2
 8015bf0:	461f      	mov	r7, r3
 8015bf2:	f340 809f 	ble.w	8015d34 <rcl_init+0x150>
 8015bf6:	2900      	cmp	r1, #0
 8015bf8:	f000 809f 	beq.w	8015d3a <rcl_init+0x156>
 8015bfc:	f1a1 0e04 	sub.w	lr, r1, #4
 8015c00:	f04f 0c00 	mov.w	ip, #0
 8015c04:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015c08:	f10c 0c01 	add.w	ip, ip, #1
 8015c0c:	2c00      	cmp	r4, #0
 8015c0e:	f000 8094 	beq.w	8015d3a <rcl_init+0x156>
 8015c12:	4565      	cmp	r5, ip
 8015c14:	d1f6      	bne.n	8015c04 <rcl_init+0x20>
 8015c16:	f1b8 0f00 	cmp.w	r8, #0
 8015c1a:	f000 808e 	beq.w	8015d3a <rcl_init+0x156>
 8015c1e:	f8d8 4000 	ldr.w	r4, [r8]
 8015c22:	2c00      	cmp	r4, #0
 8015c24:	f000 8089 	beq.w	8015d3a <rcl_init+0x156>
 8015c28:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8015c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c32:	6823      	ldr	r3, [r4, #0]
 8015c34:	a819      	add	r0, sp, #100	@ 0x64
 8015c36:	f8cc 3000 	str.w	r3, [ip]
 8015c3a:	f7f9 fc99 	bl	800f570 <rcutils_allocator_is_valid>
 8015c3e:	f080 0001 	eor.w	r0, r0, #1
 8015c42:	b2c0      	uxtb	r0, r0
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d178      	bne.n	8015d3a <rcl_init+0x156>
 8015c48:	2f00      	cmp	r7, #0
 8015c4a:	d076      	beq.n	8015d3a <rcl_init+0x156>
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d178      	bne.n	8015d44 <rcl_init+0x160>
 8015c52:	2178      	movs	r1, #120	@ 0x78
 8015c54:	2001      	movs	r0, #1
 8015c56:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015c5a:	4798      	blx	r3
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	6038      	str	r0, [r7, #0]
 8015c60:	2800      	cmp	r0, #0
 8015c62:	f000 80b6 	beq.w	8015dd2 <rcl_init+0x1ee>
 8015c66:	a802      	add	r0, sp, #8
 8015c68:	f003 f84e 	bl	8018d08 <rmw_get_zero_initialized_context>
 8015c6c:	a902      	add	r1, sp, #8
 8015c6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015c72:	2250      	movs	r2, #80	@ 0x50
 8015c74:	f006 fa09 	bl	801c08a <memcpy>
 8015c78:	ac19      	add	r4, sp, #100	@ 0x64
 8015c7a:	f8d7 e000 	ldr.w	lr, [r7]
 8015c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c80:	46f4      	mov	ip, lr
 8015c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c86:	6823      	ldr	r3, [r4, #0]
 8015c88:	f10e 0114 	add.w	r1, lr, #20
 8015c8c:	4640      	mov	r0, r8
 8015c8e:	f8cc 3000 	str.w	r3, [ip]
 8015c92:	f7f8 fb95 	bl	800e3c0 <rcl_init_options_copy>
 8015c96:	4604      	mov	r4, r0
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	d144      	bne.n	8015d26 <rcl_init+0x142>
 8015c9c:	f8d7 9000 	ldr.w	r9, [r7]
 8015ca0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015ca4:	f8c9 0020 	str.w	r0, [r9, #32]
 8015ca8:	f8c9 5018 	str.w	r5, [r9, #24]
 8015cac:	f8c9 801c 	str.w	r8, [r9, #28]
 8015cb0:	2d00      	cmp	r5, #0
 8015cb2:	d04e      	beq.n	8015d52 <rcl_init+0x16e>
 8015cb4:	2e00      	cmp	r6, #0
 8015cb6:	d04c      	beq.n	8015d52 <rcl_init+0x16e>
 8015cb8:	2104      	movs	r1, #4
 8015cba:	4628      	mov	r0, r5
 8015cbc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015cc0:	4798      	blx	r3
 8015cc2:	f8c9 0020 	str.w	r0, [r9, #32]
 8015cc6:	f8d7 9000 	ldr.w	r9, [r7]
 8015cca:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015cce:	46ca      	mov	sl, r9
 8015cd0:	b343      	cbz	r3, 8015d24 <rcl_init+0x140>
 8015cd2:	2d01      	cmp	r5, #1
 8015cd4:	f178 0300 	sbcs.w	r3, r8, #0
 8015cd8:	db3b      	blt.n	8015d52 <rcl_init+0x16e>
 8015cda:	2400      	movs	r4, #0
 8015cdc:	3e04      	subs	r6, #4
 8015cde:	46a1      	mov	r9, r4
 8015ce0:	e00b      	b.n	8015cfa <rcl_init+0x116>
 8015ce2:	6831      	ldr	r1, [r6, #0]
 8015ce4:	f006 f9d1 	bl	801c08a <memcpy>
 8015ce8:	3401      	adds	r4, #1
 8015cea:	f149 0900 	adc.w	r9, r9, #0
 8015cee:	45c8      	cmp	r8, r9
 8015cf0:	bf08      	it	eq
 8015cf2:	42a5      	cmpeq	r5, r4
 8015cf4:	d02b      	beq.n	8015d4e <rcl_init+0x16a>
 8015cf6:	f8d7 a000 	ldr.w	sl, [r7]
 8015cfa:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015cfe:	f7ea faf9 	bl	80002f4 <strlen>
 8015d02:	1c42      	adds	r2, r0, #1
 8015d04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015d06:	4610      	mov	r0, r2
 8015d08:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8015d0a:	f8da a020 	ldr.w	sl, [sl, #32]
 8015d0e:	9201      	str	r2, [sp, #4]
 8015d10:	4798      	blx	r3
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015d18:	6a1b      	ldr	r3, [r3, #32]
 8015d1a:	9a01      	ldr	r2, [sp, #4]
 8015d1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015d20:	2800      	cmp	r0, #0
 8015d22:	d1de      	bne.n	8015ce2 <rcl_init+0xfe>
 8015d24:	240a      	movs	r4, #10
 8015d26:	4638      	mov	r0, r7
 8015d28:	f7ff fefc 	bl	8015b24 <__cleanup_context>
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	b01e      	add	sp, #120	@ 0x78
 8015d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d34:	2900      	cmp	r1, #0
 8015d36:	f43f af6e 	beq.w	8015c16 <rcl_init+0x32>
 8015d3a:	240b      	movs	r4, #11
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	b01e      	add	sp, #120	@ 0x78
 8015d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d44:	2464      	movs	r4, #100	@ 0x64
 8015d46:	4620      	mov	r0, r4
 8015d48:	b01e      	add	sp, #120	@ 0x78
 8015d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d4e:	f8d7 9000 	ldr.w	r9, [r7]
 8015d52:	4926      	ldr	r1, [pc, #152]	@ (8015dec <rcl_init+0x208>)
 8015d54:	680b      	ldr	r3, [r1, #0]
 8015d56:	3301      	adds	r3, #1
 8015d58:	d036      	beq.n	8015dc8 <rcl_init+0x1e4>
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	2400      	movs	r4, #0
 8015d5e:	600b      	str	r3, [r1, #0]
 8015d60:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015d64:	607b      	str	r3, [r7, #4]
 8015d66:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015d68:	3301      	adds	r3, #1
 8015d6a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015d6e:	d034      	beq.n	8015dda <rcl_init+0x1f6>
 8015d70:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015d74:	b93b      	cbnz	r3, 8015d86 <rcl_init+0x1a2>
 8015d76:	3030      	adds	r0, #48	@ 0x30
 8015d78:	f000 f83a 	bl	8015df0 <rcl_get_localhost_only>
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d1d1      	bne.n	8015d26 <rcl_init+0x142>
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	6958      	ldr	r0, [r3, #20]
 8015d86:	aa18      	add	r2, sp, #96	@ 0x60
 8015d88:	a917      	add	r1, sp, #92	@ 0x5c
 8015d8a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8015d8c:	f001 f8d2 	bl	8016f34 <rcl_validate_enclave_name>
 8015d90:	4604      	mov	r4, r0
 8015d92:	2800      	cmp	r0, #0
 8015d94:	d1c7      	bne.n	8015d26 <rcl_init+0x142>
 8015d96:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015d98:	b9eb      	cbnz	r3, 8015dd6 <rcl_init+0x1f2>
 8015d9a:	6839      	ldr	r1, [r7, #0]
 8015d9c:	694b      	ldr	r3, [r1, #20]
 8015d9e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015da2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015da4:	f000 fb72 	bl	801648c <rcl_get_security_options_from_environment>
 8015da8:	4604      	mov	r4, r0
 8015daa:	2800      	cmp	r0, #0
 8015dac:	d1bb      	bne.n	8015d26 <rcl_init+0x142>
 8015dae:	6839      	ldr	r1, [r7, #0]
 8015db0:	6948      	ldr	r0, [r1, #20]
 8015db2:	3128      	adds	r1, #40	@ 0x28
 8015db4:	3018      	adds	r0, #24
 8015db6:	f7f9 fd93 	bl	800f8e0 <rmw_init>
 8015dba:	4604      	mov	r4, r0
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d0bd      	beq.n	8015d3c <rcl_init+0x158>
 8015dc0:	f7ff fe8c 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	e7ae      	b.n	8015d26 <rcl_init+0x142>
 8015dc8:	2201      	movs	r2, #1
 8015dca:	461c      	mov	r4, r3
 8015dcc:	600a      	str	r2, [r1, #0]
 8015dce:	4613      	mov	r3, r2
 8015dd0:	e7c6      	b.n	8015d60 <rcl_init+0x17c>
 8015dd2:	240a      	movs	r4, #10
 8015dd4:	e7b2      	b.n	8015d3c <rcl_init+0x158>
 8015dd6:	2401      	movs	r4, #1
 8015dd8:	e7a5      	b.n	8015d26 <rcl_init+0x142>
 8015dda:	3024      	adds	r0, #36	@ 0x24
 8015ddc:	f004 ffa0 	bl	801ad20 <rcl_get_default_domain_id>
 8015de0:	4604      	mov	r4, r0
 8015de2:	2800      	cmp	r0, #0
 8015de4:	d19f      	bne.n	8015d26 <rcl_init+0x142>
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	6958      	ldr	r0, [r3, #20]
 8015dea:	e7c1      	b.n	8015d70 <rcl_init+0x18c>
 8015dec:	24012ff0 	.word	0x24012ff0

08015df0 <rcl_get_localhost_only>:
 8015df0:	b510      	push	{r4, lr}
 8015df2:	2300      	movs	r3, #0
 8015df4:	b082      	sub	sp, #8
 8015df6:	9301      	str	r3, [sp, #4]
 8015df8:	b1b8      	cbz	r0, 8015e2a <rcl_get_localhost_only+0x3a>
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	a901      	add	r1, sp, #4
 8015dfe:	480c      	ldr	r0, [pc, #48]	@ (8015e30 <rcl_get_localhost_only+0x40>)
 8015e00:	f002 fcb2 	bl	8018768 <rcutils_get_env>
 8015e04:	b110      	cbz	r0, 8015e0c <rcl_get_localhost_only+0x1c>
 8015e06:	2001      	movs	r0, #1
 8015e08:	b002      	add	sp, #8
 8015e0a:	bd10      	pop	{r4, pc}
 8015e0c:	9b01      	ldr	r3, [sp, #4]
 8015e0e:	b113      	cbz	r3, 8015e16 <rcl_get_localhost_only+0x26>
 8015e10:	781a      	ldrb	r2, [r3, #0]
 8015e12:	2a31      	cmp	r2, #49	@ 0x31
 8015e14:	d004      	beq.n	8015e20 <rcl_get_localhost_only+0x30>
 8015e16:	2302      	movs	r3, #2
 8015e18:	2000      	movs	r0, #0
 8015e1a:	7023      	strb	r3, [r4, #0]
 8015e1c:	b002      	add	sp, #8
 8015e1e:	bd10      	pop	{r4, pc}
 8015e20:	785b      	ldrb	r3, [r3, #1]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d1f7      	bne.n	8015e16 <rcl_get_localhost_only+0x26>
 8015e26:	2301      	movs	r3, #1
 8015e28:	e7f6      	b.n	8015e18 <rcl_get_localhost_only+0x28>
 8015e2a:	200b      	movs	r0, #11
 8015e2c:	b002      	add	sp, #8
 8015e2e:	bd10      	pop	{r4, pc}
 8015e30:	0801d370 	.word	0x0801d370

08015e34 <rcl_get_zero_initialized_node>:
 8015e34:	4a03      	ldr	r2, [pc, #12]	@ (8015e44 <rcl_get_zero_initialized_node+0x10>)
 8015e36:	4603      	mov	r3, r0
 8015e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e40:	4618      	mov	r0, r3
 8015e42:	4770      	bx	lr
 8015e44:	0801d38c 	.word	0x0801d38c

08015e48 <rcl_node_init>:
 8015e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e4c:	b0a9      	sub	sp, #164	@ 0xa4
 8015e4e:	4604      	mov	r4, r0
 8015e50:	460e      	mov	r6, r1
 8015e52:	4615      	mov	r5, r2
 8015e54:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8015e58:	a823      	add	r0, sp, #140	@ 0x8c
 8015e5a:	461f      	mov	r7, r3
 8015e5c:	f005 f9d4 	bl	801b208 <rcl_guard_condition_get_default_options>
 8015e60:	f1b8 0f00 	cmp.w	r8, #0
 8015e64:	f000 80f3 	beq.w	801604e <rcl_node_init+0x206>
 8015e68:	4640      	mov	r0, r8
 8015e6a:	f7f9 fb81 	bl	800f570 <rcutils_allocator_is_valid>
 8015e6e:	2d00      	cmp	r5, #0
 8015e70:	bf18      	it	ne
 8015e72:	2c00      	cmpne	r4, #0
 8015e74:	f080 0001 	eor.w	r0, r0, #1
 8015e78:	bf0c      	ite	eq
 8015e7a:	f04f 0c01 	moveq.w	ip, #1
 8015e7e:	f04f 0c00 	movne.w	ip, #0
 8015e82:	2e00      	cmp	r6, #0
 8015e84:	bf08      	it	eq
 8015e86:	f04c 0c01 	orreq.w	ip, ip, #1
 8015e8a:	ea4c 0c00 	orr.w	ip, ip, r0
 8015e8e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8015e92:	f040 80dc 	bne.w	801604e <rcl_node_init+0x206>
 8015e96:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015e9a:	f1ba 0f00 	cmp.w	sl, #0
 8015e9e:	f040 80fc 	bne.w	801609a <rcl_node_init+0x252>
 8015ea2:	2f00      	cmp	r7, #0
 8015ea4:	f000 80d3 	beq.w	801604e <rcl_node_init+0x206>
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f7ff fe35 	bl	8015b18 <rcl_context_is_valid>
 8015eae:	4683      	mov	fp, r0
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	f000 80d2 	beq.w	801605a <rcl_node_init+0x212>
 8015eb6:	4652      	mov	r2, sl
 8015eb8:	4630      	mov	r0, r6
 8015eba:	a922      	add	r1, sp, #136	@ 0x88
 8015ebc:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8015ec0:	f003 f8b4 	bl	801902c <rmw_validate_node_name>
 8015ec4:	4682      	mov	sl, r0
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f040 80c3 	bne.w	8016052 <rcl_node_init+0x20a>
 8015ecc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	f040 80f1 	bne.w	80160b6 <rcl_node_init+0x26e>
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	f7ea fa0d 	bl	80002f4 <strlen>
 8015eda:	2800      	cmp	r0, #0
 8015edc:	f040 80c0 	bne.w	8016060 <rcl_node_init+0x218>
 8015ee0:	4d79      	ldr	r5, [pc, #484]	@ (80160c8 <rcl_node_init+0x280>)
 8015ee2:	a922      	add	r1, sp, #136	@ 0x88
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	4628      	mov	r0, r5
 8015ee8:	f003 f882 	bl	8018ff0 <rmw_validate_namespace>
 8015eec:	4682      	mov	sl, r0
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	f040 80af 	bne.w	8016052 <rcl_node_init+0x20a>
 8015ef4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	f040 80d5 	bne.w	80160a6 <rcl_node_init+0x25e>
 8015efc:	f8d8 3000 	ldr.w	r3, [r8]
 8015f00:	2078      	movs	r0, #120	@ 0x78
 8015f02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015f06:	4798      	blx	r3
 8015f08:	4682      	mov	sl, r0
 8015f0a:	6060      	str	r0, [r4, #4]
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	f000 80cf 	beq.w	80160b0 <rcl_node_init+0x268>
 8015f12:	2200      	movs	r2, #0
 8015f14:	2300      	movs	r3, #0
 8015f16:	a808      	add	r0, sp, #32
 8015f18:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8015f1c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8015f20:	f000 f902 	bl	8016128 <rcl_node_get_default_options>
 8015f24:	a908      	add	r1, sp, #32
 8015f26:	4650      	mov	r0, sl
 8015f28:	2268      	movs	r2, #104	@ 0x68
 8015f2a:	f006 f8ae 	bl	801c08a <memcpy>
 8015f2e:	6861      	ldr	r1, [r4, #4]
 8015f30:	4640      	mov	r0, r8
 8015f32:	6027      	str	r7, [r4, #0]
 8015f34:	f000 f906 	bl	8016144 <rcl_node_options_copy>
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	d158      	bne.n	8015fee <rcl_node_init+0x1a6>
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	f7ea f9d9 	bl	80002f4 <strlen>
 8015f42:	4428      	add	r0, r5
 8015f44:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015f48:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8015f4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	bf0c      	ite	eq
 8015f56:	4b5d      	ldreq	r3, [pc, #372]	@ (80160cc <rcl_node_init+0x284>)
 8015f58:	4b5d      	ldrne	r3, [pc, #372]	@ (80160d0 <rcl_node_init+0x288>)
 8015f5a:	9302      	str	r3, [sp, #8]
 8015f5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f60:	9301      	str	r3, [sp, #4]
 8015f62:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015f66:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015f6a:	f002 fc25 	bl	80187b8 <rcutils_format_string_limit>
 8015f6e:	6823      	ldr	r3, [r4, #0]
 8015f70:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8015f74:	4631      	mov	r1, r6
 8015f76:	6818      	ldr	r0, [r3, #0]
 8015f78:	462a      	mov	r2, r5
 8015f7a:	6866      	ldr	r6, [r4, #4]
 8015f7c:	3028      	adds	r0, #40	@ 0x28
 8015f7e:	f7f9 fe97 	bl	800fcb0 <rmw_create_node>
 8015f82:	6863      	ldr	r3, [r4, #4]
 8015f84:	66b0      	str	r0, [r6, #104]	@ 0x68
 8015f86:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	d032      	beq.n	8015ff2 <rcl_node_init+0x1aa>
 8015f8c:	f7f9 ff20 	bl	800fdd0 <rmw_node_get_graph_guard_condition>
 8015f90:	4682      	mov	sl, r0
 8015f92:	b360      	cbz	r0, 8015fee <rcl_node_init+0x1a6>
 8015f94:	f8d8 3000 	ldr.w	r3, [r8]
 8015f98:	2008      	movs	r0, #8
 8015f9a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015f9e:	6866      	ldr	r6, [r4, #4]
 8015fa0:	4798      	blx	r3
 8015fa2:	6863      	ldr	r3, [r4, #4]
 8015fa4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015fa6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015faa:	f1bb 0f00 	cmp.w	fp, #0
 8015fae:	d020      	beq.n	8015ff2 <rcl_node_init+0x1aa>
 8015fb0:	a806      	add	r0, sp, #24
 8015fb2:	ae23      	add	r6, sp, #140	@ 0x8c
 8015fb4:	f005 f84e 	bl	801b054 <rcl_get_zero_initialized_guard_condition>
 8015fb8:	a806      	add	r0, sp, #24
 8015fba:	6863      	ldr	r3, [r4, #4]
 8015fbc:	46c4      	mov	ip, r8
 8015fbe:	c803      	ldmia	r0, {r0, r1}
 8015fc0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8015fc4:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015fc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015fce:	f8dc 3000 	ldr.w	r3, [ip]
 8015fd2:	6033      	str	r3, [r6, #0]
 8015fd4:	ab28      	add	r3, sp, #160	@ 0xa0
 8015fd6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015fda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015fde:	4651      	mov	r1, sl
 8015fe0:	463a      	mov	r2, r7
 8015fe2:	4670      	mov	r0, lr
 8015fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015fe6:	f005 f88d 	bl	801b104 <rcl_guard_condition_init_from_rmw>
 8015fea:	4682      	mov	sl, r0
 8015fec:	b328      	cbz	r0, 801603a <rcl_node_init+0x1f2>
 8015fee:	6863      	ldr	r3, [r4, #4]
 8015ff0:	b1f3      	cbz	r3, 8016030 <rcl_node_init+0x1e8>
 8015ff2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015ff4:	b128      	cbz	r0, 8016002 <rcl_node_init+0x1ba>
 8015ff6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ffa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ffe:	4798      	blx	r3
 8016000:	6863      	ldr	r3, [r4, #4]
 8016002:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016004:	b110      	cbz	r0, 801600c <rcl_node_init+0x1c4>
 8016006:	f7f9 fe65 	bl	800fcd4 <rmw_destroy_node>
 801600a:	6863      	ldr	r3, [r4, #4]
 801600c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801600e:	b148      	cbz	r0, 8016024 <rcl_node_init+0x1dc>
 8016010:	f005 f8d4 	bl	801b1bc <rcl_guard_condition_fini>
 8016014:	6863      	ldr	r3, [r4, #4]
 8016016:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801601a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801601c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016020:	4798      	blx	r3
 8016022:	6863      	ldr	r3, [r4, #4]
 8016024:	4618      	mov	r0, r3
 8016026:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801602a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801602e:	4798      	blx	r3
 8016030:	2300      	movs	r3, #0
 8016032:	f04f 0a01 	mov.w	sl, #1
 8016036:	e9c4 3300 	strd	r3, r3, [r4]
 801603a:	f1b9 0f00 	cmp.w	r9, #0
 801603e:	d008      	beq.n	8016052 <rcl_node_init+0x20a>
 8016040:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016044:	4628      	mov	r0, r5
 8016046:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801604a:	4798      	blx	r3
 801604c:	e001      	b.n	8016052 <rcl_node_init+0x20a>
 801604e:	f04f 0a0b 	mov.w	sl, #11
 8016052:	4650      	mov	r0, sl
 8016054:	b029      	add	sp, #164	@ 0xa4
 8016056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801605a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801605e:	e7f8      	b.n	8016052 <rcl_node_init+0x20a>
 8016060:	782b      	ldrb	r3, [r5, #0]
 8016062:	2b2f      	cmp	r3, #47	@ 0x2f
 8016064:	f43f af3d 	beq.w	8015ee2 <rcl_node_init+0x9a>
 8016068:	9503      	str	r5, [sp, #12]
 801606a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	4b18      	ldr	r3, [pc, #96]	@ (80160d4 <rcl_node_init+0x28c>)
 8016072:	9302      	str	r3, [sp, #8]
 8016074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016078:	9301      	str	r3, [sp, #4]
 801607a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801607e:	f002 fb9b 	bl	80187b8 <rcutils_format_string_limit>
 8016082:	4605      	mov	r5, r0
 8016084:	b1e0      	cbz	r0, 80160c0 <rcl_node_init+0x278>
 8016086:	2200      	movs	r2, #0
 8016088:	a922      	add	r1, sp, #136	@ 0x88
 801608a:	9222      	str	r2, [sp, #136]	@ 0x88
 801608c:	f002 ffb0 	bl	8018ff0 <rmw_validate_namespace>
 8016090:	4682      	mov	sl, r0
 8016092:	2800      	cmp	r0, #0
 8016094:	d1d4      	bne.n	8016040 <rcl_node_init+0x1f8>
 8016096:	46d9      	mov	r9, fp
 8016098:	e72c      	b.n	8015ef4 <rcl_node_init+0xac>
 801609a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801609e:	4650      	mov	r0, sl
 80160a0:	b029      	add	sp, #164	@ 0xa4
 80160a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80160aa:	f002 ffb3 	bl	8019014 <rmw_namespace_validation_result_string>
 80160ae:	e7c4      	b.n	801603a <rcl_node_init+0x1f2>
 80160b0:	f04f 0a0a 	mov.w	sl, #10
 80160b4:	e7c1      	b.n	801603a <rcl_node_init+0x1f2>
 80160b6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80160ba:	f003 f80b 	bl	80190d4 <rmw_node_name_validation_result_string>
 80160be:	e7c8      	b.n	8016052 <rcl_node_init+0x20a>
 80160c0:	f04f 0a0a 	mov.w	sl, #10
 80160c4:	e7c5      	b.n	8016052 <rcl_node_init+0x20a>
 80160c6:	bf00      	nop
 80160c8:	0801cf60 	.word	0x0801cf60
 80160cc:	0801cfac 	.word	0x0801cfac
 80160d0:	0801cf64 	.word	0x0801cf64
 80160d4:	0801d388 	.word	0x0801d388

080160d8 <rcl_node_is_valid>:
 80160d8:	b130      	cbz	r0, 80160e8 <rcl_node_is_valid+0x10>
 80160da:	6843      	ldr	r3, [r0, #4]
 80160dc:	b123      	cbz	r3, 80160e8 <rcl_node_is_valid+0x10>
 80160de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80160e0:	b113      	cbz	r3, 80160e8 <rcl_node_is_valid+0x10>
 80160e2:	6800      	ldr	r0, [r0, #0]
 80160e4:	f7ff bd18 	b.w	8015b18 <rcl_context_is_valid>
 80160e8:	2000      	movs	r0, #0
 80160ea:	4770      	bx	lr

080160ec <rcl_node_get_name>:
 80160ec:	b120      	cbz	r0, 80160f8 <rcl_node_get_name+0xc>
 80160ee:	6840      	ldr	r0, [r0, #4]
 80160f0:	b110      	cbz	r0, 80160f8 <rcl_node_get_name+0xc>
 80160f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80160f4:	b100      	cbz	r0, 80160f8 <rcl_node_get_name+0xc>
 80160f6:	6880      	ldr	r0, [r0, #8]
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop

080160fc <rcl_node_get_namespace>:
 80160fc:	b120      	cbz	r0, 8016108 <rcl_node_get_namespace+0xc>
 80160fe:	6840      	ldr	r0, [r0, #4]
 8016100:	b110      	cbz	r0, 8016108 <rcl_node_get_namespace+0xc>
 8016102:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016104:	b100      	cbz	r0, 8016108 <rcl_node_get_namespace+0xc>
 8016106:	68c0      	ldr	r0, [r0, #12]
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop

0801610c <rcl_node_get_options>:
 801610c:	b128      	cbz	r0, 801611a <rcl_node_get_options+0xe>
 801610e:	6840      	ldr	r0, [r0, #4]
 8016110:	b118      	cbz	r0, 801611a <rcl_node_get_options+0xe>
 8016112:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8016114:	2b00      	cmp	r3, #0
 8016116:	bf08      	it	eq
 8016118:	2000      	moveq	r0, #0
 801611a:	4770      	bx	lr

0801611c <rcl_node_get_rmw_handle>:
 801611c:	b110      	cbz	r0, 8016124 <rcl_node_get_rmw_handle+0x8>
 801611e:	6840      	ldr	r0, [r0, #4]
 8016120:	b100      	cbz	r0, 8016124 <rcl_node_get_rmw_handle+0x8>
 8016122:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016124:	4770      	bx	lr
 8016126:	bf00      	nop

08016128 <rcl_node_get_default_options>:
 8016128:	b510      	push	{r4, lr}
 801612a:	4604      	mov	r4, r0
 801612c:	2268      	movs	r2, #104	@ 0x68
 801612e:	2100      	movs	r1, #0
 8016130:	f005 fee2 	bl	801bef8 <memset>
 8016134:	4620      	mov	r0, r4
 8016136:	f7f9 fa0d 	bl	800f554 <rcutils_get_default_allocator>
 801613a:	2301      	movs	r3, #1
 801613c:	4620      	mov	r0, r4
 801613e:	7523      	strb	r3, [r4, #20]
 8016140:	bd10      	pop	{r4, pc}
 8016142:	bf00      	nop

08016144 <rcl_node_options_copy>:
 8016144:	2800      	cmp	r0, #0
 8016146:	bf18      	it	ne
 8016148:	4288      	cmpne	r0, r1
 801614a:	d01b      	beq.n	8016184 <rcl_node_options_copy+0x40>
 801614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801614e:	fab1 f681 	clz	r6, r1
 8016152:	460c      	mov	r4, r1
 8016154:	0976      	lsrs	r6, r6, #5
 8016156:	b199      	cbz	r1, 8016180 <rcl_node_options_copy+0x3c>
 8016158:	4605      	mov	r5, r0
 801615a:	8a87      	ldrh	r7, [r0, #20]
 801615c:	4684      	mov	ip, r0
 801615e:	468e      	mov	lr, r1
 8016160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016162:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016166:	682b      	ldr	r3, [r5, #0]
 8016168:	2250      	movs	r2, #80	@ 0x50
 801616a:	f10c 0118 	add.w	r1, ip, #24
 801616e:	f104 0018 	add.w	r0, r4, #24
 8016172:	f8ce 3000 	str.w	r3, [lr]
 8016176:	82a7      	strh	r7, [r4, #20]
 8016178:	f005 ff87 	bl	801c08a <memcpy>
 801617c:	4630      	mov	r0, r6
 801617e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016180:	200b      	movs	r0, #11
 8016182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016184:	200b      	movs	r0, #11
 8016186:	4770      	bx	lr

08016188 <rcl_node_resolve_name>:
 8016188:	b082      	sub	sp, #8
 801618a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618e:	b091      	sub	sp, #68	@ 0x44
 8016190:	ac1a      	add	r4, sp, #104	@ 0x68
 8016192:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8016196:	e884 000c 	stmia.w	r4, {r2, r3}
 801619a:	2800      	cmp	r0, #0
 801619c:	d03d      	beq.n	801621a <rcl_node_resolve_name+0x92>
 801619e:	460c      	mov	r4, r1
 80161a0:	4605      	mov	r5, r0
 80161a2:	f7ff ffb3 	bl	801610c <rcl_node_get_options>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d03a      	beq.n	8016220 <rcl_node_resolve_name+0x98>
 80161aa:	4628      	mov	r0, r5
 80161ac:	f7ff ff9e 	bl	80160ec <rcl_node_get_name>
 80161b0:	4606      	mov	r6, r0
 80161b2:	4628      	mov	r0, r5
 80161b4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80161b6:	f7ff ffa1 	bl	80160fc <rcl_node_get_namespace>
 80161ba:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80161be:	4607      	mov	r7, r0
 80161c0:	46ac      	mov	ip, r5
 80161c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161ca:	f8de 3000 	ldr.w	r3, [lr]
 80161ce:	f8cc 3000 	str.w	r3, [ip]
 80161d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80161d4:	b30b      	cbz	r3, 801621a <rcl_node_resolve_name+0x92>
 80161d6:	4689      	mov	r9, r1
 80161d8:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80161dc:	f002 fc64 	bl	8018aa8 <rcutils_get_zero_initialized_string_map>
 80161e0:	ab10      	add	r3, sp, #64	@ 0x40
 80161e2:	9008      	str	r0, [sp, #32]
 80161e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80161e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80161ec:	2100      	movs	r1, #0
 80161ee:	a808      	add	r0, sp, #32
 80161f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80161f4:	f002 fcce 	bl	8018b94 <rcutils_string_map_init>
 80161f8:	4683      	mov	fp, r0
 80161fa:	b1a0      	cbz	r0, 8016226 <rcl_node_resolve_name+0x9e>
 80161fc:	f7f9 f9c6 	bl	800f58c <rcutils_get_error_string>
 8016200:	f7f9 f9da 	bl	800f5b8 <rcutils_reset_error>
 8016204:	f1bb 0f0a 	cmp.w	fp, #10
 8016208:	bf18      	it	ne
 801620a:	f04f 0b01 	movne.w	fp, #1
 801620e:	4658      	mov	r0, fp
 8016210:	b011      	add	sp, #68	@ 0x44
 8016212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016216:	b002      	add	sp, #8
 8016218:	4770      	bx	lr
 801621a:	f04f 0b0b 	mov.w	fp, #11
 801621e:	e7f6      	b.n	801620e <rcl_node_resolve_name+0x86>
 8016220:	f04f 0b01 	mov.w	fp, #1
 8016224:	e7f3      	b.n	801620e <rcl_node_resolve_name+0x86>
 8016226:	9009      	str	r0, [sp, #36]	@ 0x24
 8016228:	9007      	str	r0, [sp, #28]
 801622a:	a808      	add	r0, sp, #32
 801622c:	f004 ff0c 	bl	801b048 <rcl_get_default_topic_name_substitutions>
 8016230:	4683      	mov	fp, r0
 8016232:	b180      	cbz	r0, 8016256 <rcl_node_resolve_name+0xce>
 8016234:	280a      	cmp	r0, #10
 8016236:	a808      	add	r0, sp, #32
 8016238:	bf18      	it	ne
 801623a:	f04f 0b01 	movne.w	fp, #1
 801623e:	f002 fce9 	bl	8018c14 <rcutils_string_map_fini>
 8016242:	4604      	mov	r4, r0
 8016244:	2800      	cmp	r0, #0
 8016246:	d15b      	bne.n	8016300 <rcl_node_resolve_name+0x178>
 8016248:	4651      	mov	r1, sl
 801624a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801624c:	47c8      	blx	r9
 801624e:	4651      	mov	r1, sl
 8016250:	4620      	mov	r0, r4
 8016252:	47c8      	blx	r9
 8016254:	e7db      	b.n	801620e <rcl_node_resolve_name+0x86>
 8016256:	ab09      	add	r3, sp, #36	@ 0x24
 8016258:	46ec      	mov	ip, sp
 801625a:	9305      	str	r3, [sp, #20]
 801625c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801625e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016262:	682b      	ldr	r3, [r5, #0]
 8016264:	463a      	mov	r2, r7
 8016266:	4631      	mov	r1, r6
 8016268:	4620      	mov	r0, r4
 801626a:	f8cc 3000 	str.w	r3, [ip]
 801626e:	ab08      	add	r3, sp, #32
 8016270:	f004 fd8a 	bl	801ad88 <rcl_expand_topic_name>
 8016274:	4683      	mov	fp, r0
 8016276:	b9d8      	cbnz	r0, 80162b0 <rcl_node_resolve_name+0x128>
 8016278:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801627a:	4602      	mov	r2, r0
 801627c:	9009      	str	r0, [sp, #36]	@ 0x24
 801627e:	a90a      	add	r1, sp, #40	@ 0x28
 8016280:	4620      	mov	r0, r4
 8016282:	f002 fde5 	bl	8018e50 <rmw_validate_full_topic_name>
 8016286:	bb50      	cbnz	r0, 80162de <rcl_node_resolve_name+0x156>
 8016288:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801628a:	2d00      	cmp	r5, #0
 801628c:	d140      	bne.n	8016310 <rcl_node_resolve_name+0x188>
 801628e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016290:	a808      	add	r0, sp, #32
 8016292:	601c      	str	r4, [r3, #0]
 8016294:	f002 fcbe 	bl	8018c14 <rcutils_string_map_fini>
 8016298:	4683      	mov	fp, r0
 801629a:	2800      	cmp	r0, #0
 801629c:	d043      	beq.n	8016326 <rcl_node_resolve_name+0x19e>
 801629e:	f7f9 f975 	bl	800f58c <rcutils_get_error_string>
 80162a2:	46a8      	mov	r8, r5
 80162a4:	f04f 0b01 	mov.w	fp, #1
 80162a8:	462c      	mov	r4, r5
 80162aa:	f7f9 f985 	bl	800f5b8 <rcutils_reset_error>
 80162ae:	e00a      	b.n	80162c6 <rcl_node_resolve_name+0x13e>
 80162b0:	2867      	cmp	r0, #103	@ 0x67
 80162b2:	bf14      	ite	ne
 80162b4:	f04f 0800 	movne.w	r8, #0
 80162b8:	f008 0801 	andeq.w	r8, r8, #1
 80162bc:	9c07      	ldr	r4, [sp, #28]
 80162be:	a808      	add	r0, sp, #32
 80162c0:	f002 fca8 	bl	8018c14 <rcutils_string_map_fini>
 80162c4:	bb50      	cbnz	r0, 801631c <rcl_node_resolve_name+0x194>
 80162c6:	4651      	mov	r1, sl
 80162c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162ca:	47c8      	blx	r9
 80162cc:	4651      	mov	r1, sl
 80162ce:	4620      	mov	r0, r4
 80162d0:	47c8      	blx	r9
 80162d2:	f1b8 0f00 	cmp.w	r8, #0
 80162d6:	bf18      	it	ne
 80162d8:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 80162dc:	e797      	b.n	801620e <rcl_node_resolve_name+0x86>
 80162de:	f7f9 f955 	bl	800f58c <rcutils_get_error_string>
 80162e2:	f7f9 f969 	bl	800f5b8 <rcutils_reset_error>
 80162e6:	a808      	add	r0, sp, #32
 80162e8:	f002 fc94 	bl	8018c14 <rcutils_string_map_fini>
 80162ec:	b998      	cbnz	r0, 8016316 <rcl_node_resolve_name+0x18e>
 80162ee:	4651      	mov	r1, sl
 80162f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162f2:	47c8      	blx	r9
 80162f4:	4651      	mov	r1, sl
 80162f6:	4620      	mov	r0, r4
 80162f8:	f04f 0b01 	mov.w	fp, #1
 80162fc:	47c8      	blx	r9
 80162fe:	e786      	b.n	801620e <rcl_node_resolve_name+0x86>
 8016300:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016304:	f7f9 f942 	bl	800f58c <rcutils_get_error_string>
 8016308:	f7f9 f956 	bl	800f5b8 <rcutils_reset_error>
 801630c:	4644      	mov	r4, r8
 801630e:	e7da      	b.n	80162c6 <rcl_node_resolve_name+0x13e>
 8016310:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8016314:	e7d3      	b.n	80162be <rcl_node_resolve_name+0x136>
 8016316:	46d8      	mov	r8, fp
 8016318:	f04f 0b01 	mov.w	fp, #1
 801631c:	f7f9 f936 	bl	800f58c <rcutils_get_error_string>
 8016320:	f7f9 f94a 	bl	800f5b8 <rcutils_reset_error>
 8016324:	e7cf      	b.n	80162c6 <rcl_node_resolve_name+0x13e>
 8016326:	4651      	mov	r1, sl
 8016328:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801632a:	47c8      	blx	r9
 801632c:	4651      	mov	r1, sl
 801632e:	4658      	mov	r0, fp
 8016330:	47c8      	blx	r9
 8016332:	e76c      	b.n	801620e <rcl_node_resolve_name+0x86>

08016334 <exact_match_lookup>:
 8016334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016336:	f102 0708 	add.w	r7, r2, #8
 801633a:	460b      	mov	r3, r1
 801633c:	b085      	sub	sp, #20
 801633e:	4614      	mov	r4, r2
 8016340:	4606      	mov	r6, r0
 8016342:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016346:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801634a:	4618      	mov	r0, r3
 801634c:	4919      	ldr	r1, [pc, #100]	@ (80163b4 <exact_match_lookup+0x80>)
 801634e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016352:	f002 fa23 	bl	801879c <rcutils_join_path>
 8016356:	7833      	ldrb	r3, [r6, #0]
 8016358:	4605      	mov	r5, r0
 801635a:	2b2f      	cmp	r3, #47	@ 0x2f
 801635c:	d023      	beq.n	80163a6 <exact_match_lookup+0x72>
 801635e:	f104 030c 	add.w	r3, r4, #12
 8016362:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016366:	e88d 0003 	stmia.w	sp, {r0, r1}
 801636a:	1c70      	adds	r0, r6, #1
 801636c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016370:	f002 fa1a 	bl	80187a8 <rcutils_to_native_path>
 8016374:	4606      	mov	r6, r0
 8016376:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801637a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801637e:	4631      	mov	r1, r6
 8016380:	4628      	mov	r0, r5
 8016382:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016386:	f002 fa09 	bl	801879c <rcutils_join_path>
 801638a:	4603      	mov	r3, r0
 801638c:	4630      	mov	r0, r6
 801638e:	6862      	ldr	r2, [r4, #4]
 8016390:	461e      	mov	r6, r3
 8016392:	6921      	ldr	r1, [r4, #16]
 8016394:	4790      	blx	r2
 8016396:	4628      	mov	r0, r5
 8016398:	4635      	mov	r5, r6
 801639a:	6863      	ldr	r3, [r4, #4]
 801639c:	6921      	ldr	r1, [r4, #16]
 801639e:	4798      	blx	r3
 80163a0:	4628      	mov	r0, r5
 80163a2:	b005      	add	sp, #20
 80163a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163a6:	7873      	ldrb	r3, [r6, #1]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d1d8      	bne.n	801635e <exact_match_lookup+0x2a>
 80163ac:	4628      	mov	r0, r5
 80163ae:	b005      	add	sp, #20
 80163b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163b2:	bf00      	nop
 80163b4:	0801d3d0 	.word	0x0801d3d0

080163b8 <rcl_get_secure_root>:
 80163b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163bc:	b085      	sub	sp, #20
 80163be:	b168      	cbz	r0, 80163dc <rcl_get_secure_root+0x24>
 80163c0:	4607      	mov	r7, r0
 80163c2:	4608      	mov	r0, r1
 80163c4:	460c      	mov	r4, r1
 80163c6:	f7f9 f8d3 	bl	800f570 <rcutils_allocator_is_valid>
 80163ca:	b138      	cbz	r0, 80163dc <rcl_get_secure_root+0x24>
 80163cc:	2300      	movs	r3, #0
 80163ce:	482d      	ldr	r0, [pc, #180]	@ (8016484 <rcl_get_secure_root+0xcc>)
 80163d0:	a903      	add	r1, sp, #12
 80163d2:	9303      	str	r3, [sp, #12]
 80163d4:	f002 f9c8 	bl	8018768 <rcutils_get_env>
 80163d8:	4605      	mov	r5, r0
 80163da:	b120      	cbz	r0, 80163e6 <rcl_get_secure_root+0x2e>
 80163dc:	2500      	movs	r5, #0
 80163de:	4628      	mov	r0, r5
 80163e0:	b005      	add	sp, #20
 80163e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163e6:	9b03      	ldr	r3, [sp, #12]
 80163e8:	781a      	ldrb	r2, [r3, #0]
 80163ea:	2a00      	cmp	r2, #0
 80163ec:	d0f6      	beq.n	80163dc <rcl_get_secure_root+0x24>
 80163ee:	f104 090c 	add.w	r9, r4, #12
 80163f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80163f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80163fa:	4618      	mov	r0, r3
 80163fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016400:	f002 fb14 	bl	8018a2c <rcutils_strdup>
 8016404:	4680      	mov	r8, r0
 8016406:	2800      	cmp	r0, #0
 8016408:	d0e8      	beq.n	80163dc <rcl_get_secure_root+0x24>
 801640a:	a903      	add	r1, sp, #12
 801640c:	481e      	ldr	r0, [pc, #120]	@ (8016488 <rcl_get_secure_root+0xd0>)
 801640e:	9503      	str	r5, [sp, #12]
 8016410:	f002 f9aa 	bl	8018768 <rcutils_get_env>
 8016414:	b160      	cbz	r0, 8016430 <rcl_get_secure_root+0x78>
 8016416:	2600      	movs	r6, #0
 8016418:	4630      	mov	r0, r6
 801641a:	6863      	ldr	r3, [r4, #4]
 801641c:	6921      	ldr	r1, [r4, #16]
 801641e:	4798      	blx	r3
 8016420:	4640      	mov	r0, r8
 8016422:	6863      	ldr	r3, [r4, #4]
 8016424:	6921      	ldr	r1, [r4, #16]
 8016426:	4798      	blx	r3
 8016428:	4628      	mov	r0, r5
 801642a:	b005      	add	sp, #20
 801642c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016430:	9b03      	ldr	r3, [sp, #12]
 8016432:	781e      	ldrb	r6, [r3, #0]
 8016434:	b1f6      	cbz	r6, 8016474 <rcl_get_secure_root+0xbc>
 8016436:	e899 0003 	ldmia.w	r9, {r0, r1}
 801643a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801643e:	4618      	mov	r0, r3
 8016440:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016444:	f002 faf2 	bl	8018a2c <rcutils_strdup>
 8016448:	4606      	mov	r6, r0
 801644a:	2800      	cmp	r0, #0
 801644c:	d0e3      	beq.n	8016416 <rcl_get_secure_root+0x5e>
 801644e:	4622      	mov	r2, r4
 8016450:	4641      	mov	r1, r8
 8016452:	f7ff ff6f 	bl	8016334 <exact_match_lookup>
 8016456:	4605      	mov	r5, r0
 8016458:	2d00      	cmp	r5, #0
 801645a:	d0dd      	beq.n	8016418 <rcl_get_secure_root+0x60>
 801645c:	4628      	mov	r0, r5
 801645e:	f002 f99b 	bl	8018798 <rcutils_is_directory>
 8016462:	4603      	mov	r3, r0
 8016464:	2800      	cmp	r0, #0
 8016466:	d1d7      	bne.n	8016418 <rcl_get_secure_root+0x60>
 8016468:	4628      	mov	r0, r5
 801646a:	6921      	ldr	r1, [r4, #16]
 801646c:	461d      	mov	r5, r3
 801646e:	6863      	ldr	r3, [r4, #4]
 8016470:	4798      	blx	r3
 8016472:	e7d1      	b.n	8016418 <rcl_get_secure_root+0x60>
 8016474:	4622      	mov	r2, r4
 8016476:	4638      	mov	r0, r7
 8016478:	4641      	mov	r1, r8
 801647a:	f7ff ff5b 	bl	8016334 <exact_match_lookup>
 801647e:	4605      	mov	r5, r0
 8016480:	e7ea      	b.n	8016458 <rcl_get_secure_root+0xa0>
 8016482:	bf00      	nop
 8016484:	0801d3dc 	.word	0x0801d3dc
 8016488:	0801d3f4 	.word	0x0801d3f4

0801648c <rcl_get_security_options_from_environment>:
 801648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016490:	b082      	sub	sp, #8
 8016492:	2300      	movs	r3, #0
 8016494:	4606      	mov	r6, r0
 8016496:	460f      	mov	r7, r1
 8016498:	4821      	ldr	r0, [pc, #132]	@ (8016520 <rcl_get_security_options_from_environment+0x94>)
 801649a:	a901      	add	r1, sp, #4
 801649c:	4690      	mov	r8, r2
 801649e:	9301      	str	r3, [sp, #4]
 80164a0:	f002 f962 	bl	8018768 <rcutils_get_env>
 80164a4:	b120      	cbz	r0, 80164b0 <rcl_get_security_options_from_environment+0x24>
 80164a6:	2501      	movs	r5, #1
 80164a8:	4628      	mov	r0, r5
 80164aa:	b002      	add	sp, #8
 80164ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164b0:	4604      	mov	r4, r0
 80164b2:	491c      	ldr	r1, [pc, #112]	@ (8016524 <rcl_get_security_options_from_environment+0x98>)
 80164b4:	9801      	ldr	r0, [sp, #4]
 80164b6:	f7e9 ff13 	bl	80002e0 <strcmp>
 80164ba:	4605      	mov	r5, r0
 80164bc:	b9f0      	cbnz	r0, 80164fc <rcl_get_security_options_from_environment+0x70>
 80164be:	9001      	str	r0, [sp, #4]
 80164c0:	f1b8 0f00 	cmp.w	r8, #0
 80164c4:	d021      	beq.n	801650a <rcl_get_security_options_from_environment+0x7e>
 80164c6:	a901      	add	r1, sp, #4
 80164c8:	4817      	ldr	r0, [pc, #92]	@ (8016528 <rcl_get_security_options_from_environment+0x9c>)
 80164ca:	f002 f94d 	bl	8018768 <rcutils_get_env>
 80164ce:	2800      	cmp	r0, #0
 80164d0:	d1e9      	bne.n	80164a6 <rcl_get_security_options_from_environment+0x1a>
 80164d2:	4916      	ldr	r1, [pc, #88]	@ (801652c <rcl_get_security_options_from_environment+0xa0>)
 80164d4:	9801      	ldr	r0, [sp, #4]
 80164d6:	f7e9 ff03 	bl	80002e0 <strcmp>
 80164da:	4603      	mov	r3, r0
 80164dc:	4639      	mov	r1, r7
 80164de:	4630      	mov	r0, r6
 80164e0:	fab3 f383 	clz	r3, r3
 80164e4:	095b      	lsrs	r3, r3, #5
 80164e6:	f888 3000 	strb.w	r3, [r8]
 80164ea:	f7ff ff65 	bl	80163b8 <rcl_get_secure_root>
 80164ee:	b170      	cbz	r0, 801650e <rcl_get_security_options_from_environment+0x82>
 80164f0:	f8c8 0004 	str.w	r0, [r8, #4]
 80164f4:	4628      	mov	r0, r5
 80164f6:	b002      	add	sp, #8
 80164f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164fc:	4625      	mov	r5, r4
 80164fe:	f888 4000 	strb.w	r4, [r8]
 8016502:	4628      	mov	r0, r5
 8016504:	b002      	add	sp, #8
 8016506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801650a:	250b      	movs	r5, #11
 801650c:	e7cc      	b.n	80164a8 <rcl_get_security_options_from_environment+0x1c>
 801650e:	f898 5000 	ldrb.w	r5, [r8]
 8016512:	f1a5 0501 	sub.w	r5, r5, #1
 8016516:	fab5 f585 	clz	r5, r5
 801651a:	096d      	lsrs	r5, r5, #5
 801651c:	e7c4      	b.n	80164a8 <rcl_get_security_options_from_environment+0x1c>
 801651e:	bf00      	nop
 8016520:	0801d394 	.word	0x0801d394
 8016524:	0801d3a8 	.word	0x0801d3a8
 8016528:	0801d3b0 	.word	0x0801d3b0
 801652c:	0801d3c8 	.word	0x0801d3c8

08016530 <rcl_service_get_rmw_handle>:
 8016530:	b118      	cbz	r0, 801653a <rcl_service_get_rmw_handle+0xa>
 8016532:	6800      	ldr	r0, [r0, #0]
 8016534:	b108      	cbz	r0, 801653a <rcl_service_get_rmw_handle+0xa>
 8016536:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801653a:	4770      	bx	lr

0801653c <rcl_take_request>:
 801653c:	b570      	push	{r4, r5, r6, lr}
 801653e:	468e      	mov	lr, r1
 8016540:	b08c      	sub	sp, #48	@ 0x30
 8016542:	460c      	mov	r4, r1
 8016544:	4616      	mov	r6, r2
 8016546:	f10d 0c18 	add.w	ip, sp, #24
 801654a:	4605      	mov	r5, r0
 801654c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016550:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016554:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016558:	e88c 0003 	stmia.w	ip, {r0, r1}
 801655c:	b30d      	cbz	r5, 80165a2 <rcl_take_request+0x66>
 801655e:	682b      	ldr	r3, [r5, #0]
 8016560:	b1fb      	cbz	r3, 80165a2 <rcl_take_request+0x66>
 8016562:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016566:	b1e0      	cbz	r0, 80165a2 <rcl_take_request+0x66>
 8016568:	b336      	cbz	r6, 80165b8 <rcl_take_request+0x7c>
 801656a:	2300      	movs	r3, #0
 801656c:	4632      	mov	r2, r6
 801656e:	a902      	add	r1, sp, #8
 8016570:	f88d 3007 	strb.w	r3, [sp, #7]
 8016574:	f10d 0307 	add.w	r3, sp, #7
 8016578:	f002 ffce 	bl	8019518 <rmw_take_request>
 801657c:	4605      	mov	r5, r0
 801657e:	b198      	cbz	r0, 80165a8 <rcl_take_request+0x6c>
 8016580:	280a      	cmp	r0, #10
 8016582:	bf18      	it	ne
 8016584:	2501      	movne	r5, #1
 8016586:	f10d 0e18 	add.w	lr, sp, #24
 801658a:	46a4      	mov	ip, r4
 801658c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016594:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016598:	e88c 0003 	stmia.w	ip, {r0, r1}
 801659c:	4628      	mov	r0, r5
 801659e:	b00c      	add	sp, #48	@ 0x30
 80165a0:	bd70      	pop	{r4, r5, r6, pc}
 80165a2:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80165a6:	e7ee      	b.n	8016586 <rcl_take_request+0x4a>
 80165a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80165ac:	f240 2359 	movw	r3, #601	@ 0x259
 80165b0:	2a00      	cmp	r2, #0
 80165b2:	bf08      	it	eq
 80165b4:	461d      	moveq	r5, r3
 80165b6:	e7e6      	b.n	8016586 <rcl_take_request+0x4a>
 80165b8:	250b      	movs	r5, #11
 80165ba:	e7e4      	b.n	8016586 <rcl_take_request+0x4a>

080165bc <rcl_send_response>:
 80165bc:	b170      	cbz	r0, 80165dc <rcl_send_response+0x20>
 80165be:	6800      	ldr	r0, [r0, #0]
 80165c0:	b160      	cbz	r0, 80165dc <rcl_send_response+0x20>
 80165c2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80165c6:	b148      	cbz	r0, 80165dc <rcl_send_response+0x20>
 80165c8:	b169      	cbz	r1, 80165e6 <rcl_send_response+0x2a>
 80165ca:	b510      	push	{r4, lr}
 80165cc:	b14a      	cbz	r2, 80165e2 <rcl_send_response+0x26>
 80165ce:	f003 f801 	bl	80195d4 <rmw_send_response>
 80165d2:	b110      	cbz	r0, 80165da <rcl_send_response+0x1e>
 80165d4:	2802      	cmp	r0, #2
 80165d6:	bf18      	it	ne
 80165d8:	2001      	movne	r0, #1
 80165da:	bd10      	pop	{r4, pc}
 80165dc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80165e0:	4770      	bx	lr
 80165e2:	200b      	movs	r0, #11
 80165e4:	bd10      	pop	{r4, pc}
 80165e6:	200b      	movs	r0, #11
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop

080165ec <rcl_service_is_valid>:
 80165ec:	b130      	cbz	r0, 80165fc <rcl_service_is_valid+0x10>
 80165ee:	6800      	ldr	r0, [r0, #0]
 80165f0:	b120      	cbz	r0, 80165fc <rcl_service_is_valid+0x10>
 80165f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80165f6:	3800      	subs	r0, #0
 80165f8:	bf18      	it	ne
 80165fa:	2001      	movne	r0, #1
 80165fc:	4770      	bx	lr
 80165fe:	bf00      	nop

08016600 <rcl_take>:
 8016600:	2800      	cmp	r0, #0
 8016602:	d049      	beq.n	8016698 <rcl_take+0x98>
 8016604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016608:	4615      	mov	r5, r2
 801660a:	6802      	ldr	r2, [r0, #0]
 801660c:	b0a4      	sub	sp, #144	@ 0x90
 801660e:	4604      	mov	r4, r0
 8016610:	2a00      	cmp	r2, #0
 8016612:	d039      	beq.n	8016688 <rcl_take+0x88>
 8016614:	461f      	mov	r7, r3
 8016616:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801661a:	b3ab      	cbz	r3, 8016688 <rcl_take+0x88>
 801661c:	460e      	mov	r6, r1
 801661e:	2900      	cmp	r1, #0
 8016620:	d038      	beq.n	8016694 <rcl_take+0x94>
 8016622:	2d00      	cmp	r5, #0
 8016624:	d03c      	beq.n	80166a0 <rcl_take+0xa0>
 8016626:	a802      	add	r0, sp, #8
 8016628:	f04f 0800 	mov.w	r8, #0
 801662c:	f002 fc08 	bl	8018e40 <rmw_get_zero_initialized_message_info>
 8016630:	f10d 0c08 	add.w	ip, sp, #8
 8016634:	46ae      	mov	lr, r5
 8016636:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801663a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801663e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016642:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016646:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801664a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801664e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8016652:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8016656:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801665a:	462b      	mov	r3, r5
 801665c:	6820      	ldr	r0, [r4, #0]
 801665e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8016662:	4631      	mov	r1, r6
 8016664:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016668:	9700      	str	r7, [sp, #0]
 801666a:	f003 f857 	bl	801971c <rmw_take_with_info>
 801666e:	4603      	mov	r3, r0
 8016670:	b9c0      	cbnz	r0, 80166a4 <rcl_take+0xa4>
 8016672:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8016676:	f240 1291 	movw	r2, #401	@ 0x191
 801667a:	2900      	cmp	r1, #0
 801667c:	bf08      	it	eq
 801667e:	4613      	moveq	r3, r2
 8016680:	4618      	mov	r0, r3
 8016682:	b024      	add	sp, #144	@ 0x90
 8016684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016688:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801668c:	4618      	mov	r0, r3
 801668e:	b024      	add	sp, #144	@ 0x90
 8016690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016694:	230b      	movs	r3, #11
 8016696:	e7f3      	b.n	8016680 <rcl_take+0x80>
 8016698:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801669c:	4618      	mov	r0, r3
 801669e:	4770      	bx	lr
 80166a0:	ad14      	add	r5, sp, #80	@ 0x50
 80166a2:	e7c0      	b.n	8016626 <rcl_take+0x26>
 80166a4:	f7ff fa1a 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 80166a8:	4603      	mov	r3, r0
 80166aa:	e7e9      	b.n	8016680 <rcl_take+0x80>

080166ac <rcl_subscription_get_rmw_handle>:
 80166ac:	b118      	cbz	r0, 80166b6 <rcl_subscription_get_rmw_handle+0xa>
 80166ae:	6800      	ldr	r0, [r0, #0]
 80166b0:	b108      	cbz	r0, 80166b6 <rcl_subscription_get_rmw_handle+0xa>
 80166b2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80166b6:	4770      	bx	lr

080166b8 <rcl_subscription_is_valid>:
 80166b8:	b130      	cbz	r0, 80166c8 <rcl_subscription_is_valid+0x10>
 80166ba:	6800      	ldr	r0, [r0, #0]
 80166bc:	b120      	cbz	r0, 80166c8 <rcl_subscription_is_valid+0x10>
 80166be:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80166c2:	3800      	subs	r0, #0
 80166c4:	bf18      	it	ne
 80166c6:	2001      	movne	r0, #1
 80166c8:	4770      	bx	lr
 80166ca:	bf00      	nop

080166cc <rcl_get_system_time>:
 80166cc:	4608      	mov	r0, r1
 80166ce:	f7f8 bf8f 	b.w	800f5f0 <rcutils_system_time_now>
 80166d2:	bf00      	nop

080166d4 <rcl_get_steady_time>:
 80166d4:	4608      	mov	r0, r1
 80166d6:	f7f8 bfb1 	b.w	800f63c <rcutils_steady_time_now>
 80166da:	bf00      	nop

080166dc <rcl_get_ros_time>:
 80166dc:	7a03      	ldrb	r3, [r0, #8]
 80166de:	b510      	push	{r4, lr}
 80166e0:	460c      	mov	r4, r1
 80166e2:	b143      	cbz	r3, 80166f6 <rcl_get_ros_time+0x1a>
 80166e4:	2105      	movs	r1, #5
 80166e6:	f001 ff9b 	bl	8018620 <__atomic_load_8>
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	2000      	movs	r0, #0
 80166f0:	e9c4 2300 	strd	r2, r3, [r4]
 80166f4:	bd10      	pop	{r4, pc}
 80166f6:	4608      	mov	r0, r1
 80166f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166fc:	f7f8 bf78 	b.w	800f5f0 <rcutils_system_time_now>

08016700 <rcl_clock_init>:
 8016700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016702:	4605      	mov	r5, r0
 8016704:	4610      	mov	r0, r2
 8016706:	4614      	mov	r4, r2
 8016708:	460e      	mov	r6, r1
 801670a:	f7f8 ff31 	bl	800f570 <rcutils_allocator_is_valid>
 801670e:	b128      	cbz	r0, 801671c <rcl_clock_init+0x1c>
 8016710:	2d03      	cmp	r5, #3
 8016712:	d803      	bhi.n	801671c <rcl_clock_init+0x1c>
 8016714:	e8df f005 	tbb	[pc, r5]
 8016718:	0659301f 	.word	0x0659301f
 801671c:	f04f 0c0b 	mov.w	ip, #11
 8016720:	4660      	mov	r0, ip
 8016722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016724:	2c00      	cmp	r4, #0
 8016726:	d0f9      	beq.n	801671c <rcl_clock_init+0x1c>
 8016728:	fab6 f386 	clz	r3, r6
 801672c:	095b      	lsrs	r3, r3, #5
 801672e:	2e00      	cmp	r6, #0
 8016730:	d0f4      	beq.n	801671c <rcl_clock_init+0x1c>
 8016732:	6133      	str	r3, [r6, #16]
 8016734:	469c      	mov	ip, r3
 8016736:	f106 0514 	add.w	r5, r6, #20
 801673a:	4f32      	ldr	r7, [pc, #200]	@ (8016804 <rcl_clock_init+0x104>)
 801673c:	f04f 0e03 	mov.w	lr, #3
 8016740:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016748:	6823      	ldr	r3, [r4, #0]
 801674a:	4660      	mov	r0, ip
 801674c:	602b      	str	r3, [r5, #0]
 801674e:	60f7      	str	r7, [r6, #12]
 8016750:	f886 e000 	strb.w	lr, [r6]
 8016754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016756:	2e00      	cmp	r6, #0
 8016758:	d0e0      	beq.n	801671c <rcl_clock_init+0x1c>
 801675a:	2300      	movs	r3, #0
 801675c:	f106 0514 	add.w	r5, r6, #20
 8016760:	7033      	strb	r3, [r6, #0]
 8016762:	469c      	mov	ip, r3
 8016764:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016768:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801676c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801676e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	4660      	mov	r0, ip
 8016774:	602b      	str	r3, [r5, #0]
 8016776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016778:	2c00      	cmp	r4, #0
 801677a:	d0cf      	beq.n	801671c <rcl_clock_init+0x1c>
 801677c:	fab6 f586 	clz	r5, r6
 8016780:	096d      	lsrs	r5, r5, #5
 8016782:	2e00      	cmp	r6, #0
 8016784:	d0ca      	beq.n	801671c <rcl_clock_init+0x1c>
 8016786:	46a6      	mov	lr, r4
 8016788:	7035      	strb	r5, [r6, #0]
 801678a:	f106 0c14 	add.w	ip, r6, #20
 801678e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016792:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016796:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801679a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801679e:	f8de 3000 	ldr.w	r3, [lr]
 80167a2:	2010      	movs	r0, #16
 80167a4:	f8cc 3000 	str.w	r3, [ip]
 80167a8:	6823      	ldr	r3, [r4, #0]
 80167aa:	6921      	ldr	r1, [r4, #16]
 80167ac:	4798      	blx	r3
 80167ae:	6130      	str	r0, [r6, #16]
 80167b0:	b320      	cbz	r0, 80167fc <rcl_clock_init+0xfc>
 80167b2:	2200      	movs	r2, #0
 80167b4:	2300      	movs	r3, #0
 80167b6:	46ac      	mov	ip, r5
 80167b8:	7205      	strb	r5, [r0, #8]
 80167ba:	e9c0 2300 	strd	r2, r3, [r0]
 80167be:	4a12      	ldr	r2, [pc, #72]	@ (8016808 <rcl_clock_init+0x108>)
 80167c0:	2301      	movs	r3, #1
 80167c2:	4660      	mov	r0, ip
 80167c4:	60f2      	str	r2, [r6, #12]
 80167c6:	7033      	strb	r3, [r6, #0]
 80167c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167ca:	2c00      	cmp	r4, #0
 80167cc:	d0a6      	beq.n	801671c <rcl_clock_init+0x1c>
 80167ce:	fab6 f386 	clz	r3, r6
 80167d2:	095b      	lsrs	r3, r3, #5
 80167d4:	2e00      	cmp	r6, #0
 80167d6:	d0a1      	beq.n	801671c <rcl_clock_init+0x1c>
 80167d8:	6133      	str	r3, [r6, #16]
 80167da:	469c      	mov	ip, r3
 80167dc:	f106 0514 	add.w	r5, r6, #20
 80167e0:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801680c <rcl_clock_init+0x10c>
 80167e4:	2702      	movs	r7, #2
 80167e6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80167ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167ee:	6823      	ldr	r3, [r4, #0]
 80167f0:	4660      	mov	r0, ip
 80167f2:	602b      	str	r3, [r5, #0]
 80167f4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80167f8:	7037      	strb	r7, [r6, #0]
 80167fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167fc:	f04f 0c0a 	mov.w	ip, #10
 8016800:	e78e      	b.n	8016720 <rcl_clock_init+0x20>
 8016802:	bf00      	nop
 8016804:	080166d5 	.word	0x080166d5
 8016808:	080166dd 	.word	0x080166dd
 801680c:	080166cd 	.word	0x080166cd

08016810 <rcl_clock_get_now>:
 8016810:	b140      	cbz	r0, 8016824 <rcl_clock_get_now+0x14>
 8016812:	b139      	cbz	r1, 8016824 <rcl_clock_get_now+0x14>
 8016814:	7803      	ldrb	r3, [r0, #0]
 8016816:	b11b      	cbz	r3, 8016820 <rcl_clock_get_now+0x10>
 8016818:	68c3      	ldr	r3, [r0, #12]
 801681a:	b10b      	cbz	r3, 8016820 <rcl_clock_get_now+0x10>
 801681c:	6900      	ldr	r0, [r0, #16]
 801681e:	4718      	bx	r3
 8016820:	2001      	movs	r0, #1
 8016822:	4770      	bx	lr
 8016824:	200b      	movs	r0, #11
 8016826:	4770      	bx	lr

08016828 <rcl_clock_add_jump_callback>:
 8016828:	b082      	sub	sp, #8
 801682a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801682e:	a906      	add	r1, sp, #24
 8016830:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 8016834:	e881 000c 	stmia.w	r1, {r2, r3}
 8016838:	b330      	cbz	r0, 8016888 <rcl_clock_add_jump_callback+0x60>
 801683a:	4604      	mov	r4, r0
 801683c:	3014      	adds	r0, #20
 801683e:	f7f8 fe97 	bl	800f570 <rcutils_allocator_is_valid>
 8016842:	b30d      	cbz	r5, 8016888 <rcl_clock_add_jump_callback+0x60>
 8016844:	f080 0301 	eor.w	r3, r0, #1
 8016848:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801684c:	d11c      	bne.n	8016888 <rcl_clock_add_jump_callback+0x60>
 801684e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016850:	2a00      	cmp	r2, #0
 8016852:	db19      	blt.n	8016888 <rcl_clock_add_jump_callback+0x60>
 8016854:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8016858:	2901      	cmp	r1, #1
 801685a:	f172 0200 	sbcs.w	r2, r2, #0
 801685e:	da13      	bge.n	8016888 <rcl_clock_add_jump_callback+0x60>
 8016860:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016864:	2f00      	cmp	r7, #0
 8016866:	d040      	beq.n	80168ea <rcl_clock_add_jump_callback+0xc2>
 8016868:	4602      	mov	r2, r0
 801686a:	e003      	b.n	8016874 <rcl_clock_add_jump_callback+0x4c>
 801686c:	42bb      	cmp	r3, r7
 801686e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8016872:	d010      	beq.n	8016896 <rcl_clock_add_jump_callback+0x6e>
 8016874:	6811      	ldr	r1, [r2, #0]
 8016876:	3301      	adds	r3, #1
 8016878:	42a9      	cmp	r1, r5
 801687a:	d1f7      	bne.n	801686c <rcl_clock_add_jump_callback+0x44>
 801687c:	6a11      	ldr	r1, [r2, #32]
 801687e:	42b1      	cmp	r1, r6
 8016880:	d1f4      	bne.n	801686c <rcl_clock_add_jump_callback+0x44>
 8016882:	f04f 0e01 	mov.w	lr, #1
 8016886:	e001      	b.n	801688c <rcl_clock_add_jump_callback+0x64>
 8016888:	f04f 0e0b 	mov.w	lr, #11
 801688c:	4670      	mov	r0, lr
 801688e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016892:	b002      	add	sp, #8
 8016894:	4770      	bx	lr
 8016896:	3301      	adds	r3, #1
 8016898:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801689c:	00d9      	lsls	r1, r3, #3
 801689e:	69e3      	ldr	r3, [r4, #28]
 80168a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80168a2:	4798      	blx	r3
 80168a4:	b1f0      	cbz	r0, 80168e4 <rcl_clock_add_jump_callback+0xbc>
 80168a6:	68a3      	ldr	r3, [r4, #8]
 80168a8:	f10d 0c18 	add.w	ip, sp, #24
 80168ac:	6060      	str	r0, [r4, #4]
 80168ae:	f04f 0e00 	mov.w	lr, #0
 80168b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80168b6:	f103 0801 	add.w	r8, r3, #1
 80168ba:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 80168be:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80168c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80168c6:	f105 0708 	add.w	r7, r5, #8
 80168ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80168cc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80168d0:	e887 0003 	stmia.w	r7, {r0, r1}
 80168d4:	4670      	mov	r0, lr
 80168d6:	622e      	str	r6, [r5, #32]
 80168d8:	f8c4 8008 	str.w	r8, [r4, #8]
 80168dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168e0:	b002      	add	sp, #8
 80168e2:	4770      	bx	lr
 80168e4:	f04f 0e0a 	mov.w	lr, #10
 80168e8:	e7d0      	b.n	801688c <rcl_clock_add_jump_callback+0x64>
 80168ea:	2128      	movs	r1, #40	@ 0x28
 80168ec:	e7d7      	b.n	801689e <rcl_clock_add_jump_callback+0x76>
 80168ee:	bf00      	nop

080168f0 <rcl_clock_remove_jump_callback>:
 80168f0:	2800      	cmp	r0, #0
 80168f2:	d05f      	beq.n	80169b4 <rcl_clock_remove_jump_callback+0xc4>
 80168f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168f8:	4605      	mov	r5, r0
 80168fa:	3014      	adds	r0, #20
 80168fc:	460f      	mov	r7, r1
 80168fe:	4692      	mov	sl, r2
 8016900:	f7f8 fe36 	bl	800f570 <rcutils_allocator_is_valid>
 8016904:	f080 0001 	eor.w	r0, r0, #1
 8016908:	b2c0      	uxtb	r0, r0
 801690a:	2800      	cmp	r0, #0
 801690c:	d13f      	bne.n	801698e <rcl_clock_remove_jump_callback+0x9e>
 801690e:	2f00      	cmp	r7, #0
 8016910:	d03d      	beq.n	801698e <rcl_clock_remove_jump_callback+0x9e>
 8016912:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8016916:	f1b8 0f00 	cmp.w	r8, #0
 801691a:	d00c      	beq.n	8016936 <rcl_clock_remove_jump_callback+0x46>
 801691c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016920:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8016924:	464c      	mov	r4, r9
 8016926:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	42bb      	cmp	r3, r7
 801692e:	d005      	beq.n	801693c <rcl_clock_remove_jump_callback+0x4c>
 8016930:	3428      	adds	r4, #40	@ 0x28
 8016932:	42a6      	cmp	r6, r4
 8016934:	d1f9      	bne.n	801692a <rcl_clock_remove_jump_callback+0x3a>
 8016936:	2001      	movs	r0, #1
 8016938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801693c:	6a23      	ldr	r3, [r4, #32]
 801693e:	3428      	adds	r4, #40	@ 0x28
 8016940:	42a6      	cmp	r6, r4
 8016942:	d02f      	beq.n	80169a4 <rcl_clock_remove_jump_callback+0xb4>
 8016944:	4553      	cmp	r3, sl
 8016946:	d1f0      	bne.n	801692a <rcl_clock_remove_jump_callback+0x3a>
 8016948:	46a6      	mov	lr, r4
 801694a:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801694e:	3428      	adds	r4, #40	@ 0x28
 8016950:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016958:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801695c:	42a6      	cmp	r6, r4
 801695e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016962:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016966:	e88c 0003 	stmia.w	ip, {r0, r1}
 801696a:	d1ed      	bne.n	8016948 <rcl_clock_remove_jump_callback+0x58>
 801696c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8016970:	60ac      	str	r4, [r5, #8]
 8016972:	b17c      	cbz	r4, 8016994 <rcl_clock_remove_jump_callback+0xa4>
 8016974:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016978:	69eb      	ldr	r3, [r5, #28]
 801697a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801697c:	4648      	mov	r0, r9
 801697e:	00e1      	lsls	r1, r4, #3
 8016980:	4798      	blx	r3
 8016982:	4603      	mov	r3, r0
 8016984:	b1c0      	cbz	r0, 80169b8 <rcl_clock_remove_jump_callback+0xc8>
 8016986:	2000      	movs	r0, #0
 8016988:	606b      	str	r3, [r5, #4]
 801698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801698e:	200b      	movs	r0, #11
 8016990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016994:	4648      	mov	r0, r9
 8016996:	69ab      	ldr	r3, [r5, #24]
 8016998:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801699a:	4798      	blx	r3
 801699c:	4620      	mov	r0, r4
 801699e:	606c      	str	r4, [r5, #4]
 80169a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169a4:	4553      	cmp	r3, sl
 80169a6:	d1c6      	bne.n	8016936 <rcl_clock_remove_jump_callback+0x46>
 80169a8:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80169ac:	60ac      	str	r4, [r5, #8]
 80169ae:	2c00      	cmp	r4, #0
 80169b0:	d1e0      	bne.n	8016974 <rcl_clock_remove_jump_callback+0x84>
 80169b2:	e7ef      	b.n	8016994 <rcl_clock_remove_jump_callback+0xa4>
 80169b4:	200b      	movs	r0, #11
 80169b6:	4770      	bx	lr
 80169b8:	200a      	movs	r0, #10
 80169ba:	e7e9      	b.n	8016990 <rcl_clock_remove_jump_callback+0xa0>

080169bc <_rcl_timer_time_jump>:
 80169bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169c0:	4605      	mov	r5, r0
 80169c2:	b084      	sub	sp, #16
 80169c4:	4614      	mov	r4, r2
 80169c6:	b131      	cbz	r1, 80169d6 <_rcl_timer_time_jump+0x1a>
 80169c8:	7803      	ldrb	r3, [r0, #0]
 80169ca:	3b02      	subs	r3, #2
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d93f      	bls.n	8016a50 <_rcl_timer_time_jump+0x94>
 80169d0:	b004      	add	sp, #16
 80169d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169d6:	6813      	ldr	r3, [r2, #0]
 80169d8:	a902      	add	r1, sp, #8
 80169da:	6818      	ldr	r0, [r3, #0]
 80169dc:	f7ff ff18 	bl	8016810 <rcl_clock_get_now>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d1f5      	bne.n	80169d0 <_rcl_timer_time_jump+0x14>
 80169e4:	6820      	ldr	r0, [r4, #0]
 80169e6:	2105      	movs	r1, #5
 80169e8:	3020      	adds	r0, #32
 80169ea:	f001 fe19 	bl	8018620 <__atomic_load_8>
 80169ee:	6823      	ldr	r3, [r4, #0]
 80169f0:	4681      	mov	r9, r0
 80169f2:	4688      	mov	r8, r1
 80169f4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80169f8:	2105      	movs	r1, #5
 80169fa:	f001 fe11 	bl	8018620 <__atomic_load_8>
 80169fe:	4607      	mov	r7, r0
 8016a00:	6820      	ldr	r0, [r4, #0]
 8016a02:	460e      	mov	r6, r1
 8016a04:	2105      	movs	r1, #5
 8016a06:	3018      	adds	r0, #24
 8016a08:	f001 fe0a 	bl	8018620 <__atomic_load_8>
 8016a0c:	782b      	ldrb	r3, [r5, #0]
 8016a0e:	4682      	mov	sl, r0
 8016a10:	460d      	mov	r5, r1
 8016a12:	3b02      	subs	r3, #2
 8016a14:	9a02      	ldr	r2, [sp, #8]
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	9b03      	ldr	r3, [sp, #12]
 8016a1a:	d937      	bls.n	8016a8c <_rcl_timer_time_jump+0xd0>
 8016a1c:	42ba      	cmp	r2, r7
 8016a1e:	eb73 0106 	sbcs.w	r1, r3, r6
 8016a22:	da60      	bge.n	8016ae6 <_rcl_timer_time_jump+0x12a>
 8016a24:	454a      	cmp	r2, r9
 8016a26:	eb73 0108 	sbcs.w	r1, r3, r8
 8016a2a:	dad1      	bge.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016a2c:	eb1a 0202 	adds.w	r2, sl, r2
 8016a30:	6820      	ldr	r0, [r4, #0]
 8016a32:	eb43 0305 	adc.w	r3, r3, r5
 8016a36:	2505      	movs	r5, #5
 8016a38:	3028      	adds	r0, #40	@ 0x28
 8016a3a:	9500      	str	r5, [sp, #0]
 8016a3c:	f001 fe26 	bl	801868c <__atomic_store_8>
 8016a40:	6820      	ldr	r0, [r4, #0]
 8016a42:	9500      	str	r5, [sp, #0]
 8016a44:	3020      	adds	r0, #32
 8016a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a4a:	f001 fe1f 	bl	801868c <__atomic_store_8>
 8016a4e:	e7bf      	b.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016a50:	6813      	ldr	r3, [r2, #0]
 8016a52:	a902      	add	r1, sp, #8
 8016a54:	6818      	ldr	r0, [r3, #0]
 8016a56:	f7ff fedb 	bl	8016810 <rcl_clock_get_now>
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	d1b8      	bne.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a62:	4313      	orrs	r3, r2
 8016a64:	d0b4      	beq.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016a66:	6820      	ldr	r0, [r4, #0]
 8016a68:	2105      	movs	r1, #5
 8016a6a:	3028      	adds	r0, #40	@ 0x28
 8016a6c:	f001 fdd8 	bl	8018620 <__atomic_load_8>
 8016a70:	9d02      	ldr	r5, [sp, #8]
 8016a72:	4602      	mov	r2, r0
 8016a74:	9b03      	ldr	r3, [sp, #12]
 8016a76:	6820      	ldr	r0, [r4, #0]
 8016a78:	1b52      	subs	r2, r2, r5
 8016a7a:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8016a7e:	eb61 0303 	sbc.w	r3, r1, r3
 8016a82:	2105      	movs	r1, #5
 8016a84:	9100      	str	r1, [sp, #0]
 8016a86:	f001 fe01 	bl	801868c <__atomic_store_8>
 8016a8a:	e7a1      	b.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	d09f      	beq.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016a90:	6820      	ldr	r0, [r4, #0]
 8016a92:	f04f 0805 	mov.w	r8, #5
 8016a96:	2300      	movs	r3, #0
 8016a98:	2200      	movs	r2, #0
 8016a9a:	3030      	adds	r0, #48	@ 0x30
 8016a9c:	f8cd 8000 	str.w	r8, [sp]
 8016aa0:	f001 fe2a 	bl	80186f8 <__atomic_exchange_8>
 8016aa4:	ea51 0300 	orrs.w	r3, r1, r0
 8016aa8:	4606      	mov	r6, r0
 8016aaa:	460f      	mov	r7, r1
 8016aac:	d090      	beq.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016aae:	9a02      	ldr	r2, [sp, #8]
 8016ab0:	9b03      	ldr	r3, [sp, #12]
 8016ab2:	1a12      	subs	r2, r2, r0
 8016ab4:	f8cd 8000 	str.w	r8, [sp]
 8016ab8:	6820      	ldr	r0, [r4, #0]
 8016aba:	eb63 0301 	sbc.w	r3, r3, r1
 8016abe:	eb12 020a 	adds.w	r2, r2, sl
 8016ac2:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8016ac6:	eb43 0305 	adc.w	r3, r3, r5
 8016aca:	f001 fddf 	bl	801868c <__atomic_store_8>
 8016ace:	f8cd 8000 	str.w	r8, [sp]
 8016ad2:	6820      	ldr	r0, [r4, #0]
 8016ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ad8:	3020      	adds	r0, #32
 8016ada:	1b92      	subs	r2, r2, r6
 8016adc:	eb63 0307 	sbc.w	r3, r3, r7
 8016ae0:	f001 fdd4 	bl	801868c <__atomic_store_8>
 8016ae4:	e774      	b.n	80169d0 <_rcl_timer_time_jump+0x14>
 8016ae6:	6820      	ldr	r0, [r4, #0]
 8016ae8:	3008      	adds	r0, #8
 8016aea:	f004 fba9 	bl	801b240 <rcl_trigger_guard_condition>
 8016aee:	e76f      	b.n	80169d0 <_rcl_timer_time_jump+0x14>

08016af0 <rcl_get_zero_initialized_timer>:
 8016af0:	4b01      	ldr	r3, [pc, #4]	@ (8016af8 <rcl_get_zero_initialized_timer+0x8>)
 8016af2:	6818      	ldr	r0, [r3, #0]
 8016af4:	4770      	bx	lr
 8016af6:	bf00      	nop
 8016af8:	0801d414 	.word	0x0801d414
 8016afc:	00000000 	.word	0x00000000

08016b00 <rcl_timer_init>:
 8016b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b04:	b0ab      	sub	sp, #172	@ 0xac
 8016b06:	460d      	mov	r5, r1
 8016b08:	4604      	mov	r4, r0
 8016b0a:	4692      	mov	sl, r2
 8016b0c:	a837      	add	r0, sp, #220	@ 0xdc
 8016b0e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8016b10:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8016b14:	f7f8 fd2c 	bl	800f570 <rcutils_allocator_is_valid>
 8016b18:	fab5 f385 	clz	r3, r5
 8016b1c:	095b      	lsrs	r3, r3, #5
 8016b1e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 8016b22:	2c00      	cmp	r4, #0
 8016b24:	bf08      	it	eq
 8016b26:	f043 0301 	orreq.w	r3, r3, #1
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d164      	bne.n	8016bf8 <rcl_timer_init+0xf8>
 8016b2e:	f080 0001 	eor.w	r0, r0, #1
 8016b32:	b2c0      	uxtb	r0, r0
 8016b34:	2800      	cmp	r0, #0
 8016b36:	d15f      	bne.n	8016bf8 <rcl_timer_init+0xf8>
 8016b38:	6823      	ldr	r3, [r4, #0]
 8016b3a:	b123      	cbz	r3, 8016b46 <rcl_timer_init+0x46>
 8016b3c:	2664      	movs	r6, #100	@ 0x64
 8016b3e:	4630      	mov	r0, r6
 8016b40:	b02b      	add	sp, #172	@ 0xac
 8016b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b46:	a908      	add	r1, sp, #32
 8016b48:	4628      	mov	r0, r5
 8016b4a:	f7ff fe61 	bl	8016810 <rcl_clock_get_now>
 8016b4e:	4606      	mov	r6, r0
 8016b50:	2800      	cmp	r0, #0
 8016b52:	d1f4      	bne.n	8016b3e <rcl_timer_init+0x3e>
 8016b54:	f10d 0b18 	add.w	fp, sp, #24
 8016b58:	ae0b      	add	r6, sp, #44	@ 0x2c
 8016b5a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8016b5e:	4658      	mov	r0, fp
 8016b60:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8016b64:	f004 fa76 	bl	801b054 <rcl_get_zero_initialized_guard_condition>
 8016b68:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8016b6c:	e889 0003 	stmia.w	r9, {r0, r1}
 8016b70:	4630      	mov	r0, r6
 8016b72:	f004 fb49 	bl	801b208 <rcl_guard_condition_get_default_options>
 8016b76:	ab0d      	add	r3, sp, #52	@ 0x34
 8016b78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b7c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016b80:	4651      	mov	r1, sl
 8016b82:	4648      	mov	r0, r9
 8016b84:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016b88:	f004 fa6e 	bl	801b068 <rcl_guard_condition_init>
 8016b8c:	4606      	mov	r6, r0
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d1d5      	bne.n	8016b3e <rcl_timer_init+0x3e>
 8016b92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d033      	beq.n	8016c02 <rcl_timer_init+0x102>
 8016b9a:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8016b9c:	4642      	mov	r2, r8
 8016b9e:	463b      	mov	r3, r7
 8016ba0:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 8016ba4:	911a      	str	r1, [sp, #104]	@ 0x68
 8016ba6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8016baa:	f04f 0a00 	mov.w	sl, #0
 8016bae:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8016bb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016bb6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016c60 <rcl_timer_init+0x160>
 8016bba:	eb12 0008 	adds.w	r0, r2, r8
 8016bbe:	eb47 0103 	adc.w	r1, r7, r3
 8016bc2:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016bc6:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8016bca:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8016bce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bd6:	f8de 3000 	ldr.w	r3, [lr]
 8016bda:	2050      	movs	r0, #80	@ 0x50
 8016bdc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016be0:	4619      	mov	r1, r3
 8016be2:	f8cc 3000 	str.w	r3, [ip]
 8016be6:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8016be8:	4798      	blx	r3
 8016bea:	6020      	str	r0, [r4, #0]
 8016bec:	b358      	cbz	r0, 8016c46 <rcl_timer_init+0x146>
 8016bee:	2250      	movs	r2, #80	@ 0x50
 8016bf0:	a916      	add	r1, sp, #88	@ 0x58
 8016bf2:	f005 fa4a 	bl	801c08a <memcpy>
 8016bf6:	e7a2      	b.n	8016b3e <rcl_timer_init+0x3e>
 8016bf8:	260b      	movs	r6, #11
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	b02b      	add	sp, #172	@ 0xac
 8016bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c02:	2001      	movs	r0, #1
 8016c04:	2100      	movs	r1, #0
 8016c06:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8016c0a:	ab12      	add	r3, sp, #72	@ 0x48
 8016c0c:	4a16      	ldr	r2, [pc, #88]	@ (8016c68 <rcl_timer_init+0x168>)
 8016c0e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016c12:	9405      	str	r4, [sp, #20]
 8016c14:	9204      	str	r2, [sp, #16]
 8016c16:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8016c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016c22:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8016c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016c2c:	4628      	mov	r0, r5
 8016c2e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8016c32:	f7ff fdf9 	bl	8016828 <rcl_clock_add_jump_callback>
 8016c36:	4603      	mov	r3, r0
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d0ae      	beq.n	8016b9a <rcl_timer_init+0x9a>
 8016c3c:	4648      	mov	r0, r9
 8016c3e:	461e      	mov	r6, r3
 8016c40:	f004 fabc 	bl	801b1bc <rcl_guard_condition_fini>
 8016c44:	e77b      	b.n	8016b3e <rcl_timer_init+0x3e>
 8016c46:	4648      	mov	r0, r9
 8016c48:	260a      	movs	r6, #10
 8016c4a:	f004 fab7 	bl	801b1bc <rcl_guard_condition_fini>
 8016c4e:	4622      	mov	r2, r4
 8016c50:	4905      	ldr	r1, [pc, #20]	@ (8016c68 <rcl_timer_init+0x168>)
 8016c52:	4628      	mov	r0, r5
 8016c54:	f7ff fe4c 	bl	80168f0 <rcl_clock_remove_jump_callback>
 8016c58:	e771      	b.n	8016b3e <rcl_timer_init+0x3e>
 8016c5a:	bf00      	nop
 8016c5c:	f3af 8000 	nop.w
	...
 8016c68:	080169bd 	.word	0x080169bd

08016c6c <rcl_timer_call>:
 8016c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c70:	b087      	sub	sp, #28
 8016c72:	2800      	cmp	r0, #0
 8016c74:	d06c      	beq.n	8016d50 <rcl_timer_call+0xe4>
 8016c76:	6803      	ldr	r3, [r0, #0]
 8016c78:	4604      	mov	r4, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d062      	beq.n	8016d44 <rcl_timer_call+0xd8>
 8016c7e:	f3bf 8f5b 	dmb	ish
 8016c82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016c86:	f3bf 8f5b 	dmb	ish
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d14f      	bne.n	8016d2e <rcl_timer_call+0xc2>
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	a904      	add	r1, sp, #16
 8016c92:	6818      	ldr	r0, [r3, #0]
 8016c94:	f7ff fdbc 	bl	8016810 <rcl_clock_get_now>
 8016c98:	4605      	mov	r5, r0
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	d149      	bne.n	8016d32 <rcl_timer_call+0xc6>
 8016c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	db49      	blt.n	8016d3a <rcl_timer_call+0xce>
 8016ca6:	2605      	movs	r6, #5
 8016ca8:	6820      	ldr	r0, [r4, #0]
 8016caa:	9600      	str	r6, [sp, #0]
 8016cac:	3020      	adds	r0, #32
 8016cae:	f001 fd23 	bl	80186f8 <__atomic_exchange_8>
 8016cb2:	6823      	ldr	r3, [r4, #0]
 8016cb4:	4680      	mov	r8, r0
 8016cb6:	f3bf 8f5b 	dmb	ish
 8016cba:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016cbe:	f3bf 8f5b 	dmb	ish
 8016cc2:	6820      	ldr	r0, [r4, #0]
 8016cc4:	4689      	mov	r9, r1
 8016cc6:	4631      	mov	r1, r6
 8016cc8:	3028      	adds	r0, #40	@ 0x28
 8016cca:	f001 fca9 	bl	8018620 <__atomic_load_8>
 8016cce:	460f      	mov	r7, r1
 8016cd0:	4631      	mov	r1, r6
 8016cd2:	4606      	mov	r6, r0
 8016cd4:	6820      	ldr	r0, [r4, #0]
 8016cd6:	3018      	adds	r0, #24
 8016cd8:	f001 fca2 	bl	8018620 <__atomic_load_8>
 8016cdc:	4602      	mov	r2, r0
 8016cde:	9804      	ldr	r0, [sp, #16]
 8016ce0:	460b      	mov	r3, r1
 8016ce2:	18b6      	adds	r6, r6, r2
 8016ce4:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016ce8:	4692      	mov	sl, r2
 8016cea:	eb47 0701 	adc.w	r7, r7, r1
 8016cee:	4286      	cmp	r6, r0
 8016cf0:	eb77 010c 	sbcs.w	r1, r7, ip
 8016cf4:	da04      	bge.n	8016d00 <rcl_timer_call+0x94>
 8016cf6:	ea53 0102 	orrs.w	r1, r3, r2
 8016cfa:	d12e      	bne.n	8016d5a <rcl_timer_call+0xee>
 8016cfc:	4606      	mov	r6, r0
 8016cfe:	4667      	mov	r7, ip
 8016d00:	6820      	ldr	r0, [r4, #0]
 8016d02:	2105      	movs	r1, #5
 8016d04:	4632      	mov	r2, r6
 8016d06:	463b      	mov	r3, r7
 8016d08:	3028      	adds	r0, #40	@ 0x28
 8016d0a:	9100      	str	r1, [sp, #0]
 8016d0c:	f001 fcbe 	bl	801868c <__atomic_store_8>
 8016d10:	f1bb 0f00 	cmp.w	fp, #0
 8016d14:	d00d      	beq.n	8016d32 <rcl_timer_call+0xc6>
 8016d16:	9a04      	ldr	r2, [sp, #16]
 8016d18:	4620      	mov	r0, r4
 8016d1a:	9b05      	ldr	r3, [sp, #20]
 8016d1c:	ebb2 0208 	subs.w	r2, r2, r8
 8016d20:	eb63 0309 	sbc.w	r3, r3, r9
 8016d24:	47d8      	blx	fp
 8016d26:	4628      	mov	r0, r5
 8016d28:	b007      	add	sp, #28
 8016d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d2e:	f240 3521 	movw	r5, #801	@ 0x321
 8016d32:	4628      	mov	r0, r5
 8016d34:	b007      	add	sp, #28
 8016d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d3a:	2501      	movs	r5, #1
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	b007      	add	sp, #28
 8016d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d44:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8016d48:	4628      	mov	r0, r5
 8016d4a:	b007      	add	sp, #28
 8016d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d50:	250b      	movs	r5, #11
 8016d52:	4628      	mov	r0, r5
 8016d54:	b007      	add	sp, #28
 8016d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5a:	1b80      	subs	r0, r0, r6
 8016d5c:	eb6c 0107 	sbc.w	r1, ip, r7
 8016d60:	3801      	subs	r0, #1
 8016d62:	f161 0100 	sbc.w	r1, r1, #0
 8016d66:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016d6a:	f7e9 fb21 	bl	80003b0 <__aeabi_ldivmod>
 8016d6e:	9b02      	ldr	r3, [sp, #8]
 8016d70:	3001      	adds	r0, #1
 8016d72:	f141 0100 	adc.w	r1, r1, #0
 8016d76:	fb00 f303 	mul.w	r3, r0, r3
 8016d7a:	fb01 330a 	mla	r3, r1, sl, r3
 8016d7e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016d82:	1986      	adds	r6, r0, r6
 8016d84:	4453      	add	r3, sl
 8016d86:	eb43 0707 	adc.w	r7, r3, r7
 8016d8a:	e7b9      	b.n	8016d00 <rcl_timer_call+0x94>

08016d8c <rcl_timer_is_ready>:
 8016d8c:	b570      	push	{r4, r5, r6, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	b380      	cbz	r0, 8016df4 <rcl_timer_is_ready+0x68>
 8016d92:	6803      	ldr	r3, [r0, #0]
 8016d94:	4604      	mov	r4, r0
 8016d96:	b38b      	cbz	r3, 8016dfc <rcl_timer_is_ready+0x70>
 8016d98:	460d      	mov	r5, r1
 8016d9a:	b359      	cbz	r1, 8016df4 <rcl_timer_is_ready+0x68>
 8016d9c:	f3bf 8f5b 	dmb	ish
 8016da0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016da4:	f3bf 8f5b 	dmb	ish
 8016da8:	b953      	cbnz	r3, 8016dc0 <rcl_timer_is_ready+0x34>
 8016daa:	6803      	ldr	r3, [r0, #0]
 8016dac:	4669      	mov	r1, sp
 8016dae:	6818      	ldr	r0, [r3, #0]
 8016db0:	f7ff fd2e 	bl	8016810 <rcl_clock_get_now>
 8016db4:	4606      	mov	r6, r0
 8016db6:	b148      	cbz	r0, 8016dcc <rcl_timer_is_ready+0x40>
 8016db8:	f240 3321 	movw	r3, #801	@ 0x321
 8016dbc:	4298      	cmp	r0, r3
 8016dbe:	d102      	bne.n	8016dc6 <rcl_timer_is_ready+0x3a>
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	461e      	mov	r6, r3
 8016dc4:	702b      	strb	r3, [r5, #0]
 8016dc6:	4630      	mov	r0, r6
 8016dc8:	b002      	add	sp, #8
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	6820      	ldr	r0, [r4, #0]
 8016dce:	2105      	movs	r1, #5
 8016dd0:	3028      	adds	r0, #40	@ 0x28
 8016dd2:	f001 fc25 	bl	8018620 <__atomic_load_8>
 8016dd6:	9b00      	ldr	r3, [sp, #0]
 8016dd8:	1ac0      	subs	r0, r0, r3
 8016dda:	9b01      	ldr	r3, [sp, #4]
 8016ddc:	eb61 0103 	sbc.w	r1, r1, r3
 8016de0:	2801      	cmp	r0, #1
 8016de2:	4630      	mov	r0, r6
 8016de4:	f171 0300 	sbcs.w	r3, r1, #0
 8016de8:	bfb4      	ite	lt
 8016dea:	2301      	movlt	r3, #1
 8016dec:	2300      	movge	r3, #0
 8016dee:	702b      	strb	r3, [r5, #0]
 8016df0:	b002      	add	sp, #8
 8016df2:	bd70      	pop	{r4, r5, r6, pc}
 8016df4:	260b      	movs	r6, #11
 8016df6:	4630      	mov	r0, r6
 8016df8:	b002      	add	sp, #8
 8016dfa:	bd70      	pop	{r4, r5, r6, pc}
 8016dfc:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016e00:	e7e1      	b.n	8016dc6 <rcl_timer_is_ready+0x3a>
 8016e02:	bf00      	nop

08016e04 <rcl_timer_get_time_until_next_call>:
 8016e04:	b570      	push	{r4, r5, r6, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	b330      	cbz	r0, 8016e58 <rcl_timer_get_time_until_next_call+0x54>
 8016e0a:	6803      	ldr	r3, [r0, #0]
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	b33b      	cbz	r3, 8016e60 <rcl_timer_get_time_until_next_call+0x5c>
 8016e10:	460d      	mov	r5, r1
 8016e12:	b309      	cbz	r1, 8016e58 <rcl_timer_get_time_until_next_call+0x54>
 8016e14:	f3bf 8f5b 	dmb	ish
 8016e18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016e1c:	f3bf 8f5b 	dmb	ish
 8016e20:	b9ab      	cbnz	r3, 8016e4e <rcl_timer_get_time_until_next_call+0x4a>
 8016e22:	6803      	ldr	r3, [r0, #0]
 8016e24:	4669      	mov	r1, sp
 8016e26:	6818      	ldr	r0, [r3, #0]
 8016e28:	f7ff fcf2 	bl	8016810 <rcl_clock_get_now>
 8016e2c:	4606      	mov	r6, r0
 8016e2e:	b958      	cbnz	r0, 8016e48 <rcl_timer_get_time_until_next_call+0x44>
 8016e30:	6820      	ldr	r0, [r4, #0]
 8016e32:	2105      	movs	r1, #5
 8016e34:	3028      	adds	r0, #40	@ 0x28
 8016e36:	f001 fbf3 	bl	8018620 <__atomic_load_8>
 8016e3a:	9b00      	ldr	r3, [sp, #0]
 8016e3c:	1ac0      	subs	r0, r0, r3
 8016e3e:	9b01      	ldr	r3, [sp, #4]
 8016e40:	eb61 0103 	sbc.w	r1, r1, r3
 8016e44:	6028      	str	r0, [r5, #0]
 8016e46:	6069      	str	r1, [r5, #4]
 8016e48:	4630      	mov	r0, r6
 8016e4a:	b002      	add	sp, #8
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
 8016e4e:	f240 3621 	movw	r6, #801	@ 0x321
 8016e52:	4630      	mov	r0, r6
 8016e54:	b002      	add	sp, #8
 8016e56:	bd70      	pop	{r4, r5, r6, pc}
 8016e58:	260b      	movs	r6, #11
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	b002      	add	sp, #8
 8016e5e:	bd70      	pop	{r4, r5, r6, pc}
 8016e60:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016e64:	e7f0      	b.n	8016e48 <rcl_timer_get_time_until_next_call+0x44>
 8016e66:	bf00      	nop

08016e68 <rcl_timer_get_guard_condition>:
 8016e68:	b130      	cbz	r0, 8016e78 <rcl_timer_get_guard_condition+0x10>
 8016e6a:	6800      	ldr	r0, [r0, #0]
 8016e6c:	b120      	cbz	r0, 8016e78 <rcl_timer_get_guard_condition+0x10>
 8016e6e:	68c3      	ldr	r3, [r0, #12]
 8016e70:	b10b      	cbz	r3, 8016e76 <rcl_timer_get_guard_condition+0xe>
 8016e72:	3008      	adds	r0, #8
 8016e74:	4770      	bx	lr
 8016e76:	4618      	mov	r0, r3
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop

08016e7c <rcl_validate_enclave_name_with_size>:
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d049      	beq.n	8016f14 <rcl_validate_enclave_name_with_size+0x98>
 8016e80:	b570      	push	{r4, r5, r6, lr}
 8016e82:	4615      	mov	r5, r2
 8016e84:	b0c2      	sub	sp, #264	@ 0x108
 8016e86:	b19a      	cbz	r2, 8016eb0 <rcl_validate_enclave_name_with_size+0x34>
 8016e88:	461e      	mov	r6, r3
 8016e8a:	466a      	mov	r2, sp
 8016e8c:	ab01      	add	r3, sp, #4
 8016e8e:	460c      	mov	r4, r1
 8016e90:	f002 f85a 	bl	8018f48 <rmw_validate_namespace_with_size>
 8016e94:	4684      	mov	ip, r0
 8016e96:	b9b8      	cbnz	r0, 8016ec8 <rcl_validate_enclave_name_with_size+0x4c>
 8016e98:	9900      	ldr	r1, [sp, #0]
 8016e9a:	b171      	cbz	r1, 8016eba <rcl_validate_enclave_name_with_size+0x3e>
 8016e9c:	2907      	cmp	r1, #7
 8016e9e:	d019      	beq.n	8016ed4 <rcl_validate_enclave_name_with_size+0x58>
 8016ea0:	1e4b      	subs	r3, r1, #1
 8016ea2:	2b05      	cmp	r3, #5
 8016ea4:	d83a      	bhi.n	8016f1c <rcl_validate_enclave_name_with_size+0xa0>
 8016ea6:	e8df f003 	tbb	[pc, r3]
 8016eaa:	2926      	.short	0x2926
 8016eac:	1d322f2c 	.word	0x1d322f2c
 8016eb0:	f04f 0c0b 	mov.w	ip, #11
 8016eb4:	4660      	mov	r0, ip
 8016eb6:	b042      	add	sp, #264	@ 0x108
 8016eb8:	bd70      	pop	{r4, r5, r6, pc}
 8016eba:	2907      	cmp	r1, #7
 8016ebc:	d00a      	beq.n	8016ed4 <rcl_validate_enclave_name_with_size+0x58>
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	4660      	mov	r0, ip
 8016ec2:	602b      	str	r3, [r5, #0]
 8016ec4:	b042      	add	sp, #264	@ 0x108
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
 8016ec8:	f7fe fe08 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 8016ecc:	4684      	mov	ip, r0
 8016ece:	4660      	mov	r0, ip
 8016ed0:	b042      	add	sp, #264	@ 0x108
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	2cff      	cmp	r4, #255	@ 0xff
 8016ed6:	d9f2      	bls.n	8016ebe <rcl_validate_enclave_name_with_size+0x42>
 8016ed8:	6029      	str	r1, [r5, #0]
 8016eda:	2e00      	cmp	r6, #0
 8016edc:	d0ea      	beq.n	8016eb4 <rcl_validate_enclave_name_with_size+0x38>
 8016ede:	23fe      	movs	r3, #254	@ 0xfe
 8016ee0:	6033      	str	r3, [r6, #0]
 8016ee2:	e7e7      	b.n	8016eb4 <rcl_validate_enclave_name_with_size+0x38>
 8016ee4:	2306      	movs	r3, #6
 8016ee6:	602b      	str	r3, [r5, #0]
 8016ee8:	2e00      	cmp	r6, #0
 8016eea:	d0e3      	beq.n	8016eb4 <rcl_validate_enclave_name_with_size+0x38>
 8016eec:	9b01      	ldr	r3, [sp, #4]
 8016eee:	4660      	mov	r0, ip
 8016ef0:	6033      	str	r3, [r6, #0]
 8016ef2:	b042      	add	sp, #264	@ 0x108
 8016ef4:	bd70      	pop	{r4, r5, r6, pc}
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	602b      	str	r3, [r5, #0]
 8016efa:	e7f5      	b.n	8016ee8 <rcl_validate_enclave_name_with_size+0x6c>
 8016efc:	2302      	movs	r3, #2
 8016efe:	602b      	str	r3, [r5, #0]
 8016f00:	e7f2      	b.n	8016ee8 <rcl_validate_enclave_name_with_size+0x6c>
 8016f02:	2303      	movs	r3, #3
 8016f04:	602b      	str	r3, [r5, #0]
 8016f06:	e7ef      	b.n	8016ee8 <rcl_validate_enclave_name_with_size+0x6c>
 8016f08:	2304      	movs	r3, #4
 8016f0a:	602b      	str	r3, [r5, #0]
 8016f0c:	e7ec      	b.n	8016ee8 <rcl_validate_enclave_name_with_size+0x6c>
 8016f0e:	2305      	movs	r3, #5
 8016f10:	602b      	str	r3, [r5, #0]
 8016f12:	e7e9      	b.n	8016ee8 <rcl_validate_enclave_name_with_size+0x6c>
 8016f14:	f04f 0c0b 	mov.w	ip, #11
 8016f18:	4660      	mov	r0, ip
 8016f1a:	4770      	bx	lr
 8016f1c:	460b      	mov	r3, r1
 8016f1e:	4a04      	ldr	r2, [pc, #16]	@ (8016f30 <rcl_validate_enclave_name_with_size+0xb4>)
 8016f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016f24:	a802      	add	r0, sp, #8
 8016f26:	f001 fd33 	bl	8018990 <rcutils_snprintf>
 8016f2a:	f04f 0c01 	mov.w	ip, #1
 8016f2e:	e7c1      	b.n	8016eb4 <rcl_validate_enclave_name_with_size+0x38>
 8016f30:	0801d418 	.word	0x0801d418

08016f34 <rcl_validate_enclave_name>:
 8016f34:	b168      	cbz	r0, 8016f52 <rcl_validate_enclave_name+0x1e>
 8016f36:	b570      	push	{r4, r5, r6, lr}
 8016f38:	460d      	mov	r5, r1
 8016f3a:	4616      	mov	r6, r2
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	f7e9 f9d9 	bl	80002f4 <strlen>
 8016f42:	4633      	mov	r3, r6
 8016f44:	4601      	mov	r1, r0
 8016f46:	462a      	mov	r2, r5
 8016f48:	4620      	mov	r0, r4
 8016f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f4e:	f7ff bf95 	b.w	8016e7c <rcl_validate_enclave_name_with_size>
 8016f52:	200b      	movs	r0, #11
 8016f54:	4770      	bx	lr
 8016f56:	bf00      	nop

08016f58 <rcl_get_zero_initialized_wait_set>:
 8016f58:	b510      	push	{r4, lr}
 8016f5a:	4c08      	ldr	r4, [pc, #32]	@ (8016f7c <rcl_get_zero_initialized_wait_set+0x24>)
 8016f5c:	4686      	mov	lr, r0
 8016f5e:	4684      	mov	ip, r0
 8016f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f72:	6823      	ldr	r3, [r4, #0]
 8016f74:	4670      	mov	r0, lr
 8016f76:	f8cc 3000 	str.w	r3, [ip]
 8016f7a:	bd10      	pop	{r4, pc}
 8016f7c:	0801d478 	.word	0x0801d478

08016f80 <rcl_wait_set_is_valid>:
 8016f80:	b118      	cbz	r0, 8016f8a <rcl_wait_set_is_valid+0xa>
 8016f82:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016f84:	3800      	subs	r0, #0
 8016f86:	bf18      	it	ne
 8016f88:	2001      	movne	r0, #1
 8016f8a:	4770      	bx	lr

08016f8c <rcl_wait_set_fini>:
 8016f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f90:	b082      	sub	sp, #8
 8016f92:	2800      	cmp	r0, #0
 8016f94:	f000 8095 	beq.w	80170c2 <rcl_wait_set_fini+0x136>
 8016f98:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	2e00      	cmp	r6, #0
 8016f9e:	f000 808c 	beq.w	80170ba <rcl_wait_set_fini+0x12e>
 8016fa2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016fa4:	f002 fd7c 	bl	8019aa0 <rmw_destroy_wait_set>
 8016fa8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016faa:	1e06      	subs	r6, r0, #0
 8016fac:	bf18      	it	ne
 8016fae:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016fb2:	2d00      	cmp	r5, #0
 8016fb4:	f000 8081 	beq.w	80170ba <rcl_wait_set_fini+0x12e>
 8016fb8:	2700      	movs	r7, #0
 8016fba:	6820      	ldr	r0, [r4, #0]
 8016fbc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016fc0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016fc2:	6067      	str	r7, [r4, #4]
 8016fc4:	602f      	str	r7, [r5, #0]
 8016fc6:	b120      	cbz	r0, 8016fd2 <rcl_wait_set_fini+0x46>
 8016fc8:	9101      	str	r1, [sp, #4]
 8016fca:	47c0      	blx	r8
 8016fcc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016fce:	9901      	ldr	r1, [sp, #4]
 8016fd0:	6027      	str	r7, [r4, #0]
 8016fd2:	68a8      	ldr	r0, [r5, #8]
 8016fd4:	b120      	cbz	r0, 8016fe0 <rcl_wait_set_fini+0x54>
 8016fd6:	47c0      	blx	r8
 8016fd8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016fda:	2300      	movs	r3, #0
 8016fdc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016fe0:	f04f 0800 	mov.w	r8, #0
 8016fe4:	68a0      	ldr	r0, [r4, #8]
 8016fe6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016fe8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016fea:	f8c4 800c 	str.w	r8, [r4, #12]
 8016fee:	f8c5 800c 	str.w	r8, [r5, #12]
 8016ff2:	b128      	cbz	r0, 8017000 <rcl_wait_set_fini+0x74>
 8016ff4:	47b8      	blx	r7
 8016ff6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ff8:	f8c4 8008 	str.w	r8, [r4, #8]
 8016ffc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016ffe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017000:	f04f 0800 	mov.w	r8, #0
 8017004:	6968      	ldr	r0, [r5, #20]
 8017006:	f8c5 8010 	str.w	r8, [r5, #16]
 801700a:	b128      	cbz	r0, 8017018 <rcl_wait_set_fini+0x8c>
 801700c:	47b8      	blx	r7
 801700e:	f8c5 8014 	str.w	r8, [r5, #20]
 8017012:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017014:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017016:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017018:	f04f 0800 	mov.w	r8, #0
 801701c:	6920      	ldr	r0, [r4, #16]
 801701e:	f8c4 8014 	str.w	r8, [r4, #20]
 8017022:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8017026:	b128      	cbz	r0, 8017034 <rcl_wait_set_fini+0xa8>
 8017028:	47b8      	blx	r7
 801702a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801702c:	f8c4 8010 	str.w	r8, [r4, #16]
 8017030:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017032:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017034:	f04f 0800 	mov.w	r8, #0
 8017038:	69a0      	ldr	r0, [r4, #24]
 801703a:	f8c4 801c 	str.w	r8, [r4, #28]
 801703e:	f8c5 8018 	str.w	r8, [r5, #24]
 8017042:	b128      	cbz	r0, 8017050 <rcl_wait_set_fini+0xc4>
 8017044:	9101      	str	r1, [sp, #4]
 8017046:	47b8      	blx	r7
 8017048:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801704a:	9901      	ldr	r1, [sp, #4]
 801704c:	f8c4 8018 	str.w	r8, [r4, #24]
 8017050:	6a28      	ldr	r0, [r5, #32]
 8017052:	b120      	cbz	r0, 801705e <rcl_wait_set_fini+0xd2>
 8017054:	47b8      	blx	r7
 8017056:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017058:	2300      	movs	r3, #0
 801705a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801705e:	2700      	movs	r7, #0
 8017060:	6a20      	ldr	r0, [r4, #32]
 8017062:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017066:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017068:	6267      	str	r7, [r4, #36]	@ 0x24
 801706a:	626f      	str	r7, [r5, #36]	@ 0x24
 801706c:	b120      	cbz	r0, 8017078 <rcl_wait_set_fini+0xec>
 801706e:	9101      	str	r1, [sp, #4]
 8017070:	47c0      	blx	r8
 8017072:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017074:	9901      	ldr	r1, [sp, #4]
 8017076:	6227      	str	r7, [r4, #32]
 8017078:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801707a:	b120      	cbz	r0, 8017086 <rcl_wait_set_fini+0xfa>
 801707c:	47c0      	blx	r8
 801707e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017080:	2300      	movs	r3, #0
 8017082:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017086:	2700      	movs	r7, #0
 8017088:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801708a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801708e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017090:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017092:	632f      	str	r7, [r5, #48]	@ 0x30
 8017094:	b120      	cbz	r0, 80170a0 <rcl_wait_set_fini+0x114>
 8017096:	9101      	str	r1, [sp, #4]
 8017098:	47c0      	blx	r8
 801709a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801709c:	9901      	ldr	r1, [sp, #4]
 801709e:	62a7      	str	r7, [r4, #40]	@ 0x28
 80170a0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80170a2:	b120      	cbz	r0, 80170ae <rcl_wait_set_fini+0x122>
 80170a4:	47c0      	blx	r8
 80170a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80170a8:	2300      	movs	r3, #0
 80170aa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80170ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80170b0:	4628      	mov	r0, r5
 80170b2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80170b4:	4798      	blx	r3
 80170b6:	2300      	movs	r3, #0
 80170b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80170ba:	4630      	mov	r0, r6
 80170bc:	b002      	add	sp, #8
 80170be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170c2:	260b      	movs	r6, #11
 80170c4:	4630      	mov	r0, r6
 80170c6:	b002      	add	sp, #8
 80170c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080170cc <rcl_wait_set_add_subscription>:
 80170cc:	b318      	cbz	r0, 8017116 <rcl_wait_set_add_subscription+0x4a>
 80170ce:	b538      	push	{r3, r4, r5, lr}
 80170d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80170d2:	4604      	mov	r4, r0
 80170d4:	b30b      	cbz	r3, 801711a <rcl_wait_set_add_subscription+0x4e>
 80170d6:	b319      	cbz	r1, 8017120 <rcl_wait_set_add_subscription+0x54>
 80170d8:	681d      	ldr	r5, [r3, #0]
 80170da:	6840      	ldr	r0, [r0, #4]
 80170dc:	4285      	cmp	r5, r0
 80170de:	d217      	bcs.n	8017110 <rcl_wait_set_add_subscription+0x44>
 80170e0:	1c68      	adds	r0, r5, #1
 80170e2:	6018      	str	r0, [r3, #0]
 80170e4:	6823      	ldr	r3, [r4, #0]
 80170e6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80170ea:	b102      	cbz	r2, 80170ee <rcl_wait_set_add_subscription+0x22>
 80170ec:	6015      	str	r5, [r2, #0]
 80170ee:	4608      	mov	r0, r1
 80170f0:	f7ff fadc 	bl	80166ac <rcl_subscription_get_rmw_handle>
 80170f4:	b150      	cbz	r0, 801710c <rcl_wait_set_add_subscription+0x40>
 80170f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170f8:	6842      	ldr	r2, [r0, #4]
 80170fa:	2000      	movs	r0, #0
 80170fc:	689b      	ldr	r3, [r3, #8]
 80170fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017102:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017104:	6853      	ldr	r3, [r2, #4]
 8017106:	3301      	adds	r3, #1
 8017108:	6053      	str	r3, [r2, #4]
 801710a:	bd38      	pop	{r3, r4, r5, pc}
 801710c:	2001      	movs	r0, #1
 801710e:	bd38      	pop	{r3, r4, r5, pc}
 8017110:	f240 3086 	movw	r0, #902	@ 0x386
 8017114:	bd38      	pop	{r3, r4, r5, pc}
 8017116:	200b      	movs	r0, #11
 8017118:	4770      	bx	lr
 801711a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801711e:	bd38      	pop	{r3, r4, r5, pc}
 8017120:	200b      	movs	r0, #11
 8017122:	bd38      	pop	{r3, r4, r5, pc}

08017124 <rcl_wait_set_clear>:
 8017124:	2800      	cmp	r0, #0
 8017126:	d074      	beq.n	8017212 <rcl_wait_set_clear+0xee>
 8017128:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801712a:	b510      	push	{r4, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d071      	beq.n	8017216 <rcl_wait_set_clear+0xf2>
 8017132:	6800      	ldr	r0, [r0, #0]
 8017134:	b138      	cbz	r0, 8017146 <rcl_wait_set_clear+0x22>
 8017136:	6862      	ldr	r2, [r4, #4]
 8017138:	2100      	movs	r1, #0
 801713a:	0092      	lsls	r2, r2, #2
 801713c:	f004 fedc 	bl	801bef8 <memset>
 8017140:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017142:	2200      	movs	r2, #0
 8017144:	601a      	str	r2, [r3, #0]
 8017146:	68a0      	ldr	r0, [r4, #8]
 8017148:	b138      	cbz	r0, 801715a <rcl_wait_set_clear+0x36>
 801714a:	68e2      	ldr	r2, [r4, #12]
 801714c:	2100      	movs	r1, #0
 801714e:	0092      	lsls	r2, r2, #2
 8017150:	f004 fed2 	bl	801bef8 <memset>
 8017154:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017156:	2200      	movs	r2, #0
 8017158:	60da      	str	r2, [r3, #12]
 801715a:	69a0      	ldr	r0, [r4, #24]
 801715c:	b138      	cbz	r0, 801716e <rcl_wait_set_clear+0x4a>
 801715e:	69e2      	ldr	r2, [r4, #28]
 8017160:	2100      	movs	r1, #0
 8017162:	0092      	lsls	r2, r2, #2
 8017164:	f004 fec8 	bl	801bef8 <memset>
 8017168:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801716a:	2200      	movs	r2, #0
 801716c:	619a      	str	r2, [r3, #24]
 801716e:	6a20      	ldr	r0, [r4, #32]
 8017170:	b138      	cbz	r0, 8017182 <rcl_wait_set_clear+0x5e>
 8017172:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017174:	2100      	movs	r1, #0
 8017176:	0092      	lsls	r2, r2, #2
 8017178:	f004 febe 	bl	801bef8 <memset>
 801717c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801717e:	2200      	movs	r2, #0
 8017180:	625a      	str	r2, [r3, #36]	@ 0x24
 8017182:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017184:	b138      	cbz	r0, 8017196 <rcl_wait_set_clear+0x72>
 8017186:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017188:	2100      	movs	r1, #0
 801718a:	0092      	lsls	r2, r2, #2
 801718c:	f004 feb4 	bl	801bef8 <memset>
 8017190:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017192:	2200      	movs	r2, #0
 8017194:	631a      	str	r2, [r3, #48]	@ 0x30
 8017196:	6920      	ldr	r0, [r4, #16]
 8017198:	b138      	cbz	r0, 80171aa <rcl_wait_set_clear+0x86>
 801719a:	6962      	ldr	r2, [r4, #20]
 801719c:	2100      	movs	r1, #0
 801719e:	0092      	lsls	r2, r2, #2
 80171a0:	f004 feaa 	bl	801bef8 <memset>
 80171a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171a6:	2200      	movs	r2, #0
 80171a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80171aa:	6898      	ldr	r0, [r3, #8]
 80171ac:	b138      	cbz	r0, 80171be <rcl_wait_set_clear+0x9a>
 80171ae:	685a      	ldr	r2, [r3, #4]
 80171b0:	2100      	movs	r1, #0
 80171b2:	0092      	lsls	r2, r2, #2
 80171b4:	f004 fea0 	bl	801bef8 <memset>
 80171b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171ba:	2200      	movs	r2, #0
 80171bc:	605a      	str	r2, [r3, #4]
 80171be:	6958      	ldr	r0, [r3, #20]
 80171c0:	b138      	cbz	r0, 80171d2 <rcl_wait_set_clear+0xae>
 80171c2:	691a      	ldr	r2, [r3, #16]
 80171c4:	2100      	movs	r1, #0
 80171c6:	0092      	lsls	r2, r2, #2
 80171c8:	f004 fe96 	bl	801bef8 <memset>
 80171cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171ce:	2200      	movs	r2, #0
 80171d0:	611a      	str	r2, [r3, #16]
 80171d2:	6a18      	ldr	r0, [r3, #32]
 80171d4:	b138      	cbz	r0, 80171e6 <rcl_wait_set_clear+0xc2>
 80171d6:	69da      	ldr	r2, [r3, #28]
 80171d8:	2100      	movs	r1, #0
 80171da:	0092      	lsls	r2, r2, #2
 80171dc:	f004 fe8c 	bl	801bef8 <memset>
 80171e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171e2:	2200      	movs	r2, #0
 80171e4:	61da      	str	r2, [r3, #28]
 80171e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80171e8:	b138      	cbz	r0, 80171fa <rcl_wait_set_clear+0xd6>
 80171ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80171ec:	2100      	movs	r1, #0
 80171ee:	0092      	lsls	r2, r2, #2
 80171f0:	f004 fe82 	bl	801bef8 <memset>
 80171f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171f6:	2200      	movs	r2, #0
 80171f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80171fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80171fc:	b140      	cbz	r0, 8017210 <rcl_wait_set_clear+0xec>
 80171fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017200:	2100      	movs	r1, #0
 8017202:	0092      	lsls	r2, r2, #2
 8017204:	f004 fe78 	bl	801bef8 <memset>
 8017208:	2300      	movs	r3, #0
 801720a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801720c:	4618      	mov	r0, r3
 801720e:	6353      	str	r3, [r2, #52]	@ 0x34
 8017210:	bd10      	pop	{r4, pc}
 8017212:	200b      	movs	r0, #11
 8017214:	4770      	bx	lr
 8017216:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801721a:	bd10      	pop	{r4, pc}

0801721c <rcl_wait_set_resize>:
 801721c:	2800      	cmp	r0, #0
 801721e:	f000 8180 	beq.w	8017522 <rcl_wait_set_resize+0x306>
 8017222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017226:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8017228:	b083      	sub	sp, #12
 801722a:	4605      	mov	r5, r0
 801722c:	2c00      	cmp	r4, #0
 801722e:	f000 817a 	beq.w	8017526 <rcl_wait_set_resize+0x30a>
 8017232:	f04f 0900 	mov.w	r9, #0
 8017236:	461f      	mov	r7, r3
 8017238:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801723c:	4688      	mov	r8, r1
 801723e:	4616      	mov	r6, r2
 8017240:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017244:	f8c0 9004 	str.w	r9, [r0, #4]
 8017248:	f8c4 9000 	str.w	r9, [r4]
 801724c:	2900      	cmp	r1, #0
 801724e:	f000 80bf 	beq.w	80173d0 <rcl_wait_set_resize+0x1b4>
 8017252:	008c      	lsls	r4, r1, #2
 8017254:	4652      	mov	r2, sl
 8017256:	6800      	ldr	r0, [r0, #0]
 8017258:	4621      	mov	r1, r4
 801725a:	9301      	str	r3, [sp, #4]
 801725c:	4798      	blx	r3
 801725e:	9b01      	ldr	r3, [sp, #4]
 8017260:	6028      	str	r0, [r5, #0]
 8017262:	2800      	cmp	r0, #0
 8017264:	f000 80f6 	beq.w	8017454 <rcl_wait_set_resize+0x238>
 8017268:	4622      	mov	r2, r4
 801726a:	4649      	mov	r1, r9
 801726c:	9301      	str	r3, [sp, #4]
 801726e:	f004 fe43 	bl	801bef8 <memset>
 8017272:	f8c5 8004 	str.w	r8, [r5, #4]
 8017276:	4652      	mov	r2, sl
 8017278:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801727c:	4621      	mov	r1, r4
 801727e:	9b01      	ldr	r3, [sp, #4]
 8017280:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017284:	f8c8 9004 	str.w	r9, [r8, #4]
 8017288:	4798      	blx	r3
 801728a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801728c:	f8c8 0008 	str.w	r0, [r8, #8]
 8017290:	689b      	ldr	r3, [r3, #8]
 8017292:	2b00      	cmp	r3, #0
 8017294:	f000 814a 	beq.w	801752c <rcl_wait_set_resize+0x310>
 8017298:	4622      	mov	r2, r4
 801729a:	4649      	mov	r1, r9
 801729c:	4618      	mov	r0, r3
 801729e:	f004 fe2b 	bl	801bef8 <memset>
 80172a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80172a4:	f04f 0800 	mov.w	r8, #0
 80172a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80172ac:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80172b0:	f8c5 800c 	str.w	r8, [r5, #12]
 80172b4:	f8c4 800c 	str.w	r8, [r4, #12]
 80172b8:	2e00      	cmp	r6, #0
 80172ba:	f040 809b 	bne.w	80173f4 <rcl_wait_set_resize+0x1d8>
 80172be:	68a8      	ldr	r0, [r5, #8]
 80172c0:	b128      	cbz	r0, 80172ce <rcl_wait_set_resize+0xb2>
 80172c2:	4649      	mov	r1, r9
 80172c4:	4790      	blx	r2
 80172c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80172c8:	60ae      	str	r6, [r5, #8]
 80172ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80172ce:	f04f 0800 	mov.w	r8, #0
 80172d2:	19f6      	adds	r6, r6, r7
 80172d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80172d8:	f040 80a2 	bne.w	8017420 <rcl_wait_set_resize+0x204>
 80172dc:	6960      	ldr	r0, [r4, #20]
 80172de:	b130      	cbz	r0, 80172ee <rcl_wait_set_resize+0xd2>
 80172e0:	4649      	mov	r1, r9
 80172e2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80172e4:	4798      	blx	r3
 80172e6:	6166      	str	r6, [r4, #20]
 80172e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80172ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80172ee:	2600      	movs	r6, #0
 80172f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80172f4:	616e      	str	r6, [r5, #20]
 80172f6:	6426      	str	r6, [r4, #64]	@ 0x40
 80172f8:	2f00      	cmp	r7, #0
 80172fa:	f040 80af 	bne.w	801745c <rcl_wait_set_resize+0x240>
 80172fe:	6928      	ldr	r0, [r5, #16]
 8017300:	b138      	cbz	r0, 8017312 <rcl_wait_set_resize+0xf6>
 8017302:	4649      	mov	r1, r9
 8017304:	47d0      	blx	sl
 8017306:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017308:	612f      	str	r7, [r5, #16]
 801730a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801730e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017312:	2600      	movs	r6, #0
 8017314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017316:	61ee      	str	r6, [r5, #28]
 8017318:	61a6      	str	r6, [r4, #24]
 801731a:	2b00      	cmp	r3, #0
 801731c:	f040 8093 	bne.w	8017446 <rcl_wait_set_resize+0x22a>
 8017320:	69a8      	ldr	r0, [r5, #24]
 8017322:	b120      	cbz	r0, 801732e <rcl_wait_set_resize+0x112>
 8017324:	4649      	mov	r1, r9
 8017326:	47d0      	blx	sl
 8017328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801732a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801732c:	61ab      	str	r3, [r5, #24]
 801732e:	6a20      	ldr	r0, [r4, #32]
 8017330:	b128      	cbz	r0, 801733e <rcl_wait_set_resize+0x122>
 8017332:	4649      	mov	r1, r9
 8017334:	47d0      	blx	sl
 8017336:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017338:	2300      	movs	r3, #0
 801733a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801733e:	2600      	movs	r6, #0
 8017340:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017342:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017344:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017348:	626e      	str	r6, [r5, #36]	@ 0x24
 801734a:	6266      	str	r6, [r4, #36]	@ 0x24
 801734c:	2b00      	cmp	r3, #0
 801734e:	f000 8098 	beq.w	8017482 <rcl_wait_set_resize+0x266>
 8017352:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017356:	463a      	mov	r2, r7
 8017358:	6a28      	ldr	r0, [r5, #32]
 801735a:	4651      	mov	r1, sl
 801735c:	47c8      	blx	r9
 801735e:	6228      	str	r0, [r5, #32]
 8017360:	2800      	cmp	r0, #0
 8017362:	d077      	beq.n	8017454 <rcl_wait_set_resize+0x238>
 8017364:	4652      	mov	r2, sl
 8017366:	4631      	mov	r1, r6
 8017368:	f004 fdc6 	bl	801bef8 <memset>
 801736c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801736e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017370:	463a      	mov	r2, r7
 8017372:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017374:	4651      	mov	r1, sl
 8017376:	626b      	str	r3, [r5, #36]	@ 0x24
 8017378:	62a6      	str	r6, [r4, #40]	@ 0x28
 801737a:	47c8      	blx	r9
 801737c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801737e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017380:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8017382:	2c00      	cmp	r4, #0
 8017384:	f000 80f2 	beq.w	801756c <rcl_wait_set_resize+0x350>
 8017388:	4620      	mov	r0, r4
 801738a:	4652      	mov	r2, sl
 801738c:	4631      	mov	r1, r6
 801738e:	f004 fdb3 	bl	801bef8 <memset>
 8017392:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017394:	2600      	movs	r6, #0
 8017396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017398:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801739a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801739e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80173a0:	6326      	str	r6, [r4, #48]	@ 0x30
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f040 8097 	bne.w	80174d6 <rcl_wait_set_resize+0x2ba>
 80173a8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80173aa:	b120      	cbz	r0, 80173b6 <rcl_wait_set_resize+0x19a>
 80173ac:	4639      	mov	r1, r7
 80173ae:	47c0      	blx	r8
 80173b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80173b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80173b4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80173b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80173b8:	2800      	cmp	r0, #0
 80173ba:	d04c      	beq.n	8017456 <rcl_wait_set_resize+0x23a>
 80173bc:	4639      	mov	r1, r7
 80173be:	47c0      	blx	r8
 80173c0:	2300      	movs	r3, #0
 80173c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80173c4:	4618      	mov	r0, r3
 80173c6:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 80173ca:	b003      	add	sp, #12
 80173cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173d0:	6800      	ldr	r0, [r0, #0]
 80173d2:	b120      	cbz	r0, 80173de <rcl_wait_set_resize+0x1c2>
 80173d4:	4651      	mov	r1, sl
 80173d6:	47d8      	blx	fp
 80173d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80173da:	f8c5 8000 	str.w	r8, [r5]
 80173de:	68a0      	ldr	r0, [r4, #8]
 80173e0:	2800      	cmp	r0, #0
 80173e2:	f43f af5f 	beq.w	80172a4 <rcl_wait_set_resize+0x88>
 80173e6:	4651      	mov	r1, sl
 80173e8:	47d8      	blx	fp
 80173ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80173ec:	2300      	movs	r3, #0
 80173ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80173f2:	e757      	b.n	80172a4 <rcl_wait_set_resize+0x88>
 80173f4:	00b4      	lsls	r4, r6, #2
 80173f6:	464a      	mov	r2, r9
 80173f8:	68a8      	ldr	r0, [r5, #8]
 80173fa:	4621      	mov	r1, r4
 80173fc:	4798      	blx	r3
 80173fe:	60a8      	str	r0, [r5, #8]
 8017400:	b340      	cbz	r0, 8017454 <rcl_wait_set_resize+0x238>
 8017402:	4622      	mov	r2, r4
 8017404:	4641      	mov	r1, r8
 8017406:	f004 fd77 	bl	801bef8 <memset>
 801740a:	f04f 0800 	mov.w	r8, #0
 801740e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017410:	60ee      	str	r6, [r5, #12]
 8017412:	19f6      	adds	r6, r6, r7
 8017414:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017418:	f8c4 8010 	str.w	r8, [r4, #16]
 801741c:	f43f af5e 	beq.w	80172dc <rcl_wait_set_resize+0xc0>
 8017420:	00b6      	lsls	r6, r6, #2
 8017422:	464a      	mov	r2, r9
 8017424:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017426:	6960      	ldr	r0, [r4, #20]
 8017428:	4631      	mov	r1, r6
 801742a:	4798      	blx	r3
 801742c:	4681      	mov	r9, r0
 801742e:	6160      	str	r0, [r4, #20]
 8017430:	2800      	cmp	r0, #0
 8017432:	f000 8084 	beq.w	801753e <rcl_wait_set_resize+0x322>
 8017436:	4632      	mov	r2, r6
 8017438:	4641      	mov	r1, r8
 801743a:	f004 fd5d 	bl	801bef8 <memset>
 801743e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017440:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017444:	e753      	b.n	80172ee <rcl_wait_set_resize+0xd2>
 8017446:	009c      	lsls	r4, r3, #2
 8017448:	464a      	mov	r2, r9
 801744a:	69a8      	ldr	r0, [r5, #24]
 801744c:	4621      	mov	r1, r4
 801744e:	47c0      	blx	r8
 8017450:	61a8      	str	r0, [r5, #24]
 8017452:	bb40      	cbnz	r0, 80174a6 <rcl_wait_set_resize+0x28a>
 8017454:	200a      	movs	r0, #10
 8017456:	b003      	add	sp, #12
 8017458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745c:	00bc      	lsls	r4, r7, #2
 801745e:	464a      	mov	r2, r9
 8017460:	6928      	ldr	r0, [r5, #16]
 8017462:	4621      	mov	r1, r4
 8017464:	47c0      	blx	r8
 8017466:	6128      	str	r0, [r5, #16]
 8017468:	2800      	cmp	r0, #0
 801746a:	d0f3      	beq.n	8017454 <rcl_wait_set_resize+0x238>
 801746c:	4622      	mov	r2, r4
 801746e:	4631      	mov	r1, r6
 8017470:	f004 fd42 	bl	801bef8 <memset>
 8017474:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017476:	616f      	str	r7, [r5, #20]
 8017478:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801747c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017480:	e747      	b.n	8017312 <rcl_wait_set_resize+0xf6>
 8017482:	6a28      	ldr	r0, [r5, #32]
 8017484:	b120      	cbz	r0, 8017490 <rcl_wait_set_resize+0x274>
 8017486:	4639      	mov	r1, r7
 8017488:	47c0      	blx	r8
 801748a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801748c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801748e:	622b      	str	r3, [r5, #32]
 8017490:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017492:	2800      	cmp	r0, #0
 8017494:	f43f af7e 	beq.w	8017394 <rcl_wait_set_resize+0x178>
 8017498:	4639      	mov	r1, r7
 801749a:	47c0      	blx	r8
 801749c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801749e:	2300      	movs	r3, #0
 80174a0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80174a4:	e776      	b.n	8017394 <rcl_wait_set_resize+0x178>
 80174a6:	4622      	mov	r2, r4
 80174a8:	4631      	mov	r1, r6
 80174aa:	f004 fd25 	bl	801bef8 <memset>
 80174ae:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80174b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174b2:	464a      	mov	r2, r9
 80174b4:	6a38      	ldr	r0, [r7, #32]
 80174b6:	4621      	mov	r1, r4
 80174b8:	61eb      	str	r3, [r5, #28]
 80174ba:	61fe      	str	r6, [r7, #28]
 80174bc:	47c0      	blx	r8
 80174be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174c0:	6238      	str	r0, [r7, #32]
 80174c2:	6a1f      	ldr	r7, [r3, #32]
 80174c4:	2f00      	cmp	r7, #0
 80174c6:	d04a      	beq.n	801755e <rcl_wait_set_resize+0x342>
 80174c8:	4622      	mov	r2, r4
 80174ca:	4631      	mov	r1, r6
 80174cc:	4638      	mov	r0, r7
 80174ce:	f004 fd13 	bl	801bef8 <memset>
 80174d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80174d4:	e733      	b.n	801733e <rcl_wait_set_resize+0x122>
 80174d6:	009c      	lsls	r4, r3, #2
 80174d8:	463a      	mov	r2, r7
 80174da:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80174dc:	4621      	mov	r1, r4
 80174de:	47c8      	blx	r9
 80174e0:	62a8      	str	r0, [r5, #40]	@ 0x28
 80174e2:	2800      	cmp	r0, #0
 80174e4:	d0b6      	beq.n	8017454 <rcl_wait_set_resize+0x238>
 80174e6:	4622      	mov	r2, r4
 80174e8:	4631      	mov	r1, r6
 80174ea:	f004 fd05 	bl	801bef8 <memset>
 80174ee:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80174f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174f4:	463a      	mov	r2, r7
 80174f6:	4621      	mov	r1, r4
 80174f8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80174fc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80174fe:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017502:	47c8      	blx	r9
 8017504:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017506:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801750c:	2b00      	cmp	r3, #0
 801750e:	d034      	beq.n	801757a <rcl_wait_set_resize+0x35e>
 8017510:	4622      	mov	r2, r4
 8017512:	4631      	mov	r1, r6
 8017514:	4618      	mov	r0, r3
 8017516:	f004 fcef 	bl	801bef8 <memset>
 801751a:	4630      	mov	r0, r6
 801751c:	b003      	add	sp, #12
 801751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017522:	200b      	movs	r0, #11
 8017524:	4770      	bx	lr
 8017526:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801752a:	e794      	b.n	8017456 <rcl_wait_set_resize+0x23a>
 801752c:	6828      	ldr	r0, [r5, #0]
 801752e:	4651      	mov	r1, sl
 8017530:	9301      	str	r3, [sp, #4]
 8017532:	47d8      	blx	fp
 8017534:	9b01      	ldr	r3, [sp, #4]
 8017536:	200a      	movs	r0, #10
 8017538:	e9c5 3300 	strd	r3, r3, [r5]
 801753c:	e78b      	b.n	8017456 <rcl_wait_set_resize+0x23a>
 801753e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017540:	68a8      	ldr	r0, [r5, #8]
 8017542:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017546:	4798      	blx	r3
 8017548:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801754a:	6928      	ldr	r0, [r5, #16]
 801754c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801754e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017550:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8017554:	4790      	blx	r2
 8017556:	200a      	movs	r0, #10
 8017558:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801755c:	e77b      	b.n	8017456 <rcl_wait_set_resize+0x23a>
 801755e:	69a8      	ldr	r0, [r5, #24]
 8017560:	4649      	mov	r1, r9
 8017562:	47d0      	blx	sl
 8017564:	200a      	movs	r0, #10
 8017566:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801756a:	e774      	b.n	8017456 <rcl_wait_set_resize+0x23a>
 801756c:	6a28      	ldr	r0, [r5, #32]
 801756e:	4639      	mov	r1, r7
 8017570:	47c0      	blx	r8
 8017572:	200a      	movs	r0, #10
 8017574:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017578:	e76d      	b.n	8017456 <rcl_wait_set_resize+0x23a>
 801757a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801757c:	4639      	mov	r1, r7
 801757e:	9301      	str	r3, [sp, #4]
 8017580:	47c0      	blx	r8
 8017582:	9b01      	ldr	r3, [sp, #4]
 8017584:	200a      	movs	r0, #10
 8017586:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801758a:	e764      	b.n	8017456 <rcl_wait_set_resize+0x23a>

0801758c <rcl_wait_set_init>:
 801758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017590:	b085      	sub	sp, #20
 8017592:	4605      	mov	r5, r0
 8017594:	460e      	mov	r6, r1
 8017596:	4617      	mov	r7, r2
 8017598:	a812      	add	r0, sp, #72	@ 0x48
 801759a:	4698      	mov	r8, r3
 801759c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80175a0:	f7f7 ffe6 	bl	800f570 <rcutils_allocator_is_valid>
 80175a4:	2d00      	cmp	r5, #0
 80175a6:	d072      	beq.n	801768e <rcl_wait_set_init+0x102>
 80175a8:	f080 0001 	eor.w	r0, r0, #1
 80175ac:	b2c0      	uxtb	r0, r0
 80175ae:	2800      	cmp	r0, #0
 80175b0:	d16d      	bne.n	801768e <rcl_wait_set_init+0x102>
 80175b2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80175b6:	f1ba 0f00 	cmp.w	sl, #0
 80175ba:	d004      	beq.n	80175c6 <rcl_wait_set_init+0x3a>
 80175bc:	2464      	movs	r4, #100	@ 0x64
 80175be:	4620      	mov	r0, r4
 80175c0:	b005      	add	sp, #20
 80175c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c6:	f1b9 0f00 	cmp.w	r9, #0
 80175ca:	d060      	beq.n	801768e <rcl_wait_set_init+0x102>
 80175cc:	4648      	mov	r0, r9
 80175ce:	f7fe faa3 	bl	8015b18 <rcl_context_is_valid>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d068      	beq.n	80176a8 <rcl_wait_set_init+0x11c>
 80175d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80175d8:	205c      	movs	r0, #92	@ 0x5c
 80175da:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80175dc:	4798      	blx	r3
 80175de:	6328      	str	r0, [r5, #48]	@ 0x30
 80175e0:	2800      	cmp	r0, #0
 80175e2:	d063      	beq.n	80176ac <rcl_wait_set_init+0x120>
 80175e4:	225c      	movs	r2, #92	@ 0x5c
 80175e6:	4651      	mov	r1, sl
 80175e8:	f004 fc86 	bl	801bef8 <memset>
 80175ec:	ac12      	add	r4, sp, #72	@ 0x48
 80175ee:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 80175f2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80175f6:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 80175fa:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 80175fe:	eb03 0e02 	add.w	lr, r3, r2
 8017602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017604:	f8d9 9000 	ldr.w	r9, [r9]
 8017608:	449e      	add	lr, r3
 801760a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801760c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017610:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017614:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017618:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801761c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8017620:	44be      	add	lr, r7
 8017622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017626:	6823      	ldr	r3, [r4, #0]
 8017628:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801762c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8017630:	f8cc 3000 	str.w	r3, [ip]
 8017634:	f002 fa2a 	bl	8019a8c <rmw_create_wait_set>
 8017638:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801763a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801763e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017640:	b350      	cbz	r0, 8017698 <rcl_wait_set_init+0x10c>
 8017642:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8017644:	4643      	mov	r3, r8
 8017646:	463a      	mov	r2, r7
 8017648:	4631      	mov	r1, r6
 801764a:	9402      	str	r4, [sp, #8]
 801764c:	4628      	mov	r0, r5
 801764e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8017650:	9401      	str	r4, [sp, #4]
 8017652:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017654:	9400      	str	r4, [sp, #0]
 8017656:	f7ff fde1 	bl	801721c <rcl_wait_set_resize>
 801765a:	4604      	mov	r4, r0
 801765c:	2800      	cmp	r0, #0
 801765e:	d0ae      	beq.n	80175be <rcl_wait_set_init+0x32>
 8017660:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017662:	bb2b      	cbnz	r3, 80176b0 <rcl_wait_set_init+0x124>
 8017664:	2600      	movs	r6, #0
 8017666:	4628      	mov	r0, r5
 8017668:	4633      	mov	r3, r6
 801766a:	4632      	mov	r2, r6
 801766c:	4631      	mov	r1, r6
 801766e:	9600      	str	r6, [sp, #0]
 8017670:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017674:	f7ff fdd2 	bl	801721c <rcl_wait_set_resize>
 8017678:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801767a:	2800      	cmp	r0, #0
 801767c:	d09f      	beq.n	80175be <rcl_wait_set_init+0x32>
 801767e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017680:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017682:	4798      	blx	r3
 8017684:	4620      	mov	r0, r4
 8017686:	632e      	str	r6, [r5, #48]	@ 0x30
 8017688:	b005      	add	sp, #20
 801768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801768e:	240b      	movs	r4, #11
 8017690:	4620      	mov	r0, r4
 8017692:	b005      	add	sp, #20
 8017694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017698:	2401      	movs	r4, #1
 801769a:	f002 fa01 	bl	8019aa0 <rmw_destroy_wait_set>
 801769e:	2800      	cmp	r0, #0
 80176a0:	bf18      	it	ne
 80176a2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 80176a6:	e7dd      	b.n	8017664 <rcl_wait_set_init+0xd8>
 80176a8:	2465      	movs	r4, #101	@ 0x65
 80176aa:	e788      	b.n	80175be <rcl_wait_set_init+0x32>
 80176ac:	240a      	movs	r4, #10
 80176ae:	e786      	b.n	80175be <rcl_wait_set_init+0x32>
 80176b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80176b2:	e7f2      	b.n	801769a <rcl_wait_set_init+0x10e>

080176b4 <rcl_wait_set_add_guard_condition>:
 80176b4:	b318      	cbz	r0, 80176fe <rcl_wait_set_add_guard_condition+0x4a>
 80176b6:	b538      	push	{r3, r4, r5, lr}
 80176b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80176ba:	4604      	mov	r4, r0
 80176bc:	b30b      	cbz	r3, 8017702 <rcl_wait_set_add_guard_condition+0x4e>
 80176be:	b319      	cbz	r1, 8017708 <rcl_wait_set_add_guard_condition+0x54>
 80176c0:	68dd      	ldr	r5, [r3, #12]
 80176c2:	68c0      	ldr	r0, [r0, #12]
 80176c4:	4285      	cmp	r5, r0
 80176c6:	d217      	bcs.n	80176f8 <rcl_wait_set_add_guard_condition+0x44>
 80176c8:	1c68      	adds	r0, r5, #1
 80176ca:	60d8      	str	r0, [r3, #12]
 80176cc:	68a3      	ldr	r3, [r4, #8]
 80176ce:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80176d2:	b102      	cbz	r2, 80176d6 <rcl_wait_set_add_guard_condition+0x22>
 80176d4:	6015      	str	r5, [r2, #0]
 80176d6:	4608      	mov	r0, r1
 80176d8:	f003 fdc2 	bl	801b260 <rcl_guard_condition_get_rmw_handle>
 80176dc:	b150      	cbz	r0, 80176f4 <rcl_wait_set_add_guard_condition+0x40>
 80176de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176e0:	6842      	ldr	r2, [r0, #4]
 80176e2:	2000      	movs	r0, #0
 80176e4:	695b      	ldr	r3, [r3, #20]
 80176e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80176ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80176ec:	6913      	ldr	r3, [r2, #16]
 80176ee:	3301      	adds	r3, #1
 80176f0:	6113      	str	r3, [r2, #16]
 80176f2:	bd38      	pop	{r3, r4, r5, pc}
 80176f4:	2001      	movs	r0, #1
 80176f6:	bd38      	pop	{r3, r4, r5, pc}
 80176f8:	f240 3086 	movw	r0, #902	@ 0x386
 80176fc:	bd38      	pop	{r3, r4, r5, pc}
 80176fe:	200b      	movs	r0, #11
 8017700:	4770      	bx	lr
 8017702:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017706:	bd38      	pop	{r3, r4, r5, pc}
 8017708:	200b      	movs	r0, #11
 801770a:	bd38      	pop	{r3, r4, r5, pc}

0801770c <rcl_wait_set_add_timer>:
 801770c:	b328      	cbz	r0, 801775a <rcl_wait_set_add_timer+0x4e>
 801770e:	b538      	push	{r3, r4, r5, lr}
 8017710:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017712:	4604      	mov	r4, r0
 8017714:	b31b      	cbz	r3, 801775e <rcl_wait_set_add_timer+0x52>
 8017716:	b329      	cbz	r1, 8017764 <rcl_wait_set_add_timer+0x58>
 8017718:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801771a:	6965      	ldr	r5, [r4, #20]
 801771c:	42a8      	cmp	r0, r5
 801771e:	d219      	bcs.n	8017754 <rcl_wait_set_add_timer+0x48>
 8017720:	1c45      	adds	r5, r0, #1
 8017722:	641d      	str	r5, [r3, #64]	@ 0x40
 8017724:	6923      	ldr	r3, [r4, #16]
 8017726:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801772a:	b102      	cbz	r2, 801772e <rcl_wait_set_add_timer+0x22>
 801772c:	6010      	str	r0, [r2, #0]
 801772e:	4608      	mov	r0, r1
 8017730:	f7ff fb9a 	bl	8016e68 <rcl_timer_get_guard_condition>
 8017734:	b168      	cbz	r0, 8017752 <rcl_wait_set_add_timer+0x46>
 8017736:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017738:	68e3      	ldr	r3, [r4, #12]
 801773a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801773c:	3b01      	subs	r3, #1
 801773e:	441d      	add	r5, r3
 8017740:	f003 fd8e 	bl	801b260 <rcl_guard_condition_get_rmw_handle>
 8017744:	b180      	cbz	r0, 8017768 <rcl_wait_set_add_timer+0x5c>
 8017746:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017748:	6842      	ldr	r2, [r0, #4]
 801774a:	2000      	movs	r0, #0
 801774c:	695b      	ldr	r3, [r3, #20]
 801774e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017752:	bd38      	pop	{r3, r4, r5, pc}
 8017754:	f240 3086 	movw	r0, #902	@ 0x386
 8017758:	bd38      	pop	{r3, r4, r5, pc}
 801775a:	200b      	movs	r0, #11
 801775c:	4770      	bx	lr
 801775e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017762:	bd38      	pop	{r3, r4, r5, pc}
 8017764:	200b      	movs	r0, #11
 8017766:	bd38      	pop	{r3, r4, r5, pc}
 8017768:	2001      	movs	r0, #1
 801776a:	bd38      	pop	{r3, r4, r5, pc}

0801776c <rcl_wait_set_add_client>:
 801776c:	b318      	cbz	r0, 80177b6 <rcl_wait_set_add_client+0x4a>
 801776e:	b538      	push	{r3, r4, r5, lr}
 8017770:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017772:	4604      	mov	r4, r0
 8017774:	b30b      	cbz	r3, 80177ba <rcl_wait_set_add_client+0x4e>
 8017776:	b319      	cbz	r1, 80177c0 <rcl_wait_set_add_client+0x54>
 8017778:	699d      	ldr	r5, [r3, #24]
 801777a:	69c0      	ldr	r0, [r0, #28]
 801777c:	4285      	cmp	r5, r0
 801777e:	d217      	bcs.n	80177b0 <rcl_wait_set_add_client+0x44>
 8017780:	1c68      	adds	r0, r5, #1
 8017782:	6198      	str	r0, [r3, #24]
 8017784:	69a3      	ldr	r3, [r4, #24]
 8017786:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801778a:	b102      	cbz	r2, 801778e <rcl_wait_set_add_client+0x22>
 801778c:	6015      	str	r5, [r2, #0]
 801778e:	4608      	mov	r0, r1
 8017790:	f7fe f914 	bl	80159bc <rcl_client_get_rmw_handle>
 8017794:	b150      	cbz	r0, 80177ac <rcl_wait_set_add_client+0x40>
 8017796:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017798:	6842      	ldr	r2, [r0, #4]
 801779a:	2000      	movs	r0, #0
 801779c:	6a1b      	ldr	r3, [r3, #32]
 801779e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80177a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80177a4:	69d3      	ldr	r3, [r2, #28]
 80177a6:	3301      	adds	r3, #1
 80177a8:	61d3      	str	r3, [r2, #28]
 80177aa:	bd38      	pop	{r3, r4, r5, pc}
 80177ac:	2001      	movs	r0, #1
 80177ae:	bd38      	pop	{r3, r4, r5, pc}
 80177b0:	f240 3086 	movw	r0, #902	@ 0x386
 80177b4:	bd38      	pop	{r3, r4, r5, pc}
 80177b6:	200b      	movs	r0, #11
 80177b8:	4770      	bx	lr
 80177ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80177be:	bd38      	pop	{r3, r4, r5, pc}
 80177c0:	200b      	movs	r0, #11
 80177c2:	bd38      	pop	{r3, r4, r5, pc}

080177c4 <rcl_wait_set_add_service>:
 80177c4:	b318      	cbz	r0, 801780e <rcl_wait_set_add_service+0x4a>
 80177c6:	b538      	push	{r3, r4, r5, lr}
 80177c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80177ca:	4604      	mov	r4, r0
 80177cc:	b30b      	cbz	r3, 8017812 <rcl_wait_set_add_service+0x4e>
 80177ce:	b319      	cbz	r1, 8017818 <rcl_wait_set_add_service+0x54>
 80177d0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80177d2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80177d4:	4285      	cmp	r5, r0
 80177d6:	d217      	bcs.n	8017808 <rcl_wait_set_add_service+0x44>
 80177d8:	1c68      	adds	r0, r5, #1
 80177da:	6258      	str	r0, [r3, #36]	@ 0x24
 80177dc:	6a23      	ldr	r3, [r4, #32]
 80177de:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80177e2:	b102      	cbz	r2, 80177e6 <rcl_wait_set_add_service+0x22>
 80177e4:	6015      	str	r5, [r2, #0]
 80177e6:	4608      	mov	r0, r1
 80177e8:	f7fe fea2 	bl	8016530 <rcl_service_get_rmw_handle>
 80177ec:	b150      	cbz	r0, 8017804 <rcl_wait_set_add_service+0x40>
 80177ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177f0:	6842      	ldr	r2, [r0, #4]
 80177f2:	2000      	movs	r0, #0
 80177f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80177fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80177fc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80177fe:	3301      	adds	r3, #1
 8017800:	6293      	str	r3, [r2, #40]	@ 0x28
 8017802:	bd38      	pop	{r3, r4, r5, pc}
 8017804:	2001      	movs	r0, #1
 8017806:	bd38      	pop	{r3, r4, r5, pc}
 8017808:	f240 3086 	movw	r0, #902	@ 0x386
 801780c:	bd38      	pop	{r3, r4, r5, pc}
 801780e:	200b      	movs	r0, #11
 8017810:	4770      	bx	lr
 8017812:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017816:	bd38      	pop	{r3, r4, r5, pc}
 8017818:	200b      	movs	r0, #11
 801781a:	bd38      	pop	{r3, r4, r5, pc}
 801781c:	0000      	movs	r0, r0
	...

08017820 <rcl_wait>:
 8017820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017824:	ed2d 8b02 	vpush	{d8}
 8017828:	b08d      	sub	sp, #52	@ 0x34
 801782a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801782e:	2800      	cmp	r0, #0
 8017830:	f000 814f 	beq.w	8017ad2 <rcl_wait+0x2b2>
 8017834:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017836:	4605      	mov	r5, r0
 8017838:	2e00      	cmp	r6, #0
 801783a:	f000 811a 	beq.w	8017a72 <rcl_wait+0x252>
 801783e:	6843      	ldr	r3, [r0, #4]
 8017840:	b983      	cbnz	r3, 8017864 <rcl_wait+0x44>
 8017842:	68eb      	ldr	r3, [r5, #12]
 8017844:	b973      	cbnz	r3, 8017864 <rcl_wait+0x44>
 8017846:	696b      	ldr	r3, [r5, #20]
 8017848:	b963      	cbnz	r3, 8017864 <rcl_wait+0x44>
 801784a:	69eb      	ldr	r3, [r5, #28]
 801784c:	b953      	cbnz	r3, 8017864 <rcl_wait+0x44>
 801784e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017850:	b943      	cbnz	r3, 8017864 <rcl_wait+0x44>
 8017852:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017854:	b933      	cbnz	r3, 8017864 <rcl_wait+0x44>
 8017856:	f240 3085 	movw	r0, #901	@ 0x385
 801785a:	b00d      	add	sp, #52	@ 0x34
 801785c:	ecbd 8b02 	vpop	{d8}
 8017860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017864:	9b04      	ldr	r3, [sp, #16]
 8017866:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017868:	2b01      	cmp	r3, #1
 801786a:	9b05      	ldr	r3, [sp, #20]
 801786c:	f173 0300 	sbcs.w	r3, r3, #0
 8017870:	f2c0 80f8 	blt.w	8017a64 <rcl_wait+0x244>
 8017874:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017878:	2a00      	cmp	r2, #0
 801787a:	f000 810f 	beq.w	8017a9c <rcl_wait+0x27c>
 801787e:	2400      	movs	r4, #0
 8017880:	4613      	mov	r3, r2
 8017882:	f240 3921 	movw	r9, #801	@ 0x321
 8017886:	4632      	mov	r2, r6
 8017888:	46a2      	mov	sl, r4
 801788a:	46a3      	mov	fp, r4
 801788c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8017af0 <rcl_wait+0x2d0>
 8017890:	e014      	b.n	80178bc <rcl_wait+0x9c>
 8017892:	2800      	cmp	r0, #0
 8017894:	d1e1      	bne.n	801785a <rcl_wait+0x3a>
 8017896:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801789a:	4542      	cmp	r2, r8
 801789c:	eb73 0107 	sbcs.w	r1, r3, r7
 80178a0:	da03      	bge.n	80178aa <rcl_wait+0x8a>
 80178a2:	4690      	mov	r8, r2
 80178a4:	461f      	mov	r7, r3
 80178a6:	f04f 0b01 	mov.w	fp, #1
 80178aa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80178ac:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80178ae:	3401      	adds	r4, #1
 80178b0:	f14a 0a00 	adc.w	sl, sl, #0
 80178b4:	429c      	cmp	r4, r3
 80178b6:	f17a 0100 	sbcs.w	r1, sl, #0
 80178ba:	d228      	bcs.n	801790e <rcl_wait+0xee>
 80178bc:	6928      	ldr	r0, [r5, #16]
 80178be:	a908      	add	r1, sp, #32
 80178c0:	00a6      	lsls	r6, r4, #2
 80178c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d0f1      	beq.n	80178ae <rcl_wait+0x8e>
 80178ca:	68eb      	ldr	r3, [r5, #12]
 80178cc:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80178d0:	4423      	add	r3, r4
 80178d2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80178d6:	f1be 0f00 	cmp.w	lr, #0
 80178da:	d006      	beq.n	80178ea <rcl_wait+0xca>
 80178dc:	6913      	ldr	r3, [r2, #16]
 80178de:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80178e2:	3301      	adds	r3, #1
 80178e4:	6113      	str	r3, [r2, #16]
 80178e6:	692b      	ldr	r3, [r5, #16]
 80178e8:	5998      	ldr	r0, [r3, r6]
 80178ea:	ed8d 8b08 	vstr	d8, [sp, #32]
 80178ee:	f7ff fa89 	bl	8016e04 <rcl_timer_get_time_until_next_call>
 80178f2:	4548      	cmp	r0, r9
 80178f4:	d1cd      	bne.n	8017892 <rcl_wait+0x72>
 80178f6:	692b      	ldr	r3, [r5, #16]
 80178f8:	2200      	movs	r2, #0
 80178fa:	3401      	adds	r4, #1
 80178fc:	519a      	str	r2, [r3, r6]
 80178fe:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017900:	f14a 0a00 	adc.w	sl, sl, #0
 8017904:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017906:	429c      	cmp	r4, r3
 8017908:	f17a 0100 	sbcs.w	r1, sl, #0
 801790c:	d3d6      	bcc.n	80178bc <rcl_wait+0x9c>
 801790e:	4659      	mov	r1, fp
 8017910:	4616      	mov	r6, r2
 8017912:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017916:	4313      	orrs	r3, r2
 8017918:	f040 80b4 	bne.w	8017a84 <rcl_wait+0x264>
 801791c:	2300      	movs	r3, #0
 801791e:	2200      	movs	r2, #0
 8017920:	460c      	mov	r4, r1
 8017922:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017926:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801792a:	ab08      	add	r3, sp, #32
 801792c:	9302      	str	r3, [sp, #8]
 801792e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8017932:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017934:	f106 0110 	add.w	r1, r6, #16
 8017938:	9300      	str	r3, [sp, #0]
 801793a:	1d30      	adds	r0, r6, #4
 801793c:	f106 031c 	add.w	r3, r6, #28
 8017940:	9201      	str	r2, [sp, #4]
 8017942:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8017946:	f001 ff3d 	bl	80197c4 <rmw_wait>
 801794a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801794c:	4680      	mov	r8, r0
 801794e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017950:	b1e2      	cbz	r2, 801798c <rcl_wait+0x16c>
 8017952:	f04f 0900 	mov.w	r9, #0
 8017956:	464f      	mov	r7, r9
 8017958:	692a      	ldr	r2, [r5, #16]
 801795a:	f10d 011f 	add.w	r1, sp, #31
 801795e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8017962:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8017966:	b160      	cbz	r0, 8017982 <rcl_wait+0x162>
 8017968:	f88d 701f 	strb.w	r7, [sp, #31]
 801796c:	f7ff fa0e 	bl	8016d8c <rcl_timer_is_ready>
 8017970:	2800      	cmp	r0, #0
 8017972:	f47f af72 	bne.w	801785a <rcl_wait+0x3a>
 8017976:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801797a:	b90b      	cbnz	r3, 8017980 <rcl_wait+0x160>
 801797c:	692a      	ldr	r2, [r5, #16]
 801797e:	5193      	str	r3, [r2, r6]
 8017980:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017982:	f109 0901 	add.w	r9, r9, #1
 8017986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017988:	454a      	cmp	r2, r9
 801798a:	d8e5      	bhi.n	8017958 <rcl_wait+0x138>
 801798c:	f038 0002 	bics.w	r0, r8, #2
 8017990:	d176      	bne.n	8017a80 <rcl_wait+0x260>
 8017992:	686f      	ldr	r7, [r5, #4]
 8017994:	b17f      	cbz	r7, 80179b6 <rcl_wait+0x196>
 8017996:	4602      	mov	r2, r0
 8017998:	e002      	b.n	80179a0 <rcl_wait+0x180>
 801799a:	3201      	adds	r2, #1
 801799c:	42ba      	cmp	r2, r7
 801799e:	d00a      	beq.n	80179b6 <rcl_wait+0x196>
 80179a0:	6899      	ldr	r1, [r3, #8]
 80179a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80179a6:	2900      	cmp	r1, #0
 80179a8:	d1f7      	bne.n	801799a <rcl_wait+0x17a>
 80179aa:	682e      	ldr	r6, [r5, #0]
 80179ac:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80179b0:	3201      	adds	r2, #1
 80179b2:	42ba      	cmp	r2, r7
 80179b4:	d1f4      	bne.n	80179a0 <rcl_wait+0x180>
 80179b6:	68ef      	ldr	r7, [r5, #12]
 80179b8:	b17f      	cbz	r7, 80179da <rcl_wait+0x1ba>
 80179ba:	2200      	movs	r2, #0
 80179bc:	e002      	b.n	80179c4 <rcl_wait+0x1a4>
 80179be:	3201      	adds	r2, #1
 80179c0:	42ba      	cmp	r2, r7
 80179c2:	d00a      	beq.n	80179da <rcl_wait+0x1ba>
 80179c4:	6959      	ldr	r1, [r3, #20]
 80179c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80179ca:	2900      	cmp	r1, #0
 80179cc:	d1f7      	bne.n	80179be <rcl_wait+0x19e>
 80179ce:	68ae      	ldr	r6, [r5, #8]
 80179d0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80179d4:	3201      	adds	r2, #1
 80179d6:	42ba      	cmp	r2, r7
 80179d8:	d1f4      	bne.n	80179c4 <rcl_wait+0x1a4>
 80179da:	69ef      	ldr	r7, [r5, #28]
 80179dc:	b17f      	cbz	r7, 80179fe <rcl_wait+0x1de>
 80179de:	2200      	movs	r2, #0
 80179e0:	e002      	b.n	80179e8 <rcl_wait+0x1c8>
 80179e2:	3201      	adds	r2, #1
 80179e4:	42ba      	cmp	r2, r7
 80179e6:	d00a      	beq.n	80179fe <rcl_wait+0x1de>
 80179e8:	6a19      	ldr	r1, [r3, #32]
 80179ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80179ee:	2900      	cmp	r1, #0
 80179f0:	d1f7      	bne.n	80179e2 <rcl_wait+0x1c2>
 80179f2:	69ae      	ldr	r6, [r5, #24]
 80179f4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80179f8:	3201      	adds	r2, #1
 80179fa:	42ba      	cmp	r2, r7
 80179fc:	d1f4      	bne.n	80179e8 <rcl_wait+0x1c8>
 80179fe:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8017a00:	b17f      	cbz	r7, 8017a22 <rcl_wait+0x202>
 8017a02:	2200      	movs	r2, #0
 8017a04:	e002      	b.n	8017a0c <rcl_wait+0x1ec>
 8017a06:	3201      	adds	r2, #1
 8017a08:	42ba      	cmp	r2, r7
 8017a0a:	d00a      	beq.n	8017a22 <rcl_wait+0x202>
 8017a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017a0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017a12:	2900      	cmp	r1, #0
 8017a14:	d1f7      	bne.n	8017a06 <rcl_wait+0x1e6>
 8017a16:	6a2e      	ldr	r6, [r5, #32]
 8017a18:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017a1c:	3201      	adds	r2, #1
 8017a1e:	42ba      	cmp	r2, r7
 8017a20:	d1f4      	bne.n	8017a0c <rcl_wait+0x1ec>
 8017a22:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8017a24:	b17f      	cbz	r7, 8017a46 <rcl_wait+0x226>
 8017a26:	2200      	movs	r2, #0
 8017a28:	e002      	b.n	8017a30 <rcl_wait+0x210>
 8017a2a:	3201      	adds	r2, #1
 8017a2c:	42ba      	cmp	r2, r7
 8017a2e:	d00a      	beq.n	8017a46 <rcl_wait+0x226>
 8017a30:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017a32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017a36:	2900      	cmp	r1, #0
 8017a38:	d1f7      	bne.n	8017a2a <rcl_wait+0x20a>
 8017a3a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8017a3c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017a40:	3201      	adds	r2, #1
 8017a42:	42ba      	cmp	r2, r7
 8017a44:	d1f4      	bne.n	8017a30 <rcl_wait+0x210>
 8017a46:	f1b8 0f02 	cmp.w	r8, #2
 8017a4a:	f47f af06 	bne.w	801785a <rcl_wait+0x3a>
 8017a4e:	f084 0301 	eor.w	r3, r4, #1
 8017a52:	b2db      	uxtb	r3, r3
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	bf18      	it	ne
 8017a58:	2002      	movne	r0, #2
 8017a5a:	b00d      	add	sp, #52	@ 0x34
 8017a5c:	ecbd 8b02 	vpop	{d8}
 8017a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a64:	2a00      	cmp	r2, #0
 8017a66:	d03a      	beq.n	8017ade <rcl_wait+0x2be>
 8017a68:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017a6c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017a70:	e705      	b.n	801787e <rcl_wait+0x5e>
 8017a72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017a76:	b00d      	add	sp, #52	@ 0x34
 8017a78:	ecbd 8b02 	vpop	{d8}
 8017a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a80:	2001      	movs	r0, #1
 8017a82:	e6ea      	b.n	801785a <rcl_wait+0x3a>
 8017a84:	9b04      	ldr	r3, [sp, #16]
 8017a86:	460c      	mov	r4, r1
 8017a88:	2b01      	cmp	r3, #1
 8017a8a:	9b05      	ldr	r3, [sp, #20]
 8017a8c:	f173 0300 	sbcs.w	r3, r3, #0
 8017a90:	bfa8      	it	ge
 8017a92:	f044 0401 	orrge.w	r4, r4, #1
 8017a96:	b914      	cbnz	r4, 8017a9e <rcl_wait+0x27e>
 8017a98:	4623      	mov	r3, r4
 8017a9a:	e747      	b.n	801792c <rcl_wait+0x10c>
 8017a9c:	4611      	mov	r1, r2
 8017a9e:	2f00      	cmp	r7, #0
 8017aa0:	da02      	bge.n	8017aa8 <rcl_wait+0x288>
 8017aa2:	f04f 0800 	mov.w	r8, #0
 8017aa6:	4647      	mov	r7, r8
 8017aa8:	460c      	mov	r4, r1
 8017aaa:	4640      	mov	r0, r8
 8017aac:	4639      	mov	r1, r7
 8017aae:	a312      	add	r3, pc, #72	@ (adr r3, 8017af8 <rcl_wait+0x2d8>)
 8017ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ab4:	f7e8 fc7c 	bl	80003b0 <__aeabi_ldivmod>
 8017ab8:	a30f      	add	r3, pc, #60	@ (adr r3, 8017af8 <rcl_wait+0x2d8>)
 8017aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017abe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017ac2:	4640      	mov	r0, r8
 8017ac4:	4639      	mov	r1, r7
 8017ac6:	f7e8 fc73 	bl	80003b0 <__aeabi_ldivmod>
 8017aca:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017ace:	ab08      	add	r3, sp, #32
 8017ad0:	e72c      	b.n	801792c <rcl_wait+0x10c>
 8017ad2:	200b      	movs	r0, #11
 8017ad4:	b00d      	add	sp, #52	@ 0x34
 8017ad6:	ecbd 8b02 	vpop	{d8}
 8017ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	4611      	mov	r1, r2
 8017ae0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017ae4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017ae8:	e713      	b.n	8017912 <rcl_wait+0xf2>
 8017aea:	bf00      	nop
 8017aec:	f3af 8000 	nop.w
 8017af0:	ffffffff 	.word	0xffffffff
 8017af4:	7fffffff 	.word	0x7fffffff
 8017af8:	3b9aca00 	.word	0x3b9aca00
 8017afc:	00000000 	.word	0x00000000

08017b00 <rcl_action_take_goal_response>:
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d039      	beq.n	8017b78 <rcl_action_take_goal_response+0x78>
 8017b04:	b570      	push	{r4, r5, r6, lr}
 8017b06:	4604      	mov	r4, r0
 8017b08:	6800      	ldr	r0, [r0, #0]
 8017b0a:	b380      	cbz	r0, 8017b6e <rcl_action_take_goal_response+0x6e>
 8017b0c:	460e      	mov	r6, r1
 8017b0e:	4615      	mov	r5, r2
 8017b10:	f7fd ffda 	bl	8015ac8 <rcl_client_is_valid>
 8017b14:	b330      	cbz	r0, 8017b64 <rcl_action_take_goal_response+0x64>
 8017b16:	6820      	ldr	r0, [r4, #0]
 8017b18:	3004      	adds	r0, #4
 8017b1a:	f7fd ffd5 	bl	8015ac8 <rcl_client_is_valid>
 8017b1e:	b308      	cbz	r0, 8017b64 <rcl_action_take_goal_response+0x64>
 8017b20:	6820      	ldr	r0, [r4, #0]
 8017b22:	3008      	adds	r0, #8
 8017b24:	f7fd ffd0 	bl	8015ac8 <rcl_client_is_valid>
 8017b28:	b1e0      	cbz	r0, 8017b64 <rcl_action_take_goal_response+0x64>
 8017b2a:	6820      	ldr	r0, [r4, #0]
 8017b2c:	300c      	adds	r0, #12
 8017b2e:	f7fe fdc3 	bl	80166b8 <rcl_subscription_is_valid>
 8017b32:	b1b8      	cbz	r0, 8017b64 <rcl_action_take_goal_response+0x64>
 8017b34:	6820      	ldr	r0, [r4, #0]
 8017b36:	3010      	adds	r0, #16
 8017b38:	f7fe fdbe 	bl	80166b8 <rcl_subscription_is_valid>
 8017b3c:	b190      	cbz	r0, 8017b64 <rcl_action_take_goal_response+0x64>
 8017b3e:	b1cd      	cbz	r5, 8017b74 <rcl_action_take_goal_response+0x74>
 8017b40:	b1c6      	cbz	r6, 8017b74 <rcl_action_take_goal_response+0x74>
 8017b42:	462a      	mov	r2, r5
 8017b44:	4631      	mov	r1, r6
 8017b46:	6820      	ldr	r0, [r4, #0]
 8017b48:	f7fd ff76 	bl	8015a38 <rcl_take_response>
 8017b4c:	b148      	cbz	r0, 8017b62 <rcl_action_take_goal_response+0x62>
 8017b4e:	280a      	cmp	r0, #10
 8017b50:	d007      	beq.n	8017b62 <rcl_action_take_goal_response+0x62>
 8017b52:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017b56:	f640 0337 	movw	r3, #2103	@ 0x837
 8017b5a:	4290      	cmp	r0, r2
 8017b5c:	bf0c      	ite	eq
 8017b5e:	4618      	moveq	r0, r3
 8017b60:	2001      	movne	r0, #1
 8017b62:	bd70      	pop	{r4, r5, r6, pc}
 8017b64:	f7f7 fd28 	bl	800f5b8 <rcutils_reset_error>
 8017b68:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b6c:	bd70      	pop	{r4, r5, r6, pc}
 8017b6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b72:	bd70      	pop	{r4, r5, r6, pc}
 8017b74:	200b      	movs	r0, #11
 8017b76:	bd70      	pop	{r4, r5, r6, pc}
 8017b78:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b7c:	4770      	bx	lr
 8017b7e:	bf00      	nop

08017b80 <rcl_action_send_result_request>:
 8017b80:	b390      	cbz	r0, 8017be8 <rcl_action_send_result_request+0x68>
 8017b82:	b570      	push	{r4, r5, r6, lr}
 8017b84:	4604      	mov	r4, r0
 8017b86:	6800      	ldr	r0, [r0, #0]
 8017b88:	b348      	cbz	r0, 8017bde <rcl_action_send_result_request+0x5e>
 8017b8a:	460e      	mov	r6, r1
 8017b8c:	4615      	mov	r5, r2
 8017b8e:	f7fd ff9b 	bl	8015ac8 <rcl_client_is_valid>
 8017b92:	b1f8      	cbz	r0, 8017bd4 <rcl_action_send_result_request+0x54>
 8017b94:	6820      	ldr	r0, [r4, #0]
 8017b96:	3004      	adds	r0, #4
 8017b98:	f7fd ff96 	bl	8015ac8 <rcl_client_is_valid>
 8017b9c:	b1d0      	cbz	r0, 8017bd4 <rcl_action_send_result_request+0x54>
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	3008      	adds	r0, #8
 8017ba2:	f7fd ff91 	bl	8015ac8 <rcl_client_is_valid>
 8017ba6:	b1a8      	cbz	r0, 8017bd4 <rcl_action_send_result_request+0x54>
 8017ba8:	6820      	ldr	r0, [r4, #0]
 8017baa:	300c      	adds	r0, #12
 8017bac:	f7fe fd84 	bl	80166b8 <rcl_subscription_is_valid>
 8017bb0:	b180      	cbz	r0, 8017bd4 <rcl_action_send_result_request+0x54>
 8017bb2:	6820      	ldr	r0, [r4, #0]
 8017bb4:	3010      	adds	r0, #16
 8017bb6:	f7fe fd7f 	bl	80166b8 <rcl_subscription_is_valid>
 8017bba:	b158      	cbz	r0, 8017bd4 <rcl_action_send_result_request+0x54>
 8017bbc:	b195      	cbz	r5, 8017be4 <rcl_action_send_result_request+0x64>
 8017bbe:	b18e      	cbz	r6, 8017be4 <rcl_action_send_result_request+0x64>
 8017bc0:	6820      	ldr	r0, [r4, #0]
 8017bc2:	462a      	mov	r2, r5
 8017bc4:	4631      	mov	r1, r6
 8017bc6:	3008      	adds	r0, #8
 8017bc8:	f7fd fefe 	bl	80159c8 <rcl_send_request>
 8017bcc:	3800      	subs	r0, #0
 8017bce:	bf18      	it	ne
 8017bd0:	2001      	movne	r0, #1
 8017bd2:	bd70      	pop	{r4, r5, r6, pc}
 8017bd4:	f7f7 fcf0 	bl	800f5b8 <rcutils_reset_error>
 8017bd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017bdc:	bd70      	pop	{r4, r5, r6, pc}
 8017bde:	f640 0036 	movw	r0, #2102	@ 0x836
 8017be2:	bd70      	pop	{r4, r5, r6, pc}
 8017be4:	200b      	movs	r0, #11
 8017be6:	bd70      	pop	{r4, r5, r6, pc}
 8017be8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017bec:	4770      	bx	lr
 8017bee:	bf00      	nop

08017bf0 <rcl_action_take_result_response>:
 8017bf0:	2800      	cmp	r0, #0
 8017bf2:	d03a      	beq.n	8017c6a <rcl_action_take_result_response+0x7a>
 8017bf4:	b570      	push	{r4, r5, r6, lr}
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	6800      	ldr	r0, [r0, #0]
 8017bfa:	b388      	cbz	r0, 8017c60 <rcl_action_take_result_response+0x70>
 8017bfc:	460e      	mov	r6, r1
 8017bfe:	4615      	mov	r5, r2
 8017c00:	f7fd ff62 	bl	8015ac8 <rcl_client_is_valid>
 8017c04:	b338      	cbz	r0, 8017c56 <rcl_action_take_result_response+0x66>
 8017c06:	6820      	ldr	r0, [r4, #0]
 8017c08:	3004      	adds	r0, #4
 8017c0a:	f7fd ff5d 	bl	8015ac8 <rcl_client_is_valid>
 8017c0e:	b310      	cbz	r0, 8017c56 <rcl_action_take_result_response+0x66>
 8017c10:	6820      	ldr	r0, [r4, #0]
 8017c12:	3008      	adds	r0, #8
 8017c14:	f7fd ff58 	bl	8015ac8 <rcl_client_is_valid>
 8017c18:	b1e8      	cbz	r0, 8017c56 <rcl_action_take_result_response+0x66>
 8017c1a:	6820      	ldr	r0, [r4, #0]
 8017c1c:	300c      	adds	r0, #12
 8017c1e:	f7fe fd4b 	bl	80166b8 <rcl_subscription_is_valid>
 8017c22:	b1c0      	cbz	r0, 8017c56 <rcl_action_take_result_response+0x66>
 8017c24:	6820      	ldr	r0, [r4, #0]
 8017c26:	3010      	adds	r0, #16
 8017c28:	f7fe fd46 	bl	80166b8 <rcl_subscription_is_valid>
 8017c2c:	b198      	cbz	r0, 8017c56 <rcl_action_take_result_response+0x66>
 8017c2e:	b1d5      	cbz	r5, 8017c66 <rcl_action_take_result_response+0x76>
 8017c30:	b1ce      	cbz	r6, 8017c66 <rcl_action_take_result_response+0x76>
 8017c32:	6820      	ldr	r0, [r4, #0]
 8017c34:	462a      	mov	r2, r5
 8017c36:	4631      	mov	r1, r6
 8017c38:	3008      	adds	r0, #8
 8017c3a:	f7fd fefd 	bl	8015a38 <rcl_take_response>
 8017c3e:	b148      	cbz	r0, 8017c54 <rcl_action_take_result_response+0x64>
 8017c40:	280a      	cmp	r0, #10
 8017c42:	d007      	beq.n	8017c54 <rcl_action_take_result_response+0x64>
 8017c44:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017c48:	f640 0337 	movw	r3, #2103	@ 0x837
 8017c4c:	4290      	cmp	r0, r2
 8017c4e:	bf0c      	ite	eq
 8017c50:	4618      	moveq	r0, r3
 8017c52:	2001      	movne	r0, #1
 8017c54:	bd70      	pop	{r4, r5, r6, pc}
 8017c56:	f7f7 fcaf 	bl	800f5b8 <rcutils_reset_error>
 8017c5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8017c5e:	bd70      	pop	{r4, r5, r6, pc}
 8017c60:	f640 0036 	movw	r0, #2102	@ 0x836
 8017c64:	bd70      	pop	{r4, r5, r6, pc}
 8017c66:	200b      	movs	r0, #11
 8017c68:	bd70      	pop	{r4, r5, r6, pc}
 8017c6a:	f640 0036 	movw	r0, #2102	@ 0x836
 8017c6e:	4770      	bx	lr

08017c70 <rcl_action_take_cancel_response>:
 8017c70:	2800      	cmp	r0, #0
 8017c72:	d03a      	beq.n	8017cea <rcl_action_take_cancel_response+0x7a>
 8017c74:	b570      	push	{r4, r5, r6, lr}
 8017c76:	4604      	mov	r4, r0
 8017c78:	6800      	ldr	r0, [r0, #0]
 8017c7a:	b388      	cbz	r0, 8017ce0 <rcl_action_take_cancel_response+0x70>
 8017c7c:	460e      	mov	r6, r1
 8017c7e:	4615      	mov	r5, r2
 8017c80:	f7fd ff22 	bl	8015ac8 <rcl_client_is_valid>
 8017c84:	b338      	cbz	r0, 8017cd6 <rcl_action_take_cancel_response+0x66>
 8017c86:	6820      	ldr	r0, [r4, #0]
 8017c88:	3004      	adds	r0, #4
 8017c8a:	f7fd ff1d 	bl	8015ac8 <rcl_client_is_valid>
 8017c8e:	b310      	cbz	r0, 8017cd6 <rcl_action_take_cancel_response+0x66>
 8017c90:	6820      	ldr	r0, [r4, #0]
 8017c92:	3008      	adds	r0, #8
 8017c94:	f7fd ff18 	bl	8015ac8 <rcl_client_is_valid>
 8017c98:	b1e8      	cbz	r0, 8017cd6 <rcl_action_take_cancel_response+0x66>
 8017c9a:	6820      	ldr	r0, [r4, #0]
 8017c9c:	300c      	adds	r0, #12
 8017c9e:	f7fe fd0b 	bl	80166b8 <rcl_subscription_is_valid>
 8017ca2:	b1c0      	cbz	r0, 8017cd6 <rcl_action_take_cancel_response+0x66>
 8017ca4:	6820      	ldr	r0, [r4, #0]
 8017ca6:	3010      	adds	r0, #16
 8017ca8:	f7fe fd06 	bl	80166b8 <rcl_subscription_is_valid>
 8017cac:	b198      	cbz	r0, 8017cd6 <rcl_action_take_cancel_response+0x66>
 8017cae:	b1d5      	cbz	r5, 8017ce6 <rcl_action_take_cancel_response+0x76>
 8017cb0:	b1ce      	cbz	r6, 8017ce6 <rcl_action_take_cancel_response+0x76>
 8017cb2:	6820      	ldr	r0, [r4, #0]
 8017cb4:	462a      	mov	r2, r5
 8017cb6:	4631      	mov	r1, r6
 8017cb8:	3004      	adds	r0, #4
 8017cba:	f7fd febd 	bl	8015a38 <rcl_take_response>
 8017cbe:	b148      	cbz	r0, 8017cd4 <rcl_action_take_cancel_response+0x64>
 8017cc0:	280a      	cmp	r0, #10
 8017cc2:	d007      	beq.n	8017cd4 <rcl_action_take_cancel_response+0x64>
 8017cc4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017cc8:	f640 0337 	movw	r3, #2103	@ 0x837
 8017ccc:	4290      	cmp	r0, r2
 8017cce:	bf0c      	ite	eq
 8017cd0:	4618      	moveq	r0, r3
 8017cd2:	2001      	movne	r0, #1
 8017cd4:	bd70      	pop	{r4, r5, r6, pc}
 8017cd6:	f7f7 fc6f 	bl	800f5b8 <rcutils_reset_error>
 8017cda:	f640 0036 	movw	r0, #2102	@ 0x836
 8017cde:	bd70      	pop	{r4, r5, r6, pc}
 8017ce0:	f640 0036 	movw	r0, #2102	@ 0x836
 8017ce4:	bd70      	pop	{r4, r5, r6, pc}
 8017ce6:	200b      	movs	r0, #11
 8017ce8:	bd70      	pop	{r4, r5, r6, pc}
 8017cea:	f640 0036 	movw	r0, #2102	@ 0x836
 8017cee:	4770      	bx	lr

08017cf0 <rcl_action_take_feedback>:
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d038      	beq.n	8017d66 <rcl_action_take_feedback+0x76>
 8017cf4:	b530      	push	{r4, r5, lr}
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	6800      	ldr	r0, [r0, #0]
 8017cfa:	b091      	sub	sp, #68	@ 0x44
 8017cfc:	b378      	cbz	r0, 8017d5e <rcl_action_take_feedback+0x6e>
 8017cfe:	460d      	mov	r5, r1
 8017d00:	f7fd fee2 	bl	8015ac8 <rcl_client_is_valid>
 8017d04:	b328      	cbz	r0, 8017d52 <rcl_action_take_feedback+0x62>
 8017d06:	6820      	ldr	r0, [r4, #0]
 8017d08:	3004      	adds	r0, #4
 8017d0a:	f7fd fedd 	bl	8015ac8 <rcl_client_is_valid>
 8017d0e:	b300      	cbz	r0, 8017d52 <rcl_action_take_feedback+0x62>
 8017d10:	6820      	ldr	r0, [r4, #0]
 8017d12:	3008      	adds	r0, #8
 8017d14:	f7fd fed8 	bl	8015ac8 <rcl_client_is_valid>
 8017d18:	b1d8      	cbz	r0, 8017d52 <rcl_action_take_feedback+0x62>
 8017d1a:	6820      	ldr	r0, [r4, #0]
 8017d1c:	300c      	adds	r0, #12
 8017d1e:	f7fe fccb 	bl	80166b8 <rcl_subscription_is_valid>
 8017d22:	b1b0      	cbz	r0, 8017d52 <rcl_action_take_feedback+0x62>
 8017d24:	6820      	ldr	r0, [r4, #0]
 8017d26:	3010      	adds	r0, #16
 8017d28:	f7fe fcc6 	bl	80166b8 <rcl_subscription_is_valid>
 8017d2c:	b188      	cbz	r0, 8017d52 <rcl_action_take_feedback+0x62>
 8017d2e:	b1ed      	cbz	r5, 8017d6c <rcl_action_take_feedback+0x7c>
 8017d30:	6820      	ldr	r0, [r4, #0]
 8017d32:	2300      	movs	r3, #0
 8017d34:	466a      	mov	r2, sp
 8017d36:	4629      	mov	r1, r5
 8017d38:	300c      	adds	r0, #12
 8017d3a:	f7fe fc61 	bl	8016600 <rcl_take>
 8017d3e:	b160      	cbz	r0, 8017d5a <rcl_action_take_feedback+0x6a>
 8017d40:	f240 1391 	movw	r3, #401	@ 0x191
 8017d44:	4298      	cmp	r0, r3
 8017d46:	d014      	beq.n	8017d72 <rcl_action_take_feedback+0x82>
 8017d48:	280a      	cmp	r0, #10
 8017d4a:	bf18      	it	ne
 8017d4c:	2001      	movne	r0, #1
 8017d4e:	b011      	add	sp, #68	@ 0x44
 8017d50:	bd30      	pop	{r4, r5, pc}
 8017d52:	f7f7 fc31 	bl	800f5b8 <rcutils_reset_error>
 8017d56:	f640 0036 	movw	r0, #2102	@ 0x836
 8017d5a:	b011      	add	sp, #68	@ 0x44
 8017d5c:	bd30      	pop	{r4, r5, pc}
 8017d5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017d62:	b011      	add	sp, #68	@ 0x44
 8017d64:	bd30      	pop	{r4, r5, pc}
 8017d66:	f640 0036 	movw	r0, #2102	@ 0x836
 8017d6a:	4770      	bx	lr
 8017d6c:	200b      	movs	r0, #11
 8017d6e:	b011      	add	sp, #68	@ 0x44
 8017d70:	bd30      	pop	{r4, r5, pc}
 8017d72:	f640 0037 	movw	r0, #2103	@ 0x837
 8017d76:	e7f0      	b.n	8017d5a <rcl_action_take_feedback+0x6a>

08017d78 <rcl_action_wait_set_add_action_client>:
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d048      	beq.n	8017e0e <rcl_action_wait_set_add_action_client+0x96>
 8017d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d7e:	460c      	mov	r4, r1
 8017d80:	2900      	cmp	r1, #0
 8017d82:	d03c      	beq.n	8017dfe <rcl_action_wait_set_add_action_client+0x86>
 8017d84:	4605      	mov	r5, r0
 8017d86:	6808      	ldr	r0, [r1, #0]
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	d038      	beq.n	8017dfe <rcl_action_wait_set_add_action_client+0x86>
 8017d8c:	4617      	mov	r7, r2
 8017d8e:	461e      	mov	r6, r3
 8017d90:	f7fd fe9a 	bl	8015ac8 <rcl_client_is_valid>
 8017d94:	b3b0      	cbz	r0, 8017e04 <rcl_action_wait_set_add_action_client+0x8c>
 8017d96:	6820      	ldr	r0, [r4, #0]
 8017d98:	3004      	adds	r0, #4
 8017d9a:	f7fd fe95 	bl	8015ac8 <rcl_client_is_valid>
 8017d9e:	b388      	cbz	r0, 8017e04 <rcl_action_wait_set_add_action_client+0x8c>
 8017da0:	6820      	ldr	r0, [r4, #0]
 8017da2:	3008      	adds	r0, #8
 8017da4:	f7fd fe90 	bl	8015ac8 <rcl_client_is_valid>
 8017da8:	b360      	cbz	r0, 8017e04 <rcl_action_wait_set_add_action_client+0x8c>
 8017daa:	6820      	ldr	r0, [r4, #0]
 8017dac:	300c      	adds	r0, #12
 8017dae:	f7fe fc83 	bl	80166b8 <rcl_subscription_is_valid>
 8017db2:	b338      	cbz	r0, 8017e04 <rcl_action_wait_set_add_action_client+0x8c>
 8017db4:	6820      	ldr	r0, [r4, #0]
 8017db6:	3010      	adds	r0, #16
 8017db8:	f7fe fc7e 	bl	80166b8 <rcl_subscription_is_valid>
 8017dbc:	b310      	cbz	r0, 8017e04 <rcl_action_wait_set_add_action_client+0x8c>
 8017dbe:	6821      	ldr	r1, [r4, #0]
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8017dc6:	f7ff fcd1 	bl	801776c <rcl_wait_set_add_client>
 8017dca:	b9b8      	cbnz	r0, 8017dfc <rcl_action_wait_set_add_action_client+0x84>
 8017dcc:	6821      	ldr	r1, [r4, #0]
 8017dce:	4628      	mov	r0, r5
 8017dd0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8017dd4:	3104      	adds	r1, #4
 8017dd6:	f7ff fcc9 	bl	801776c <rcl_wait_set_add_client>
 8017dda:	b978      	cbnz	r0, 8017dfc <rcl_action_wait_set_add_action_client+0x84>
 8017ddc:	6821      	ldr	r1, [r4, #0]
 8017dde:	4628      	mov	r0, r5
 8017de0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8017de4:	3108      	adds	r1, #8
 8017de6:	f7ff fcc1 	bl	801776c <rcl_wait_set_add_client>
 8017dea:	b938      	cbnz	r0, 8017dfc <rcl_action_wait_set_add_action_client+0x84>
 8017dec:	6821      	ldr	r1, [r4, #0]
 8017dee:	4628      	mov	r0, r5
 8017df0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8017df4:	310c      	adds	r1, #12
 8017df6:	f7ff f969 	bl	80170cc <rcl_wait_set_add_subscription>
 8017dfa:	b158      	cbz	r0, 8017e14 <rcl_action_wait_set_add_action_client+0x9c>
 8017dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dfe:	f640 0036 	movw	r0, #2102	@ 0x836
 8017e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e04:	f7f7 fbd8 	bl	800f5b8 <rcutils_reset_error>
 8017e08:	f640 0036 	movw	r0, #2102	@ 0x836
 8017e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e0e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017e12:	4770      	bx	lr
 8017e14:	6821      	ldr	r1, [r4, #0]
 8017e16:	4628      	mov	r0, r5
 8017e18:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8017e1c:	3110      	adds	r1, #16
 8017e1e:	f7ff f955 	bl	80170cc <rcl_wait_set_add_subscription>
 8017e22:	2800      	cmp	r0, #0
 8017e24:	d1ea      	bne.n	8017dfc <rcl_action_wait_set_add_action_client+0x84>
 8017e26:	b11f      	cbz	r7, 8017e30 <rcl_action_wait_set_add_action_client+0xb8>
 8017e28:	6823      	ldr	r3, [r4, #0]
 8017e2a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8017e2e:	603b      	str	r3, [r7, #0]
 8017e30:	2e00      	cmp	r6, #0
 8017e32:	d0e3      	beq.n	8017dfc <rcl_action_wait_set_add_action_client+0x84>
 8017e34:	6823      	ldr	r3, [r4, #0]
 8017e36:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8017e3a:	6033      	str	r3, [r6, #0]
 8017e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e3e:	bf00      	nop

08017e40 <rcl_action_client_wait_set_get_entities_ready>:
 8017e40:	2800      	cmp	r0, #0
 8017e42:	d050      	beq.n	8017ee6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8017e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e48:	460c      	mov	r4, r1
 8017e4a:	2900      	cmp	r1, #0
 8017e4c:	d03e      	beq.n	8017ecc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017e4e:	4605      	mov	r5, r0
 8017e50:	6808      	ldr	r0, [r1, #0]
 8017e52:	2800      	cmp	r0, #0
 8017e54:	d03a      	beq.n	8017ecc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017e56:	4616      	mov	r6, r2
 8017e58:	461f      	mov	r7, r3
 8017e5a:	f7fd fe35 	bl	8015ac8 <rcl_client_is_valid>
 8017e5e:	2800      	cmp	r0, #0
 8017e60:	d038      	beq.n	8017ed4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017e62:	6820      	ldr	r0, [r4, #0]
 8017e64:	3004      	adds	r0, #4
 8017e66:	f7fd fe2f 	bl	8015ac8 <rcl_client_is_valid>
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	d032      	beq.n	8017ed4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017e6e:	6820      	ldr	r0, [r4, #0]
 8017e70:	3008      	adds	r0, #8
 8017e72:	f7fd fe29 	bl	8015ac8 <rcl_client_is_valid>
 8017e76:	b368      	cbz	r0, 8017ed4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017e78:	6820      	ldr	r0, [r4, #0]
 8017e7a:	300c      	adds	r0, #12
 8017e7c:	f7fe fc1c 	bl	80166b8 <rcl_subscription_is_valid>
 8017e80:	b340      	cbz	r0, 8017ed4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017e82:	6820      	ldr	r0, [r4, #0]
 8017e84:	3010      	adds	r0, #16
 8017e86:	f7fe fc17 	bl	80166b8 <rcl_subscription_is_valid>
 8017e8a:	b318      	cbz	r0, 8017ed4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017e8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8017e90:	2a00      	cmp	r2, #0
 8017e92:	bf18      	it	ne
 8017e94:	2b00      	cmpne	r3, #0
 8017e96:	9b08      	ldr	r3, [sp, #32]
 8017e98:	bf0c      	ite	eq
 8017e9a:	2101      	moveq	r1, #1
 8017e9c:	2100      	movne	r1, #0
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	bf08      	it	eq
 8017ea2:	f041 0101 	orreq.w	r1, r1, #1
 8017ea6:	2f00      	cmp	r7, #0
 8017ea8:	bf08      	it	eq
 8017eaa:	f041 0101 	orreq.w	r1, r1, #1
 8017eae:	b9b9      	cbnz	r1, 8017ee0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017eb0:	b1b6      	cbz	r6, 8017ee0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	686c      	ldr	r4, [r5, #4]
 8017eb6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8017eba:	428a      	cmp	r2, r1
 8017ebc:	4610      	mov	r0, r2
 8017ebe:	bf38      	it	cc
 8017ec0:	4608      	movcc	r0, r1
 8017ec2:	4284      	cmp	r4, r0
 8017ec4:	d812      	bhi.n	8017eec <rcl_action_client_wait_set_get_entities_ready+0xac>
 8017ec6:	2001      	movs	r0, #1
 8017ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ecc:	f640 0036 	movw	r0, #2102	@ 0x836
 8017ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ed4:	f7f7 fb70 	bl	800f5b8 <rcutils_reset_error>
 8017ed8:	f640 0036 	movw	r0, #2102	@ 0x836
 8017edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ee0:	200b      	movs	r0, #11
 8017ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ee6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017eea:	4770      	bx	lr
 8017eec:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8017ef0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8017ef4:	45f0      	cmp	r8, lr
 8017ef6:	4640      	mov	r0, r8
 8017ef8:	69ec      	ldr	r4, [r5, #28]
 8017efa:	bf38      	it	cc
 8017efc:	4670      	movcc	r0, lr
 8017efe:	4560      	cmp	r0, ip
 8017f00:	bf38      	it	cc
 8017f02:	4660      	movcc	r0, ip
 8017f04:	4284      	cmp	r4, r0
 8017f06:	d9de      	bls.n	8017ec6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017f08:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8017f0c:	682d      	ldr	r5, [r5, #0]
 8017f0e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8017f12:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8017f16:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017f1a:	1a18      	subs	r0, r3, r0
 8017f1c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017f20:	f103 0c0c 	add.w	ip, r3, #12
 8017f24:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017f28:	fab0 f080 	clz	r0, r0
 8017f2c:	eba5 050c 	sub.w	r5, r5, ip
 8017f30:	0940      	lsrs	r0, r0, #5
 8017f32:	fab5 f585 	clz	r5, r5
 8017f36:	096d      	lsrs	r5, r5, #5
 8017f38:	7035      	strb	r5, [r6, #0]
 8017f3a:	f103 0510 	add.w	r5, r3, #16
 8017f3e:	1b64      	subs	r4, r4, r5
 8017f40:	9d08      	ldr	r5, [sp, #32]
 8017f42:	fab4 f484 	clz	r4, r4
 8017f46:	0964      	lsrs	r4, r4, #5
 8017f48:	703c      	strb	r4, [r7, #0]
 8017f4a:	1d1c      	adds	r4, r3, #4
 8017f4c:	3308      	adds	r3, #8
 8017f4e:	7028      	strb	r0, [r5, #0]
 8017f50:	1b09      	subs	r1, r1, r4
 8017f52:	2000      	movs	r0, #0
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f58:	fab1 f181 	clz	r1, r1
 8017f5c:	fab3 f383 	clz	r3, r3
 8017f60:	0949      	lsrs	r1, r1, #5
 8017f62:	095b      	lsrs	r3, r3, #5
 8017f64:	7011      	strb	r1, [r2, #0]
 8017f66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f68:	7013      	strb	r3, [r2, #0]
 8017f6a:	e7b1      	b.n	8017ed0 <rcl_action_client_wait_set_get_entities_ready+0x90>

08017f6c <rcl_action_take_goal_request>:
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d039      	beq.n	8017fe4 <rcl_action_take_goal_request+0x78>
 8017f70:	b570      	push	{r4, r5, r6, lr}
 8017f72:	4604      	mov	r4, r0
 8017f74:	6800      	ldr	r0, [r0, #0]
 8017f76:	b380      	cbz	r0, 8017fda <rcl_action_take_goal_request+0x6e>
 8017f78:	460e      	mov	r6, r1
 8017f7a:	4615      	mov	r5, r2
 8017f7c:	f7fe fb36 	bl	80165ec <rcl_service_is_valid>
 8017f80:	b330      	cbz	r0, 8017fd0 <rcl_action_take_goal_request+0x64>
 8017f82:	6820      	ldr	r0, [r4, #0]
 8017f84:	3004      	adds	r0, #4
 8017f86:	f7fe fb31 	bl	80165ec <rcl_service_is_valid>
 8017f8a:	b308      	cbz	r0, 8017fd0 <rcl_action_take_goal_request+0x64>
 8017f8c:	6820      	ldr	r0, [r4, #0]
 8017f8e:	3008      	adds	r0, #8
 8017f90:	f7fe fb2c 	bl	80165ec <rcl_service_is_valid>
 8017f94:	b1e0      	cbz	r0, 8017fd0 <rcl_action_take_goal_request+0x64>
 8017f96:	6820      	ldr	r0, [r4, #0]
 8017f98:	300c      	adds	r0, #12
 8017f9a:	f7f6 fb79 	bl	800e690 <rcl_publisher_is_valid>
 8017f9e:	b1b8      	cbz	r0, 8017fd0 <rcl_action_take_goal_request+0x64>
 8017fa0:	6820      	ldr	r0, [r4, #0]
 8017fa2:	3010      	adds	r0, #16
 8017fa4:	f7f6 fb74 	bl	800e690 <rcl_publisher_is_valid>
 8017fa8:	b190      	cbz	r0, 8017fd0 <rcl_action_take_goal_request+0x64>
 8017faa:	b1cd      	cbz	r5, 8017fe0 <rcl_action_take_goal_request+0x74>
 8017fac:	b1c6      	cbz	r6, 8017fe0 <rcl_action_take_goal_request+0x74>
 8017fae:	462a      	mov	r2, r5
 8017fb0:	4631      	mov	r1, r6
 8017fb2:	6820      	ldr	r0, [r4, #0]
 8017fb4:	f7fe fac2 	bl	801653c <rcl_take_request>
 8017fb8:	b148      	cbz	r0, 8017fce <rcl_action_take_goal_request+0x62>
 8017fba:	280a      	cmp	r0, #10
 8017fbc:	d007      	beq.n	8017fce <rcl_action_take_goal_request+0x62>
 8017fbe:	f240 2259 	movw	r2, #601	@ 0x259
 8017fc2:	f640 0399 	movw	r3, #2201	@ 0x899
 8017fc6:	4290      	cmp	r0, r2
 8017fc8:	bf0c      	ite	eq
 8017fca:	4618      	moveq	r0, r3
 8017fcc:	2001      	movne	r0, #1
 8017fce:	bd70      	pop	{r4, r5, r6, pc}
 8017fd0:	f7f7 faf2 	bl	800f5b8 <rcutils_reset_error>
 8017fd4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017fd8:	bd70      	pop	{r4, r5, r6, pc}
 8017fda:	f640 0098 	movw	r0, #2200	@ 0x898
 8017fde:	bd70      	pop	{r4, r5, r6, pc}
 8017fe0:	200b      	movs	r0, #11
 8017fe2:	bd70      	pop	{r4, r5, r6, pc}
 8017fe4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop

08017fec <rcl_action_send_goal_response>:
 8017fec:	b390      	cbz	r0, 8018054 <rcl_action_send_goal_response+0x68>
 8017fee:	b570      	push	{r4, r5, r6, lr}
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	6800      	ldr	r0, [r0, #0]
 8017ff4:	b348      	cbz	r0, 801804a <rcl_action_send_goal_response+0x5e>
 8017ff6:	460e      	mov	r6, r1
 8017ff8:	4615      	mov	r5, r2
 8017ffa:	f7fe faf7 	bl	80165ec <rcl_service_is_valid>
 8017ffe:	b1f8      	cbz	r0, 8018040 <rcl_action_send_goal_response+0x54>
 8018000:	6820      	ldr	r0, [r4, #0]
 8018002:	3004      	adds	r0, #4
 8018004:	f7fe faf2 	bl	80165ec <rcl_service_is_valid>
 8018008:	b1d0      	cbz	r0, 8018040 <rcl_action_send_goal_response+0x54>
 801800a:	6820      	ldr	r0, [r4, #0]
 801800c:	3008      	adds	r0, #8
 801800e:	f7fe faed 	bl	80165ec <rcl_service_is_valid>
 8018012:	b1a8      	cbz	r0, 8018040 <rcl_action_send_goal_response+0x54>
 8018014:	6820      	ldr	r0, [r4, #0]
 8018016:	300c      	adds	r0, #12
 8018018:	f7f6 fb3a 	bl	800e690 <rcl_publisher_is_valid>
 801801c:	b180      	cbz	r0, 8018040 <rcl_action_send_goal_response+0x54>
 801801e:	6820      	ldr	r0, [r4, #0]
 8018020:	3010      	adds	r0, #16
 8018022:	f7f6 fb35 	bl	800e690 <rcl_publisher_is_valid>
 8018026:	b158      	cbz	r0, 8018040 <rcl_action_send_goal_response+0x54>
 8018028:	b195      	cbz	r5, 8018050 <rcl_action_send_goal_response+0x64>
 801802a:	b18e      	cbz	r6, 8018050 <rcl_action_send_goal_response+0x64>
 801802c:	462a      	mov	r2, r5
 801802e:	4631      	mov	r1, r6
 8018030:	6820      	ldr	r0, [r4, #0]
 8018032:	f7fe fac3 	bl	80165bc <rcl_send_response>
 8018036:	b110      	cbz	r0, 801803e <rcl_action_send_goal_response+0x52>
 8018038:	2802      	cmp	r0, #2
 801803a:	bf18      	it	ne
 801803c:	2001      	movne	r0, #1
 801803e:	bd70      	pop	{r4, r5, r6, pc}
 8018040:	f7f7 faba 	bl	800f5b8 <rcutils_reset_error>
 8018044:	f640 0098 	movw	r0, #2200	@ 0x898
 8018048:	bd70      	pop	{r4, r5, r6, pc}
 801804a:	f640 0098 	movw	r0, #2200	@ 0x898
 801804e:	bd70      	pop	{r4, r5, r6, pc}
 8018050:	200b      	movs	r0, #11
 8018052:	bd70      	pop	{r4, r5, r6, pc}
 8018054:	f640 0098 	movw	r0, #2200	@ 0x898
 8018058:	4770      	bx	lr
 801805a:	bf00      	nop

0801805c <rcl_action_take_result_request>:
 801805c:	2800      	cmp	r0, #0
 801805e:	d03a      	beq.n	80180d6 <rcl_action_take_result_request+0x7a>
 8018060:	b570      	push	{r4, r5, r6, lr}
 8018062:	4604      	mov	r4, r0
 8018064:	6800      	ldr	r0, [r0, #0]
 8018066:	b388      	cbz	r0, 80180cc <rcl_action_take_result_request+0x70>
 8018068:	460e      	mov	r6, r1
 801806a:	4615      	mov	r5, r2
 801806c:	f7fe fabe 	bl	80165ec <rcl_service_is_valid>
 8018070:	b338      	cbz	r0, 80180c2 <rcl_action_take_result_request+0x66>
 8018072:	6820      	ldr	r0, [r4, #0]
 8018074:	3004      	adds	r0, #4
 8018076:	f7fe fab9 	bl	80165ec <rcl_service_is_valid>
 801807a:	b310      	cbz	r0, 80180c2 <rcl_action_take_result_request+0x66>
 801807c:	6820      	ldr	r0, [r4, #0]
 801807e:	3008      	adds	r0, #8
 8018080:	f7fe fab4 	bl	80165ec <rcl_service_is_valid>
 8018084:	b1e8      	cbz	r0, 80180c2 <rcl_action_take_result_request+0x66>
 8018086:	6820      	ldr	r0, [r4, #0]
 8018088:	300c      	adds	r0, #12
 801808a:	f7f6 fb01 	bl	800e690 <rcl_publisher_is_valid>
 801808e:	b1c0      	cbz	r0, 80180c2 <rcl_action_take_result_request+0x66>
 8018090:	6820      	ldr	r0, [r4, #0]
 8018092:	3010      	adds	r0, #16
 8018094:	f7f6 fafc 	bl	800e690 <rcl_publisher_is_valid>
 8018098:	b198      	cbz	r0, 80180c2 <rcl_action_take_result_request+0x66>
 801809a:	b1d5      	cbz	r5, 80180d2 <rcl_action_take_result_request+0x76>
 801809c:	b1ce      	cbz	r6, 80180d2 <rcl_action_take_result_request+0x76>
 801809e:	6820      	ldr	r0, [r4, #0]
 80180a0:	462a      	mov	r2, r5
 80180a2:	4631      	mov	r1, r6
 80180a4:	3008      	adds	r0, #8
 80180a6:	f7fe fa49 	bl	801653c <rcl_take_request>
 80180aa:	b148      	cbz	r0, 80180c0 <rcl_action_take_result_request+0x64>
 80180ac:	280a      	cmp	r0, #10
 80180ae:	d007      	beq.n	80180c0 <rcl_action_take_result_request+0x64>
 80180b0:	f240 2259 	movw	r2, #601	@ 0x259
 80180b4:	f640 0399 	movw	r3, #2201	@ 0x899
 80180b8:	4290      	cmp	r0, r2
 80180ba:	bf0c      	ite	eq
 80180bc:	4618      	moveq	r0, r3
 80180be:	2001      	movne	r0, #1
 80180c0:	bd70      	pop	{r4, r5, r6, pc}
 80180c2:	f7f7 fa79 	bl	800f5b8 <rcutils_reset_error>
 80180c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80180ca:	bd70      	pop	{r4, r5, r6, pc}
 80180cc:	f640 0098 	movw	r0, #2200	@ 0x898
 80180d0:	bd70      	pop	{r4, r5, r6, pc}
 80180d2:	200b      	movs	r0, #11
 80180d4:	bd70      	pop	{r4, r5, r6, pc}
 80180d6:	f640 0098 	movw	r0, #2200	@ 0x898
 80180da:	4770      	bx	lr

080180dc <rcl_action_take_cancel_request>:
 80180dc:	2800      	cmp	r0, #0
 80180de:	d03a      	beq.n	8018156 <rcl_action_take_cancel_request+0x7a>
 80180e0:	b570      	push	{r4, r5, r6, lr}
 80180e2:	4604      	mov	r4, r0
 80180e4:	6800      	ldr	r0, [r0, #0]
 80180e6:	b388      	cbz	r0, 801814c <rcl_action_take_cancel_request+0x70>
 80180e8:	460e      	mov	r6, r1
 80180ea:	4615      	mov	r5, r2
 80180ec:	f7fe fa7e 	bl	80165ec <rcl_service_is_valid>
 80180f0:	b338      	cbz	r0, 8018142 <rcl_action_take_cancel_request+0x66>
 80180f2:	6820      	ldr	r0, [r4, #0]
 80180f4:	3004      	adds	r0, #4
 80180f6:	f7fe fa79 	bl	80165ec <rcl_service_is_valid>
 80180fa:	b310      	cbz	r0, 8018142 <rcl_action_take_cancel_request+0x66>
 80180fc:	6820      	ldr	r0, [r4, #0]
 80180fe:	3008      	adds	r0, #8
 8018100:	f7fe fa74 	bl	80165ec <rcl_service_is_valid>
 8018104:	b1e8      	cbz	r0, 8018142 <rcl_action_take_cancel_request+0x66>
 8018106:	6820      	ldr	r0, [r4, #0]
 8018108:	300c      	adds	r0, #12
 801810a:	f7f6 fac1 	bl	800e690 <rcl_publisher_is_valid>
 801810e:	b1c0      	cbz	r0, 8018142 <rcl_action_take_cancel_request+0x66>
 8018110:	6820      	ldr	r0, [r4, #0]
 8018112:	3010      	adds	r0, #16
 8018114:	f7f6 fabc 	bl	800e690 <rcl_publisher_is_valid>
 8018118:	b198      	cbz	r0, 8018142 <rcl_action_take_cancel_request+0x66>
 801811a:	b1d5      	cbz	r5, 8018152 <rcl_action_take_cancel_request+0x76>
 801811c:	b1ce      	cbz	r6, 8018152 <rcl_action_take_cancel_request+0x76>
 801811e:	6820      	ldr	r0, [r4, #0]
 8018120:	462a      	mov	r2, r5
 8018122:	4631      	mov	r1, r6
 8018124:	3004      	adds	r0, #4
 8018126:	f7fe fa09 	bl	801653c <rcl_take_request>
 801812a:	b148      	cbz	r0, 8018140 <rcl_action_take_cancel_request+0x64>
 801812c:	280a      	cmp	r0, #10
 801812e:	d007      	beq.n	8018140 <rcl_action_take_cancel_request+0x64>
 8018130:	f240 2259 	movw	r2, #601	@ 0x259
 8018134:	f640 0399 	movw	r3, #2201	@ 0x899
 8018138:	4290      	cmp	r0, r2
 801813a:	bf0c      	ite	eq
 801813c:	4618      	moveq	r0, r3
 801813e:	2001      	movne	r0, #1
 8018140:	bd70      	pop	{r4, r5, r6, pc}
 8018142:	f7f7 fa39 	bl	800f5b8 <rcutils_reset_error>
 8018146:	f640 0098 	movw	r0, #2200	@ 0x898
 801814a:	bd70      	pop	{r4, r5, r6, pc}
 801814c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018150:	bd70      	pop	{r4, r5, r6, pc}
 8018152:	200b      	movs	r0, #11
 8018154:	bd70      	pop	{r4, r5, r6, pc}
 8018156:	f640 0098 	movw	r0, #2200	@ 0x898
 801815a:	4770      	bx	lr

0801815c <rcl_action_send_cancel_response>:
 801815c:	b398      	cbz	r0, 80181c6 <rcl_action_send_cancel_response+0x6a>
 801815e:	b570      	push	{r4, r5, r6, lr}
 8018160:	4604      	mov	r4, r0
 8018162:	6800      	ldr	r0, [r0, #0]
 8018164:	b350      	cbz	r0, 80181bc <rcl_action_send_cancel_response+0x60>
 8018166:	460e      	mov	r6, r1
 8018168:	4615      	mov	r5, r2
 801816a:	f7fe fa3f 	bl	80165ec <rcl_service_is_valid>
 801816e:	b300      	cbz	r0, 80181b2 <rcl_action_send_cancel_response+0x56>
 8018170:	6820      	ldr	r0, [r4, #0]
 8018172:	3004      	adds	r0, #4
 8018174:	f7fe fa3a 	bl	80165ec <rcl_service_is_valid>
 8018178:	b1d8      	cbz	r0, 80181b2 <rcl_action_send_cancel_response+0x56>
 801817a:	6820      	ldr	r0, [r4, #0]
 801817c:	3008      	adds	r0, #8
 801817e:	f7fe fa35 	bl	80165ec <rcl_service_is_valid>
 8018182:	b1b0      	cbz	r0, 80181b2 <rcl_action_send_cancel_response+0x56>
 8018184:	6820      	ldr	r0, [r4, #0]
 8018186:	300c      	adds	r0, #12
 8018188:	f7f6 fa82 	bl	800e690 <rcl_publisher_is_valid>
 801818c:	b188      	cbz	r0, 80181b2 <rcl_action_send_cancel_response+0x56>
 801818e:	6820      	ldr	r0, [r4, #0]
 8018190:	3010      	adds	r0, #16
 8018192:	f7f6 fa7d 	bl	800e690 <rcl_publisher_is_valid>
 8018196:	b160      	cbz	r0, 80181b2 <rcl_action_send_cancel_response+0x56>
 8018198:	b19d      	cbz	r5, 80181c2 <rcl_action_send_cancel_response+0x66>
 801819a:	b196      	cbz	r6, 80181c2 <rcl_action_send_cancel_response+0x66>
 801819c:	6820      	ldr	r0, [r4, #0]
 801819e:	462a      	mov	r2, r5
 80181a0:	4631      	mov	r1, r6
 80181a2:	3004      	adds	r0, #4
 80181a4:	f7fe fa0a 	bl	80165bc <rcl_send_response>
 80181a8:	b110      	cbz	r0, 80181b0 <rcl_action_send_cancel_response+0x54>
 80181aa:	2802      	cmp	r0, #2
 80181ac:	bf18      	it	ne
 80181ae:	2001      	movne	r0, #1
 80181b0:	bd70      	pop	{r4, r5, r6, pc}
 80181b2:	f7f7 fa01 	bl	800f5b8 <rcutils_reset_error>
 80181b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80181ba:	bd70      	pop	{r4, r5, r6, pc}
 80181bc:	f640 0098 	movw	r0, #2200	@ 0x898
 80181c0:	bd70      	pop	{r4, r5, r6, pc}
 80181c2:	200b      	movs	r0, #11
 80181c4:	bd70      	pop	{r4, r5, r6, pc}
 80181c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80181ca:	4770      	bx	lr

080181cc <rcl_action_wait_set_add_action_server>:
 80181cc:	2800      	cmp	r0, #0
 80181ce:	d04d      	beq.n	801826c <rcl_action_wait_set_add_action_server+0xa0>
 80181d0:	b570      	push	{r4, r5, r6, lr}
 80181d2:	460c      	mov	r4, r1
 80181d4:	b159      	cbz	r1, 80181ee <rcl_action_wait_set_add_action_server+0x22>
 80181d6:	4605      	mov	r5, r0
 80181d8:	6808      	ldr	r0, [r1, #0]
 80181da:	b140      	cbz	r0, 80181ee <rcl_action_wait_set_add_action_server+0x22>
 80181dc:	4616      	mov	r6, r2
 80181de:	f7fe fa05 	bl	80165ec <rcl_service_is_valid>
 80181e2:	b120      	cbz	r0, 80181ee <rcl_action_wait_set_add_action_server+0x22>
 80181e4:	6820      	ldr	r0, [r4, #0]
 80181e6:	3004      	adds	r0, #4
 80181e8:	f7fe fa00 	bl	80165ec <rcl_service_is_valid>
 80181ec:	b910      	cbnz	r0, 80181f4 <rcl_action_wait_set_add_action_server+0x28>
 80181ee:	f640 0098 	movw	r0, #2200	@ 0x898
 80181f2:	bd70      	pop	{r4, r5, r6, pc}
 80181f4:	6820      	ldr	r0, [r4, #0]
 80181f6:	3008      	adds	r0, #8
 80181f8:	f7fe f9f8 	bl	80165ec <rcl_service_is_valid>
 80181fc:	2800      	cmp	r0, #0
 80181fe:	d0f6      	beq.n	80181ee <rcl_action_wait_set_add_action_server+0x22>
 8018200:	6820      	ldr	r0, [r4, #0]
 8018202:	300c      	adds	r0, #12
 8018204:	f7f6 fa5c 	bl	800e6c0 <rcl_publisher_is_valid_except_context>
 8018208:	2800      	cmp	r0, #0
 801820a:	d0f0      	beq.n	80181ee <rcl_action_wait_set_add_action_server+0x22>
 801820c:	6820      	ldr	r0, [r4, #0]
 801820e:	3010      	adds	r0, #16
 8018210:	f7f6 fa56 	bl	800e6c0 <rcl_publisher_is_valid_except_context>
 8018214:	2800      	cmp	r0, #0
 8018216:	d0ea      	beq.n	80181ee <rcl_action_wait_set_add_action_server+0x22>
 8018218:	6821      	ldr	r1, [r4, #0]
 801821a:	4628      	mov	r0, r5
 801821c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8018220:	f7ff fad0 	bl	80177c4 <rcl_wait_set_add_service>
 8018224:	2800      	cmp	r0, #0
 8018226:	d1e4      	bne.n	80181f2 <rcl_action_wait_set_add_action_server+0x26>
 8018228:	6821      	ldr	r1, [r4, #0]
 801822a:	4628      	mov	r0, r5
 801822c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8018230:	3104      	adds	r1, #4
 8018232:	f7ff fac7 	bl	80177c4 <rcl_wait_set_add_service>
 8018236:	2800      	cmp	r0, #0
 8018238:	d1db      	bne.n	80181f2 <rcl_action_wait_set_add_action_server+0x26>
 801823a:	6821      	ldr	r1, [r4, #0]
 801823c:	4628      	mov	r0, r5
 801823e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018242:	3108      	adds	r1, #8
 8018244:	f7ff fabe 	bl	80177c4 <rcl_wait_set_add_service>
 8018248:	2800      	cmp	r0, #0
 801824a:	d1d2      	bne.n	80181f2 <rcl_action_wait_set_add_action_server+0x26>
 801824c:	6821      	ldr	r1, [r4, #0]
 801824e:	4628      	mov	r0, r5
 8018250:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018254:	3114      	adds	r1, #20
 8018256:	f7ff fa59 	bl	801770c <rcl_wait_set_add_timer>
 801825a:	2800      	cmp	r0, #0
 801825c:	d1c9      	bne.n	80181f2 <rcl_action_wait_set_add_action_server+0x26>
 801825e:	2e00      	cmp	r6, #0
 8018260:	d0c7      	beq.n	80181f2 <rcl_action_wait_set_add_action_server+0x26>
 8018262:	6823      	ldr	r3, [r4, #0]
 8018264:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8018268:	6033      	str	r3, [r6, #0]
 801826a:	bd70      	pop	{r4, r5, r6, pc}
 801826c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018270:	4770      	bx	lr
 8018272:	bf00      	nop

08018274 <rcl_action_server_wait_set_get_entities_ready>:
 8018274:	2800      	cmp	r0, #0
 8018276:	d067      	beq.n	8018348 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8018278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801827c:	460c      	mov	r4, r1
 801827e:	b161      	cbz	r1, 801829a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018280:	4605      	mov	r5, r0
 8018282:	6808      	ldr	r0, [r1, #0]
 8018284:	b148      	cbz	r0, 801829a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018286:	4616      	mov	r6, r2
 8018288:	4698      	mov	r8, r3
 801828a:	f7fe f9af 	bl	80165ec <rcl_service_is_valid>
 801828e:	b120      	cbz	r0, 801829a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018290:	6820      	ldr	r0, [r4, #0]
 8018292:	3004      	adds	r0, #4
 8018294:	f7fe f9aa 	bl	80165ec <rcl_service_is_valid>
 8018298:	b918      	cbnz	r0, 80182a2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801829a:	f640 0098 	movw	r0, #2200	@ 0x898
 801829e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182a2:	6820      	ldr	r0, [r4, #0]
 80182a4:	3008      	adds	r0, #8
 80182a6:	f7fe f9a1 	bl	80165ec <rcl_service_is_valid>
 80182aa:	2800      	cmp	r0, #0
 80182ac:	d0f5      	beq.n	801829a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80182ae:	6820      	ldr	r0, [r4, #0]
 80182b0:	300c      	adds	r0, #12
 80182b2:	f7f6 fa05 	bl	800e6c0 <rcl_publisher_is_valid_except_context>
 80182b6:	2800      	cmp	r0, #0
 80182b8:	d0ef      	beq.n	801829a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80182ba:	6820      	ldr	r0, [r4, #0]
 80182bc:	3010      	adds	r0, #16
 80182be:	f7f6 f9ff 	bl	800e6c0 <rcl_publisher_is_valid_except_context>
 80182c2:	2800      	cmp	r0, #0
 80182c4:	d0e9      	beq.n	801829a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80182c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80182ca:	2a00      	cmp	r2, #0
 80182cc:	bf18      	it	ne
 80182ce:	2b00      	cmpne	r3, #0
 80182d0:	bf0c      	ite	eq
 80182d2:	2101      	moveq	r1, #1
 80182d4:	2100      	movne	r1, #0
 80182d6:	f1b8 0f00 	cmp.w	r8, #0
 80182da:	bf08      	it	eq
 80182dc:	f041 0101 	orreq.w	r1, r1, #1
 80182e0:	bba9      	cbnz	r1, 801834e <rcl_action_server_wait_set_get_entities_ready+0xda>
 80182e2:	b3a6      	cbz	r6, 801834e <rcl_action_server_wait_set_get_entities_ready+0xda>
 80182e4:	6821      	ldr	r1, [r4, #0]
 80182e6:	2000      	movs	r0, #0
 80182e8:	692c      	ldr	r4, [r5, #16]
 80182ea:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 80182ee:	6a2f      	ldr	r7, [r5, #32]
 80182f0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182f4:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80182f8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80182fc:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8018300:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8018304:	1a64      	subs	r4, r4, r1
 8018306:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801830a:	fab4 f484 	clz	r4, r4
 801830e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018312:	0964      	lsrs	r4, r4, #5
 8018314:	7034      	strb	r4, [r6, #0]
 8018316:	1d0c      	adds	r4, r1, #4
 8018318:	1b2c      	subs	r4, r5, r4
 801831a:	fab4 f484 	clz	r4, r4
 801831e:	0964      	lsrs	r4, r4, #5
 8018320:	f888 4000 	strb.w	r4, [r8]
 8018324:	f101 0408 	add.w	r4, r1, #8
 8018328:	1b1b      	subs	r3, r3, r4
 801832a:	9c06      	ldr	r4, [sp, #24]
 801832c:	fab3 f383 	clz	r3, r3
 8018330:	095b      	lsrs	r3, r3, #5
 8018332:	7023      	strb	r3, [r4, #0]
 8018334:	f101 0314 	add.w	r3, r1, #20
 8018338:	1ad3      	subs	r3, r2, r3
 801833a:	9a07      	ldr	r2, [sp, #28]
 801833c:	fab3 f383 	clz	r3, r3
 8018340:	095b      	lsrs	r3, r3, #5
 8018342:	7013      	strb	r3, [r2, #0]
 8018344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018348:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801834c:	4770      	bx	lr
 801834e:	200b      	movs	r0, #11
 8018350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018354 <_execute_event_handler>:
 8018354:	2002      	movs	r0, #2
 8018356:	4770      	bx	lr

08018358 <_cancel_goal_event_handler>:
 8018358:	2003      	movs	r0, #3
 801835a:	4770      	bx	lr

0801835c <_succeed_event_handler>:
 801835c:	2004      	movs	r0, #4
 801835e:	4770      	bx	lr

08018360 <_abort_event_handler>:
 8018360:	2006      	movs	r0, #6
 8018362:	4770      	bx	lr

08018364 <_canceled_event_handler>:
 8018364:	2005      	movs	r0, #5
 8018366:	4770      	bx	lr

08018368 <rcl_action_transition_goal_state>:
 8018368:	b2c2      	uxtb	r2, r0
 801836a:	2a06      	cmp	r2, #6
 801836c:	d810      	bhi.n	8018390 <rcl_action_transition_goal_state+0x28>
 801836e:	2904      	cmp	r1, #4
 8018370:	d80e      	bhi.n	8018390 <rcl_action_transition_goal_state+0x28>
 8018372:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8018376:	b410      	push	{r4}
 8018378:	1853      	adds	r3, r2, r1
 801837a:	4c06      	ldr	r4, [pc, #24]	@ (8018394 <rcl_action_transition_goal_state+0x2c>)
 801837c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018380:	b113      	cbz	r3, 8018388 <rcl_action_transition_goal_state+0x20>
 8018382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018386:	4718      	bx	r3
 8018388:	2000      	movs	r0, #0
 801838a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801838e:	4770      	bx	lr
 8018390:	2000      	movs	r0, #0
 8018392:	4770      	bx	lr
 8018394:	0801d4ac 	.word	0x0801d4ac

08018398 <rcl_action_get_zero_initialized_cancel_response>:
 8018398:	b510      	push	{r4, lr}
 801839a:	4c07      	ldr	r4, [pc, #28]	@ (80183b8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801839c:	4686      	mov	lr, r0
 801839e:	4684      	mov	ip, r0
 80183a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183ac:	6823      	ldr	r3, [r4, #0]
 80183ae:	4670      	mov	r0, lr
 80183b0:	f8cc 3000 	str.w	r3, [ip]
 80183b4:	bd10      	pop	{r4, pc}
 80183b6:	bf00      	nop
 80183b8:	0801d538 	.word	0x0801d538

080183bc <rclc_action_send_result_request>:
 80183bc:	b1d0      	cbz	r0, 80183f4 <rclc_action_send_result_request+0x38>
 80183be:	4684      	mov	ip, r0
 80183c0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80183c4:	b500      	push	{lr}
 80183c6:	b087      	sub	sp, #28
 80183c8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80183cc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80183d0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80183d4:	f10d 0e08 	add.w	lr, sp, #8
 80183d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80183dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80183e0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80183e4:	a902      	add	r1, sp, #8
 80183e6:	3010      	adds	r0, #16
 80183e8:	f7ff fbca 	bl	8017b80 <rcl_action_send_result_request>
 80183ec:	b920      	cbnz	r0, 80183f8 <rclc_action_send_result_request+0x3c>
 80183ee:	b007      	add	sp, #28
 80183f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80183f4:	200b      	movs	r0, #11
 80183f6:	4770      	bx	lr
 80183f8:	9001      	str	r0, [sp, #4]
 80183fa:	f7f7 f8dd 	bl	800f5b8 <rcutils_reset_error>
 80183fe:	9801      	ldr	r0, [sp, #4]
 8018400:	b007      	add	sp, #28
 8018402:	f85d fb04 	ldr.w	pc, [sp], #4
 8018406:	bf00      	nop

08018408 <rclc_action_take_goal_handle>:
 8018408:	b160      	cbz	r0, 8018424 <rclc_action_take_goal_handle+0x1c>
 801840a:	6883      	ldr	r3, [r0, #8]
 801840c:	b143      	cbz	r3, 8018420 <rclc_action_take_goal_handle+0x18>
 801840e:	6819      	ldr	r1, [r3, #0]
 8018410:	2200      	movs	r2, #0
 8018412:	6081      	str	r1, [r0, #8]
 8018414:	721a      	strb	r2, [r3, #8]
 8018416:	68c1      	ldr	r1, [r0, #12]
 8018418:	621a      	str	r2, [r3, #32]
 801841a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801841c:	6019      	str	r1, [r3, #0]
 801841e:	60c3      	str	r3, [r0, #12]
 8018420:	4618      	mov	r0, r3
 8018422:	4770      	bx	lr
 8018424:	4603      	mov	r3, r0
 8018426:	e7fb      	b.n	8018420 <rclc_action_take_goal_handle+0x18>

08018428 <rclc_action_remove_used_goal_handle>:
 8018428:	b180      	cbz	r0, 801844c <rclc_action_remove_used_goal_handle+0x24>
 801842a:	b179      	cbz	r1, 801844c <rclc_action_remove_used_goal_handle+0x24>
 801842c:	68c3      	ldr	r3, [r0, #12]
 801842e:	4299      	cmp	r1, r3
 8018430:	d00d      	beq.n	801844e <rclc_action_remove_used_goal_handle+0x26>
 8018432:	b12b      	cbz	r3, 8018440 <rclc_action_remove_used_goal_handle+0x18>
 8018434:	681a      	ldr	r2, [r3, #0]
 8018436:	4291      	cmp	r1, r2
 8018438:	d003      	beq.n	8018442 <rclc_action_remove_used_goal_handle+0x1a>
 801843a:	4613      	mov	r3, r2
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1f9      	bne.n	8018434 <rclc_action_remove_used_goal_handle+0xc>
 8018440:	4770      	bx	lr
 8018442:	680a      	ldr	r2, [r1, #0]
 8018444:	601a      	str	r2, [r3, #0]
 8018446:	6883      	ldr	r3, [r0, #8]
 8018448:	600b      	str	r3, [r1, #0]
 801844a:	6081      	str	r1, [r0, #8]
 801844c:	4770      	bx	lr
 801844e:	680b      	ldr	r3, [r1, #0]
 8018450:	60c3      	str	r3, [r0, #12]
 8018452:	e7f8      	b.n	8018446 <rclc_action_remove_used_goal_handle+0x1e>

08018454 <rclc_action_find_goal_handle_by_uuid>:
 8018454:	b538      	push	{r3, r4, r5, lr}
 8018456:	b181      	cbz	r1, 801847a <rclc_action_find_goal_handle_by_uuid+0x26>
 8018458:	b178      	cbz	r0, 801847a <rclc_action_find_goal_handle_by_uuid+0x26>
 801845a:	68c4      	ldr	r4, [r0, #12]
 801845c:	460d      	mov	r5, r1
 801845e:	b914      	cbnz	r4, 8018466 <rclc_action_find_goal_handle_by_uuid+0x12>
 8018460:	e009      	b.n	8018476 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018462:	6824      	ldr	r4, [r4, #0]
 8018464:	b13c      	cbz	r4, 8018476 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018466:	f104 0009 	add.w	r0, r4, #9
 801846a:	2210      	movs	r2, #16
 801846c:	4629      	mov	r1, r5
 801846e:	f003 fd19 	bl	801bea4 <memcmp>
 8018472:	2800      	cmp	r0, #0
 8018474:	d1f5      	bne.n	8018462 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018476:	4620      	mov	r0, r4
 8018478:	bd38      	pop	{r3, r4, r5, pc}
 801847a:	2400      	movs	r4, #0
 801847c:	4620      	mov	r0, r4
 801847e:	bd38      	pop	{r3, r4, r5, pc}

08018480 <rclc_action_find_first_handle_by_status>:
 8018480:	b140      	cbz	r0, 8018494 <rclc_action_find_first_handle_by_status+0x14>
 8018482:	68c0      	ldr	r0, [r0, #12]
 8018484:	b910      	cbnz	r0, 801848c <rclc_action_find_first_handle_by_status+0xc>
 8018486:	e005      	b.n	8018494 <rclc_action_find_first_handle_by_status+0x14>
 8018488:	6800      	ldr	r0, [r0, #0]
 801848a:	b118      	cbz	r0, 8018494 <rclc_action_find_first_handle_by_status+0x14>
 801848c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018490:	428b      	cmp	r3, r1
 8018492:	d1f9      	bne.n	8018488 <rclc_action_find_first_handle_by_status+0x8>
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop

08018498 <rclc_action_find_first_terminated_handle>:
 8018498:	b140      	cbz	r0, 80184ac <rclc_action_find_first_terminated_handle+0x14>
 801849a:	68c0      	ldr	r0, [r0, #12]
 801849c:	b910      	cbnz	r0, 80184a4 <rclc_action_find_first_terminated_handle+0xc>
 801849e:	e005      	b.n	80184ac <rclc_action_find_first_terminated_handle+0x14>
 80184a0:	6800      	ldr	r0, [r0, #0]
 80184a2:	b118      	cbz	r0, 80184ac <rclc_action_find_first_terminated_handle+0x14>
 80184a4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80184a8:	2b03      	cmp	r3, #3
 80184aa:	ddf9      	ble.n	80184a0 <rclc_action_find_first_terminated_handle+0x8>
 80184ac:	4770      	bx	lr
 80184ae:	bf00      	nop

080184b0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80184b0:	b170      	cbz	r0, 80184d0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80184b2:	68c0      	ldr	r0, [r0, #12]
 80184b4:	b160      	cbz	r0, 80184d0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80184b6:	b410      	push	{r4}
 80184b8:	e001      	b.n	80184be <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80184ba:	6800      	ldr	r0, [r0, #0]
 80184bc:	b128      	cbz	r0, 80184ca <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80184be:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80184c2:	4299      	cmp	r1, r3
 80184c4:	bf08      	it	eq
 80184c6:	4294      	cmpeq	r4, r2
 80184c8:	d1f7      	bne.n	80184ba <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80184ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184ce:	4770      	bx	lr
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop

080184d4 <rclc_action_find_handle_by_result_request_sequence_number>:
 80184d4:	b170      	cbz	r0, 80184f4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80184d6:	68c0      	ldr	r0, [r0, #12]
 80184d8:	b160      	cbz	r0, 80184f4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80184da:	b410      	push	{r4}
 80184dc:	e001      	b.n	80184e2 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80184de:	6800      	ldr	r0, [r0, #0]
 80184e0:	b128      	cbz	r0, 80184ee <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80184e2:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80184e6:	4299      	cmp	r1, r3
 80184e8:	bf08      	it	eq
 80184ea:	4294      	cmpeq	r4, r2
 80184ec:	d1f7      	bne.n	80184de <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80184ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184f2:	4770      	bx	lr
 80184f4:	4770      	bx	lr
 80184f6:	bf00      	nop

080184f8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80184f8:	b170      	cbz	r0, 8018518 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80184fa:	68c0      	ldr	r0, [r0, #12]
 80184fc:	b160      	cbz	r0, 8018518 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80184fe:	b410      	push	{r4}
 8018500:	e001      	b.n	8018506 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018502:	6800      	ldr	r0, [r0, #0]
 8018504:	b128      	cbz	r0, 8018512 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018506:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801850a:	4299      	cmp	r1, r3
 801850c:	bf08      	it	eq
 801850e:	4294      	cmpeq	r4, r2
 8018510:	d1f7      	bne.n	8018502 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018516:	4770      	bx	lr
 8018518:	4770      	bx	lr
 801851a:	bf00      	nop

0801851c <rclc_action_find_first_handle_with_goal_response>:
 801851c:	b140      	cbz	r0, 8018530 <rclc_action_find_first_handle_with_goal_response+0x14>
 801851e:	68c0      	ldr	r0, [r0, #12]
 8018520:	b910      	cbnz	r0, 8018528 <rclc_action_find_first_handle_with_goal_response+0xc>
 8018522:	e005      	b.n	8018530 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018524:	6800      	ldr	r0, [r0, #0]
 8018526:	b118      	cbz	r0, 8018530 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018528:	f890 3020 	ldrb.w	r3, [r0, #32]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d0f9      	beq.n	8018524 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018530:	4770      	bx	lr
 8018532:	bf00      	nop

08018534 <rclc_action_find_first_handle_with_result_response>:
 8018534:	b140      	cbz	r0, 8018548 <rclc_action_find_first_handle_with_result_response+0x14>
 8018536:	68c0      	ldr	r0, [r0, #12]
 8018538:	b910      	cbnz	r0, 8018540 <rclc_action_find_first_handle_with_result_response+0xc>
 801853a:	e005      	b.n	8018548 <rclc_action_find_first_handle_with_result_response+0x14>
 801853c:	6800      	ldr	r0, [r0, #0]
 801853e:	b118      	cbz	r0, 8018548 <rclc_action_find_first_handle_with_result_response+0x14>
 8018540:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018544:	2b00      	cmp	r3, #0
 8018546:	d0f9      	beq.n	801853c <rclc_action_find_first_handle_with_result_response+0x8>
 8018548:	4770      	bx	lr
 801854a:	bf00      	nop

0801854c <rclc_action_server_response_goal_request>:
 801854c:	b198      	cbz	r0, 8018576 <rclc_action_server_response_goal_request+0x2a>
 801854e:	2200      	movs	r2, #0
 8018550:	460b      	mov	r3, r1
 8018552:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8018556:	b510      	push	{r4, lr}
 8018558:	6844      	ldr	r4, [r0, #4]
 801855a:	b086      	sub	sp, #24
 801855c:	f104 0010 	add.w	r0, r4, #16
 8018560:	9205      	str	r2, [sp, #20]
 8018562:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018566:	aa03      	add	r2, sp, #12
 8018568:	f88d 300c 	strb.w	r3, [sp, #12]
 801856c:	f7ff fd3e 	bl	8017fec <rcl_action_send_goal_response>
 8018570:	b918      	cbnz	r0, 801857a <rclc_action_server_response_goal_request+0x2e>
 8018572:	b006      	add	sp, #24
 8018574:	bd10      	pop	{r4, pc}
 8018576:	200b      	movs	r0, #11
 8018578:	4770      	bx	lr
 801857a:	9001      	str	r0, [sp, #4]
 801857c:	f7f7 f81c 	bl	800f5b8 <rcutils_reset_error>
 8018580:	9801      	ldr	r0, [sp, #4]
 8018582:	b006      	add	sp, #24
 8018584:	bd10      	pop	{r4, pc}
 8018586:	bf00      	nop

08018588 <rclc_action_server_goal_cancel_accept>:
 8018588:	b310      	cbz	r0, 80185d0 <rclc_action_server_goal_cancel_accept+0x48>
 801858a:	b510      	push	{r4, lr}
 801858c:	b090      	sub	sp, #64	@ 0x40
 801858e:	4604      	mov	r4, r0
 8018590:	a806      	add	r0, sp, #24
 8018592:	f7ff ff01 	bl	8018398 <rcl_action_get_zero_initialized_cancel_response>
 8018596:	2300      	movs	r3, #0
 8018598:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801859c:	46ec      	mov	ip, sp
 801859e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80185a2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80185a6:	f88d 3018 	strb.w	r3, [sp, #24]
 80185aa:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80185ae:	f8cd d01c 	str.w	sp, [sp, #28]
 80185b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185b6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80185d8 <rclc_action_server_goal_cancel_accept+0x50>
 80185ba:	6860      	ldr	r0, [r4, #4]
 80185bc:	aa06      	add	r2, sp, #24
 80185be:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80185c2:	3010      	adds	r0, #16
 80185c4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80185c8:	f7ff fdc8 	bl	801815c <rcl_action_send_cancel_response>
 80185cc:	b010      	add	sp, #64	@ 0x40
 80185ce:	bd10      	pop	{r4, pc}
 80185d0:	200b      	movs	r0, #11
 80185d2:	4770      	bx	lr
 80185d4:	f3af 8000 	nop.w
 80185d8:	00000001 	.word	0x00000001
 80185dc:	00000001 	.word	0x00000001

080185e0 <rclc_action_server_goal_cancel_reject>:
 80185e0:	b082      	sub	sp, #8
 80185e2:	b530      	push	{r4, r5, lr}
 80185e4:	b08b      	sub	sp, #44	@ 0x2c
 80185e6:	ac0e      	add	r4, sp, #56	@ 0x38
 80185e8:	e884 000c 	stmia.w	r4, {r2, r3}
 80185ec:	b188      	cbz	r0, 8018612 <rclc_action_server_goal_cancel_reject+0x32>
 80185ee:	4604      	mov	r4, r0
 80185f0:	a801      	add	r0, sp, #4
 80185f2:	460d      	mov	r5, r1
 80185f4:	f7ff fed0 	bl	8018398 <rcl_action_get_zero_initialized_cancel_response>
 80185f8:	aa01      	add	r2, sp, #4
 80185fa:	a90e      	add	r1, sp, #56	@ 0x38
 80185fc:	f104 0010 	add.w	r0, r4, #16
 8018600:	f88d 5004 	strb.w	r5, [sp, #4]
 8018604:	f7ff fdaa 	bl	801815c <rcl_action_send_cancel_response>
 8018608:	b00b      	add	sp, #44	@ 0x2c
 801860a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801860e:	b002      	add	sp, #8
 8018610:	4770      	bx	lr
 8018612:	200b      	movs	r0, #11
 8018614:	b00b      	add	sp, #44	@ 0x2c
 8018616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801861a:	b002      	add	sp, #8
 801861c:	4770      	bx	lr
 801861e:	bf00      	nop

08018620 <__atomic_load_8>:
 8018620:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018624:	4a16      	ldr	r2, [pc, #88]	@ (8018680 <__atomic_load_8+0x60>)
 8018626:	4b17      	ldr	r3, [pc, #92]	@ (8018684 <__atomic_load_8+0x64>)
 8018628:	f04f 0c01 	mov.w	ip, #1
 801862c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8018630:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018634:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018638:	fb02 f101 	mul.w	r1, r2, r1
 801863c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018640:	fba3 2301 	umull	r2, r3, r3, r1
 8018644:	091b      	lsrs	r3, r3, #4
 8018646:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801864a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801864e:	b4d0      	push	{r4, r6, r7}
 8018650:	1ac9      	subs	r1, r1, r3
 8018652:	4c0d      	ldr	r4, [pc, #52]	@ (8018688 <__atomic_load_8+0x68>)
 8018654:	1862      	adds	r2, r4, r1
 8018656:	e8d2 3f4f 	ldrexb	r3, [r2]
 801865a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801865e:	2e00      	cmp	r6, #0
 8018660:	d1f9      	bne.n	8018656 <__atomic_load_8+0x36>
 8018662:	b2db      	uxtb	r3, r3
 8018664:	f3bf 8f5b 	dmb	ish
 8018668:	2b00      	cmp	r3, #0
 801866a:	d1f4      	bne.n	8018656 <__atomic_load_8+0x36>
 801866c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018670:	f3bf 8f5b 	dmb	ish
 8018674:	5463      	strb	r3, [r4, r1]
 8018676:	4630      	mov	r0, r6
 8018678:	4639      	mov	r1, r7
 801867a:	bcd0      	pop	{r4, r6, r7}
 801867c:	4770      	bx	lr
 801867e:	bf00      	nop
 8018680:	27d4eb2d 	.word	0x27d4eb2d
 8018684:	b21642c9 	.word	0xb21642c9
 8018688:	24012ff4 	.word	0x24012ff4

0801868c <__atomic_store_8>:
 801868c:	b570      	push	{r4, r5, r6, lr}
 801868e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018692:	4916      	ldr	r1, [pc, #88]	@ (80186ec <__atomic_store_8+0x60>)
 8018694:	4c16      	ldr	r4, [pc, #88]	@ (80186f0 <__atomic_store_8+0x64>)
 8018696:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801869a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801869e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80186a2:	fb01 fe0e 	mul.w	lr, r1, lr
 80186a6:	4913      	ldr	r1, [pc, #76]	@ (80186f4 <__atomic_store_8+0x68>)
 80186a8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80186ac:	fba1 510e 	umull	r5, r1, r1, lr
 80186b0:	f04f 0501 	mov.w	r5, #1
 80186b4:	0909      	lsrs	r1, r1, #4
 80186b6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80186ba:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 80186be:	ebae 0e01 	sub.w	lr, lr, r1
 80186c2:	eb04 0c0e 	add.w	ip, r4, lr
 80186c6:	e8dc 1f4f 	ldrexb	r1, [ip]
 80186ca:	e8cc 5f46 	strexb	r6, r5, [ip]
 80186ce:	2e00      	cmp	r6, #0
 80186d0:	d1f9      	bne.n	80186c6 <__atomic_store_8+0x3a>
 80186d2:	b2c9      	uxtb	r1, r1
 80186d4:	f3bf 8f5b 	dmb	ish
 80186d8:	2900      	cmp	r1, #0
 80186da:	d1f4      	bne.n	80186c6 <__atomic_store_8+0x3a>
 80186dc:	e9c0 2300 	strd	r2, r3, [r0]
 80186e0:	f3bf 8f5b 	dmb	ish
 80186e4:	f804 100e 	strb.w	r1, [r4, lr]
 80186e8:	bd70      	pop	{r4, r5, r6, pc}
 80186ea:	bf00      	nop
 80186ec:	27d4eb2d 	.word	0x27d4eb2d
 80186f0:	24012ff4 	.word	0x24012ff4
 80186f4:	b21642c9 	.word	0xb21642c9

080186f8 <__atomic_exchange_8>:
 80186f8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80186fc:	4917      	ldr	r1, [pc, #92]	@ (801875c <__atomic_exchange_8+0x64>)
 80186fe:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8018702:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018706:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801870a:	fb01 fc0c 	mul.w	ip, r1, ip
 801870e:	4914      	ldr	r1, [pc, #80]	@ (8018760 <__atomic_exchange_8+0x68>)
 8018710:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018714:	b570      	push	{r4, r5, r6, lr}
 8018716:	4686      	mov	lr, r0
 8018718:	fba1 010c 	umull	r0, r1, r1, ip
 801871c:	4d11      	ldr	r5, [pc, #68]	@ (8018764 <__atomic_exchange_8+0x6c>)
 801871e:	f04f 0001 	mov.w	r0, #1
 8018722:	0909      	lsrs	r1, r1, #4
 8018724:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018728:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801872c:	ebac 0c01 	sub.w	ip, ip, r1
 8018730:	eb05 010c 	add.w	r1, r5, ip
 8018734:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018738:	e8c1 0f46 	strexb	r6, r0, [r1]
 801873c:	2e00      	cmp	r6, #0
 801873e:	d1f9      	bne.n	8018734 <__atomic_exchange_8+0x3c>
 8018740:	b2e4      	uxtb	r4, r4
 8018742:	f3bf 8f5b 	dmb	ish
 8018746:	2c00      	cmp	r4, #0
 8018748:	d1f4      	bne.n	8018734 <__atomic_exchange_8+0x3c>
 801874a:	e9de 0100 	ldrd	r0, r1, [lr]
 801874e:	e9ce 2300 	strd	r2, r3, [lr]
 8018752:	f3bf 8f5b 	dmb	ish
 8018756:	f805 400c 	strb.w	r4, [r5, ip]
 801875a:	bd70      	pop	{r4, r5, r6, pc}
 801875c:	27d4eb2d 	.word	0x27d4eb2d
 8018760:	b21642c9 	.word	0xb21642c9
 8018764:	24012ff4 	.word	0x24012ff4

08018768 <rcutils_get_env>:
 8018768:	b168      	cbz	r0, 8018786 <rcutils_get_env+0x1e>
 801876a:	b510      	push	{r4, lr}
 801876c:	460c      	mov	r4, r1
 801876e:	b129      	cbz	r1, 801877c <rcutils_get_env+0x14>
 8018770:	f002 ff06 	bl	801b580 <getenv>
 8018774:	b120      	cbz	r0, 8018780 <rcutils_get_env+0x18>
 8018776:	6020      	str	r0, [r4, #0]
 8018778:	2000      	movs	r0, #0
 801877a:	bd10      	pop	{r4, pc}
 801877c:	4803      	ldr	r0, [pc, #12]	@ (801878c <rcutils_get_env+0x24>)
 801877e:	bd10      	pop	{r4, pc}
 8018780:	4b03      	ldr	r3, [pc, #12]	@ (8018790 <rcutils_get_env+0x28>)
 8018782:	6023      	str	r3, [r4, #0]
 8018784:	bd10      	pop	{r4, pc}
 8018786:	4803      	ldr	r0, [pc, #12]	@ (8018794 <rcutils_get_env+0x2c>)
 8018788:	4770      	bx	lr
 801878a:	bf00      	nop
 801878c:	0801d578 	.word	0x0801d578
 8018790:	0801d9b0 	.word	0x0801d9b0
 8018794:	0801d55c 	.word	0x0801d55c

08018798 <rcutils_is_directory>:
 8018798:	2000      	movs	r0, #0
 801879a:	4770      	bx	lr

0801879c <rcutils_join_path>:
 801879c:	b082      	sub	sp, #8
 801879e:	2000      	movs	r0, #0
 80187a0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80187a4:	b002      	add	sp, #8
 80187a6:	4770      	bx	lr

080187a8 <rcutils_to_native_path>:
 80187a8:	b084      	sub	sp, #16
 80187aa:	2000      	movs	r0, #0
 80187ac:	f10d 0c04 	add.w	ip, sp, #4
 80187b0:	b004      	add	sp, #16
 80187b2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80187b6:	4770      	bx	lr

080187b8 <rcutils_format_string_limit>:
 80187b8:	b40f      	push	{r0, r1, r2, r3}
 80187ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187bc:	b083      	sub	sp, #12
 80187be:	ac08      	add	r4, sp, #32
 80187c0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80187c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80187c6:	b326      	cbz	r6, 8018812 <rcutils_format_string_limit+0x5a>
 80187c8:	a808      	add	r0, sp, #32
 80187ca:	f7f6 fed1 	bl	800f570 <rcutils_allocator_is_valid>
 80187ce:	b300      	cbz	r0, 8018812 <rcutils_format_string_limit+0x5a>
 80187d0:	2100      	movs	r1, #0
 80187d2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80187d4:	4632      	mov	r2, r6
 80187d6:	4608      	mov	r0, r1
 80187d8:	e9cd 3300 	strd	r3, r3, [sp]
 80187dc:	f000 f906 	bl	80189ec <rcutils_vsnprintf>
 80187e0:	1c43      	adds	r3, r0, #1
 80187e2:	4605      	mov	r5, r0
 80187e4:	d015      	beq.n	8018812 <rcutils_format_string_limit+0x5a>
 80187e6:	1c47      	adds	r7, r0, #1
 80187e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187ea:	429f      	cmp	r7, r3
 80187ec:	d901      	bls.n	80187f2 <rcutils_format_string_limit+0x3a>
 80187ee:	1e5d      	subs	r5, r3, #1
 80187f0:	461f      	mov	r7, r3
 80187f2:	9b08      	ldr	r3, [sp, #32]
 80187f4:	4638      	mov	r0, r7
 80187f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80187f8:	4798      	blx	r3
 80187fa:	4604      	mov	r4, r0
 80187fc:	b148      	cbz	r0, 8018812 <rcutils_format_string_limit+0x5a>
 80187fe:	4632      	mov	r2, r6
 8018800:	4639      	mov	r1, r7
 8018802:	9b01      	ldr	r3, [sp, #4]
 8018804:	f000 f8f2 	bl	80189ec <rcutils_vsnprintf>
 8018808:	2800      	cmp	r0, #0
 801880a:	db09      	blt.n	8018820 <rcutils_format_string_limit+0x68>
 801880c:	2300      	movs	r3, #0
 801880e:	5563      	strb	r3, [r4, r5]
 8018810:	e000      	b.n	8018814 <rcutils_format_string_limit+0x5c>
 8018812:	2400      	movs	r4, #0
 8018814:	4620      	mov	r0, r4
 8018816:	b003      	add	sp, #12
 8018818:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801881c:	b004      	add	sp, #16
 801881e:	4770      	bx	lr
 8018820:	4620      	mov	r0, r4
 8018822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018824:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018826:	2400      	movs	r4, #0
 8018828:	4798      	blx	r3
 801882a:	e7f3      	b.n	8018814 <rcutils_format_string_limit+0x5c>

0801882c <rcutils_repl_str>:
 801882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018830:	ed2d 8b02 	vpush	{d8}
 8018834:	b087      	sub	sp, #28
 8018836:	2600      	movs	r6, #0
 8018838:	4680      	mov	r8, r0
 801883a:	468a      	mov	sl, r1
 801883c:	9000      	str	r0, [sp, #0]
 801883e:	4608      	mov	r0, r1
 8018840:	ee08 2a10 	vmov	s16, r2
 8018844:	4699      	mov	r9, r3
 8018846:	2510      	movs	r5, #16
 8018848:	f7e7 fd54 	bl	80002f4 <strlen>
 801884c:	4637      	mov	r7, r6
 801884e:	46b3      	mov	fp, r6
 8018850:	9001      	str	r0, [sp, #4]
 8018852:	e01e      	b.n	8018892 <rcutils_repl_str+0x66>
 8018854:	f10b 0b01 	add.w	fp, fp, #1
 8018858:	9b01      	ldr	r3, [sp, #4]
 801885a:	455e      	cmp	r6, fp
 801885c:	eb04 0803 	add.w	r8, r4, r3
 8018860:	d211      	bcs.n	8018886 <rcutils_repl_str+0x5a>
 8018862:	442e      	add	r6, r5
 8018864:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018868:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801886c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018870:	00b1      	lsls	r1, r6, #2
 8018872:	4798      	blx	r3
 8018874:	2800      	cmp	r0, #0
 8018876:	f000 8088 	beq.w	801898a <rcutils_repl_str+0x15e>
 801887a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801887e:	4607      	mov	r7, r0
 8018880:	bf28      	it	cs
 8018882:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8018886:	9a00      	ldr	r2, [sp, #0]
 8018888:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801888c:	1aa4      	subs	r4, r4, r2
 801888e:	f843 4c04 	str.w	r4, [r3, #-4]
 8018892:	4651      	mov	r1, sl
 8018894:	4640      	mov	r0, r8
 8018896:	f003 fb56 	bl	801bf46 <strstr>
 801889a:	4604      	mov	r4, r0
 801889c:	4638      	mov	r0, r7
 801889e:	2c00      	cmp	r4, #0
 80188a0:	d1d8      	bne.n	8018854 <rcutils_repl_str+0x28>
 80188a2:	4640      	mov	r0, r8
 80188a4:	f7e7 fd26 	bl	80002f4 <strlen>
 80188a8:	9b00      	ldr	r3, [sp, #0]
 80188aa:	eba8 0803 	sub.w	r8, r8, r3
 80188ae:	eb08 0400 	add.w	r4, r8, r0
 80188b2:	9402      	str	r4, [sp, #8]
 80188b4:	f1bb 0f00 	cmp.w	fp, #0
 80188b8:	d045      	beq.n	8018946 <rcutils_repl_str+0x11a>
 80188ba:	ee18 0a10 	vmov	r0, s16
 80188be:	f7e7 fd19 	bl	80002f4 <strlen>
 80188c2:	9a01      	ldr	r2, [sp, #4]
 80188c4:	4606      	mov	r6, r0
 80188c6:	f8d9 3000 	ldr.w	r3, [r9]
 80188ca:	1a82      	subs	r2, r0, r2
 80188cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80188d0:	fb0b 4202 	mla	r2, fp, r2, r4
 80188d4:	1c50      	adds	r0, r2, #1
 80188d6:	9205      	str	r2, [sp, #20]
 80188d8:	4798      	blx	r3
 80188da:	4682      	mov	sl, r0
 80188dc:	2800      	cmp	r0, #0
 80188de:	d054      	beq.n	801898a <rcutils_repl_str+0x15e>
 80188e0:	683a      	ldr	r2, [r7, #0]
 80188e2:	463d      	mov	r5, r7
 80188e4:	9900      	ldr	r1, [sp, #0]
 80188e6:	2401      	movs	r4, #1
 80188e8:	f003 fbcf 	bl	801c08a <memcpy>
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80188f2:	eb0a 0803 	add.w	r8, sl, r3
 80188f6:	ee18 7a10 	vmov	r7, s16
 80188fa:	f8dd a000 	ldr.w	sl, [sp]
 80188fe:	f8cd 9000 	str.w	r9, [sp]
 8018902:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018906:	4632      	mov	r2, r6
 8018908:	4639      	mov	r1, r7
 801890a:	4640      	mov	r0, r8
 801890c:	44b0      	add	r8, r6
 801890e:	f003 fbbc 	bl	801c08a <memcpy>
 8018912:	f855 2b04 	ldr.w	r2, [r5], #4
 8018916:	45a3      	cmp	fp, r4
 8018918:	444a      	add	r2, r9
 801891a:	eb0a 0102 	add.w	r1, sl, r2
 801891e:	d02a      	beq.n	8018976 <rcutils_repl_str+0x14a>
 8018920:	6828      	ldr	r0, [r5, #0]
 8018922:	1a82      	subs	r2, r0, r2
 8018924:	4640      	mov	r0, r8
 8018926:	4490      	add	r8, r2
 8018928:	f003 fbaf 	bl	801c08a <memcpy>
 801892c:	1c62      	adds	r2, r4, #1
 801892e:	45a3      	cmp	fp, r4
 8018930:	4614      	mov	r4, r2
 8018932:	d8e8      	bhi.n	8018906 <rcutils_repl_str+0xda>
 8018934:	f8dd 9000 	ldr.w	r9, [sp]
 8018938:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801893c:	2300      	movs	r3, #0
 801893e:	9a05      	ldr	r2, [sp, #20]
 8018940:	f80a 3002 	strb.w	r3, [sl, r2]
 8018944:	e00b      	b.n	801895e <rcutils_repl_str+0x132>
 8018946:	4620      	mov	r0, r4
 8018948:	f8d9 3000 	ldr.w	r3, [r9]
 801894c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018950:	3001      	adds	r0, #1
 8018952:	4798      	blx	r3
 8018954:	4682      	mov	sl, r0
 8018956:	b110      	cbz	r0, 801895e <rcutils_repl_str+0x132>
 8018958:	9900      	ldr	r1, [sp, #0]
 801895a:	f003 fb8e 	bl	801c07a <strcpy>
 801895e:	4638      	mov	r0, r7
 8018960:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018964:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018968:	4798      	blx	r3
 801896a:	4650      	mov	r0, sl
 801896c:	b007      	add	sp, #28
 801896e:	ecbd 8b02 	vpop	{d8}
 8018972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018976:	9b02      	ldr	r3, [sp, #8]
 8018978:	4640      	mov	r0, r8
 801897a:	f8dd 9000 	ldr.w	r9, [sp]
 801897e:	1a9a      	subs	r2, r3, r2
 8018980:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018984:	f003 fb81 	bl	801c08a <memcpy>
 8018988:	e7d8      	b.n	801893c <rcutils_repl_str+0x110>
 801898a:	f04f 0a00 	mov.w	sl, #0
 801898e:	e7e6      	b.n	801895e <rcutils_repl_str+0x132>

08018990 <rcutils_snprintf>:
 8018990:	b40c      	push	{r2, r3}
 8018992:	b530      	push	{r4, r5, lr}
 8018994:	b083      	sub	sp, #12
 8018996:	ab06      	add	r3, sp, #24
 8018998:	f853 2b04 	ldr.w	r2, [r3], #4
 801899c:	9301      	str	r3, [sp, #4]
 801899e:	b1e2      	cbz	r2, 80189da <rcutils_snprintf+0x4a>
 80189a0:	fab0 f480 	clz	r4, r0
 80189a4:	fab1 f581 	clz	r5, r1
 80189a8:	ea50 0c01 	orrs.w	ip, r0, r1
 80189ac:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80189b0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80189b4:	d008      	beq.n	80189c8 <rcutils_snprintf+0x38>
 80189b6:	b984      	cbnz	r4, 80189da <rcutils_snprintf+0x4a>
 80189b8:	b97d      	cbnz	r5, 80189da <rcutils_snprintf+0x4a>
 80189ba:	f003 f9d1 	bl	801bd60 <vsniprintf>
 80189be:	b003      	add	sp, #12
 80189c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189c4:	b002      	add	sp, #8
 80189c6:	4770      	bx	lr
 80189c8:	4661      	mov	r1, ip
 80189ca:	4660      	mov	r0, ip
 80189cc:	f003 f9c8 	bl	801bd60 <vsniprintf>
 80189d0:	b003      	add	sp, #12
 80189d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189d6:	b002      	add	sp, #8
 80189d8:	4770      	bx	lr
 80189da:	f003 fb21 	bl	801c020 <__errno>
 80189de:	2216      	movs	r2, #22
 80189e0:	4603      	mov	r3, r0
 80189e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189e6:	601a      	str	r2, [r3, #0]
 80189e8:	e7e9      	b.n	80189be <rcutils_snprintf+0x2e>
 80189ea:	bf00      	nop

080189ec <rcutils_vsnprintf>:
 80189ec:	b570      	push	{r4, r5, r6, lr}
 80189ee:	b1b2      	cbz	r2, 8018a1e <rcutils_vsnprintf+0x32>
 80189f0:	fab0 f480 	clz	r4, r0
 80189f4:	fab1 f581 	clz	r5, r1
 80189f8:	ea50 0c01 	orrs.w	ip, r0, r1
 80189fc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018a00:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018a04:	d005      	beq.n	8018a12 <rcutils_vsnprintf+0x26>
 8018a06:	b954      	cbnz	r4, 8018a1e <rcutils_vsnprintf+0x32>
 8018a08:	b94d      	cbnz	r5, 8018a1e <rcutils_vsnprintf+0x32>
 8018a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a0e:	f003 b9a7 	b.w	801bd60 <vsniprintf>
 8018a12:	4661      	mov	r1, ip
 8018a14:	4660      	mov	r0, ip
 8018a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a1a:	f003 b9a1 	b.w	801bd60 <vsniprintf>
 8018a1e:	f003 faff 	bl	801c020 <__errno>
 8018a22:	2316      	movs	r3, #22
 8018a24:	6003      	str	r3, [r0, #0]
 8018a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}

08018a2c <rcutils_strdup>:
 8018a2c:	b084      	sub	sp, #16
 8018a2e:	b570      	push	{r4, r5, r6, lr}
 8018a30:	b082      	sub	sp, #8
 8018a32:	4605      	mov	r5, r0
 8018a34:	ac07      	add	r4, sp, #28
 8018a36:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018a3a:	b1b0      	cbz	r0, 8018a6a <rcutils_strdup+0x3e>
 8018a3c:	f7e7 fc5a 	bl	80002f4 <strlen>
 8018a40:	1c42      	adds	r2, r0, #1
 8018a42:	9b07      	ldr	r3, [sp, #28]
 8018a44:	4606      	mov	r6, r0
 8018a46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018a48:	4610      	mov	r0, r2
 8018a4a:	9201      	str	r2, [sp, #4]
 8018a4c:	4798      	blx	r3
 8018a4e:	4604      	mov	r4, r0
 8018a50:	b128      	cbz	r0, 8018a5e <rcutils_strdup+0x32>
 8018a52:	9a01      	ldr	r2, [sp, #4]
 8018a54:	4629      	mov	r1, r5
 8018a56:	f003 fb18 	bl	801c08a <memcpy>
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	55a3      	strb	r3, [r4, r6]
 8018a5e:	4620      	mov	r0, r4
 8018a60:	b002      	add	sp, #8
 8018a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a66:	b004      	add	sp, #16
 8018a68:	4770      	bx	lr
 8018a6a:	4604      	mov	r4, r0
 8018a6c:	e7f7      	b.n	8018a5e <rcutils_strdup+0x32>
 8018a6e:	bf00      	nop

08018a70 <rcutils_strndup>:
 8018a70:	b082      	sub	sp, #8
 8018a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a74:	ac06      	add	r4, sp, #24
 8018a76:	4605      	mov	r5, r0
 8018a78:	e884 000c 	stmia.w	r4, {r2, r3}
 8018a7c:	b188      	cbz	r0, 8018aa2 <rcutils_strndup+0x32>
 8018a7e:	1c4f      	adds	r7, r1, #1
 8018a80:	460e      	mov	r6, r1
 8018a82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018a84:	4638      	mov	r0, r7
 8018a86:	4790      	blx	r2
 8018a88:	4604      	mov	r4, r0
 8018a8a:	b128      	cbz	r0, 8018a98 <rcutils_strndup+0x28>
 8018a8c:	463a      	mov	r2, r7
 8018a8e:	4629      	mov	r1, r5
 8018a90:	f003 fafb 	bl	801c08a <memcpy>
 8018a94:	2300      	movs	r3, #0
 8018a96:	55a3      	strb	r3, [r4, r6]
 8018a98:	4620      	mov	r0, r4
 8018a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a9e:	b002      	add	sp, #8
 8018aa0:	4770      	bx	lr
 8018aa2:	4604      	mov	r4, r0
 8018aa4:	e7f8      	b.n	8018a98 <rcutils_strndup+0x28>
 8018aa6:	bf00      	nop

08018aa8 <rcutils_get_zero_initialized_string_map>:
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	4b01      	ldr	r3, [pc, #4]	@ (8018ab0 <rcutils_get_zero_initialized_string_map+0x8>)
 8018aac:	6018      	str	r0, [r3, #0]
 8018aae:	4770      	bx	lr
 8018ab0:	2401300c 	.word	0x2401300c

08018ab4 <rcutils_string_map_reserve>:
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d05e      	beq.n	8018b76 <rcutils_string_map_reserve+0xc2>
 8018ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018abc:	460c      	mov	r4, r1
 8018abe:	6801      	ldr	r1, [r0, #0]
 8018ac0:	b082      	sub	sp, #8
 8018ac2:	4605      	mov	r5, r0
 8018ac4:	b129      	cbz	r1, 8018ad2 <rcutils_string_map_reserve+0x1e>
 8018ac6:	68cb      	ldr	r3, [r1, #12]
 8018ac8:	42a3      	cmp	r3, r4
 8018aca:	d906      	bls.n	8018ada <rcutils_string_map_reserve+0x26>
 8018acc:	461c      	mov	r4, r3
 8018ace:	2900      	cmp	r1, #0
 8018ad0:	d1f9      	bne.n	8018ac6 <rcutils_string_map_reserve+0x12>
 8018ad2:	201f      	movs	r0, #31
 8018ad4:	b002      	add	sp, #8
 8018ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ada:	688b      	ldr	r3, [r1, #8]
 8018adc:	42a3      	cmp	r3, r4
 8018ade:	d046      	beq.n	8018b6e <rcutils_string_map_reserve+0xba>
 8018ae0:	6a0e      	ldr	r6, [r1, #32]
 8018ae2:	2c00      	cmp	r4, #0
 8018ae4:	d033      	beq.n	8018b4e <rcutils_string_map_reserve+0x9a>
 8018ae6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018aea:	d242      	bcs.n	8018b72 <rcutils_string_map_reserve+0xbe>
 8018aec:	00a7      	lsls	r7, r4, #2
 8018aee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018af2:	6808      	ldr	r0, [r1, #0]
 8018af4:	4632      	mov	r2, r6
 8018af6:	4639      	mov	r1, r7
 8018af8:	47c0      	blx	r8
 8018afa:	2800      	cmp	r0, #0
 8018afc:	d039      	beq.n	8018b72 <rcutils_string_map_reserve+0xbe>
 8018afe:	682b      	ldr	r3, [r5, #0]
 8018b00:	4632      	mov	r2, r6
 8018b02:	4639      	mov	r1, r7
 8018b04:	6018      	str	r0, [r3, #0]
 8018b06:	6858      	ldr	r0, [r3, #4]
 8018b08:	47c0      	blx	r8
 8018b0a:	2800      	cmp	r0, #0
 8018b0c:	d031      	beq.n	8018b72 <rcutils_string_map_reserve+0xbe>
 8018b0e:	682d      	ldr	r5, [r5, #0]
 8018b10:	68ab      	ldr	r3, [r5, #8]
 8018b12:	6068      	str	r0, [r5, #4]
 8018b14:	42a3      	cmp	r3, r4
 8018b16:	d225      	bcs.n	8018b64 <rcutils_string_map_reserve+0xb0>
 8018b18:	682a      	ldr	r2, [r5, #0]
 8018b1a:	eb00 0c07 	add.w	ip, r0, r7
 8018b1e:	0099      	lsls	r1, r3, #2
 8018b20:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8018b24:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8018b28:	45e6      	cmp	lr, ip
 8018b2a:	d203      	bcs.n	8018b34 <rcutils_string_map_reserve+0x80>
 8018b2c:	eb02 0c07 	add.w	ip, r2, r7
 8018b30:	4566      	cmp	r6, ip
 8018b32:	d322      	bcc.n	8018b7a <rcutils_string_map_reserve+0xc6>
 8018b34:	1ae3      	subs	r3, r4, r3
 8018b36:	4670      	mov	r0, lr
 8018b38:	2100      	movs	r1, #0
 8018b3a:	009a      	lsls	r2, r3, #2
 8018b3c:	9201      	str	r2, [sp, #4]
 8018b3e:	f003 f9db 	bl	801bef8 <memset>
 8018b42:	9a01      	ldr	r2, [sp, #4]
 8018b44:	2100      	movs	r1, #0
 8018b46:	4630      	mov	r0, r6
 8018b48:	f003 f9d6 	bl	801bef8 <memset>
 8018b4c:	e00a      	b.n	8018b64 <rcutils_string_map_reserve+0xb0>
 8018b4e:	694f      	ldr	r7, [r1, #20]
 8018b50:	6808      	ldr	r0, [r1, #0]
 8018b52:	4631      	mov	r1, r6
 8018b54:	47b8      	blx	r7
 8018b56:	682b      	ldr	r3, [r5, #0]
 8018b58:	4631      	mov	r1, r6
 8018b5a:	6858      	ldr	r0, [r3, #4]
 8018b5c:	601c      	str	r4, [r3, #0]
 8018b5e:	47b8      	blx	r7
 8018b60:	682d      	ldr	r5, [r5, #0]
 8018b62:	606c      	str	r4, [r5, #4]
 8018b64:	2000      	movs	r0, #0
 8018b66:	60ac      	str	r4, [r5, #8]
 8018b68:	b002      	add	sp, #8
 8018b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b6e:	2000      	movs	r0, #0
 8018b70:	e7b0      	b.n	8018ad4 <rcutils_string_map_reserve+0x20>
 8018b72:	200a      	movs	r0, #10
 8018b74:	e7ae      	b.n	8018ad4 <rcutils_string_map_reserve+0x20>
 8018b76:	200b      	movs	r0, #11
 8018b78:	4770      	bx	lr
 8018b7a:	1f0b      	subs	r3, r1, #4
 8018b7c:	4418      	add	r0, r3
 8018b7e:	4413      	add	r3, r2
 8018b80:	3a04      	subs	r2, #4
 8018b82:	4417      	add	r7, r2
 8018b84:	2200      	movs	r2, #0
 8018b86:	f843 2f04 	str.w	r2, [r3, #4]!
 8018b8a:	42bb      	cmp	r3, r7
 8018b8c:	f840 2f04 	str.w	r2, [r0, #4]!
 8018b90:	d1f9      	bne.n	8018b86 <rcutils_string_map_reserve+0xd2>
 8018b92:	e7e7      	b.n	8018b64 <rcutils_string_map_reserve+0xb0>

08018b94 <rcutils_string_map_init>:
 8018b94:	b082      	sub	sp, #8
 8018b96:	b570      	push	{r4, r5, r6, lr}
 8018b98:	ac04      	add	r4, sp, #16
 8018b9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8018b9e:	b380      	cbz	r0, 8018c02 <rcutils_string_map_init+0x6e>
 8018ba0:	6806      	ldr	r6, [r0, #0]
 8018ba2:	4604      	mov	r4, r0
 8018ba4:	b12e      	cbz	r6, 8018bb2 <rcutils_string_map_init+0x1e>
 8018ba6:	251e      	movs	r5, #30
 8018ba8:	4628      	mov	r0, r5
 8018baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018bae:	b002      	add	sp, #8
 8018bb0:	4770      	bx	lr
 8018bb2:	a804      	add	r0, sp, #16
 8018bb4:	460d      	mov	r5, r1
 8018bb6:	f7f6 fcdb 	bl	800f570 <rcutils_allocator_is_valid>
 8018bba:	b310      	cbz	r0, 8018c02 <rcutils_string_map_init+0x6e>
 8018bbc:	9b04      	ldr	r3, [sp, #16]
 8018bbe:	2024      	movs	r0, #36	@ 0x24
 8018bc0:	9908      	ldr	r1, [sp, #32]
 8018bc2:	4798      	blx	r3
 8018bc4:	6020      	str	r0, [r4, #0]
 8018bc6:	b310      	cbz	r0, 8018c0e <rcutils_string_map_init+0x7a>
 8018bc8:	f10d 0e10 	add.w	lr, sp, #16
 8018bcc:	f100 0c10 	add.w	ip, r0, #16
 8018bd0:	e9c0 6600 	strd	r6, r6, [r0]
 8018bd4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018bd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018bdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018be0:	f8de 3000 	ldr.w	r3, [lr]
 8018be4:	4629      	mov	r1, r5
 8018be6:	4620      	mov	r0, r4
 8018be8:	f8cc 3000 	str.w	r3, [ip]
 8018bec:	f7ff ff62 	bl	8018ab4 <rcutils_string_map_reserve>
 8018bf0:	4605      	mov	r5, r0
 8018bf2:	2800      	cmp	r0, #0
 8018bf4:	d0d8      	beq.n	8018ba8 <rcutils_string_map_init+0x14>
 8018bf6:	9b05      	ldr	r3, [sp, #20]
 8018bf8:	9908      	ldr	r1, [sp, #32]
 8018bfa:	6820      	ldr	r0, [r4, #0]
 8018bfc:	4798      	blx	r3
 8018bfe:	6026      	str	r6, [r4, #0]
 8018c00:	e7d2      	b.n	8018ba8 <rcutils_string_map_init+0x14>
 8018c02:	250b      	movs	r5, #11
 8018c04:	4628      	mov	r0, r5
 8018c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c0a:	b002      	add	sp, #8
 8018c0c:	4770      	bx	lr
 8018c0e:	250a      	movs	r5, #10
 8018c10:	e7ca      	b.n	8018ba8 <rcutils_string_map_init+0x14>
 8018c12:	bf00      	nop

08018c14 <rcutils_string_map_fini>:
 8018c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c18:	b082      	sub	sp, #8
 8018c1a:	2800      	cmp	r0, #0
 8018c1c:	d03a      	beq.n	8018c94 <rcutils_string_map_fini+0x80>
 8018c1e:	6804      	ldr	r4, [r0, #0]
 8018c20:	4606      	mov	r6, r0
 8018c22:	2c00      	cmp	r4, #0
 8018c24:	d032      	beq.n	8018c8c <rcutils_string_map_fini+0x78>
 8018c26:	68a3      	ldr	r3, [r4, #8]
 8018c28:	b32b      	cbz	r3, 8018c76 <rcutils_string_map_fini+0x62>
 8018c2a:	2500      	movs	r5, #0
 8018c2c:	6822      	ldr	r2, [r4, #0]
 8018c2e:	462f      	mov	r7, r5
 8018c30:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018c34:	b1e0      	cbz	r0, 8018c70 <rcutils_string_map_fini+0x5c>
 8018c36:	6a21      	ldr	r1, [r4, #32]
 8018c38:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018c3c:	9101      	str	r1, [sp, #4]
 8018c3e:	47c0      	blx	r8
 8018c40:	9901      	ldr	r1, [sp, #4]
 8018c42:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018c46:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8018c4a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018c4e:	47c0      	blx	r8
 8018c50:	68e3      	ldr	r3, [r4, #12]
 8018c52:	6862      	ldr	r2, [r4, #4]
 8018c54:	3b01      	subs	r3, #1
 8018c56:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018c5a:	3501      	adds	r5, #1
 8018c5c:	60e3      	str	r3, [r4, #12]
 8018c5e:	6834      	ldr	r4, [r6, #0]
 8018c60:	68a3      	ldr	r3, [r4, #8]
 8018c62:	429d      	cmp	r5, r3
 8018c64:	d207      	bcs.n	8018c76 <rcutils_string_map_fini+0x62>
 8018c66:	6822      	ldr	r2, [r4, #0]
 8018c68:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018c6c:	2800      	cmp	r0, #0
 8018c6e:	d1e2      	bne.n	8018c36 <rcutils_string_map_fini+0x22>
 8018c70:	3501      	adds	r5, #1
 8018c72:	429d      	cmp	r5, r3
 8018c74:	d3dc      	bcc.n	8018c30 <rcutils_string_map_fini+0x1c>
 8018c76:	2100      	movs	r1, #0
 8018c78:	4630      	mov	r0, r6
 8018c7a:	f7ff ff1b 	bl	8018ab4 <rcutils_string_map_reserve>
 8018c7e:	4604      	mov	r4, r0
 8018c80:	b920      	cbnz	r0, 8018c8c <rcutils_string_map_fini+0x78>
 8018c82:	6830      	ldr	r0, [r6, #0]
 8018c84:	6943      	ldr	r3, [r0, #20]
 8018c86:	6a01      	ldr	r1, [r0, #32]
 8018c88:	4798      	blx	r3
 8018c8a:	6034      	str	r4, [r6, #0]
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	b002      	add	sp, #8
 8018c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c94:	240b      	movs	r4, #11
 8018c96:	4620      	mov	r0, r4
 8018c98:	b002      	add	sp, #8
 8018c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c9e:	bf00      	nop

08018ca0 <rcutils_string_map_getn>:
 8018ca0:	b378      	cbz	r0, 8018d02 <rcutils_string_map_getn+0x62>
 8018ca2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca6:	f8d0 b000 	ldr.w	fp, [r0]
 8018caa:	f1bb 0f00 	cmp.w	fp, #0
 8018cae:	d01f      	beq.n	8018cf0 <rcutils_string_map_getn+0x50>
 8018cb0:	fab1 f481 	clz	r4, r1
 8018cb4:	4688      	mov	r8, r1
 8018cb6:	0964      	lsrs	r4, r4, #5
 8018cb8:	b1d1      	cbz	r1, 8018cf0 <rcutils_string_map_getn+0x50>
 8018cba:	f8db 7008 	ldr.w	r7, [fp, #8]
 8018cbe:	f8db 6000 	ldr.w	r6, [fp]
 8018cc2:	b1af      	cbz	r7, 8018cf0 <rcutils_string_map_getn+0x50>
 8018cc4:	4691      	mov	r9, r2
 8018cc6:	3e04      	subs	r6, #4
 8018cc8:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018ccc:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018cd0:	3401      	adds	r4, #1
 8018cd2:	4628      	mov	r0, r5
 8018cd4:	b155      	cbz	r5, 8018cec <rcutils_string_map_getn+0x4c>
 8018cd6:	f7e7 fb0d 	bl	80002f4 <strlen>
 8018cda:	4602      	mov	r2, r0
 8018cdc:	4629      	mov	r1, r5
 8018cde:	4640      	mov	r0, r8
 8018ce0:	454a      	cmp	r2, r9
 8018ce2:	bf38      	it	cc
 8018ce4:	464a      	movcc	r2, r9
 8018ce6:	f003 f91c 	bl	801bf22 <strncmp>
 8018cea:	b120      	cbz	r0, 8018cf6 <rcutils_string_map_getn+0x56>
 8018cec:	42a7      	cmp	r7, r4
 8018cee:	d1eb      	bne.n	8018cc8 <rcutils_string_map_getn+0x28>
 8018cf0:	2000      	movs	r0, #0
 8018cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018cfa:	f853 000a 	ldr.w	r0, [r3, sl]
 8018cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d02:	4770      	bx	lr
 8018d04:	0000      	movs	r0, r0
	...

08018d08 <rmw_get_zero_initialized_context>:
 8018d08:	b510      	push	{r4, lr}
 8018d0a:	4604      	mov	r4, r0
 8018d0c:	3010      	adds	r0, #16
 8018d0e:	f7f6 fcbb 	bl	800f688 <rmw_get_zero_initialized_init_options>
 8018d12:	2300      	movs	r3, #0
 8018d14:	4620      	mov	r0, r4
 8018d16:	60a3      	str	r3, [r4, #8]
 8018d18:	64a3      	str	r3, [r4, #72]	@ 0x48
 8018d1a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8018d1c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8018d28 <rmw_get_zero_initialized_context+0x20>
 8018d20:	ed84 7b00 	vstr	d7, [r4]
 8018d24:	bd10      	pop	{r4, pc}
 8018d26:	bf00      	nop
	...

08018d30 <rmw_time_equal>:
 8018d30:	b4f0      	push	{r4, r5, r6, r7}
 8018d32:	b084      	sub	sp, #16
 8018d34:	ac04      	add	r4, sp, #16
 8018d36:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	4925      	ldr	r1, [pc, #148]	@ (8018dd4 <rmw_time_equal+0xa4>)
 8018d3e:	9d01      	ldr	r5, [sp, #4]
 8018d40:	4610      	mov	r0, r2
 8018d42:	4299      	cmp	r1, r3
 8018d44:	f04f 0202 	mov.w	r2, #2
 8018d48:	9e03      	ldr	r6, [sp, #12]
 8018d4a:	41aa      	sbcs	r2, r5
 8018d4c:	d330      	bcc.n	8018db0 <rmw_time_equal+0x80>
 8018d4e:	4c22      	ldr	r4, [pc, #136]	@ (8018dd8 <rmw_time_equal+0xa8>)
 8018d50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018d54:	fba3 3204 	umull	r3, r2, r3, r4
 8018d58:	fb04 2205 	mla	r2, r4, r5, r2
 8018d5c:	43dd      	mvns	r5, r3
 8018d5e:	1a8c      	subs	r4, r1, r2
 8018d60:	4285      	cmp	r5, r0
 8018d62:	41b4      	sbcs	r4, r6
 8018d64:	d332      	bcc.n	8018dcc <rmw_time_equal+0x9c>
 8018d66:	eb10 0c03 	adds.w	ip, r0, r3
 8018d6a:	eb42 0106 	adc.w	r1, r2, r6
 8018d6e:	4819      	ldr	r0, [pc, #100]	@ (8018dd4 <rmw_time_equal+0xa4>)
 8018d70:	2202      	movs	r2, #2
 8018d72:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018d74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018d76:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018d7a:	4298      	cmp	r0, r3
 8018d7c:	41b2      	sbcs	r2, r6
 8018d7e:	d31c      	bcc.n	8018dba <rmw_time_equal+0x8a>
 8018d80:	4c15      	ldr	r4, [pc, #84]	@ (8018dd8 <rmw_time_equal+0xa8>)
 8018d82:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018d86:	fba3 3204 	umull	r3, r2, r3, r4
 8018d8a:	fb04 2206 	mla	r2, r4, r6, r2
 8018d8e:	43de      	mvns	r6, r3
 8018d90:	1a84      	subs	r4, r0, r2
 8018d92:	42ae      	cmp	r6, r5
 8018d94:	41bc      	sbcs	r4, r7
 8018d96:	d315      	bcc.n	8018dc4 <rmw_time_equal+0x94>
 8018d98:	195b      	adds	r3, r3, r5
 8018d9a:	eb42 0207 	adc.w	r2, r2, r7
 8018d9e:	428a      	cmp	r2, r1
 8018da0:	bf08      	it	eq
 8018da2:	4563      	cmpeq	r3, ip
 8018da4:	bf0c      	ite	eq
 8018da6:	2001      	moveq	r0, #1
 8018da8:	2000      	movne	r0, #0
 8018daa:	b004      	add	sp, #16
 8018dac:	bcf0      	pop	{r4, r5, r6, r7}
 8018dae:	4770      	bx	lr
 8018db0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018db4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018db8:	e7d9      	b.n	8018d6e <rmw_time_equal+0x3e>
 8018dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018dbe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018dc2:	e7ec      	b.n	8018d9e <rmw_time_equal+0x6e>
 8018dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018dc8:	4602      	mov	r2, r0
 8018dca:	e7e8      	b.n	8018d9e <rmw_time_equal+0x6e>
 8018dcc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018dd0:	e7cd      	b.n	8018d6e <rmw_time_equal+0x3e>
 8018dd2:	bf00      	nop
 8018dd4:	25c17d04 	.word	0x25c17d04
 8018dd8:	3b9aca00 	.word	0x3b9aca00

08018ddc <rmw_time_total_nsec>:
 8018ddc:	b470      	push	{r4, r5, r6}
 8018dde:	b085      	sub	sp, #20
 8018de0:	ac04      	add	r4, sp, #16
 8018de2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018de6:	4603      	mov	r3, r0
 8018de8:	4913      	ldr	r1, [pc, #76]	@ (8018e38 <rmw_time_total_nsec+0x5c>)
 8018dea:	9d01      	ldr	r5, [sp, #4]
 8018dec:	4610      	mov	r0, r2
 8018dee:	4299      	cmp	r1, r3
 8018df0:	f04f 0202 	mov.w	r2, #2
 8018df4:	9e03      	ldr	r6, [sp, #12]
 8018df6:	41aa      	sbcs	r2, r5
 8018df8:	d311      	bcc.n	8018e1e <rmw_time_total_nsec+0x42>
 8018dfa:	4c10      	ldr	r4, [pc, #64]	@ (8018e3c <rmw_time_total_nsec+0x60>)
 8018dfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018e00:	fba3 3204 	umull	r3, r2, r3, r4
 8018e04:	fb04 2205 	mla	r2, r4, r5, r2
 8018e08:	43dd      	mvns	r5, r3
 8018e0a:	1a8c      	subs	r4, r1, r2
 8018e0c:	4285      	cmp	r5, r0
 8018e0e:	41b4      	sbcs	r4, r6
 8018e10:	d30c      	bcc.n	8018e2c <rmw_time_total_nsec+0x50>
 8018e12:	1818      	adds	r0, r3, r0
 8018e14:	eb42 0106 	adc.w	r1, r2, r6
 8018e18:	b005      	add	sp, #20
 8018e1a:	bc70      	pop	{r4, r5, r6}
 8018e1c:	4770      	bx	lr
 8018e1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e22:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018e26:	b005      	add	sp, #20
 8018e28:	bc70      	pop	{r4, r5, r6}
 8018e2a:	4770      	bx	lr
 8018e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e30:	b005      	add	sp, #20
 8018e32:	bc70      	pop	{r4, r5, r6}
 8018e34:	4770      	bx	lr
 8018e36:	bf00      	nop
 8018e38:	25c17d04 	.word	0x25c17d04
 8018e3c:	3b9aca00 	.word	0x3b9aca00

08018e40 <rmw_get_zero_initialized_message_info>:
 8018e40:	b510      	push	{r4, lr}
 8018e42:	4604      	mov	r4, r0
 8018e44:	2240      	movs	r2, #64	@ 0x40
 8018e46:	2100      	movs	r1, #0
 8018e48:	f003 f856 	bl	801bef8 <memset>
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	bd10      	pop	{r4, pc}

08018e50 <rmw_validate_full_topic_name>:
 8018e50:	2800      	cmp	r0, #0
 8018e52:	d05d      	beq.n	8018f10 <rmw_validate_full_topic_name+0xc0>
 8018e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e58:	460d      	mov	r5, r1
 8018e5a:	2900      	cmp	r1, #0
 8018e5c:	d05a      	beq.n	8018f14 <rmw_validate_full_topic_name+0xc4>
 8018e5e:	4604      	mov	r4, r0
 8018e60:	4616      	mov	r6, r2
 8018e62:	f7e7 fa47 	bl	80002f4 <strlen>
 8018e66:	b150      	cbz	r0, 8018e7e <rmw_validate_full_topic_name+0x2e>
 8018e68:	7823      	ldrb	r3, [r4, #0]
 8018e6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8018e6c:	d00e      	beq.n	8018e8c <rmw_validate_full_topic_name+0x3c>
 8018e6e:	2302      	movs	r3, #2
 8018e70:	602b      	str	r3, [r5, #0]
 8018e72:	b146      	cbz	r6, 8018e86 <rmw_validate_full_topic_name+0x36>
 8018e74:	2300      	movs	r3, #0
 8018e76:	4618      	mov	r0, r3
 8018e78:	6033      	str	r3, [r6, #0]
 8018e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e7e:	2301      	movs	r3, #1
 8018e80:	602b      	str	r3, [r5, #0]
 8018e82:	2e00      	cmp	r6, #0
 8018e84:	d1f6      	bne.n	8018e74 <rmw_validate_full_topic_name+0x24>
 8018e86:	2000      	movs	r0, #0
 8018e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e8c:	1e43      	subs	r3, r0, #1
 8018e8e:	5ce2      	ldrb	r2, [r4, r3]
 8018e90:	2a2f      	cmp	r2, #47	@ 0x2f
 8018e92:	d041      	beq.n	8018f18 <rmw_validate_full_topic_name+0xc8>
 8018e94:	1e62      	subs	r2, r4, #1
 8018e96:	f1c4 0e01 	rsb	lr, r4, #1
 8018e9a:	eb02 0800 	add.w	r8, r2, r0
 8018e9e:	eb0e 0702 	add.w	r7, lr, r2
 8018ea2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018ea6:	f023 0120 	bic.w	r1, r3, #32
 8018eaa:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8018eae:	3941      	subs	r1, #65	@ 0x41
 8018eb0:	2919      	cmp	r1, #25
 8018eb2:	d90f      	bls.n	8018ed4 <rmw_validate_full_topic_name+0x84>
 8018eb4:	f1bc 0f0a 	cmp.w	ip, #10
 8018eb8:	d90c      	bls.n	8018ed4 <rmw_validate_full_topic_name+0x84>
 8018eba:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8018ebe:	fab3 f383 	clz	r3, r3
 8018ec2:	095b      	lsrs	r3, r3, #5
 8018ec4:	b933      	cbnz	r3, 8018ed4 <rmw_validate_full_topic_name+0x84>
 8018ec6:	2204      	movs	r2, #4
 8018ec8:	602a      	str	r2, [r5, #0]
 8018eca:	2e00      	cmp	r6, #0
 8018ecc:	d0db      	beq.n	8018e86 <rmw_validate_full_topic_name+0x36>
 8018ece:	4618      	mov	r0, r3
 8018ed0:	6037      	str	r7, [r6, #0]
 8018ed2:	e7d2      	b.n	8018e7a <rmw_validate_full_topic_name+0x2a>
 8018ed4:	4542      	cmp	r2, r8
 8018ed6:	d1e2      	bne.n	8018e9e <rmw_validate_full_topic_name+0x4e>
 8018ed8:	2301      	movs	r3, #1
 8018eda:	4f1a      	ldr	r7, [pc, #104]	@ (8018f44 <rmw_validate_full_topic_name+0xf4>)
 8018edc:	e004      	b.n	8018ee8 <rmw_validate_full_topic_name+0x98>
 8018ede:	4298      	cmp	r0, r3
 8018ee0:	f104 0401 	add.w	r4, r4, #1
 8018ee4:	4613      	mov	r3, r2
 8018ee6:	d91c      	bls.n	8018f22 <rmw_validate_full_topic_name+0xd2>
 8018ee8:	4298      	cmp	r0, r3
 8018eea:	f103 0201 	add.w	r2, r3, #1
 8018eee:	d0f6      	beq.n	8018ede <rmw_validate_full_topic_name+0x8e>
 8018ef0:	7821      	ldrb	r1, [r4, #0]
 8018ef2:	292f      	cmp	r1, #47	@ 0x2f
 8018ef4:	d1f3      	bne.n	8018ede <rmw_validate_full_topic_name+0x8e>
 8018ef6:	7861      	ldrb	r1, [r4, #1]
 8018ef8:	292f      	cmp	r1, #47	@ 0x2f
 8018efa:	d01e      	beq.n	8018f3a <rmw_validate_full_topic_name+0xea>
 8018efc:	5dc9      	ldrb	r1, [r1, r7]
 8018efe:	0749      	lsls	r1, r1, #29
 8018f00:	d5ed      	bpl.n	8018ede <rmw_validate_full_topic_name+0x8e>
 8018f02:	2206      	movs	r2, #6
 8018f04:	602a      	str	r2, [r5, #0]
 8018f06:	2e00      	cmp	r6, #0
 8018f08:	d0bd      	beq.n	8018e86 <rmw_validate_full_topic_name+0x36>
 8018f0a:	2000      	movs	r0, #0
 8018f0c:	6033      	str	r3, [r6, #0]
 8018f0e:	e7b4      	b.n	8018e7a <rmw_validate_full_topic_name+0x2a>
 8018f10:	200b      	movs	r0, #11
 8018f12:	4770      	bx	lr
 8018f14:	200b      	movs	r0, #11
 8018f16:	e7b0      	b.n	8018e7a <rmw_validate_full_topic_name+0x2a>
 8018f18:	2203      	movs	r2, #3
 8018f1a:	602a      	str	r2, [r5, #0]
 8018f1c:	2e00      	cmp	r6, #0
 8018f1e:	d1f4      	bne.n	8018f0a <rmw_validate_full_topic_name+0xba>
 8018f20:	e7b1      	b.n	8018e86 <rmw_validate_full_topic_name+0x36>
 8018f22:	28f7      	cmp	r0, #247	@ 0xf7
 8018f24:	d803      	bhi.n	8018f2e <rmw_validate_full_topic_name+0xde>
 8018f26:	2300      	movs	r3, #0
 8018f28:	4618      	mov	r0, r3
 8018f2a:	602b      	str	r3, [r5, #0]
 8018f2c:	e7a5      	b.n	8018e7a <rmw_validate_full_topic_name+0x2a>
 8018f2e:	2307      	movs	r3, #7
 8018f30:	602b      	str	r3, [r5, #0]
 8018f32:	2e00      	cmp	r6, #0
 8018f34:	d0a7      	beq.n	8018e86 <rmw_validate_full_topic_name+0x36>
 8018f36:	23f6      	movs	r3, #246	@ 0xf6
 8018f38:	e7e7      	b.n	8018f0a <rmw_validate_full_topic_name+0xba>
 8018f3a:	2205      	movs	r2, #5
 8018f3c:	602a      	str	r2, [r5, #0]
 8018f3e:	2e00      	cmp	r6, #0
 8018f40:	d1e3      	bne.n	8018f0a <rmw_validate_full_topic_name+0xba>
 8018f42:	e7a0      	b.n	8018e86 <rmw_validate_full_topic_name+0x36>
 8018f44:	0801dac6 	.word	0x0801dac6

08018f48 <rmw_validate_namespace_with_size>:
 8018f48:	2800      	cmp	r0, #0
 8018f4a:	d043      	beq.n	8018fd4 <rmw_validate_namespace_with_size+0x8c>
 8018f4c:	b570      	push	{r4, r5, r6, lr}
 8018f4e:	4614      	mov	r4, r2
 8018f50:	b0c2      	sub	sp, #264	@ 0x108
 8018f52:	b32a      	cbz	r2, 8018fa0 <rmw_validate_namespace_with_size+0x58>
 8018f54:	2901      	cmp	r1, #1
 8018f56:	460d      	mov	r5, r1
 8018f58:	461e      	mov	r6, r3
 8018f5a:	d102      	bne.n	8018f62 <rmw_validate_namespace_with_size+0x1a>
 8018f5c:	7803      	ldrb	r3, [r0, #0]
 8018f5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8018f60:	d012      	beq.n	8018f88 <rmw_validate_namespace_with_size+0x40>
 8018f62:	aa01      	add	r2, sp, #4
 8018f64:	4669      	mov	r1, sp
 8018f66:	f7ff ff73 	bl	8018e50 <rmw_validate_full_topic_name>
 8018f6a:	b980      	cbnz	r0, 8018f8e <rmw_validate_namespace_with_size+0x46>
 8018f6c:	9a00      	ldr	r2, [sp, #0]
 8018f6e:	b14a      	cbz	r2, 8018f84 <rmw_validate_namespace_with_size+0x3c>
 8018f70:	2a07      	cmp	r2, #7
 8018f72:	d007      	beq.n	8018f84 <rmw_validate_namespace_with_size+0x3c>
 8018f74:	1e53      	subs	r3, r2, #1
 8018f76:	2b05      	cmp	r3, #5
 8018f78:	d82e      	bhi.n	8018fd8 <rmw_validate_namespace_with_size+0x90>
 8018f7a:	e8df f003 	tbb	[pc, r3]
 8018f7e:	1f1c      	.short	0x1f1c
 8018f80:	14282522 	.word	0x14282522
 8018f84:	2df5      	cmp	r5, #245	@ 0xf5
 8018f86:	d804      	bhi.n	8018f92 <rmw_validate_namespace_with_size+0x4a>
 8018f88:	2300      	movs	r3, #0
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	6023      	str	r3, [r4, #0]
 8018f8e:	b042      	add	sp, #264	@ 0x108
 8018f90:	bd70      	pop	{r4, r5, r6, pc}
 8018f92:	2307      	movs	r3, #7
 8018f94:	6023      	str	r3, [r4, #0]
 8018f96:	2e00      	cmp	r6, #0
 8018f98:	d0f9      	beq.n	8018f8e <rmw_validate_namespace_with_size+0x46>
 8018f9a:	23f4      	movs	r3, #244	@ 0xf4
 8018f9c:	6033      	str	r3, [r6, #0]
 8018f9e:	e7f6      	b.n	8018f8e <rmw_validate_namespace_with_size+0x46>
 8018fa0:	200b      	movs	r0, #11
 8018fa2:	b042      	add	sp, #264	@ 0x108
 8018fa4:	bd70      	pop	{r4, r5, r6, pc}
 8018fa6:	2306      	movs	r3, #6
 8018fa8:	6023      	str	r3, [r4, #0]
 8018faa:	2e00      	cmp	r6, #0
 8018fac:	d0ef      	beq.n	8018f8e <rmw_validate_namespace_with_size+0x46>
 8018fae:	9b01      	ldr	r3, [sp, #4]
 8018fb0:	6033      	str	r3, [r6, #0]
 8018fb2:	b042      	add	sp, #264	@ 0x108
 8018fb4:	bd70      	pop	{r4, r5, r6, pc}
 8018fb6:	2301      	movs	r3, #1
 8018fb8:	6023      	str	r3, [r4, #0]
 8018fba:	e7f6      	b.n	8018faa <rmw_validate_namespace_with_size+0x62>
 8018fbc:	2302      	movs	r3, #2
 8018fbe:	6023      	str	r3, [r4, #0]
 8018fc0:	e7f3      	b.n	8018faa <rmw_validate_namespace_with_size+0x62>
 8018fc2:	2303      	movs	r3, #3
 8018fc4:	6023      	str	r3, [r4, #0]
 8018fc6:	e7f0      	b.n	8018faa <rmw_validate_namespace_with_size+0x62>
 8018fc8:	2304      	movs	r3, #4
 8018fca:	6023      	str	r3, [r4, #0]
 8018fcc:	e7ed      	b.n	8018faa <rmw_validate_namespace_with_size+0x62>
 8018fce:	2305      	movs	r3, #5
 8018fd0:	6023      	str	r3, [r4, #0]
 8018fd2:	e7ea      	b.n	8018faa <rmw_validate_namespace_with_size+0x62>
 8018fd4:	200b      	movs	r0, #11
 8018fd6:	4770      	bx	lr
 8018fd8:	4613      	mov	r3, r2
 8018fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018fde:	4a03      	ldr	r2, [pc, #12]	@ (8018fec <rmw_validate_namespace_with_size+0xa4>)
 8018fe0:	a802      	add	r0, sp, #8
 8018fe2:	f7ff fcd5 	bl	8018990 <rcutils_snprintf>
 8018fe6:	2001      	movs	r0, #1
 8018fe8:	e7d1      	b.n	8018f8e <rmw_validate_namespace_with_size+0x46>
 8018fea:	bf00      	nop
 8018fec:	0801d594 	.word	0x0801d594

08018ff0 <rmw_validate_namespace>:
 8018ff0:	b168      	cbz	r0, 801900e <rmw_validate_namespace+0x1e>
 8018ff2:	b570      	push	{r4, r5, r6, lr}
 8018ff4:	460d      	mov	r5, r1
 8018ff6:	4616      	mov	r6, r2
 8018ff8:	4604      	mov	r4, r0
 8018ffa:	f7e7 f97b 	bl	80002f4 <strlen>
 8018ffe:	4633      	mov	r3, r6
 8019000:	4601      	mov	r1, r0
 8019002:	462a      	mov	r2, r5
 8019004:	4620      	mov	r0, r4
 8019006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801900a:	f7ff bf9d 	b.w	8018f48 <rmw_validate_namespace_with_size>
 801900e:	200b      	movs	r0, #11
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop

08019014 <rmw_namespace_validation_result_string>:
 8019014:	2807      	cmp	r0, #7
 8019016:	d803      	bhi.n	8019020 <rmw_namespace_validation_result_string+0xc>
 8019018:	4b02      	ldr	r3, [pc, #8]	@ (8019024 <rmw_namespace_validation_result_string+0x10>)
 801901a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801901e:	4770      	bx	lr
 8019020:	4801      	ldr	r0, [pc, #4]	@ (8019028 <rmw_namespace_validation_result_string+0x14>)
 8019022:	4770      	bx	lr
 8019024:	0801d78c 	.word	0x0801d78c
 8019028:	0801d5e4 	.word	0x0801d5e4

0801902c <rmw_validate_node_name>:
 801902c:	2800      	cmp	r0, #0
 801902e:	d042      	beq.n	80190b6 <rmw_validate_node_name+0x8a>
 8019030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019034:	460d      	mov	r5, r1
 8019036:	2900      	cmp	r1, #0
 8019038:	d03f      	beq.n	80190ba <rmw_validate_node_name+0x8e>
 801903a:	4604      	mov	r4, r0
 801903c:	4616      	mov	r6, r2
 801903e:	f7e7 f959 	bl	80002f4 <strlen>
 8019042:	b310      	cbz	r0, 801908a <rmw_validate_node_name+0x5e>
 8019044:	1e63      	subs	r3, r4, #1
 8019046:	f1c4 0101 	rsb	r1, r4, #1
 801904a:	eb03 0800 	add.w	r8, r3, r0
 801904e:	18cf      	adds	r7, r1, r3
 8019050:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8019054:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8019058:	f02e 0c20 	bic.w	ip, lr, #32
 801905c:	2a09      	cmp	r2, #9
 801905e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8019062:	d905      	bls.n	8019070 <rmw_validate_node_name+0x44>
 8019064:	f1bc 0f19 	cmp.w	ip, #25
 8019068:	d902      	bls.n	8019070 <rmw_validate_node_name+0x44>
 801906a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801906e:	d114      	bne.n	801909a <rmw_validate_node_name+0x6e>
 8019070:	4598      	cmp	r8, r3
 8019072:	d1ec      	bne.n	801904e <rmw_validate_node_name+0x22>
 8019074:	7822      	ldrb	r2, [r4, #0]
 8019076:	4b16      	ldr	r3, [pc, #88]	@ (80190d0 <rmw_validate_node_name+0xa4>)
 8019078:	5cd3      	ldrb	r3, [r2, r3]
 801907a:	f013 0304 	ands.w	r3, r3, #4
 801907e:	d113      	bne.n	80190a8 <rmw_validate_node_name+0x7c>
 8019080:	28ff      	cmp	r0, #255	@ 0xff
 8019082:	d81c      	bhi.n	80190be <rmw_validate_node_name+0x92>
 8019084:	4618      	mov	r0, r3
 8019086:	602b      	str	r3, [r5, #0]
 8019088:	e00c      	b.n	80190a4 <rmw_validate_node_name+0x78>
 801908a:	2301      	movs	r3, #1
 801908c:	602b      	str	r3, [r5, #0]
 801908e:	b17e      	cbz	r6, 80190b0 <rmw_validate_node_name+0x84>
 8019090:	2300      	movs	r3, #0
 8019092:	4618      	mov	r0, r3
 8019094:	6033      	str	r3, [r6, #0]
 8019096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801909a:	2302      	movs	r3, #2
 801909c:	602b      	str	r3, [r5, #0]
 801909e:	b13e      	cbz	r6, 80190b0 <rmw_validate_node_name+0x84>
 80190a0:	2000      	movs	r0, #0
 80190a2:	6037      	str	r7, [r6, #0]
 80190a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190a8:	2303      	movs	r3, #3
 80190aa:	602b      	str	r3, [r5, #0]
 80190ac:	2e00      	cmp	r6, #0
 80190ae:	d1ef      	bne.n	8019090 <rmw_validate_node_name+0x64>
 80190b0:	2000      	movs	r0, #0
 80190b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190b6:	200b      	movs	r0, #11
 80190b8:	4770      	bx	lr
 80190ba:	200b      	movs	r0, #11
 80190bc:	e7f2      	b.n	80190a4 <rmw_validate_node_name+0x78>
 80190be:	2204      	movs	r2, #4
 80190c0:	602a      	str	r2, [r5, #0]
 80190c2:	2e00      	cmp	r6, #0
 80190c4:	d0f4      	beq.n	80190b0 <rmw_validate_node_name+0x84>
 80190c6:	22fe      	movs	r2, #254	@ 0xfe
 80190c8:	4618      	mov	r0, r3
 80190ca:	6032      	str	r2, [r6, #0]
 80190cc:	e7ea      	b.n	80190a4 <rmw_validate_node_name+0x78>
 80190ce:	bf00      	nop
 80190d0:	0801dac6 	.word	0x0801dac6

080190d4 <rmw_node_name_validation_result_string>:
 80190d4:	2804      	cmp	r0, #4
 80190d6:	d803      	bhi.n	80190e0 <rmw_node_name_validation_result_string+0xc>
 80190d8:	4b02      	ldr	r3, [pc, #8]	@ (80190e4 <rmw_node_name_validation_result_string+0x10>)
 80190da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80190de:	4770      	bx	lr
 80190e0:	4801      	ldr	r0, [pc, #4]	@ (80190e8 <rmw_node_name_validation_result_string+0x14>)
 80190e2:	4770      	bx	lr
 80190e4:	0801d898 	.word	0x0801d898
 80190e8:	0801d7ac 	.word	0x0801d7ac

080190ec <on_status>:
 80190ec:	b082      	sub	sp, #8
 80190ee:	b002      	add	sp, #8
 80190f0:	4770      	bx	lr
 80190f2:	bf00      	nop

080190f4 <on_topic>:
 80190f4:	4a23      	ldr	r2, [pc, #140]	@ (8019184 <on_topic+0x90>)
 80190f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190fa:	6812      	ldr	r2, [r2, #0]
 80190fc:	b094      	sub	sp, #80	@ 0x50
 80190fe:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019100:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8019104:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019106:	9312      	str	r3, [sp, #72]	@ 0x48
 8019108:	b3c2      	cbz	r2, 801917c <on_topic+0x88>
 801910a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801910e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019112:	e001      	b.n	8019118 <on_topic+0x24>
 8019114:	6852      	ldr	r2, [r2, #4]
 8019116:	b38a      	cbz	r2, 801917c <on_topic+0x88>
 8019118:	6894      	ldr	r4, [r2, #8]
 801911a:	8aa3      	ldrh	r3, [r4, #20]
 801911c:	428b      	cmp	r3, r1
 801911e:	d1f9      	bne.n	8019114 <on_topic+0x20>
 8019120:	7da3      	ldrb	r3, [r4, #22]
 8019122:	4283      	cmp	r3, r0
 8019124:	d1f6      	bne.n	8019114 <on_topic+0x20>
 8019126:	2248      	movs	r2, #72	@ 0x48
 8019128:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801912c:	4668      	mov	r0, sp
 801912e:	f002 ffac 	bl	801c08a <memcpy>
 8019132:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019136:	4620      	mov	r0, r4
 8019138:	cb0c      	ldmia	r3, {r2, r3}
 801913a:	f7f7 fabf 	bl	80106bc <rmw_uxrce_get_static_input_buffer_for_entity>
 801913e:	4607      	mov	r7, r0
 8019140:	b1e0      	cbz	r0, 801917c <on_topic+0x88>
 8019142:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019146:	462a      	mov	r2, r5
 8019148:	4630      	mov	r0, r6
 801914a:	f108 0110 	add.w	r1, r8, #16
 801914e:	f000 ff53 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8019152:	b930      	cbnz	r0, 8019162 <on_topic+0x6e>
 8019154:	4639      	mov	r1, r7
 8019156:	480c      	ldr	r0, [pc, #48]	@ (8019188 <on_topic+0x94>)
 8019158:	b014      	add	sp, #80	@ 0x50
 801915a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801915e:	f000 b8bd 	b.w	80192dc <put_memory>
 8019162:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019166:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801916a:	f7f7 f8a5 	bl	80102b8 <rmw_uros_epoch_nanos>
 801916e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019172:	2305      	movs	r3, #5
 8019174:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019178:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801917c:	b014      	add	sp, #80	@ 0x50
 801917e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019182:	bf00      	nop
 8019184:	24012fbc 	.word	0x24012fbc
 8019188:	24012fac 	.word	0x24012fac

0801918c <on_request>:
 801918c:	4824      	ldr	r0, [pc, #144]	@ (8019220 <on_request+0x94>)
 801918e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019192:	6800      	ldr	r0, [r0, #0]
 8019194:	b094      	sub	sp, #80	@ 0x50
 8019196:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019198:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801919c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801919e:	2800      	cmp	r0, #0
 80191a0:	d03b      	beq.n	801921a <on_request+0x8e>
 80191a2:	461d      	mov	r5, r3
 80191a4:	e001      	b.n	80191aa <on_request+0x1e>
 80191a6:	6840      	ldr	r0, [r0, #4]
 80191a8:	b3b8      	cbz	r0, 801921a <on_request+0x8e>
 80191aa:	6884      	ldr	r4, [r0, #8]
 80191ac:	8b21      	ldrh	r1, [r4, #24]
 80191ae:	4291      	cmp	r1, r2
 80191b0:	d1f9      	bne.n	80191a6 <on_request+0x1a>
 80191b2:	2248      	movs	r2, #72	@ 0x48
 80191b4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80191b8:	4668      	mov	r0, sp
 80191ba:	f002 ff66 	bl	801c08a <memcpy>
 80191be:	f104 0320 	add.w	r3, r4, #32
 80191c2:	4620      	mov	r0, r4
 80191c4:	cb0c      	ldmia	r3, {r2, r3}
 80191c6:	f7f7 fa79 	bl	80106bc <rmw_uxrce_get_static_input_buffer_for_entity>
 80191ca:	4680      	mov	r8, r0
 80191cc:	b328      	cbz	r0, 801921a <on_request+0x8e>
 80191ce:	4630      	mov	r0, r6
 80191d0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80191d4:	463a      	mov	r2, r7
 80191d6:	f106 0110 	add.w	r1, r6, #16
 80191da:	f000 ff0d 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 80191de:	b930      	cbnz	r0, 80191ee <on_request+0x62>
 80191e0:	4641      	mov	r1, r8
 80191e2:	4810      	ldr	r0, [pc, #64]	@ (8019224 <on_request+0x98>)
 80191e4:	b014      	add	sp, #80	@ 0x50
 80191e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191ea:	f000 b877 	b.w	80192dc <put_memory>
 80191ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191f0:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 80191f4:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80191f8:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80191fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019200:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019204:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019208:	f7f7 f856 	bl	80102b8 <rmw_uros_epoch_nanos>
 801920c:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8019210:	2303      	movs	r3, #3
 8019212:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019216:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801921a:	b014      	add	sp, #80	@ 0x50
 801921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019220:	24012f8c 	.word	0x24012f8c
 8019224:	24012fac 	.word	0x24012fac

08019228 <on_reply>:
 8019228:	4822      	ldr	r0, [pc, #136]	@ (80192b4 <on_reply+0x8c>)
 801922a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801922e:	6800      	ldr	r0, [r0, #0]
 8019230:	b094      	sub	sp, #80	@ 0x50
 8019232:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019234:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8019238:	9113      	str	r1, [sp, #76]	@ 0x4c
 801923a:	b3b8      	cbz	r0, 80192ac <on_reply+0x84>
 801923c:	461d      	mov	r5, r3
 801923e:	e001      	b.n	8019244 <on_reply+0x1c>
 8019240:	6840      	ldr	r0, [r0, #4]
 8019242:	b398      	cbz	r0, 80192ac <on_reply+0x84>
 8019244:	6884      	ldr	r4, [r0, #8]
 8019246:	8b21      	ldrh	r1, [r4, #24]
 8019248:	4291      	cmp	r1, r2
 801924a:	d1f9      	bne.n	8019240 <on_reply+0x18>
 801924c:	2248      	movs	r2, #72	@ 0x48
 801924e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019252:	4668      	mov	r0, sp
 8019254:	f002 ff19 	bl	801c08a <memcpy>
 8019258:	f104 0320 	add.w	r3, r4, #32
 801925c:	4620      	mov	r0, r4
 801925e:	cb0c      	ldmia	r3, {r2, r3}
 8019260:	f7f7 fa2c 	bl	80106bc <rmw_uxrce_get_static_input_buffer_for_entity>
 8019264:	4680      	mov	r8, r0
 8019266:	b308      	cbz	r0, 80192ac <on_reply+0x84>
 8019268:	4630      	mov	r0, r6
 801926a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801926e:	463a      	mov	r2, r7
 8019270:	f106 0110 	add.w	r1, r6, #16
 8019274:	f000 fec0 	bl	8019ff8 <ucdr_deserialize_array_uint8_t>
 8019278:	b930      	cbnz	r0, 8019288 <on_reply+0x60>
 801927a:	4641      	mov	r1, r8
 801927c:	480e      	ldr	r0, [pc, #56]	@ (80192b8 <on_reply+0x90>)
 801927e:	b014      	add	sp, #80	@ 0x50
 8019280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019284:	f000 b82a 	b.w	80192dc <put_memory>
 8019288:	2200      	movs	r2, #0
 801928a:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801928e:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8019292:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 8019296:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801929a:	f7f7 f80d 	bl	80102b8 <rmw_uros_epoch_nanos>
 801929e:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80192a2:	2304      	movs	r3, #4
 80192a4:	e942 0102 	strd	r0, r1, [r2, #-8]
 80192a8:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80192ac:	b014      	add	sp, #80	@ 0x50
 80192ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b2:	bf00      	nop
 80192b4:	2400e69c 	.word	0x2400e69c
 80192b8:	24012fac 	.word	0x24012fac

080192bc <get_memory>:
 80192bc:	4603      	mov	r3, r0
 80192be:	6840      	ldr	r0, [r0, #4]
 80192c0:	b158      	cbz	r0, 80192da <get_memory+0x1e>
 80192c2:	6842      	ldr	r2, [r0, #4]
 80192c4:	605a      	str	r2, [r3, #4]
 80192c6:	b10a      	cbz	r2, 80192cc <get_memory+0x10>
 80192c8:	2100      	movs	r1, #0
 80192ca:	6011      	str	r1, [r2, #0]
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	6042      	str	r2, [r0, #4]
 80192d0:	b102      	cbz	r2, 80192d4 <get_memory+0x18>
 80192d2:	6010      	str	r0, [r2, #0]
 80192d4:	2200      	movs	r2, #0
 80192d6:	6002      	str	r2, [r0, #0]
 80192d8:	6018      	str	r0, [r3, #0]
 80192da:	4770      	bx	lr

080192dc <put_memory>:
 80192dc:	680b      	ldr	r3, [r1, #0]
 80192de:	b10b      	cbz	r3, 80192e4 <put_memory+0x8>
 80192e0:	684a      	ldr	r2, [r1, #4]
 80192e2:	605a      	str	r2, [r3, #4]
 80192e4:	684a      	ldr	r2, [r1, #4]
 80192e6:	b102      	cbz	r2, 80192ea <put_memory+0xe>
 80192e8:	6013      	str	r3, [r2, #0]
 80192ea:	6803      	ldr	r3, [r0, #0]
 80192ec:	428b      	cmp	r3, r1
 80192ee:	6843      	ldr	r3, [r0, #4]
 80192f0:	bf08      	it	eq
 80192f2:	6002      	streq	r2, [r0, #0]
 80192f4:	604b      	str	r3, [r1, #4]
 80192f6:	b103      	cbz	r3, 80192fa <put_memory+0x1e>
 80192f8:	6019      	str	r1, [r3, #0]
 80192fa:	2300      	movs	r3, #0
 80192fc:	600b      	str	r3, [r1, #0]
 80192fe:	6041      	str	r1, [r0, #4]
 8019300:	4770      	bx	lr
 8019302:	bf00      	nop

08019304 <rmw_destroy_client>:
 8019304:	b570      	push	{r4, r5, r6, lr}
 8019306:	b128      	cbz	r0, 8019314 <rmw_destroy_client+0x10>
 8019308:	4604      	mov	r4, r0
 801930a:	6800      	ldr	r0, [r0, #0]
 801930c:	460d      	mov	r5, r1
 801930e:	f7f7 fb4f 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 8019312:	b910      	cbnz	r0, 801931a <rmw_destroy_client+0x16>
 8019314:	2401      	movs	r4, #1
 8019316:	4620      	mov	r0, r4
 8019318:	bd70      	pop	{r4, r5, r6, pc}
 801931a:	6863      	ldr	r3, [r4, #4]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d0f9      	beq.n	8019314 <rmw_destroy_client+0x10>
 8019320:	2d00      	cmp	r5, #0
 8019322:	d0f7      	beq.n	8019314 <rmw_destroy_client+0x10>
 8019324:	6828      	ldr	r0, [r5, #0]
 8019326:	f7f7 fb43 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 801932a:	2800      	cmp	r0, #0
 801932c:	d0f2      	beq.n	8019314 <rmw_destroy_client+0x10>
 801932e:	686e      	ldr	r6, [r5, #4]
 8019330:	2e00      	cmp	r6, #0
 8019332:	d0ef      	beq.n	8019314 <rmw_destroy_client+0x10>
 8019334:	6864      	ldr	r4, [r4, #4]
 8019336:	6932      	ldr	r2, [r6, #16]
 8019338:	6920      	ldr	r0, [r4, #16]
 801933a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801933e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019342:	6819      	ldr	r1, [r3, #0]
 8019344:	f7f9 f9f0 	bl	8012728 <uxr_buffer_cancel_data>
 8019348:	4602      	mov	r2, r0
 801934a:	6920      	ldr	r0, [r4, #16]
 801934c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019350:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019354:	f7f7 fab2 	bl	80108bc <run_xrce_session>
 8019358:	6920      	ldr	r0, [r4, #16]
 801935a:	6932      	ldr	r2, [r6, #16]
 801935c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019360:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019364:	6819      	ldr	r1, [r3, #0]
 8019366:	f7f8 ff97 	bl	8012298 <uxr_buffer_delete_entity>
 801936a:	4602      	mov	r2, r0
 801936c:	6920      	ldr	r0, [r4, #16]
 801936e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019372:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019376:	f7f7 faa1 	bl	80108bc <run_xrce_session>
 801937a:	4603      	mov	r3, r0
 801937c:	4628      	mov	r0, r5
 801937e:	2b00      	cmp	r3, #0
 8019380:	bf14      	ite	ne
 8019382:	2400      	movne	r4, #0
 8019384:	2402      	moveq	r4, #2
 8019386:	f7f7 f977 	bl	8010678 <rmw_uxrce_fini_client_memory>
 801938a:	e7c4      	b.n	8019316 <rmw_destroy_client+0x12>

0801938c <rmw_get_implementation_identifier>:
 801938c:	4b01      	ldr	r3, [pc, #4]	@ (8019394 <rmw_get_implementation_identifier+0x8>)
 801938e:	6818      	ldr	r0, [r3, #0]
 8019390:	4770      	bx	lr
 8019392:	bf00      	nop
 8019394:	0801d8c4 	.word	0x0801d8c4

08019398 <create_topic>:
 8019398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801939c:	4605      	mov	r5, r0
 801939e:	b084      	sub	sp, #16
 80193a0:	4822      	ldr	r0, [pc, #136]	@ (801942c <create_topic+0x94>)
 80193a2:	460f      	mov	r7, r1
 80193a4:	4616      	mov	r6, r2
 80193a6:	f7ff ff89 	bl	80192bc <get_memory>
 80193aa:	4604      	mov	r4, r0
 80193ac:	2800      	cmp	r0, #0
 80193ae:	d039      	beq.n	8019424 <create_topic+0x8c>
 80193b0:	692b      	ldr	r3, [r5, #16]
 80193b2:	2102      	movs	r1, #2
 80193b4:	6884      	ldr	r4, [r0, #8]
 80193b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80193ba:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8019434 <create_topic+0x9c>
 80193be:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80193c2:	1c42      	adds	r2, r0, #1
 80193c4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80193c8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80193cc:	f7f9 f97c 	bl	80126c8 <uxr_object_id>
 80193d0:	223c      	movs	r2, #60	@ 0x3c
 80193d2:	6120      	str	r0, [r4, #16]
 80193d4:	4641      	mov	r1, r8
 80193d6:	4638      	mov	r0, r7
 80193d8:	f7f7 fad2 	bl	8010980 <generate_topic_name>
 80193dc:	b1f0      	cbz	r0, 801941c <create_topic+0x84>
 80193de:	4f14      	ldr	r7, [pc, #80]	@ (8019430 <create_topic+0x98>)
 80193e0:	4630      	mov	r0, r6
 80193e2:	2264      	movs	r2, #100	@ 0x64
 80193e4:	4639      	mov	r1, r7
 80193e6:	f7f7 fa9d 	bl	8010924 <generate_type_name>
 80193ea:	b1b8      	cbz	r0, 801941c <create_topic+0x84>
 80193ec:	6928      	ldr	r0, [r5, #16]
 80193ee:	2106      	movs	r1, #6
 80193f0:	696b      	ldr	r3, [r5, #20]
 80193f2:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80193f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80193fa:	f8cd 8000 	str.w	r8, [sp]
 80193fe:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019402:	6811      	ldr	r1, [r2, #0]
 8019404:	6922      	ldr	r2, [r4, #16]
 8019406:	f7f8 ffc5 	bl	8012394 <uxr_buffer_create_topic_bin>
 801940a:	4602      	mov	r2, r0
 801940c:	6928      	ldr	r0, [r5, #16]
 801940e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8019412:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019416:	f7f7 fa51 	bl	80108bc <run_xrce_session>
 801941a:	b918      	cbnz	r0, 8019424 <create_topic+0x8c>
 801941c:	4620      	mov	r0, r4
 801941e:	2400      	movs	r4, #0
 8019420:	f7f7 f940 	bl	80106a4 <rmw_uxrce_fini_topic_memory>
 8019424:	4620      	mov	r0, r4
 8019426:	b004      	add	sp, #16
 8019428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801942c:	24012fcc 	.word	0x24012fcc
 8019430:	2401304c 	.word	0x2401304c
 8019434:	24013010 	.word	0x24013010

08019438 <destroy_topic>:
 8019438:	b538      	push	{r3, r4, r5, lr}
 801943a:	6985      	ldr	r5, [r0, #24]
 801943c:	b1dd      	cbz	r5, 8019476 <destroy_topic+0x3e>
 801943e:	4604      	mov	r4, r0
 8019440:	6928      	ldr	r0, [r5, #16]
 8019442:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019446:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801944a:	6922      	ldr	r2, [r4, #16]
 801944c:	6819      	ldr	r1, [r3, #0]
 801944e:	f7f8 ff23 	bl	8012298 <uxr_buffer_delete_entity>
 8019452:	4602      	mov	r2, r0
 8019454:	6928      	ldr	r0, [r5, #16]
 8019456:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801945a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801945e:	f7f7 fa2d 	bl	80108bc <run_xrce_session>
 8019462:	4603      	mov	r3, r0
 8019464:	4620      	mov	r0, r4
 8019466:	2b00      	cmp	r3, #0
 8019468:	bf14      	ite	ne
 801946a:	2400      	movne	r4, #0
 801946c:	2402      	moveq	r4, #2
 801946e:	f7f7 f919 	bl	80106a4 <rmw_uxrce_fini_topic_memory>
 8019472:	4620      	mov	r0, r4
 8019474:	bd38      	pop	{r3, r4, r5, pc}
 8019476:	2401      	movs	r4, #1
 8019478:	4620      	mov	r0, r4
 801947a:	bd38      	pop	{r3, r4, r5, pc}

0801947c <rmw_send_request>:
 801947c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019480:	4604      	mov	r4, r0
 8019482:	6800      	ldr	r0, [r0, #0]
 8019484:	b08b      	sub	sp, #44	@ 0x2c
 8019486:	460e      	mov	r6, r1
 8019488:	4615      	mov	r5, r2
 801948a:	b128      	cbz	r0, 8019498 <rmw_send_request+0x1c>
 801948c:	4b21      	ldr	r3, [pc, #132]	@ (8019514 <rmw_send_request+0x98>)
 801948e:	6819      	ldr	r1, [r3, #0]
 8019490:	f7e6 ff26 	bl	80002e0 <strcmp>
 8019494:	2800      	cmp	r0, #0
 8019496:	d139      	bne.n	801950c <rmw_send_request+0x90>
 8019498:	6864      	ldr	r4, [r4, #4]
 801949a:	2700      	movs	r7, #0
 801949c:	6963      	ldr	r3, [r4, #20]
 801949e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80194a2:	689b      	ldr	r3, [r3, #8]
 80194a4:	4798      	blx	r3
 80194a6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80194aa:	4630      	mov	r0, r6
 80194ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80194b0:	4798      	blx	r3
 80194b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80194b6:	9000      	str	r0, [sp, #0]
 80194b8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80194bc:	6922      	ldr	r2, [r4, #16]
 80194be:	ab02      	add	r3, sp, #8
 80194c0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80194c2:	f7fb f9d1 	bl	8014868 <uxr_prepare_output_stream>
 80194c6:	e9c5 0700 	strd	r0, r7, [r5]
 80194ca:	b198      	cbz	r0, 80194f4 <rmw_send_request+0x78>
 80194cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80194d0:	a902      	add	r1, sp, #8
 80194d2:	4630      	mov	r0, r6
 80194d4:	4798      	blx	r3
 80194d6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80194da:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80194de:	2b01      	cmp	r3, #1
 80194e0:	d00c      	beq.n	80194fc <rmw_send_request+0x80>
 80194e2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80194e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80194e8:	f7f9 feee 	bl	80132c8 <uxr_run_session_until_confirm_delivery>
 80194ec:	4638      	mov	r0, r7
 80194ee:	b00b      	add	sp, #44	@ 0x2c
 80194f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194f4:	2001      	movs	r0, #1
 80194f6:	b00b      	add	sp, #44	@ 0x2c
 80194f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019500:	f7f9 fb28 	bl	8012b54 <uxr_flash_output_streams>
 8019504:	4638      	mov	r0, r7
 8019506:	b00b      	add	sp, #44	@ 0x2c
 8019508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801950c:	200c      	movs	r0, #12
 801950e:	b00b      	add	sp, #44	@ 0x2c
 8019510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019514:	0801d8c4 	.word	0x0801d8c4

08019518 <rmw_take_request>:
 8019518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801951c:	4605      	mov	r5, r0
 801951e:	6800      	ldr	r0, [r0, #0]
 8019520:	b089      	sub	sp, #36	@ 0x24
 8019522:	460c      	mov	r4, r1
 8019524:	4690      	mov	r8, r2
 8019526:	461e      	mov	r6, r3
 8019528:	b128      	cbz	r0, 8019536 <rmw_take_request+0x1e>
 801952a:	4b28      	ldr	r3, [pc, #160]	@ (80195cc <rmw_take_request+0xb4>)
 801952c:	6819      	ldr	r1, [r3, #0]
 801952e:	f7e6 fed7 	bl	80002e0 <strcmp>
 8019532:	2800      	cmp	r0, #0
 8019534:	d146      	bne.n	80195c4 <rmw_take_request+0xac>
 8019536:	b10e      	cbz	r6, 801953c <rmw_take_request+0x24>
 8019538:	2300      	movs	r3, #0
 801953a:	7033      	strb	r3, [r6, #0]
 801953c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8019540:	f7f7 f93e 	bl	80107c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019544:	4648      	mov	r0, r9
 8019546:	f7f7 f913 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 801954a:	4607      	mov	r7, r0
 801954c:	b3b0      	cbz	r0, 80195bc <rmw_take_request+0xa4>
 801954e:	6885      	ldr	r5, [r0, #8]
 8019550:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8019554:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8019558:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801955c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8019560:	7423      	strb	r3, [r4, #16]
 8019562:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8019566:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801956a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801956e:	74e3      	strb	r3, [r4, #19]
 8019570:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8019574:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8019578:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801957c:	6161      	str	r1, [r4, #20]
 801957e:	61a2      	str	r2, [r4, #24]
 8019580:	61e3      	str	r3, [r4, #28]
 8019582:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019586:	689b      	ldr	r3, [r3, #8]
 8019588:	4798      	blx	r3
 801958a:	6844      	ldr	r4, [r0, #4]
 801958c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019590:	f105 0110 	add.w	r1, r5, #16
 8019594:	4668      	mov	r0, sp
 8019596:	f7f8 fd87 	bl	80120a8 <ucdr_init_buffer>
 801959a:	4641      	mov	r1, r8
 801959c:	68e3      	ldr	r3, [r4, #12]
 801959e:	4668      	mov	r0, sp
 80195a0:	4798      	blx	r3
 80195a2:	4639      	mov	r1, r7
 80195a4:	4604      	mov	r4, r0
 80195a6:	480a      	ldr	r0, [pc, #40]	@ (80195d0 <rmw_take_request+0xb8>)
 80195a8:	f7ff fe98 	bl	80192dc <put_memory>
 80195ac:	b106      	cbz	r6, 80195b0 <rmw_take_request+0x98>
 80195ae:	7034      	strb	r4, [r6, #0]
 80195b0:	f084 0001 	eor.w	r0, r4, #1
 80195b4:	b2c0      	uxtb	r0, r0
 80195b6:	b009      	add	sp, #36	@ 0x24
 80195b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195bc:	2001      	movs	r0, #1
 80195be:	b009      	add	sp, #36	@ 0x24
 80195c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195c4:	200c      	movs	r0, #12
 80195c6:	b009      	add	sp, #36	@ 0x24
 80195c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195cc:	0801d8c4 	.word	0x0801d8c4
 80195d0:	24012fac 	.word	0x24012fac

080195d4 <rmw_send_response>:
 80195d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195d6:	4605      	mov	r5, r0
 80195d8:	6800      	ldr	r0, [r0, #0]
 80195da:	b091      	sub	sp, #68	@ 0x44
 80195dc:	460c      	mov	r4, r1
 80195de:	4616      	mov	r6, r2
 80195e0:	b128      	cbz	r0, 80195ee <rmw_send_response+0x1a>
 80195e2:	4b29      	ldr	r3, [pc, #164]	@ (8019688 <rmw_send_response+0xb4>)
 80195e4:	6819      	ldr	r1, [r3, #0]
 80195e6:	f7e6 fe7b 	bl	80002e0 <strcmp>
 80195ea:	2800      	cmp	r0, #0
 80195ec:	d141      	bne.n	8019672 <rmw_send_response+0x9e>
 80195ee:	686d      	ldr	r5, [r5, #4]
 80195f0:	68a1      	ldr	r1, [r4, #8]
 80195f2:	6860      	ldr	r0, [r4, #4]
 80195f4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80195f6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80195fa:	9307      	str	r3, [sp, #28]
 80195fc:	4623      	mov	r3, r4
 80195fe:	9206      	str	r2, [sp, #24]
 8019600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019604:	789b      	ldrb	r3, [r3, #2]
 8019606:	f88d 2017 	strb.w	r2, [sp, #23]
 801960a:	f88d 3016 	strb.w	r3, [sp, #22]
 801960e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019612:	68e2      	ldr	r2, [r4, #12]
 8019614:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019618:	ab02      	add	r3, sp, #8
 801961a:	696c      	ldr	r4, [r5, #20]
 801961c:	c307      	stmia	r3!, {r0, r1, r2}
 801961e:	68e3      	ldr	r3, [r4, #12]
 8019620:	4798      	blx	r3
 8019622:	6844      	ldr	r4, [r0, #4]
 8019624:	4630      	mov	r0, r6
 8019626:	6923      	ldr	r3, [r4, #16]
 8019628:	4798      	blx	r3
 801962a:	f100 0318 	add.w	r3, r0, #24
 801962e:	6938      	ldr	r0, [r7, #16]
 8019630:	9300      	str	r3, [sp, #0]
 8019632:	ab08      	add	r3, sp, #32
 8019634:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019638:	692a      	ldr	r2, [r5, #16]
 801963a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801963c:	f7fb f914 	bl	8014868 <uxr_prepare_output_stream>
 8019640:	b910      	cbnz	r0, 8019648 <rmw_send_response+0x74>
 8019642:	2001      	movs	r0, #1
 8019644:	b011      	add	sp, #68	@ 0x44
 8019646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019648:	a902      	add	r1, sp, #8
 801964a:	a808      	add	r0, sp, #32
 801964c:	f7fc f966 	bl	801591c <uxr_serialize_SampleIdentity>
 8019650:	68a3      	ldr	r3, [r4, #8]
 8019652:	a908      	add	r1, sp, #32
 8019654:	4630      	mov	r0, r6
 8019656:	4798      	blx	r3
 8019658:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801965c:	6938      	ldr	r0, [r7, #16]
 801965e:	2b01      	cmp	r3, #1
 8019660:	d00a      	beq.n	8019678 <rmw_send_response+0xa4>
 8019662:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8019664:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019668:	f7f9 fe2e 	bl	80132c8 <uxr_run_session_until_confirm_delivery>
 801966c:	2000      	movs	r0, #0
 801966e:	b011      	add	sp, #68	@ 0x44
 8019670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019672:	200c      	movs	r0, #12
 8019674:	b011      	add	sp, #68	@ 0x44
 8019676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019678:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801967c:	f7f9 fa6a 	bl	8012b54 <uxr_flash_output_streams>
 8019680:	2000      	movs	r0, #0
 8019682:	b011      	add	sp, #68	@ 0x44
 8019684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019686:	bf00      	nop
 8019688:	0801d8c4 	.word	0x0801d8c4

0801968c <rmw_take_response>:
 801968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019690:	4604      	mov	r4, r0
 8019692:	6800      	ldr	r0, [r0, #0]
 8019694:	b088      	sub	sp, #32
 8019696:	460f      	mov	r7, r1
 8019698:	4690      	mov	r8, r2
 801969a:	461d      	mov	r5, r3
 801969c:	b120      	cbz	r0, 80196a8 <rmw_take_response+0x1c>
 801969e:	4b1d      	ldr	r3, [pc, #116]	@ (8019714 <rmw_take_response+0x88>)
 80196a0:	6819      	ldr	r1, [r3, #0]
 80196a2:	f7e6 fe1d 	bl	80002e0 <strcmp>
 80196a6:	bb68      	cbnz	r0, 8019704 <rmw_take_response+0x78>
 80196a8:	b10d      	cbz	r5, 80196ae <rmw_take_response+0x22>
 80196aa:	2300      	movs	r3, #0
 80196ac:	702b      	strb	r3, [r5, #0]
 80196ae:	6864      	ldr	r4, [r4, #4]
 80196b0:	f7f7 f886 	bl	80107c0 <rmw_uxrce_clean_expired_static_input_buffer>
 80196b4:	4620      	mov	r0, r4
 80196b6:	f7f7 f85b 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 80196ba:	4606      	mov	r6, r0
 80196bc:	b330      	cbz	r0, 801970c <rmw_take_response+0x80>
 80196be:	6963      	ldr	r3, [r4, #20]
 80196c0:	6884      	ldr	r4, [r0, #8]
 80196c2:	68db      	ldr	r3, [r3, #12]
 80196c4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80196c8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80196cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80196d0:	4798      	blx	r3
 80196d2:	6847      	ldr	r7, [r0, #4]
 80196d4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80196d8:	f104 0110 	add.w	r1, r4, #16
 80196dc:	4668      	mov	r0, sp
 80196de:	f7f8 fce3 	bl	80120a8 <ucdr_init_buffer>
 80196e2:	4641      	mov	r1, r8
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	4668      	mov	r0, sp
 80196e8:	4798      	blx	r3
 80196ea:	4631      	mov	r1, r6
 80196ec:	4604      	mov	r4, r0
 80196ee:	480a      	ldr	r0, [pc, #40]	@ (8019718 <rmw_take_response+0x8c>)
 80196f0:	f7ff fdf4 	bl	80192dc <put_memory>
 80196f4:	b105      	cbz	r5, 80196f8 <rmw_take_response+0x6c>
 80196f6:	702c      	strb	r4, [r5, #0]
 80196f8:	f084 0001 	eor.w	r0, r4, #1
 80196fc:	b2c0      	uxtb	r0, r0
 80196fe:	b008      	add	sp, #32
 8019700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019704:	200c      	movs	r0, #12
 8019706:	b008      	add	sp, #32
 8019708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801970c:	2001      	movs	r0, #1
 801970e:	b008      	add	sp, #32
 8019710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019714:	0801d8c4 	.word	0x0801d8c4
 8019718:	24012fac 	.word	0x24012fac

0801971c <rmw_take_with_info>:
 801971c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801971e:	4604      	mov	r4, r0
 8019720:	6800      	ldr	r0, [r0, #0]
 8019722:	b089      	sub	sp, #36	@ 0x24
 8019724:	460f      	mov	r7, r1
 8019726:	4615      	mov	r5, r2
 8019728:	b128      	cbz	r0, 8019736 <rmw_take_with_info+0x1a>
 801972a:	4b24      	ldr	r3, [pc, #144]	@ (80197bc <rmw_take_with_info+0xa0>)
 801972c:	6819      	ldr	r1, [r3, #0]
 801972e:	f7e6 fdd7 	bl	80002e0 <strcmp>
 8019732:	2800      	cmp	r0, #0
 8019734:	d13e      	bne.n	80197b4 <rmw_take_with_info+0x98>
 8019736:	b305      	cbz	r5, 801977a <rmw_take_with_info+0x5e>
 8019738:	2300      	movs	r3, #0
 801973a:	6864      	ldr	r4, [r4, #4]
 801973c:	702b      	strb	r3, [r5, #0]
 801973e:	f7f7 f83f 	bl	80107c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019742:	4620      	mov	r0, r4
 8019744:	f7f7 f814 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019748:	4606      	mov	r6, r0
 801974a:	b1f0      	cbz	r0, 801978a <rmw_take_with_info+0x6e>
 801974c:	6881      	ldr	r1, [r0, #8]
 801974e:	4668      	mov	r0, sp
 8019750:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019754:	3110      	adds	r1, #16
 8019756:	f7f8 fca7 	bl	80120a8 <ucdr_init_buffer>
 801975a:	69a3      	ldr	r3, [r4, #24]
 801975c:	4639      	mov	r1, r7
 801975e:	4668      	mov	r0, sp
 8019760:	68db      	ldr	r3, [r3, #12]
 8019762:	4798      	blx	r3
 8019764:	4604      	mov	r4, r0
 8019766:	4631      	mov	r1, r6
 8019768:	4815      	ldr	r0, [pc, #84]	@ (80197c0 <rmw_take_with_info+0xa4>)
 801976a:	f7ff fdb7 	bl	80192dc <put_memory>
 801976e:	702c      	strb	r4, [r5, #0]
 8019770:	f084 0001 	eor.w	r0, r4, #1
 8019774:	b2c0      	uxtb	r0, r0
 8019776:	b009      	add	sp, #36	@ 0x24
 8019778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801977a:	6864      	ldr	r4, [r4, #4]
 801977c:	f7f7 f820 	bl	80107c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019780:	4620      	mov	r0, r4
 8019782:	f7f6 fff5 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019786:	4605      	mov	r5, r0
 8019788:	b910      	cbnz	r0, 8019790 <rmw_take_with_info+0x74>
 801978a:	2001      	movs	r0, #1
 801978c:	b009      	add	sp, #36	@ 0x24
 801978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019790:	68a9      	ldr	r1, [r5, #8]
 8019792:	4668      	mov	r0, sp
 8019794:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019798:	3110      	adds	r1, #16
 801979a:	f7f8 fc85 	bl	80120a8 <ucdr_init_buffer>
 801979e:	69a3      	ldr	r3, [r4, #24]
 80197a0:	4639      	mov	r1, r7
 80197a2:	4668      	mov	r0, sp
 80197a4:	68db      	ldr	r3, [r3, #12]
 80197a6:	4798      	blx	r3
 80197a8:	4629      	mov	r1, r5
 80197aa:	4604      	mov	r4, r0
 80197ac:	4804      	ldr	r0, [pc, #16]	@ (80197c0 <rmw_take_with_info+0xa4>)
 80197ae:	f7ff fd95 	bl	80192dc <put_memory>
 80197b2:	e7dd      	b.n	8019770 <rmw_take_with_info+0x54>
 80197b4:	200c      	movs	r0, #12
 80197b6:	b009      	add	sp, #36	@ 0x24
 80197b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197ba:	bf00      	nop
 80197bc:	0801d8c4 	.word	0x0801d8c4
 80197c0:	24012fac 	.word	0x24012fac

080197c4 <rmw_wait>:
 80197c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197c8:	4698      	mov	r8, r3
 80197ca:	ea40 0301 	orr.w	r3, r0, r1
 80197ce:	b089      	sub	sp, #36	@ 0x24
 80197d0:	ea48 0303 	orr.w	r3, r8, r3
 80197d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80197d6:	4313      	orrs	r3, r2
 80197d8:	f000 8106 	beq.w	80199e8 <rmw_wait+0x224>
 80197dc:	4605      	mov	r5, r0
 80197de:	460e      	mov	r6, r1
 80197e0:	4691      	mov	r9, r2
 80197e2:	b16c      	cbz	r4, 8019800 <rmw_wait+0x3c>
 80197e4:	4ba6      	ldr	r3, [pc, #664]	@ (8019a80 <rmw_wait+0x2bc>)
 80197e6:	af04      	add	r7, sp, #16
 80197e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80197ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80197ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80197f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80197f6:	f7ff fa9b 	bl	8018d30 <rmw_time_equal>
 80197fa:	2800      	cmp	r0, #0
 80197fc:	f000 810b 	beq.w	8019a16 <rmw_wait+0x252>
 8019800:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019804:	f7f6 ffdc 	bl	80107c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019808:	4b9e      	ldr	r3, [pc, #632]	@ (8019a84 <rmw_wait+0x2c0>)
 801980a:	681c      	ldr	r4, [r3, #0]
 801980c:	b14c      	cbz	r4, 8019822 <rmw_wait+0x5e>
 801980e:	4623      	mov	r3, r4
 8019810:	2100      	movs	r1, #0
 8019812:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801981a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801981e:	2b00      	cmp	r3, #0
 8019820:	d1f7      	bne.n	8019812 <rmw_wait+0x4e>
 8019822:	f1b9 0f00 	cmp.w	r9, #0
 8019826:	d011      	beq.n	801984c <rmw_wait+0x88>
 8019828:	f8d9 1000 	ldr.w	r1, [r9]
 801982c:	b171      	cbz	r1, 801984c <rmw_wait+0x88>
 801982e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019832:	2300      	movs	r3, #0
 8019834:	2001      	movs	r0, #1
 8019836:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801983a:	3301      	adds	r3, #1
 801983c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801983e:	4299      	cmp	r1, r3
 8019840:	6912      	ldr	r2, [r2, #16]
 8019842:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019846:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801984a:	d1f4      	bne.n	8019836 <rmw_wait+0x72>
 801984c:	f1b8 0f00 	cmp.w	r8, #0
 8019850:	d011      	beq.n	8019876 <rmw_wait+0xb2>
 8019852:	f8d8 1000 	ldr.w	r1, [r8]
 8019856:	b171      	cbz	r1, 8019876 <rmw_wait+0xb2>
 8019858:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801985c:	2300      	movs	r3, #0
 801985e:	2001      	movs	r0, #1
 8019860:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019864:	3301      	adds	r3, #1
 8019866:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019868:	4299      	cmp	r1, r3
 801986a:	6912      	ldr	r2, [r2, #16]
 801986c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019870:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019874:	d1f4      	bne.n	8019860 <rmw_wait+0x9c>
 8019876:	b185      	cbz	r5, 801989a <rmw_wait+0xd6>
 8019878:	6829      	ldr	r1, [r5, #0]
 801987a:	b171      	cbz	r1, 801989a <rmw_wait+0xd6>
 801987c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019880:	2300      	movs	r3, #0
 8019882:	2001      	movs	r0, #1
 8019884:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019888:	3301      	adds	r3, #1
 801988a:	6a12      	ldr	r2, [r2, #32]
 801988c:	4299      	cmp	r1, r3
 801988e:	6912      	ldr	r2, [r2, #16]
 8019890:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019894:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019898:	d1f4      	bne.n	8019884 <rmw_wait+0xc0>
 801989a:	b344      	cbz	r4, 80198ee <rmw_wait+0x12a>
 801989c:	4622      	mov	r2, r4
 801989e:	2300      	movs	r3, #0
 80198a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80198a4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80198a8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80198ac:	440b      	add	r3, r1
 80198ae:	b2db      	uxtb	r3, r3
 80198b0:	2a00      	cmp	r2, #0
 80198b2:	d1f5      	bne.n	80198a0 <rmw_wait+0xdc>
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d05f      	beq.n	8019978 <rmw_wait+0x1b4>
 80198b8:	1c7a      	adds	r2, r7, #1
 80198ba:	d00d      	beq.n	80198d8 <rmw_wait+0x114>
 80198bc:	ee07 7a90 	vmov	s15, r7
 80198c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80198c4:	ee07 3a90 	vmov	s15, r3
 80198c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80198cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80198d0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80198d4:	ee17 7a90 	vmov	r7, s15
 80198d8:	68a0      	ldr	r0, [r4, #8]
 80198da:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80198de:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	f040 808d 	bne.w	8019a02 <rmw_wait+0x23e>
 80198e8:	6864      	ldr	r4, [r4, #4]
 80198ea:	2c00      	cmp	r4, #0
 80198ec:	d1f4      	bne.n	80198d8 <rmw_wait+0x114>
 80198ee:	f1b9 0f00 	cmp.w	r9, #0
 80198f2:	f000 80a1 	beq.w	8019a38 <rmw_wait+0x274>
 80198f6:	f8d9 7000 	ldr.w	r7, [r9]
 80198fa:	2f00      	cmp	r7, #0
 80198fc:	f000 80a4 	beq.w	8019a48 <rmw_wait+0x284>
 8019900:	2400      	movs	r4, #0
 8019902:	4627      	mov	r7, r4
 8019904:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019908:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801990c:	f7f6 ff30 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019910:	2800      	cmp	r0, #0
 8019912:	d03b      	beq.n	801998c <rmw_wait+0x1c8>
 8019914:	3401      	adds	r4, #1
 8019916:	f8d9 3000 	ldr.w	r3, [r9]
 801991a:	2701      	movs	r7, #1
 801991c:	42a3      	cmp	r3, r4
 801991e:	d8f1      	bhi.n	8019904 <rmw_wait+0x140>
 8019920:	2701      	movs	r7, #1
 8019922:	f1b8 0f00 	cmp.w	r8, #0
 8019926:	d010      	beq.n	801994a <rmw_wait+0x186>
 8019928:	f8d8 3000 	ldr.w	r3, [r8]
 801992c:	b16b      	cbz	r3, 801994a <rmw_wait+0x186>
 801992e:	2400      	movs	r4, #0
 8019930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019934:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019938:	f7f6 ff1a 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 801993c:	b370      	cbz	r0, 801999c <rmw_wait+0x1d8>
 801993e:	3401      	adds	r4, #1
 8019940:	f8d8 3000 	ldr.w	r3, [r8]
 8019944:	2701      	movs	r7, #1
 8019946:	42a3      	cmp	r3, r4
 8019948:	d8f2      	bhi.n	8019930 <rmw_wait+0x16c>
 801994a:	2d00      	cmp	r5, #0
 801994c:	d035      	beq.n	80199ba <rmw_wait+0x1f6>
 801994e:	682b      	ldr	r3, [r5, #0]
 8019950:	b39b      	cbz	r3, 80199ba <rmw_wait+0x1f6>
 8019952:	2400      	movs	r4, #0
 8019954:	686b      	ldr	r3, [r5, #4]
 8019956:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801995a:	f7f6 ff09 	bl	8010770 <rmw_uxrce_find_static_input_buffer_by_owner>
 801995e:	b328      	cbz	r0, 80199ac <rmw_wait+0x1e8>
 8019960:	3401      	adds	r4, #1
 8019962:	682b      	ldr	r3, [r5, #0]
 8019964:	2701      	movs	r7, #1
 8019966:	42a3      	cmp	r3, r4
 8019968:	d8f4      	bhi.n	8019954 <rmw_wait+0x190>
 801996a:	2e00      	cmp	r6, #0
 801996c:	d03c      	beq.n	80199e8 <rmw_wait+0x224>
 801996e:	6834      	ldr	r4, [r6, #0]
 8019970:	2c00      	cmp	r4, #0
 8019972:	d039      	beq.n	80199e8 <rmw_wait+0x224>
 8019974:	2701      	movs	r7, #1
 8019976:	e023      	b.n	80199c0 <rmw_wait+0x1fc>
 8019978:	68a0      	ldr	r0, [r4, #8]
 801997a:	2100      	movs	r1, #0
 801997c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019980:	f7f9 fc68 	bl	8013254 <uxr_run_session_timeout>
 8019984:	6864      	ldr	r4, [r4, #4]
 8019986:	2c00      	cmp	r4, #0
 8019988:	d1f6      	bne.n	8019978 <rmw_wait+0x1b4>
 801998a:	e7b0      	b.n	80198ee <rmw_wait+0x12a>
 801998c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019990:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019994:	3401      	adds	r4, #1
 8019996:	42a3      	cmp	r3, r4
 8019998:	d8b4      	bhi.n	8019904 <rmw_wait+0x140>
 801999a:	e7c2      	b.n	8019922 <rmw_wait+0x15e>
 801999c:	e9d8 3200 	ldrd	r3, r2, [r8]
 80199a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80199a4:	3401      	adds	r4, #1
 80199a6:	429c      	cmp	r4, r3
 80199a8:	d3c2      	bcc.n	8019930 <rmw_wait+0x16c>
 80199aa:	e7ce      	b.n	801994a <rmw_wait+0x186>
 80199ac:	e9d5 3200 	ldrd	r3, r2, [r5]
 80199b0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80199b4:	3401      	adds	r4, #1
 80199b6:	42a3      	cmp	r3, r4
 80199b8:	d8cc      	bhi.n	8019954 <rmw_wait+0x190>
 80199ba:	b1a6      	cbz	r6, 80199e6 <rmw_wait+0x222>
 80199bc:	6834      	ldr	r4, [r6, #0]
 80199be:	b194      	cbz	r4, 80199e6 <rmw_wait+0x222>
 80199c0:	2300      	movs	r3, #0
 80199c2:	461d      	mov	r5, r3
 80199c4:	e004      	b.n	80199d0 <rmw_wait+0x20c>
 80199c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80199ca:	3301      	adds	r3, #1
 80199cc:	42a3      	cmp	r3, r4
 80199ce:	d00a      	beq.n	80199e6 <rmw_wait+0x222>
 80199d0:	6870      	ldr	r0, [r6, #4]
 80199d2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80199d6:	7c0a      	ldrb	r2, [r1, #16]
 80199d8:	2a00      	cmp	r2, #0
 80199da:	d0f4      	beq.n	80199c6 <rmw_wait+0x202>
 80199dc:	3301      	adds	r3, #1
 80199de:	4617      	mov	r7, r2
 80199e0:	740d      	strb	r5, [r1, #16]
 80199e2:	42a3      	cmp	r3, r4
 80199e4:	d1f4      	bne.n	80199d0 <rmw_wait+0x20c>
 80199e6:	b147      	cbz	r7, 80199fa <rmw_wait+0x236>
 80199e8:	2000      	movs	r0, #0
 80199ea:	b009      	add	sp, #36	@ 0x24
 80199ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199f0:	b11e      	cbz	r6, 80199fa <rmw_wait+0x236>
 80199f2:	6834      	ldr	r4, [r6, #0]
 80199f4:	462f      	mov	r7, r5
 80199f6:	2c00      	cmp	r4, #0
 80199f8:	d1e2      	bne.n	80199c0 <rmw_wait+0x1fc>
 80199fa:	2002      	movs	r0, #2
 80199fc:	b009      	add	sp, #36	@ 0x24
 80199fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a02:	4639      	mov	r1, r7
 8019a04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a08:	f7f9 fc3e 	bl	8013288 <uxr_run_session_until_data>
 8019a0c:	6864      	ldr	r4, [r4, #4]
 8019a0e:	2c00      	cmp	r4, #0
 8019a10:	f47f af62 	bne.w	80198d8 <rmw_wait+0x114>
 8019a14:	e76b      	b.n	80198ee <rmw_wait+0x12a>
 8019a16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019a1a:	f7ff f9df 	bl	8018ddc <rmw_time_total_nsec>
 8019a1e:	2300      	movs	r3, #0
 8019a20:	4a19      	ldr	r2, [pc, #100]	@ (8019a88 <rmw_wait+0x2c4>)
 8019a22:	f7e6 fd15 	bl	8000450 <__aeabi_uldivmod>
 8019a26:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8019a2a:	4607      	mov	r7, r0
 8019a2c:	f171 0300 	sbcs.w	r3, r1, #0
 8019a30:	bfa8      	it	ge
 8019a32:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8019a36:	e6e5      	b.n	8019804 <rmw_wait+0x40>
 8019a38:	f1b8 0f00 	cmp.w	r8, #0
 8019a3c:	d00f      	beq.n	8019a5e <rmw_wait+0x29a>
 8019a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8019a42:	b193      	cbz	r3, 8019a6a <rmw_wait+0x2a6>
 8019a44:	464f      	mov	r7, r9
 8019a46:	e772      	b.n	801992e <rmw_wait+0x16a>
 8019a48:	f1b8 0f00 	cmp.w	r8, #0
 8019a4c:	d007      	beq.n	8019a5e <rmw_wait+0x29a>
 8019a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	f47f af6b 	bne.w	801992e <rmw_wait+0x16a>
 8019a58:	b155      	cbz	r5, 8019a70 <rmw_wait+0x2ac>
 8019a5a:	461f      	mov	r7, r3
 8019a5c:	e777      	b.n	801994e <rmw_wait+0x18a>
 8019a5e:	2d00      	cmp	r5, #0
 8019a60:	d0c6      	beq.n	80199f0 <rmw_wait+0x22c>
 8019a62:	682b      	ldr	r3, [r5, #0]
 8019a64:	b143      	cbz	r3, 8019a78 <rmw_wait+0x2b4>
 8019a66:	4647      	mov	r7, r8
 8019a68:	e773      	b.n	8019952 <rmw_wait+0x18e>
 8019a6a:	b10d      	cbz	r5, 8019a70 <rmw_wait+0x2ac>
 8019a6c:	464f      	mov	r7, r9
 8019a6e:	e76e      	b.n	801994e <rmw_wait+0x18a>
 8019a70:	462f      	mov	r7, r5
 8019a72:	2e00      	cmp	r6, #0
 8019a74:	d1a2      	bne.n	80199bc <rmw_wait+0x1f8>
 8019a76:	e7c0      	b.n	80199fa <rmw_wait+0x236>
 8019a78:	4647      	mov	r7, r8
 8019a7a:	2e00      	cmp	r6, #0
 8019a7c:	d19e      	bne.n	80199bc <rmw_wait+0x1f8>
 8019a7e:	e7bc      	b.n	80199fa <rmw_wait+0x236>
 8019a80:	0801cda8 	.word	0x0801cda8
 8019a84:	24012f9c 	.word	0x24012f9c
 8019a88:	000f4240 	.word	0x000f4240

08019a8c <rmw_create_wait_set>:
 8019a8c:	b508      	push	{r3, lr}
 8019a8e:	4803      	ldr	r0, [pc, #12]	@ (8019a9c <rmw_create_wait_set+0x10>)
 8019a90:	f7ff fc14 	bl	80192bc <get_memory>
 8019a94:	b108      	cbz	r0, 8019a9a <rmw_create_wait_set+0xe>
 8019a96:	6880      	ldr	r0, [r0, #8]
 8019a98:	3010      	adds	r0, #16
 8019a9a:	bd08      	pop	{r3, pc}
 8019a9c:	24012fdc 	.word	0x24012fdc

08019aa0 <rmw_destroy_wait_set>:
 8019aa0:	b508      	push	{r3, lr}
 8019aa2:	4b08      	ldr	r3, [pc, #32]	@ (8019ac4 <rmw_destroy_wait_set+0x24>)
 8019aa4:	6819      	ldr	r1, [r3, #0]
 8019aa6:	b911      	cbnz	r1, 8019aae <rmw_destroy_wait_set+0xe>
 8019aa8:	e00a      	b.n	8019ac0 <rmw_destroy_wait_set+0x20>
 8019aaa:	6849      	ldr	r1, [r1, #4]
 8019aac:	b141      	cbz	r1, 8019ac0 <rmw_destroy_wait_set+0x20>
 8019aae:	688b      	ldr	r3, [r1, #8]
 8019ab0:	3310      	adds	r3, #16
 8019ab2:	4298      	cmp	r0, r3
 8019ab4:	d1f9      	bne.n	8019aaa <rmw_destroy_wait_set+0xa>
 8019ab6:	4803      	ldr	r0, [pc, #12]	@ (8019ac4 <rmw_destroy_wait_set+0x24>)
 8019ab8:	f7ff fc10 	bl	80192dc <put_memory>
 8019abc:	2000      	movs	r0, #0
 8019abe:	bd08      	pop	{r3, pc}
 8019ac0:	2001      	movs	r0, #1
 8019ac2:	bd08      	pop	{r3, pc}
 8019ac4:	24012fdc 	.word	0x24012fdc

08019ac8 <rosidl_runtime_c__double__Sequence__init>:
 8019ac8:	b530      	push	{r4, r5, lr}
 8019aca:	4604      	mov	r4, r0
 8019acc:	b087      	sub	sp, #28
 8019ace:	b130      	cbz	r0, 8019ade <rosidl_runtime_c__double__Sequence__init+0x16>
 8019ad0:	460d      	mov	r5, r1
 8019ad2:	b931      	cbnz	r1, 8019ae2 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8019ad4:	460b      	mov	r3, r1
 8019ad6:	2001      	movs	r0, #1
 8019ad8:	60a5      	str	r5, [r4, #8]
 8019ada:	e9c4 3500 	strd	r3, r5, [r4]
 8019ade:	b007      	add	sp, #28
 8019ae0:	bd30      	pop	{r4, r5, pc}
 8019ae2:	a801      	add	r0, sp, #4
 8019ae4:	f7f5 fd36 	bl	800f554 <rcutils_get_default_allocator>
 8019ae8:	9b01      	ldr	r3, [sp, #4]
 8019aea:	9905      	ldr	r1, [sp, #20]
 8019aec:	00e8      	lsls	r0, r5, #3
 8019aee:	4798      	blx	r3
 8019af0:	4603      	mov	r3, r0
 8019af2:	2800      	cmp	r0, #0
 8019af4:	d1ef      	bne.n	8019ad6 <rosidl_runtime_c__double__Sequence__init+0xe>
 8019af6:	e7f2      	b.n	8019ade <rosidl_runtime_c__double__Sequence__init+0x16>

08019af8 <rosidl_runtime_c__double__Sequence__fini>:
 8019af8:	b188      	cbz	r0, 8019b1e <rosidl_runtime_c__double__Sequence__fini+0x26>
 8019afa:	6803      	ldr	r3, [r0, #0]
 8019afc:	b510      	push	{r4, lr}
 8019afe:	4604      	mov	r4, r0
 8019b00:	b086      	sub	sp, #24
 8019b02:	b153      	cbz	r3, 8019b1a <rosidl_runtime_c__double__Sequence__fini+0x22>
 8019b04:	a801      	add	r0, sp, #4
 8019b06:	f7f5 fd25 	bl	800f554 <rcutils_get_default_allocator>
 8019b0a:	9b02      	ldr	r3, [sp, #8]
 8019b0c:	9905      	ldr	r1, [sp, #20]
 8019b0e:	6820      	ldr	r0, [r4, #0]
 8019b10:	4798      	blx	r3
 8019b12:	2300      	movs	r3, #0
 8019b14:	e9c4 3300 	strd	r3, r3, [r4]
 8019b18:	60a3      	str	r3, [r4, #8]
 8019b1a:	b006      	add	sp, #24
 8019b1c:	bd10      	pop	{r4, pc}
 8019b1e:	4770      	bx	lr

08019b20 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8019b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b24:	6805      	ldr	r5, [r0, #0]
 8019b26:	4604      	mov	r4, r0
 8019b28:	460e      	mov	r6, r1
 8019b2a:	4628      	mov	r0, r5
 8019b2c:	f7e6 fbd8 	bl	80002e0 <strcmp>
 8019b30:	b1c8      	cbz	r0, 8019b66 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8019b32:	4b11      	ldr	r3, [pc, #68]	@ (8019b78 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	429d      	cmp	r5, r3
 8019b38:	d112      	bne.n	8019b60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8019b3a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8019b42:	b16c      	cbz	r4, 8019b60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8019b44:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019b48:	2700      	movs	r7, #0
 8019b4a:	3d04      	subs	r5, #4
 8019b4c:	4631      	mov	r1, r6
 8019b4e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8019b52:	f7e6 fbc5 	bl	80002e0 <strcmp>
 8019b56:	00bb      	lsls	r3, r7, #2
 8019b58:	b140      	cbz	r0, 8019b6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8019b5a:	3701      	adds	r7, #1
 8019b5c:	42bc      	cmp	r4, r7
 8019b5e:	d1f5      	bne.n	8019b4c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8019b60:	2000      	movs	r0, #0
 8019b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b66:	4620      	mov	r0, r4
 8019b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b74:	58d3      	ldr	r3, [r2, r3]
 8019b76:	4718      	bx	r3
 8019b78:	240001b4 	.word	0x240001b4

08019b7c <std_msgs__msg__Float64MultiArray__init>:
 8019b7c:	b570      	push	{r4, r5, r6, lr}
 8019b7e:	4605      	mov	r5, r0
 8019b80:	b1b0      	cbz	r0, 8019bb0 <std_msgs__msg__Float64MultiArray__init+0x34>
 8019b82:	f000 f8b3 	bl	8019cec <std_msgs__msg__MultiArrayLayout__init>
 8019b86:	4604      	mov	r4, r0
 8019b88:	b148      	cbz	r0, 8019b9e <std_msgs__msg__Float64MultiArray__init+0x22>
 8019b8a:	f105 0610 	add.w	r6, r5, #16
 8019b8e:	2100      	movs	r1, #0
 8019b90:	4630      	mov	r0, r6
 8019b92:	f7ff ff99 	bl	8019ac8 <rosidl_runtime_c__double__Sequence__init>
 8019b96:	4604      	mov	r4, r0
 8019b98:	b168      	cbz	r0, 8019bb6 <std_msgs__msg__Float64MultiArray__init+0x3a>
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	bd70      	pop	{r4, r5, r6, pc}
 8019b9e:	4628      	mov	r0, r5
 8019ba0:	f000 f8b6 	bl	8019d10 <std_msgs__msg__MultiArrayLayout__fini>
 8019ba4:	f105 0010 	add.w	r0, r5, #16
 8019ba8:	f7ff ffa6 	bl	8019af8 <rosidl_runtime_c__double__Sequence__fini>
 8019bac:	4620      	mov	r0, r4
 8019bae:	bd70      	pop	{r4, r5, r6, pc}
 8019bb0:	4604      	mov	r4, r0
 8019bb2:	4620      	mov	r0, r4
 8019bb4:	bd70      	pop	{r4, r5, r6, pc}
 8019bb6:	4628      	mov	r0, r5
 8019bb8:	f000 f8aa 	bl	8019d10 <std_msgs__msg__MultiArrayLayout__fini>
 8019bbc:	4630      	mov	r0, r6
 8019bbe:	f7ff ff9b 	bl	8019af8 <rosidl_runtime_c__double__Sequence__fini>
 8019bc2:	e7ea      	b.n	8019b9a <std_msgs__msg__Float64MultiArray__init+0x1e>

08019bc4 <std_msgs__msg__Float64MultiArray__fini>:
 8019bc4:	b148      	cbz	r0, 8019bda <std_msgs__msg__Float64MultiArray__fini+0x16>
 8019bc6:	b510      	push	{r4, lr}
 8019bc8:	4604      	mov	r4, r0
 8019bca:	f000 f8a1 	bl	8019d10 <std_msgs__msg__MultiArrayLayout__fini>
 8019bce:	f104 0010 	add.w	r0, r4, #16
 8019bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bd6:	f7ff bf8f 	b.w	8019af8 <rosidl_runtime_c__double__Sequence__fini>
 8019bda:	4770      	bx	lr

08019bdc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 8019bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019be0:	b086      	sub	sp, #24
 8019be2:	4689      	mov	r9, r1
 8019be4:	4682      	mov	sl, r0
 8019be6:	a801      	add	r0, sp, #4
 8019be8:	f7f5 fcb4 	bl	800f554 <rcutils_get_default_allocator>
 8019bec:	f1b9 0f00 	cmp.w	r9, #0
 8019bf0:	d02e      	beq.n	8019c50 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 8019bf2:	2114      	movs	r1, #20
 8019bf4:	4648      	mov	r0, r9
 8019bf6:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8019bfa:	4642      	mov	r2, r8
 8019bfc:	4798      	blx	r3
 8019bfe:	4607      	mov	r7, r0
 8019c00:	b380      	cbz	r0, 8019c64 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 8019c02:	4606      	mov	r6, r0
 8019c04:	2400      	movs	r4, #0
 8019c06:	e003      	b.n	8019c10 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 8019c08:	3401      	adds	r4, #1
 8019c0a:	3614      	adds	r6, #20
 8019c0c:	45a1      	cmp	r9, r4
 8019c0e:	d020      	beq.n	8019c52 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019c10:	4630      	mov	r0, r6
 8019c12:	f001 fc29 	bl	801b468 <rosidl_runtime_c__String__init>
 8019c16:	4605      	mov	r5, r0
 8019c18:	2800      	cmp	r0, #0
 8019c1a:	d1f5      	bne.n	8019c08 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	f001 fc39 	bl	801b494 <rosidl_runtime_c__String__fini>
 8019c22:	45a1      	cmp	r9, r4
 8019c24:	d915      	bls.n	8019c52 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019c26:	b15c      	cbz	r4, 8019c40 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 8019c28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019c2c:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019c30:	3c14      	subs	r4, #20
 8019c32:	4620      	mov	r0, r4
 8019c34:	f001 fc2e 	bl	801b494 <rosidl_runtime_c__String__fini>
 8019c38:	42a7      	cmp	r7, r4
 8019c3a:	f1a4 0414 	sub.w	r4, r4, #20
 8019c3e:	d1f8      	bne.n	8019c32 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 8019c40:	4638      	mov	r0, r7
 8019c42:	9b02      	ldr	r3, [sp, #8]
 8019c44:	4641      	mov	r1, r8
 8019c46:	4798      	blx	r3
 8019c48:	4628      	mov	r0, r5
 8019c4a:	b006      	add	sp, #24
 8019c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c50:	464f      	mov	r7, r9
 8019c52:	2501      	movs	r5, #1
 8019c54:	f8ca 9008 	str.w	r9, [sl, #8]
 8019c58:	e9ca 7900 	strd	r7, r9, [sl]
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	b006      	add	sp, #24
 8019c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c64:	4605      	mov	r5, r0
 8019c66:	e7f9      	b.n	8019c5c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

08019c68 <std_msgs__msg__MultiArrayDimension__init>:
 8019c68:	b538      	push	{r3, r4, r5, lr}
 8019c6a:	4604      	mov	r4, r0
 8019c6c:	b128      	cbz	r0, 8019c7a <std_msgs__msg__MultiArrayDimension__init+0x12>
 8019c6e:	f001 fbfb 	bl	801b468 <rosidl_runtime_c__String__init>
 8019c72:	4605      	mov	r5, r0
 8019c74:	b120      	cbz	r0, 8019c80 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8019c76:	4628      	mov	r0, r5
 8019c78:	bd38      	pop	{r3, r4, r5, pc}
 8019c7a:	4605      	mov	r5, r0
 8019c7c:	4628      	mov	r0, r5
 8019c7e:	bd38      	pop	{r3, r4, r5, pc}
 8019c80:	4620      	mov	r0, r4
 8019c82:	f001 fc07 	bl	801b494 <rosidl_runtime_c__String__fini>
 8019c86:	4628      	mov	r0, r5
 8019c88:	bd38      	pop	{r3, r4, r5, pc}
 8019c8a:	bf00      	nop

08019c8c <std_msgs__msg__MultiArrayDimension__fini>:
 8019c8c:	b108      	cbz	r0, 8019c92 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8019c8e:	f001 bc01 	b.w	801b494 <rosidl_runtime_c__String__fini>
 8019c92:	4770      	bx	lr

08019c94 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8019c94:	b108      	cbz	r0, 8019c9a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8019c96:	f7ff bfa1 	b.w	8019bdc <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 8019c9a:	4770      	bx	lr

08019c9c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8019c9c:	b320      	cbz	r0, 8019ce8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8019c9e:	b530      	push	{r4, r5, lr}
 8019ca0:	b087      	sub	sp, #28
 8019ca2:	4605      	mov	r5, r0
 8019ca4:	a801      	add	r0, sp, #4
 8019ca6:	f7f5 fc55 	bl	800f554 <rcutils_get_default_allocator>
 8019caa:	682a      	ldr	r2, [r5, #0]
 8019cac:	b1b2      	cbz	r2, 8019cdc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8019cae:	68a9      	ldr	r1, [r5, #8]
 8019cb0:	b161      	cbz	r1, 8019ccc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019cb2:	2400      	movs	r4, #0
 8019cb4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019cb8:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8019cbc:	d010      	beq.n	8019ce0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8019cbe:	f001 fbe9 	bl	801b494 <rosidl_runtime_c__String__fini>
 8019cc2:	3401      	adds	r4, #1
 8019cc4:	68a9      	ldr	r1, [r5, #8]
 8019cc6:	682a      	ldr	r2, [r5, #0]
 8019cc8:	428c      	cmp	r4, r1
 8019cca:	d3f3      	bcc.n	8019cb4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019ccc:	9b02      	ldr	r3, [sp, #8]
 8019cce:	4610      	mov	r0, r2
 8019cd0:	9905      	ldr	r1, [sp, #20]
 8019cd2:	4798      	blx	r3
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	e9c5 3300 	strd	r3, r3, [r5]
 8019cda:	60ab      	str	r3, [r5, #8]
 8019cdc:	b007      	add	sp, #28
 8019cde:	bd30      	pop	{r4, r5, pc}
 8019ce0:	3401      	adds	r4, #1
 8019ce2:	428c      	cmp	r4, r1
 8019ce4:	d3e6      	bcc.n	8019cb4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019ce6:	e7f1      	b.n	8019ccc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019ce8:	4770      	bx	lr
 8019cea:	bf00      	nop

08019cec <std_msgs__msg__MultiArrayLayout__init>:
 8019cec:	b538      	push	{r3, r4, r5, lr}
 8019cee:	4604      	mov	r4, r0
 8019cf0:	b130      	cbz	r0, 8019d00 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8019cf2:	2100      	movs	r1, #0
 8019cf4:	f7ff ffce 	bl	8019c94 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	b120      	cbz	r0, 8019d06 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	bd38      	pop	{r3, r4, r5, pc}
 8019d00:	4605      	mov	r5, r0
 8019d02:	4628      	mov	r0, r5
 8019d04:	bd38      	pop	{r3, r4, r5, pc}
 8019d06:	4620      	mov	r0, r4
 8019d08:	f7ff ffc8 	bl	8019c9c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	bd38      	pop	{r3, r4, r5, pc}

08019d10 <std_msgs__msg__MultiArrayLayout__fini>:
 8019d10:	b108      	cbz	r0, 8019d16 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8019d12:	f7ff bfc3 	b.w	8019c9c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019d16:	4770      	bx	lr

08019d18 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019d18:	f7ff bfa6 	b.w	8019c68 <std_msgs__msg__MultiArrayDimension__init>

08019d1c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8019d1c:	f7ff bfb6 	b.w	8019c8c <std_msgs__msg__MultiArrayDimension__fini>

08019d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019d20:	4b04      	ldr	r3, [pc, #16]	@ (8019d34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	b10a      	cbz	r2, 8019d2a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8019d26:	4803      	ldr	r0, [pc, #12]	@ (8019d34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019d28:	4770      	bx	lr
 8019d2a:	4a03      	ldr	r2, [pc, #12]	@ (8019d38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8019d2c:	4801      	ldr	r0, [pc, #4]	@ (8019d34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019d2e:	6812      	ldr	r2, [r2, #0]
 8019d30:	601a      	str	r2, [r3, #0]
 8019d32:	4770      	bx	lr
 8019d34:	24000270 	.word	0x24000270
 8019d38:	240001b8 	.word	0x240001b8

08019d3c <_MultiArrayDimension__cdr_serialize>:
 8019d3c:	b1d0      	cbz	r0, 8019d74 <_MultiArrayDimension__cdr_serialize+0x38>
 8019d3e:	b570      	push	{r4, r5, r6, lr}
 8019d40:	6806      	ldr	r6, [r0, #0]
 8019d42:	4604      	mov	r4, r0
 8019d44:	460d      	mov	r5, r1
 8019d46:	b196      	cbz	r6, 8019d6e <_MultiArrayDimension__cdr_serialize+0x32>
 8019d48:	4630      	mov	r0, r6
 8019d4a:	f7e6 fad3 	bl	80002f4 <strlen>
 8019d4e:	1c42      	adds	r2, r0, #1
 8019d50:	4631      	mov	r1, r6
 8019d52:	6060      	str	r0, [r4, #4]
 8019d54:	4628      	mov	r0, r5
 8019d56:	f7f8 fa1b 	bl	8012190 <ucdr_serialize_sequence_char>
 8019d5a:	68e1      	ldr	r1, [r4, #12]
 8019d5c:	4628      	mov	r0, r5
 8019d5e:	f7f7 fa6d 	bl	801123c <ucdr_serialize_uint32_t>
 8019d62:	6921      	ldr	r1, [r4, #16]
 8019d64:	4628      	mov	r0, r5
 8019d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d6a:	f7f7 ba67 	b.w	801123c <ucdr_serialize_uint32_t>
 8019d6e:	4632      	mov	r2, r6
 8019d70:	4630      	mov	r0, r6
 8019d72:	e7ed      	b.n	8019d50 <_MultiArrayDimension__cdr_serialize+0x14>
 8019d74:	4770      	bx	lr
 8019d76:	bf00      	nop

08019d78 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019d78:	b570      	push	{r4, r5, r6, lr}
 8019d7a:	4604      	mov	r4, r0
 8019d7c:	b1b0      	cbz	r0, 8019dac <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8019d7e:	460d      	mov	r5, r1
 8019d80:	2104      	movs	r1, #4
 8019d82:	4628      	mov	r0, r5
 8019d84:	f7f8 f994 	bl	80120b0 <ucdr_alignment>
 8019d88:	6866      	ldr	r6, [r4, #4]
 8019d8a:	1d6b      	adds	r3, r5, #5
 8019d8c:	2104      	movs	r1, #4
 8019d8e:	f1c5 0504 	rsb	r5, r5, #4
 8019d92:	4433      	add	r3, r6
 8019d94:	181e      	adds	r6, r3, r0
 8019d96:	4630      	mov	r0, r6
 8019d98:	f7f8 f98a 	bl	80120b0 <ucdr_alignment>
 8019d9c:	2104      	movs	r1, #4
 8019d9e:	1844      	adds	r4, r0, r1
 8019da0:	4434      	add	r4, r6
 8019da2:	4620      	mov	r0, r4
 8019da4:	f7f8 f984 	bl	80120b0 <ucdr_alignment>
 8019da8:	4428      	add	r0, r5
 8019daa:	4420      	add	r0, r4
 8019dac:	bd70      	pop	{r4, r5, r6, pc}
 8019dae:	bf00      	nop

08019db0 <_MultiArrayDimension__cdr_deserialize>:
 8019db0:	b570      	push	{r4, r5, r6, lr}
 8019db2:	460c      	mov	r4, r1
 8019db4:	b082      	sub	sp, #8
 8019db6:	b1d9      	cbz	r1, 8019df0 <_MultiArrayDimension__cdr_deserialize+0x40>
 8019db8:	688e      	ldr	r6, [r1, #8]
 8019dba:	ab01      	add	r3, sp, #4
 8019dbc:	6809      	ldr	r1, [r1, #0]
 8019dbe:	4605      	mov	r5, r0
 8019dc0:	4632      	mov	r2, r6
 8019dc2:	f7f8 f9f7 	bl	80121b4 <ucdr_deserialize_sequence_char>
 8019dc6:	9b01      	ldr	r3, [sp, #4]
 8019dc8:	b970      	cbnz	r0, 8019de8 <_MultiArrayDimension__cdr_deserialize+0x38>
 8019dca:	429e      	cmp	r6, r3
 8019dcc:	d313      	bcc.n	8019df6 <_MultiArrayDimension__cdr_deserialize+0x46>
 8019dce:	f104 010c 	add.w	r1, r4, #12
 8019dd2:	4628      	mov	r0, r5
 8019dd4:	f7f7 fb62 	bl	801149c <ucdr_deserialize_uint32_t>
 8019dd8:	f104 0110 	add.w	r1, r4, #16
 8019ddc:	4628      	mov	r0, r5
 8019dde:	b002      	add	sp, #8
 8019de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019de4:	f7f7 bb5a 	b.w	801149c <ucdr_deserialize_uint32_t>
 8019de8:	b103      	cbz	r3, 8019dec <_MultiArrayDimension__cdr_deserialize+0x3c>
 8019dea:	3b01      	subs	r3, #1
 8019dec:	6063      	str	r3, [r4, #4]
 8019dee:	e7ee      	b.n	8019dce <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019df0:	4608      	mov	r0, r1
 8019df2:	b002      	add	sp, #8
 8019df4:	bd70      	pop	{r4, r5, r6, pc}
 8019df6:	2101      	movs	r1, #1
 8019df8:	75a8      	strb	r0, [r5, #22]
 8019dfa:	7569      	strb	r1, [r5, #21]
 8019dfc:	6060      	str	r0, [r4, #4]
 8019dfe:	4628      	mov	r0, r5
 8019e00:	f7f8 f96e 	bl	80120e0 <ucdr_align_to>
 8019e04:	9901      	ldr	r1, [sp, #4]
 8019e06:	4628      	mov	r0, r5
 8019e08:	f7f8 f9a2 	bl	8012150 <ucdr_advance_buffer>
 8019e0c:	e7df      	b.n	8019dce <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019e0e:	bf00      	nop

08019e10 <_MultiArrayDimension__max_serialized_size>:
 8019e10:	b510      	push	{r4, lr}
 8019e12:	2104      	movs	r1, #4
 8019e14:	2000      	movs	r0, #0
 8019e16:	f7f8 f94b 	bl	80120b0 <ucdr_alignment>
 8019e1a:	2104      	movs	r1, #4
 8019e1c:	1844      	adds	r4, r0, r1
 8019e1e:	4620      	mov	r0, r4
 8019e20:	f7f8 f946 	bl	80120b0 <ucdr_alignment>
 8019e24:	3004      	adds	r0, #4
 8019e26:	4420      	add	r0, r4
 8019e28:	bd10      	pop	{r4, pc}
 8019e2a:	bf00      	nop

08019e2c <_MultiArrayDimension__get_serialized_size>:
 8019e2c:	b510      	push	{r4, lr}
 8019e2e:	4604      	mov	r4, r0
 8019e30:	b190      	cbz	r0, 8019e58 <_MultiArrayDimension__get_serialized_size+0x2c>
 8019e32:	2104      	movs	r1, #4
 8019e34:	2000      	movs	r0, #0
 8019e36:	f7f8 f93b 	bl	80120b0 <ucdr_alignment>
 8019e3a:	6863      	ldr	r3, [r4, #4]
 8019e3c:	2104      	movs	r1, #4
 8019e3e:	3305      	adds	r3, #5
 8019e40:	181c      	adds	r4, r3, r0
 8019e42:	4620      	mov	r0, r4
 8019e44:	f7f8 f934 	bl	80120b0 <ucdr_alignment>
 8019e48:	2104      	movs	r1, #4
 8019e4a:	4408      	add	r0, r1
 8019e4c:	4404      	add	r4, r0
 8019e4e:	4620      	mov	r0, r4
 8019e50:	f7f8 f92e 	bl	80120b0 <ucdr_alignment>
 8019e54:	3004      	adds	r0, #4
 8019e56:	4420      	add	r0, r4
 8019e58:	bd10      	pop	{r4, pc}
 8019e5a:	bf00      	nop

08019e5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019e5c:	4800      	ldr	r0, [pc, #0]	@ (8019e60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8019e5e:	4770      	bx	lr
 8019e60:	2400027c 	.word	0x2400027c

08019e64 <ucdr_serialize_endian_array_char>:
 8019e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e68:	4619      	mov	r1, r3
 8019e6a:	461f      	mov	r7, r3
 8019e6c:	4605      	mov	r5, r0
 8019e6e:	4690      	mov	r8, r2
 8019e70:	f7f8 f8c6 	bl	8012000 <ucdr_check_buffer_available_for>
 8019e74:	b9e0      	cbnz	r0, 8019eb0 <ucdr_serialize_endian_array_char+0x4c>
 8019e76:	463e      	mov	r6, r7
 8019e78:	e00b      	b.n	8019e92 <ucdr_serialize_endian_array_char+0x2e>
 8019e7a:	4441      	add	r1, r8
 8019e7c:	68a8      	ldr	r0, [r5, #8]
 8019e7e:	4622      	mov	r2, r4
 8019e80:	1b36      	subs	r6, r6, r4
 8019e82:	f002 f902 	bl	801c08a <memcpy>
 8019e86:	68ab      	ldr	r3, [r5, #8]
 8019e88:	6928      	ldr	r0, [r5, #16]
 8019e8a:	4423      	add	r3, r4
 8019e8c:	4420      	add	r0, r4
 8019e8e:	60ab      	str	r3, [r5, #8]
 8019e90:	6128      	str	r0, [r5, #16]
 8019e92:	4631      	mov	r1, r6
 8019e94:	2201      	movs	r2, #1
 8019e96:	4628      	mov	r0, r5
 8019e98:	f7f8 f93c 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 8019e9c:	1bb9      	subs	r1, r7, r6
 8019e9e:	4604      	mov	r4, r0
 8019ea0:	2800      	cmp	r0, #0
 8019ea2:	d1ea      	bne.n	8019e7a <ucdr_serialize_endian_array_char+0x16>
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	7da8      	ldrb	r0, [r5, #22]
 8019ea8:	756b      	strb	r3, [r5, #21]
 8019eaa:	4058      	eors	r0, r3
 8019eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eb0:	463a      	mov	r2, r7
 8019eb2:	4641      	mov	r1, r8
 8019eb4:	68a8      	ldr	r0, [r5, #8]
 8019eb6:	f002 f8e8 	bl	801c08a <memcpy>
 8019eba:	68aa      	ldr	r2, [r5, #8]
 8019ebc:	692b      	ldr	r3, [r5, #16]
 8019ebe:	443a      	add	r2, r7
 8019ec0:	443b      	add	r3, r7
 8019ec2:	60aa      	str	r2, [r5, #8]
 8019ec4:	612b      	str	r3, [r5, #16]
 8019ec6:	e7ed      	b.n	8019ea4 <ucdr_serialize_endian_array_char+0x40>

08019ec8 <ucdr_deserialize_endian_array_char>:
 8019ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ecc:	4619      	mov	r1, r3
 8019ece:	461f      	mov	r7, r3
 8019ed0:	4605      	mov	r5, r0
 8019ed2:	4690      	mov	r8, r2
 8019ed4:	f7f8 f894 	bl	8012000 <ucdr_check_buffer_available_for>
 8019ed8:	b9e8      	cbnz	r0, 8019f16 <ucdr_deserialize_endian_array_char+0x4e>
 8019eda:	463e      	mov	r6, r7
 8019edc:	e00c      	b.n	8019ef8 <ucdr_deserialize_endian_array_char+0x30>
 8019ede:	eb08 0003 	add.w	r0, r8, r3
 8019ee2:	68a9      	ldr	r1, [r5, #8]
 8019ee4:	4622      	mov	r2, r4
 8019ee6:	1b36      	subs	r6, r6, r4
 8019ee8:	f002 f8cf 	bl	801c08a <memcpy>
 8019eec:	68ab      	ldr	r3, [r5, #8]
 8019eee:	6928      	ldr	r0, [r5, #16]
 8019ef0:	4423      	add	r3, r4
 8019ef2:	4420      	add	r0, r4
 8019ef4:	60ab      	str	r3, [r5, #8]
 8019ef6:	6128      	str	r0, [r5, #16]
 8019ef8:	4631      	mov	r1, r6
 8019efa:	2201      	movs	r2, #1
 8019efc:	4628      	mov	r0, r5
 8019efe:	f7f8 f909 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 8019f02:	1bbb      	subs	r3, r7, r6
 8019f04:	4604      	mov	r4, r0
 8019f06:	2800      	cmp	r0, #0
 8019f08:	d1e9      	bne.n	8019ede <ucdr_deserialize_endian_array_char+0x16>
 8019f0a:	2301      	movs	r3, #1
 8019f0c:	7da8      	ldrb	r0, [r5, #22]
 8019f0e:	756b      	strb	r3, [r5, #21]
 8019f10:	4058      	eors	r0, r3
 8019f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f16:	463a      	mov	r2, r7
 8019f18:	68a9      	ldr	r1, [r5, #8]
 8019f1a:	4640      	mov	r0, r8
 8019f1c:	f002 f8b5 	bl	801c08a <memcpy>
 8019f20:	68aa      	ldr	r2, [r5, #8]
 8019f22:	692b      	ldr	r3, [r5, #16]
 8019f24:	443a      	add	r2, r7
 8019f26:	443b      	add	r3, r7
 8019f28:	60aa      	str	r2, [r5, #8]
 8019f2a:	612b      	str	r3, [r5, #16]
 8019f2c:	e7ed      	b.n	8019f0a <ucdr_deserialize_endian_array_char+0x42>
 8019f2e:	bf00      	nop

08019f30 <ucdr_serialize_array_uint8_t>:
 8019f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f34:	4688      	mov	r8, r1
 8019f36:	4611      	mov	r1, r2
 8019f38:	4617      	mov	r7, r2
 8019f3a:	4605      	mov	r5, r0
 8019f3c:	f7f8 f860 	bl	8012000 <ucdr_check_buffer_available_for>
 8019f40:	b9e0      	cbnz	r0, 8019f7c <ucdr_serialize_array_uint8_t+0x4c>
 8019f42:	463e      	mov	r6, r7
 8019f44:	e00b      	b.n	8019f5e <ucdr_serialize_array_uint8_t+0x2e>
 8019f46:	4441      	add	r1, r8
 8019f48:	68a8      	ldr	r0, [r5, #8]
 8019f4a:	4622      	mov	r2, r4
 8019f4c:	1b36      	subs	r6, r6, r4
 8019f4e:	f002 f89c 	bl	801c08a <memcpy>
 8019f52:	68ab      	ldr	r3, [r5, #8]
 8019f54:	6928      	ldr	r0, [r5, #16]
 8019f56:	4423      	add	r3, r4
 8019f58:	4420      	add	r0, r4
 8019f5a:	60ab      	str	r3, [r5, #8]
 8019f5c:	6128      	str	r0, [r5, #16]
 8019f5e:	4631      	mov	r1, r6
 8019f60:	2201      	movs	r2, #1
 8019f62:	4628      	mov	r0, r5
 8019f64:	f7f8 f8d6 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 8019f68:	1bb9      	subs	r1, r7, r6
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	2800      	cmp	r0, #0
 8019f6e:	d1ea      	bne.n	8019f46 <ucdr_serialize_array_uint8_t+0x16>
 8019f70:	2301      	movs	r3, #1
 8019f72:	7da8      	ldrb	r0, [r5, #22]
 8019f74:	756b      	strb	r3, [r5, #21]
 8019f76:	4058      	eors	r0, r3
 8019f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f7c:	463a      	mov	r2, r7
 8019f7e:	4641      	mov	r1, r8
 8019f80:	68a8      	ldr	r0, [r5, #8]
 8019f82:	f002 f882 	bl	801c08a <memcpy>
 8019f86:	68aa      	ldr	r2, [r5, #8]
 8019f88:	692b      	ldr	r3, [r5, #16]
 8019f8a:	443a      	add	r2, r7
 8019f8c:	443b      	add	r3, r7
 8019f8e:	60aa      	str	r2, [r5, #8]
 8019f90:	612b      	str	r3, [r5, #16]
 8019f92:	e7ed      	b.n	8019f70 <ucdr_serialize_array_uint8_t+0x40>

08019f94 <ucdr_serialize_endian_array_uint8_t>:
 8019f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f98:	4619      	mov	r1, r3
 8019f9a:	461f      	mov	r7, r3
 8019f9c:	4605      	mov	r5, r0
 8019f9e:	4690      	mov	r8, r2
 8019fa0:	f7f8 f82e 	bl	8012000 <ucdr_check_buffer_available_for>
 8019fa4:	b9e0      	cbnz	r0, 8019fe0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8019fa6:	463e      	mov	r6, r7
 8019fa8:	e00b      	b.n	8019fc2 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8019faa:	4441      	add	r1, r8
 8019fac:	68a8      	ldr	r0, [r5, #8]
 8019fae:	4622      	mov	r2, r4
 8019fb0:	1b36      	subs	r6, r6, r4
 8019fb2:	f002 f86a 	bl	801c08a <memcpy>
 8019fb6:	68ab      	ldr	r3, [r5, #8]
 8019fb8:	6928      	ldr	r0, [r5, #16]
 8019fba:	4423      	add	r3, r4
 8019fbc:	4420      	add	r0, r4
 8019fbe:	60ab      	str	r3, [r5, #8]
 8019fc0:	6128      	str	r0, [r5, #16]
 8019fc2:	4631      	mov	r1, r6
 8019fc4:	2201      	movs	r2, #1
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f7f8 f8a4 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 8019fcc:	1bb9      	subs	r1, r7, r6
 8019fce:	4604      	mov	r4, r0
 8019fd0:	2800      	cmp	r0, #0
 8019fd2:	d1ea      	bne.n	8019faa <ucdr_serialize_endian_array_uint8_t+0x16>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	7da8      	ldrb	r0, [r5, #22]
 8019fd8:	756b      	strb	r3, [r5, #21]
 8019fda:	4058      	eors	r0, r3
 8019fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fe0:	463a      	mov	r2, r7
 8019fe2:	4641      	mov	r1, r8
 8019fe4:	68a8      	ldr	r0, [r5, #8]
 8019fe6:	f002 f850 	bl	801c08a <memcpy>
 8019fea:	68aa      	ldr	r2, [r5, #8]
 8019fec:	692b      	ldr	r3, [r5, #16]
 8019fee:	443a      	add	r2, r7
 8019ff0:	443b      	add	r3, r7
 8019ff2:	60aa      	str	r2, [r5, #8]
 8019ff4:	612b      	str	r3, [r5, #16]
 8019ff6:	e7ed      	b.n	8019fd4 <ucdr_serialize_endian_array_uint8_t+0x40>

08019ff8 <ucdr_deserialize_array_uint8_t>:
 8019ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ffc:	4688      	mov	r8, r1
 8019ffe:	4611      	mov	r1, r2
 801a000:	4617      	mov	r7, r2
 801a002:	4605      	mov	r5, r0
 801a004:	f7f7 fffc 	bl	8012000 <ucdr_check_buffer_available_for>
 801a008:	b9e8      	cbnz	r0, 801a046 <ucdr_deserialize_array_uint8_t+0x4e>
 801a00a:	463e      	mov	r6, r7
 801a00c:	e00c      	b.n	801a028 <ucdr_deserialize_array_uint8_t+0x30>
 801a00e:	eb08 0003 	add.w	r0, r8, r3
 801a012:	68a9      	ldr	r1, [r5, #8]
 801a014:	4622      	mov	r2, r4
 801a016:	1b36      	subs	r6, r6, r4
 801a018:	f002 f837 	bl	801c08a <memcpy>
 801a01c:	68ab      	ldr	r3, [r5, #8]
 801a01e:	6928      	ldr	r0, [r5, #16]
 801a020:	4423      	add	r3, r4
 801a022:	4420      	add	r0, r4
 801a024:	60ab      	str	r3, [r5, #8]
 801a026:	6128      	str	r0, [r5, #16]
 801a028:	4631      	mov	r1, r6
 801a02a:	2201      	movs	r2, #1
 801a02c:	4628      	mov	r0, r5
 801a02e:	f7f8 f871 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 801a032:	1bbb      	subs	r3, r7, r6
 801a034:	4604      	mov	r4, r0
 801a036:	2800      	cmp	r0, #0
 801a038:	d1e9      	bne.n	801a00e <ucdr_deserialize_array_uint8_t+0x16>
 801a03a:	2301      	movs	r3, #1
 801a03c:	7da8      	ldrb	r0, [r5, #22]
 801a03e:	756b      	strb	r3, [r5, #21]
 801a040:	4058      	eors	r0, r3
 801a042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a046:	463a      	mov	r2, r7
 801a048:	68a9      	ldr	r1, [r5, #8]
 801a04a:	4640      	mov	r0, r8
 801a04c:	f002 f81d 	bl	801c08a <memcpy>
 801a050:	68aa      	ldr	r2, [r5, #8]
 801a052:	692b      	ldr	r3, [r5, #16]
 801a054:	443a      	add	r2, r7
 801a056:	443b      	add	r3, r7
 801a058:	60aa      	str	r2, [r5, #8]
 801a05a:	612b      	str	r3, [r5, #16]
 801a05c:	e7ed      	b.n	801a03a <ucdr_deserialize_array_uint8_t+0x42>
 801a05e:	bf00      	nop

0801a060 <ucdr_deserialize_endian_array_uint8_t>:
 801a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a064:	4619      	mov	r1, r3
 801a066:	461f      	mov	r7, r3
 801a068:	4605      	mov	r5, r0
 801a06a:	4690      	mov	r8, r2
 801a06c:	f7f7 ffc8 	bl	8012000 <ucdr_check_buffer_available_for>
 801a070:	b9e8      	cbnz	r0, 801a0ae <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801a072:	463e      	mov	r6, r7
 801a074:	e00c      	b.n	801a090 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801a076:	eb08 0003 	add.w	r0, r8, r3
 801a07a:	68a9      	ldr	r1, [r5, #8]
 801a07c:	4622      	mov	r2, r4
 801a07e:	1b36      	subs	r6, r6, r4
 801a080:	f002 f803 	bl	801c08a <memcpy>
 801a084:	68ab      	ldr	r3, [r5, #8]
 801a086:	6928      	ldr	r0, [r5, #16]
 801a088:	4423      	add	r3, r4
 801a08a:	4420      	add	r0, r4
 801a08c:	60ab      	str	r3, [r5, #8]
 801a08e:	6128      	str	r0, [r5, #16]
 801a090:	4631      	mov	r1, r6
 801a092:	2201      	movs	r2, #1
 801a094:	4628      	mov	r0, r5
 801a096:	f7f8 f83d 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 801a09a:	1bbb      	subs	r3, r7, r6
 801a09c:	4604      	mov	r4, r0
 801a09e:	2800      	cmp	r0, #0
 801a0a0:	d1e9      	bne.n	801a076 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801a0a2:	2301      	movs	r3, #1
 801a0a4:	7da8      	ldrb	r0, [r5, #22]
 801a0a6:	756b      	strb	r3, [r5, #21]
 801a0a8:	4058      	eors	r0, r3
 801a0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0ae:	463a      	mov	r2, r7
 801a0b0:	68a9      	ldr	r1, [r5, #8]
 801a0b2:	4640      	mov	r0, r8
 801a0b4:	f001 ffe9 	bl	801c08a <memcpy>
 801a0b8:	68aa      	ldr	r2, [r5, #8]
 801a0ba:	692b      	ldr	r3, [r5, #16]
 801a0bc:	443a      	add	r2, r7
 801a0be:	443b      	add	r3, r7
 801a0c0:	60aa      	str	r2, [r5, #8]
 801a0c2:	612b      	str	r3, [r5, #16]
 801a0c4:	e7ed      	b.n	801a0a2 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801a0c6:	bf00      	nop

0801a0c8 <ucdr_serialize_endian_array_double>:
 801a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0cc:	4604      	mov	r4, r0
 801a0ce:	4688      	mov	r8, r1
 801a0d0:	2108      	movs	r1, #8
 801a0d2:	4616      	mov	r6, r2
 801a0d4:	461f      	mov	r7, r3
 801a0d6:	f7f7 fff3 	bl	80120c0 <ucdr_buffer_alignment>
 801a0da:	4601      	mov	r1, r0
 801a0dc:	4620      	mov	r0, r4
 801a0de:	7d65      	ldrb	r5, [r4, #21]
 801a0e0:	f7f8 f836 	bl	8012150 <ucdr_advance_buffer>
 801a0e4:	f1b8 0f01 	cmp.w	r8, #1
 801a0e8:	7565      	strb	r5, [r4, #21]
 801a0ea:	d00f      	beq.n	801a10c <ucdr_serialize_endian_array_double+0x44>
 801a0ec:	b14f      	cbz	r7, 801a102 <ucdr_serialize_endian_array_double+0x3a>
 801a0ee:	2500      	movs	r5, #0
 801a0f0:	3501      	adds	r5, #1
 801a0f2:	4641      	mov	r1, r8
 801a0f4:	4620      	mov	r0, r4
 801a0f6:	ecb6 0b02 	vldmia	r6!, {d0}
 801a0fa:	f7f7 fde1 	bl	8011cc0 <ucdr_serialize_endian_double>
 801a0fe:	42af      	cmp	r7, r5
 801a100:	d1f6      	bne.n	801a0f0 <ucdr_serialize_endian_array_double+0x28>
 801a102:	7da0      	ldrb	r0, [r4, #22]
 801a104:	f080 0001 	eor.w	r0, r0, #1
 801a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10c:	00ff      	lsls	r7, r7, #3
 801a10e:	4620      	mov	r0, r4
 801a110:	4639      	mov	r1, r7
 801a112:	f7f7 ff75 	bl	8012000 <ucdr_check_buffer_available_for>
 801a116:	b9f8      	cbnz	r0, 801a158 <ucdr_serialize_endian_array_double+0x90>
 801a118:	46b8      	mov	r8, r7
 801a11a:	e00c      	b.n	801a136 <ucdr_serialize_endian_array_double+0x6e>
 801a11c:	462a      	mov	r2, r5
 801a11e:	4431      	add	r1, r6
 801a120:	68a0      	ldr	r0, [r4, #8]
 801a122:	eba8 0805 	sub.w	r8, r8, r5
 801a126:	f001 ffb0 	bl	801c08a <memcpy>
 801a12a:	68a2      	ldr	r2, [r4, #8]
 801a12c:	6923      	ldr	r3, [r4, #16]
 801a12e:	442a      	add	r2, r5
 801a130:	442b      	add	r3, r5
 801a132:	60a2      	str	r2, [r4, #8]
 801a134:	6123      	str	r3, [r4, #16]
 801a136:	4641      	mov	r1, r8
 801a138:	2208      	movs	r2, #8
 801a13a:	4620      	mov	r0, r4
 801a13c:	f7f7 ffea 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 801a140:	eba7 0108 	sub.w	r1, r7, r8
 801a144:	4605      	mov	r5, r0
 801a146:	2800      	cmp	r0, #0
 801a148:	d1e8      	bne.n	801a11c <ucdr_serialize_endian_array_double+0x54>
 801a14a:	2308      	movs	r3, #8
 801a14c:	7da0      	ldrb	r0, [r4, #22]
 801a14e:	7563      	strb	r3, [r4, #21]
 801a150:	f080 0001 	eor.w	r0, r0, #1
 801a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a158:	463a      	mov	r2, r7
 801a15a:	4631      	mov	r1, r6
 801a15c:	68a0      	ldr	r0, [r4, #8]
 801a15e:	f001 ff94 	bl	801c08a <memcpy>
 801a162:	68a2      	ldr	r2, [r4, #8]
 801a164:	6923      	ldr	r3, [r4, #16]
 801a166:	443a      	add	r2, r7
 801a168:	441f      	add	r7, r3
 801a16a:	60a2      	str	r2, [r4, #8]
 801a16c:	6127      	str	r7, [r4, #16]
 801a16e:	e7ec      	b.n	801a14a <ucdr_serialize_endian_array_double+0x82>

0801a170 <ucdr_deserialize_endian_array_double>:
 801a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a174:	4605      	mov	r5, r0
 801a176:	4688      	mov	r8, r1
 801a178:	2108      	movs	r1, #8
 801a17a:	4614      	mov	r4, r2
 801a17c:	461f      	mov	r7, r3
 801a17e:	f7f7 ff9f 	bl	80120c0 <ucdr_buffer_alignment>
 801a182:	4601      	mov	r1, r0
 801a184:	4628      	mov	r0, r5
 801a186:	7d6e      	ldrb	r6, [r5, #21]
 801a188:	f7f7 ffe2 	bl	8012150 <ucdr_advance_buffer>
 801a18c:	f1b8 0f01 	cmp.w	r8, #1
 801a190:	756e      	strb	r6, [r5, #21]
 801a192:	d010      	beq.n	801a1b6 <ucdr_deserialize_endian_array_double+0x46>
 801a194:	b157      	cbz	r7, 801a1ac <ucdr_deserialize_endian_array_double+0x3c>
 801a196:	2600      	movs	r6, #0
 801a198:	3601      	adds	r6, #1
 801a19a:	4622      	mov	r2, r4
 801a19c:	4641      	mov	r1, r8
 801a19e:	4628      	mov	r0, r5
 801a1a0:	f7f7 fe60 	bl	8011e64 <ucdr_deserialize_endian_double>
 801a1a4:	42b7      	cmp	r7, r6
 801a1a6:	f104 0408 	add.w	r4, r4, #8
 801a1aa:	d1f5      	bne.n	801a198 <ucdr_deserialize_endian_array_double+0x28>
 801a1ac:	7da8      	ldrb	r0, [r5, #22]
 801a1ae:	f080 0001 	eor.w	r0, r0, #1
 801a1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1b6:	00ff      	lsls	r7, r7, #3
 801a1b8:	4628      	mov	r0, r5
 801a1ba:	4639      	mov	r1, r7
 801a1bc:	f7f7 ff20 	bl	8012000 <ucdr_check_buffer_available_for>
 801a1c0:	b9f8      	cbnz	r0, 801a202 <ucdr_deserialize_endian_array_double+0x92>
 801a1c2:	46b8      	mov	r8, r7
 801a1c4:	e00c      	b.n	801a1e0 <ucdr_deserialize_endian_array_double+0x70>
 801a1c6:	18e0      	adds	r0, r4, r3
 801a1c8:	4632      	mov	r2, r6
 801a1ca:	68a9      	ldr	r1, [r5, #8]
 801a1cc:	eba8 0806 	sub.w	r8, r8, r6
 801a1d0:	f001 ff5b 	bl	801c08a <memcpy>
 801a1d4:	68aa      	ldr	r2, [r5, #8]
 801a1d6:	692b      	ldr	r3, [r5, #16]
 801a1d8:	4432      	add	r2, r6
 801a1da:	4433      	add	r3, r6
 801a1dc:	60aa      	str	r2, [r5, #8]
 801a1de:	612b      	str	r3, [r5, #16]
 801a1e0:	4641      	mov	r1, r8
 801a1e2:	2208      	movs	r2, #8
 801a1e4:	4628      	mov	r0, r5
 801a1e6:	f7f7 ff95 	bl	8012114 <ucdr_check_final_buffer_behavior_array>
 801a1ea:	eba7 0308 	sub.w	r3, r7, r8
 801a1ee:	4606      	mov	r6, r0
 801a1f0:	2800      	cmp	r0, #0
 801a1f2:	d1e8      	bne.n	801a1c6 <ucdr_deserialize_endian_array_double+0x56>
 801a1f4:	2308      	movs	r3, #8
 801a1f6:	7da8      	ldrb	r0, [r5, #22]
 801a1f8:	756b      	strb	r3, [r5, #21]
 801a1fa:	f080 0001 	eor.w	r0, r0, #1
 801a1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a202:	463a      	mov	r2, r7
 801a204:	68a9      	ldr	r1, [r5, #8]
 801a206:	4620      	mov	r0, r4
 801a208:	f001 ff3f 	bl	801c08a <memcpy>
 801a20c:	68aa      	ldr	r2, [r5, #8]
 801a20e:	692b      	ldr	r3, [r5, #16]
 801a210:	443a      	add	r2, r7
 801a212:	441f      	add	r7, r3
 801a214:	60aa      	str	r2, [r5, #8]
 801a216:	612f      	str	r7, [r5, #16]
 801a218:	e7ec      	b.n	801a1f4 <ucdr_deserialize_endian_array_double+0x84>
 801a21a:	bf00      	nop

0801a21c <ucdr_serialize_string>:
 801a21c:	b510      	push	{r4, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	4604      	mov	r4, r0
 801a222:	4608      	mov	r0, r1
 801a224:	9101      	str	r1, [sp, #4]
 801a226:	f7e6 f865 	bl	80002f4 <strlen>
 801a22a:	4602      	mov	r2, r0
 801a22c:	9901      	ldr	r1, [sp, #4]
 801a22e:	4620      	mov	r0, r4
 801a230:	3201      	adds	r2, #1
 801a232:	b002      	add	sp, #8
 801a234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a238:	f7f7 bfaa 	b.w	8012190 <ucdr_serialize_sequence_char>

0801a23c <ucdr_deserialize_string>:
 801a23c:	b500      	push	{lr}
 801a23e:	b083      	sub	sp, #12
 801a240:	ab01      	add	r3, sp, #4
 801a242:	f7f7 ffb7 	bl	80121b4 <ucdr_deserialize_sequence_char>
 801a246:	b003      	add	sp, #12
 801a248:	f85d fb04 	ldr.w	pc, [sp], #4

0801a24c <uxr_init_input_best_effort_stream>:
 801a24c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a250:	8003      	strh	r3, [r0, #0]
 801a252:	4770      	bx	lr

0801a254 <uxr_reset_input_best_effort_stream>:
 801a254:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a258:	8003      	strh	r3, [r0, #0]
 801a25a:	4770      	bx	lr

0801a25c <uxr_receive_best_effort_message>:
 801a25c:	b538      	push	{r3, r4, r5, lr}
 801a25e:	4604      	mov	r4, r0
 801a260:	8800      	ldrh	r0, [r0, #0]
 801a262:	460d      	mov	r5, r1
 801a264:	f000 fd44 	bl	801acf0 <uxr_seq_num_cmp>
 801a268:	4603      	mov	r3, r0
 801a26a:	0fc0      	lsrs	r0, r0, #31
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	bfb8      	it	lt
 801a270:	8025      	strhlt	r5, [r4, #0]
 801a272:	bd38      	pop	{r3, r4, r5, pc}

0801a274 <on_full_input_buffer>:
 801a274:	b570      	push	{r4, r5, r6, lr}
 801a276:	460c      	mov	r4, r1
 801a278:	4605      	mov	r5, r0
 801a27a:	8908      	ldrh	r0, [r1, #8]
 801a27c:	682b      	ldr	r3, [r5, #0]
 801a27e:	7d26      	ldrb	r6, [r4, #20]
 801a280:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a284:	fbb2 f2f0 	udiv	r2, r2, r0
 801a288:	eba3 0c01 	sub.w	ip, r3, r1
 801a28c:	fbbc fcf2 	udiv	ip, ip, r2
 801a290:	f10c 0c01 	add.w	ip, ip, #1
 801a294:	fa1f f38c 	uxth.w	r3, ip
 801a298:	fbb3 fcf0 	udiv	ip, r3, r0
 801a29c:	fb00 331c 	mls	r3, r0, ip, r3
 801a2a0:	b29b      	uxth	r3, r3
 801a2a2:	fb02 f303 	mul.w	r3, r2, r3
 801a2a6:	1d18      	adds	r0, r3, #4
 801a2a8:	4408      	add	r0, r1
 801a2aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a2ae:	b116      	cbz	r6, 801a2b6 <on_full_input_buffer+0x42>
 801a2b0:	2600      	movs	r6, #0
 801a2b2:	f840 6c04 	str.w	r6, [r0, #-4]
 801a2b6:	2a03      	cmp	r2, #3
 801a2b8:	d801      	bhi.n	801a2be <on_full_input_buffer+0x4a>
 801a2ba:	2001      	movs	r0, #1
 801a2bc:	bd70      	pop	{r4, r5, r6, pc}
 801a2be:	3308      	adds	r3, #8
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	3a04      	subs	r2, #4
 801a2c4:	4419      	add	r1, r3
 801a2c6:	692b      	ldr	r3, [r5, #16]
 801a2c8:	f7f7 fee6 	bl	8012098 <ucdr_init_buffer_origin>
 801a2cc:	4628      	mov	r0, r5
 801a2ce:	4622      	mov	r2, r4
 801a2d0:	4902      	ldr	r1, [pc, #8]	@ (801a2dc <on_full_input_buffer+0x68>)
 801a2d2:	f7f7 febd 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 801a2d6:	2000      	movs	r0, #0
 801a2d8:	bd70      	pop	{r4, r5, r6, pc}
 801a2da:	bf00      	nop
 801a2dc:	0801a275 	.word	0x0801a275

0801a2e0 <uxr_init_input_reliable_stream>:
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	e9c0 1200 	strd	r1, r2, [r0]
 801a2e6:	2400      	movs	r4, #0
 801a2e8:	9a02      	ldr	r2, [sp, #8]
 801a2ea:	8103      	strh	r3, [r0, #8]
 801a2ec:	6102      	str	r2, [r0, #16]
 801a2ee:	7504      	strb	r4, [r0, #20]
 801a2f0:	b1c3      	cbz	r3, 801a324 <uxr_init_input_reliable_stream+0x44>
 801a2f2:	600c      	str	r4, [r1, #0]
 801a2f4:	8901      	ldrh	r1, [r0, #8]
 801a2f6:	2901      	cmp	r1, #1
 801a2f8:	d914      	bls.n	801a324 <uxr_init_input_reliable_stream+0x44>
 801a2fa:	f04f 0c01 	mov.w	ip, #1
 801a2fe:	6843      	ldr	r3, [r0, #4]
 801a300:	f10c 0e01 	add.w	lr, ip, #1
 801a304:	fbbc f2f1 	udiv	r2, ip, r1
 801a308:	fbb3 f3f1 	udiv	r3, r3, r1
 801a30c:	fb01 c212 	mls	r2, r1, r2, ip
 801a310:	fa1f fc8e 	uxth.w	ip, lr
 801a314:	b292      	uxth	r2, r2
 801a316:	fb02 f303 	mul.w	r3, r2, r3
 801a31a:	6802      	ldr	r2, [r0, #0]
 801a31c:	50d4      	str	r4, [r2, r3]
 801a31e:	8901      	ldrh	r1, [r0, #8]
 801a320:	4561      	cmp	r1, ip
 801a322:	d8ec      	bhi.n	801a2fe <uxr_init_input_reliable_stream+0x1e>
 801a324:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a328:	60c3      	str	r3, [r0, #12]
 801a32a:	bd10      	pop	{r4, pc}

0801a32c <uxr_reset_input_reliable_stream>:
 801a32c:	8901      	ldrh	r1, [r0, #8]
 801a32e:	b1d9      	cbz	r1, 801a368 <uxr_reset_input_reliable_stream+0x3c>
 801a330:	b510      	push	{r4, lr}
 801a332:	f04f 0e00 	mov.w	lr, #0
 801a336:	46f4      	mov	ip, lr
 801a338:	4674      	mov	r4, lr
 801a33a:	6843      	ldr	r3, [r0, #4]
 801a33c:	f10e 0e01 	add.w	lr, lr, #1
 801a340:	fbbc f2f1 	udiv	r2, ip, r1
 801a344:	fbb3 f3f1 	udiv	r3, r3, r1
 801a348:	fb01 c212 	mls	r2, r1, r2, ip
 801a34c:	fa1f fc8e 	uxth.w	ip, lr
 801a350:	b292      	uxth	r2, r2
 801a352:	fb02 f303 	mul.w	r3, r2, r3
 801a356:	6802      	ldr	r2, [r0, #0]
 801a358:	50d4      	str	r4, [r2, r3]
 801a35a:	8901      	ldrh	r1, [r0, #8]
 801a35c:	4561      	cmp	r1, ip
 801a35e:	d8ec      	bhi.n	801a33a <uxr_reset_input_reliable_stream+0xe>
 801a360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a364:	60c3      	str	r3, [r0, #12]
 801a366:	bd10      	pop	{r4, pc}
 801a368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a36c:	60c3      	str	r3, [r0, #12]
 801a36e:	4770      	bx	lr

0801a370 <uxr_receive_reliable_message>:
 801a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a374:	4604      	mov	r4, r0
 801a376:	460d      	mov	r5, r1
 801a378:	8901      	ldrh	r1, [r0, #8]
 801a37a:	4617      	mov	r7, r2
 801a37c:	8980      	ldrh	r0, [r0, #12]
 801a37e:	4698      	mov	r8, r3
 801a380:	f000 fcae 	bl	801ace0 <uxr_seq_num_add>
 801a384:	4629      	mov	r1, r5
 801a386:	4606      	mov	r6, r0
 801a388:	89a0      	ldrh	r0, [r4, #12]
 801a38a:	f000 fcb1 	bl	801acf0 <uxr_seq_num_cmp>
 801a38e:	2800      	cmp	r0, #0
 801a390:	db0a      	blt.n	801a3a8 <uxr_receive_reliable_message+0x38>
 801a392:	2600      	movs	r6, #0
 801a394:	4629      	mov	r1, r5
 801a396:	89e0      	ldrh	r0, [r4, #14]
 801a398:	f000 fcaa 	bl	801acf0 <uxr_seq_num_cmp>
 801a39c:	2800      	cmp	r0, #0
 801a39e:	da00      	bge.n	801a3a2 <uxr_receive_reliable_message+0x32>
 801a3a0:	81e5      	strh	r5, [r4, #14]
 801a3a2:	4630      	mov	r0, r6
 801a3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3a8:	4630      	mov	r0, r6
 801a3aa:	4629      	mov	r1, r5
 801a3ac:	f000 fca0 	bl	801acf0 <uxr_seq_num_cmp>
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	dbee      	blt.n	801a392 <uxr_receive_reliable_message+0x22>
 801a3b4:	6923      	ldr	r3, [r4, #16]
 801a3b6:	4638      	mov	r0, r7
 801a3b8:	4798      	blx	r3
 801a3ba:	4681      	mov	r9, r0
 801a3bc:	2101      	movs	r1, #1
 801a3be:	89a0      	ldrh	r0, [r4, #12]
 801a3c0:	f000 fc8e 	bl	801ace0 <uxr_seq_num_add>
 801a3c4:	f1b9 0f00 	cmp.w	r9, #0
 801a3c8:	bf08      	it	eq
 801a3ca:	4285      	cmpeq	r5, r0
 801a3cc:	bf0c      	ite	eq
 801a3ce:	2601      	moveq	r6, #1
 801a3d0:	2600      	movne	r6, #0
 801a3d2:	d104      	bne.n	801a3de <uxr_receive_reliable_message+0x6e>
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	9a08      	ldr	r2, [sp, #32]
 801a3d8:	81a0      	strh	r0, [r4, #12]
 801a3da:	7013      	strb	r3, [r2, #0]
 801a3dc:	e7da      	b.n	801a394 <uxr_receive_reliable_message+0x24>
 801a3de:	8922      	ldrh	r2, [r4, #8]
 801a3e0:	6863      	ldr	r3, [r4, #4]
 801a3e2:	fbb5 f0f2 	udiv	r0, r5, r2
 801a3e6:	fbb3 f3f2 	udiv	r3, r3, r2
 801a3ea:	fb02 5010 	mls	r0, r2, r0, r5
 801a3ee:	b280      	uxth	r0, r0
 801a3f0:	fb03 f000 	mul.w	r0, r3, r0
 801a3f4:	6823      	ldr	r3, [r4, #0]
 801a3f6:	3004      	adds	r0, #4
 801a3f8:	4418      	add	r0, r3
 801a3fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d1c7      	bne.n	801a392 <uxr_receive_reliable_message+0x22>
 801a402:	4639      	mov	r1, r7
 801a404:	4642      	mov	r2, r8
 801a406:	f001 fe40 	bl	801c08a <memcpy>
 801a40a:	8921      	ldrh	r1, [r4, #8]
 801a40c:	6863      	ldr	r3, [r4, #4]
 801a40e:	fbb5 f2f1 	udiv	r2, r5, r1
 801a412:	fbb3 f3f1 	udiv	r3, r3, r1
 801a416:	fb01 5212 	mls	r2, r1, r2, r5
 801a41a:	b292      	uxth	r2, r2
 801a41c:	fb02 f303 	mul.w	r3, r2, r3
 801a420:	6822      	ldr	r2, [r4, #0]
 801a422:	f842 8003 	str.w	r8, [r2, r3]
 801a426:	2301      	movs	r3, #1
 801a428:	9a08      	ldr	r2, [sp, #32]
 801a42a:	7013      	strb	r3, [r2, #0]
 801a42c:	f1b9 0f00 	cmp.w	r9, #0
 801a430:	d0af      	beq.n	801a392 <uxr_receive_reliable_message+0x22>
 801a432:	89a6      	ldrh	r6, [r4, #12]
 801a434:	2101      	movs	r1, #1
 801a436:	4630      	mov	r0, r6
 801a438:	f000 fc52 	bl	801ace0 <uxr_seq_num_add>
 801a43c:	8921      	ldrh	r1, [r4, #8]
 801a43e:	6863      	ldr	r3, [r4, #4]
 801a440:	4606      	mov	r6, r0
 801a442:	fbb0 f2f1 	udiv	r2, r0, r1
 801a446:	fbb3 f3f1 	udiv	r3, r3, r1
 801a44a:	fb01 0212 	mls	r2, r1, r2, r0
 801a44e:	6820      	ldr	r0, [r4, #0]
 801a450:	b292      	uxth	r2, r2
 801a452:	fb02 f303 	mul.w	r3, r2, r3
 801a456:	3304      	adds	r3, #4
 801a458:	4418      	add	r0, r3
 801a45a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d097      	beq.n	801a392 <uxr_receive_reliable_message+0x22>
 801a462:	6923      	ldr	r3, [r4, #16]
 801a464:	4798      	blx	r3
 801a466:	2802      	cmp	r0, #2
 801a468:	d002      	beq.n	801a470 <uxr_receive_reliable_message+0x100>
 801a46a:	2801      	cmp	r0, #1
 801a46c:	d0e2      	beq.n	801a434 <uxr_receive_reliable_message+0xc4>
 801a46e:	e790      	b.n	801a392 <uxr_receive_reliable_message+0x22>
 801a470:	2601      	movs	r6, #1
 801a472:	e78f      	b.n	801a394 <uxr_receive_reliable_message+0x24>

0801a474 <uxr_next_input_reliable_buffer_available>:
 801a474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a478:	4604      	mov	r4, r0
 801a47a:	460f      	mov	r7, r1
 801a47c:	8980      	ldrh	r0, [r0, #12]
 801a47e:	2101      	movs	r1, #1
 801a480:	4690      	mov	r8, r2
 801a482:	f000 fc2d 	bl	801ace0 <uxr_seq_num_add>
 801a486:	8922      	ldrh	r2, [r4, #8]
 801a488:	6866      	ldr	r6, [r4, #4]
 801a48a:	fbb0 f3f2 	udiv	r3, r0, r2
 801a48e:	fbb6 f6f2 	udiv	r6, r6, r2
 801a492:	fb02 0313 	mls	r3, r2, r3, r0
 801a496:	b29b      	uxth	r3, r3
 801a498:	fb03 f606 	mul.w	r6, r3, r6
 801a49c:	6823      	ldr	r3, [r4, #0]
 801a49e:	3604      	adds	r6, #4
 801a4a0:	441e      	add	r6, r3
 801a4a2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a4a6:	f1b9 0f00 	cmp.w	r9, #0
 801a4aa:	d023      	beq.n	801a4f4 <uxr_next_input_reliable_buffer_available+0x80>
 801a4ac:	4605      	mov	r5, r0
 801a4ae:	6923      	ldr	r3, [r4, #16]
 801a4b0:	4630      	mov	r0, r6
 801a4b2:	4798      	blx	r3
 801a4b4:	4682      	mov	sl, r0
 801a4b6:	b300      	cbz	r0, 801a4fa <uxr_next_input_reliable_buffer_available+0x86>
 801a4b8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a4bc:	2101      	movs	r1, #1
 801a4be:	4650      	mov	r0, sl
 801a4c0:	f000 fc0e 	bl	801ace0 <uxr_seq_num_add>
 801a4c4:	8921      	ldrh	r1, [r4, #8]
 801a4c6:	4682      	mov	sl, r0
 801a4c8:	6863      	ldr	r3, [r4, #4]
 801a4ca:	6820      	ldr	r0, [r4, #0]
 801a4cc:	fbba f2f1 	udiv	r2, sl, r1
 801a4d0:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4d4:	fb01 a212 	mls	r2, r1, r2, sl
 801a4d8:	b292      	uxth	r2, r2
 801a4da:	fb02 f303 	mul.w	r3, r2, r3
 801a4de:	3304      	adds	r3, #4
 801a4e0:	4418      	add	r0, r3
 801a4e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a4e6:	b12b      	cbz	r3, 801a4f4 <uxr_next_input_reliable_buffer_available+0x80>
 801a4e8:	6923      	ldr	r3, [r4, #16]
 801a4ea:	4798      	blx	r3
 801a4ec:	2802      	cmp	r0, #2
 801a4ee:	d01b      	beq.n	801a528 <uxr_next_input_reliable_buffer_available+0xb4>
 801a4f0:	2801      	cmp	r0, #1
 801a4f2:	d0e3      	beq.n	801a4bc <uxr_next_input_reliable_buffer_available+0x48>
 801a4f4:	2000      	movs	r0, #0
 801a4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4fa:	464a      	mov	r2, r9
 801a4fc:	4631      	mov	r1, r6
 801a4fe:	4638      	mov	r0, r7
 801a500:	f7f7 fdd2 	bl	80120a8 <ucdr_init_buffer>
 801a504:	8921      	ldrh	r1, [r4, #8]
 801a506:	6863      	ldr	r3, [r4, #4]
 801a508:	2001      	movs	r0, #1
 801a50a:	fbb5 f2f1 	udiv	r2, r5, r1
 801a50e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a512:	fb01 5212 	mls	r2, r1, r2, r5
 801a516:	b292      	uxth	r2, r2
 801a518:	fb02 f303 	mul.w	r3, r2, r3
 801a51c:	6822      	ldr	r2, [r4, #0]
 801a51e:	f842 a003 	str.w	sl, [r2, r3]
 801a522:	81a5      	strh	r5, [r4, #12]
 801a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a528:	8920      	ldrh	r0, [r4, #8]
 801a52a:	eb06 0108 	add.w	r1, r6, r8
 801a52e:	6863      	ldr	r3, [r4, #4]
 801a530:	eba9 0208 	sub.w	r2, r9, r8
 801a534:	fbb5 f6f0 	udiv	r6, r5, r0
 801a538:	fbb3 f3f0 	udiv	r3, r3, r0
 801a53c:	fb00 5516 	mls	r5, r0, r6, r5
 801a540:	2000      	movs	r0, #0
 801a542:	b2ad      	uxth	r5, r5
 801a544:	fb03 f505 	mul.w	r5, r3, r5
 801a548:	6823      	ldr	r3, [r4, #0]
 801a54a:	5158      	str	r0, [r3, r5]
 801a54c:	4638      	mov	r0, r7
 801a54e:	f7f7 fdab 	bl	80120a8 <ucdr_init_buffer>
 801a552:	4638      	mov	r0, r7
 801a554:	4622      	mov	r2, r4
 801a556:	4903      	ldr	r1, [pc, #12]	@ (801a564 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a558:	f7f7 fd7a 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 801a55c:	2001      	movs	r0, #1
 801a55e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a562:	e7c8      	b.n	801a4f6 <uxr_next_input_reliable_buffer_available+0x82>
 801a564:	0801a275 	.word	0x0801a275

0801a568 <uxr_process_heartbeat>:
 801a568:	b538      	push	{r3, r4, r5, lr}
 801a56a:	4611      	mov	r1, r2
 801a56c:	4604      	mov	r4, r0
 801a56e:	89c0      	ldrh	r0, [r0, #14]
 801a570:	4615      	mov	r5, r2
 801a572:	f000 fbbd 	bl	801acf0 <uxr_seq_num_cmp>
 801a576:	2800      	cmp	r0, #0
 801a578:	bfb8      	it	lt
 801a57a:	81e5      	strhlt	r5, [r4, #14]
 801a57c:	bd38      	pop	{r3, r4, r5, pc}
 801a57e:	bf00      	nop

0801a580 <uxr_compute_acknack>:
 801a580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a584:	8903      	ldrh	r3, [r0, #8]
 801a586:	4604      	mov	r4, r0
 801a588:	460f      	mov	r7, r1
 801a58a:	8985      	ldrh	r5, [r0, #12]
 801a58c:	b1db      	cbz	r3, 801a5c6 <uxr_compute_acknack+0x46>
 801a58e:	4628      	mov	r0, r5
 801a590:	2601      	movs	r6, #1
 801a592:	e004      	b.n	801a59e <uxr_compute_acknack+0x1e>
 801a594:	4566      	cmp	r6, ip
 801a596:	f106 0601 	add.w	r6, r6, #1
 801a59a:	d214      	bcs.n	801a5c6 <uxr_compute_acknack+0x46>
 801a59c:	89a0      	ldrh	r0, [r4, #12]
 801a59e:	b2b1      	uxth	r1, r6
 801a5a0:	f000 fb9e 	bl	801ace0 <uxr_seq_num_add>
 801a5a4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a5a8:	fbb0 f2fc 	udiv	r2, r0, ip
 801a5ac:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a5b0:	fb0c 0212 	mls	r2, ip, r2, r0
 801a5b4:	fbb3 f3fc 	udiv	r3, r3, ip
 801a5b8:	b292      	uxth	r2, r2
 801a5ba:	fb02 f303 	mul.w	r3, r2, r3
 801a5be:	58cb      	ldr	r3, [r1, r3]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d1e7      	bne.n	801a594 <uxr_compute_acknack+0x14>
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	803d      	strh	r5, [r7, #0]
 801a5c8:	2101      	movs	r1, #1
 801a5ca:	89e6      	ldrh	r6, [r4, #14]
 801a5cc:	4628      	mov	r0, r5
 801a5ce:	f000 fb8b 	bl	801ace8 <uxr_seq_num_sub>
 801a5d2:	4601      	mov	r1, r0
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	f000 fb87 	bl	801ace8 <uxr_seq_num_sub>
 801a5da:	4606      	mov	r6, r0
 801a5dc:	b328      	cbz	r0, 801a62a <uxr_compute_acknack+0xaa>
 801a5de:	f04f 0900 	mov.w	r9, #0
 801a5e2:	f04f 0801 	mov.w	r8, #1
 801a5e6:	464d      	mov	r5, r9
 801a5e8:	fa1f f189 	uxth.w	r1, r9
 801a5ec:	8838      	ldrh	r0, [r7, #0]
 801a5ee:	f000 fb77 	bl	801ace0 <uxr_seq_num_add>
 801a5f2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a5f6:	6861      	ldr	r1, [r4, #4]
 801a5f8:	fa08 fe09 	lsl.w	lr, r8, r9
 801a5fc:	6822      	ldr	r2, [r4, #0]
 801a5fe:	f109 0901 	add.w	r9, r9, #1
 801a602:	ea4e 0e05 	orr.w	lr, lr, r5
 801a606:	fbb0 f3fc 	udiv	r3, r0, ip
 801a60a:	fbb1 f1fc 	udiv	r1, r1, ip
 801a60e:	fb03 001c 	mls	r0, r3, ip, r0
 801a612:	b283      	uxth	r3, r0
 801a614:	fb01 f303 	mul.w	r3, r1, r3
 801a618:	58d3      	ldr	r3, [r2, r3]
 801a61a:	b90b      	cbnz	r3, 801a620 <uxr_compute_acknack+0xa0>
 801a61c:	fa1f f58e 	uxth.w	r5, lr
 801a620:	454e      	cmp	r6, r9
 801a622:	d1e1      	bne.n	801a5e8 <uxr_compute_acknack+0x68>
 801a624:	4628      	mov	r0, r5
 801a626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a62a:	4605      	mov	r5, r0
 801a62c:	4628      	mov	r0, r5
 801a62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a632:	bf00      	nop

0801a634 <uxr_init_output_best_effort_stream>:
 801a634:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a638:	6001      	str	r1, [r0, #0]
 801a63a:	7303      	strb	r3, [r0, #12]
 801a63c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a640:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a644:	4770      	bx	lr
 801a646:	bf00      	nop

0801a648 <uxr_reset_output_best_effort_stream>:
 801a648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a64c:	7b03      	ldrb	r3, [r0, #12]
 801a64e:	81c2      	strh	r2, [r0, #14]
 801a650:	6043      	str	r3, [r0, #4]
 801a652:	4770      	bx	lr

0801a654 <uxr_prepare_best_effort_buffer_to_write>:
 801a654:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a656:	4604      	mov	r4, r0
 801a658:	b083      	sub	sp, #12
 801a65a:	6840      	ldr	r0, [r0, #4]
 801a65c:	460d      	mov	r5, r1
 801a65e:	4616      	mov	r6, r2
 801a660:	f7fa f840 	bl	80146e4 <uxr_submessage_padding>
 801a664:	6863      	ldr	r3, [r4, #4]
 801a666:	4418      	add	r0, r3
 801a668:	68a3      	ldr	r3, [r4, #8]
 801a66a:	1942      	adds	r2, r0, r5
 801a66c:	4293      	cmp	r3, r2
 801a66e:	bf2c      	ite	cs
 801a670:	2701      	movcs	r7, #1
 801a672:	2700      	movcc	r7, #0
 801a674:	d202      	bcs.n	801a67c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a676:	4638      	mov	r0, r7
 801a678:	b003      	add	sp, #12
 801a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a67c:	9000      	str	r0, [sp, #0]
 801a67e:	2300      	movs	r3, #0
 801a680:	4630      	mov	r0, r6
 801a682:	6821      	ldr	r1, [r4, #0]
 801a684:	f7f7 fcfe 	bl	8012084 <ucdr_init_buffer_origin_offset>
 801a688:	6861      	ldr	r1, [r4, #4]
 801a68a:	4638      	mov	r0, r7
 801a68c:	4429      	add	r1, r5
 801a68e:	6061      	str	r1, [r4, #4]
 801a690:	b003      	add	sp, #12
 801a692:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a694 <uxr_prepare_best_effort_buffer_to_send>:
 801a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a698:	4604      	mov	r4, r0
 801a69a:	461d      	mov	r5, r3
 801a69c:	6840      	ldr	r0, [r0, #4]
 801a69e:	7b23      	ldrb	r3, [r4, #12]
 801a6a0:	4298      	cmp	r0, r3
 801a6a2:	bf8c      	ite	hi
 801a6a4:	2601      	movhi	r6, #1
 801a6a6:	2600      	movls	r6, #0
 801a6a8:	d802      	bhi.n	801a6b0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a6aa:	4630      	mov	r0, r6
 801a6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6b0:	4688      	mov	r8, r1
 801a6b2:	89e0      	ldrh	r0, [r4, #14]
 801a6b4:	2101      	movs	r1, #1
 801a6b6:	4617      	mov	r7, r2
 801a6b8:	f000 fb12 	bl	801ace0 <uxr_seq_num_add>
 801a6bc:	6823      	ldr	r3, [r4, #0]
 801a6be:	81e0      	strh	r0, [r4, #14]
 801a6c0:	8028      	strh	r0, [r5, #0]
 801a6c2:	4630      	mov	r0, r6
 801a6c4:	f8c8 3000 	str.w	r3, [r8]
 801a6c8:	6863      	ldr	r3, [r4, #4]
 801a6ca:	603b      	str	r3, [r7, #0]
 801a6cc:	7b23      	ldrb	r3, [r4, #12]
 801a6ce:	6063      	str	r3, [r4, #4]
 801a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a6d4 <on_full_output_buffer>:
 801a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6d6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a6da:	460c      	mov	r4, r1
 801a6dc:	6803      	ldr	r3, [r0, #0]
 801a6de:	4605      	mov	r5, r0
 801a6e0:	7b26      	ldrb	r6, [r4, #12]
 801a6e2:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a6e6:	fbb2 f2fc 	udiv	r2, r2, ip
 801a6ea:	eba3 0e01 	sub.w	lr, r3, r1
 801a6ee:	6903      	ldr	r3, [r0, #16]
 801a6f0:	fbbe fef2 	udiv	lr, lr, r2
 801a6f4:	f10e 0e01 	add.w	lr, lr, #1
 801a6f8:	fa1f fe8e 	uxth.w	lr, lr
 801a6fc:	fbbe f7fc 	udiv	r7, lr, ip
 801a700:	fb0c ec17 	mls	ip, ip, r7, lr
 801a704:	fa1f fc8c 	uxth.w	ip, ip
 801a708:	fb02 fc0c 	mul.w	ip, r2, ip
 801a70c:	f851 200c 	ldr.w	r2, [r1, ip]
 801a710:	44b4      	add	ip, r6
 801a712:	1b92      	subs	r2, r2, r6
 801a714:	f10c 0c08 	add.w	ip, ip, #8
 801a718:	3a04      	subs	r2, #4
 801a71a:	4461      	add	r1, ip
 801a71c:	f7f7 fcbc 	bl	8012098 <ucdr_init_buffer_origin>
 801a720:	4628      	mov	r0, r5
 801a722:	4622      	mov	r2, r4
 801a724:	4902      	ldr	r1, [pc, #8]	@ (801a730 <on_full_output_buffer+0x5c>)
 801a726:	f7f7 fc93 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 801a72a:	2000      	movs	r0, #0
 801a72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a72e:	bf00      	nop
 801a730:	0801a6d5 	.word	0x0801a6d5

0801a734 <uxr_init_output_reliable_stream>:
 801a734:	b530      	push	{r4, r5, lr}
 801a736:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a73a:	8103      	strh	r3, [r0, #8]
 801a73c:	7304      	strb	r4, [r0, #12]
 801a73e:	e9c0 1200 	strd	r1, r2, [r0]
 801a742:	b1e3      	cbz	r3, 801a77e <uxr_init_output_reliable_stream+0x4a>
 801a744:	600c      	str	r4, [r1, #0]
 801a746:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a74a:	f1bc 0f01 	cmp.w	ip, #1
 801a74e:	d916      	bls.n	801a77e <uxr_init_output_reliable_stream+0x4a>
 801a750:	f04f 0e01 	mov.w	lr, #1
 801a754:	6843      	ldr	r3, [r0, #4]
 801a756:	f10e 0501 	add.w	r5, lr, #1
 801a75a:	7b04      	ldrb	r4, [r0, #12]
 801a75c:	6801      	ldr	r1, [r0, #0]
 801a75e:	fbbe f2fc 	udiv	r2, lr, ip
 801a762:	fbb3 f3fc 	udiv	r3, r3, ip
 801a766:	fb0c e212 	mls	r2, ip, r2, lr
 801a76a:	fa1f fe85 	uxth.w	lr, r5
 801a76e:	b292      	uxth	r2, r2
 801a770:	fb02 f303 	mul.w	r3, r2, r3
 801a774:	50cc      	str	r4, [r1, r3]
 801a776:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a77a:	45f4      	cmp	ip, lr
 801a77c:	d8ea      	bhi.n	801a754 <uxr_init_output_reliable_stream+0x20>
 801a77e:	4b07      	ldr	r3, [pc, #28]	@ (801a79c <uxr_init_output_reliable_stream+0x68>)
 801a780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a784:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a788:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a78c:	f8c0 300e 	str.w	r3, [r0, #14]
 801a790:	2300      	movs	r3, #0
 801a792:	8242      	strh	r2, [r0, #18]
 801a794:	8403      	strh	r3, [r0, #32]
 801a796:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a79a:	bd30      	pop	{r4, r5, pc}
 801a79c:	ffff0000 	.word	0xffff0000

0801a7a0 <uxr_reset_output_reliable_stream>:
 801a7a0:	8901      	ldrh	r1, [r0, #8]
 801a7a2:	b510      	push	{r4, lr}
 801a7a4:	b1b1      	cbz	r1, 801a7d4 <uxr_reset_output_reliable_stream+0x34>
 801a7a6:	f04f 0e00 	mov.w	lr, #0
 801a7aa:	46f4      	mov	ip, lr
 801a7ac:	6843      	ldr	r3, [r0, #4]
 801a7ae:	f10e 0e01 	add.w	lr, lr, #1
 801a7b2:	7b04      	ldrb	r4, [r0, #12]
 801a7b4:	fbbc f2f1 	udiv	r2, ip, r1
 801a7b8:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7bc:	fb01 c212 	mls	r2, r1, r2, ip
 801a7c0:	fa1f fc8e 	uxth.w	ip, lr
 801a7c4:	b292      	uxth	r2, r2
 801a7c6:	fb02 f303 	mul.w	r3, r2, r3
 801a7ca:	6802      	ldr	r2, [r0, #0]
 801a7cc:	50d4      	str	r4, [r2, r3]
 801a7ce:	8901      	ldrh	r1, [r0, #8]
 801a7d0:	4561      	cmp	r1, ip
 801a7d2:	d8eb      	bhi.n	801a7ac <uxr_reset_output_reliable_stream+0xc>
 801a7d4:	4b08      	ldr	r3, [pc, #32]	@ (801a7f8 <uxr_reset_output_reliable_stream+0x58>)
 801a7d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a7da:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801a7f0 <uxr_reset_output_reliable_stream+0x50>
 801a7de:	f8c0 300e 	str.w	r3, [r0, #14]
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	8242      	strh	r2, [r0, #18]
 801a7e6:	8403      	strh	r3, [r0, #32]
 801a7e8:	ed80 7b06 	vstr	d7, [r0, #24]
 801a7ec:	bd10      	pop	{r4, pc}
 801a7ee:	bf00      	nop
 801a7f0:	ffffffff 	.word	0xffffffff
 801a7f4:	7fffffff 	.word	0x7fffffff
 801a7f8:	ffff0000 	.word	0xffff0000

0801a7fc <uxr_prepare_reliable_buffer_to_write>:
 801a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a800:	4604      	mov	r4, r0
 801a802:	b091      	sub	sp, #68	@ 0x44
 801a804:	8900      	ldrh	r0, [r0, #8]
 801a806:	468b      	mov	fp, r1
 801a808:	89e6      	ldrh	r6, [r4, #14]
 801a80a:	9204      	str	r2, [sp, #16]
 801a80c:	6865      	ldr	r5, [r4, #4]
 801a80e:	6823      	ldr	r3, [r4, #0]
 801a810:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a814:	fbb6 f2f0 	udiv	r2, r6, r0
 801a818:	fbb5 f5f0 	udiv	r5, r5, r0
 801a81c:	fb00 6212 	mls	r2, r0, r2, r6
 801a820:	1f2f      	subs	r7, r5, #4
 801a822:	b292      	uxth	r2, r2
 801a824:	fb05 3202 	mla	r2, r5, r2, r3
 801a828:	1d11      	adds	r1, r2, #4
 801a82a:	f8d2 8000 	ldr.w	r8, [r2]
 801a82e:	9103      	str	r1, [sp, #12]
 801a830:	2800      	cmp	r0, #0
 801a832:	f000 814a 	beq.w	801aaca <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a836:	f04f 0c00 	mov.w	ip, #0
 801a83a:	46e2      	mov	sl, ip
 801a83c:	4661      	mov	r1, ip
 801a83e:	f10c 0c01 	add.w	ip, ip, #1
 801a842:	fbb1 f2f0 	udiv	r2, r1, r0
 801a846:	fb00 1212 	mls	r2, r0, r2, r1
 801a84a:	fa1f f18c 	uxth.w	r1, ip
 801a84e:	b292      	uxth	r2, r2
 801a850:	fb05 f202 	mul.w	r2, r5, r2
 801a854:	589a      	ldr	r2, [r3, r2]
 801a856:	454a      	cmp	r2, r9
 801a858:	d103      	bne.n	801a862 <uxr_prepare_reliable_buffer_to_write+0x66>
 801a85a:	f10a 0a01 	add.w	sl, sl, #1
 801a85e:	fa1f fa8a 	uxth.w	sl, sl
 801a862:	4281      	cmp	r1, r0
 801a864:	d3eb      	bcc.n	801a83e <uxr_prepare_reliable_buffer_to_write+0x42>
 801a866:	4640      	mov	r0, r8
 801a868:	2104      	movs	r1, #4
 801a86a:	f8cd a014 	str.w	sl, [sp, #20]
 801a86e:	f7f7 fc1f 	bl	80120b0 <ucdr_alignment>
 801a872:	4480      	add	r8, r0
 801a874:	eb08 020b 	add.w	r2, r8, fp
 801a878:	42ba      	cmp	r2, r7
 801a87a:	f240 80ca 	bls.w	801aa12 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a87e:	7b22      	ldrb	r2, [r4, #12]
 801a880:	445a      	add	r2, fp
 801a882:	42ba      	cmp	r2, r7
 801a884:	f240 80b2 	bls.w	801a9ec <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a888:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a88c:	b2bb      	uxth	r3, r7
 801a88e:	eba2 0209 	sub.w	r2, r2, r9
 801a892:	441a      	add	r2, r3
 801a894:	b292      	uxth	r2, r2
 801a896:	fb0a f902 	mul.w	r9, sl, r2
 801a89a:	9205      	str	r2, [sp, #20]
 801a89c:	45d9      	cmp	r9, fp
 801a89e:	9206      	str	r2, [sp, #24]
 801a8a0:	f0c0 80b3 	bcc.w	801aa0a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a8a4:	f108 0204 	add.w	r2, r8, #4
 801a8a8:	42ba      	cmp	r2, r7
 801a8aa:	f080 80da 	bcs.w	801aa62 <uxr_prepare_reliable_buffer_to_write+0x266>
 801a8ae:	f1a3 0904 	sub.w	r9, r3, #4
 801a8b2:	9b05      	ldr	r3, [sp, #20]
 801a8b4:	eba9 0908 	sub.w	r9, r9, r8
 801a8b8:	fa1f f989 	uxth.w	r9, r9
 801a8bc:	ebab 0b09 	sub.w	fp, fp, r9
 801a8c0:	fbbb f2f3 	udiv	r2, fp, r3
 801a8c4:	fb03 b312 	mls	r3, r3, r2, fp
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	f040 80c4 	bne.w	801aa56 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a8ce:	b293      	uxth	r3, r2
 801a8d0:	4553      	cmp	r3, sl
 801a8d2:	f200 809a 	bhi.w	801aa0a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	f000 80f9 	beq.w	801aace <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a8dc:	f8cd 801c 	str.w	r8, [sp, #28]
 801a8e0:	f04f 0a00 	mov.w	sl, #0
 801a8e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a8e8:	f10d 0b20 	add.w	fp, sp, #32
 801a8ec:	9505      	str	r5, [sp, #20]
 801a8ee:	461d      	mov	r5, r3
 801a8f0:	e000      	b.n	801a8f4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a8f2:	46c1      	mov	r9, r8
 801a8f4:	8922      	ldrh	r2, [r4, #8]
 801a8f6:	4658      	mov	r0, fp
 801a8f8:	6863      	ldr	r3, [r4, #4]
 801a8fa:	f10a 0a01 	add.w	sl, sl, #1
 801a8fe:	fbb6 f1f2 	udiv	r1, r6, r2
 801a902:	fbb3 f3f2 	udiv	r3, r3, r2
 801a906:	fb02 6111 	mls	r1, r2, r1, r6
 801a90a:	463a      	mov	r2, r7
 801a90c:	b289      	uxth	r1, r1
 801a90e:	fb03 f101 	mul.w	r1, r3, r1
 801a912:	6823      	ldr	r3, [r4, #0]
 801a914:	3104      	adds	r1, #4
 801a916:	4419      	add	r1, r3
 801a918:	2300      	movs	r3, #0
 801a91a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a91e:	f8cd c000 	str.w	ip, [sp]
 801a922:	f7f7 fbaf 	bl	8012084 <ucdr_init_buffer_origin_offset>
 801a926:	464a      	mov	r2, r9
 801a928:	2300      	movs	r3, #0
 801a92a:	210d      	movs	r1, #13
 801a92c:	4658      	mov	r0, fp
 801a92e:	f7f9 fe99 	bl	8014664 <uxr_buffer_submessage_header>
 801a932:	8921      	ldrh	r1, [r4, #8]
 801a934:	6863      	ldr	r3, [r4, #4]
 801a936:	4630      	mov	r0, r6
 801a938:	fbb6 f2f1 	udiv	r2, r6, r1
 801a93c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a940:	fb01 6212 	mls	r2, r1, r2, r6
 801a944:	2101      	movs	r1, #1
 801a946:	b292      	uxth	r2, r2
 801a948:	fb02 f303 	mul.w	r3, r2, r3
 801a94c:	6822      	ldr	r2, [r4, #0]
 801a94e:	50d7      	str	r7, [r2, r3]
 801a950:	f000 f9c6 	bl	801ace0 <uxr_seq_num_add>
 801a954:	4606      	mov	r6, r0
 801a956:	fa1f f38a 	uxth.w	r3, sl
 801a95a:	429d      	cmp	r5, r3
 801a95c:	d8c9      	bhi.n	801a8f2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a95e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a962:	9d05      	ldr	r5, [sp, #20]
 801a964:	8920      	ldrh	r0, [r4, #8]
 801a966:	463a      	mov	r2, r7
 801a968:	6863      	ldr	r3, [r4, #4]
 801a96a:	fbb6 f1f0 	udiv	r1, r6, r0
 801a96e:	fbb3 f3f0 	udiv	r3, r3, r0
 801a972:	fb00 6111 	mls	r1, r0, r1, r6
 801a976:	4658      	mov	r0, fp
 801a978:	b289      	uxth	r1, r1
 801a97a:	fb01 f303 	mul.w	r3, r1, r3
 801a97e:	6821      	ldr	r1, [r4, #0]
 801a980:	3304      	adds	r3, #4
 801a982:	4419      	add	r1, r3
 801a984:	2300      	movs	r3, #0
 801a986:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a98a:	9700      	str	r7, [sp, #0]
 801a98c:	f7f7 fb7a 	bl	8012084 <ucdr_init_buffer_origin_offset>
 801a990:	9f06      	ldr	r7, [sp, #24]
 801a992:	4658      	mov	r0, fp
 801a994:	2302      	movs	r3, #2
 801a996:	b2ba      	uxth	r2, r7
 801a998:	210d      	movs	r1, #13
 801a99a:	f7f9 fe63 	bl	8014664 <uxr_buffer_submessage_header>
 801a99e:	f108 0104 	add.w	r1, r8, #4
 801a9a2:	9b03      	ldr	r3, [sp, #12]
 801a9a4:	f1a5 0208 	sub.w	r2, r5, #8
 801a9a8:	8925      	ldrh	r5, [r4, #8]
 801a9aa:	440b      	add	r3, r1
 801a9ac:	eba2 0208 	sub.w	r2, r2, r8
 801a9b0:	fbb6 f0f5 	udiv	r0, r6, r5
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	6863      	ldr	r3, [r4, #4]
 801a9b8:	fb05 6010 	mls	r0, r5, r0, r6
 801a9bc:	fbb3 f3f5 	udiv	r3, r3, r5
 801a9c0:	b280      	uxth	r0, r0
 801a9c2:	6825      	ldr	r5, [r4, #0]
 801a9c4:	fb00 f303 	mul.w	r3, r0, r3
 801a9c8:	7b20      	ldrb	r0, [r4, #12]
 801a9ca:	3004      	adds	r0, #4
 801a9cc:	4438      	add	r0, r7
 801a9ce:	50e8      	str	r0, [r5, r3]
 801a9d0:	9d04      	ldr	r5, [sp, #16]
 801a9d2:	4628      	mov	r0, r5
 801a9d4:	f7f7 fb68 	bl	80120a8 <ucdr_init_buffer>
 801a9d8:	4628      	mov	r0, r5
 801a9da:	4622      	mov	r2, r4
 801a9dc:	493d      	ldr	r1, [pc, #244]	@ (801aad4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a9de:	f7f7 fb37 	bl	8012050 <ucdr_set_on_full_buffer_callback>
 801a9e2:	2001      	movs	r0, #1
 801a9e4:	81e6      	strh	r6, [r4, #14]
 801a9e6:	b011      	add	sp, #68	@ 0x44
 801a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ec:	2101      	movs	r1, #1
 801a9ee:	89e0      	ldrh	r0, [r4, #14]
 801a9f0:	f000 f976 	bl	801ace0 <uxr_seq_num_add>
 801a9f4:	4605      	mov	r5, r0
 801a9f6:	8921      	ldrh	r1, [r4, #8]
 801a9f8:	8a60      	ldrh	r0, [r4, #18]
 801a9fa:	f000 f971 	bl	801ace0 <uxr_seq_num_add>
 801a9fe:	4601      	mov	r1, r0
 801aa00:	4628      	mov	r0, r5
 801aa02:	f000 f975 	bl	801acf0 <uxr_seq_num_cmp>
 801aa06:	2800      	cmp	r0, #0
 801aa08:	dd44      	ble.n	801aa94 <uxr_prepare_reliable_buffer_to_write+0x298>
 801aa0a:	2000      	movs	r0, #0
 801aa0c:	b011      	add	sp, #68	@ 0x44
 801aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa12:	8921      	ldrh	r1, [r4, #8]
 801aa14:	8a60      	ldrh	r0, [r4, #18]
 801aa16:	9205      	str	r2, [sp, #20]
 801aa18:	f000 f962 	bl	801ace0 <uxr_seq_num_add>
 801aa1c:	4601      	mov	r1, r0
 801aa1e:	4630      	mov	r0, r6
 801aa20:	f000 f966 	bl	801acf0 <uxr_seq_num_cmp>
 801aa24:	2800      	cmp	r0, #0
 801aa26:	9a05      	ldr	r2, [sp, #20]
 801aa28:	dcef      	bgt.n	801aa0a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801aa2a:	8925      	ldrh	r5, [r4, #8]
 801aa2c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801aa30:	fbb6 f4f5 	udiv	r4, r6, r5
 801aa34:	fbb3 f3f5 	udiv	r3, r3, r5
 801aa38:	fb05 6414 	mls	r4, r5, r4, r6
 801aa3c:	b2a4      	uxth	r4, r4
 801aa3e:	fb04 f303 	mul.w	r3, r4, r3
 801aa42:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801aa46:	50fa      	str	r2, [r7, r3]
 801aa48:	2300      	movs	r3, #0
 801aa4a:	f8cd 8000 	str.w	r8, [sp]
 801aa4e:	f7f7 fb19 	bl	8012084 <ucdr_init_buffer_origin_offset>
 801aa52:	2001      	movs	r0, #1
 801aa54:	e7da      	b.n	801aa0c <uxr_prepare_reliable_buffer_to_write+0x210>
 801aa56:	3201      	adds	r2, #1
 801aa58:	9306      	str	r3, [sp, #24]
 801aa5a:	b293      	uxth	r3, r2
 801aa5c:	4553      	cmp	r3, sl
 801aa5e:	d8d4      	bhi.n	801aa0a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801aa60:	e739      	b.n	801a8d6 <uxr_prepare_reliable_buffer_to_write+0xda>
 801aa62:	4630      	mov	r0, r6
 801aa64:	2101      	movs	r1, #1
 801aa66:	9307      	str	r3, [sp, #28]
 801aa68:	f000 f93a 	bl	801ace0 <uxr_seq_num_add>
 801aa6c:	4606      	mov	r6, r0
 801aa6e:	8920      	ldrh	r0, [r4, #8]
 801aa70:	6862      	ldr	r2, [r4, #4]
 801aa72:	fbb6 f1f0 	udiv	r1, r6, r0
 801aa76:	fbb2 f2f0 	udiv	r2, r2, r0
 801aa7a:	fb00 6111 	mls	r1, r0, r1, r6
 801aa7e:	b289      	uxth	r1, r1
 801aa80:	fb01 f202 	mul.w	r2, r1, r2
 801aa84:	6821      	ldr	r1, [r4, #0]
 801aa86:	3204      	adds	r2, #4
 801aa88:	188b      	adds	r3, r1, r2
 801aa8a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801aa8e:	9303      	str	r3, [sp, #12]
 801aa90:	9b07      	ldr	r3, [sp, #28]
 801aa92:	e70c      	b.n	801a8ae <uxr_prepare_reliable_buffer_to_write+0xb2>
 801aa94:	8921      	ldrh	r1, [r4, #8]
 801aa96:	6863      	ldr	r3, [r4, #4]
 801aa98:	9804      	ldr	r0, [sp, #16]
 801aa9a:	fbb5 f2f1 	udiv	r2, r5, r1
 801aa9e:	fbb3 f3f1 	udiv	r3, r3, r1
 801aaa2:	fb01 5212 	mls	r2, r1, r2, r5
 801aaa6:	6821      	ldr	r1, [r4, #0]
 801aaa8:	b292      	uxth	r2, r2
 801aaaa:	fb02 f303 	mul.w	r3, r2, r3
 801aaae:	7b22      	ldrb	r2, [r4, #12]
 801aab0:	3304      	adds	r3, #4
 801aab2:	445a      	add	r2, fp
 801aab4:	4419      	add	r1, r3
 801aab6:	f841 2c04 	str.w	r2, [r1, #-4]
 801aaba:	7b23      	ldrb	r3, [r4, #12]
 801aabc:	9300      	str	r3, [sp, #0]
 801aabe:	2300      	movs	r3, #0
 801aac0:	f7f7 fae0 	bl	8012084 <ucdr_init_buffer_origin_offset>
 801aac4:	2001      	movs	r0, #1
 801aac6:	81e5      	strh	r5, [r4, #14]
 801aac8:	e7a0      	b.n	801aa0c <uxr_prepare_reliable_buffer_to_write+0x210>
 801aaca:	4682      	mov	sl, r0
 801aacc:	e6cb      	b.n	801a866 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801aace:	f10d 0b20 	add.w	fp, sp, #32
 801aad2:	e747      	b.n	801a964 <uxr_prepare_reliable_buffer_to_write+0x168>
 801aad4:	0801a6d5 	.word	0x0801a6d5

0801aad8 <uxr_prepare_next_reliable_buffer_to_send>:
 801aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aada:	4604      	mov	r4, r0
 801aadc:	461d      	mov	r5, r3
 801aade:	460f      	mov	r7, r1
 801aae0:	8a00      	ldrh	r0, [r0, #16]
 801aae2:	2101      	movs	r1, #1
 801aae4:	4616      	mov	r6, r2
 801aae6:	f000 f8fb 	bl	801ace0 <uxr_seq_num_add>
 801aaea:	8028      	strh	r0, [r5, #0]
 801aaec:	8922      	ldrh	r2, [r4, #8]
 801aaee:	6863      	ldr	r3, [r4, #4]
 801aaf0:	fbb0 f1f2 	udiv	r1, r0, r2
 801aaf4:	fbb3 f3f2 	udiv	r3, r3, r2
 801aaf8:	fb02 0c11 	mls	ip, r2, r1, r0
 801aafc:	89e1      	ldrh	r1, [r4, #14]
 801aafe:	fa1f fc8c 	uxth.w	ip, ip
 801ab02:	fb0c fc03 	mul.w	ip, ip, r3
 801ab06:	6823      	ldr	r3, [r4, #0]
 801ab08:	f10c 0c04 	add.w	ip, ip, #4
 801ab0c:	4463      	add	r3, ip
 801ab0e:	603b      	str	r3, [r7, #0]
 801ab10:	6823      	ldr	r3, [r4, #0]
 801ab12:	449c      	add	ip, r3
 801ab14:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ab18:	6033      	str	r3, [r6, #0]
 801ab1a:	f000 f8e9 	bl	801acf0 <uxr_seq_num_cmp>
 801ab1e:	2800      	cmp	r0, #0
 801ab20:	dd01      	ble.n	801ab26 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ab22:	2000      	movs	r0, #0
 801ab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab26:	7b23      	ldrb	r3, [r4, #12]
 801ab28:	6832      	ldr	r2, [r6, #0]
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d9f9      	bls.n	801ab22 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ab2e:	8a61      	ldrh	r1, [r4, #18]
 801ab30:	8a20      	ldrh	r0, [r4, #16]
 801ab32:	f000 f8d9 	bl	801ace8 <uxr_seq_num_sub>
 801ab36:	8923      	ldrh	r3, [r4, #8]
 801ab38:	4283      	cmp	r3, r0
 801ab3a:	d0f2      	beq.n	801ab22 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ab3c:	8828      	ldrh	r0, [r5, #0]
 801ab3e:	89e3      	ldrh	r3, [r4, #14]
 801ab40:	8220      	strh	r0, [r4, #16]
 801ab42:	4298      	cmp	r0, r3
 801ab44:	d001      	beq.n	801ab4a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801ab46:	2001      	movs	r0, #1
 801ab48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab4a:	2101      	movs	r1, #1
 801ab4c:	f000 f8c8 	bl	801ace0 <uxr_seq_num_add>
 801ab50:	4603      	mov	r3, r0
 801ab52:	2001      	movs	r0, #1
 801ab54:	81e3      	strh	r3, [r4, #14]
 801ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ab58 <uxr_update_output_stream_heartbeat_timestamp>:
 801ab58:	b570      	push	{r4, r5, r6, lr}
 801ab5a:	8a01      	ldrh	r1, [r0, #16]
 801ab5c:	4604      	mov	r4, r0
 801ab5e:	8a40      	ldrh	r0, [r0, #18]
 801ab60:	4615      	mov	r5, r2
 801ab62:	461e      	mov	r6, r3
 801ab64:	f000 f8c4 	bl	801acf0 <uxr_seq_num_cmp>
 801ab68:	2800      	cmp	r0, #0
 801ab6a:	db07      	blt.n	801ab7c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ab6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ab70:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ab74:	2000      	movs	r0, #0
 801ab76:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ab7a:	bd70      	pop	{r4, r5, r6, pc}
 801ab7c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ab80:	b940      	cbnz	r0, 801ab94 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ab82:	2301      	movs	r3, #1
 801ab84:	f884 3020 	strb.w	r3, [r4, #32]
 801ab88:	3564      	adds	r5, #100	@ 0x64
 801ab8a:	f146 0600 	adc.w	r6, r6, #0
 801ab8e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ab92:	bd70      	pop	{r4, r5, r6, pc}
 801ab94:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ab98:	4295      	cmp	r5, r2
 801ab9a:	eb76 0303 	sbcs.w	r3, r6, r3
 801ab9e:	db04      	blt.n	801abaa <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801aba0:	1c43      	adds	r3, r0, #1
 801aba2:	2001      	movs	r0, #1
 801aba4:	f884 3020 	strb.w	r3, [r4, #32]
 801aba8:	e7ee      	b.n	801ab88 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801abaa:	2000      	movs	r0, #0
 801abac:	e7ec      	b.n	801ab88 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801abae:	bf00      	nop

0801abb0 <uxr_begin_output_nack_buffer_it>:
 801abb0:	8a40      	ldrh	r0, [r0, #18]
 801abb2:	4770      	bx	lr

0801abb4 <uxr_next_reliable_nack_buffer_to_send>:
 801abb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abb8:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801abbc:	b197      	cbz	r7, 801abe4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801abbe:	4680      	mov	r8, r0
 801abc0:	460d      	mov	r5, r1
 801abc2:	4616      	mov	r6, r2
 801abc4:	461c      	mov	r4, r3
 801abc6:	8818      	ldrh	r0, [r3, #0]
 801abc8:	2101      	movs	r1, #1
 801abca:	f000 f889 	bl	801ace0 <uxr_seq_num_add>
 801abce:	8020      	strh	r0, [r4, #0]
 801abd0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801abd4:	f000 f88c 	bl	801acf0 <uxr_seq_num_cmp>
 801abd8:	2800      	cmp	r0, #0
 801abda:	dd06      	ble.n	801abea <uxr_next_reliable_nack_buffer_to_send+0x36>
 801abdc:	2300      	movs	r3, #0
 801abde:	461f      	mov	r7, r3
 801abe0:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801abe4:	4638      	mov	r0, r7
 801abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abea:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801abee:	8820      	ldrh	r0, [r4, #0]
 801abf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801abf4:	fbb0 f3f2 	udiv	r3, r0, r2
 801abf8:	fbb1 fcf2 	udiv	ip, r1, r2
 801abfc:	fb02 0313 	mls	r3, r2, r3, r0
 801ac00:	b29b      	uxth	r3, r3
 801ac02:	fb03 fc0c 	mul.w	ip, r3, ip
 801ac06:	f8d8 3000 	ldr.w	r3, [r8]
 801ac0a:	f10c 0c04 	add.w	ip, ip, #4
 801ac0e:	4463      	add	r3, ip
 801ac10:	602b      	str	r3, [r5, #0]
 801ac12:	f8d8 3000 	ldr.w	r3, [r8]
 801ac16:	4463      	add	r3, ip
 801ac18:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ac1c:	6033      	str	r3, [r6, #0]
 801ac1e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ac22:	429a      	cmp	r2, r3
 801ac24:	d0d0      	beq.n	801abc8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ac26:	e7dd      	b.n	801abe4 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ac28 <uxr_process_acknack>:
 801ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac2a:	4604      	mov	r4, r0
 801ac2c:	460e      	mov	r6, r1
 801ac2e:	4610      	mov	r0, r2
 801ac30:	2101      	movs	r1, #1
 801ac32:	f000 f859 	bl	801ace8 <uxr_seq_num_sub>
 801ac36:	8a61      	ldrh	r1, [r4, #18]
 801ac38:	f000 f856 	bl	801ace8 <uxr_seq_num_sub>
 801ac3c:	b1c8      	cbz	r0, 801ac72 <uxr_process_acknack+0x4a>
 801ac3e:	4605      	mov	r5, r0
 801ac40:	2700      	movs	r7, #0
 801ac42:	2101      	movs	r1, #1
 801ac44:	8a60      	ldrh	r0, [r4, #18]
 801ac46:	f000 f84b 	bl	801ace0 <uxr_seq_num_add>
 801ac4a:	8923      	ldrh	r3, [r4, #8]
 801ac4c:	6862      	ldr	r2, [r4, #4]
 801ac4e:	3701      	adds	r7, #1
 801ac50:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ac54:	6821      	ldr	r1, [r4, #0]
 801ac56:	42bd      	cmp	r5, r7
 801ac58:	8260      	strh	r0, [r4, #18]
 801ac5a:	fbb0 fef3 	udiv	lr, r0, r3
 801ac5e:	fbb2 f2f3 	udiv	r2, r2, r3
 801ac62:	fb03 031e 	mls	r3, r3, lr, r0
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	fb02 f303 	mul.w	r3, r2, r3
 801ac6c:	f841 c003 	str.w	ip, [r1, r3]
 801ac70:	d1e7      	bne.n	801ac42 <uxr_process_acknack+0x1a>
 801ac72:	3e00      	subs	r6, #0
 801ac74:	f04f 0300 	mov.w	r3, #0
 801ac78:	bf18      	it	ne
 801ac7a:	2601      	movne	r6, #1
 801ac7c:	f884 3020 	strb.w	r3, [r4, #32]
 801ac80:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac86:	bf00      	nop

0801ac88 <uxr_is_output_up_to_date>:
 801ac88:	8a01      	ldrh	r1, [r0, #16]
 801ac8a:	8a40      	ldrh	r0, [r0, #18]
 801ac8c:	b508      	push	{r3, lr}
 801ac8e:	f000 f82f 	bl	801acf0 <uxr_seq_num_cmp>
 801ac92:	fab0 f080 	clz	r0, r0
 801ac96:	0940      	lsrs	r0, r0, #5
 801ac98:	bd08      	pop	{r3, pc}
 801ac9a:	bf00      	nop

0801ac9c <get_available_free_slots>:
 801ac9c:	8901      	ldrh	r1, [r0, #8]
 801ac9e:	b1e1      	cbz	r1, 801acda <get_available_free_slots+0x3e>
 801aca0:	6843      	ldr	r3, [r0, #4]
 801aca2:	f04f 0c00 	mov.w	ip, #0
 801aca6:	b530      	push	{r4, r5, lr}
 801aca8:	fbb3 fef1 	udiv	lr, r3, r1
 801acac:	6805      	ldr	r5, [r0, #0]
 801acae:	4662      	mov	r2, ip
 801acb0:	7b04      	ldrb	r4, [r0, #12]
 801acb2:	4660      	mov	r0, ip
 801acb4:	f10c 0c01 	add.w	ip, ip, #1
 801acb8:	fbb2 f3f1 	udiv	r3, r2, r1
 801acbc:	fb01 2313 	mls	r3, r1, r3, r2
 801acc0:	fa1f f28c 	uxth.w	r2, ip
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	fb0e f303 	mul.w	r3, lr, r3
 801acca:	58eb      	ldr	r3, [r5, r3]
 801accc:	429c      	cmp	r4, r3
 801acce:	d101      	bne.n	801acd4 <get_available_free_slots+0x38>
 801acd0:	3001      	adds	r0, #1
 801acd2:	b280      	uxth	r0, r0
 801acd4:	428a      	cmp	r2, r1
 801acd6:	d3ed      	bcc.n	801acb4 <get_available_free_slots+0x18>
 801acd8:	bd30      	pop	{r4, r5, pc}
 801acda:	4608      	mov	r0, r1
 801acdc:	4770      	bx	lr
 801acde:	bf00      	nop

0801ace0 <uxr_seq_num_add>:
 801ace0:	4408      	add	r0, r1
 801ace2:	b280      	uxth	r0, r0
 801ace4:	4770      	bx	lr
 801ace6:	bf00      	nop

0801ace8 <uxr_seq_num_sub>:
 801ace8:	1a40      	subs	r0, r0, r1
 801acea:	b280      	uxth	r0, r0
 801acec:	4770      	bx	lr
 801acee:	bf00      	nop

0801acf0 <uxr_seq_num_cmp>:
 801acf0:	4288      	cmp	r0, r1
 801acf2:	d011      	beq.n	801ad18 <uxr_seq_num_cmp+0x28>
 801acf4:	d309      	bcc.n	801ad0a <uxr_seq_num_cmp+0x1a>
 801acf6:	4288      	cmp	r0, r1
 801acf8:	d910      	bls.n	801ad1c <uxr_seq_num_cmp+0x2c>
 801acfa:	1a40      	subs	r0, r0, r1
 801acfc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801ad00:	bfd4      	ite	le
 801ad02:	2001      	movle	r0, #1
 801ad04:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801ad08:	4770      	bx	lr
 801ad0a:	1a0b      	subs	r3, r1, r0
 801ad0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ad10:	daf1      	bge.n	801acf6 <uxr_seq_num_cmp+0x6>
 801ad12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad16:	4770      	bx	lr
 801ad18:	2000      	movs	r0, #0
 801ad1a:	4770      	bx	lr
 801ad1c:	2001      	movs	r0, #1
 801ad1e:	4770      	bx	lr

0801ad20 <rcl_get_default_domain_id>:
 801ad20:	b530      	push	{r4, r5, lr}
 801ad22:	2300      	movs	r3, #0
 801ad24:	b083      	sub	sp, #12
 801ad26:	9300      	str	r3, [sp, #0]
 801ad28:	b1d0      	cbz	r0, 801ad60 <rcl_get_default_domain_id+0x40>
 801ad2a:	4604      	mov	r4, r0
 801ad2c:	4669      	mov	r1, sp
 801ad2e:	4815      	ldr	r0, [pc, #84]	@ (801ad84 <rcl_get_default_domain_id+0x64>)
 801ad30:	f7fd fd1a 	bl	8018768 <rcutils_get_env>
 801ad34:	4602      	mov	r2, r0
 801ad36:	b110      	cbz	r0, 801ad3e <rcl_get_default_domain_id+0x1e>
 801ad38:	2001      	movs	r0, #1
 801ad3a:	b003      	add	sp, #12
 801ad3c:	bd30      	pop	{r4, r5, pc}
 801ad3e:	9b00      	ldr	r3, [sp, #0]
 801ad40:	b18b      	cbz	r3, 801ad66 <rcl_get_default_domain_id+0x46>
 801ad42:	7818      	ldrb	r0, [r3, #0]
 801ad44:	2800      	cmp	r0, #0
 801ad46:	d0f8      	beq.n	801ad3a <rcl_get_default_domain_id+0x1a>
 801ad48:	a901      	add	r1, sp, #4
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	9201      	str	r2, [sp, #4]
 801ad4e:	f000 fe2d 	bl	801b9ac <strtoul>
 801ad52:	4605      	mov	r5, r0
 801ad54:	b150      	cbz	r0, 801ad6c <rcl_get_default_domain_id+0x4c>
 801ad56:	1c43      	adds	r3, r0, #1
 801ad58:	d00d      	beq.n	801ad76 <rcl_get_default_domain_id+0x56>
 801ad5a:	2000      	movs	r0, #0
 801ad5c:	6025      	str	r5, [r4, #0]
 801ad5e:	e7ec      	b.n	801ad3a <rcl_get_default_domain_id+0x1a>
 801ad60:	200b      	movs	r0, #11
 801ad62:	b003      	add	sp, #12
 801ad64:	bd30      	pop	{r4, r5, pc}
 801ad66:	4618      	mov	r0, r3
 801ad68:	b003      	add	sp, #12
 801ad6a:	bd30      	pop	{r4, r5, pc}
 801ad6c:	9b01      	ldr	r3, [sp, #4]
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d0f2      	beq.n	801ad5a <rcl_get_default_domain_id+0x3a>
 801ad74:	e7e0      	b.n	801ad38 <rcl_get_default_domain_id+0x18>
 801ad76:	f001 f953 	bl	801c020 <__errno>
 801ad7a:	6803      	ldr	r3, [r0, #0]
 801ad7c:	2b22      	cmp	r3, #34	@ 0x22
 801ad7e:	d1ec      	bne.n	801ad5a <rcl_get_default_domain_id+0x3a>
 801ad80:	e7da      	b.n	801ad38 <rcl_get_default_domain_id+0x18>
 801ad82:	bf00      	nop
 801ad84:	0801d928 	.word	0x0801d928

0801ad88 <rcl_expand_topic_name>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	b08d      	sub	sp, #52	@ 0x34
 801ad8e:	4698      	mov	r8, r3
 801ad90:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ad92:	9207      	str	r2, [sp, #28]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	bf18      	it	ne
 801ad98:	f1b8 0f00 	cmpne.w	r8, #0
 801ad9c:	bf0c      	ite	eq
 801ad9e:	2301      	moveq	r3, #1
 801ada0:	2300      	movne	r3, #0
 801ada2:	2a00      	cmp	r2, #0
 801ada4:	bf08      	it	eq
 801ada6:	f043 0301 	orreq.w	r3, r3, #1
 801adaa:	2900      	cmp	r1, #0
 801adac:	bf08      	it	eq
 801adae:	f043 0301 	orreq.w	r3, r3, #1
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d13d      	bne.n	801ae32 <rcl_expand_topic_name+0xaa>
 801adb6:	fab0 f280 	clz	r2, r0
 801adba:	4604      	mov	r4, r0
 801adbc:	0952      	lsrs	r2, r2, #5
 801adbe:	2800      	cmp	r0, #0
 801adc0:	d037      	beq.n	801ae32 <rcl_expand_topic_name+0xaa>
 801adc2:	460f      	mov	r7, r1
 801adc4:	a90b      	add	r1, sp, #44	@ 0x2c
 801adc6:	f000 fa51 	bl	801b26c <rcl_validate_topic_name>
 801adca:	4605      	mov	r5, r0
 801adcc:	bb68      	cbnz	r0, 801ae2a <rcl_expand_topic_name+0xa2>
 801adce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801add0:	2b00      	cmp	r3, #0
 801add2:	d137      	bne.n	801ae44 <rcl_expand_topic_name+0xbc>
 801add4:	4602      	mov	r2, r0
 801add6:	a90b      	add	r1, sp, #44	@ 0x2c
 801add8:	4638      	mov	r0, r7
 801adda:	f7fe f927 	bl	801902c <rmw_validate_node_name>
 801adde:	bb68      	cbnz	r0, 801ae3c <rcl_expand_topic_name+0xb4>
 801ade0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d133      	bne.n	801ae4e <rcl_expand_topic_name+0xc6>
 801ade6:	462a      	mov	r2, r5
 801ade8:	a90b      	add	r1, sp, #44	@ 0x2c
 801adea:	9807      	ldr	r0, [sp, #28]
 801adec:	f7fe f900 	bl	8018ff0 <rmw_validate_namespace>
 801adf0:	bb20      	cbnz	r0, 801ae3c <rcl_expand_topic_name+0xb4>
 801adf2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801adf4:	2d00      	cmp	r5, #0
 801adf6:	f040 80a2 	bne.w	801af3e <rcl_expand_topic_name+0x1b6>
 801adfa:	217b      	movs	r1, #123	@ 0x7b
 801adfc:	4620      	mov	r0, r4
 801adfe:	f001 f883 	bl	801bf08 <strchr>
 801ae02:	7823      	ldrb	r3, [r4, #0]
 801ae04:	4681      	mov	r9, r0
 801ae06:	bb20      	cbnz	r0, 801ae52 <rcl_expand_topic_name+0xca>
 801ae08:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae0a:	d122      	bne.n	801ae52 <rcl_expand_topic_name+0xca>
 801ae0c:	ab19      	add	r3, sp, #100	@ 0x64
 801ae0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ae12:	ab16      	add	r3, sp, #88	@ 0x58
 801ae14:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ae18:	4620      	mov	r0, r4
 801ae1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ae1c:	f7fd fe06 	bl	8018a2c <rcutils_strdup>
 801ae20:	2800      	cmp	r0, #0
 801ae22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ae24:	bf08      	it	eq
 801ae26:	250a      	moveq	r5, #10
 801ae28:	6018      	str	r0, [r3, #0]
 801ae2a:	4628      	mov	r0, r5
 801ae2c:	b00d      	add	sp, #52	@ 0x34
 801ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae32:	250b      	movs	r5, #11
 801ae34:	4628      	mov	r0, r5
 801ae36:	b00d      	add	sp, #52	@ 0x34
 801ae38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae3c:	f7fa fe4e 	bl	8015adc <rcl_convert_rmw_ret_to_rcl_ret>
 801ae40:	4605      	mov	r5, r0
 801ae42:	e7f2      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801ae44:	2567      	movs	r5, #103	@ 0x67
 801ae46:	4628      	mov	r0, r5
 801ae48:	b00d      	add	sp, #52	@ 0x34
 801ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae4e:	25c9      	movs	r5, #201	@ 0xc9
 801ae50:	e7eb      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801ae52:	2b7e      	cmp	r3, #126	@ 0x7e
 801ae54:	d075      	beq.n	801af42 <rcl_expand_topic_name+0x1ba>
 801ae56:	f1b9 0f00 	cmp.w	r9, #0
 801ae5a:	f000 80c2 	beq.w	801afe2 <rcl_expand_topic_name+0x25a>
 801ae5e:	2300      	movs	r3, #0
 801ae60:	46a2      	mov	sl, r4
 801ae62:	461e      	mov	r6, r3
 801ae64:	9508      	str	r5, [sp, #32]
 801ae66:	4655      	mov	r5, sl
 801ae68:	9409      	str	r4, [sp, #36]	@ 0x24
 801ae6a:	46b2      	mov	sl, r6
 801ae6c:	464c      	mov	r4, r9
 801ae6e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ae72:	2c00      	cmp	r4, #0
 801ae74:	f000 80ae 	beq.w	801afd4 <rcl_expand_topic_name+0x24c>
 801ae78:	217d      	movs	r1, #125	@ 0x7d
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	f001 f844 	bl	801bf08 <strchr>
 801ae80:	eba0 0904 	sub.w	r9, r0, r4
 801ae84:	4621      	mov	r1, r4
 801ae86:	4869      	ldr	r0, [pc, #420]	@ (801b02c <rcl_expand_topic_name+0x2a4>)
 801ae88:	f109 0601 	add.w	r6, r9, #1
 801ae8c:	4632      	mov	r2, r6
 801ae8e:	f001 f848 	bl	801bf22 <strncmp>
 801ae92:	2800      	cmp	r0, #0
 801ae94:	d051      	beq.n	801af3a <rcl_expand_topic_name+0x1b2>
 801ae96:	4632      	mov	r2, r6
 801ae98:	4621      	mov	r1, r4
 801ae9a:	4865      	ldr	r0, [pc, #404]	@ (801b030 <rcl_expand_topic_name+0x2a8>)
 801ae9c:	f001 f841 	bl	801bf22 <strncmp>
 801aea0:	b128      	cbz	r0, 801aeae <rcl_expand_topic_name+0x126>
 801aea2:	4632      	mov	r2, r6
 801aea4:	4621      	mov	r1, r4
 801aea6:	4863      	ldr	r0, [pc, #396]	@ (801b034 <rcl_expand_topic_name+0x2ac>)
 801aea8:	f001 f83b 	bl	801bf22 <strncmp>
 801aeac:	bb38      	cbnz	r0, 801aefe <rcl_expand_topic_name+0x176>
 801aeae:	46d9      	mov	r9, fp
 801aeb0:	ab18      	add	r3, sp, #96	@ 0x60
 801aeb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aeb6:	ab16      	add	r3, sp, #88	@ 0x58
 801aeb8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aebc:	4620      	mov	r0, r4
 801aebe:	4631      	mov	r1, r6
 801aec0:	cb0c      	ldmia	r3, {r2, r3}
 801aec2:	f7fd fdd5 	bl	8018a70 <rcutils_strndup>
 801aec6:	4604      	mov	r4, r0
 801aec8:	2800      	cmp	r0, #0
 801aeca:	f000 80a3 	beq.w	801b014 <rcl_expand_topic_name+0x28c>
 801aece:	464a      	mov	r2, r9
 801aed0:	4628      	mov	r0, r5
 801aed2:	ab16      	add	r3, sp, #88	@ 0x58
 801aed4:	4621      	mov	r1, r4
 801aed6:	f7fd fca9 	bl	801882c <rcutils_repl_str>
 801aeda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aedc:	4605      	mov	r5, r0
 801aede:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aee0:	4620      	mov	r0, r4
 801aee2:	4798      	blx	r3
 801aee4:	4650      	mov	r0, sl
 801aee6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aee8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aeea:	4798      	blx	r3
 801aeec:	2d00      	cmp	r5, #0
 801aeee:	d06c      	beq.n	801afca <rcl_expand_topic_name+0x242>
 801aef0:	217b      	movs	r1, #123	@ 0x7b
 801aef2:	4628      	mov	r0, r5
 801aef4:	f001 f808 	bl	801bf08 <strchr>
 801aef8:	46aa      	mov	sl, r5
 801aefa:	4604      	mov	r4, r0
 801aefc:	e7b9      	b.n	801ae72 <rcl_expand_topic_name+0xea>
 801aefe:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801af02:	1c61      	adds	r1, r4, #1
 801af04:	4640      	mov	r0, r8
 801af06:	f7fd fecb 	bl	8018ca0 <rcutils_string_map_getn>
 801af0a:	4681      	mov	r9, r0
 801af0c:	2800      	cmp	r0, #0
 801af0e:	d1cf      	bne.n	801aeb0 <rcl_expand_topic_name+0x128>
 801af10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801af12:	aa18      	add	r2, sp, #96	@ 0x60
 801af14:	2569      	movs	r5, #105	@ 0x69
 801af16:	6018      	str	r0, [r3, #0]
 801af18:	ab16      	add	r3, sp, #88	@ 0x58
 801af1a:	ca07      	ldmia	r2, {r0, r1, r2}
 801af1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801af20:	4631      	mov	r1, r6
 801af22:	4620      	mov	r0, r4
 801af24:	cb0c      	ldmia	r3, {r2, r3}
 801af26:	f7fd fda3 	bl	8018a70 <rcutils_strndup>
 801af2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801af2c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801af2e:	4798      	blx	r3
 801af30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801af32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801af34:	4650      	mov	r0, sl
 801af36:	4798      	blx	r3
 801af38:	e777      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801af3a:	46b9      	mov	r9, r7
 801af3c:	e7b8      	b.n	801aeb0 <rcl_expand_topic_name+0x128>
 801af3e:	25ca      	movs	r5, #202	@ 0xca
 801af40:	e773      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801af42:	9e07      	ldr	r6, [sp, #28]
 801af44:	4630      	mov	r0, r6
 801af46:	f7e5 f9d5 	bl	80002f4 <strlen>
 801af4a:	4a3b      	ldr	r2, [pc, #236]	@ (801b038 <rcl_expand_topic_name+0x2b0>)
 801af4c:	4b3b      	ldr	r3, [pc, #236]	@ (801b03c <rcl_expand_topic_name+0x2b4>)
 801af4e:	9603      	str	r6, [sp, #12]
 801af50:	2801      	cmp	r0, #1
 801af52:	bf18      	it	ne
 801af54:	4613      	movne	r3, r2
 801af56:	9704      	str	r7, [sp, #16]
 801af58:	9302      	str	r3, [sp, #8]
 801af5a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801af5c:	9300      	str	r3, [sp, #0]
 801af5e:	1c63      	adds	r3, r4, #1
 801af60:	9305      	str	r3, [sp, #20]
 801af62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801af66:	9301      	str	r3, [sp, #4]
 801af68:	ab16      	add	r3, sp, #88	@ 0x58
 801af6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801af6c:	f7fd fc24 	bl	80187b8 <rcutils_format_string_limit>
 801af70:	4606      	mov	r6, r0
 801af72:	b350      	cbz	r0, 801afca <rcl_expand_topic_name+0x242>
 801af74:	f1b9 0f00 	cmp.w	r9, #0
 801af78:	d005      	beq.n	801af86 <rcl_expand_topic_name+0x1fe>
 801af7a:	217b      	movs	r1, #123	@ 0x7b
 801af7c:	46b2      	mov	sl, r6
 801af7e:	f000 ffc3 	bl	801bf08 <strchr>
 801af82:	4681      	mov	r9, r0
 801af84:	e76e      	b.n	801ae64 <rcl_expand_topic_name+0xdc>
 801af86:	7833      	ldrb	r3, [r6, #0]
 801af88:	2b2f      	cmp	r3, #47	@ 0x2f
 801af8a:	d01b      	beq.n	801afc4 <rcl_expand_topic_name+0x23c>
 801af8c:	9c07      	ldr	r4, [sp, #28]
 801af8e:	4620      	mov	r0, r4
 801af90:	f7e5 f9b0 	bl	80002f4 <strlen>
 801af94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801af98:	4a29      	ldr	r2, [pc, #164]	@ (801b040 <rcl_expand_topic_name+0x2b8>)
 801af9a:	9301      	str	r3, [sp, #4]
 801af9c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801af9e:	9604      	str	r6, [sp, #16]
 801afa0:	9300      	str	r3, [sp, #0]
 801afa2:	4b28      	ldr	r3, [pc, #160]	@ (801b044 <rcl_expand_topic_name+0x2bc>)
 801afa4:	9403      	str	r4, [sp, #12]
 801afa6:	2801      	cmp	r0, #1
 801afa8:	bf18      	it	ne
 801afaa:	4613      	movne	r3, r2
 801afac:	9302      	str	r3, [sp, #8]
 801afae:	ab16      	add	r3, sp, #88	@ 0x58
 801afb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801afb2:	f7fd fc01 	bl	80187b8 <rcutils_format_string_limit>
 801afb6:	4603      	mov	r3, r0
 801afb8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801afba:	4630      	mov	r0, r6
 801afbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801afbe:	461e      	mov	r6, r3
 801afc0:	4790      	blx	r2
 801afc2:	b116      	cbz	r6, 801afca <rcl_expand_topic_name+0x242>
 801afc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801afc6:	601e      	str	r6, [r3, #0]
 801afc8:	e72f      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801afca:	2300      	movs	r3, #0
 801afcc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801afce:	250a      	movs	r5, #10
 801afd0:	6013      	str	r3, [r2, #0]
 801afd2:	e72a      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801afd4:	4653      	mov	r3, sl
 801afd6:	4656      	mov	r6, sl
 801afd8:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d1d2      	bne.n	801af86 <rcl_expand_topic_name+0x1fe>
 801afe0:	7823      	ldrb	r3, [r4, #0]
 801afe2:	2b2f      	cmp	r3, #47	@ 0x2f
 801afe4:	d01e      	beq.n	801b024 <rcl_expand_topic_name+0x29c>
 801afe6:	9e07      	ldr	r6, [sp, #28]
 801afe8:	4630      	mov	r0, r6
 801afea:	f7e5 f983 	bl	80002f4 <strlen>
 801afee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801aff0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aff4:	9603      	str	r6, [sp, #12]
 801aff6:	9404      	str	r4, [sp, #16]
 801aff8:	e9cd 2300 	strd	r2, r3, [sp]
 801affc:	4a10      	ldr	r2, [pc, #64]	@ (801b040 <rcl_expand_topic_name+0x2b8>)
 801affe:	4b11      	ldr	r3, [pc, #68]	@ (801b044 <rcl_expand_topic_name+0x2bc>)
 801b000:	2801      	cmp	r0, #1
 801b002:	bf18      	it	ne
 801b004:	4613      	movne	r3, r2
 801b006:	9302      	str	r3, [sp, #8]
 801b008:	ab16      	add	r3, sp, #88	@ 0x58
 801b00a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b00c:	f7fd fbd4 	bl	80187b8 <rcutils_format_string_limit>
 801b010:	4606      	mov	r6, r0
 801b012:	e7d6      	b.n	801afc2 <rcl_expand_topic_name+0x23a>
 801b014:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801b018:	4650      	mov	r0, sl
 801b01a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b01c:	6014      	str	r4, [r2, #0]
 801b01e:	250a      	movs	r5, #10
 801b020:	4798      	blx	r3
 801b022:	e702      	b.n	801ae2a <rcl_expand_topic_name+0xa2>
 801b024:	2300      	movs	r3, #0
 801b026:	461e      	mov	r6, r3
 801b028:	e7cc      	b.n	801afc4 <rcl_expand_topic_name+0x23c>
 801b02a:	bf00      	nop
 801b02c:	0801d940 	.word	0x0801d940
 801b030:	0801d948 	.word	0x0801d948
 801b034:	0801d950 	.word	0x0801d950
 801b038:	0801d938 	.word	0x0801d938
 801b03c:	0801cf9c 	.word	0x0801cf9c
 801b040:	0801cf64 	.word	0x0801cf64
 801b044:	0801cfac 	.word	0x0801cfac

0801b048 <rcl_get_default_topic_name_substitutions>:
 801b048:	2800      	cmp	r0, #0
 801b04a:	bf0c      	ite	eq
 801b04c:	200b      	moveq	r0, #11
 801b04e:	2000      	movne	r0, #0
 801b050:	4770      	bx	lr
 801b052:	bf00      	nop

0801b054 <rcl_get_zero_initialized_guard_condition>:
 801b054:	4a03      	ldr	r2, [pc, #12]	@ (801b064 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b056:	4603      	mov	r3, r0
 801b058:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b05c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b060:	4618      	mov	r0, r3
 801b062:	4770      	bx	lr
 801b064:	0801d95c 	.word	0x0801d95c

0801b068 <rcl_guard_condition_init>:
 801b068:	b082      	sub	sp, #8
 801b06a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b06c:	b087      	sub	sp, #28
 801b06e:	4604      	mov	r4, r0
 801b070:	460d      	mov	r5, r1
 801b072:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801b076:	f10d 0c04 	add.w	ip, sp, #4
 801b07a:	e9ce 2300 	strd	r2, r3, [lr]
 801b07e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b082:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b086:	f8de 3000 	ldr.w	r3, [lr]
 801b08a:	a801      	add	r0, sp, #4
 801b08c:	f8cc 3000 	str.w	r3, [ip]
 801b090:	f7f4 fa6e 	bl	800f570 <rcutils_allocator_is_valid>
 801b094:	b354      	cbz	r4, 801b0ec <rcl_guard_condition_init+0x84>
 801b096:	f080 0301 	eor.w	r3, r0, #1
 801b09a:	b2db      	uxtb	r3, r3
 801b09c:	bb33      	cbnz	r3, 801b0ec <rcl_guard_condition_init+0x84>
 801b09e:	6866      	ldr	r6, [r4, #4]
 801b0a0:	b9ee      	cbnz	r6, 801b0de <rcl_guard_condition_init+0x76>
 801b0a2:	b31d      	cbz	r5, 801b0ec <rcl_guard_condition_init+0x84>
 801b0a4:	4628      	mov	r0, r5
 801b0a6:	f7fa fd37 	bl	8015b18 <rcl_context_is_valid>
 801b0aa:	b308      	cbz	r0, 801b0f0 <rcl_guard_condition_init+0x88>
 801b0ac:	9b01      	ldr	r3, [sp, #4]
 801b0ae:	201c      	movs	r0, #28
 801b0b0:	9905      	ldr	r1, [sp, #20]
 801b0b2:	4798      	blx	r3
 801b0b4:	4607      	mov	r7, r0
 801b0b6:	6060      	str	r0, [r4, #4]
 801b0b8:	b310      	cbz	r0, 801b100 <rcl_guard_condition_init+0x98>
 801b0ba:	6828      	ldr	r0, [r5, #0]
 801b0bc:	3028      	adds	r0, #40	@ 0x28
 801b0be:	f000 f999 	bl	801b3f4 <rmw_create_guard_condition>
 801b0c2:	6038      	str	r0, [r7, #0]
 801b0c4:	6860      	ldr	r0, [r4, #4]
 801b0c6:	6807      	ldr	r7, [r0, #0]
 801b0c8:	b1a7      	cbz	r7, 801b0f4 <rcl_guard_condition_init+0x8c>
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	ac01      	add	r4, sp, #4
 801b0ce:	f100 0708 	add.w	r7, r0, #8
 801b0d2:	7103      	strb	r3, [r0, #4]
 801b0d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b0d8:	6823      	ldr	r3, [r4, #0]
 801b0da:	603b      	str	r3, [r7, #0]
 801b0dc:	e000      	b.n	801b0e0 <rcl_guard_condition_init+0x78>
 801b0de:	2664      	movs	r6, #100	@ 0x64
 801b0e0:	4630      	mov	r0, r6
 801b0e2:	b007      	add	sp, #28
 801b0e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b0e8:	b002      	add	sp, #8
 801b0ea:	4770      	bx	lr
 801b0ec:	260b      	movs	r6, #11
 801b0ee:	e7f7      	b.n	801b0e0 <rcl_guard_condition_init+0x78>
 801b0f0:	2665      	movs	r6, #101	@ 0x65
 801b0f2:	e7f5      	b.n	801b0e0 <rcl_guard_condition_init+0x78>
 801b0f4:	9b02      	ldr	r3, [sp, #8]
 801b0f6:	2601      	movs	r6, #1
 801b0f8:	9905      	ldr	r1, [sp, #20]
 801b0fa:	4798      	blx	r3
 801b0fc:	6067      	str	r7, [r4, #4]
 801b0fe:	e7ef      	b.n	801b0e0 <rcl_guard_condition_init+0x78>
 801b100:	260a      	movs	r6, #10
 801b102:	e7ed      	b.n	801b0e0 <rcl_guard_condition_init+0x78>

0801b104 <rcl_guard_condition_init_from_rmw>:
 801b104:	b082      	sub	sp, #8
 801b106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b10a:	b086      	sub	sp, #24
 801b10c:	4604      	mov	r4, r0
 801b10e:	460e      	mov	r6, r1
 801b110:	4615      	mov	r5, r2
 801b112:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b116:	f10d 0e04 	add.w	lr, sp, #4
 801b11a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b11e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b122:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b126:	f8dc 3000 	ldr.w	r3, [ip]
 801b12a:	a801      	add	r0, sp, #4
 801b12c:	f8ce 3000 	str.w	r3, [lr]
 801b130:	f7f4 fa1e 	bl	800f570 <rcutils_allocator_is_valid>
 801b134:	f080 0301 	eor.w	r3, r0, #1
 801b138:	b2db      	uxtb	r3, r3
 801b13a:	bb3b      	cbnz	r3, 801b18c <rcl_guard_condition_init_from_rmw+0x88>
 801b13c:	b334      	cbz	r4, 801b18c <rcl_guard_condition_init_from_rmw+0x88>
 801b13e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b142:	f1b8 0f00 	cmp.w	r8, #0
 801b146:	d11a      	bne.n	801b17e <rcl_guard_condition_init_from_rmw+0x7a>
 801b148:	b305      	cbz	r5, 801b18c <rcl_guard_condition_init_from_rmw+0x88>
 801b14a:	4628      	mov	r0, r5
 801b14c:	f7fa fce4 	bl	8015b18 <rcl_context_is_valid>
 801b150:	b1f0      	cbz	r0, 801b190 <rcl_guard_condition_init_from_rmw+0x8c>
 801b152:	9b01      	ldr	r3, [sp, #4]
 801b154:	201c      	movs	r0, #28
 801b156:	9905      	ldr	r1, [sp, #20]
 801b158:	4798      	blx	r3
 801b15a:	4607      	mov	r7, r0
 801b15c:	6060      	str	r0, [r4, #4]
 801b15e:	b320      	cbz	r0, 801b1aa <rcl_guard_condition_init_from_rmw+0xa6>
 801b160:	b1c6      	cbz	r6, 801b194 <rcl_guard_condition_init_from_rmw+0x90>
 801b162:	6006      	str	r6, [r0, #0]
 801b164:	f880 8004 	strb.w	r8, [r0, #4]
 801b168:	ac01      	add	r4, sp, #4
 801b16a:	f107 0c08 	add.w	ip, r7, #8
 801b16e:	2500      	movs	r5, #0
 801b170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b172:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b176:	6823      	ldr	r3, [r4, #0]
 801b178:	f8cc 3000 	str.w	r3, [ip]
 801b17c:	e000      	b.n	801b180 <rcl_guard_condition_init_from_rmw+0x7c>
 801b17e:	2564      	movs	r5, #100	@ 0x64
 801b180:	4628      	mov	r0, r5
 801b182:	b006      	add	sp, #24
 801b184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b188:	b002      	add	sp, #8
 801b18a:	4770      	bx	lr
 801b18c:	250b      	movs	r5, #11
 801b18e:	e7f7      	b.n	801b180 <rcl_guard_condition_init_from_rmw+0x7c>
 801b190:	2565      	movs	r5, #101	@ 0x65
 801b192:	e7f5      	b.n	801b180 <rcl_guard_condition_init_from_rmw+0x7c>
 801b194:	6828      	ldr	r0, [r5, #0]
 801b196:	3028      	adds	r0, #40	@ 0x28
 801b198:	f000 f92c 	bl	801b3f4 <rmw_create_guard_condition>
 801b19c:	6038      	str	r0, [r7, #0]
 801b19e:	6867      	ldr	r7, [r4, #4]
 801b1a0:	683e      	ldr	r6, [r7, #0]
 801b1a2:	b126      	cbz	r6, 801b1ae <rcl_guard_condition_init_from_rmw+0xaa>
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	713b      	strb	r3, [r7, #4]
 801b1a8:	e7de      	b.n	801b168 <rcl_guard_condition_init_from_rmw+0x64>
 801b1aa:	250a      	movs	r5, #10
 801b1ac:	e7e8      	b.n	801b180 <rcl_guard_condition_init_from_rmw+0x7c>
 801b1ae:	9b02      	ldr	r3, [sp, #8]
 801b1b0:	4638      	mov	r0, r7
 801b1b2:	9905      	ldr	r1, [sp, #20]
 801b1b4:	2501      	movs	r5, #1
 801b1b6:	4798      	blx	r3
 801b1b8:	6066      	str	r6, [r4, #4]
 801b1ba:	e7e1      	b.n	801b180 <rcl_guard_condition_init_from_rmw+0x7c>

0801b1bc <rcl_guard_condition_fini>:
 801b1bc:	b570      	push	{r4, r5, r6, lr}
 801b1be:	b082      	sub	sp, #8
 801b1c0:	b1f0      	cbz	r0, 801b200 <rcl_guard_condition_fini+0x44>
 801b1c2:	6843      	ldr	r3, [r0, #4]
 801b1c4:	4604      	mov	r4, r0
 801b1c6:	b163      	cbz	r3, 801b1e2 <rcl_guard_condition_fini+0x26>
 801b1c8:	6818      	ldr	r0, [r3, #0]
 801b1ca:	68de      	ldr	r6, [r3, #12]
 801b1cc:	6999      	ldr	r1, [r3, #24]
 801b1ce:	b160      	cbz	r0, 801b1ea <rcl_guard_condition_fini+0x2e>
 801b1d0:	791d      	ldrb	r5, [r3, #4]
 801b1d2:	b965      	cbnz	r5, 801b1ee <rcl_guard_condition_fini+0x32>
 801b1d4:	4618      	mov	r0, r3
 801b1d6:	47b0      	blx	r6
 801b1d8:	2300      	movs	r3, #0
 801b1da:	4628      	mov	r0, r5
 801b1dc:	6063      	str	r3, [r4, #4]
 801b1de:	b002      	add	sp, #8
 801b1e0:	bd70      	pop	{r4, r5, r6, pc}
 801b1e2:	461d      	mov	r5, r3
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	b002      	add	sp, #8
 801b1e8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ea:	4605      	mov	r5, r0
 801b1ec:	e7f2      	b.n	801b1d4 <rcl_guard_condition_fini+0x18>
 801b1ee:	9101      	str	r1, [sp, #4]
 801b1f0:	f000 f916 	bl	801b420 <rmw_destroy_guard_condition>
 801b1f4:	1e05      	subs	r5, r0, #0
 801b1f6:	6863      	ldr	r3, [r4, #4]
 801b1f8:	9901      	ldr	r1, [sp, #4]
 801b1fa:	bf18      	it	ne
 801b1fc:	2501      	movne	r5, #1
 801b1fe:	e7e9      	b.n	801b1d4 <rcl_guard_condition_fini+0x18>
 801b200:	250b      	movs	r5, #11
 801b202:	4628      	mov	r0, r5
 801b204:	b002      	add	sp, #8
 801b206:	bd70      	pop	{r4, r5, r6, pc}

0801b208 <rcl_guard_condition_get_default_options>:
 801b208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b20a:	b087      	sub	sp, #28
 801b20c:	4606      	mov	r6, r0
 801b20e:	4c0b      	ldr	r4, [pc, #44]	@ (801b23c <rcl_guard_condition_get_default_options+0x34>)
 801b210:	4668      	mov	r0, sp
 801b212:	f7f4 f99f 	bl	800f554 <rcutils_get_default_allocator>
 801b216:	46ee      	mov	lr, sp
 801b218:	46a4      	mov	ip, r4
 801b21a:	4625      	mov	r5, r4
 801b21c:	4634      	mov	r4, r6
 801b21e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b228:	f8de 7000 	ldr.w	r7, [lr]
 801b22c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b22e:	4630      	mov	r0, r6
 801b230:	f8cc 7000 	str.w	r7, [ip]
 801b234:	6027      	str	r7, [r4, #0]
 801b236:	b007      	add	sp, #28
 801b238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b23a:	bf00      	nop
 801b23c:	240130b0 	.word	0x240130b0

0801b240 <rcl_trigger_guard_condition>:
 801b240:	b148      	cbz	r0, 801b256 <rcl_trigger_guard_condition+0x16>
 801b242:	b508      	push	{r3, lr}
 801b244:	6843      	ldr	r3, [r0, #4]
 801b246:	b143      	cbz	r3, 801b25a <rcl_trigger_guard_condition+0x1a>
 801b248:	6818      	ldr	r0, [r3, #0]
 801b24a:	f000 f8fd 	bl	801b448 <rmw_trigger_guard_condition>
 801b24e:	3800      	subs	r0, #0
 801b250:	bf18      	it	ne
 801b252:	2001      	movne	r0, #1
 801b254:	bd08      	pop	{r3, pc}
 801b256:	200b      	movs	r0, #11
 801b258:	4770      	bx	lr
 801b25a:	200b      	movs	r0, #11
 801b25c:	bd08      	pop	{r3, pc}
 801b25e:	bf00      	nop

0801b260 <rcl_guard_condition_get_rmw_handle>:
 801b260:	b110      	cbz	r0, 801b268 <rcl_guard_condition_get_rmw_handle+0x8>
 801b262:	6840      	ldr	r0, [r0, #4]
 801b264:	b100      	cbz	r0, 801b268 <rcl_guard_condition_get_rmw_handle+0x8>
 801b266:	6800      	ldr	r0, [r0, #0]
 801b268:	4770      	bx	lr
 801b26a:	bf00      	nop

0801b26c <rcl_validate_topic_name>:
 801b26c:	2800      	cmp	r0, #0
 801b26e:	f000 8089 	beq.w	801b384 <rcl_validate_topic_name+0x118>
 801b272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b276:	460e      	mov	r6, r1
 801b278:	2900      	cmp	r1, #0
 801b27a:	f000 8085 	beq.w	801b388 <rcl_validate_topic_name+0x11c>
 801b27e:	4604      	mov	r4, r0
 801b280:	4617      	mov	r7, r2
 801b282:	f7e5 f837 	bl	80002f4 <strlen>
 801b286:	b1b0      	cbz	r0, 801b2b6 <rcl_validate_topic_name+0x4a>
 801b288:	f894 e000 	ldrb.w	lr, [r4]
 801b28c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801b3f0 <rcl_validate_topic_name+0x184>
 801b290:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b294:	f013 0304 	ands.w	r3, r3, #4
 801b298:	d139      	bne.n	801b30e <rcl_validate_topic_name+0xa2>
 801b29a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b29e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b2a2:	2a2f      	cmp	r2, #47	@ 0x2f
 801b2a4:	d10f      	bne.n	801b2c6 <rcl_validate_topic_name+0x5a>
 801b2a6:	2202      	movs	r2, #2
 801b2a8:	6032      	str	r2, [r6, #0]
 801b2aa:	b3a7      	cbz	r7, 801b316 <rcl_validate_topic_name+0xaa>
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	f8c7 8000 	str.w	r8, [r7]
 801b2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	6033      	str	r3, [r6, #0]
 801b2ba:	b367      	cbz	r7, 801b316 <rcl_validate_topic_name+0xaa>
 801b2bc:	2300      	movs	r3, #0
 801b2be:	4618      	mov	r0, r3
 801b2c0:	603b      	str	r3, [r7, #0]
 801b2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2c6:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801b2ca:	461d      	mov	r5, r3
 801b2cc:	4619      	mov	r1, r3
 801b2ce:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b2d2:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801b2d6:	f1b9 0f09 	cmp.w	r9, #9
 801b2da:	d91f      	bls.n	801b31c <rcl_validate_topic_name+0xb0>
 801b2dc:	f022 0920 	bic.w	r9, r2, #32
 801b2e0:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801b2e4:	f1b9 0f19 	cmp.w	r9, #25
 801b2e8:	d918      	bls.n	801b31c <rcl_validate_topic_name+0xb0>
 801b2ea:	2a5f      	cmp	r2, #95	@ 0x5f
 801b2ec:	d024      	beq.n	801b338 <rcl_validate_topic_name+0xcc>
 801b2ee:	2a2f      	cmp	r2, #47	@ 0x2f
 801b2f0:	d058      	beq.n	801b3a4 <rcl_validate_topic_name+0x138>
 801b2f2:	2a7e      	cmp	r2, #126	@ 0x7e
 801b2f4:	d04a      	beq.n	801b38c <rcl_validate_topic_name+0x120>
 801b2f6:	2a7b      	cmp	r2, #123	@ 0x7b
 801b2f8:	d05b      	beq.n	801b3b2 <rcl_validate_topic_name+0x146>
 801b2fa:	2a7d      	cmp	r2, #125	@ 0x7d
 801b2fc:	d169      	bne.n	801b3d2 <rcl_validate_topic_name+0x166>
 801b2fe:	2d00      	cmp	r5, #0
 801b300:	d15c      	bne.n	801b3bc <rcl_validate_topic_name+0x150>
 801b302:	2305      	movs	r3, #5
 801b304:	6033      	str	r3, [r6, #0]
 801b306:	b137      	cbz	r7, 801b316 <rcl_validate_topic_name+0xaa>
 801b308:	2000      	movs	r0, #0
 801b30a:	6039      	str	r1, [r7, #0]
 801b30c:	e7d9      	b.n	801b2c2 <rcl_validate_topic_name+0x56>
 801b30e:	2304      	movs	r3, #4
 801b310:	6033      	str	r3, [r6, #0]
 801b312:	2f00      	cmp	r7, #0
 801b314:	d1d2      	bne.n	801b2bc <rcl_validate_topic_name+0x50>
 801b316:	2000      	movs	r0, #0
 801b318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b31c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b320:	0752      	lsls	r2, r2, #29
 801b322:	d509      	bpl.n	801b338 <rcl_validate_topic_name+0xcc>
 801b324:	2900      	cmp	r1, #0
 801b326:	bf0c      	ite	eq
 801b328:	2200      	moveq	r2, #0
 801b32a:	f005 0201 	andne.w	r2, r5, #1
 801b32e:	b11a      	cbz	r2, 801b338 <rcl_validate_topic_name+0xcc>
 801b330:	1e4d      	subs	r5, r1, #1
 801b332:	429d      	cmp	r5, r3
 801b334:	d031      	beq.n	801b39a <rcl_validate_topic_name+0x12e>
 801b336:	4615      	mov	r5, r2
 801b338:	3101      	adds	r1, #1
 801b33a:	4288      	cmp	r0, r1
 801b33c:	d1c7      	bne.n	801b2ce <rcl_validate_topic_name+0x62>
 801b33e:	2d00      	cmp	r5, #0
 801b340:	d142      	bne.n	801b3c8 <rcl_validate_topic_name+0x15c>
 801b342:	4628      	mov	r0, r5
 801b344:	2301      	movs	r3, #1
 801b346:	e00c      	b.n	801b362 <rcl_validate_topic_name+0xf6>
 801b348:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b34c:	d101      	bne.n	801b352 <rcl_validate_topic_name+0xe6>
 801b34e:	2801      	cmp	r0, #1
 801b350:	d047      	beq.n	801b3e2 <rcl_validate_topic_name+0x176>
 801b352:	1c5a      	adds	r2, r3, #1
 801b354:	428b      	cmp	r3, r1
 801b356:	f100 0001 	add.w	r0, r0, #1
 801b35a:	f104 0401 	add.w	r4, r4, #1
 801b35e:	4613      	mov	r3, r2
 801b360:	d22e      	bcs.n	801b3c0 <rcl_validate_topic_name+0x154>
 801b362:	4580      	cmp	r8, r0
 801b364:	d0f5      	beq.n	801b352 <rcl_validate_topic_name+0xe6>
 801b366:	7822      	ldrb	r2, [r4, #0]
 801b368:	2a2f      	cmp	r2, #47	@ 0x2f
 801b36a:	d1ed      	bne.n	801b348 <rcl_validate_topic_name+0xdc>
 801b36c:	7862      	ldrb	r2, [r4, #1]
 801b36e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b372:	0752      	lsls	r2, r2, #29
 801b374:	d5ed      	bpl.n	801b352 <rcl_validate_topic_name+0xe6>
 801b376:	2204      	movs	r2, #4
 801b378:	6032      	str	r2, [r6, #0]
 801b37a:	2f00      	cmp	r7, #0
 801b37c:	d0cb      	beq.n	801b316 <rcl_validate_topic_name+0xaa>
 801b37e:	2000      	movs	r0, #0
 801b380:	603b      	str	r3, [r7, #0]
 801b382:	e79e      	b.n	801b2c2 <rcl_validate_topic_name+0x56>
 801b384:	200b      	movs	r0, #11
 801b386:	4770      	bx	lr
 801b388:	200b      	movs	r0, #11
 801b38a:	e79a      	b.n	801b2c2 <rcl_validate_topic_name+0x56>
 801b38c:	2900      	cmp	r1, #0
 801b38e:	d0d3      	beq.n	801b338 <rcl_validate_topic_name+0xcc>
 801b390:	2306      	movs	r3, #6
 801b392:	6033      	str	r3, [r6, #0]
 801b394:	2f00      	cmp	r7, #0
 801b396:	d1b7      	bne.n	801b308 <rcl_validate_topic_name+0x9c>
 801b398:	e7bd      	b.n	801b316 <rcl_validate_topic_name+0xaa>
 801b39a:	2309      	movs	r3, #9
 801b39c:	6033      	str	r3, [r6, #0]
 801b39e:	2f00      	cmp	r7, #0
 801b3a0:	d1b2      	bne.n	801b308 <rcl_validate_topic_name+0x9c>
 801b3a2:	e7b8      	b.n	801b316 <rcl_validate_topic_name+0xaa>
 801b3a4:	2d00      	cmp	r5, #0
 801b3a6:	d0c7      	beq.n	801b338 <rcl_validate_topic_name+0xcc>
 801b3a8:	2308      	movs	r3, #8
 801b3aa:	6033      	str	r3, [r6, #0]
 801b3ac:	2f00      	cmp	r7, #0
 801b3ae:	d1ab      	bne.n	801b308 <rcl_validate_topic_name+0x9c>
 801b3b0:	e7b1      	b.n	801b316 <rcl_validate_topic_name+0xaa>
 801b3b2:	2d00      	cmp	r5, #0
 801b3b4:	d1f8      	bne.n	801b3a8 <rcl_validate_topic_name+0x13c>
 801b3b6:	460b      	mov	r3, r1
 801b3b8:	2501      	movs	r5, #1
 801b3ba:	e7bd      	b.n	801b338 <rcl_validate_topic_name+0xcc>
 801b3bc:	2500      	movs	r5, #0
 801b3be:	e7bb      	b.n	801b338 <rcl_validate_topic_name+0xcc>
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	6033      	str	r3, [r6, #0]
 801b3c6:	e77c      	b.n	801b2c2 <rcl_validate_topic_name+0x56>
 801b3c8:	2205      	movs	r2, #5
 801b3ca:	6032      	str	r2, [r6, #0]
 801b3cc:	2f00      	cmp	r7, #0
 801b3ce:	d1d6      	bne.n	801b37e <rcl_validate_topic_name+0x112>
 801b3d0:	e7a1      	b.n	801b316 <rcl_validate_topic_name+0xaa>
 801b3d2:	2d00      	cmp	r5, #0
 801b3d4:	bf14      	ite	ne
 801b3d6:	2308      	movne	r3, #8
 801b3d8:	2303      	moveq	r3, #3
 801b3da:	6033      	str	r3, [r6, #0]
 801b3dc:	2f00      	cmp	r7, #0
 801b3de:	d193      	bne.n	801b308 <rcl_validate_topic_name+0x9c>
 801b3e0:	e799      	b.n	801b316 <rcl_validate_topic_name+0xaa>
 801b3e2:	2307      	movs	r3, #7
 801b3e4:	6033      	str	r3, [r6, #0]
 801b3e6:	2f00      	cmp	r7, #0
 801b3e8:	d095      	beq.n	801b316 <rcl_validate_topic_name+0xaa>
 801b3ea:	2301      	movs	r3, #1
 801b3ec:	e7c7      	b.n	801b37e <rcl_validate_topic_name+0x112>
 801b3ee:	bf00      	nop
 801b3f0:	0801dac6 	.word	0x0801dac6

0801b3f4 <rmw_create_guard_condition>:
 801b3f4:	b538      	push	{r3, r4, r5, lr}
 801b3f6:	4605      	mov	r5, r0
 801b3f8:	4808      	ldr	r0, [pc, #32]	@ (801b41c <rmw_create_guard_condition+0x28>)
 801b3fa:	f7fd ff5f 	bl	80192bc <get_memory>
 801b3fe:	4603      	mov	r3, r0
 801b400:	b148      	cbz	r0, 801b416 <rmw_create_guard_condition+0x22>
 801b402:	6884      	ldr	r4, [r0, #8]
 801b404:	2300      	movs	r3, #0
 801b406:	61e5      	str	r5, [r4, #28]
 801b408:	7423      	strb	r3, [r4, #16]
 801b40a:	f7fd ffbf 	bl	801938c <rmw_get_implementation_identifier>
 801b40e:	f104 0314 	add.w	r3, r4, #20
 801b412:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b416:	4618      	mov	r0, r3
 801b418:	bd38      	pop	{r3, r4, r5, pc}
 801b41a:	bf00      	nop
 801b41c:	24012f4c 	.word	0x24012f4c

0801b420 <rmw_destroy_guard_condition>:
 801b420:	b508      	push	{r3, lr}
 801b422:	4b08      	ldr	r3, [pc, #32]	@ (801b444 <rmw_destroy_guard_condition+0x24>)
 801b424:	6819      	ldr	r1, [r3, #0]
 801b426:	b911      	cbnz	r1, 801b42e <rmw_destroy_guard_condition+0xe>
 801b428:	e00a      	b.n	801b440 <rmw_destroy_guard_condition+0x20>
 801b42a:	6849      	ldr	r1, [r1, #4]
 801b42c:	b141      	cbz	r1, 801b440 <rmw_destroy_guard_condition+0x20>
 801b42e:	688b      	ldr	r3, [r1, #8]
 801b430:	3314      	adds	r3, #20
 801b432:	4298      	cmp	r0, r3
 801b434:	d1f9      	bne.n	801b42a <rmw_destroy_guard_condition+0xa>
 801b436:	4803      	ldr	r0, [pc, #12]	@ (801b444 <rmw_destroy_guard_condition+0x24>)
 801b438:	f7fd ff50 	bl	80192dc <put_memory>
 801b43c:	2000      	movs	r0, #0
 801b43e:	bd08      	pop	{r3, pc}
 801b440:	2001      	movs	r0, #1
 801b442:	bd08      	pop	{r3, pc}
 801b444:	24012f4c 	.word	0x24012f4c

0801b448 <rmw_trigger_guard_condition>:
 801b448:	b160      	cbz	r0, 801b464 <rmw_trigger_guard_condition+0x1c>
 801b44a:	b510      	push	{r4, lr}
 801b44c:	4604      	mov	r4, r0
 801b44e:	6800      	ldr	r0, [r0, #0]
 801b450:	f7f5 faae 	bl	80109b0 <is_uxrce_rmw_identifier_valid>
 801b454:	b908      	cbnz	r0, 801b45a <rmw_trigger_guard_condition+0x12>
 801b456:	2001      	movs	r0, #1
 801b458:	bd10      	pop	{r4, pc}
 801b45a:	6863      	ldr	r3, [r4, #4]
 801b45c:	2201      	movs	r2, #1
 801b45e:	2000      	movs	r0, #0
 801b460:	741a      	strb	r2, [r3, #16]
 801b462:	bd10      	pop	{r4, pc}
 801b464:	2001      	movs	r0, #1
 801b466:	4770      	bx	lr

0801b468 <rosidl_runtime_c__String__init>:
 801b468:	b510      	push	{r4, lr}
 801b46a:	4604      	mov	r4, r0
 801b46c:	b086      	sub	sp, #24
 801b46e:	b170      	cbz	r0, 801b48e <rosidl_runtime_c__String__init+0x26>
 801b470:	a801      	add	r0, sp, #4
 801b472:	f7f4 f86f 	bl	800f554 <rcutils_get_default_allocator>
 801b476:	9b01      	ldr	r3, [sp, #4]
 801b478:	9905      	ldr	r1, [sp, #20]
 801b47a:	2001      	movs	r0, #1
 801b47c:	4798      	blx	r3
 801b47e:	6020      	str	r0, [r4, #0]
 801b480:	b128      	cbz	r0, 801b48e <rosidl_runtime_c__String__init+0x26>
 801b482:	2100      	movs	r1, #0
 801b484:	2201      	movs	r2, #1
 801b486:	7001      	strb	r1, [r0, #0]
 801b488:	4610      	mov	r0, r2
 801b48a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801b48e:	b006      	add	sp, #24
 801b490:	bd10      	pop	{r4, pc}
 801b492:	bf00      	nop

0801b494 <rosidl_runtime_c__String__fini>:
 801b494:	b320      	cbz	r0, 801b4e0 <rosidl_runtime_c__String__fini+0x4c>
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	b510      	push	{r4, lr}
 801b49a:	4604      	mov	r4, r0
 801b49c:	b086      	sub	sp, #24
 801b49e:	b173      	cbz	r3, 801b4be <rosidl_runtime_c__String__fini+0x2a>
 801b4a0:	6883      	ldr	r3, [r0, #8]
 801b4a2:	b1f3      	cbz	r3, 801b4e2 <rosidl_runtime_c__String__fini+0x4e>
 801b4a4:	a801      	add	r0, sp, #4
 801b4a6:	f7f4 f855 	bl	800f554 <rcutils_get_default_allocator>
 801b4aa:	9b02      	ldr	r3, [sp, #8]
 801b4ac:	9905      	ldr	r1, [sp, #20]
 801b4ae:	6820      	ldr	r0, [r4, #0]
 801b4b0:	4798      	blx	r3
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	e9c4 3300 	strd	r3, r3, [r4]
 801b4b8:	60a3      	str	r3, [r4, #8]
 801b4ba:	b006      	add	sp, #24
 801b4bc:	bd10      	pop	{r4, pc}
 801b4be:	6843      	ldr	r3, [r0, #4]
 801b4c0:	b9db      	cbnz	r3, 801b4fa <rosidl_runtime_c__String__fini+0x66>
 801b4c2:	6883      	ldr	r3, [r0, #8]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d0f8      	beq.n	801b4ba <rosidl_runtime_c__String__fini+0x26>
 801b4c8:	4b12      	ldr	r3, [pc, #72]	@ (801b514 <rosidl_runtime_c__String__fini+0x80>)
 801b4ca:	2251      	movs	r2, #81	@ 0x51
 801b4cc:	2101      	movs	r1, #1
 801b4ce:	4812      	ldr	r0, [pc, #72]	@ (801b518 <rosidl_runtime_c__String__fini+0x84>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	68db      	ldr	r3, [r3, #12]
 801b4d4:	f000 fb82 	bl	801bbdc <fwrite>
 801b4d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b4dc:	f000 f83e 	bl	801b55c <exit>
 801b4e0:	4770      	bx	lr
 801b4e2:	4b0c      	ldr	r3, [pc, #48]	@ (801b514 <rosidl_runtime_c__String__fini+0x80>)
 801b4e4:	224c      	movs	r2, #76	@ 0x4c
 801b4e6:	2101      	movs	r1, #1
 801b4e8:	480c      	ldr	r0, [pc, #48]	@ (801b51c <rosidl_runtime_c__String__fini+0x88>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	68db      	ldr	r3, [r3, #12]
 801b4ee:	f000 fb75 	bl	801bbdc <fwrite>
 801b4f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b4f6:	f000 f831 	bl	801b55c <exit>
 801b4fa:	4b06      	ldr	r3, [pc, #24]	@ (801b514 <rosidl_runtime_c__String__fini+0x80>)
 801b4fc:	224e      	movs	r2, #78	@ 0x4e
 801b4fe:	2101      	movs	r1, #1
 801b500:	4807      	ldr	r0, [pc, #28]	@ (801b520 <rosidl_runtime_c__String__fini+0x8c>)
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	68db      	ldr	r3, [r3, #12]
 801b506:	f000 fb69 	bl	801bbdc <fwrite>
 801b50a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b50e:	f000 f825 	bl	801b55c <exit>
 801b512:	bf00      	nop
 801b514:	240002b0 	.word	0x240002b0
 801b518:	0801da04 	.word	0x0801da04
 801b51c:	0801d964 	.word	0x0801d964
 801b520:	0801d9b4 	.word	0x0801d9b4

0801b524 <calloc>:
 801b524:	4b02      	ldr	r3, [pc, #8]	@ (801b530 <calloc+0xc>)
 801b526:	460a      	mov	r2, r1
 801b528:	4601      	mov	r1, r0
 801b52a:	6818      	ldr	r0, [r3, #0]
 801b52c:	f000 b802 	b.w	801b534 <_calloc_r>
 801b530:	240002b0 	.word	0x240002b0

0801b534 <_calloc_r>:
 801b534:	b570      	push	{r4, r5, r6, lr}
 801b536:	fba1 5402 	umull	r5, r4, r1, r2
 801b53a:	b93c      	cbnz	r4, 801b54c <_calloc_r+0x18>
 801b53c:	4629      	mov	r1, r5
 801b53e:	f000 f899 	bl	801b674 <_malloc_r>
 801b542:	4606      	mov	r6, r0
 801b544:	b928      	cbnz	r0, 801b552 <_calloc_r+0x1e>
 801b546:	2600      	movs	r6, #0
 801b548:	4630      	mov	r0, r6
 801b54a:	bd70      	pop	{r4, r5, r6, pc}
 801b54c:	220c      	movs	r2, #12
 801b54e:	6002      	str	r2, [r0, #0]
 801b550:	e7f9      	b.n	801b546 <_calloc_r+0x12>
 801b552:	462a      	mov	r2, r5
 801b554:	4621      	mov	r1, r4
 801b556:	f000 fccf 	bl	801bef8 <memset>
 801b55a:	e7f5      	b.n	801b548 <_calloc_r+0x14>

0801b55c <exit>:
 801b55c:	b508      	push	{r3, lr}
 801b55e:	4b06      	ldr	r3, [pc, #24]	@ (801b578 <exit+0x1c>)
 801b560:	4604      	mov	r4, r0
 801b562:	b113      	cbz	r3, 801b56a <exit+0xe>
 801b564:	2100      	movs	r1, #0
 801b566:	f3af 8000 	nop.w
 801b56a:	4b04      	ldr	r3, [pc, #16]	@ (801b57c <exit+0x20>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	b103      	cbz	r3, 801b572 <exit+0x16>
 801b570:	4798      	blx	r3
 801b572:	4620      	mov	r0, r4
 801b574:	f7e6 fdb6 	bl	80020e4 <_exit>
 801b578:	00000000 	.word	0x00000000
 801b57c:	24013204 	.word	0x24013204

0801b580 <getenv>:
 801b580:	b507      	push	{r0, r1, r2, lr}
 801b582:	4b04      	ldr	r3, [pc, #16]	@ (801b594 <getenv+0x14>)
 801b584:	4601      	mov	r1, r0
 801b586:	aa01      	add	r2, sp, #4
 801b588:	6818      	ldr	r0, [r3, #0]
 801b58a:	f000 f805 	bl	801b598 <_findenv_r>
 801b58e:	b003      	add	sp, #12
 801b590:	f85d fb04 	ldr.w	pc, [sp], #4
 801b594:	240002b0 	.word	0x240002b0

0801b598 <_findenv_r>:
 801b598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b59c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b60c <_findenv_r+0x74>
 801b5a0:	4606      	mov	r6, r0
 801b5a2:	4689      	mov	r9, r1
 801b5a4:	4617      	mov	r7, r2
 801b5a6:	f000 fd9d 	bl	801c0e4 <__env_lock>
 801b5aa:	f8da 4000 	ldr.w	r4, [sl]
 801b5ae:	b134      	cbz	r4, 801b5be <_findenv_r+0x26>
 801b5b0:	464b      	mov	r3, r9
 801b5b2:	4698      	mov	r8, r3
 801b5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5b8:	b13a      	cbz	r2, 801b5ca <_findenv_r+0x32>
 801b5ba:	2a3d      	cmp	r2, #61	@ 0x3d
 801b5bc:	d1f9      	bne.n	801b5b2 <_findenv_r+0x1a>
 801b5be:	4630      	mov	r0, r6
 801b5c0:	f000 fd96 	bl	801c0f0 <__env_unlock>
 801b5c4:	2000      	movs	r0, #0
 801b5c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ca:	eba8 0809 	sub.w	r8, r8, r9
 801b5ce:	46a3      	mov	fp, r4
 801b5d0:	f854 0b04 	ldr.w	r0, [r4], #4
 801b5d4:	2800      	cmp	r0, #0
 801b5d6:	d0f2      	beq.n	801b5be <_findenv_r+0x26>
 801b5d8:	4642      	mov	r2, r8
 801b5da:	4649      	mov	r1, r9
 801b5dc:	f000 fca1 	bl	801bf22 <strncmp>
 801b5e0:	2800      	cmp	r0, #0
 801b5e2:	d1f4      	bne.n	801b5ce <_findenv_r+0x36>
 801b5e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b5e8:	eb03 0508 	add.w	r5, r3, r8
 801b5ec:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b5f0:	2b3d      	cmp	r3, #61	@ 0x3d
 801b5f2:	d1ec      	bne.n	801b5ce <_findenv_r+0x36>
 801b5f4:	f8da 3000 	ldr.w	r3, [sl]
 801b5f8:	ebab 0303 	sub.w	r3, fp, r3
 801b5fc:	109b      	asrs	r3, r3, #2
 801b5fe:	4630      	mov	r0, r6
 801b600:	603b      	str	r3, [r7, #0]
 801b602:	f000 fd75 	bl	801c0f0 <__env_unlock>
 801b606:	1c68      	adds	r0, r5, #1
 801b608:	e7dd      	b.n	801b5c6 <_findenv_r+0x2e>
 801b60a:	bf00      	nop
 801b60c:	24000024 	.word	0x24000024

0801b610 <malloc>:
 801b610:	4b02      	ldr	r3, [pc, #8]	@ (801b61c <malloc+0xc>)
 801b612:	4601      	mov	r1, r0
 801b614:	6818      	ldr	r0, [r3, #0]
 801b616:	f000 b82d 	b.w	801b674 <_malloc_r>
 801b61a:	bf00      	nop
 801b61c:	240002b0 	.word	0x240002b0

0801b620 <free>:
 801b620:	4b02      	ldr	r3, [pc, #8]	@ (801b62c <free+0xc>)
 801b622:	4601      	mov	r1, r0
 801b624:	6818      	ldr	r0, [r3, #0]
 801b626:	f000 bd69 	b.w	801c0fc <_free_r>
 801b62a:	bf00      	nop
 801b62c:	240002b0 	.word	0x240002b0

0801b630 <sbrk_aligned>:
 801b630:	b570      	push	{r4, r5, r6, lr}
 801b632:	4e0f      	ldr	r6, [pc, #60]	@ (801b670 <sbrk_aligned+0x40>)
 801b634:	460c      	mov	r4, r1
 801b636:	6831      	ldr	r1, [r6, #0]
 801b638:	4605      	mov	r5, r0
 801b63a:	b911      	cbnz	r1, 801b642 <sbrk_aligned+0x12>
 801b63c:	f000 fcce 	bl	801bfdc <_sbrk_r>
 801b640:	6030      	str	r0, [r6, #0]
 801b642:	4621      	mov	r1, r4
 801b644:	4628      	mov	r0, r5
 801b646:	f000 fcc9 	bl	801bfdc <_sbrk_r>
 801b64a:	1c43      	adds	r3, r0, #1
 801b64c:	d103      	bne.n	801b656 <sbrk_aligned+0x26>
 801b64e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b652:	4620      	mov	r0, r4
 801b654:	bd70      	pop	{r4, r5, r6, pc}
 801b656:	1cc4      	adds	r4, r0, #3
 801b658:	f024 0403 	bic.w	r4, r4, #3
 801b65c:	42a0      	cmp	r0, r4
 801b65e:	d0f8      	beq.n	801b652 <sbrk_aligned+0x22>
 801b660:	1a21      	subs	r1, r4, r0
 801b662:	4628      	mov	r0, r5
 801b664:	f000 fcba 	bl	801bfdc <_sbrk_r>
 801b668:	3001      	adds	r0, #1
 801b66a:	d1f2      	bne.n	801b652 <sbrk_aligned+0x22>
 801b66c:	e7ef      	b.n	801b64e <sbrk_aligned+0x1e>
 801b66e:	bf00      	nop
 801b670:	240130c4 	.word	0x240130c4

0801b674 <_malloc_r>:
 801b674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b678:	1ccd      	adds	r5, r1, #3
 801b67a:	f025 0503 	bic.w	r5, r5, #3
 801b67e:	3508      	adds	r5, #8
 801b680:	2d0c      	cmp	r5, #12
 801b682:	bf38      	it	cc
 801b684:	250c      	movcc	r5, #12
 801b686:	2d00      	cmp	r5, #0
 801b688:	4606      	mov	r6, r0
 801b68a:	db01      	blt.n	801b690 <_malloc_r+0x1c>
 801b68c:	42a9      	cmp	r1, r5
 801b68e:	d904      	bls.n	801b69a <_malloc_r+0x26>
 801b690:	230c      	movs	r3, #12
 801b692:	6033      	str	r3, [r6, #0]
 801b694:	2000      	movs	r0, #0
 801b696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b69a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b770 <_malloc_r+0xfc>
 801b69e:	f000 f869 	bl	801b774 <__malloc_lock>
 801b6a2:	f8d8 3000 	ldr.w	r3, [r8]
 801b6a6:	461c      	mov	r4, r3
 801b6a8:	bb44      	cbnz	r4, 801b6fc <_malloc_r+0x88>
 801b6aa:	4629      	mov	r1, r5
 801b6ac:	4630      	mov	r0, r6
 801b6ae:	f7ff ffbf 	bl	801b630 <sbrk_aligned>
 801b6b2:	1c43      	adds	r3, r0, #1
 801b6b4:	4604      	mov	r4, r0
 801b6b6:	d158      	bne.n	801b76a <_malloc_r+0xf6>
 801b6b8:	f8d8 4000 	ldr.w	r4, [r8]
 801b6bc:	4627      	mov	r7, r4
 801b6be:	2f00      	cmp	r7, #0
 801b6c0:	d143      	bne.n	801b74a <_malloc_r+0xd6>
 801b6c2:	2c00      	cmp	r4, #0
 801b6c4:	d04b      	beq.n	801b75e <_malloc_r+0xea>
 801b6c6:	6823      	ldr	r3, [r4, #0]
 801b6c8:	4639      	mov	r1, r7
 801b6ca:	4630      	mov	r0, r6
 801b6cc:	eb04 0903 	add.w	r9, r4, r3
 801b6d0:	f000 fc84 	bl	801bfdc <_sbrk_r>
 801b6d4:	4581      	cmp	r9, r0
 801b6d6:	d142      	bne.n	801b75e <_malloc_r+0xea>
 801b6d8:	6821      	ldr	r1, [r4, #0]
 801b6da:	1a6d      	subs	r5, r5, r1
 801b6dc:	4629      	mov	r1, r5
 801b6de:	4630      	mov	r0, r6
 801b6e0:	f7ff ffa6 	bl	801b630 <sbrk_aligned>
 801b6e4:	3001      	adds	r0, #1
 801b6e6:	d03a      	beq.n	801b75e <_malloc_r+0xea>
 801b6e8:	6823      	ldr	r3, [r4, #0]
 801b6ea:	442b      	add	r3, r5
 801b6ec:	6023      	str	r3, [r4, #0]
 801b6ee:	f8d8 3000 	ldr.w	r3, [r8]
 801b6f2:	685a      	ldr	r2, [r3, #4]
 801b6f4:	bb62      	cbnz	r2, 801b750 <_malloc_r+0xdc>
 801b6f6:	f8c8 7000 	str.w	r7, [r8]
 801b6fa:	e00f      	b.n	801b71c <_malloc_r+0xa8>
 801b6fc:	6822      	ldr	r2, [r4, #0]
 801b6fe:	1b52      	subs	r2, r2, r5
 801b700:	d420      	bmi.n	801b744 <_malloc_r+0xd0>
 801b702:	2a0b      	cmp	r2, #11
 801b704:	d917      	bls.n	801b736 <_malloc_r+0xc2>
 801b706:	1961      	adds	r1, r4, r5
 801b708:	42a3      	cmp	r3, r4
 801b70a:	6025      	str	r5, [r4, #0]
 801b70c:	bf18      	it	ne
 801b70e:	6059      	strne	r1, [r3, #4]
 801b710:	6863      	ldr	r3, [r4, #4]
 801b712:	bf08      	it	eq
 801b714:	f8c8 1000 	streq.w	r1, [r8]
 801b718:	5162      	str	r2, [r4, r5]
 801b71a:	604b      	str	r3, [r1, #4]
 801b71c:	4630      	mov	r0, r6
 801b71e:	f000 f82f 	bl	801b780 <__malloc_unlock>
 801b722:	f104 000b 	add.w	r0, r4, #11
 801b726:	1d23      	adds	r3, r4, #4
 801b728:	f020 0007 	bic.w	r0, r0, #7
 801b72c:	1ac2      	subs	r2, r0, r3
 801b72e:	bf1c      	itt	ne
 801b730:	1a1b      	subne	r3, r3, r0
 801b732:	50a3      	strne	r3, [r4, r2]
 801b734:	e7af      	b.n	801b696 <_malloc_r+0x22>
 801b736:	6862      	ldr	r2, [r4, #4]
 801b738:	42a3      	cmp	r3, r4
 801b73a:	bf0c      	ite	eq
 801b73c:	f8c8 2000 	streq.w	r2, [r8]
 801b740:	605a      	strne	r2, [r3, #4]
 801b742:	e7eb      	b.n	801b71c <_malloc_r+0xa8>
 801b744:	4623      	mov	r3, r4
 801b746:	6864      	ldr	r4, [r4, #4]
 801b748:	e7ae      	b.n	801b6a8 <_malloc_r+0x34>
 801b74a:	463c      	mov	r4, r7
 801b74c:	687f      	ldr	r7, [r7, #4]
 801b74e:	e7b6      	b.n	801b6be <_malloc_r+0x4a>
 801b750:	461a      	mov	r2, r3
 801b752:	685b      	ldr	r3, [r3, #4]
 801b754:	42a3      	cmp	r3, r4
 801b756:	d1fb      	bne.n	801b750 <_malloc_r+0xdc>
 801b758:	2300      	movs	r3, #0
 801b75a:	6053      	str	r3, [r2, #4]
 801b75c:	e7de      	b.n	801b71c <_malloc_r+0xa8>
 801b75e:	230c      	movs	r3, #12
 801b760:	6033      	str	r3, [r6, #0]
 801b762:	4630      	mov	r0, r6
 801b764:	f000 f80c 	bl	801b780 <__malloc_unlock>
 801b768:	e794      	b.n	801b694 <_malloc_r+0x20>
 801b76a:	6005      	str	r5, [r0, #0]
 801b76c:	e7d6      	b.n	801b71c <_malloc_r+0xa8>
 801b76e:	bf00      	nop
 801b770:	240130c8 	.word	0x240130c8

0801b774 <__malloc_lock>:
 801b774:	4801      	ldr	r0, [pc, #4]	@ (801b77c <__malloc_lock+0x8>)
 801b776:	f000 bc7e 	b.w	801c076 <__retarget_lock_acquire_recursive>
 801b77a:	bf00      	nop
 801b77c:	2401320d 	.word	0x2401320d

0801b780 <__malloc_unlock>:
 801b780:	4801      	ldr	r0, [pc, #4]	@ (801b788 <__malloc_unlock+0x8>)
 801b782:	f000 bc79 	b.w	801c078 <__retarget_lock_release_recursive>
 801b786:	bf00      	nop
 801b788:	2401320d 	.word	0x2401320d

0801b78c <srand>:
 801b78c:	b538      	push	{r3, r4, r5, lr}
 801b78e:	4b10      	ldr	r3, [pc, #64]	@ (801b7d0 <srand+0x44>)
 801b790:	681d      	ldr	r5, [r3, #0]
 801b792:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b794:	4604      	mov	r4, r0
 801b796:	b9b3      	cbnz	r3, 801b7c6 <srand+0x3a>
 801b798:	2018      	movs	r0, #24
 801b79a:	f7ff ff39 	bl	801b610 <malloc>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	6328      	str	r0, [r5, #48]	@ 0x30
 801b7a2:	b920      	cbnz	r0, 801b7ae <srand+0x22>
 801b7a4:	4b0b      	ldr	r3, [pc, #44]	@ (801b7d4 <srand+0x48>)
 801b7a6:	480c      	ldr	r0, [pc, #48]	@ (801b7d8 <srand+0x4c>)
 801b7a8:	2146      	movs	r1, #70	@ 0x46
 801b7aa:	f000 fc7d 	bl	801c0a8 <__assert_func>
 801b7ae:	490b      	ldr	r1, [pc, #44]	@ (801b7dc <srand+0x50>)
 801b7b0:	4b0b      	ldr	r3, [pc, #44]	@ (801b7e0 <srand+0x54>)
 801b7b2:	e9c0 1300 	strd	r1, r3, [r0]
 801b7b6:	4b0b      	ldr	r3, [pc, #44]	@ (801b7e4 <srand+0x58>)
 801b7b8:	6083      	str	r3, [r0, #8]
 801b7ba:	230b      	movs	r3, #11
 801b7bc:	8183      	strh	r3, [r0, #12]
 801b7be:	2100      	movs	r1, #0
 801b7c0:	2001      	movs	r0, #1
 801b7c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b7c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	611c      	str	r4, [r3, #16]
 801b7cc:	615a      	str	r2, [r3, #20]
 801b7ce:	bd38      	pop	{r3, r4, r5, pc}
 801b7d0:	240002b0 	.word	0x240002b0
 801b7d4:	0801da56 	.word	0x0801da56
 801b7d8:	0801da6d 	.word	0x0801da6d
 801b7dc:	abcd330e 	.word	0xabcd330e
 801b7e0:	e66d1234 	.word	0xe66d1234
 801b7e4:	0005deec 	.word	0x0005deec

0801b7e8 <rand>:
 801b7e8:	4b16      	ldr	r3, [pc, #88]	@ (801b844 <rand+0x5c>)
 801b7ea:	b510      	push	{r4, lr}
 801b7ec:	681c      	ldr	r4, [r3, #0]
 801b7ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b7f0:	b9b3      	cbnz	r3, 801b820 <rand+0x38>
 801b7f2:	2018      	movs	r0, #24
 801b7f4:	f7ff ff0c 	bl	801b610 <malloc>
 801b7f8:	4602      	mov	r2, r0
 801b7fa:	6320      	str	r0, [r4, #48]	@ 0x30
 801b7fc:	b920      	cbnz	r0, 801b808 <rand+0x20>
 801b7fe:	4b12      	ldr	r3, [pc, #72]	@ (801b848 <rand+0x60>)
 801b800:	4812      	ldr	r0, [pc, #72]	@ (801b84c <rand+0x64>)
 801b802:	2152      	movs	r1, #82	@ 0x52
 801b804:	f000 fc50 	bl	801c0a8 <__assert_func>
 801b808:	4911      	ldr	r1, [pc, #68]	@ (801b850 <rand+0x68>)
 801b80a:	4b12      	ldr	r3, [pc, #72]	@ (801b854 <rand+0x6c>)
 801b80c:	e9c0 1300 	strd	r1, r3, [r0]
 801b810:	4b11      	ldr	r3, [pc, #68]	@ (801b858 <rand+0x70>)
 801b812:	6083      	str	r3, [r0, #8]
 801b814:	230b      	movs	r3, #11
 801b816:	8183      	strh	r3, [r0, #12]
 801b818:	2100      	movs	r1, #0
 801b81a:	2001      	movs	r0, #1
 801b81c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b820:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b822:	480e      	ldr	r0, [pc, #56]	@ (801b85c <rand+0x74>)
 801b824:	690b      	ldr	r3, [r1, #16]
 801b826:	694c      	ldr	r4, [r1, #20]
 801b828:	4a0d      	ldr	r2, [pc, #52]	@ (801b860 <rand+0x78>)
 801b82a:	4358      	muls	r0, r3
 801b82c:	fb02 0004 	mla	r0, r2, r4, r0
 801b830:	fba3 3202 	umull	r3, r2, r3, r2
 801b834:	3301      	adds	r3, #1
 801b836:	eb40 0002 	adc.w	r0, r0, r2
 801b83a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b83e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b842:	bd10      	pop	{r4, pc}
 801b844:	240002b0 	.word	0x240002b0
 801b848:	0801da56 	.word	0x0801da56
 801b84c:	0801da6d 	.word	0x0801da6d
 801b850:	abcd330e 	.word	0xabcd330e
 801b854:	e66d1234 	.word	0xe66d1234
 801b858:	0005deec 	.word	0x0005deec
 801b85c:	5851f42d 	.word	0x5851f42d
 801b860:	4c957f2d 	.word	0x4c957f2d

0801b864 <realloc>:
 801b864:	4b02      	ldr	r3, [pc, #8]	@ (801b870 <realloc+0xc>)
 801b866:	460a      	mov	r2, r1
 801b868:	4601      	mov	r1, r0
 801b86a:	6818      	ldr	r0, [r3, #0]
 801b86c:	f000 b802 	b.w	801b874 <_realloc_r>
 801b870:	240002b0 	.word	0x240002b0

0801b874 <_realloc_r>:
 801b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b878:	4680      	mov	r8, r0
 801b87a:	4615      	mov	r5, r2
 801b87c:	460c      	mov	r4, r1
 801b87e:	b921      	cbnz	r1, 801b88a <_realloc_r+0x16>
 801b880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b884:	4611      	mov	r1, r2
 801b886:	f7ff bef5 	b.w	801b674 <_malloc_r>
 801b88a:	b92a      	cbnz	r2, 801b898 <_realloc_r+0x24>
 801b88c:	f000 fc36 	bl	801c0fc <_free_r>
 801b890:	2400      	movs	r4, #0
 801b892:	4620      	mov	r0, r4
 801b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b898:	f000 fc7a 	bl	801c190 <_malloc_usable_size_r>
 801b89c:	4285      	cmp	r5, r0
 801b89e:	4606      	mov	r6, r0
 801b8a0:	d802      	bhi.n	801b8a8 <_realloc_r+0x34>
 801b8a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b8a6:	d8f4      	bhi.n	801b892 <_realloc_r+0x1e>
 801b8a8:	4629      	mov	r1, r5
 801b8aa:	4640      	mov	r0, r8
 801b8ac:	f7ff fee2 	bl	801b674 <_malloc_r>
 801b8b0:	4607      	mov	r7, r0
 801b8b2:	2800      	cmp	r0, #0
 801b8b4:	d0ec      	beq.n	801b890 <_realloc_r+0x1c>
 801b8b6:	42b5      	cmp	r5, r6
 801b8b8:	462a      	mov	r2, r5
 801b8ba:	4621      	mov	r1, r4
 801b8bc:	bf28      	it	cs
 801b8be:	4632      	movcs	r2, r6
 801b8c0:	f000 fbe3 	bl	801c08a <memcpy>
 801b8c4:	4621      	mov	r1, r4
 801b8c6:	4640      	mov	r0, r8
 801b8c8:	f000 fc18 	bl	801c0fc <_free_r>
 801b8cc:	463c      	mov	r4, r7
 801b8ce:	e7e0      	b.n	801b892 <_realloc_r+0x1e>

0801b8d0 <_strtoul_l.constprop.0>:
 801b8d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8d4:	4e34      	ldr	r6, [pc, #208]	@ (801b9a8 <_strtoul_l.constprop.0+0xd8>)
 801b8d6:	4686      	mov	lr, r0
 801b8d8:	460d      	mov	r5, r1
 801b8da:	4628      	mov	r0, r5
 801b8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b8e0:	5d37      	ldrb	r7, [r6, r4]
 801b8e2:	f017 0708 	ands.w	r7, r7, #8
 801b8e6:	d1f8      	bne.n	801b8da <_strtoul_l.constprop.0+0xa>
 801b8e8:	2c2d      	cmp	r4, #45	@ 0x2d
 801b8ea:	d12f      	bne.n	801b94c <_strtoul_l.constprop.0+0x7c>
 801b8ec:	782c      	ldrb	r4, [r5, #0]
 801b8ee:	2701      	movs	r7, #1
 801b8f0:	1c85      	adds	r5, r0, #2
 801b8f2:	f033 0010 	bics.w	r0, r3, #16
 801b8f6:	d109      	bne.n	801b90c <_strtoul_l.constprop.0+0x3c>
 801b8f8:	2c30      	cmp	r4, #48	@ 0x30
 801b8fa:	d12c      	bne.n	801b956 <_strtoul_l.constprop.0+0x86>
 801b8fc:	7828      	ldrb	r0, [r5, #0]
 801b8fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b902:	2858      	cmp	r0, #88	@ 0x58
 801b904:	d127      	bne.n	801b956 <_strtoul_l.constprop.0+0x86>
 801b906:	786c      	ldrb	r4, [r5, #1]
 801b908:	2310      	movs	r3, #16
 801b90a:	3502      	adds	r5, #2
 801b90c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b910:	2600      	movs	r6, #0
 801b912:	fbb8 f8f3 	udiv	r8, r8, r3
 801b916:	fb03 f908 	mul.w	r9, r3, r8
 801b91a:	ea6f 0909 	mvn.w	r9, r9
 801b91e:	4630      	mov	r0, r6
 801b920:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b924:	f1bc 0f09 	cmp.w	ip, #9
 801b928:	d81c      	bhi.n	801b964 <_strtoul_l.constprop.0+0x94>
 801b92a:	4664      	mov	r4, ip
 801b92c:	42a3      	cmp	r3, r4
 801b92e:	dd2a      	ble.n	801b986 <_strtoul_l.constprop.0+0xb6>
 801b930:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b934:	d007      	beq.n	801b946 <_strtoul_l.constprop.0+0x76>
 801b936:	4580      	cmp	r8, r0
 801b938:	d322      	bcc.n	801b980 <_strtoul_l.constprop.0+0xb0>
 801b93a:	d101      	bne.n	801b940 <_strtoul_l.constprop.0+0x70>
 801b93c:	45a1      	cmp	r9, r4
 801b93e:	db1f      	blt.n	801b980 <_strtoul_l.constprop.0+0xb0>
 801b940:	fb00 4003 	mla	r0, r0, r3, r4
 801b944:	2601      	movs	r6, #1
 801b946:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b94a:	e7e9      	b.n	801b920 <_strtoul_l.constprop.0+0x50>
 801b94c:	2c2b      	cmp	r4, #43	@ 0x2b
 801b94e:	bf04      	itt	eq
 801b950:	782c      	ldrbeq	r4, [r5, #0]
 801b952:	1c85      	addeq	r5, r0, #2
 801b954:	e7cd      	b.n	801b8f2 <_strtoul_l.constprop.0+0x22>
 801b956:	2b00      	cmp	r3, #0
 801b958:	d1d8      	bne.n	801b90c <_strtoul_l.constprop.0+0x3c>
 801b95a:	2c30      	cmp	r4, #48	@ 0x30
 801b95c:	bf0c      	ite	eq
 801b95e:	2308      	moveq	r3, #8
 801b960:	230a      	movne	r3, #10
 801b962:	e7d3      	b.n	801b90c <_strtoul_l.constprop.0+0x3c>
 801b964:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b968:	f1bc 0f19 	cmp.w	ip, #25
 801b96c:	d801      	bhi.n	801b972 <_strtoul_l.constprop.0+0xa2>
 801b96e:	3c37      	subs	r4, #55	@ 0x37
 801b970:	e7dc      	b.n	801b92c <_strtoul_l.constprop.0+0x5c>
 801b972:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b976:	f1bc 0f19 	cmp.w	ip, #25
 801b97a:	d804      	bhi.n	801b986 <_strtoul_l.constprop.0+0xb6>
 801b97c:	3c57      	subs	r4, #87	@ 0x57
 801b97e:	e7d5      	b.n	801b92c <_strtoul_l.constprop.0+0x5c>
 801b980:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b984:	e7df      	b.n	801b946 <_strtoul_l.constprop.0+0x76>
 801b986:	1c73      	adds	r3, r6, #1
 801b988:	d106      	bne.n	801b998 <_strtoul_l.constprop.0+0xc8>
 801b98a:	2322      	movs	r3, #34	@ 0x22
 801b98c:	f8ce 3000 	str.w	r3, [lr]
 801b990:	4630      	mov	r0, r6
 801b992:	b932      	cbnz	r2, 801b9a2 <_strtoul_l.constprop.0+0xd2>
 801b994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b998:	b107      	cbz	r7, 801b99c <_strtoul_l.constprop.0+0xcc>
 801b99a:	4240      	negs	r0, r0
 801b99c:	2a00      	cmp	r2, #0
 801b99e:	d0f9      	beq.n	801b994 <_strtoul_l.constprop.0+0xc4>
 801b9a0:	b106      	cbz	r6, 801b9a4 <_strtoul_l.constprop.0+0xd4>
 801b9a2:	1e69      	subs	r1, r5, #1
 801b9a4:	6011      	str	r1, [r2, #0]
 801b9a6:	e7f5      	b.n	801b994 <_strtoul_l.constprop.0+0xc4>
 801b9a8:	0801dac6 	.word	0x0801dac6

0801b9ac <strtoul>:
 801b9ac:	4613      	mov	r3, r2
 801b9ae:	460a      	mov	r2, r1
 801b9b0:	4601      	mov	r1, r0
 801b9b2:	4802      	ldr	r0, [pc, #8]	@ (801b9bc <strtoul+0x10>)
 801b9b4:	6800      	ldr	r0, [r0, #0]
 801b9b6:	f7ff bf8b 	b.w	801b8d0 <_strtoul_l.constprop.0>
 801b9ba:	bf00      	nop
 801b9bc:	240002b0 	.word	0x240002b0

0801b9c0 <std>:
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	b510      	push	{r4, lr}
 801b9c4:	4604      	mov	r4, r0
 801b9c6:	e9c0 3300 	strd	r3, r3, [r0]
 801b9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b9ce:	6083      	str	r3, [r0, #8]
 801b9d0:	8181      	strh	r1, [r0, #12]
 801b9d2:	6643      	str	r3, [r0, #100]	@ 0x64
 801b9d4:	81c2      	strh	r2, [r0, #14]
 801b9d6:	6183      	str	r3, [r0, #24]
 801b9d8:	4619      	mov	r1, r3
 801b9da:	2208      	movs	r2, #8
 801b9dc:	305c      	adds	r0, #92	@ 0x5c
 801b9de:	f000 fa8b 	bl	801bef8 <memset>
 801b9e2:	4b0d      	ldr	r3, [pc, #52]	@ (801ba18 <std+0x58>)
 801b9e4:	6263      	str	r3, [r4, #36]	@ 0x24
 801b9e6:	4b0d      	ldr	r3, [pc, #52]	@ (801ba1c <std+0x5c>)
 801b9e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b9ea:	4b0d      	ldr	r3, [pc, #52]	@ (801ba20 <std+0x60>)
 801b9ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b9ee:	4b0d      	ldr	r3, [pc, #52]	@ (801ba24 <std+0x64>)
 801b9f0:	6323      	str	r3, [r4, #48]	@ 0x30
 801b9f2:	4b0d      	ldr	r3, [pc, #52]	@ (801ba28 <std+0x68>)
 801b9f4:	6224      	str	r4, [r4, #32]
 801b9f6:	429c      	cmp	r4, r3
 801b9f8:	d006      	beq.n	801ba08 <std+0x48>
 801b9fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b9fe:	4294      	cmp	r4, r2
 801ba00:	d002      	beq.n	801ba08 <std+0x48>
 801ba02:	33d0      	adds	r3, #208	@ 0xd0
 801ba04:	429c      	cmp	r4, r3
 801ba06:	d105      	bne.n	801ba14 <std+0x54>
 801ba08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ba0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba10:	f000 bb30 	b.w	801c074 <__retarget_lock_init_recursive>
 801ba14:	bd10      	pop	{r4, pc}
 801ba16:	bf00      	nop
 801ba18:	0801bc85 	.word	0x0801bc85
 801ba1c:	0801bca7 	.word	0x0801bca7
 801ba20:	0801bcdf 	.word	0x0801bcdf
 801ba24:	0801bd03 	.word	0x0801bd03
 801ba28:	240130cc 	.word	0x240130cc

0801ba2c <stdio_exit_handler>:
 801ba2c:	4a02      	ldr	r2, [pc, #8]	@ (801ba38 <stdio_exit_handler+0xc>)
 801ba2e:	4903      	ldr	r1, [pc, #12]	@ (801ba3c <stdio_exit_handler+0x10>)
 801ba30:	4803      	ldr	r0, [pc, #12]	@ (801ba40 <stdio_exit_handler+0x14>)
 801ba32:	f000 b869 	b.w	801bb08 <_fwalk_sglue>
 801ba36:	bf00      	nop
 801ba38:	240002a4 	.word	0x240002a4
 801ba3c:	0801caf9 	.word	0x0801caf9
 801ba40:	240002b4 	.word	0x240002b4

0801ba44 <cleanup_stdio>:
 801ba44:	6841      	ldr	r1, [r0, #4]
 801ba46:	4b0c      	ldr	r3, [pc, #48]	@ (801ba78 <cleanup_stdio+0x34>)
 801ba48:	4299      	cmp	r1, r3
 801ba4a:	b510      	push	{r4, lr}
 801ba4c:	4604      	mov	r4, r0
 801ba4e:	d001      	beq.n	801ba54 <cleanup_stdio+0x10>
 801ba50:	f001 f852 	bl	801caf8 <_fflush_r>
 801ba54:	68a1      	ldr	r1, [r4, #8]
 801ba56:	4b09      	ldr	r3, [pc, #36]	@ (801ba7c <cleanup_stdio+0x38>)
 801ba58:	4299      	cmp	r1, r3
 801ba5a:	d002      	beq.n	801ba62 <cleanup_stdio+0x1e>
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	f001 f84b 	bl	801caf8 <_fflush_r>
 801ba62:	68e1      	ldr	r1, [r4, #12]
 801ba64:	4b06      	ldr	r3, [pc, #24]	@ (801ba80 <cleanup_stdio+0x3c>)
 801ba66:	4299      	cmp	r1, r3
 801ba68:	d004      	beq.n	801ba74 <cleanup_stdio+0x30>
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba70:	f001 b842 	b.w	801caf8 <_fflush_r>
 801ba74:	bd10      	pop	{r4, pc}
 801ba76:	bf00      	nop
 801ba78:	240130cc 	.word	0x240130cc
 801ba7c:	24013134 	.word	0x24013134
 801ba80:	2401319c 	.word	0x2401319c

0801ba84 <global_stdio_init.part.0>:
 801ba84:	b510      	push	{r4, lr}
 801ba86:	4b0b      	ldr	r3, [pc, #44]	@ (801bab4 <global_stdio_init.part.0+0x30>)
 801ba88:	4c0b      	ldr	r4, [pc, #44]	@ (801bab8 <global_stdio_init.part.0+0x34>)
 801ba8a:	4a0c      	ldr	r2, [pc, #48]	@ (801babc <global_stdio_init.part.0+0x38>)
 801ba8c:	601a      	str	r2, [r3, #0]
 801ba8e:	4620      	mov	r0, r4
 801ba90:	2200      	movs	r2, #0
 801ba92:	2104      	movs	r1, #4
 801ba94:	f7ff ff94 	bl	801b9c0 <std>
 801ba98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ba9c:	2201      	movs	r2, #1
 801ba9e:	2109      	movs	r1, #9
 801baa0:	f7ff ff8e 	bl	801b9c0 <std>
 801baa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801baa8:	2202      	movs	r2, #2
 801baaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baae:	2112      	movs	r1, #18
 801bab0:	f7ff bf86 	b.w	801b9c0 <std>
 801bab4:	24013204 	.word	0x24013204
 801bab8:	240130cc 	.word	0x240130cc
 801babc:	0801ba2d 	.word	0x0801ba2d

0801bac0 <__sfp_lock_acquire>:
 801bac0:	4801      	ldr	r0, [pc, #4]	@ (801bac8 <__sfp_lock_acquire+0x8>)
 801bac2:	f000 bad8 	b.w	801c076 <__retarget_lock_acquire_recursive>
 801bac6:	bf00      	nop
 801bac8:	2401320e 	.word	0x2401320e

0801bacc <__sfp_lock_release>:
 801bacc:	4801      	ldr	r0, [pc, #4]	@ (801bad4 <__sfp_lock_release+0x8>)
 801bace:	f000 bad3 	b.w	801c078 <__retarget_lock_release_recursive>
 801bad2:	bf00      	nop
 801bad4:	2401320e 	.word	0x2401320e

0801bad8 <__sinit>:
 801bad8:	b510      	push	{r4, lr}
 801bada:	4604      	mov	r4, r0
 801badc:	f7ff fff0 	bl	801bac0 <__sfp_lock_acquire>
 801bae0:	6a23      	ldr	r3, [r4, #32]
 801bae2:	b11b      	cbz	r3, 801baec <__sinit+0x14>
 801bae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bae8:	f7ff bff0 	b.w	801bacc <__sfp_lock_release>
 801baec:	4b04      	ldr	r3, [pc, #16]	@ (801bb00 <__sinit+0x28>)
 801baee:	6223      	str	r3, [r4, #32]
 801baf0:	4b04      	ldr	r3, [pc, #16]	@ (801bb04 <__sinit+0x2c>)
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d1f5      	bne.n	801bae4 <__sinit+0xc>
 801baf8:	f7ff ffc4 	bl	801ba84 <global_stdio_init.part.0>
 801bafc:	e7f2      	b.n	801bae4 <__sinit+0xc>
 801bafe:	bf00      	nop
 801bb00:	0801ba45 	.word	0x0801ba45
 801bb04:	24013204 	.word	0x24013204

0801bb08 <_fwalk_sglue>:
 801bb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb0c:	4607      	mov	r7, r0
 801bb0e:	4688      	mov	r8, r1
 801bb10:	4614      	mov	r4, r2
 801bb12:	2600      	movs	r6, #0
 801bb14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bb18:	f1b9 0901 	subs.w	r9, r9, #1
 801bb1c:	d505      	bpl.n	801bb2a <_fwalk_sglue+0x22>
 801bb1e:	6824      	ldr	r4, [r4, #0]
 801bb20:	2c00      	cmp	r4, #0
 801bb22:	d1f7      	bne.n	801bb14 <_fwalk_sglue+0xc>
 801bb24:	4630      	mov	r0, r6
 801bb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb2a:	89ab      	ldrh	r3, [r5, #12]
 801bb2c:	2b01      	cmp	r3, #1
 801bb2e:	d907      	bls.n	801bb40 <_fwalk_sglue+0x38>
 801bb30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bb34:	3301      	adds	r3, #1
 801bb36:	d003      	beq.n	801bb40 <_fwalk_sglue+0x38>
 801bb38:	4629      	mov	r1, r5
 801bb3a:	4638      	mov	r0, r7
 801bb3c:	47c0      	blx	r8
 801bb3e:	4306      	orrs	r6, r0
 801bb40:	3568      	adds	r5, #104	@ 0x68
 801bb42:	e7e9      	b.n	801bb18 <_fwalk_sglue+0x10>

0801bb44 <_fwrite_r>:
 801bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb48:	9c08      	ldr	r4, [sp, #32]
 801bb4a:	468a      	mov	sl, r1
 801bb4c:	4690      	mov	r8, r2
 801bb4e:	fb02 f903 	mul.w	r9, r2, r3
 801bb52:	4606      	mov	r6, r0
 801bb54:	b118      	cbz	r0, 801bb5e <_fwrite_r+0x1a>
 801bb56:	6a03      	ldr	r3, [r0, #32]
 801bb58:	b90b      	cbnz	r3, 801bb5e <_fwrite_r+0x1a>
 801bb5a:	f7ff ffbd 	bl	801bad8 <__sinit>
 801bb5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bb60:	07dd      	lsls	r5, r3, #31
 801bb62:	d405      	bmi.n	801bb70 <_fwrite_r+0x2c>
 801bb64:	89a3      	ldrh	r3, [r4, #12]
 801bb66:	0598      	lsls	r0, r3, #22
 801bb68:	d402      	bmi.n	801bb70 <_fwrite_r+0x2c>
 801bb6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bb6c:	f000 fa83 	bl	801c076 <__retarget_lock_acquire_recursive>
 801bb70:	89a3      	ldrh	r3, [r4, #12]
 801bb72:	0719      	lsls	r1, r3, #28
 801bb74:	d516      	bpl.n	801bba4 <_fwrite_r+0x60>
 801bb76:	6923      	ldr	r3, [r4, #16]
 801bb78:	b1a3      	cbz	r3, 801bba4 <_fwrite_r+0x60>
 801bb7a:	2500      	movs	r5, #0
 801bb7c:	454d      	cmp	r5, r9
 801bb7e:	d01f      	beq.n	801bbc0 <_fwrite_r+0x7c>
 801bb80:	68a7      	ldr	r7, [r4, #8]
 801bb82:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801bb86:	3f01      	subs	r7, #1
 801bb88:	2f00      	cmp	r7, #0
 801bb8a:	60a7      	str	r7, [r4, #8]
 801bb8c:	da04      	bge.n	801bb98 <_fwrite_r+0x54>
 801bb8e:	69a3      	ldr	r3, [r4, #24]
 801bb90:	429f      	cmp	r7, r3
 801bb92:	db0f      	blt.n	801bbb4 <_fwrite_r+0x70>
 801bb94:	290a      	cmp	r1, #10
 801bb96:	d00d      	beq.n	801bbb4 <_fwrite_r+0x70>
 801bb98:	6823      	ldr	r3, [r4, #0]
 801bb9a:	1c5a      	adds	r2, r3, #1
 801bb9c:	6022      	str	r2, [r4, #0]
 801bb9e:	7019      	strb	r1, [r3, #0]
 801bba0:	3501      	adds	r5, #1
 801bba2:	e7eb      	b.n	801bb7c <_fwrite_r+0x38>
 801bba4:	4621      	mov	r1, r4
 801bba6:	4630      	mov	r0, r6
 801bba8:	f000 f926 	bl	801bdf8 <__swsetup_r>
 801bbac:	2800      	cmp	r0, #0
 801bbae:	d0e4      	beq.n	801bb7a <_fwrite_r+0x36>
 801bbb0:	2500      	movs	r5, #0
 801bbb2:	e005      	b.n	801bbc0 <_fwrite_r+0x7c>
 801bbb4:	4622      	mov	r2, r4
 801bbb6:	4630      	mov	r0, r6
 801bbb8:	f000 f8e0 	bl	801bd7c <__swbuf_r>
 801bbbc:	3001      	adds	r0, #1
 801bbbe:	d1ef      	bne.n	801bba0 <_fwrite_r+0x5c>
 801bbc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bbc2:	07da      	lsls	r2, r3, #31
 801bbc4:	d405      	bmi.n	801bbd2 <_fwrite_r+0x8e>
 801bbc6:	89a3      	ldrh	r3, [r4, #12]
 801bbc8:	059b      	lsls	r3, r3, #22
 801bbca:	d402      	bmi.n	801bbd2 <_fwrite_r+0x8e>
 801bbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bbce:	f000 fa53 	bl	801c078 <__retarget_lock_release_recursive>
 801bbd2:	fbb5 f0f8 	udiv	r0, r5, r8
 801bbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801bbdc <fwrite>:
 801bbdc:	b507      	push	{r0, r1, r2, lr}
 801bbde:	9300      	str	r3, [sp, #0]
 801bbe0:	4613      	mov	r3, r2
 801bbe2:	460a      	mov	r2, r1
 801bbe4:	4601      	mov	r1, r0
 801bbe6:	4803      	ldr	r0, [pc, #12]	@ (801bbf4 <fwrite+0x18>)
 801bbe8:	6800      	ldr	r0, [r0, #0]
 801bbea:	f7ff ffab 	bl	801bb44 <_fwrite_r>
 801bbee:	b003      	add	sp, #12
 801bbf0:	f85d fb04 	ldr.w	pc, [sp], #4
 801bbf4:	240002b0 	.word	0x240002b0

0801bbf8 <iprintf>:
 801bbf8:	b40f      	push	{r0, r1, r2, r3}
 801bbfa:	b507      	push	{r0, r1, r2, lr}
 801bbfc:	4906      	ldr	r1, [pc, #24]	@ (801bc18 <iprintf+0x20>)
 801bbfe:	ab04      	add	r3, sp, #16
 801bc00:	6808      	ldr	r0, [r1, #0]
 801bc02:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc06:	6881      	ldr	r1, [r0, #8]
 801bc08:	9301      	str	r3, [sp, #4]
 801bc0a:	f000 fc4b 	bl	801c4a4 <_vfiprintf_r>
 801bc0e:	b003      	add	sp, #12
 801bc10:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc14:	b004      	add	sp, #16
 801bc16:	4770      	bx	lr
 801bc18:	240002b0 	.word	0x240002b0

0801bc1c <sniprintf>:
 801bc1c:	b40c      	push	{r2, r3}
 801bc1e:	b530      	push	{r4, r5, lr}
 801bc20:	4b17      	ldr	r3, [pc, #92]	@ (801bc80 <sniprintf+0x64>)
 801bc22:	1e0c      	subs	r4, r1, #0
 801bc24:	681d      	ldr	r5, [r3, #0]
 801bc26:	b09d      	sub	sp, #116	@ 0x74
 801bc28:	da08      	bge.n	801bc3c <sniprintf+0x20>
 801bc2a:	238b      	movs	r3, #139	@ 0x8b
 801bc2c:	602b      	str	r3, [r5, #0]
 801bc2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc32:	b01d      	add	sp, #116	@ 0x74
 801bc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bc38:	b002      	add	sp, #8
 801bc3a:	4770      	bx	lr
 801bc3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bc40:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bc44:	bf14      	ite	ne
 801bc46:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801bc4a:	4623      	moveq	r3, r4
 801bc4c:	9304      	str	r3, [sp, #16]
 801bc4e:	9307      	str	r3, [sp, #28]
 801bc50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bc54:	9002      	str	r0, [sp, #8]
 801bc56:	9006      	str	r0, [sp, #24]
 801bc58:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bc5e:	ab21      	add	r3, sp, #132	@ 0x84
 801bc60:	a902      	add	r1, sp, #8
 801bc62:	4628      	mov	r0, r5
 801bc64:	9301      	str	r3, [sp, #4]
 801bc66:	f000 faf7 	bl	801c258 <_svfiprintf_r>
 801bc6a:	1c43      	adds	r3, r0, #1
 801bc6c:	bfbc      	itt	lt
 801bc6e:	238b      	movlt	r3, #139	@ 0x8b
 801bc70:	602b      	strlt	r3, [r5, #0]
 801bc72:	2c00      	cmp	r4, #0
 801bc74:	d0dd      	beq.n	801bc32 <sniprintf+0x16>
 801bc76:	9b02      	ldr	r3, [sp, #8]
 801bc78:	2200      	movs	r2, #0
 801bc7a:	701a      	strb	r2, [r3, #0]
 801bc7c:	e7d9      	b.n	801bc32 <sniprintf+0x16>
 801bc7e:	bf00      	nop
 801bc80:	240002b0 	.word	0x240002b0

0801bc84 <__sread>:
 801bc84:	b510      	push	{r4, lr}
 801bc86:	460c      	mov	r4, r1
 801bc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc8c:	f000 f994 	bl	801bfb8 <_read_r>
 801bc90:	2800      	cmp	r0, #0
 801bc92:	bfab      	itete	ge
 801bc94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bc96:	89a3      	ldrhlt	r3, [r4, #12]
 801bc98:	181b      	addge	r3, r3, r0
 801bc9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bc9e:	bfac      	ite	ge
 801bca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bca2:	81a3      	strhlt	r3, [r4, #12]
 801bca4:	bd10      	pop	{r4, pc}

0801bca6 <__swrite>:
 801bca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcaa:	461f      	mov	r7, r3
 801bcac:	898b      	ldrh	r3, [r1, #12]
 801bcae:	05db      	lsls	r3, r3, #23
 801bcb0:	4605      	mov	r5, r0
 801bcb2:	460c      	mov	r4, r1
 801bcb4:	4616      	mov	r6, r2
 801bcb6:	d505      	bpl.n	801bcc4 <__swrite+0x1e>
 801bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcbc:	2302      	movs	r3, #2
 801bcbe:	2200      	movs	r2, #0
 801bcc0:	f000 f968 	bl	801bf94 <_lseek_r>
 801bcc4:	89a3      	ldrh	r3, [r4, #12]
 801bcc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bcca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bcce:	81a3      	strh	r3, [r4, #12]
 801bcd0:	4632      	mov	r2, r6
 801bcd2:	463b      	mov	r3, r7
 801bcd4:	4628      	mov	r0, r5
 801bcd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bcda:	f000 b98f 	b.w	801bffc <_write_r>

0801bcde <__sseek>:
 801bcde:	b510      	push	{r4, lr}
 801bce0:	460c      	mov	r4, r1
 801bce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bce6:	f000 f955 	bl	801bf94 <_lseek_r>
 801bcea:	1c43      	adds	r3, r0, #1
 801bcec:	89a3      	ldrh	r3, [r4, #12]
 801bcee:	bf15      	itete	ne
 801bcf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bcf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bcf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bcfa:	81a3      	strheq	r3, [r4, #12]
 801bcfc:	bf18      	it	ne
 801bcfe:	81a3      	strhne	r3, [r4, #12]
 801bd00:	bd10      	pop	{r4, pc}

0801bd02 <__sclose>:
 801bd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd06:	f000 b935 	b.w	801bf74 <_close_r>

0801bd0a <_vsniprintf_r>:
 801bd0a:	b530      	push	{r4, r5, lr}
 801bd0c:	4614      	mov	r4, r2
 801bd0e:	2c00      	cmp	r4, #0
 801bd10:	b09b      	sub	sp, #108	@ 0x6c
 801bd12:	4605      	mov	r5, r0
 801bd14:	461a      	mov	r2, r3
 801bd16:	da05      	bge.n	801bd24 <_vsniprintf_r+0x1a>
 801bd18:	238b      	movs	r3, #139	@ 0x8b
 801bd1a:	6003      	str	r3, [r0, #0]
 801bd1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd20:	b01b      	add	sp, #108	@ 0x6c
 801bd22:	bd30      	pop	{r4, r5, pc}
 801bd24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bd28:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd2c:	bf14      	ite	ne
 801bd2e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801bd32:	4623      	moveq	r3, r4
 801bd34:	9302      	str	r3, [sp, #8]
 801bd36:	9305      	str	r3, [sp, #20]
 801bd38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bd3c:	9100      	str	r1, [sp, #0]
 801bd3e:	9104      	str	r1, [sp, #16]
 801bd40:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bd44:	4669      	mov	r1, sp
 801bd46:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bd48:	f000 fa86 	bl	801c258 <_svfiprintf_r>
 801bd4c:	1c43      	adds	r3, r0, #1
 801bd4e:	bfbc      	itt	lt
 801bd50:	238b      	movlt	r3, #139	@ 0x8b
 801bd52:	602b      	strlt	r3, [r5, #0]
 801bd54:	2c00      	cmp	r4, #0
 801bd56:	d0e3      	beq.n	801bd20 <_vsniprintf_r+0x16>
 801bd58:	9b00      	ldr	r3, [sp, #0]
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	701a      	strb	r2, [r3, #0]
 801bd5e:	e7df      	b.n	801bd20 <_vsniprintf_r+0x16>

0801bd60 <vsniprintf>:
 801bd60:	b507      	push	{r0, r1, r2, lr}
 801bd62:	9300      	str	r3, [sp, #0]
 801bd64:	4613      	mov	r3, r2
 801bd66:	460a      	mov	r2, r1
 801bd68:	4601      	mov	r1, r0
 801bd6a:	4803      	ldr	r0, [pc, #12]	@ (801bd78 <vsniprintf+0x18>)
 801bd6c:	6800      	ldr	r0, [r0, #0]
 801bd6e:	f7ff ffcc 	bl	801bd0a <_vsniprintf_r>
 801bd72:	b003      	add	sp, #12
 801bd74:	f85d fb04 	ldr.w	pc, [sp], #4
 801bd78:	240002b0 	.word	0x240002b0

0801bd7c <__swbuf_r>:
 801bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd7e:	460e      	mov	r6, r1
 801bd80:	4614      	mov	r4, r2
 801bd82:	4605      	mov	r5, r0
 801bd84:	b118      	cbz	r0, 801bd8e <__swbuf_r+0x12>
 801bd86:	6a03      	ldr	r3, [r0, #32]
 801bd88:	b90b      	cbnz	r3, 801bd8e <__swbuf_r+0x12>
 801bd8a:	f7ff fea5 	bl	801bad8 <__sinit>
 801bd8e:	69a3      	ldr	r3, [r4, #24]
 801bd90:	60a3      	str	r3, [r4, #8]
 801bd92:	89a3      	ldrh	r3, [r4, #12]
 801bd94:	071a      	lsls	r2, r3, #28
 801bd96:	d501      	bpl.n	801bd9c <__swbuf_r+0x20>
 801bd98:	6923      	ldr	r3, [r4, #16]
 801bd9a:	b943      	cbnz	r3, 801bdae <__swbuf_r+0x32>
 801bd9c:	4621      	mov	r1, r4
 801bd9e:	4628      	mov	r0, r5
 801bda0:	f000 f82a 	bl	801bdf8 <__swsetup_r>
 801bda4:	b118      	cbz	r0, 801bdae <__swbuf_r+0x32>
 801bda6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801bdaa:	4638      	mov	r0, r7
 801bdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdae:	6823      	ldr	r3, [r4, #0]
 801bdb0:	6922      	ldr	r2, [r4, #16]
 801bdb2:	1a98      	subs	r0, r3, r2
 801bdb4:	6963      	ldr	r3, [r4, #20]
 801bdb6:	b2f6      	uxtb	r6, r6
 801bdb8:	4283      	cmp	r3, r0
 801bdba:	4637      	mov	r7, r6
 801bdbc:	dc05      	bgt.n	801bdca <__swbuf_r+0x4e>
 801bdbe:	4621      	mov	r1, r4
 801bdc0:	4628      	mov	r0, r5
 801bdc2:	f000 fe99 	bl	801caf8 <_fflush_r>
 801bdc6:	2800      	cmp	r0, #0
 801bdc8:	d1ed      	bne.n	801bda6 <__swbuf_r+0x2a>
 801bdca:	68a3      	ldr	r3, [r4, #8]
 801bdcc:	3b01      	subs	r3, #1
 801bdce:	60a3      	str	r3, [r4, #8]
 801bdd0:	6823      	ldr	r3, [r4, #0]
 801bdd2:	1c5a      	adds	r2, r3, #1
 801bdd4:	6022      	str	r2, [r4, #0]
 801bdd6:	701e      	strb	r6, [r3, #0]
 801bdd8:	6962      	ldr	r2, [r4, #20]
 801bdda:	1c43      	adds	r3, r0, #1
 801bddc:	429a      	cmp	r2, r3
 801bdde:	d004      	beq.n	801bdea <__swbuf_r+0x6e>
 801bde0:	89a3      	ldrh	r3, [r4, #12]
 801bde2:	07db      	lsls	r3, r3, #31
 801bde4:	d5e1      	bpl.n	801bdaa <__swbuf_r+0x2e>
 801bde6:	2e0a      	cmp	r6, #10
 801bde8:	d1df      	bne.n	801bdaa <__swbuf_r+0x2e>
 801bdea:	4621      	mov	r1, r4
 801bdec:	4628      	mov	r0, r5
 801bdee:	f000 fe83 	bl	801caf8 <_fflush_r>
 801bdf2:	2800      	cmp	r0, #0
 801bdf4:	d0d9      	beq.n	801bdaa <__swbuf_r+0x2e>
 801bdf6:	e7d6      	b.n	801bda6 <__swbuf_r+0x2a>

0801bdf8 <__swsetup_r>:
 801bdf8:	b538      	push	{r3, r4, r5, lr}
 801bdfa:	4b29      	ldr	r3, [pc, #164]	@ (801bea0 <__swsetup_r+0xa8>)
 801bdfc:	4605      	mov	r5, r0
 801bdfe:	6818      	ldr	r0, [r3, #0]
 801be00:	460c      	mov	r4, r1
 801be02:	b118      	cbz	r0, 801be0c <__swsetup_r+0x14>
 801be04:	6a03      	ldr	r3, [r0, #32]
 801be06:	b90b      	cbnz	r3, 801be0c <__swsetup_r+0x14>
 801be08:	f7ff fe66 	bl	801bad8 <__sinit>
 801be0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be10:	0719      	lsls	r1, r3, #28
 801be12:	d422      	bmi.n	801be5a <__swsetup_r+0x62>
 801be14:	06da      	lsls	r2, r3, #27
 801be16:	d407      	bmi.n	801be28 <__swsetup_r+0x30>
 801be18:	2209      	movs	r2, #9
 801be1a:	602a      	str	r2, [r5, #0]
 801be1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801be20:	81a3      	strh	r3, [r4, #12]
 801be22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be26:	e033      	b.n	801be90 <__swsetup_r+0x98>
 801be28:	0758      	lsls	r0, r3, #29
 801be2a:	d512      	bpl.n	801be52 <__swsetup_r+0x5a>
 801be2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801be2e:	b141      	cbz	r1, 801be42 <__swsetup_r+0x4a>
 801be30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801be34:	4299      	cmp	r1, r3
 801be36:	d002      	beq.n	801be3e <__swsetup_r+0x46>
 801be38:	4628      	mov	r0, r5
 801be3a:	f000 f95f 	bl	801c0fc <_free_r>
 801be3e:	2300      	movs	r3, #0
 801be40:	6363      	str	r3, [r4, #52]	@ 0x34
 801be42:	89a3      	ldrh	r3, [r4, #12]
 801be44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801be48:	81a3      	strh	r3, [r4, #12]
 801be4a:	2300      	movs	r3, #0
 801be4c:	6063      	str	r3, [r4, #4]
 801be4e:	6923      	ldr	r3, [r4, #16]
 801be50:	6023      	str	r3, [r4, #0]
 801be52:	89a3      	ldrh	r3, [r4, #12]
 801be54:	f043 0308 	orr.w	r3, r3, #8
 801be58:	81a3      	strh	r3, [r4, #12]
 801be5a:	6923      	ldr	r3, [r4, #16]
 801be5c:	b94b      	cbnz	r3, 801be72 <__swsetup_r+0x7a>
 801be5e:	89a3      	ldrh	r3, [r4, #12]
 801be60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801be64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801be68:	d003      	beq.n	801be72 <__swsetup_r+0x7a>
 801be6a:	4621      	mov	r1, r4
 801be6c:	4628      	mov	r0, r5
 801be6e:	f000 fea3 	bl	801cbb8 <__smakebuf_r>
 801be72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be76:	f013 0201 	ands.w	r2, r3, #1
 801be7a:	d00a      	beq.n	801be92 <__swsetup_r+0x9a>
 801be7c:	2200      	movs	r2, #0
 801be7e:	60a2      	str	r2, [r4, #8]
 801be80:	6962      	ldr	r2, [r4, #20]
 801be82:	4252      	negs	r2, r2
 801be84:	61a2      	str	r2, [r4, #24]
 801be86:	6922      	ldr	r2, [r4, #16]
 801be88:	b942      	cbnz	r2, 801be9c <__swsetup_r+0xa4>
 801be8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801be8e:	d1c5      	bne.n	801be1c <__swsetup_r+0x24>
 801be90:	bd38      	pop	{r3, r4, r5, pc}
 801be92:	0799      	lsls	r1, r3, #30
 801be94:	bf58      	it	pl
 801be96:	6962      	ldrpl	r2, [r4, #20]
 801be98:	60a2      	str	r2, [r4, #8]
 801be9a:	e7f4      	b.n	801be86 <__swsetup_r+0x8e>
 801be9c:	2000      	movs	r0, #0
 801be9e:	e7f7      	b.n	801be90 <__swsetup_r+0x98>
 801bea0:	240002b0 	.word	0x240002b0

0801bea4 <memcmp>:
 801bea4:	b510      	push	{r4, lr}
 801bea6:	3901      	subs	r1, #1
 801bea8:	4402      	add	r2, r0
 801beaa:	4290      	cmp	r0, r2
 801beac:	d101      	bne.n	801beb2 <memcmp+0xe>
 801beae:	2000      	movs	r0, #0
 801beb0:	e005      	b.n	801bebe <memcmp+0x1a>
 801beb2:	7803      	ldrb	r3, [r0, #0]
 801beb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801beb8:	42a3      	cmp	r3, r4
 801beba:	d001      	beq.n	801bec0 <memcmp+0x1c>
 801bebc:	1b18      	subs	r0, r3, r4
 801bebe:	bd10      	pop	{r4, pc}
 801bec0:	3001      	adds	r0, #1
 801bec2:	e7f2      	b.n	801beaa <memcmp+0x6>

0801bec4 <memmove>:
 801bec4:	4288      	cmp	r0, r1
 801bec6:	b510      	push	{r4, lr}
 801bec8:	eb01 0402 	add.w	r4, r1, r2
 801becc:	d902      	bls.n	801bed4 <memmove+0x10>
 801bece:	4284      	cmp	r4, r0
 801bed0:	4623      	mov	r3, r4
 801bed2:	d807      	bhi.n	801bee4 <memmove+0x20>
 801bed4:	1e43      	subs	r3, r0, #1
 801bed6:	42a1      	cmp	r1, r4
 801bed8:	d008      	beq.n	801beec <memmove+0x28>
 801beda:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bede:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bee2:	e7f8      	b.n	801bed6 <memmove+0x12>
 801bee4:	4402      	add	r2, r0
 801bee6:	4601      	mov	r1, r0
 801bee8:	428a      	cmp	r2, r1
 801beea:	d100      	bne.n	801beee <memmove+0x2a>
 801beec:	bd10      	pop	{r4, pc}
 801beee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bef6:	e7f7      	b.n	801bee8 <memmove+0x24>

0801bef8 <memset>:
 801bef8:	4402      	add	r2, r0
 801befa:	4603      	mov	r3, r0
 801befc:	4293      	cmp	r3, r2
 801befe:	d100      	bne.n	801bf02 <memset+0xa>
 801bf00:	4770      	bx	lr
 801bf02:	f803 1b01 	strb.w	r1, [r3], #1
 801bf06:	e7f9      	b.n	801befc <memset+0x4>

0801bf08 <strchr>:
 801bf08:	b2c9      	uxtb	r1, r1
 801bf0a:	4603      	mov	r3, r0
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf12:	b112      	cbz	r2, 801bf1a <strchr+0x12>
 801bf14:	428a      	cmp	r2, r1
 801bf16:	d1f9      	bne.n	801bf0c <strchr+0x4>
 801bf18:	4770      	bx	lr
 801bf1a:	2900      	cmp	r1, #0
 801bf1c:	bf18      	it	ne
 801bf1e:	2000      	movne	r0, #0
 801bf20:	4770      	bx	lr

0801bf22 <strncmp>:
 801bf22:	b510      	push	{r4, lr}
 801bf24:	b16a      	cbz	r2, 801bf42 <strncmp+0x20>
 801bf26:	3901      	subs	r1, #1
 801bf28:	1884      	adds	r4, r0, r2
 801bf2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bf32:	429a      	cmp	r2, r3
 801bf34:	d103      	bne.n	801bf3e <strncmp+0x1c>
 801bf36:	42a0      	cmp	r0, r4
 801bf38:	d001      	beq.n	801bf3e <strncmp+0x1c>
 801bf3a:	2a00      	cmp	r2, #0
 801bf3c:	d1f5      	bne.n	801bf2a <strncmp+0x8>
 801bf3e:	1ad0      	subs	r0, r2, r3
 801bf40:	bd10      	pop	{r4, pc}
 801bf42:	4610      	mov	r0, r2
 801bf44:	e7fc      	b.n	801bf40 <strncmp+0x1e>

0801bf46 <strstr>:
 801bf46:	780a      	ldrb	r2, [r1, #0]
 801bf48:	b570      	push	{r4, r5, r6, lr}
 801bf4a:	b96a      	cbnz	r2, 801bf68 <strstr+0x22>
 801bf4c:	bd70      	pop	{r4, r5, r6, pc}
 801bf4e:	429a      	cmp	r2, r3
 801bf50:	d109      	bne.n	801bf66 <strstr+0x20>
 801bf52:	460c      	mov	r4, r1
 801bf54:	4605      	mov	r5, r0
 801bf56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d0f6      	beq.n	801bf4c <strstr+0x6>
 801bf5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801bf62:	429e      	cmp	r6, r3
 801bf64:	d0f7      	beq.n	801bf56 <strstr+0x10>
 801bf66:	3001      	adds	r0, #1
 801bf68:	7803      	ldrb	r3, [r0, #0]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d1ef      	bne.n	801bf4e <strstr+0x8>
 801bf6e:	4618      	mov	r0, r3
 801bf70:	e7ec      	b.n	801bf4c <strstr+0x6>
	...

0801bf74 <_close_r>:
 801bf74:	b538      	push	{r3, r4, r5, lr}
 801bf76:	4d06      	ldr	r5, [pc, #24]	@ (801bf90 <_close_r+0x1c>)
 801bf78:	2300      	movs	r3, #0
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	4608      	mov	r0, r1
 801bf7e:	602b      	str	r3, [r5, #0]
 801bf80:	f7e6 f8f4 	bl	800216c <_close>
 801bf84:	1c43      	adds	r3, r0, #1
 801bf86:	d102      	bne.n	801bf8e <_close_r+0x1a>
 801bf88:	682b      	ldr	r3, [r5, #0]
 801bf8a:	b103      	cbz	r3, 801bf8e <_close_r+0x1a>
 801bf8c:	6023      	str	r3, [r4, #0]
 801bf8e:	bd38      	pop	{r3, r4, r5, pc}
 801bf90:	24013208 	.word	0x24013208

0801bf94 <_lseek_r>:
 801bf94:	b538      	push	{r3, r4, r5, lr}
 801bf96:	4d07      	ldr	r5, [pc, #28]	@ (801bfb4 <_lseek_r+0x20>)
 801bf98:	4604      	mov	r4, r0
 801bf9a:	4608      	mov	r0, r1
 801bf9c:	4611      	mov	r1, r2
 801bf9e:	2200      	movs	r2, #0
 801bfa0:	602a      	str	r2, [r5, #0]
 801bfa2:	461a      	mov	r2, r3
 801bfa4:	f7e6 f909 	bl	80021ba <_lseek>
 801bfa8:	1c43      	adds	r3, r0, #1
 801bfaa:	d102      	bne.n	801bfb2 <_lseek_r+0x1e>
 801bfac:	682b      	ldr	r3, [r5, #0]
 801bfae:	b103      	cbz	r3, 801bfb2 <_lseek_r+0x1e>
 801bfb0:	6023      	str	r3, [r4, #0]
 801bfb2:	bd38      	pop	{r3, r4, r5, pc}
 801bfb4:	24013208 	.word	0x24013208

0801bfb8 <_read_r>:
 801bfb8:	b538      	push	{r3, r4, r5, lr}
 801bfba:	4d07      	ldr	r5, [pc, #28]	@ (801bfd8 <_read_r+0x20>)
 801bfbc:	4604      	mov	r4, r0
 801bfbe:	4608      	mov	r0, r1
 801bfc0:	4611      	mov	r1, r2
 801bfc2:	2200      	movs	r2, #0
 801bfc4:	602a      	str	r2, [r5, #0]
 801bfc6:	461a      	mov	r2, r3
 801bfc8:	f7e6 f897 	bl	80020fa <_read>
 801bfcc:	1c43      	adds	r3, r0, #1
 801bfce:	d102      	bne.n	801bfd6 <_read_r+0x1e>
 801bfd0:	682b      	ldr	r3, [r5, #0]
 801bfd2:	b103      	cbz	r3, 801bfd6 <_read_r+0x1e>
 801bfd4:	6023      	str	r3, [r4, #0]
 801bfd6:	bd38      	pop	{r3, r4, r5, pc}
 801bfd8:	24013208 	.word	0x24013208

0801bfdc <_sbrk_r>:
 801bfdc:	b538      	push	{r3, r4, r5, lr}
 801bfde:	4d06      	ldr	r5, [pc, #24]	@ (801bff8 <_sbrk_r+0x1c>)
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	4608      	mov	r0, r1
 801bfe6:	602b      	str	r3, [r5, #0]
 801bfe8:	f7e6 f8f4 	bl	80021d4 <_sbrk>
 801bfec:	1c43      	adds	r3, r0, #1
 801bfee:	d102      	bne.n	801bff6 <_sbrk_r+0x1a>
 801bff0:	682b      	ldr	r3, [r5, #0]
 801bff2:	b103      	cbz	r3, 801bff6 <_sbrk_r+0x1a>
 801bff4:	6023      	str	r3, [r4, #0]
 801bff6:	bd38      	pop	{r3, r4, r5, pc}
 801bff8:	24013208 	.word	0x24013208

0801bffc <_write_r>:
 801bffc:	b538      	push	{r3, r4, r5, lr}
 801bffe:	4d07      	ldr	r5, [pc, #28]	@ (801c01c <_write_r+0x20>)
 801c000:	4604      	mov	r4, r0
 801c002:	4608      	mov	r0, r1
 801c004:	4611      	mov	r1, r2
 801c006:	2200      	movs	r2, #0
 801c008:	602a      	str	r2, [r5, #0]
 801c00a:	461a      	mov	r2, r3
 801c00c:	f7e6 f892 	bl	8002134 <_write>
 801c010:	1c43      	adds	r3, r0, #1
 801c012:	d102      	bne.n	801c01a <_write_r+0x1e>
 801c014:	682b      	ldr	r3, [r5, #0]
 801c016:	b103      	cbz	r3, 801c01a <_write_r+0x1e>
 801c018:	6023      	str	r3, [r4, #0]
 801c01a:	bd38      	pop	{r3, r4, r5, pc}
 801c01c:	24013208 	.word	0x24013208

0801c020 <__errno>:
 801c020:	4b01      	ldr	r3, [pc, #4]	@ (801c028 <__errno+0x8>)
 801c022:	6818      	ldr	r0, [r3, #0]
 801c024:	4770      	bx	lr
 801c026:	bf00      	nop
 801c028:	240002b0 	.word	0x240002b0

0801c02c <__libc_init_array>:
 801c02c:	b570      	push	{r4, r5, r6, lr}
 801c02e:	4d0d      	ldr	r5, [pc, #52]	@ (801c064 <__libc_init_array+0x38>)
 801c030:	4c0d      	ldr	r4, [pc, #52]	@ (801c068 <__libc_init_array+0x3c>)
 801c032:	1b64      	subs	r4, r4, r5
 801c034:	10a4      	asrs	r4, r4, #2
 801c036:	2600      	movs	r6, #0
 801c038:	42a6      	cmp	r6, r4
 801c03a:	d109      	bne.n	801c050 <__libc_init_array+0x24>
 801c03c:	4d0b      	ldr	r5, [pc, #44]	@ (801c06c <__libc_init_array+0x40>)
 801c03e:	4c0c      	ldr	r4, [pc, #48]	@ (801c070 <__libc_init_array+0x44>)
 801c040:	f000 fe64 	bl	801cd0c <_init>
 801c044:	1b64      	subs	r4, r4, r5
 801c046:	10a4      	asrs	r4, r4, #2
 801c048:	2600      	movs	r6, #0
 801c04a:	42a6      	cmp	r6, r4
 801c04c:	d105      	bne.n	801c05a <__libc_init_array+0x2e>
 801c04e:	bd70      	pop	{r4, r5, r6, pc}
 801c050:	f855 3b04 	ldr.w	r3, [r5], #4
 801c054:	4798      	blx	r3
 801c056:	3601      	adds	r6, #1
 801c058:	e7ee      	b.n	801c038 <__libc_init_array+0xc>
 801c05a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c05e:	4798      	blx	r3
 801c060:	3601      	adds	r6, #1
 801c062:	e7f2      	b.n	801c04a <__libc_init_array+0x1e>
 801c064:	0801dc40 	.word	0x0801dc40
 801c068:	0801dc40 	.word	0x0801dc40
 801c06c:	0801dc40 	.word	0x0801dc40
 801c070:	0801dc48 	.word	0x0801dc48

0801c074 <__retarget_lock_init_recursive>:
 801c074:	4770      	bx	lr

0801c076 <__retarget_lock_acquire_recursive>:
 801c076:	4770      	bx	lr

0801c078 <__retarget_lock_release_recursive>:
 801c078:	4770      	bx	lr

0801c07a <strcpy>:
 801c07a:	4603      	mov	r3, r0
 801c07c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c080:	f803 2b01 	strb.w	r2, [r3], #1
 801c084:	2a00      	cmp	r2, #0
 801c086:	d1f9      	bne.n	801c07c <strcpy+0x2>
 801c088:	4770      	bx	lr

0801c08a <memcpy>:
 801c08a:	440a      	add	r2, r1
 801c08c:	4291      	cmp	r1, r2
 801c08e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801c092:	d100      	bne.n	801c096 <memcpy+0xc>
 801c094:	4770      	bx	lr
 801c096:	b510      	push	{r4, lr}
 801c098:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c0a0:	4291      	cmp	r1, r2
 801c0a2:	d1f9      	bne.n	801c098 <memcpy+0xe>
 801c0a4:	bd10      	pop	{r4, pc}
	...

0801c0a8 <__assert_func>:
 801c0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c0aa:	4614      	mov	r4, r2
 801c0ac:	461a      	mov	r2, r3
 801c0ae:	4b09      	ldr	r3, [pc, #36]	@ (801c0d4 <__assert_func+0x2c>)
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	4605      	mov	r5, r0
 801c0b4:	68d8      	ldr	r0, [r3, #12]
 801c0b6:	b954      	cbnz	r4, 801c0ce <__assert_func+0x26>
 801c0b8:	4b07      	ldr	r3, [pc, #28]	@ (801c0d8 <__assert_func+0x30>)
 801c0ba:	461c      	mov	r4, r3
 801c0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c0c0:	9100      	str	r1, [sp, #0]
 801c0c2:	462b      	mov	r3, r5
 801c0c4:	4905      	ldr	r1, [pc, #20]	@ (801c0dc <__assert_func+0x34>)
 801c0c6:	f000 fd3f 	bl	801cb48 <fiprintf>
 801c0ca:	f000 fdd3 	bl	801cc74 <abort>
 801c0ce:	4b04      	ldr	r3, [pc, #16]	@ (801c0e0 <__assert_func+0x38>)
 801c0d0:	e7f4      	b.n	801c0bc <__assert_func+0x14>
 801c0d2:	bf00      	nop
 801c0d4:	240002b0 	.word	0x240002b0
 801c0d8:	0801dc01 	.word	0x0801dc01
 801c0dc:	0801dbd3 	.word	0x0801dbd3
 801c0e0:	0801dbc6 	.word	0x0801dbc6

0801c0e4 <__env_lock>:
 801c0e4:	4801      	ldr	r0, [pc, #4]	@ (801c0ec <__env_lock+0x8>)
 801c0e6:	f7ff bfc6 	b.w	801c076 <__retarget_lock_acquire_recursive>
 801c0ea:	bf00      	nop
 801c0ec:	2401320c 	.word	0x2401320c

0801c0f0 <__env_unlock>:
 801c0f0:	4801      	ldr	r0, [pc, #4]	@ (801c0f8 <__env_unlock+0x8>)
 801c0f2:	f7ff bfc1 	b.w	801c078 <__retarget_lock_release_recursive>
 801c0f6:	bf00      	nop
 801c0f8:	2401320c 	.word	0x2401320c

0801c0fc <_free_r>:
 801c0fc:	b538      	push	{r3, r4, r5, lr}
 801c0fe:	4605      	mov	r5, r0
 801c100:	2900      	cmp	r1, #0
 801c102:	d041      	beq.n	801c188 <_free_r+0x8c>
 801c104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c108:	1f0c      	subs	r4, r1, #4
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	bfb8      	it	lt
 801c10e:	18e4      	addlt	r4, r4, r3
 801c110:	f7ff fb30 	bl	801b774 <__malloc_lock>
 801c114:	4a1d      	ldr	r2, [pc, #116]	@ (801c18c <_free_r+0x90>)
 801c116:	6813      	ldr	r3, [r2, #0]
 801c118:	b933      	cbnz	r3, 801c128 <_free_r+0x2c>
 801c11a:	6063      	str	r3, [r4, #4]
 801c11c:	6014      	str	r4, [r2, #0]
 801c11e:	4628      	mov	r0, r5
 801c120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c124:	f7ff bb2c 	b.w	801b780 <__malloc_unlock>
 801c128:	42a3      	cmp	r3, r4
 801c12a:	d908      	bls.n	801c13e <_free_r+0x42>
 801c12c:	6820      	ldr	r0, [r4, #0]
 801c12e:	1821      	adds	r1, r4, r0
 801c130:	428b      	cmp	r3, r1
 801c132:	bf01      	itttt	eq
 801c134:	6819      	ldreq	r1, [r3, #0]
 801c136:	685b      	ldreq	r3, [r3, #4]
 801c138:	1809      	addeq	r1, r1, r0
 801c13a:	6021      	streq	r1, [r4, #0]
 801c13c:	e7ed      	b.n	801c11a <_free_r+0x1e>
 801c13e:	461a      	mov	r2, r3
 801c140:	685b      	ldr	r3, [r3, #4]
 801c142:	b10b      	cbz	r3, 801c148 <_free_r+0x4c>
 801c144:	42a3      	cmp	r3, r4
 801c146:	d9fa      	bls.n	801c13e <_free_r+0x42>
 801c148:	6811      	ldr	r1, [r2, #0]
 801c14a:	1850      	adds	r0, r2, r1
 801c14c:	42a0      	cmp	r0, r4
 801c14e:	d10b      	bne.n	801c168 <_free_r+0x6c>
 801c150:	6820      	ldr	r0, [r4, #0]
 801c152:	4401      	add	r1, r0
 801c154:	1850      	adds	r0, r2, r1
 801c156:	4283      	cmp	r3, r0
 801c158:	6011      	str	r1, [r2, #0]
 801c15a:	d1e0      	bne.n	801c11e <_free_r+0x22>
 801c15c:	6818      	ldr	r0, [r3, #0]
 801c15e:	685b      	ldr	r3, [r3, #4]
 801c160:	6053      	str	r3, [r2, #4]
 801c162:	4408      	add	r0, r1
 801c164:	6010      	str	r0, [r2, #0]
 801c166:	e7da      	b.n	801c11e <_free_r+0x22>
 801c168:	d902      	bls.n	801c170 <_free_r+0x74>
 801c16a:	230c      	movs	r3, #12
 801c16c:	602b      	str	r3, [r5, #0]
 801c16e:	e7d6      	b.n	801c11e <_free_r+0x22>
 801c170:	6820      	ldr	r0, [r4, #0]
 801c172:	1821      	adds	r1, r4, r0
 801c174:	428b      	cmp	r3, r1
 801c176:	bf04      	itt	eq
 801c178:	6819      	ldreq	r1, [r3, #0]
 801c17a:	685b      	ldreq	r3, [r3, #4]
 801c17c:	6063      	str	r3, [r4, #4]
 801c17e:	bf04      	itt	eq
 801c180:	1809      	addeq	r1, r1, r0
 801c182:	6021      	streq	r1, [r4, #0]
 801c184:	6054      	str	r4, [r2, #4]
 801c186:	e7ca      	b.n	801c11e <_free_r+0x22>
 801c188:	bd38      	pop	{r3, r4, r5, pc}
 801c18a:	bf00      	nop
 801c18c:	240130c8 	.word	0x240130c8

0801c190 <_malloc_usable_size_r>:
 801c190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c194:	1f18      	subs	r0, r3, #4
 801c196:	2b00      	cmp	r3, #0
 801c198:	bfbc      	itt	lt
 801c19a:	580b      	ldrlt	r3, [r1, r0]
 801c19c:	18c0      	addlt	r0, r0, r3
 801c19e:	4770      	bx	lr

0801c1a0 <__ssputs_r>:
 801c1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a4:	688e      	ldr	r6, [r1, #8]
 801c1a6:	461f      	mov	r7, r3
 801c1a8:	42be      	cmp	r6, r7
 801c1aa:	680b      	ldr	r3, [r1, #0]
 801c1ac:	4682      	mov	sl, r0
 801c1ae:	460c      	mov	r4, r1
 801c1b0:	4690      	mov	r8, r2
 801c1b2:	d82d      	bhi.n	801c210 <__ssputs_r+0x70>
 801c1b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c1b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c1bc:	d026      	beq.n	801c20c <__ssputs_r+0x6c>
 801c1be:	6965      	ldr	r5, [r4, #20]
 801c1c0:	6909      	ldr	r1, [r1, #16]
 801c1c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1c6:	eba3 0901 	sub.w	r9, r3, r1
 801c1ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c1ce:	1c7b      	adds	r3, r7, #1
 801c1d0:	444b      	add	r3, r9
 801c1d2:	106d      	asrs	r5, r5, #1
 801c1d4:	429d      	cmp	r5, r3
 801c1d6:	bf38      	it	cc
 801c1d8:	461d      	movcc	r5, r3
 801c1da:	0553      	lsls	r3, r2, #21
 801c1dc:	d527      	bpl.n	801c22e <__ssputs_r+0x8e>
 801c1de:	4629      	mov	r1, r5
 801c1e0:	f7ff fa48 	bl	801b674 <_malloc_r>
 801c1e4:	4606      	mov	r6, r0
 801c1e6:	b360      	cbz	r0, 801c242 <__ssputs_r+0xa2>
 801c1e8:	6921      	ldr	r1, [r4, #16]
 801c1ea:	464a      	mov	r2, r9
 801c1ec:	f7ff ff4d 	bl	801c08a <memcpy>
 801c1f0:	89a3      	ldrh	r3, [r4, #12]
 801c1f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c1fa:	81a3      	strh	r3, [r4, #12]
 801c1fc:	6126      	str	r6, [r4, #16]
 801c1fe:	6165      	str	r5, [r4, #20]
 801c200:	444e      	add	r6, r9
 801c202:	eba5 0509 	sub.w	r5, r5, r9
 801c206:	6026      	str	r6, [r4, #0]
 801c208:	60a5      	str	r5, [r4, #8]
 801c20a:	463e      	mov	r6, r7
 801c20c:	42be      	cmp	r6, r7
 801c20e:	d900      	bls.n	801c212 <__ssputs_r+0x72>
 801c210:	463e      	mov	r6, r7
 801c212:	6820      	ldr	r0, [r4, #0]
 801c214:	4632      	mov	r2, r6
 801c216:	4641      	mov	r1, r8
 801c218:	f7ff fe54 	bl	801bec4 <memmove>
 801c21c:	68a3      	ldr	r3, [r4, #8]
 801c21e:	1b9b      	subs	r3, r3, r6
 801c220:	60a3      	str	r3, [r4, #8]
 801c222:	6823      	ldr	r3, [r4, #0]
 801c224:	4433      	add	r3, r6
 801c226:	6023      	str	r3, [r4, #0]
 801c228:	2000      	movs	r0, #0
 801c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c22e:	462a      	mov	r2, r5
 801c230:	f7ff fb20 	bl	801b874 <_realloc_r>
 801c234:	4606      	mov	r6, r0
 801c236:	2800      	cmp	r0, #0
 801c238:	d1e0      	bne.n	801c1fc <__ssputs_r+0x5c>
 801c23a:	6921      	ldr	r1, [r4, #16]
 801c23c:	4650      	mov	r0, sl
 801c23e:	f7ff ff5d 	bl	801c0fc <_free_r>
 801c242:	230c      	movs	r3, #12
 801c244:	f8ca 3000 	str.w	r3, [sl]
 801c248:	89a3      	ldrh	r3, [r4, #12]
 801c24a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c24e:	81a3      	strh	r3, [r4, #12]
 801c250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c254:	e7e9      	b.n	801c22a <__ssputs_r+0x8a>
	...

0801c258 <_svfiprintf_r>:
 801c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c25c:	4698      	mov	r8, r3
 801c25e:	898b      	ldrh	r3, [r1, #12]
 801c260:	061b      	lsls	r3, r3, #24
 801c262:	b09d      	sub	sp, #116	@ 0x74
 801c264:	4607      	mov	r7, r0
 801c266:	460d      	mov	r5, r1
 801c268:	4614      	mov	r4, r2
 801c26a:	d510      	bpl.n	801c28e <_svfiprintf_r+0x36>
 801c26c:	690b      	ldr	r3, [r1, #16]
 801c26e:	b973      	cbnz	r3, 801c28e <_svfiprintf_r+0x36>
 801c270:	2140      	movs	r1, #64	@ 0x40
 801c272:	f7ff f9ff 	bl	801b674 <_malloc_r>
 801c276:	6028      	str	r0, [r5, #0]
 801c278:	6128      	str	r0, [r5, #16]
 801c27a:	b930      	cbnz	r0, 801c28a <_svfiprintf_r+0x32>
 801c27c:	230c      	movs	r3, #12
 801c27e:	603b      	str	r3, [r7, #0]
 801c280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c284:	b01d      	add	sp, #116	@ 0x74
 801c286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c28a:	2340      	movs	r3, #64	@ 0x40
 801c28c:	616b      	str	r3, [r5, #20]
 801c28e:	2300      	movs	r3, #0
 801c290:	9309      	str	r3, [sp, #36]	@ 0x24
 801c292:	2320      	movs	r3, #32
 801c294:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c298:	f8cd 800c 	str.w	r8, [sp, #12]
 801c29c:	2330      	movs	r3, #48	@ 0x30
 801c29e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c43c <_svfiprintf_r+0x1e4>
 801c2a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c2a6:	f04f 0901 	mov.w	r9, #1
 801c2aa:	4623      	mov	r3, r4
 801c2ac:	469a      	mov	sl, r3
 801c2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2b2:	b10a      	cbz	r2, 801c2b8 <_svfiprintf_r+0x60>
 801c2b4:	2a25      	cmp	r2, #37	@ 0x25
 801c2b6:	d1f9      	bne.n	801c2ac <_svfiprintf_r+0x54>
 801c2b8:	ebba 0b04 	subs.w	fp, sl, r4
 801c2bc:	d00b      	beq.n	801c2d6 <_svfiprintf_r+0x7e>
 801c2be:	465b      	mov	r3, fp
 801c2c0:	4622      	mov	r2, r4
 801c2c2:	4629      	mov	r1, r5
 801c2c4:	4638      	mov	r0, r7
 801c2c6:	f7ff ff6b 	bl	801c1a0 <__ssputs_r>
 801c2ca:	3001      	adds	r0, #1
 801c2cc:	f000 80a7 	beq.w	801c41e <_svfiprintf_r+0x1c6>
 801c2d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2d2:	445a      	add	r2, fp
 801c2d4:	9209      	str	r2, [sp, #36]	@ 0x24
 801c2d6:	f89a 3000 	ldrb.w	r3, [sl]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f000 809f 	beq.w	801c41e <_svfiprintf_r+0x1c6>
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2ea:	f10a 0a01 	add.w	sl, sl, #1
 801c2ee:	9304      	str	r3, [sp, #16]
 801c2f0:	9307      	str	r3, [sp, #28]
 801c2f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c2f6:	931a      	str	r3, [sp, #104]	@ 0x68
 801c2f8:	4654      	mov	r4, sl
 801c2fa:	2205      	movs	r2, #5
 801c2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c300:	484e      	ldr	r0, [pc, #312]	@ (801c43c <_svfiprintf_r+0x1e4>)
 801c302:	f7e4 f805 	bl	8000310 <memchr>
 801c306:	9a04      	ldr	r2, [sp, #16]
 801c308:	b9d8      	cbnz	r0, 801c342 <_svfiprintf_r+0xea>
 801c30a:	06d0      	lsls	r0, r2, #27
 801c30c:	bf44      	itt	mi
 801c30e:	2320      	movmi	r3, #32
 801c310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c314:	0711      	lsls	r1, r2, #28
 801c316:	bf44      	itt	mi
 801c318:	232b      	movmi	r3, #43	@ 0x2b
 801c31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c31e:	f89a 3000 	ldrb.w	r3, [sl]
 801c322:	2b2a      	cmp	r3, #42	@ 0x2a
 801c324:	d015      	beq.n	801c352 <_svfiprintf_r+0xfa>
 801c326:	9a07      	ldr	r2, [sp, #28]
 801c328:	4654      	mov	r4, sl
 801c32a:	2000      	movs	r0, #0
 801c32c:	f04f 0c0a 	mov.w	ip, #10
 801c330:	4621      	mov	r1, r4
 801c332:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c336:	3b30      	subs	r3, #48	@ 0x30
 801c338:	2b09      	cmp	r3, #9
 801c33a:	d94b      	bls.n	801c3d4 <_svfiprintf_r+0x17c>
 801c33c:	b1b0      	cbz	r0, 801c36c <_svfiprintf_r+0x114>
 801c33e:	9207      	str	r2, [sp, #28]
 801c340:	e014      	b.n	801c36c <_svfiprintf_r+0x114>
 801c342:	eba0 0308 	sub.w	r3, r0, r8
 801c346:	fa09 f303 	lsl.w	r3, r9, r3
 801c34a:	4313      	orrs	r3, r2
 801c34c:	9304      	str	r3, [sp, #16]
 801c34e:	46a2      	mov	sl, r4
 801c350:	e7d2      	b.n	801c2f8 <_svfiprintf_r+0xa0>
 801c352:	9b03      	ldr	r3, [sp, #12]
 801c354:	1d19      	adds	r1, r3, #4
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	9103      	str	r1, [sp, #12]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	bfbb      	ittet	lt
 801c35e:	425b      	neglt	r3, r3
 801c360:	f042 0202 	orrlt.w	r2, r2, #2
 801c364:	9307      	strge	r3, [sp, #28]
 801c366:	9307      	strlt	r3, [sp, #28]
 801c368:	bfb8      	it	lt
 801c36a:	9204      	strlt	r2, [sp, #16]
 801c36c:	7823      	ldrb	r3, [r4, #0]
 801c36e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c370:	d10a      	bne.n	801c388 <_svfiprintf_r+0x130>
 801c372:	7863      	ldrb	r3, [r4, #1]
 801c374:	2b2a      	cmp	r3, #42	@ 0x2a
 801c376:	d132      	bne.n	801c3de <_svfiprintf_r+0x186>
 801c378:	9b03      	ldr	r3, [sp, #12]
 801c37a:	1d1a      	adds	r2, r3, #4
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	9203      	str	r2, [sp, #12]
 801c380:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c384:	3402      	adds	r4, #2
 801c386:	9305      	str	r3, [sp, #20]
 801c388:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c44c <_svfiprintf_r+0x1f4>
 801c38c:	7821      	ldrb	r1, [r4, #0]
 801c38e:	2203      	movs	r2, #3
 801c390:	4650      	mov	r0, sl
 801c392:	f7e3 ffbd 	bl	8000310 <memchr>
 801c396:	b138      	cbz	r0, 801c3a8 <_svfiprintf_r+0x150>
 801c398:	9b04      	ldr	r3, [sp, #16]
 801c39a:	eba0 000a 	sub.w	r0, r0, sl
 801c39e:	2240      	movs	r2, #64	@ 0x40
 801c3a0:	4082      	lsls	r2, r0
 801c3a2:	4313      	orrs	r3, r2
 801c3a4:	3401      	adds	r4, #1
 801c3a6:	9304      	str	r3, [sp, #16]
 801c3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3ac:	4824      	ldr	r0, [pc, #144]	@ (801c440 <_svfiprintf_r+0x1e8>)
 801c3ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c3b2:	2206      	movs	r2, #6
 801c3b4:	f7e3 ffac 	bl	8000310 <memchr>
 801c3b8:	2800      	cmp	r0, #0
 801c3ba:	d036      	beq.n	801c42a <_svfiprintf_r+0x1d2>
 801c3bc:	4b21      	ldr	r3, [pc, #132]	@ (801c444 <_svfiprintf_r+0x1ec>)
 801c3be:	bb1b      	cbnz	r3, 801c408 <_svfiprintf_r+0x1b0>
 801c3c0:	9b03      	ldr	r3, [sp, #12]
 801c3c2:	3307      	adds	r3, #7
 801c3c4:	f023 0307 	bic.w	r3, r3, #7
 801c3c8:	3308      	adds	r3, #8
 801c3ca:	9303      	str	r3, [sp, #12]
 801c3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3ce:	4433      	add	r3, r6
 801c3d0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3d2:	e76a      	b.n	801c2aa <_svfiprintf_r+0x52>
 801c3d4:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3d8:	460c      	mov	r4, r1
 801c3da:	2001      	movs	r0, #1
 801c3dc:	e7a8      	b.n	801c330 <_svfiprintf_r+0xd8>
 801c3de:	2300      	movs	r3, #0
 801c3e0:	3401      	adds	r4, #1
 801c3e2:	9305      	str	r3, [sp, #20]
 801c3e4:	4619      	mov	r1, r3
 801c3e6:	f04f 0c0a 	mov.w	ip, #10
 801c3ea:	4620      	mov	r0, r4
 801c3ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3f0:	3a30      	subs	r2, #48	@ 0x30
 801c3f2:	2a09      	cmp	r2, #9
 801c3f4:	d903      	bls.n	801c3fe <_svfiprintf_r+0x1a6>
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d0c6      	beq.n	801c388 <_svfiprintf_r+0x130>
 801c3fa:	9105      	str	r1, [sp, #20]
 801c3fc:	e7c4      	b.n	801c388 <_svfiprintf_r+0x130>
 801c3fe:	fb0c 2101 	mla	r1, ip, r1, r2
 801c402:	4604      	mov	r4, r0
 801c404:	2301      	movs	r3, #1
 801c406:	e7f0      	b.n	801c3ea <_svfiprintf_r+0x192>
 801c408:	ab03      	add	r3, sp, #12
 801c40a:	9300      	str	r3, [sp, #0]
 801c40c:	462a      	mov	r2, r5
 801c40e:	4b0e      	ldr	r3, [pc, #56]	@ (801c448 <_svfiprintf_r+0x1f0>)
 801c410:	a904      	add	r1, sp, #16
 801c412:	4638      	mov	r0, r7
 801c414:	f3af 8000 	nop.w
 801c418:	1c42      	adds	r2, r0, #1
 801c41a:	4606      	mov	r6, r0
 801c41c:	d1d6      	bne.n	801c3cc <_svfiprintf_r+0x174>
 801c41e:	89ab      	ldrh	r3, [r5, #12]
 801c420:	065b      	lsls	r3, r3, #25
 801c422:	f53f af2d 	bmi.w	801c280 <_svfiprintf_r+0x28>
 801c426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c428:	e72c      	b.n	801c284 <_svfiprintf_r+0x2c>
 801c42a:	ab03      	add	r3, sp, #12
 801c42c:	9300      	str	r3, [sp, #0]
 801c42e:	462a      	mov	r2, r5
 801c430:	4b05      	ldr	r3, [pc, #20]	@ (801c448 <_svfiprintf_r+0x1f0>)
 801c432:	a904      	add	r1, sp, #16
 801c434:	4638      	mov	r0, r7
 801c436:	f000 f9bb 	bl	801c7b0 <_printf_i>
 801c43a:	e7ed      	b.n	801c418 <_svfiprintf_r+0x1c0>
 801c43c:	0801dc02 	.word	0x0801dc02
 801c440:	0801dc0c 	.word	0x0801dc0c
 801c444:	00000000 	.word	0x00000000
 801c448:	0801c1a1 	.word	0x0801c1a1
 801c44c:	0801dc08 	.word	0x0801dc08

0801c450 <__sfputc_r>:
 801c450:	6893      	ldr	r3, [r2, #8]
 801c452:	3b01      	subs	r3, #1
 801c454:	2b00      	cmp	r3, #0
 801c456:	b410      	push	{r4}
 801c458:	6093      	str	r3, [r2, #8]
 801c45a:	da08      	bge.n	801c46e <__sfputc_r+0x1e>
 801c45c:	6994      	ldr	r4, [r2, #24]
 801c45e:	42a3      	cmp	r3, r4
 801c460:	db01      	blt.n	801c466 <__sfputc_r+0x16>
 801c462:	290a      	cmp	r1, #10
 801c464:	d103      	bne.n	801c46e <__sfputc_r+0x1e>
 801c466:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c46a:	f7ff bc87 	b.w	801bd7c <__swbuf_r>
 801c46e:	6813      	ldr	r3, [r2, #0]
 801c470:	1c58      	adds	r0, r3, #1
 801c472:	6010      	str	r0, [r2, #0]
 801c474:	7019      	strb	r1, [r3, #0]
 801c476:	4608      	mov	r0, r1
 801c478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c47c:	4770      	bx	lr

0801c47e <__sfputs_r>:
 801c47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c480:	4606      	mov	r6, r0
 801c482:	460f      	mov	r7, r1
 801c484:	4614      	mov	r4, r2
 801c486:	18d5      	adds	r5, r2, r3
 801c488:	42ac      	cmp	r4, r5
 801c48a:	d101      	bne.n	801c490 <__sfputs_r+0x12>
 801c48c:	2000      	movs	r0, #0
 801c48e:	e007      	b.n	801c4a0 <__sfputs_r+0x22>
 801c490:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c494:	463a      	mov	r2, r7
 801c496:	4630      	mov	r0, r6
 801c498:	f7ff ffda 	bl	801c450 <__sfputc_r>
 801c49c:	1c43      	adds	r3, r0, #1
 801c49e:	d1f3      	bne.n	801c488 <__sfputs_r+0xa>
 801c4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c4a4 <_vfiprintf_r>:
 801c4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a8:	460d      	mov	r5, r1
 801c4aa:	b09d      	sub	sp, #116	@ 0x74
 801c4ac:	4614      	mov	r4, r2
 801c4ae:	4698      	mov	r8, r3
 801c4b0:	4606      	mov	r6, r0
 801c4b2:	b118      	cbz	r0, 801c4bc <_vfiprintf_r+0x18>
 801c4b4:	6a03      	ldr	r3, [r0, #32]
 801c4b6:	b90b      	cbnz	r3, 801c4bc <_vfiprintf_r+0x18>
 801c4b8:	f7ff fb0e 	bl	801bad8 <__sinit>
 801c4bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c4be:	07d9      	lsls	r1, r3, #31
 801c4c0:	d405      	bmi.n	801c4ce <_vfiprintf_r+0x2a>
 801c4c2:	89ab      	ldrh	r3, [r5, #12]
 801c4c4:	059a      	lsls	r2, r3, #22
 801c4c6:	d402      	bmi.n	801c4ce <_vfiprintf_r+0x2a>
 801c4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c4ca:	f7ff fdd4 	bl	801c076 <__retarget_lock_acquire_recursive>
 801c4ce:	89ab      	ldrh	r3, [r5, #12]
 801c4d0:	071b      	lsls	r3, r3, #28
 801c4d2:	d501      	bpl.n	801c4d8 <_vfiprintf_r+0x34>
 801c4d4:	692b      	ldr	r3, [r5, #16]
 801c4d6:	b99b      	cbnz	r3, 801c500 <_vfiprintf_r+0x5c>
 801c4d8:	4629      	mov	r1, r5
 801c4da:	4630      	mov	r0, r6
 801c4dc:	f7ff fc8c 	bl	801bdf8 <__swsetup_r>
 801c4e0:	b170      	cbz	r0, 801c500 <_vfiprintf_r+0x5c>
 801c4e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c4e4:	07dc      	lsls	r4, r3, #31
 801c4e6:	d504      	bpl.n	801c4f2 <_vfiprintf_r+0x4e>
 801c4e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c4ec:	b01d      	add	sp, #116	@ 0x74
 801c4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4f2:	89ab      	ldrh	r3, [r5, #12]
 801c4f4:	0598      	lsls	r0, r3, #22
 801c4f6:	d4f7      	bmi.n	801c4e8 <_vfiprintf_r+0x44>
 801c4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c4fa:	f7ff fdbd 	bl	801c078 <__retarget_lock_release_recursive>
 801c4fe:	e7f3      	b.n	801c4e8 <_vfiprintf_r+0x44>
 801c500:	2300      	movs	r3, #0
 801c502:	9309      	str	r3, [sp, #36]	@ 0x24
 801c504:	2320      	movs	r3, #32
 801c506:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c50a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c50e:	2330      	movs	r3, #48	@ 0x30
 801c510:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c6c0 <_vfiprintf_r+0x21c>
 801c514:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c518:	f04f 0901 	mov.w	r9, #1
 801c51c:	4623      	mov	r3, r4
 801c51e:	469a      	mov	sl, r3
 801c520:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c524:	b10a      	cbz	r2, 801c52a <_vfiprintf_r+0x86>
 801c526:	2a25      	cmp	r2, #37	@ 0x25
 801c528:	d1f9      	bne.n	801c51e <_vfiprintf_r+0x7a>
 801c52a:	ebba 0b04 	subs.w	fp, sl, r4
 801c52e:	d00b      	beq.n	801c548 <_vfiprintf_r+0xa4>
 801c530:	465b      	mov	r3, fp
 801c532:	4622      	mov	r2, r4
 801c534:	4629      	mov	r1, r5
 801c536:	4630      	mov	r0, r6
 801c538:	f7ff ffa1 	bl	801c47e <__sfputs_r>
 801c53c:	3001      	adds	r0, #1
 801c53e:	f000 80a7 	beq.w	801c690 <_vfiprintf_r+0x1ec>
 801c542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c544:	445a      	add	r2, fp
 801c546:	9209      	str	r2, [sp, #36]	@ 0x24
 801c548:	f89a 3000 	ldrb.w	r3, [sl]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	f000 809f 	beq.w	801c690 <_vfiprintf_r+0x1ec>
 801c552:	2300      	movs	r3, #0
 801c554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c55c:	f10a 0a01 	add.w	sl, sl, #1
 801c560:	9304      	str	r3, [sp, #16]
 801c562:	9307      	str	r3, [sp, #28]
 801c564:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c568:	931a      	str	r3, [sp, #104]	@ 0x68
 801c56a:	4654      	mov	r4, sl
 801c56c:	2205      	movs	r2, #5
 801c56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c572:	4853      	ldr	r0, [pc, #332]	@ (801c6c0 <_vfiprintf_r+0x21c>)
 801c574:	f7e3 fecc 	bl	8000310 <memchr>
 801c578:	9a04      	ldr	r2, [sp, #16]
 801c57a:	b9d8      	cbnz	r0, 801c5b4 <_vfiprintf_r+0x110>
 801c57c:	06d1      	lsls	r1, r2, #27
 801c57e:	bf44      	itt	mi
 801c580:	2320      	movmi	r3, #32
 801c582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c586:	0713      	lsls	r3, r2, #28
 801c588:	bf44      	itt	mi
 801c58a:	232b      	movmi	r3, #43	@ 0x2b
 801c58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c590:	f89a 3000 	ldrb.w	r3, [sl]
 801c594:	2b2a      	cmp	r3, #42	@ 0x2a
 801c596:	d015      	beq.n	801c5c4 <_vfiprintf_r+0x120>
 801c598:	9a07      	ldr	r2, [sp, #28]
 801c59a:	4654      	mov	r4, sl
 801c59c:	2000      	movs	r0, #0
 801c59e:	f04f 0c0a 	mov.w	ip, #10
 801c5a2:	4621      	mov	r1, r4
 801c5a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c5a8:	3b30      	subs	r3, #48	@ 0x30
 801c5aa:	2b09      	cmp	r3, #9
 801c5ac:	d94b      	bls.n	801c646 <_vfiprintf_r+0x1a2>
 801c5ae:	b1b0      	cbz	r0, 801c5de <_vfiprintf_r+0x13a>
 801c5b0:	9207      	str	r2, [sp, #28]
 801c5b2:	e014      	b.n	801c5de <_vfiprintf_r+0x13a>
 801c5b4:	eba0 0308 	sub.w	r3, r0, r8
 801c5b8:	fa09 f303 	lsl.w	r3, r9, r3
 801c5bc:	4313      	orrs	r3, r2
 801c5be:	9304      	str	r3, [sp, #16]
 801c5c0:	46a2      	mov	sl, r4
 801c5c2:	e7d2      	b.n	801c56a <_vfiprintf_r+0xc6>
 801c5c4:	9b03      	ldr	r3, [sp, #12]
 801c5c6:	1d19      	adds	r1, r3, #4
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	9103      	str	r1, [sp, #12]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	bfbb      	ittet	lt
 801c5d0:	425b      	neglt	r3, r3
 801c5d2:	f042 0202 	orrlt.w	r2, r2, #2
 801c5d6:	9307      	strge	r3, [sp, #28]
 801c5d8:	9307      	strlt	r3, [sp, #28]
 801c5da:	bfb8      	it	lt
 801c5dc:	9204      	strlt	r2, [sp, #16]
 801c5de:	7823      	ldrb	r3, [r4, #0]
 801c5e0:	2b2e      	cmp	r3, #46	@ 0x2e
 801c5e2:	d10a      	bne.n	801c5fa <_vfiprintf_r+0x156>
 801c5e4:	7863      	ldrb	r3, [r4, #1]
 801c5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c5e8:	d132      	bne.n	801c650 <_vfiprintf_r+0x1ac>
 801c5ea:	9b03      	ldr	r3, [sp, #12]
 801c5ec:	1d1a      	adds	r2, r3, #4
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	9203      	str	r2, [sp, #12]
 801c5f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c5f6:	3402      	adds	r4, #2
 801c5f8:	9305      	str	r3, [sp, #20]
 801c5fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c6d0 <_vfiprintf_r+0x22c>
 801c5fe:	7821      	ldrb	r1, [r4, #0]
 801c600:	2203      	movs	r2, #3
 801c602:	4650      	mov	r0, sl
 801c604:	f7e3 fe84 	bl	8000310 <memchr>
 801c608:	b138      	cbz	r0, 801c61a <_vfiprintf_r+0x176>
 801c60a:	9b04      	ldr	r3, [sp, #16]
 801c60c:	eba0 000a 	sub.w	r0, r0, sl
 801c610:	2240      	movs	r2, #64	@ 0x40
 801c612:	4082      	lsls	r2, r0
 801c614:	4313      	orrs	r3, r2
 801c616:	3401      	adds	r4, #1
 801c618:	9304      	str	r3, [sp, #16]
 801c61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c61e:	4829      	ldr	r0, [pc, #164]	@ (801c6c4 <_vfiprintf_r+0x220>)
 801c620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c624:	2206      	movs	r2, #6
 801c626:	f7e3 fe73 	bl	8000310 <memchr>
 801c62a:	2800      	cmp	r0, #0
 801c62c:	d03f      	beq.n	801c6ae <_vfiprintf_r+0x20a>
 801c62e:	4b26      	ldr	r3, [pc, #152]	@ (801c6c8 <_vfiprintf_r+0x224>)
 801c630:	bb1b      	cbnz	r3, 801c67a <_vfiprintf_r+0x1d6>
 801c632:	9b03      	ldr	r3, [sp, #12]
 801c634:	3307      	adds	r3, #7
 801c636:	f023 0307 	bic.w	r3, r3, #7
 801c63a:	3308      	adds	r3, #8
 801c63c:	9303      	str	r3, [sp, #12]
 801c63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c640:	443b      	add	r3, r7
 801c642:	9309      	str	r3, [sp, #36]	@ 0x24
 801c644:	e76a      	b.n	801c51c <_vfiprintf_r+0x78>
 801c646:	fb0c 3202 	mla	r2, ip, r2, r3
 801c64a:	460c      	mov	r4, r1
 801c64c:	2001      	movs	r0, #1
 801c64e:	e7a8      	b.n	801c5a2 <_vfiprintf_r+0xfe>
 801c650:	2300      	movs	r3, #0
 801c652:	3401      	adds	r4, #1
 801c654:	9305      	str	r3, [sp, #20]
 801c656:	4619      	mov	r1, r3
 801c658:	f04f 0c0a 	mov.w	ip, #10
 801c65c:	4620      	mov	r0, r4
 801c65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c662:	3a30      	subs	r2, #48	@ 0x30
 801c664:	2a09      	cmp	r2, #9
 801c666:	d903      	bls.n	801c670 <_vfiprintf_r+0x1cc>
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d0c6      	beq.n	801c5fa <_vfiprintf_r+0x156>
 801c66c:	9105      	str	r1, [sp, #20]
 801c66e:	e7c4      	b.n	801c5fa <_vfiprintf_r+0x156>
 801c670:	fb0c 2101 	mla	r1, ip, r1, r2
 801c674:	4604      	mov	r4, r0
 801c676:	2301      	movs	r3, #1
 801c678:	e7f0      	b.n	801c65c <_vfiprintf_r+0x1b8>
 801c67a:	ab03      	add	r3, sp, #12
 801c67c:	9300      	str	r3, [sp, #0]
 801c67e:	462a      	mov	r2, r5
 801c680:	4b12      	ldr	r3, [pc, #72]	@ (801c6cc <_vfiprintf_r+0x228>)
 801c682:	a904      	add	r1, sp, #16
 801c684:	4630      	mov	r0, r6
 801c686:	f3af 8000 	nop.w
 801c68a:	4607      	mov	r7, r0
 801c68c:	1c78      	adds	r0, r7, #1
 801c68e:	d1d6      	bne.n	801c63e <_vfiprintf_r+0x19a>
 801c690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c692:	07d9      	lsls	r1, r3, #31
 801c694:	d405      	bmi.n	801c6a2 <_vfiprintf_r+0x1fe>
 801c696:	89ab      	ldrh	r3, [r5, #12]
 801c698:	059a      	lsls	r2, r3, #22
 801c69a:	d402      	bmi.n	801c6a2 <_vfiprintf_r+0x1fe>
 801c69c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c69e:	f7ff fceb 	bl	801c078 <__retarget_lock_release_recursive>
 801c6a2:	89ab      	ldrh	r3, [r5, #12]
 801c6a4:	065b      	lsls	r3, r3, #25
 801c6a6:	f53f af1f 	bmi.w	801c4e8 <_vfiprintf_r+0x44>
 801c6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c6ac:	e71e      	b.n	801c4ec <_vfiprintf_r+0x48>
 801c6ae:	ab03      	add	r3, sp, #12
 801c6b0:	9300      	str	r3, [sp, #0]
 801c6b2:	462a      	mov	r2, r5
 801c6b4:	4b05      	ldr	r3, [pc, #20]	@ (801c6cc <_vfiprintf_r+0x228>)
 801c6b6:	a904      	add	r1, sp, #16
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f000 f879 	bl	801c7b0 <_printf_i>
 801c6be:	e7e4      	b.n	801c68a <_vfiprintf_r+0x1e6>
 801c6c0:	0801dc02 	.word	0x0801dc02
 801c6c4:	0801dc0c 	.word	0x0801dc0c
 801c6c8:	00000000 	.word	0x00000000
 801c6cc:	0801c47f 	.word	0x0801c47f
 801c6d0:	0801dc08 	.word	0x0801dc08

0801c6d4 <_printf_common>:
 801c6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6d8:	4616      	mov	r6, r2
 801c6da:	4698      	mov	r8, r3
 801c6dc:	688a      	ldr	r2, [r1, #8]
 801c6de:	690b      	ldr	r3, [r1, #16]
 801c6e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c6e4:	4293      	cmp	r3, r2
 801c6e6:	bfb8      	it	lt
 801c6e8:	4613      	movlt	r3, r2
 801c6ea:	6033      	str	r3, [r6, #0]
 801c6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c6f0:	4607      	mov	r7, r0
 801c6f2:	460c      	mov	r4, r1
 801c6f4:	b10a      	cbz	r2, 801c6fa <_printf_common+0x26>
 801c6f6:	3301      	adds	r3, #1
 801c6f8:	6033      	str	r3, [r6, #0]
 801c6fa:	6823      	ldr	r3, [r4, #0]
 801c6fc:	0699      	lsls	r1, r3, #26
 801c6fe:	bf42      	ittt	mi
 801c700:	6833      	ldrmi	r3, [r6, #0]
 801c702:	3302      	addmi	r3, #2
 801c704:	6033      	strmi	r3, [r6, #0]
 801c706:	6825      	ldr	r5, [r4, #0]
 801c708:	f015 0506 	ands.w	r5, r5, #6
 801c70c:	d106      	bne.n	801c71c <_printf_common+0x48>
 801c70e:	f104 0a19 	add.w	sl, r4, #25
 801c712:	68e3      	ldr	r3, [r4, #12]
 801c714:	6832      	ldr	r2, [r6, #0]
 801c716:	1a9b      	subs	r3, r3, r2
 801c718:	42ab      	cmp	r3, r5
 801c71a:	dc26      	bgt.n	801c76a <_printf_common+0x96>
 801c71c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c720:	6822      	ldr	r2, [r4, #0]
 801c722:	3b00      	subs	r3, #0
 801c724:	bf18      	it	ne
 801c726:	2301      	movne	r3, #1
 801c728:	0692      	lsls	r2, r2, #26
 801c72a:	d42b      	bmi.n	801c784 <_printf_common+0xb0>
 801c72c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c730:	4641      	mov	r1, r8
 801c732:	4638      	mov	r0, r7
 801c734:	47c8      	blx	r9
 801c736:	3001      	adds	r0, #1
 801c738:	d01e      	beq.n	801c778 <_printf_common+0xa4>
 801c73a:	6823      	ldr	r3, [r4, #0]
 801c73c:	6922      	ldr	r2, [r4, #16]
 801c73e:	f003 0306 	and.w	r3, r3, #6
 801c742:	2b04      	cmp	r3, #4
 801c744:	bf02      	ittt	eq
 801c746:	68e5      	ldreq	r5, [r4, #12]
 801c748:	6833      	ldreq	r3, [r6, #0]
 801c74a:	1aed      	subeq	r5, r5, r3
 801c74c:	68a3      	ldr	r3, [r4, #8]
 801c74e:	bf0c      	ite	eq
 801c750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c754:	2500      	movne	r5, #0
 801c756:	4293      	cmp	r3, r2
 801c758:	bfc4      	itt	gt
 801c75a:	1a9b      	subgt	r3, r3, r2
 801c75c:	18ed      	addgt	r5, r5, r3
 801c75e:	2600      	movs	r6, #0
 801c760:	341a      	adds	r4, #26
 801c762:	42b5      	cmp	r5, r6
 801c764:	d11a      	bne.n	801c79c <_printf_common+0xc8>
 801c766:	2000      	movs	r0, #0
 801c768:	e008      	b.n	801c77c <_printf_common+0xa8>
 801c76a:	2301      	movs	r3, #1
 801c76c:	4652      	mov	r2, sl
 801c76e:	4641      	mov	r1, r8
 801c770:	4638      	mov	r0, r7
 801c772:	47c8      	blx	r9
 801c774:	3001      	adds	r0, #1
 801c776:	d103      	bne.n	801c780 <_printf_common+0xac>
 801c778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c780:	3501      	adds	r5, #1
 801c782:	e7c6      	b.n	801c712 <_printf_common+0x3e>
 801c784:	18e1      	adds	r1, r4, r3
 801c786:	1c5a      	adds	r2, r3, #1
 801c788:	2030      	movs	r0, #48	@ 0x30
 801c78a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c78e:	4422      	add	r2, r4
 801c790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c798:	3302      	adds	r3, #2
 801c79a:	e7c7      	b.n	801c72c <_printf_common+0x58>
 801c79c:	2301      	movs	r3, #1
 801c79e:	4622      	mov	r2, r4
 801c7a0:	4641      	mov	r1, r8
 801c7a2:	4638      	mov	r0, r7
 801c7a4:	47c8      	blx	r9
 801c7a6:	3001      	adds	r0, #1
 801c7a8:	d0e6      	beq.n	801c778 <_printf_common+0xa4>
 801c7aa:	3601      	adds	r6, #1
 801c7ac:	e7d9      	b.n	801c762 <_printf_common+0x8e>
	...

0801c7b0 <_printf_i>:
 801c7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c7b4:	7e0f      	ldrb	r7, [r1, #24]
 801c7b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c7b8:	2f78      	cmp	r7, #120	@ 0x78
 801c7ba:	4691      	mov	r9, r2
 801c7bc:	4680      	mov	r8, r0
 801c7be:	460c      	mov	r4, r1
 801c7c0:	469a      	mov	sl, r3
 801c7c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c7c6:	d807      	bhi.n	801c7d8 <_printf_i+0x28>
 801c7c8:	2f62      	cmp	r7, #98	@ 0x62
 801c7ca:	d80a      	bhi.n	801c7e2 <_printf_i+0x32>
 801c7cc:	2f00      	cmp	r7, #0
 801c7ce:	f000 80d2 	beq.w	801c976 <_printf_i+0x1c6>
 801c7d2:	2f58      	cmp	r7, #88	@ 0x58
 801c7d4:	f000 80b9 	beq.w	801c94a <_printf_i+0x19a>
 801c7d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c7dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c7e0:	e03a      	b.n	801c858 <_printf_i+0xa8>
 801c7e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c7e6:	2b15      	cmp	r3, #21
 801c7e8:	d8f6      	bhi.n	801c7d8 <_printf_i+0x28>
 801c7ea:	a101      	add	r1, pc, #4	@ (adr r1, 801c7f0 <_printf_i+0x40>)
 801c7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c7f0:	0801c849 	.word	0x0801c849
 801c7f4:	0801c85d 	.word	0x0801c85d
 801c7f8:	0801c7d9 	.word	0x0801c7d9
 801c7fc:	0801c7d9 	.word	0x0801c7d9
 801c800:	0801c7d9 	.word	0x0801c7d9
 801c804:	0801c7d9 	.word	0x0801c7d9
 801c808:	0801c85d 	.word	0x0801c85d
 801c80c:	0801c7d9 	.word	0x0801c7d9
 801c810:	0801c7d9 	.word	0x0801c7d9
 801c814:	0801c7d9 	.word	0x0801c7d9
 801c818:	0801c7d9 	.word	0x0801c7d9
 801c81c:	0801c95d 	.word	0x0801c95d
 801c820:	0801c887 	.word	0x0801c887
 801c824:	0801c917 	.word	0x0801c917
 801c828:	0801c7d9 	.word	0x0801c7d9
 801c82c:	0801c7d9 	.word	0x0801c7d9
 801c830:	0801c97f 	.word	0x0801c97f
 801c834:	0801c7d9 	.word	0x0801c7d9
 801c838:	0801c887 	.word	0x0801c887
 801c83c:	0801c7d9 	.word	0x0801c7d9
 801c840:	0801c7d9 	.word	0x0801c7d9
 801c844:	0801c91f 	.word	0x0801c91f
 801c848:	6833      	ldr	r3, [r6, #0]
 801c84a:	1d1a      	adds	r2, r3, #4
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	6032      	str	r2, [r6, #0]
 801c850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c858:	2301      	movs	r3, #1
 801c85a:	e09d      	b.n	801c998 <_printf_i+0x1e8>
 801c85c:	6833      	ldr	r3, [r6, #0]
 801c85e:	6820      	ldr	r0, [r4, #0]
 801c860:	1d19      	adds	r1, r3, #4
 801c862:	6031      	str	r1, [r6, #0]
 801c864:	0606      	lsls	r6, r0, #24
 801c866:	d501      	bpl.n	801c86c <_printf_i+0xbc>
 801c868:	681d      	ldr	r5, [r3, #0]
 801c86a:	e003      	b.n	801c874 <_printf_i+0xc4>
 801c86c:	0645      	lsls	r5, r0, #25
 801c86e:	d5fb      	bpl.n	801c868 <_printf_i+0xb8>
 801c870:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c874:	2d00      	cmp	r5, #0
 801c876:	da03      	bge.n	801c880 <_printf_i+0xd0>
 801c878:	232d      	movs	r3, #45	@ 0x2d
 801c87a:	426d      	negs	r5, r5
 801c87c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c880:	4859      	ldr	r0, [pc, #356]	@ (801c9e8 <_printf_i+0x238>)
 801c882:	230a      	movs	r3, #10
 801c884:	e011      	b.n	801c8aa <_printf_i+0xfa>
 801c886:	6821      	ldr	r1, [r4, #0]
 801c888:	6833      	ldr	r3, [r6, #0]
 801c88a:	0608      	lsls	r0, r1, #24
 801c88c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c890:	d402      	bmi.n	801c898 <_printf_i+0xe8>
 801c892:	0649      	lsls	r1, r1, #25
 801c894:	bf48      	it	mi
 801c896:	b2ad      	uxthmi	r5, r5
 801c898:	2f6f      	cmp	r7, #111	@ 0x6f
 801c89a:	4853      	ldr	r0, [pc, #332]	@ (801c9e8 <_printf_i+0x238>)
 801c89c:	6033      	str	r3, [r6, #0]
 801c89e:	bf14      	ite	ne
 801c8a0:	230a      	movne	r3, #10
 801c8a2:	2308      	moveq	r3, #8
 801c8a4:	2100      	movs	r1, #0
 801c8a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c8aa:	6866      	ldr	r6, [r4, #4]
 801c8ac:	60a6      	str	r6, [r4, #8]
 801c8ae:	2e00      	cmp	r6, #0
 801c8b0:	bfa2      	ittt	ge
 801c8b2:	6821      	ldrge	r1, [r4, #0]
 801c8b4:	f021 0104 	bicge.w	r1, r1, #4
 801c8b8:	6021      	strge	r1, [r4, #0]
 801c8ba:	b90d      	cbnz	r5, 801c8c0 <_printf_i+0x110>
 801c8bc:	2e00      	cmp	r6, #0
 801c8be:	d04b      	beq.n	801c958 <_printf_i+0x1a8>
 801c8c0:	4616      	mov	r6, r2
 801c8c2:	fbb5 f1f3 	udiv	r1, r5, r3
 801c8c6:	fb03 5711 	mls	r7, r3, r1, r5
 801c8ca:	5dc7      	ldrb	r7, [r0, r7]
 801c8cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c8d0:	462f      	mov	r7, r5
 801c8d2:	42bb      	cmp	r3, r7
 801c8d4:	460d      	mov	r5, r1
 801c8d6:	d9f4      	bls.n	801c8c2 <_printf_i+0x112>
 801c8d8:	2b08      	cmp	r3, #8
 801c8da:	d10b      	bne.n	801c8f4 <_printf_i+0x144>
 801c8dc:	6823      	ldr	r3, [r4, #0]
 801c8de:	07df      	lsls	r7, r3, #31
 801c8e0:	d508      	bpl.n	801c8f4 <_printf_i+0x144>
 801c8e2:	6923      	ldr	r3, [r4, #16]
 801c8e4:	6861      	ldr	r1, [r4, #4]
 801c8e6:	4299      	cmp	r1, r3
 801c8e8:	bfde      	ittt	le
 801c8ea:	2330      	movle	r3, #48	@ 0x30
 801c8ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c8f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801c8f4:	1b92      	subs	r2, r2, r6
 801c8f6:	6122      	str	r2, [r4, #16]
 801c8f8:	f8cd a000 	str.w	sl, [sp]
 801c8fc:	464b      	mov	r3, r9
 801c8fe:	aa03      	add	r2, sp, #12
 801c900:	4621      	mov	r1, r4
 801c902:	4640      	mov	r0, r8
 801c904:	f7ff fee6 	bl	801c6d4 <_printf_common>
 801c908:	3001      	adds	r0, #1
 801c90a:	d14a      	bne.n	801c9a2 <_printf_i+0x1f2>
 801c90c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c910:	b004      	add	sp, #16
 801c912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c916:	6823      	ldr	r3, [r4, #0]
 801c918:	f043 0320 	orr.w	r3, r3, #32
 801c91c:	6023      	str	r3, [r4, #0]
 801c91e:	4833      	ldr	r0, [pc, #204]	@ (801c9ec <_printf_i+0x23c>)
 801c920:	2778      	movs	r7, #120	@ 0x78
 801c922:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c926:	6823      	ldr	r3, [r4, #0]
 801c928:	6831      	ldr	r1, [r6, #0]
 801c92a:	061f      	lsls	r7, r3, #24
 801c92c:	f851 5b04 	ldr.w	r5, [r1], #4
 801c930:	d402      	bmi.n	801c938 <_printf_i+0x188>
 801c932:	065f      	lsls	r7, r3, #25
 801c934:	bf48      	it	mi
 801c936:	b2ad      	uxthmi	r5, r5
 801c938:	6031      	str	r1, [r6, #0]
 801c93a:	07d9      	lsls	r1, r3, #31
 801c93c:	bf44      	itt	mi
 801c93e:	f043 0320 	orrmi.w	r3, r3, #32
 801c942:	6023      	strmi	r3, [r4, #0]
 801c944:	b11d      	cbz	r5, 801c94e <_printf_i+0x19e>
 801c946:	2310      	movs	r3, #16
 801c948:	e7ac      	b.n	801c8a4 <_printf_i+0xf4>
 801c94a:	4827      	ldr	r0, [pc, #156]	@ (801c9e8 <_printf_i+0x238>)
 801c94c:	e7e9      	b.n	801c922 <_printf_i+0x172>
 801c94e:	6823      	ldr	r3, [r4, #0]
 801c950:	f023 0320 	bic.w	r3, r3, #32
 801c954:	6023      	str	r3, [r4, #0]
 801c956:	e7f6      	b.n	801c946 <_printf_i+0x196>
 801c958:	4616      	mov	r6, r2
 801c95a:	e7bd      	b.n	801c8d8 <_printf_i+0x128>
 801c95c:	6833      	ldr	r3, [r6, #0]
 801c95e:	6825      	ldr	r5, [r4, #0]
 801c960:	6961      	ldr	r1, [r4, #20]
 801c962:	1d18      	adds	r0, r3, #4
 801c964:	6030      	str	r0, [r6, #0]
 801c966:	062e      	lsls	r6, r5, #24
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	d501      	bpl.n	801c970 <_printf_i+0x1c0>
 801c96c:	6019      	str	r1, [r3, #0]
 801c96e:	e002      	b.n	801c976 <_printf_i+0x1c6>
 801c970:	0668      	lsls	r0, r5, #25
 801c972:	d5fb      	bpl.n	801c96c <_printf_i+0x1bc>
 801c974:	8019      	strh	r1, [r3, #0]
 801c976:	2300      	movs	r3, #0
 801c978:	6123      	str	r3, [r4, #16]
 801c97a:	4616      	mov	r6, r2
 801c97c:	e7bc      	b.n	801c8f8 <_printf_i+0x148>
 801c97e:	6833      	ldr	r3, [r6, #0]
 801c980:	1d1a      	adds	r2, r3, #4
 801c982:	6032      	str	r2, [r6, #0]
 801c984:	681e      	ldr	r6, [r3, #0]
 801c986:	6862      	ldr	r2, [r4, #4]
 801c988:	2100      	movs	r1, #0
 801c98a:	4630      	mov	r0, r6
 801c98c:	f7e3 fcc0 	bl	8000310 <memchr>
 801c990:	b108      	cbz	r0, 801c996 <_printf_i+0x1e6>
 801c992:	1b80      	subs	r0, r0, r6
 801c994:	6060      	str	r0, [r4, #4]
 801c996:	6863      	ldr	r3, [r4, #4]
 801c998:	6123      	str	r3, [r4, #16]
 801c99a:	2300      	movs	r3, #0
 801c99c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c9a0:	e7aa      	b.n	801c8f8 <_printf_i+0x148>
 801c9a2:	6923      	ldr	r3, [r4, #16]
 801c9a4:	4632      	mov	r2, r6
 801c9a6:	4649      	mov	r1, r9
 801c9a8:	4640      	mov	r0, r8
 801c9aa:	47d0      	blx	sl
 801c9ac:	3001      	adds	r0, #1
 801c9ae:	d0ad      	beq.n	801c90c <_printf_i+0x15c>
 801c9b0:	6823      	ldr	r3, [r4, #0]
 801c9b2:	079b      	lsls	r3, r3, #30
 801c9b4:	d413      	bmi.n	801c9de <_printf_i+0x22e>
 801c9b6:	68e0      	ldr	r0, [r4, #12]
 801c9b8:	9b03      	ldr	r3, [sp, #12]
 801c9ba:	4298      	cmp	r0, r3
 801c9bc:	bfb8      	it	lt
 801c9be:	4618      	movlt	r0, r3
 801c9c0:	e7a6      	b.n	801c910 <_printf_i+0x160>
 801c9c2:	2301      	movs	r3, #1
 801c9c4:	4632      	mov	r2, r6
 801c9c6:	4649      	mov	r1, r9
 801c9c8:	4640      	mov	r0, r8
 801c9ca:	47d0      	blx	sl
 801c9cc:	3001      	adds	r0, #1
 801c9ce:	d09d      	beq.n	801c90c <_printf_i+0x15c>
 801c9d0:	3501      	adds	r5, #1
 801c9d2:	68e3      	ldr	r3, [r4, #12]
 801c9d4:	9903      	ldr	r1, [sp, #12]
 801c9d6:	1a5b      	subs	r3, r3, r1
 801c9d8:	42ab      	cmp	r3, r5
 801c9da:	dcf2      	bgt.n	801c9c2 <_printf_i+0x212>
 801c9dc:	e7eb      	b.n	801c9b6 <_printf_i+0x206>
 801c9de:	2500      	movs	r5, #0
 801c9e0:	f104 0619 	add.w	r6, r4, #25
 801c9e4:	e7f5      	b.n	801c9d2 <_printf_i+0x222>
 801c9e6:	bf00      	nop
 801c9e8:	0801dc13 	.word	0x0801dc13
 801c9ec:	0801dc24 	.word	0x0801dc24

0801c9f0 <__sflush_r>:
 801c9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9f8:	0716      	lsls	r6, r2, #28
 801c9fa:	4605      	mov	r5, r0
 801c9fc:	460c      	mov	r4, r1
 801c9fe:	d454      	bmi.n	801caaa <__sflush_r+0xba>
 801ca00:	684b      	ldr	r3, [r1, #4]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	dc02      	bgt.n	801ca0c <__sflush_r+0x1c>
 801ca06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	dd48      	ble.n	801ca9e <__sflush_r+0xae>
 801ca0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ca0e:	2e00      	cmp	r6, #0
 801ca10:	d045      	beq.n	801ca9e <__sflush_r+0xae>
 801ca12:	2300      	movs	r3, #0
 801ca14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ca18:	682f      	ldr	r7, [r5, #0]
 801ca1a:	6a21      	ldr	r1, [r4, #32]
 801ca1c:	602b      	str	r3, [r5, #0]
 801ca1e:	d030      	beq.n	801ca82 <__sflush_r+0x92>
 801ca20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ca22:	89a3      	ldrh	r3, [r4, #12]
 801ca24:	0759      	lsls	r1, r3, #29
 801ca26:	d505      	bpl.n	801ca34 <__sflush_r+0x44>
 801ca28:	6863      	ldr	r3, [r4, #4]
 801ca2a:	1ad2      	subs	r2, r2, r3
 801ca2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ca2e:	b10b      	cbz	r3, 801ca34 <__sflush_r+0x44>
 801ca30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ca32:	1ad2      	subs	r2, r2, r3
 801ca34:	2300      	movs	r3, #0
 801ca36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ca38:	6a21      	ldr	r1, [r4, #32]
 801ca3a:	4628      	mov	r0, r5
 801ca3c:	47b0      	blx	r6
 801ca3e:	1c43      	adds	r3, r0, #1
 801ca40:	89a3      	ldrh	r3, [r4, #12]
 801ca42:	d106      	bne.n	801ca52 <__sflush_r+0x62>
 801ca44:	6829      	ldr	r1, [r5, #0]
 801ca46:	291d      	cmp	r1, #29
 801ca48:	d82b      	bhi.n	801caa2 <__sflush_r+0xb2>
 801ca4a:	4a2a      	ldr	r2, [pc, #168]	@ (801caf4 <__sflush_r+0x104>)
 801ca4c:	410a      	asrs	r2, r1
 801ca4e:	07d6      	lsls	r6, r2, #31
 801ca50:	d427      	bmi.n	801caa2 <__sflush_r+0xb2>
 801ca52:	2200      	movs	r2, #0
 801ca54:	6062      	str	r2, [r4, #4]
 801ca56:	04d9      	lsls	r1, r3, #19
 801ca58:	6922      	ldr	r2, [r4, #16]
 801ca5a:	6022      	str	r2, [r4, #0]
 801ca5c:	d504      	bpl.n	801ca68 <__sflush_r+0x78>
 801ca5e:	1c42      	adds	r2, r0, #1
 801ca60:	d101      	bne.n	801ca66 <__sflush_r+0x76>
 801ca62:	682b      	ldr	r3, [r5, #0]
 801ca64:	b903      	cbnz	r3, 801ca68 <__sflush_r+0x78>
 801ca66:	6560      	str	r0, [r4, #84]	@ 0x54
 801ca68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ca6a:	602f      	str	r7, [r5, #0]
 801ca6c:	b1b9      	cbz	r1, 801ca9e <__sflush_r+0xae>
 801ca6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ca72:	4299      	cmp	r1, r3
 801ca74:	d002      	beq.n	801ca7c <__sflush_r+0x8c>
 801ca76:	4628      	mov	r0, r5
 801ca78:	f7ff fb40 	bl	801c0fc <_free_r>
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	6363      	str	r3, [r4, #52]	@ 0x34
 801ca80:	e00d      	b.n	801ca9e <__sflush_r+0xae>
 801ca82:	2301      	movs	r3, #1
 801ca84:	4628      	mov	r0, r5
 801ca86:	47b0      	blx	r6
 801ca88:	4602      	mov	r2, r0
 801ca8a:	1c50      	adds	r0, r2, #1
 801ca8c:	d1c9      	bne.n	801ca22 <__sflush_r+0x32>
 801ca8e:	682b      	ldr	r3, [r5, #0]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d0c6      	beq.n	801ca22 <__sflush_r+0x32>
 801ca94:	2b1d      	cmp	r3, #29
 801ca96:	d001      	beq.n	801ca9c <__sflush_r+0xac>
 801ca98:	2b16      	cmp	r3, #22
 801ca9a:	d11e      	bne.n	801cada <__sflush_r+0xea>
 801ca9c:	602f      	str	r7, [r5, #0]
 801ca9e:	2000      	movs	r0, #0
 801caa0:	e022      	b.n	801cae8 <__sflush_r+0xf8>
 801caa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801caa6:	b21b      	sxth	r3, r3
 801caa8:	e01b      	b.n	801cae2 <__sflush_r+0xf2>
 801caaa:	690f      	ldr	r7, [r1, #16]
 801caac:	2f00      	cmp	r7, #0
 801caae:	d0f6      	beq.n	801ca9e <__sflush_r+0xae>
 801cab0:	0793      	lsls	r3, r2, #30
 801cab2:	680e      	ldr	r6, [r1, #0]
 801cab4:	bf08      	it	eq
 801cab6:	694b      	ldreq	r3, [r1, #20]
 801cab8:	600f      	str	r7, [r1, #0]
 801caba:	bf18      	it	ne
 801cabc:	2300      	movne	r3, #0
 801cabe:	eba6 0807 	sub.w	r8, r6, r7
 801cac2:	608b      	str	r3, [r1, #8]
 801cac4:	f1b8 0f00 	cmp.w	r8, #0
 801cac8:	dde9      	ble.n	801ca9e <__sflush_r+0xae>
 801caca:	6a21      	ldr	r1, [r4, #32]
 801cacc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cace:	4643      	mov	r3, r8
 801cad0:	463a      	mov	r2, r7
 801cad2:	4628      	mov	r0, r5
 801cad4:	47b0      	blx	r6
 801cad6:	2800      	cmp	r0, #0
 801cad8:	dc08      	bgt.n	801caec <__sflush_r+0xfc>
 801cada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cae2:	81a3      	strh	r3, [r4, #12]
 801cae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caec:	4407      	add	r7, r0
 801caee:	eba8 0800 	sub.w	r8, r8, r0
 801caf2:	e7e7      	b.n	801cac4 <__sflush_r+0xd4>
 801caf4:	dfbffffe 	.word	0xdfbffffe

0801caf8 <_fflush_r>:
 801caf8:	b538      	push	{r3, r4, r5, lr}
 801cafa:	690b      	ldr	r3, [r1, #16]
 801cafc:	4605      	mov	r5, r0
 801cafe:	460c      	mov	r4, r1
 801cb00:	b913      	cbnz	r3, 801cb08 <_fflush_r+0x10>
 801cb02:	2500      	movs	r5, #0
 801cb04:	4628      	mov	r0, r5
 801cb06:	bd38      	pop	{r3, r4, r5, pc}
 801cb08:	b118      	cbz	r0, 801cb12 <_fflush_r+0x1a>
 801cb0a:	6a03      	ldr	r3, [r0, #32]
 801cb0c:	b90b      	cbnz	r3, 801cb12 <_fflush_r+0x1a>
 801cb0e:	f7fe ffe3 	bl	801bad8 <__sinit>
 801cb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d0f3      	beq.n	801cb02 <_fflush_r+0xa>
 801cb1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cb1c:	07d0      	lsls	r0, r2, #31
 801cb1e:	d404      	bmi.n	801cb2a <_fflush_r+0x32>
 801cb20:	0599      	lsls	r1, r3, #22
 801cb22:	d402      	bmi.n	801cb2a <_fflush_r+0x32>
 801cb24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb26:	f7ff faa6 	bl	801c076 <__retarget_lock_acquire_recursive>
 801cb2a:	4628      	mov	r0, r5
 801cb2c:	4621      	mov	r1, r4
 801cb2e:	f7ff ff5f 	bl	801c9f0 <__sflush_r>
 801cb32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb34:	07da      	lsls	r2, r3, #31
 801cb36:	4605      	mov	r5, r0
 801cb38:	d4e4      	bmi.n	801cb04 <_fflush_r+0xc>
 801cb3a:	89a3      	ldrh	r3, [r4, #12]
 801cb3c:	059b      	lsls	r3, r3, #22
 801cb3e:	d4e1      	bmi.n	801cb04 <_fflush_r+0xc>
 801cb40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb42:	f7ff fa99 	bl	801c078 <__retarget_lock_release_recursive>
 801cb46:	e7dd      	b.n	801cb04 <_fflush_r+0xc>

0801cb48 <fiprintf>:
 801cb48:	b40e      	push	{r1, r2, r3}
 801cb4a:	b503      	push	{r0, r1, lr}
 801cb4c:	4601      	mov	r1, r0
 801cb4e:	ab03      	add	r3, sp, #12
 801cb50:	4805      	ldr	r0, [pc, #20]	@ (801cb68 <fiprintf+0x20>)
 801cb52:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb56:	6800      	ldr	r0, [r0, #0]
 801cb58:	9301      	str	r3, [sp, #4]
 801cb5a:	f7ff fca3 	bl	801c4a4 <_vfiprintf_r>
 801cb5e:	b002      	add	sp, #8
 801cb60:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb64:	b003      	add	sp, #12
 801cb66:	4770      	bx	lr
 801cb68:	240002b0 	.word	0x240002b0

0801cb6c <__swhatbuf_r>:
 801cb6c:	b570      	push	{r4, r5, r6, lr}
 801cb6e:	460c      	mov	r4, r1
 801cb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb74:	2900      	cmp	r1, #0
 801cb76:	b096      	sub	sp, #88	@ 0x58
 801cb78:	4615      	mov	r5, r2
 801cb7a:	461e      	mov	r6, r3
 801cb7c:	da0d      	bge.n	801cb9a <__swhatbuf_r+0x2e>
 801cb7e:	89a3      	ldrh	r3, [r4, #12]
 801cb80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cb84:	f04f 0100 	mov.w	r1, #0
 801cb88:	bf14      	ite	ne
 801cb8a:	2340      	movne	r3, #64	@ 0x40
 801cb8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cb90:	2000      	movs	r0, #0
 801cb92:	6031      	str	r1, [r6, #0]
 801cb94:	602b      	str	r3, [r5, #0]
 801cb96:	b016      	add	sp, #88	@ 0x58
 801cb98:	bd70      	pop	{r4, r5, r6, pc}
 801cb9a:	466a      	mov	r2, sp
 801cb9c:	f000 f848 	bl	801cc30 <_fstat_r>
 801cba0:	2800      	cmp	r0, #0
 801cba2:	dbec      	blt.n	801cb7e <__swhatbuf_r+0x12>
 801cba4:	9901      	ldr	r1, [sp, #4]
 801cba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cbaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cbae:	4259      	negs	r1, r3
 801cbb0:	4159      	adcs	r1, r3
 801cbb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cbb6:	e7eb      	b.n	801cb90 <__swhatbuf_r+0x24>

0801cbb8 <__smakebuf_r>:
 801cbb8:	898b      	ldrh	r3, [r1, #12]
 801cbba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cbbc:	079d      	lsls	r5, r3, #30
 801cbbe:	4606      	mov	r6, r0
 801cbc0:	460c      	mov	r4, r1
 801cbc2:	d507      	bpl.n	801cbd4 <__smakebuf_r+0x1c>
 801cbc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cbc8:	6023      	str	r3, [r4, #0]
 801cbca:	6123      	str	r3, [r4, #16]
 801cbcc:	2301      	movs	r3, #1
 801cbce:	6163      	str	r3, [r4, #20]
 801cbd0:	b003      	add	sp, #12
 801cbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbd4:	ab01      	add	r3, sp, #4
 801cbd6:	466a      	mov	r2, sp
 801cbd8:	f7ff ffc8 	bl	801cb6c <__swhatbuf_r>
 801cbdc:	9f00      	ldr	r7, [sp, #0]
 801cbde:	4605      	mov	r5, r0
 801cbe0:	4639      	mov	r1, r7
 801cbe2:	4630      	mov	r0, r6
 801cbe4:	f7fe fd46 	bl	801b674 <_malloc_r>
 801cbe8:	b948      	cbnz	r0, 801cbfe <__smakebuf_r+0x46>
 801cbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbee:	059a      	lsls	r2, r3, #22
 801cbf0:	d4ee      	bmi.n	801cbd0 <__smakebuf_r+0x18>
 801cbf2:	f023 0303 	bic.w	r3, r3, #3
 801cbf6:	f043 0302 	orr.w	r3, r3, #2
 801cbfa:	81a3      	strh	r3, [r4, #12]
 801cbfc:	e7e2      	b.n	801cbc4 <__smakebuf_r+0xc>
 801cbfe:	89a3      	ldrh	r3, [r4, #12]
 801cc00:	6020      	str	r0, [r4, #0]
 801cc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cc06:	81a3      	strh	r3, [r4, #12]
 801cc08:	9b01      	ldr	r3, [sp, #4]
 801cc0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cc0e:	b15b      	cbz	r3, 801cc28 <__smakebuf_r+0x70>
 801cc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc14:	4630      	mov	r0, r6
 801cc16:	f000 f81d 	bl	801cc54 <_isatty_r>
 801cc1a:	b128      	cbz	r0, 801cc28 <__smakebuf_r+0x70>
 801cc1c:	89a3      	ldrh	r3, [r4, #12]
 801cc1e:	f023 0303 	bic.w	r3, r3, #3
 801cc22:	f043 0301 	orr.w	r3, r3, #1
 801cc26:	81a3      	strh	r3, [r4, #12]
 801cc28:	89a3      	ldrh	r3, [r4, #12]
 801cc2a:	431d      	orrs	r5, r3
 801cc2c:	81a5      	strh	r5, [r4, #12]
 801cc2e:	e7cf      	b.n	801cbd0 <__smakebuf_r+0x18>

0801cc30 <_fstat_r>:
 801cc30:	b538      	push	{r3, r4, r5, lr}
 801cc32:	4d07      	ldr	r5, [pc, #28]	@ (801cc50 <_fstat_r+0x20>)
 801cc34:	2300      	movs	r3, #0
 801cc36:	4604      	mov	r4, r0
 801cc38:	4608      	mov	r0, r1
 801cc3a:	4611      	mov	r1, r2
 801cc3c:	602b      	str	r3, [r5, #0]
 801cc3e:	f7e5 faa1 	bl	8002184 <_fstat>
 801cc42:	1c43      	adds	r3, r0, #1
 801cc44:	d102      	bne.n	801cc4c <_fstat_r+0x1c>
 801cc46:	682b      	ldr	r3, [r5, #0]
 801cc48:	b103      	cbz	r3, 801cc4c <_fstat_r+0x1c>
 801cc4a:	6023      	str	r3, [r4, #0]
 801cc4c:	bd38      	pop	{r3, r4, r5, pc}
 801cc4e:	bf00      	nop
 801cc50:	24013208 	.word	0x24013208

0801cc54 <_isatty_r>:
 801cc54:	b538      	push	{r3, r4, r5, lr}
 801cc56:	4d06      	ldr	r5, [pc, #24]	@ (801cc70 <_isatty_r+0x1c>)
 801cc58:	2300      	movs	r3, #0
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	4608      	mov	r0, r1
 801cc5e:	602b      	str	r3, [r5, #0]
 801cc60:	f7e5 faa0 	bl	80021a4 <_isatty>
 801cc64:	1c43      	adds	r3, r0, #1
 801cc66:	d102      	bne.n	801cc6e <_isatty_r+0x1a>
 801cc68:	682b      	ldr	r3, [r5, #0]
 801cc6a:	b103      	cbz	r3, 801cc6e <_isatty_r+0x1a>
 801cc6c:	6023      	str	r3, [r4, #0]
 801cc6e:	bd38      	pop	{r3, r4, r5, pc}
 801cc70:	24013208 	.word	0x24013208

0801cc74 <abort>:
 801cc74:	b508      	push	{r3, lr}
 801cc76:	2006      	movs	r0, #6
 801cc78:	f000 f82c 	bl	801ccd4 <raise>
 801cc7c:	2001      	movs	r0, #1
 801cc7e:	f7e5 fa31 	bl	80020e4 <_exit>

0801cc82 <_raise_r>:
 801cc82:	291f      	cmp	r1, #31
 801cc84:	b538      	push	{r3, r4, r5, lr}
 801cc86:	4605      	mov	r5, r0
 801cc88:	460c      	mov	r4, r1
 801cc8a:	d904      	bls.n	801cc96 <_raise_r+0x14>
 801cc8c:	2316      	movs	r3, #22
 801cc8e:	6003      	str	r3, [r0, #0]
 801cc90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc94:	bd38      	pop	{r3, r4, r5, pc}
 801cc96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cc98:	b112      	cbz	r2, 801cca0 <_raise_r+0x1e>
 801cc9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc9e:	b94b      	cbnz	r3, 801ccb4 <_raise_r+0x32>
 801cca0:	4628      	mov	r0, r5
 801cca2:	f000 f831 	bl	801cd08 <_getpid_r>
 801cca6:	4622      	mov	r2, r4
 801cca8:	4601      	mov	r1, r0
 801ccaa:	4628      	mov	r0, r5
 801ccac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ccb0:	f000 b818 	b.w	801cce4 <_kill_r>
 801ccb4:	2b01      	cmp	r3, #1
 801ccb6:	d00a      	beq.n	801ccce <_raise_r+0x4c>
 801ccb8:	1c59      	adds	r1, r3, #1
 801ccba:	d103      	bne.n	801ccc4 <_raise_r+0x42>
 801ccbc:	2316      	movs	r3, #22
 801ccbe:	6003      	str	r3, [r0, #0]
 801ccc0:	2001      	movs	r0, #1
 801ccc2:	e7e7      	b.n	801cc94 <_raise_r+0x12>
 801ccc4:	2100      	movs	r1, #0
 801ccc6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ccca:	4620      	mov	r0, r4
 801cccc:	4798      	blx	r3
 801ccce:	2000      	movs	r0, #0
 801ccd0:	e7e0      	b.n	801cc94 <_raise_r+0x12>
	...

0801ccd4 <raise>:
 801ccd4:	4b02      	ldr	r3, [pc, #8]	@ (801cce0 <raise+0xc>)
 801ccd6:	4601      	mov	r1, r0
 801ccd8:	6818      	ldr	r0, [r3, #0]
 801ccda:	f7ff bfd2 	b.w	801cc82 <_raise_r>
 801ccde:	bf00      	nop
 801cce0:	240002b0 	.word	0x240002b0

0801cce4 <_kill_r>:
 801cce4:	b538      	push	{r3, r4, r5, lr}
 801cce6:	4d07      	ldr	r5, [pc, #28]	@ (801cd04 <_kill_r+0x20>)
 801cce8:	2300      	movs	r3, #0
 801ccea:	4604      	mov	r4, r0
 801ccec:	4608      	mov	r0, r1
 801ccee:	4611      	mov	r1, r2
 801ccf0:	602b      	str	r3, [r5, #0]
 801ccf2:	f7e5 f9e7 	bl	80020c4 <_kill>
 801ccf6:	1c43      	adds	r3, r0, #1
 801ccf8:	d102      	bne.n	801cd00 <_kill_r+0x1c>
 801ccfa:	682b      	ldr	r3, [r5, #0]
 801ccfc:	b103      	cbz	r3, 801cd00 <_kill_r+0x1c>
 801ccfe:	6023      	str	r3, [r4, #0]
 801cd00:	bd38      	pop	{r3, r4, r5, pc}
 801cd02:	bf00      	nop
 801cd04:	24013208 	.word	0x24013208

0801cd08 <_getpid_r>:
 801cd08:	f7e5 b9d4 	b.w	80020b4 <_getpid>

0801cd0c <_init>:
 801cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd0e:	bf00      	nop
 801cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd12:	bc08      	pop	{r3}
 801cd14:	469e      	mov	lr, r3
 801cd16:	4770      	bx	lr

0801cd18 <_fini>:
 801cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd1a:	bf00      	nop
 801cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd1e:	bc08      	pop	{r3}
 801cd20:	469e      	mov	lr, r3
 801cd22:	4770      	bx	lr
