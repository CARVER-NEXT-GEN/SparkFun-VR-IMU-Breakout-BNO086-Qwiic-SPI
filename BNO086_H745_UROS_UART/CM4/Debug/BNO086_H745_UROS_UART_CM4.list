
BNO086_H745_UROS_UART_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  08100298  08100298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08107540  08107540  00008540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081075e0  081075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  081075e4  081075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000080  10000000  081075e8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000354  10000080  08107668  00009080  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100003d4  08107668  000093d4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001345e  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a87  00000000  00000000  0001c50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001200  00000000  00000000  0001ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000dd1  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bc65  00000000  00000000  00020f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015de6  00000000  00000000  0005cbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018b690  00000000  00000000  000729b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001fe044  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000514c  00000000  00000000  001fe088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000008d  00000000  00000000  002031d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000080 	.word	0x10000080
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08107528 	.word	0x08107528

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000084 	.word	0x10000084
 81002d4:	08107528 	.word	0x08107528

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	@ 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <BNO086_Initialization>:
uint8_t accuracyAccel;
uint8_t accuracyGyro;
uint8_t accuracyMag;

int BNO086_Initialization(BNO086_t *bno)
{
 8100c50:	b580      	push	{r7, lr}
 8100c52:	b082      	sub	sp, #8
 8100c54:	af00      	add	r7, sp, #0
 8100c56:	6078      	str	r0, [r7, #4]

	CHIP_DESELECT(BNO086);
 8100c58:	2201      	movs	r2, #1
 8100c5a:	2120      	movs	r1, #32
 8100c5c:	4827      	ldr	r0, [pc, #156]	@ (8100cfc <BNO086_Initialization+0xac>)
 8100c5e:	f002 fa8b 	bl	8103178 <HAL_GPIO_WritePin>
	WAKE_HIGH();
 8100c62:	2201      	movs	r2, #1
 8100c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8100c68:	4825      	ldr	r0, [pc, #148]	@ (8100d00 <BNO086_Initialization+0xb0>)
 8100c6a:	f002 fa85 	bl	8103178 <HAL_GPIO_WritePin>
	RESET_HIGH();
 8100c6e:	2201      	movs	r2, #1
 8100c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100c74:	4822      	ldr	r0, [pc, #136]	@ (8100d00 <BNO086_Initialization+0xb0>)
 8100c76:	f002 fa7f 	bl	8103178 <HAL_GPIO_WritePin>

	CHIP_DESELECT(BNO086);
 8100c7a:	2201      	movs	r2, #1
 8100c7c:	2120      	movs	r1, #32
 8100c7e:	481f      	ldr	r0, [pc, #124]	@ (8100cfc <BNO086_Initialization+0xac>)
 8100c80:	f002 fa7a 	bl	8103178 <HAL_GPIO_WritePin>

	//Configure the BNO086 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8100c84:	2201      	movs	r2, #1
 8100c86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8100c8a:	481d      	ldr	r0, [pc, #116]	@ (8100d00 <BNO086_Initialization+0xb0>)
 8100c8c:	f002 fa74 	bl	8103178 <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO086
 8100c90:	2200      	movs	r2, #0
 8100c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100c96:	481a      	ldr	r0, [pc, #104]	@ (8100d00 <BNO086_Initialization+0xb0>)
 8100c98:	f002 fa6e 	bl	8103178 <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8100c9c:	20c8      	movs	r0, #200	@ 0xc8
 8100c9e:	f001 ff5b 	bl	8102b58 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8100ca2:	2201      	movs	r2, #1
 8100ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100ca8:	4815      	ldr	r0, [pc, #84]	@ (8100d00 <BNO086_Initialization+0xb0>)
 8100caa:	f002 fa65 	bl	8103178 <HAL_GPIO_WritePin>

	BNO086_waitForSPI(); //Wait until INT pin goes low.
 8100cae:	f000 fd15 	bl	81016dc <BNO086_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO086 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO086_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8100cb2:	f000 fd13 	bl	81016dc <BNO086_waitForSPI>
	BNO086_receivePacket();
 8100cb6:	f000 fd2f 	bl	8101718 <BNO086_receivePacket>

	//The BNO086 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO086_waitForSPI();  //Wait for assertion of INT before reading Init response
 8100cba:	f000 fd0f 	bl	81016dc <BNO086_waitForSPI>
	BNO086_receivePacket();
 8100cbe:	f000 fd2b 	bl	8101718 <BNO086_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8100cc2:	4b10      	ldr	r3, [pc, #64]	@ (8100d04 <BNO086_Initialization+0xb4>)
 8100cc4:	22f9      	movs	r2, #249	@ 0xf9
 8100cc6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8100cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8100d04 <BNO086_Initialization+0xb4>)
 8100cca:	2200      	movs	r2, #0
 8100ccc:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO086_sendPacket(CHANNEL_CONTROL, 2);
 8100cce:	2102      	movs	r1, #2
 8100cd0:	2002      	movs	r0, #2
 8100cd2:	f000 fd91 	bl	81017f8 <BNO086_sendPacket>

	//Now we wait for response
	BNO086_waitForSPI();
 8100cd6:	f000 fd01 	bl	81016dc <BNO086_waitForSPI>
	if (BNO086_receivePacket() == 1)
 8100cda:	f000 fd1d 	bl	8101718 <BNO086_receivePacket>
 8100cde:	4603      	mov	r3, r0
 8100ce0:	2b01      	cmp	r3, #1
 8100ce2:	d105      	bne.n	8100cf0 <BNO086_Initialization+0xa0>
	{
//		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8100ce4:	4b07      	ldr	r3, [pc, #28]	@ (8100d04 <BNO086_Initialization+0xb4>)
 8100ce6:	781b      	ldrb	r3, [r3, #0]
 8100ce8:	2bf8      	cmp	r3, #248	@ 0xf8
 8100cea:	d101      	bne.n	8100cf0 <BNO086_Initialization+0xa0>
		{
//			printf("BNO086 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
			return (0);
 8100cec:	2300      	movs	r3, #0
 8100cee:	e000      	b.n	8100cf2 <BNO086_Initialization+0xa2>
		}// Sensor OK
	}

//	printf("BNO086 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
	return (1); //Something went wrong
 8100cf0:	2301      	movs	r3, #1
}
 8100cf2:	4618      	mov	r0, r3
 8100cf4:	3708      	adds	r7, #8
 8100cf6:	46bd      	mov	sp, r7
 8100cf8:	bd80      	pop	{r7, pc}
 8100cfa:	bf00      	nop
 8100cfc:	58020400 	.word	0x58020400
 8100d00:	58020c00 	.word	0x58020c00
 8100d04:	100000a0 	.word	0x100000a0

08100d08 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data) // Todo
{
 8100d08:	b580      	push	{r7, lr}
 8100d0a:	b084      	sub	sp, #16
 8100d0c:	af02      	add	r7, sp, #8
 8100d0e:	4603      	mov	r3, r0
 8100d10:	71fb      	strb	r3, [r7, #7]
//	CHIP_SELECT(BNO086);

    HAL_SPI_TransmitReceive(&hspi1, &data, &receivedData, 1, HAL_MAX_DELAY);
 8100d12:	1df9      	adds	r1, r7, #7
 8100d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8100d18:	9300      	str	r3, [sp, #0]
 8100d1a:	2301      	movs	r3, #1
 8100d1c:	4a04      	ldr	r2, [pc, #16]	@ (8100d30 <SPI2_SendByte+0x28>)
 8100d1e:	4805      	ldr	r0, [pc, #20]	@ (8100d34 <SPI2_SendByte+0x2c>)
 8100d20:	f004 f950 	bl	8104fc4 <HAL_SPI_TransmitReceive>

    return receivedData;
 8100d24:	4b02      	ldr	r3, [pc, #8]	@ (8100d30 <SPI2_SendByte+0x28>)
 8100d26:	781b      	ldrb	r3, [r3, #0]
}
 8100d28:	4618      	mov	r0, r3
 8100d2a:	3708      	adds	r7, #8
 8100d2c:	46bd      	mov	sp, r7
 8100d2e:	bd80      	pop	{r7, pc}
 8100d30:	10000165 	.word	0x10000165
 8100d34:	100001c4 	.word	0x100001c4

08100d38 <BNO086_dataAvailable>:


//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO086_dataAvailable(void)
{
 8100d38:	b580      	push	{r7, lr}
 8100d3a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO086_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO086_Arduino_Library/issues/13

	if (HAL_GPIO_ReadPin(INT_GPIO_Port, INT_Pin) == 1)
 8100d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8100d40:	4811      	ldr	r0, [pc, #68]	@ (8100d88 <BNO086_dataAvailable+0x50>)
 8100d42:	f002 fa01 	bl	8103148 <HAL_GPIO_ReadPin>
 8100d46:	4603      	mov	r3, r0
 8100d48:	2b01      	cmp	r3, #1
 8100d4a:	d101      	bne.n	8100d50 <BNO086_dataAvailable+0x18>
		return (0);
 8100d4c:	2300      	movs	r3, #0
 8100d4e:	e019      	b.n	8100d84 <BNO086_dataAvailable+0x4c>

	if (BNO086_receivePacket() == 1)
 8100d50:	f000 fce2 	bl	8101718 <BNO086_receivePacket>
 8100d54:	4603      	mov	r3, r0
 8100d56:	2b01      	cmp	r3, #1
 8100d58:	d113      	bne.n	8100d82 <BNO086_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8100d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8100d8c <BNO086_dataAvailable+0x54>)
 8100d5c:	789b      	ldrb	r3, [r3, #2]
 8100d5e:	2b03      	cmp	r3, #3
 8100d60:	d107      	bne.n	8100d72 <BNO086_dataAvailable+0x3a>
 8100d62:	4b0b      	ldr	r3, [pc, #44]	@ (8100d90 <BNO086_dataAvailable+0x58>)
 8100d64:	781b      	ldrb	r3, [r3, #0]
 8100d66:	2bfb      	cmp	r3, #251	@ 0xfb
 8100d68:	d103      	bne.n	8100d72 <BNO086_dataAvailable+0x3a>
		{
			BNO086_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8100d6a:	f000 f82f 	bl	8100dcc <BNO086_parseInputReport>
			return (1);
 8100d6e:	2301      	movs	r3, #1
 8100d70:	e008      	b.n	8100d84 <BNO086_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8100d72:	4b06      	ldr	r3, [pc, #24]	@ (8100d8c <BNO086_dataAvailable+0x54>)
 8100d74:	789b      	ldrb	r3, [r3, #2]
 8100d76:	2b02      	cmp	r3, #2
 8100d78:	d103      	bne.n	8100d82 <BNO086_dataAvailable+0x4a>
		{
			BNO086_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8100d7a:	f000 f80b 	bl	8100d94 <BNO086_parseCommandReport>
			return (1);
 8100d7e:	2301      	movs	r3, #1
 8100d80:	e000      	b.n	8100d84 <BNO086_dataAvailable+0x4c>
		}
	}
	return (0);
 8100d82:	2300      	movs	r3, #0
}
 8100d84:	4618      	mov	r0, r3
 8100d86:	bd80      	pop	{r7, pc}
 8100d88:	58021800 	.word	0x58021800
 8100d8c:	1000009c 	.word	0x1000009c
 8100d90:	100000a0 	.word	0x100000a0

08100d94 <BNO086_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO086_parseCommandReport(void)
{
 8100d94:	b480      	push	{r7}
 8100d96:	b083      	sub	sp, #12
 8100d98:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8100d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8100dc4 <BNO086_parseCommandReport+0x30>)
 8100d9c:	781b      	ldrb	r3, [r3, #0]
 8100d9e:	2bf1      	cmp	r3, #241	@ 0xf1
 8100da0:	d109      	bne.n	8100db6 <BNO086_parseCommandReport+0x22>
	{
		//The BNO086 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8100da2:	4b08      	ldr	r3, [pc, #32]	@ (8100dc4 <BNO086_parseCommandReport+0x30>)
 8100da4:	789b      	ldrb	r3, [r3, #2]
 8100da6:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8100da8:	79fb      	ldrb	r3, [r7, #7]
 8100daa:	2b07      	cmp	r3, #7
 8100dac:	d103      	bne.n	8100db6 <BNO086_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8100dae:	4b05      	ldr	r3, [pc, #20]	@ (8100dc4 <BNO086_parseCommandReport+0x30>)
 8100db0:	795a      	ldrb	r2, [r3, #5]
 8100db2:	4b05      	ldr	r3, [pc, #20]	@ (8100dc8 <BNO086_parseCommandReport+0x34>)
 8100db4:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	// additional feature reports may be strung together. Parse them all.
}
 8100db6:	bf00      	nop
 8100db8:	370c      	adds	r7, #12
 8100dba:	46bd      	mov	sp, r7
 8100dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc0:	4770      	bx	lr
 8100dc2:	bf00      	nop
 8100dc4:	100000a0 	.word	0x100000a0
 8100dc8:	10000164 	.word	0x10000164

08100dcc <BNO086_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO086_parseInputReport(void)
{
 8100dcc:	b480      	push	{r7}
 8100dce:	b087      	sub	sp, #28
 8100dd0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8100dd2:	4b98      	ldr	r3, [pc, #608]	@ (8101034 <BNO086_parseInputReport+0x268>)
 8100dd4:	785b      	ldrb	r3, [r3, #1]
 8100dd6:	021b      	lsls	r3, r3, #8
 8100dd8:	b21a      	sxth	r2, r3
 8100dda:	4b96      	ldr	r3, [pc, #600]	@ (8101034 <BNO086_parseInputReport+0x268>)
 8100ddc:	781b      	ldrb	r3, [r3, #0]
 8100dde:	b21b      	sxth	r3, r3
 8100de0:	4313      	orrs	r3, r2
 8100de2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8100de4:	8a3b      	ldrh	r3, [r7, #16]
 8100de6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8100dea:	823b      	strh	r3, [r7, #16]
	//Ignore it for now.  catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8100dec:	8a3b      	ldrh	r3, [r7, #16]
 8100dee:	3b04      	subs	r3, #4
 8100df0:	b29b      	uxth	r3, r3
 8100df2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8100df4:	4b90      	ldr	r3, [pc, #576]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100df6:	791b      	ldrb	r3, [r3, #4]
 8100df8:	061a      	lsls	r2, r3, #24
 8100dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100dfc:	78db      	ldrb	r3, [r3, #3]
 8100dfe:	041b      	lsls	r3, r3, #16
 8100e00:	431a      	orrs	r2, r3
 8100e02:	4b8d      	ldr	r3, [pc, #564]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e04:	789b      	ldrb	r3, [r3, #2]
 8100e06:	021b      	lsls	r3, r3, #8
 8100e08:	4313      	orrs	r3, r2
 8100e0a:	4a8b      	ldr	r2, [pc, #556]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e0c:	7852      	ldrb	r2, [r2, #1]
 8100e0e:	4313      	orrs	r3, r2
 8100e10:	4a8a      	ldr	r2, [pc, #552]	@ (810103c <BNO086_parseInputReport+0x270>)
 8100e12:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8100e14:	4b88      	ldr	r3, [pc, #544]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e16:	79db      	ldrb	r3, [r3, #7]
 8100e18:	f003 0303 	and.w	r3, r3, #3
 8100e1c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8100e1e:	4b86      	ldr	r3, [pc, #536]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e20:	7a9b      	ldrb	r3, [r3, #10]
 8100e22:	021b      	lsls	r3, r3, #8
 8100e24:	b21a      	sxth	r2, r3
 8100e26:	4b84      	ldr	r3, [pc, #528]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e28:	7a5b      	ldrb	r3, [r3, #9]
 8100e2a:	b21b      	sxth	r3, r3
 8100e2c:	4313      	orrs	r3, r2
 8100e2e:	b21b      	sxth	r3, r3
 8100e30:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8100e32:	4b81      	ldr	r3, [pc, #516]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e34:	7b1b      	ldrb	r3, [r3, #12]
 8100e36:	021b      	lsls	r3, r3, #8
 8100e38:	b21a      	sxth	r2, r3
 8100e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e3c:	7adb      	ldrb	r3, [r3, #11]
 8100e3e:	b21b      	sxth	r3, r3
 8100e40:	4313      	orrs	r3, r2
 8100e42:	b21b      	sxth	r3, r3
 8100e44:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8100e46:	4b7c      	ldr	r3, [pc, #496]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e48:	7b9b      	ldrb	r3, [r3, #14]
 8100e4a:	021b      	lsls	r3, r3, #8
 8100e4c:	b21a      	sxth	r2, r3
 8100e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e50:	7b5b      	ldrb	r3, [r3, #13]
 8100e52:	b21b      	sxth	r3, r3
 8100e54:	4313      	orrs	r3, r2
 8100e56:	b21b      	sxth	r3, r3
 8100e58:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8100e5a:	2300      	movs	r3, #0
 8100e5c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8100e5e:	2300      	movs	r3, #0
 8100e60:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8100e62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8100e66:	2b0e      	cmp	r3, #14
 8100e68:	dd09      	ble.n	8100e7e <BNO086_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8100e6a:	4b73      	ldr	r3, [pc, #460]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e6c:	7c1b      	ldrb	r3, [r3, #16]
 8100e6e:	021b      	lsls	r3, r3, #8
 8100e70:	b21a      	sxth	r2, r3
 8100e72:	4b71      	ldr	r3, [pc, #452]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e74:	7bdb      	ldrb	r3, [r3, #15]
 8100e76:	b21b      	sxth	r3, r3
 8100e78:	4313      	orrs	r3, r2
 8100e7a:	b21b      	sxth	r3, r3
 8100e7c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8100e7e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8100e82:	2b10      	cmp	r3, #16
 8100e84:	dd09      	ble.n	8100e9a <BNO086_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8100e86:	4b6c      	ldr	r3, [pc, #432]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e88:	7c9b      	ldrb	r3, [r3, #18]
 8100e8a:	021b      	lsls	r3, r3, #8
 8100e8c:	b21a      	sxth	r2, r3
 8100e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e90:	7c5b      	ldrb	r3, [r3, #17]
 8100e92:	b21b      	sxth	r3, r3
 8100e94:	4313      	orrs	r3, r2
 8100e96:	b21b      	sxth	r3, r3
 8100e98:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8100e9a:	4b67      	ldr	r3, [pc, #412]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100e9c:	795b      	ldrb	r3, [r3, #5]
 8100e9e:	2b1e      	cmp	r3, #30
 8100ea0:	dc46      	bgt.n	8100f30 <BNO086_parseInputReport+0x164>
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	f340 80bf 	ble.w	8101026 <BNO086_parseInputReport+0x25a>
 8100ea8:	3b01      	subs	r3, #1
 8100eaa:	2b1d      	cmp	r3, #29
 8100eac:	f200 80bb 	bhi.w	8101026 <BNO086_parseInputReport+0x25a>
 8100eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8100eb8 <BNO086_parseInputReport+0xec>)
 8100eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100eb6:	bf00      	nop
 8100eb8:	08100f37 	.word	0x08100f37
 8100ebc:	08100f6f 	.word	0x08100f6f
 8100ec0:	08100f8b 	.word	0x08100f8b
 8100ec4:	08100f53 	.word	0x08100f53
 8100ec8:	08100fa7 	.word	0x08100fa7
 8100ecc:	08101027 	.word	0x08101027
 8100ed0:	08101027 	.word	0x08101027
 8100ed4:	08100fa7 	.word	0x08100fa7
 8100ed8:	08101027 	.word	0x08101027
 8100edc:	08101027 	.word	0x08101027
 8100ee0:	08101027 	.word	0x08101027
 8100ee4:	08101027 	.word	0x08101027
 8100ee8:	08101027 	.word	0x08101027
 8100eec:	08101027 	.word	0x08101027
 8100ef0:	08101027 	.word	0x08101027
 8100ef4:	08101027 	.word	0x08101027
 8100ef8:	08100fcf 	.word	0x08100fcf
 8100efc:	08101027 	.word	0x08101027
 8100f00:	08100fd7 	.word	0x08100fd7
 8100f04:	08101027 	.word	0x08101027
 8100f08:	08101027 	.word	0x08101027
 8100f0c:	08101027 	.word	0x08101027
 8100f10:	08101027 	.word	0x08101027
 8100f14:	08101027 	.word	0x08101027
 8100f18:	08101027 	.word	0x08101027
 8100f1c:	08101027 	.word	0x08101027
 8100f20:	08101027 	.word	0x08101027
 8100f24:	08101027 	.word	0x08101027
 8100f28:	08101027 	.word	0x08101027
 8100f2c:	08100fe1 	.word	0x08100fe1
 8100f30:	2bf1      	cmp	r3, #241	@ 0xf1
 8100f32:	d06d      	beq.n	8101010 <BNO086_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	// additional feature reports may be strung together. Parse them all.
}
 8100f34:	e077      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			accelAccuracy = status;
 8100f36:	7bfb      	ldrb	r3, [r7, #15]
 8100f38:	b29a      	uxth	r2, r3
 8100f3a:	4b41      	ldr	r3, [pc, #260]	@ (8101040 <BNO086_parseInputReport+0x274>)
 8100f3c:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8100f3e:	4a41      	ldr	r2, [pc, #260]	@ (8101044 <BNO086_parseInputReport+0x278>)
 8100f40:	89bb      	ldrh	r3, [r7, #12]
 8100f42:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8100f44:	4a40      	ldr	r2, [pc, #256]	@ (8101048 <BNO086_parseInputReport+0x27c>)
 8100f46:	897b      	ldrh	r3, [r7, #10]
 8100f48:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8100f4a:	4a40      	ldr	r2, [pc, #256]	@ (810104c <BNO086_parseInputReport+0x280>)
 8100f4c:	893b      	ldrh	r3, [r7, #8]
 8100f4e:	8013      	strh	r3, [r2, #0]
			break;
 8100f50:	e069      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8100f52:	7bfb      	ldrb	r3, [r7, #15]
 8100f54:	b29a      	uxth	r2, r3
 8100f56:	4b3e      	ldr	r3, [pc, #248]	@ (8101050 <BNO086_parseInputReport+0x284>)
 8100f58:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8100f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8101054 <BNO086_parseInputReport+0x288>)
 8100f5c:	89bb      	ldrh	r3, [r7, #12]
 8100f5e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8100f60:	4a3d      	ldr	r2, [pc, #244]	@ (8101058 <BNO086_parseInputReport+0x28c>)
 8100f62:	897b      	ldrh	r3, [r7, #10]
 8100f64:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8100f66:	4a3d      	ldr	r2, [pc, #244]	@ (810105c <BNO086_parseInputReport+0x290>)
 8100f68:	893b      	ldrh	r3, [r7, #8]
 8100f6a:	8013      	strh	r3, [r2, #0]
			break;
 8100f6c:	e05b      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			gyroAccuracy = status;
 8100f6e:	7bfb      	ldrb	r3, [r7, #15]
 8100f70:	b29a      	uxth	r2, r3
 8100f72:	4b3b      	ldr	r3, [pc, #236]	@ (8101060 <BNO086_parseInputReport+0x294>)
 8100f74:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8100f76:	4a3b      	ldr	r2, [pc, #236]	@ (8101064 <BNO086_parseInputReport+0x298>)
 8100f78:	89bb      	ldrh	r3, [r7, #12]
 8100f7a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8100f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8101068 <BNO086_parseInputReport+0x29c>)
 8100f7e:	897b      	ldrh	r3, [r7, #10]
 8100f80:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8100f82:	4a3a      	ldr	r2, [pc, #232]	@ (810106c <BNO086_parseInputReport+0x2a0>)
 8100f84:	893b      	ldrh	r3, [r7, #8]
 8100f86:	8013      	strh	r3, [r2, #0]
			break;
 8100f88:	e04d      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			magAccuracy = status;
 8100f8a:	7bfb      	ldrb	r3, [r7, #15]
 8100f8c:	b29a      	uxth	r2, r3
 8100f8e:	4b38      	ldr	r3, [pc, #224]	@ (8101070 <BNO086_parseInputReport+0x2a4>)
 8100f90:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8100f92:	4a38      	ldr	r2, [pc, #224]	@ (8101074 <BNO086_parseInputReport+0x2a8>)
 8100f94:	89bb      	ldrh	r3, [r7, #12]
 8100f96:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8100f98:	4a37      	ldr	r2, [pc, #220]	@ (8101078 <BNO086_parseInputReport+0x2ac>)
 8100f9a:	897b      	ldrh	r3, [r7, #10]
 8100f9c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8100f9e:	4a37      	ldr	r2, [pc, #220]	@ (810107c <BNO086_parseInputReport+0x2b0>)
 8100fa0:	893b      	ldrh	r3, [r7, #8]
 8100fa2:	8013      	strh	r3, [r2, #0]
			break;
 8100fa4:	e03f      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			quatAccuracy = status;
 8100fa6:	7bfb      	ldrb	r3, [r7, #15]
 8100fa8:	b29a      	uxth	r2, r3
 8100faa:	4b35      	ldr	r3, [pc, #212]	@ (8101080 <BNO086_parseInputReport+0x2b4>)
 8100fac:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8100fae:	4a35      	ldr	r2, [pc, #212]	@ (8101084 <BNO086_parseInputReport+0x2b8>)
 8100fb0:	89bb      	ldrh	r3, [r7, #12]
 8100fb2:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8100fb4:	4a34      	ldr	r2, [pc, #208]	@ (8101088 <BNO086_parseInputReport+0x2bc>)
 8100fb6:	897b      	ldrh	r3, [r7, #10]
 8100fb8:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8100fba:	4a34      	ldr	r2, [pc, #208]	@ (810108c <BNO086_parseInputReport+0x2c0>)
 8100fbc:	893b      	ldrh	r3, [r7, #8]
 8100fbe:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8100fc0:	4a33      	ldr	r2, [pc, #204]	@ (8101090 <BNO086_parseInputReport+0x2c4>)
 8100fc2:	8afb      	ldrh	r3, [r7, #22]
 8100fc4:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8100fc6:	4a33      	ldr	r2, [pc, #204]	@ (8101094 <BNO086_parseInputReport+0x2c8>)
 8100fc8:	8abb      	ldrh	r3, [r7, #20]
 8100fca:	8013      	strh	r3, [r2, #0]
			break;
 8100fcc:	e02b      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8100fce:	4a32      	ldr	r2, [pc, #200]	@ (8101098 <BNO086_parseInputReport+0x2cc>)
 8100fd0:	893b      	ldrh	r3, [r7, #8]
 8100fd2:	8013      	strh	r3, [r2, #0]
			break;
 8100fd4:	e027      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8100fd6:	4b18      	ldr	r3, [pc, #96]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100fd8:	7a5a      	ldrb	r2, [r3, #9]
 8100fda:	4b30      	ldr	r3, [pc, #192]	@ (810109c <BNO086_parseInputReport+0x2d0>)
 8100fdc:	701a      	strb	r2, [r3, #0]
			break;
 8100fde:	e022      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8100fe0:	4b15      	ldr	r3, [pc, #84]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100fe2:	7a9a      	ldrb	r2, [r3, #10]
 8100fe4:	4b2e      	ldr	r3, [pc, #184]	@ (81010a0 <BNO086_parseInputReport+0x2d4>)
 8100fe6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9.  - bring in array size
 8100fe8:	2300      	movs	r3, #0
 8100fea:	74fb      	strb	r3, [r7, #19]
 8100fec:	e00c      	b.n	8101008 <BNO086_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8100fee:	7cfb      	ldrb	r3, [r7, #19]
 8100ff0:	f103 020b 	add.w	r2, r3, #11
 8100ff4:	4b2b      	ldr	r3, [pc, #172]	@ (81010a4 <BNO086_parseInputReport+0x2d8>)
 8100ff6:	6819      	ldr	r1, [r3, #0]
 8100ff8:	7cfb      	ldrb	r3, [r7, #19]
 8100ffa:	440b      	add	r3, r1
 8100ffc:	490e      	ldr	r1, [pc, #56]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8100ffe:	5c8a      	ldrb	r2, [r1, r2]
 8101000:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9.  - bring in array size
 8101002:	7cfb      	ldrb	r3, [r7, #19]
 8101004:	3301      	adds	r3, #1
 8101006:	74fb      	strb	r3, [r7, #19]
 8101008:	7cfb      	ldrb	r3, [r7, #19]
 810100a:	2b08      	cmp	r3, #8
 810100c:	d9ef      	bls.n	8100fee <BNO086_parseInputReport+0x222>
			break;
 810100e:	e00a      	b.n	8101026 <BNO086_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8101010:	4b09      	ldr	r3, [pc, #36]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 8101012:	79db      	ldrb	r3, [r3, #7]
 8101014:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8101016:	79fb      	ldrb	r3, [r7, #7]
 8101018:	2b07      	cmp	r3, #7
 810101a:	d103      	bne.n	8101024 <BNO086_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 810101c:	4b06      	ldr	r3, [pc, #24]	@ (8101038 <BNO086_parseInputReport+0x26c>)
 810101e:	7a9a      	ldrb	r2, [r3, #10]
 8101020:	4b21      	ldr	r3, [pc, #132]	@ (81010a8 <BNO086_parseInputReport+0x2dc>)
 8101022:	701a      	strb	r2, [r3, #0]
			break;
 8101024:	bf00      	nop
}
 8101026:	bf00      	nop
 8101028:	371c      	adds	r7, #28
 810102a:	46bd      	mov	sp, r7
 810102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101030:	4770      	bx	lr
 8101032:	bf00      	nop
 8101034:	1000009c 	.word	0x1000009c
 8101038:	100000a0 	.word	0x100000a0
 810103c:	10000158 	.word	0x10000158
 8101040:	1000012e 	.word	0x1000012e
 8101044:	10000128 	.word	0x10000128
 8101048:	1000012a 	.word	0x1000012a
 810104c:	1000012c 	.word	0x1000012c
 8101050:	10000136 	.word	0x10000136
 8101054:	10000130 	.word	0x10000130
 8101058:	10000132 	.word	0x10000132
 810105c:	10000134 	.word	0x10000134
 8101060:	1000013e 	.word	0x1000013e
 8101064:	10000138 	.word	0x10000138
 8101068:	1000013a 	.word	0x1000013a
 810106c:	1000013c 	.word	0x1000013c
 8101070:	10000146 	.word	0x10000146
 8101074:	10000140 	.word	0x10000140
 8101078:	10000142 	.word	0x10000142
 810107c:	10000144 	.word	0x10000144
 8101080:	10000152 	.word	0x10000152
 8101084:	10000148 	.word	0x10000148
 8101088:	1000014a 	.word	0x1000014a
 810108c:	1000014c 	.word	0x1000014c
 8101090:	1000014e 	.word	0x1000014e
 8101094:	10000150 	.word	0x10000150
 8101098:	10000154 	.word	0x10000154
 810109c:	1000015c 	.word	0x1000015c
 81010a0:	1000015d 	.word	0x1000015d
 81010a4:	10000160 	.word	0x10000160
 81010a8:	10000164 	.word	0x10000164

081010ac <BNO086_getQuatI>:

//Return the rotation vector quaternion I
float BNO086_getQuatI()
{
 81010ac:	b580      	push	{r7, lr}
 81010ae:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatI, rotationVector_Q1);
 81010b0:	4b07      	ldr	r3, [pc, #28]	@ (81010d0 <BNO086_getQuatI+0x24>)
 81010b2:	881b      	ldrh	r3, [r3, #0]
 81010b4:	b21b      	sxth	r3, r3
 81010b6:	4a07      	ldr	r2, [pc, #28]	@ (81010d4 <BNO086_getQuatI+0x28>)
 81010b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 81010bc:	b2d2      	uxtb	r2, r2
 81010be:	4611      	mov	r1, r2
 81010c0:	4618      	mov	r0, r3
 81010c2:	f000 f983 	bl	81013cc <BNO086_qToFloat>
 81010c6:	eef0 7a40 	vmov.f32	s15, s0
}
 81010ca:	eeb0 0a67 	vmov.f32	s0, s15
 81010ce:	bd80      	pop	{r7, pc}
 81010d0:	10000148 	.word	0x10000148
 81010d4:	10000000 	.word	0x10000000

081010d8 <BNO086_getQuatJ>:

//Return the rotation vector quaternion J
float BNO086_getQuatJ()
{
 81010d8:	b580      	push	{r7, lr}
 81010da:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatJ, rotationVector_Q1);
 81010dc:	4b07      	ldr	r3, [pc, #28]	@ (81010fc <BNO086_getQuatJ+0x24>)
 81010de:	881b      	ldrh	r3, [r3, #0]
 81010e0:	b21b      	sxth	r3, r3
 81010e2:	4a07      	ldr	r2, [pc, #28]	@ (8101100 <BNO086_getQuatJ+0x28>)
 81010e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 81010e8:	b2d2      	uxtb	r2, r2
 81010ea:	4611      	mov	r1, r2
 81010ec:	4618      	mov	r0, r3
 81010ee:	f000 f96d 	bl	81013cc <BNO086_qToFloat>
 81010f2:	eef0 7a40 	vmov.f32	s15, s0
}
 81010f6:	eeb0 0a67 	vmov.f32	s0, s15
 81010fa:	bd80      	pop	{r7, pc}
 81010fc:	1000014a 	.word	0x1000014a
 8101100:	10000000 	.word	0x10000000

08101104 <BNO086_getQuatK>:

//Return the rotation vector quaternion K
float BNO086_getQuatK()
{
 8101104:	b580      	push	{r7, lr}
 8101106:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatK, rotationVector_Q1);
 8101108:	4b07      	ldr	r3, [pc, #28]	@ (8101128 <BNO086_getQuatK+0x24>)
 810110a:	881b      	ldrh	r3, [r3, #0]
 810110c:	b21b      	sxth	r3, r3
 810110e:	4a07      	ldr	r2, [pc, #28]	@ (810112c <BNO086_getQuatK+0x28>)
 8101110:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101114:	b2d2      	uxtb	r2, r2
 8101116:	4611      	mov	r1, r2
 8101118:	4618      	mov	r0, r3
 810111a:	f000 f957 	bl	81013cc <BNO086_qToFloat>
 810111e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101122:	eeb0 0a67 	vmov.f32	s0, s15
 8101126:	bd80      	pop	{r7, pc}
 8101128:	1000014c 	.word	0x1000014c
 810112c:	10000000 	.word	0x10000000

08101130 <BNO086_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO086_getQuatReal()
{
 8101130:	b580      	push	{r7, lr}
 8101132:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawQuatReal, rotationVector_Q1);
 8101134:	4b07      	ldr	r3, [pc, #28]	@ (8101154 <BNO086_getQuatReal+0x24>)
 8101136:	881b      	ldrh	r3, [r3, #0]
 8101138:	b21b      	sxth	r3, r3
 810113a:	4a07      	ldr	r2, [pc, #28]	@ (8101158 <BNO086_getQuatReal+0x28>)
 810113c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101140:	b2d2      	uxtb	r2, r2
 8101142:	4611      	mov	r1, r2
 8101144:	4618      	mov	r0, r3
 8101146:	f000 f941 	bl	81013cc <BNO086_qToFloat>
 810114a:	eef0 7a40 	vmov.f32	s15, s0
}
 810114e:	eeb0 0a67 	vmov.f32	s0, s15
 8101152:	bd80      	pop	{r7, pc}
 8101154:	1000014e 	.word	0x1000014e
 8101158:	10000000 	.word	0x10000000

0810115c <BNO086_getQuatAccuracy>:
	return BNO086_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO086_getQuatAccuracy()
{
 810115c:	b480      	push	{r7}
 810115e:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8101160:	4b03      	ldr	r3, [pc, #12]	@ (8101170 <BNO086_getQuatAccuracy+0x14>)
 8101162:	881b      	ldrh	r3, [r3, #0]
 8101164:	b2db      	uxtb	r3, r3
}
 8101166:	4618      	mov	r0, r3
 8101168:	46bd      	mov	sp, r7
 810116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810116e:	4770      	bx	lr
 8101170:	10000152 	.word	0x10000152

08101174 <BNO086_getAccelX>:

//Return the acceleration component
float BNO086_getAccelX()
{
 8101174:	b580      	push	{r7, lr}
 8101176:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawAccelX, accelerometer_Q1);
 8101178:	4b07      	ldr	r3, [pc, #28]	@ (8101198 <BNO086_getAccelX+0x24>)
 810117a:	881b      	ldrh	r3, [r3, #0]
 810117c:	b21b      	sxth	r3, r3
 810117e:	4a07      	ldr	r2, [pc, #28]	@ (810119c <BNO086_getAccelX+0x28>)
 8101180:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101184:	b2d2      	uxtb	r2, r2
 8101186:	4611      	mov	r1, r2
 8101188:	4618      	mov	r0, r3
 810118a:	f000 f91f 	bl	81013cc <BNO086_qToFloat>
 810118e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101192:	eeb0 0a67 	vmov.f32	s0, s15
 8101196:	bd80      	pop	{r7, pc}
 8101198:	10000128 	.word	0x10000128
 810119c:	10000002 	.word	0x10000002

081011a0 <BNO086_getAccelY>:

//Return the acceleration component
float BNO086_getAccelY()
{
 81011a0:	b580      	push	{r7, lr}
 81011a2:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawAccelY, accelerometer_Q1);
 81011a4:	4b07      	ldr	r3, [pc, #28]	@ (81011c4 <BNO086_getAccelY+0x24>)
 81011a6:	881b      	ldrh	r3, [r3, #0]
 81011a8:	b21b      	sxth	r3, r3
 81011aa:	4a07      	ldr	r2, [pc, #28]	@ (81011c8 <BNO086_getAccelY+0x28>)
 81011ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 81011b0:	b2d2      	uxtb	r2, r2
 81011b2:	4611      	mov	r1, r2
 81011b4:	4618      	mov	r0, r3
 81011b6:	f000 f909 	bl	81013cc <BNO086_qToFloat>
 81011ba:	eef0 7a40 	vmov.f32	s15, s0
}
 81011be:	eeb0 0a67 	vmov.f32	s0, s15
 81011c2:	bd80      	pop	{r7, pc}
 81011c4:	1000012a 	.word	0x1000012a
 81011c8:	10000002 	.word	0x10000002

081011cc <BNO086_getAccelZ>:

//Return the acceleration component
float BNO086_getAccelZ()
{
 81011cc:	b580      	push	{r7, lr}
 81011ce:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawAccelZ, accelerometer_Q1);
 81011d0:	4b07      	ldr	r3, [pc, #28]	@ (81011f0 <BNO086_getAccelZ+0x24>)
 81011d2:	881b      	ldrh	r3, [r3, #0]
 81011d4:	b21b      	sxth	r3, r3
 81011d6:	4a07      	ldr	r2, [pc, #28]	@ (81011f4 <BNO086_getAccelZ+0x28>)
 81011d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 81011dc:	b2d2      	uxtb	r2, r2
 81011de:	4611      	mov	r1, r2
 81011e0:	4618      	mov	r0, r3
 81011e2:	f000 f8f3 	bl	81013cc <BNO086_qToFloat>
 81011e6:	eef0 7a40 	vmov.f32	s15, s0
}
 81011ea:	eeb0 0a67 	vmov.f32	s0, s15
 81011ee:	bd80      	pop	{r7, pc}
 81011f0:	1000012c 	.word	0x1000012c
 81011f4:	10000002 	.word	0x10000002

081011f8 <BNO086_getAccelAccuracy>:

//Return the acceleration component
uint8_t BNO086_getAccelAccuracy()
{
 81011f8:	b480      	push	{r7}
 81011fa:	af00      	add	r7, sp, #0
	return (accelAccuracy);
 81011fc:	4b03      	ldr	r3, [pc, #12]	@ (810120c <BNO086_getAccelAccuracy+0x14>)
 81011fe:	881b      	ldrh	r3, [r3, #0]
 8101200:	b2db      	uxtb	r3, r3
}
 8101202:	4618      	mov	r0, r3
 8101204:	46bd      	mov	sp, r7
 8101206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810120a:	4770      	bx	lr
 810120c:	1000012e 	.word	0x1000012e

08101210 <BNO086_getLinAccelX>:

// linear acceleration, i.e. minus gravity

//Return the acceleration component
float BNO086_getLinAccelX()
{
 8101210:	b580      	push	{r7, lr}
 8101212:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawLinAccelX, linear_accelerometer_Q1);
 8101214:	4b07      	ldr	r3, [pc, #28]	@ (8101234 <BNO086_getLinAccelX+0x24>)
 8101216:	881b      	ldrh	r3, [r3, #0]
 8101218:	b21b      	sxth	r3, r3
 810121a:	4a07      	ldr	r2, [pc, #28]	@ (8101238 <BNO086_getLinAccelX+0x28>)
 810121c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101220:	b2d2      	uxtb	r2, r2
 8101222:	4611      	mov	r1, r2
 8101224:	4618      	mov	r0, r3
 8101226:	f000 f8d1 	bl	81013cc <BNO086_qToFloat>
 810122a:	eef0 7a40 	vmov.f32	s15, s0
}
 810122e:	eeb0 0a67 	vmov.f32	s0, s15
 8101232:	bd80      	pop	{r7, pc}
 8101234:	10000130 	.word	0x10000130
 8101238:	10000004 	.word	0x10000004

0810123c <BNO086_getLinAccelY>:

//Return the acceleration component
float BNO086_getLinAccelY()
{
 810123c:	b580      	push	{r7, lr}
 810123e:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawLinAccelY, linear_accelerometer_Q1);
 8101240:	4b07      	ldr	r3, [pc, #28]	@ (8101260 <BNO086_getLinAccelY+0x24>)
 8101242:	881b      	ldrh	r3, [r3, #0]
 8101244:	b21b      	sxth	r3, r3
 8101246:	4a07      	ldr	r2, [pc, #28]	@ (8101264 <BNO086_getLinAccelY+0x28>)
 8101248:	f9b2 2000 	ldrsh.w	r2, [r2]
 810124c:	b2d2      	uxtb	r2, r2
 810124e:	4611      	mov	r1, r2
 8101250:	4618      	mov	r0, r3
 8101252:	f000 f8bb 	bl	81013cc <BNO086_qToFloat>
 8101256:	eef0 7a40 	vmov.f32	s15, s0
}
 810125a:	eeb0 0a67 	vmov.f32	s0, s15
 810125e:	bd80      	pop	{r7, pc}
 8101260:	10000132 	.word	0x10000132
 8101264:	10000004 	.word	0x10000004

08101268 <BNO086_getLinAccelZ>:

//Return the acceleration component
float BNO086_getLinAccelZ()
{
 8101268:	b580      	push	{r7, lr}
 810126a:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawLinAccelZ, linear_accelerometer_Q1);
 810126c:	4b07      	ldr	r3, [pc, #28]	@ (810128c <BNO086_getLinAccelZ+0x24>)
 810126e:	881b      	ldrh	r3, [r3, #0]
 8101270:	b21b      	sxth	r3, r3
 8101272:	4a07      	ldr	r2, [pc, #28]	@ (8101290 <BNO086_getLinAccelZ+0x28>)
 8101274:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101278:	b2d2      	uxtb	r2, r2
 810127a:	4611      	mov	r1, r2
 810127c:	4618      	mov	r0, r3
 810127e:	f000 f8a5 	bl	81013cc <BNO086_qToFloat>
 8101282:	eef0 7a40 	vmov.f32	s15, s0
}
 8101286:	eeb0 0a67 	vmov.f32	s0, s15
 810128a:	bd80      	pop	{r7, pc}
 810128c:	10000134 	.word	0x10000134
 8101290:	10000004 	.word	0x10000004

08101294 <BNO086_getGyroX>:
	return (accelLinAccuracy);
}

//Return the gyro component
float BNO086_getGyroX()
{
 8101294:	b580      	push	{r7, lr}
 8101296:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawGyroX, gyro_Q1);
 8101298:	4b07      	ldr	r3, [pc, #28]	@ (81012b8 <BNO086_getGyroX+0x24>)
 810129a:	881b      	ldrh	r3, [r3, #0]
 810129c:	b21b      	sxth	r3, r3
 810129e:	4a07      	ldr	r2, [pc, #28]	@ (81012bc <BNO086_getGyroX+0x28>)
 81012a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 81012a4:	b2d2      	uxtb	r2, r2
 81012a6:	4611      	mov	r1, r2
 81012a8:	4618      	mov	r0, r3
 81012aa:	f000 f88f 	bl	81013cc <BNO086_qToFloat>
 81012ae:	eef0 7a40 	vmov.f32	s15, s0
}
 81012b2:	eeb0 0a67 	vmov.f32	s0, s15
 81012b6:	bd80      	pop	{r7, pc}
 81012b8:	10000138 	.word	0x10000138
 81012bc:	10000006 	.word	0x10000006

081012c0 <BNO086_getGyroY>:

//Return the gyro component
float BNO086_getGyroY()
{
 81012c0:	b580      	push	{r7, lr}
 81012c2:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawGyroY, gyro_Q1);
 81012c4:	4b07      	ldr	r3, [pc, #28]	@ (81012e4 <BNO086_getGyroY+0x24>)
 81012c6:	881b      	ldrh	r3, [r3, #0]
 81012c8:	b21b      	sxth	r3, r3
 81012ca:	4a07      	ldr	r2, [pc, #28]	@ (81012e8 <BNO086_getGyroY+0x28>)
 81012cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 81012d0:	b2d2      	uxtb	r2, r2
 81012d2:	4611      	mov	r1, r2
 81012d4:	4618      	mov	r0, r3
 81012d6:	f000 f879 	bl	81013cc <BNO086_qToFloat>
 81012da:	eef0 7a40 	vmov.f32	s15, s0
}
 81012de:	eeb0 0a67 	vmov.f32	s0, s15
 81012e2:	bd80      	pop	{r7, pc}
 81012e4:	1000013a 	.word	0x1000013a
 81012e8:	10000006 	.word	0x10000006

081012ec <BNO086_getGyroZ>:

//Return the gyro component
float BNO086_getGyroZ()
{
 81012ec:	b580      	push	{r7, lr}
 81012ee:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawGyroZ, gyro_Q1);
 81012f0:	4b07      	ldr	r3, [pc, #28]	@ (8101310 <BNO086_getGyroZ+0x24>)
 81012f2:	881b      	ldrh	r3, [r3, #0]
 81012f4:	b21b      	sxth	r3, r3
 81012f6:	4a07      	ldr	r2, [pc, #28]	@ (8101314 <BNO086_getGyroZ+0x28>)
 81012f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 81012fc:	b2d2      	uxtb	r2, r2
 81012fe:	4611      	mov	r1, r2
 8101300:	4618      	mov	r0, r3
 8101302:	f000 f863 	bl	81013cc <BNO086_qToFloat>
 8101306:	eef0 7a40 	vmov.f32	s15, s0
}
 810130a:	eeb0 0a67 	vmov.f32	s0, s15
 810130e:	bd80      	pop	{r7, pc}
 8101310:	1000013c 	.word	0x1000013c
 8101314:	10000006 	.word	0x10000006

08101318 <BNO086_getGyroAccuracy>:

//Return the gyro component
uint8_t BNO086_getGyroAccuracy()
{
 8101318:	b480      	push	{r7}
 810131a:	af00      	add	r7, sp, #0
	return (gyroAccuracy);
 810131c:	4b03      	ldr	r3, [pc, #12]	@ (810132c <BNO086_getGyroAccuracy+0x14>)
 810131e:	881b      	ldrh	r3, [r3, #0]
 8101320:	b2db      	uxtb	r3, r3
}
 8101322:	4618      	mov	r0, r3
 8101324:	46bd      	mov	sp, r7
 8101326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810132a:	4770      	bx	lr
 810132c:	1000013e 	.word	0x1000013e

08101330 <BNO086_getMagX>:

//Return the magnetometer component
float BNO086_getMagX()
{
 8101330:	b580      	push	{r7, lr}
 8101332:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawMagX, magnetometer_Q1);
 8101334:	4b07      	ldr	r3, [pc, #28]	@ (8101354 <BNO086_getMagX+0x24>)
 8101336:	881b      	ldrh	r3, [r3, #0]
 8101338:	b21b      	sxth	r3, r3
 810133a:	4a07      	ldr	r2, [pc, #28]	@ (8101358 <BNO086_getMagX+0x28>)
 810133c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101340:	b2d2      	uxtb	r2, r2
 8101342:	4611      	mov	r1, r2
 8101344:	4618      	mov	r0, r3
 8101346:	f000 f841 	bl	81013cc <BNO086_qToFloat>
 810134a:	eef0 7a40 	vmov.f32	s15, s0
}
 810134e:	eeb0 0a67 	vmov.f32	s0, s15
 8101352:	bd80      	pop	{r7, pc}
 8101354:	10000140 	.word	0x10000140
 8101358:	10000008 	.word	0x10000008

0810135c <BNO086_getMagY>:

//Return the magnetometer component
float BNO086_getMagY()
{
 810135c:	b580      	push	{r7, lr}
 810135e:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawMagY, magnetometer_Q1);
 8101360:	4b07      	ldr	r3, [pc, #28]	@ (8101380 <BNO086_getMagY+0x24>)
 8101362:	881b      	ldrh	r3, [r3, #0]
 8101364:	b21b      	sxth	r3, r3
 8101366:	4a07      	ldr	r2, [pc, #28]	@ (8101384 <BNO086_getMagY+0x28>)
 8101368:	f9b2 2000 	ldrsh.w	r2, [r2]
 810136c:	b2d2      	uxtb	r2, r2
 810136e:	4611      	mov	r1, r2
 8101370:	4618      	mov	r0, r3
 8101372:	f000 f82b 	bl	81013cc <BNO086_qToFloat>
 8101376:	eef0 7a40 	vmov.f32	s15, s0
}
 810137a:	eeb0 0a67 	vmov.f32	s0, s15
 810137e:	bd80      	pop	{r7, pc}
 8101380:	10000142 	.word	0x10000142
 8101384:	10000008 	.word	0x10000008

08101388 <BNO086_getMagZ>:

//Return the magnetometer component
float BNO086_getMagZ()
{
 8101388:	b580      	push	{r7, lr}
 810138a:	af00      	add	r7, sp, #0
	return BNO086_qToFloat(rawMagZ, magnetometer_Q1);
 810138c:	4b07      	ldr	r3, [pc, #28]	@ (81013ac <BNO086_getMagZ+0x24>)
 810138e:	881b      	ldrh	r3, [r3, #0]
 8101390:	b21b      	sxth	r3, r3
 8101392:	4a07      	ldr	r2, [pc, #28]	@ (81013b0 <BNO086_getMagZ+0x28>)
 8101394:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101398:	b2d2      	uxtb	r2, r2
 810139a:	4611      	mov	r1, r2
 810139c:	4618      	mov	r0, r3
 810139e:	f000 f815 	bl	81013cc <BNO086_qToFloat>
 81013a2:	eef0 7a40 	vmov.f32	s15, s0
}
 81013a6:	eeb0 0a67 	vmov.f32	s0, s15
 81013aa:	bd80      	pop	{r7, pc}
 81013ac:	10000144 	.word	0x10000144
 81013b0:	10000008 	.word	0x10000008

081013b4 <BNO086_getMagAccuracy>:

//Return the mag component
uint8_t BNO086_getMagAccuracy()
{
 81013b4:	b480      	push	{r7}
 81013b6:	af00      	add	r7, sp, #0
	return (magAccuracy);
 81013b8:	4b03      	ldr	r3, [pc, #12]	@ (81013c8 <BNO086_getMagAccuracy+0x14>)
 81013ba:	881b      	ldrh	r3, [r3, #0]
 81013bc:	b2db      	uxtb	r3, r3
}
 81013be:	4618      	mov	r0, r3
 81013c0:	46bd      	mov	sp, r7
 81013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c6:	4770      	bx	lr
 81013c8:	10000146 	.word	0x10000146

081013cc <BNO086_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO086_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 81013cc:	b580      	push	{r7, lr}
 81013ce:	ed2d 8b02 	vpush	{d8}
 81013d2:	b082      	sub	sp, #8
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	4603      	mov	r3, r0
 81013d8:	460a      	mov	r2, r1
 81013da:	80fb      	strh	r3, [r7, #6]
 81013dc:	4613      	mov	r3, r2
 81013de:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 81013e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013e4:	ee07 3a90 	vmov	s15, r3
 81013e8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 81013ec:	797b      	ldrb	r3, [r7, #5]
 81013ee:	425b      	negs	r3, r3
 81013f0:	ee07 3a90 	vmov	s15, r3
 81013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81013f8:	eef0 0a67 	vmov.f32	s1, s15
 81013fc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8101400:	f004 ff82 	bl	8106308 <powf>
 8101404:	eef0 7a40 	vmov.f32	s15, s0
 8101408:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 810140c:	eeb0 0a67 	vmov.f32	s0, s15
 8101410:	3708      	adds	r7, #8
 8101412:	46bd      	mov	sp, r7
 8101414:	ecbd 8b02 	vpop	{d8}
 8101418:	bd80      	pop	{r7, pc}

0810141a <BNO086_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO086_enableRotationVector(uint16_t timeBetweenReports)
{
 810141a:	b580      	push	{r7, lr}
 810141c:	b082      	sub	sp, #8
 810141e:	af00      	add	r7, sp, #0
 8101420:	4603      	mov	r3, r0
 8101422:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8101424:	88fb      	ldrh	r3, [r7, #6]
 8101426:	2200      	movs	r2, #0
 8101428:	4619      	mov	r1, r3
 810142a:	2005      	movs	r0, #5
 810142c:	f000 f866 	bl	81014fc <BNO086_setFeatureCommand>
}
 8101430:	bf00      	nop
 8101432:	3708      	adds	r7, #8
 8101434:	46bd      	mov	sp, r7
 8101436:	bd80      	pop	{r7, pc}

08101438 <BNO086_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO086_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8101438:	b580      	push	{r7, lr}
 810143a:	b082      	sub	sp, #8
 810143c:	af00      	add	r7, sp, #0
 810143e:	4603      	mov	r3, r0
 8101440:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8101442:	88fb      	ldrh	r3, [r7, #6]
 8101444:	2200      	movs	r2, #0
 8101446:	4619      	mov	r1, r3
 8101448:	2008      	movs	r0, #8
 810144a:	f000 f857 	bl	81014fc <BNO086_setFeatureCommand>
}
 810144e:	bf00      	nop
 8101450:	3708      	adds	r7, #8
 8101452:	46bd      	mov	sp, r7
 8101454:	bd80      	pop	{r7, pc}

08101456 <BNO086_enableAccelerometer>:

//Sends the packet to enable the accelerometer
void BNO086_enableAccelerometer(uint16_t timeBetweenReports)
{
 8101456:	b580      	push	{r7, lr}
 8101458:	b082      	sub	sp, #8
 810145a:	af00      	add	r7, sp, #0
 810145c:	4603      	mov	r3, r0
 810145e:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_ACCELEROMETER, timeBetweenReports, 0);
 8101460:	88fb      	ldrh	r3, [r7, #6]
 8101462:	2200      	movs	r2, #0
 8101464:	4619      	mov	r1, r3
 8101466:	2001      	movs	r0, #1
 8101468:	f000 f848 	bl	81014fc <BNO086_setFeatureCommand>
}
 810146c:	bf00      	nop
 810146e:	3708      	adds	r7, #8
 8101470:	46bd      	mov	sp, r7
 8101472:	bd80      	pop	{r7, pc}

08101474 <BNO086_enableLinearAccelerometer>:

//Sends the packet to enable the accelerometer
void BNO086_enableLinearAccelerometer(uint16_t timeBetweenReports)
{
 8101474:	b580      	push	{r7, lr}
 8101476:	b082      	sub	sp, #8
 8101478:	af00      	add	r7, sp, #0
 810147a:	4603      	mov	r3, r0
 810147c:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_LINEAR_ACCELERATION, timeBetweenReports, 0);
 810147e:	88fb      	ldrh	r3, [r7, #6]
 8101480:	2200      	movs	r2, #0
 8101482:	4619      	mov	r1, r3
 8101484:	2004      	movs	r0, #4
 8101486:	f000 f839 	bl	81014fc <BNO086_setFeatureCommand>
}
 810148a:	bf00      	nop
 810148c:	3708      	adds	r7, #8
 810148e:	46bd      	mov	sp, r7
 8101490:	bd80      	pop	{r7, pc}

08101492 <BNO086_enableGyro>:

//Sends the packet to enable the gyro
void BNO086_enableGyro(uint16_t timeBetweenReports)
{
 8101492:	b580      	push	{r7, lr}
 8101494:	b082      	sub	sp, #8
 8101496:	af00      	add	r7, sp, #0
 8101498:	4603      	mov	r3, r0
 810149a:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
 810149c:	88fb      	ldrh	r3, [r7, #6]
 810149e:	2200      	movs	r2, #0
 81014a0:	4619      	mov	r1, r3
 81014a2:	2002      	movs	r0, #2
 81014a4:	f000 f82a 	bl	81014fc <BNO086_setFeatureCommand>
}
 81014a8:	bf00      	nop
 81014aa:	3708      	adds	r7, #8
 81014ac:	46bd      	mov	sp, r7
 81014ae:	bd80      	pop	{r7, pc}

081014b0 <BNO086_enableMagnetometer>:

//Sends the packet to enable the magnetometer
void BNO086_enableMagnetometer(uint16_t timeBetweenReports)
{
 81014b0:	b580      	push	{r7, lr}
 81014b2:	b082      	sub	sp, #8
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	4603      	mov	r3, r0
 81014b8:	80fb      	strh	r3, [r7, #6]
	BNO086_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 81014ba:	88fb      	ldrh	r3, [r7, #6]
 81014bc:	2200      	movs	r2, #0
 81014be:	4619      	mov	r1, r3
 81014c0:	2003      	movs	r0, #3
 81014c2:	f000 f81b 	bl	81014fc <BNO086_setFeatureCommand>
}
 81014c6:	bf00      	nop
 81014c8:	3708      	adds	r7, #8
 81014ca:	46bd      	mov	sp, r7
 81014cc:	bd80      	pop	{r7, pc}

081014ce <BNO086_calibrateAll>:
	BNO086_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO086_calibrateAll()
{
 81014ce:	b580      	push	{r7, lr}
 81014d0:	af00      	add	r7, sp, #0
	BNO086_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 81014d2:	2004      	movs	r0, #4
 81014d4:	f000 f884 	bl	81015e0 <BNO086_sendCalibrateCommand>
}
 81014d8:	bf00      	nop
 81014da:	bd80      	pop	{r7, pc}

081014dc <BNO086_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO086_calibrationComplete()
{
 81014dc:	b480      	push	{r7}
 81014de:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 81014e0:	4b05      	ldr	r3, [pc, #20]	@ (81014f8 <BNO086_calibrationComplete+0x1c>)
 81014e2:	781b      	ldrb	r3, [r3, #0]
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d101      	bne.n	81014ec <BNO086_calibrationComplete+0x10>
		return (1);
 81014e8:	2301      	movs	r3, #1
 81014ea:	e000      	b.n	81014ee <BNO086_calibrationComplete+0x12>
	return (0);
 81014ec:	2300      	movs	r3, #0
}
 81014ee:	4618      	mov	r0, r3
 81014f0:	46bd      	mov	sp, r7
 81014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014f6:	4770      	bx	lr
 81014f8:	10000164 	.word	0x10000164

081014fc <BNO086_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO086 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO086_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 81014fc:	b580      	push	{r7, lr}
 81014fe:	b084      	sub	sp, #16
 8101500:	af00      	add	r7, sp, #0
 8101502:	4603      	mov	r3, r0
 8101504:	60b9      	str	r1, [r7, #8]
 8101506:	607a      	str	r2, [r7, #4]
 8101508:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 810150a:	4b24      	ldr	r3, [pc, #144]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810150c:	22fd      	movs	r2, #253	@ 0xfd
 810150e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8101510:	4a22      	ldr	r2, [pc, #136]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101512:	7bfb      	ldrb	r3, [r7, #15]
 8101514:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8101516:	4b21      	ldr	r3, [pc, #132]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101518:	2200      	movs	r2, #0
 810151a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 810151c:	4b1f      	ldr	r3, [pc, #124]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810151e:	2200      	movs	r2, #0
 8101520:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8101522:	4b1e      	ldr	r3, [pc, #120]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101524:	2200      	movs	r2, #0
 8101526:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8101528:	68bb      	ldr	r3, [r7, #8]
 810152a:	b2da      	uxtb	r2, r3
 810152c:	4b1b      	ldr	r3, [pc, #108]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810152e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8101530:	68bb      	ldr	r3, [r7, #8]
 8101532:	0a1b      	lsrs	r3, r3, #8
 8101534:	b2da      	uxtb	r2, r3
 8101536:	4b19      	ldr	r3, [pc, #100]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101538:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 810153a:	68bb      	ldr	r3, [r7, #8]
 810153c:	0c1b      	lsrs	r3, r3, #16
 810153e:	b2da      	uxtb	r2, r3
 8101540:	4b16      	ldr	r3, [pc, #88]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101542:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8101544:	68bb      	ldr	r3, [r7, #8]
 8101546:	0e1b      	lsrs	r3, r3, #24
 8101548:	b2da      	uxtb	r2, r3
 810154a:	4b14      	ldr	r3, [pc, #80]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810154c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 810154e:	4b13      	ldr	r3, [pc, #76]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101550:	2200      	movs	r2, #0
 8101552:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8101554:	4b11      	ldr	r3, [pc, #68]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101556:	2200      	movs	r2, #0
 8101558:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 810155a:	4b10      	ldr	r3, [pc, #64]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810155c:	2200      	movs	r2, #0
 810155e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8101560:	4b0e      	ldr	r3, [pc, #56]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101562:	2200      	movs	r2, #0
 8101564:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8101566:	687b      	ldr	r3, [r7, #4]
 8101568:	b2da      	uxtb	r2, r3
 810156a:	4b0c      	ldr	r3, [pc, #48]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810156c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 810156e:	687b      	ldr	r3, [r7, #4]
 8101570:	0a1b      	lsrs	r3, r3, #8
 8101572:	b2da      	uxtb	r2, r3
 8101574:	4b09      	ldr	r3, [pc, #36]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101576:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	0c1b      	lsrs	r3, r3, #16
 810157c:	b2da      	uxtb	r2, r3
 810157e:	4b07      	ldr	r3, [pc, #28]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 8101580:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8101582:	687b      	ldr	r3, [r7, #4]
 8101584:	0e1b      	lsrs	r3, r3, #24
 8101586:	b2da      	uxtb	r2, r3
 8101588:	4b04      	ldr	r3, [pc, #16]	@ (810159c <BNO086_setFeatureCommand+0xa0>)
 810158a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO086_sendPacket(CHANNEL_CONTROL, 17);
 810158c:	2111      	movs	r1, #17
 810158e:	2002      	movs	r0, #2
 8101590:	f000 f932 	bl	81017f8 <BNO086_sendPacket>
}
 8101594:	bf00      	nop
 8101596:	3710      	adds	r7, #16
 8101598:	46bd      	mov	sp, r7
 810159a:	bd80      	pop	{r7, pc}
 810159c:	100000a0 	.word	0x100000a0

081015a0 <BNO086_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO086_sendCommand(uint8_t command)
{
 81015a0:	b580      	push	{r7, lr}
 81015a2:	b082      	sub	sp, #8
 81015a4:	af00      	add	r7, sp, #0
 81015a6:	4603      	mov	r3, r0
 81015a8:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 81015aa:	4b0b      	ldr	r3, [pc, #44]	@ (81015d8 <BNO086_sendCommand+0x38>)
 81015ac:	22f2      	movs	r2, #242	@ 0xf2
 81015ae:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 81015b0:	4b0a      	ldr	r3, [pc, #40]	@ (81015dc <BNO086_sendCommand+0x3c>)
 81015b2:	781b      	ldrb	r3, [r3, #0]
 81015b4:	1c5a      	adds	r2, r3, #1
 81015b6:	b2d1      	uxtb	r1, r2
 81015b8:	4a08      	ldr	r2, [pc, #32]	@ (81015dc <BNO086_sendCommand+0x3c>)
 81015ba:	7011      	strb	r1, [r2, #0]
 81015bc:	4a06      	ldr	r2, [pc, #24]	@ (81015d8 <BNO086_sendCommand+0x38>)
 81015be:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 81015c0:	4a05      	ldr	r2, [pc, #20]	@ (81015d8 <BNO086_sendCommand+0x38>)
 81015c2:	79fb      	ldrb	r3, [r7, #7]
 81015c4:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO086_sendPacket(CHANNEL_CONTROL, 12);
 81015c6:	210c      	movs	r1, #12
 81015c8:	2002      	movs	r0, #2
 81015ca:	f000 f915 	bl	81017f8 <BNO086_sendPacket>
}
 81015ce:	bf00      	nop
 81015d0:	3708      	adds	r7, #8
 81015d2:	46bd      	mov	sp, r7
 81015d4:	bd80      	pop	{r7, pc}
 81015d6:	bf00      	nop
 81015d8:	100000a0 	.word	0x100000a0
 81015dc:	10000126 	.word	0x10000126

081015e0 <BNO086_sendCalibrateCommand>:

//This tells the BNO086 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO086_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 81015e0:	b580      	push	{r7, lr}
 81015e2:	b084      	sub	sp, #16
 81015e4:	af00      	add	r7, sp, #0
 81015e6:	4603      	mov	r3, r0
 81015e8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 81015ea:	2303      	movs	r3, #3
 81015ec:	73fb      	strb	r3, [r7, #15]
 81015ee:	e006      	b.n	81015fe <BNO086_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 81015f0:	7bfb      	ldrb	r3, [r7, #15]
 81015f2:	4a1d      	ldr	r2, [pc, #116]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 81015f4:	2100      	movs	r1, #0
 81015f6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 81015f8:	7bfb      	ldrb	r3, [r7, #15]
 81015fa:	3301      	adds	r3, #1
 81015fc:	73fb      	strb	r3, [r7, #15]
 81015fe:	7bfb      	ldrb	r3, [r7, #15]
 8101600:	2b0b      	cmp	r3, #11
 8101602:	d9f5      	bls.n	81015f0 <BNO086_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8101604:	79fb      	ldrb	r3, [r7, #7]
 8101606:	2b00      	cmp	r3, #0
 8101608:	d103      	bne.n	8101612 <BNO086_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 810160a:	4b17      	ldr	r3, [pc, #92]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 810160c:	2201      	movs	r2, #1
 810160e:	70da      	strb	r2, [r3, #3]
 8101610:	e020      	b.n	8101654 <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8101612:	79fb      	ldrb	r3, [r7, #7]
 8101614:	2b01      	cmp	r3, #1
 8101616:	d103      	bne.n	8101620 <BNO086_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8101618:	4b13      	ldr	r3, [pc, #76]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 810161a:	2201      	movs	r2, #1
 810161c:	711a      	strb	r2, [r3, #4]
 810161e:	e019      	b.n	8101654 <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8101620:	79fb      	ldrb	r3, [r7, #7]
 8101622:	2b02      	cmp	r3, #2
 8101624:	d103      	bne.n	810162e <BNO086_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8101626:	4b10      	ldr	r3, [pc, #64]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 8101628:	2201      	movs	r2, #1
 810162a:	715a      	strb	r2, [r3, #5]
 810162c:	e012      	b.n	8101654 <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 810162e:	79fb      	ldrb	r3, [r7, #7]
 8101630:	2b03      	cmp	r3, #3
 8101632:	d103      	bne.n	810163c <BNO086_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8101634:	4b0c      	ldr	r3, [pc, #48]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 8101636:	2201      	movs	r2, #1
 8101638:	71da      	strb	r2, [r3, #7]
 810163a:	e00b      	b.n	8101654 <BNO086_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 810163c:	79fb      	ldrb	r3, [r7, #7]
 810163e:	2b04      	cmp	r3, #4
 8101640:	d108      	bne.n	8101654 <BNO086_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8101642:	4b09      	ldr	r3, [pc, #36]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 8101644:	2201      	movs	r2, #1
 8101646:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8101648:	4b07      	ldr	r3, [pc, #28]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 810164a:	2201      	movs	r2, #1
 810164c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 810164e:	4b06      	ldr	r3, [pc, #24]	@ (8101668 <BNO086_sendCalibrateCommand+0x88>)
 8101650:	2201      	movs	r2, #1
 8101652:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8101654:	4b05      	ldr	r3, [pc, #20]	@ (810166c <BNO086_sendCalibrateCommand+0x8c>)
 8101656:	2201      	movs	r2, #1
 8101658:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO086_sendCommand(COMMAND_ME_CALIBRATE);
 810165a:	2007      	movs	r0, #7
 810165c:	f7ff ffa0 	bl	81015a0 <BNO086_sendCommand>
}
 8101660:	bf00      	nop
 8101662:	3710      	adds	r7, #16
 8101664:	46bd      	mov	sp, r7
 8101666:	bd80      	pop	{r7, pc}
 8101668:	100000a0 	.word	0x100000a0
 810166c:	10000164 	.word	0x10000164

08101670 <BNO086_requestCalibrationStatus>:

//Request ME Calibration Status from BNO086
//See page 51 of reference manual
void BNO086_requestCalibrationStatus()
{
 8101670:	b580      	push	{r7, lr}
 8101672:	b082      	sub	sp, #8
 8101674:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101676:	2303      	movs	r3, #3
 8101678:	71fb      	strb	r3, [r7, #7]
 810167a:	e006      	b.n	810168a <BNO086_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 810167c:	79fb      	ldrb	r3, [r7, #7]
 810167e:	4a09      	ldr	r2, [pc, #36]	@ (81016a4 <BNO086_requestCalibrationStatus+0x34>)
 8101680:	2100      	movs	r1, #0
 8101682:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101684:	79fb      	ldrb	r3, [r7, #7]
 8101686:	3301      	adds	r3, #1
 8101688:	71fb      	strb	r3, [r7, #7]
 810168a:	79fb      	ldrb	r3, [r7, #7]
 810168c:	2b0b      	cmp	r3, #11
 810168e:	d9f5      	bls.n	810167c <BNO086_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8101690:	4b04      	ldr	r3, [pc, #16]	@ (81016a4 <BNO086_requestCalibrationStatus+0x34>)
 8101692:	2201      	movs	r2, #1
 8101694:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO086_sendCommand(COMMAND_ME_CALIBRATE);
 8101696:	2007      	movs	r0, #7
 8101698:	f7ff ff82 	bl	81015a0 <BNO086_sendCommand>
}
 810169c:	bf00      	nop
 810169e:	3708      	adds	r7, #8
 81016a0:	46bd      	mov	sp, r7
 81016a2:	bd80      	pop	{r7, pc}
 81016a4:	100000a0 	.word	0x100000a0

081016a8 <BNO086_saveCalibration>:

//This tells the BNO086 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO086_saveCalibration()
{
 81016a8:	b580      	push	{r7, lr}
 81016aa:	b082      	sub	sp, #8
 81016ac:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 81016ae:	2303      	movs	r3, #3
 81016b0:	71fb      	strb	r3, [r7, #7]
 81016b2:	e006      	b.n	81016c2 <BNO086_saveCalibration+0x1a>
		shtpData[x] = 0;
 81016b4:	79fb      	ldrb	r3, [r7, #7]
 81016b6:	4a08      	ldr	r2, [pc, #32]	@ (81016d8 <BNO086_saveCalibration+0x30>)
 81016b8:	2100      	movs	r1, #0
 81016ba:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 81016bc:	79fb      	ldrb	r3, [r7, #7]
 81016be:	3301      	adds	r3, #1
 81016c0:	71fb      	strb	r3, [r7, #7]
 81016c2:	79fb      	ldrb	r3, [r7, #7]
 81016c4:	2b0b      	cmp	r3, #11
 81016c6:	d9f5      	bls.n	81016b4 <BNO086_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO086_sendCommand(COMMAND_DCD); //Save DCD command
 81016c8:	2006      	movs	r0, #6
 81016ca:	f7ff ff69 	bl	81015a0 <BNO086_sendCommand>
}
 81016ce:	bf00      	nop
 81016d0:	3708      	adds	r7, #8
 81016d2:	46bd      	mov	sp, r7
 81016d4:	bd80      	pop	{r7, pc}
 81016d6:	bf00      	nop
 81016d8:	100000a0 	.word	0x100000a0

081016dc <BNO086_waitForSPI>:

//Blocking wait for BNO086 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO086_waitForSPI(void)
{
 81016dc:	b580      	push	{r7, lr}
 81016de:	b082      	sub	sp, #8
 81016e0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 81016e2:	2300      	movs	r3, #0
 81016e4:	607b      	str	r3, [r7, #4]
 81016e6:	e00c      	b.n	8101702 <BNO086_waitForSPI+0x26>
	{
		if (HAL_GPIO_ReadPin(BNO086_INT_PORT, BNO086_INT_PIN) == 0)
 81016e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81016ec:	4809      	ldr	r0, [pc, #36]	@ (8101714 <BNO086_waitForSPI+0x38>)
 81016ee:	f001 fd2b 	bl	8103148 <HAL_GPIO_ReadPin>
 81016f2:	4603      	mov	r3, r0
 81016f4:	2b00      	cmp	r3, #0
 81016f6:	d101      	bne.n	81016fc <BNO086_waitForSPI+0x20>
		{
//			printf("\nData available\n");
			return (1);
 81016f8:	2301      	movs	r3, #1
 81016fa:	e007      	b.n	810170c <BNO086_waitForSPI+0x30>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	3301      	adds	r3, #1
 8101700:	607b      	str	r3, [r7, #4]
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101708:	d1ee      	bne.n	81016e8 <BNO086_waitForSPI+0xc>
		}
//		printf("SPI Wait %d\n", counter);
	}
//	printf("\nData not available\n");
	return (0);
 810170a:	2300      	movs	r3, #0
}
 810170c:	4618      	mov	r0, r3
 810170e:	3708      	adds	r7, #8
 8101710:	46bd      	mov	sp, r7
 8101712:	bd80      	pop	{r7, pc}
 8101714:	58021800 	.word	0x58021800

08101718 <BNO086_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO086_receivePacket(void)
{
 8101718:	b580      	push	{r7, lr}
 810171a:	b084      	sub	sp, #16
 810171c:	af00      	add	r7, sp, #0
	uint8_t incoming;
	if (HAL_GPIO_ReadPin(BNO086_INT_PORT, BNO086_INT_PIN) == 1)
 810171e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8101722:	4831      	ldr	r0, [pc, #196]	@ (81017e8 <BNO086_receivePacket+0xd0>)
 8101724:	f001 fd10 	bl	8103148 <HAL_GPIO_ReadPin>
 8101728:	4603      	mov	r3, r0
 810172a:	2b01      	cmp	r3, #1
 810172c:	d101      	bne.n	8101732 <BNO086_receivePacket+0x1a>
		return (0); //Data is not available
 810172e:	2300      	movs	r3, #0
 8101730:	e056      	b.n	81017e0 <BNO086_receivePacket+0xc8>

	//Old way: if (BNO086_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO086); // Todo
 8101732:	2200      	movs	r2, #0
 8101734:	2120      	movs	r1, #32
 8101736:	482d      	ldr	r0, [pc, #180]	@ (81017ec <BNO086_receivePacket+0xd4>)
 8101738:	f001 fd1e 	bl	8103178 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_RESET);

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 810173c:	2000      	movs	r0, #0
 810173e:	f7ff fae3 	bl	8100d08 <SPI2_SendByte>
 8101742:	4603      	mov	r3, r0
 8101744:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8101746:	2000      	movs	r0, #0
 8101748:	f7ff fade 	bl	8100d08 <SPI2_SendByte>
 810174c:	4603      	mov	r3, r0
 810174e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8101750:	2000      	movs	r0, #0
 8101752:	f7ff fad9 	bl	8100d08 <SPI2_SendByte>
 8101756:	4603      	mov	r3, r0
 8101758:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 810175a:	2000      	movs	r0, #0
 810175c:	f7ff fad4 	bl	8100d08 <SPI2_SendByte>
 8101760:	4603      	mov	r3, r0
 8101762:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8101764:	4a22      	ldr	r2, [pc, #136]	@ (81017f0 <BNO086_receivePacket+0xd8>)
 8101766:	7b7b      	ldrb	r3, [r7, #13]
 8101768:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 810176a:	4a21      	ldr	r2, [pc, #132]	@ (81017f0 <BNO086_receivePacket+0xd8>)
 810176c:	7b3b      	ldrb	r3, [r7, #12]
 810176e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8101770:	4a1f      	ldr	r2, [pc, #124]	@ (81017f0 <BNO086_receivePacket+0xd8>)
 8101772:	7afb      	ldrb	r3, [r7, #11]
 8101774:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8101776:	4a1e      	ldr	r2, [pc, #120]	@ (81017f0 <BNO086_receivePacket+0xd8>)
 8101778:	7abb      	ldrb	r3, [r7, #10]
 810177a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 810177c:	7b3b      	ldrb	r3, [r7, #12]
 810177e:	021b      	lsls	r3, r3, #8
 8101780:	b21a      	sxth	r2, r3
 8101782:	7b7b      	ldrb	r3, [r7, #13]
 8101784:	b21b      	sxth	r3, r3
 8101786:	4313      	orrs	r3, r2
 8101788:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 810178a:	893b      	ldrh	r3, [r7, #8]
 810178c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8101790:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	// catch this as an error and exit
	if (dataLength == 0)
 8101792:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8101796:	2b00      	cmp	r3, #0
 8101798:	d101      	bne.n	810179e <BNO086_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 810179a:	2300      	movs	r3, #0
 810179c:	e020      	b.n	81017e0 <BNO086_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 810179e:	893b      	ldrh	r3, [r7, #8]
 81017a0:	3b04      	subs	r3, #4
 81017a2:	b29b      	uxth	r3, r3
 81017a4:	813b      	strh	r3, [r7, #8]

//	printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 81017a6:	2300      	movs	r3, #0
 81017a8:	81fb      	strh	r3, [r7, #14]
 81017aa:	e00e      	b.n	81017ca <BNO086_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 81017ac:	20ff      	movs	r0, #255	@ 0xff
 81017ae:	f7ff faab 	bl	8100d08 <SPI2_SendByte>
 81017b2:	4603      	mov	r3, r0
 81017b4:	71fb      	strb	r3, [r7, #7]
//		printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO086 can respond with upto 270 bytes, avoid overflow
 81017b6:	89fb      	ldrh	r3, [r7, #14]
 81017b8:	2b7f      	cmp	r3, #127	@ 0x7f
 81017ba:	d803      	bhi.n	81017c4 <BNO086_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 81017bc:	89fb      	ldrh	r3, [r7, #14]
 81017be:	490d      	ldr	r1, [pc, #52]	@ (81017f4 <BNO086_receivePacket+0xdc>)
 81017c0:	79fa      	ldrb	r2, [r7, #7]
 81017c2:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 81017c4:	89fb      	ldrh	r3, [r7, #14]
 81017c6:	3301      	adds	r3, #1
 81017c8:	81fb      	strh	r3, [r7, #14]
 81017ca:	89fa      	ldrh	r2, [r7, #14]
 81017cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81017d0:	429a      	cmp	r2, r3
 81017d2:	dbeb      	blt.n	81017ac <BNO086_receivePacket+0x94>
	}
//	printf("\n");

	CHIP_DESELECT(BNO086); // Todo Release BNO086
 81017d4:	2201      	movs	r2, #1
 81017d6:	2120      	movs	r1, #32
 81017d8:	4804      	ldr	r0, [pc, #16]	@ (81017ec <BNO086_receivePacket+0xd4>)
 81017da:	f001 fccd 	bl	8103178 <HAL_GPIO_WritePin>
	return (1); //We're done!
 81017de:	2301      	movs	r3, #1
}
 81017e0:	4618      	mov	r0, r3
 81017e2:	3710      	adds	r7, #16
 81017e4:	46bd      	mov	sp, r7
 81017e6:	bd80      	pop	{r7, pc}
 81017e8:	58021800 	.word	0x58021800
 81017ec:	58020400 	.word	0x58020400
 81017f0:	1000009c 	.word	0x1000009c
 81017f4:	100000a0 	.word	0x100000a0

081017f8 <BNO086_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
// - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO086_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 81017f8:	b580      	push	{r7, lr}
 81017fa:	b084      	sub	sp, #16
 81017fc:	af00      	add	r7, sp, #0
 81017fe:	4603      	mov	r3, r0
 8101800:	460a      	mov	r2, r1
 8101802:	71fb      	strb	r3, [r7, #7]
 8101804:	4613      	mov	r3, r2
 8101806:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8101808:	79bb      	ldrb	r3, [r7, #6]
 810180a:	3304      	adds	r3, #4
 810180c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO086 to indicate it is available for communication
	if (BNO086_waitForSPI() == 0)
 810180e:	f7ff ff65 	bl	81016dc <BNO086_waitForSPI>
 8101812:	4603      	mov	r3, r0
 8101814:	2b00      	cmp	r3, #0
 8101816:	d101      	bne.n	810181c <BNO086_sendPacket+0x24>
		return (0); //Data is not available
 8101818:	2300      	movs	r3, #0
 810181a:	e032      	b.n	8101882 <BNO086_sendPacket+0x8a>

	//BNO086 has max CLK of 3MHz, MSB first,
	//The BNO086 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO086); // Todo
 810181c:	2200      	movs	r2, #0
 810181e:	2120      	movs	r1, #32
 8101820:	481a      	ldr	r0, [pc, #104]	@ (810188c <BNO086_sendPacket+0x94>)
 8101822:	f001 fca9 	bl	8103178 <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8101826:	7bbb      	ldrb	r3, [r7, #14]
 8101828:	4618      	mov	r0, r3
 810182a:	f7ff fa6d 	bl	8100d08 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 810182e:	7bbb      	ldrb	r3, [r7, #14]
 8101830:	121b      	asrs	r3, r3, #8
 8101832:	b2db      	uxtb	r3, r3
 8101834:	4618      	mov	r0, r3
 8101836:	f7ff fa67 	bl	8100d08 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 810183a:	79fb      	ldrb	r3, [r7, #7]
 810183c:	4618      	mov	r0, r3
 810183e:	f7ff fa63 	bl	8100d08 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8101842:	79fb      	ldrb	r3, [r7, #7]
 8101844:	4a12      	ldr	r2, [pc, #72]	@ (8101890 <BNO086_sendPacket+0x98>)
 8101846:	5cd2      	ldrb	r2, [r2, r3]
 8101848:	1c51      	adds	r1, r2, #1
 810184a:	b2c8      	uxtb	r0, r1
 810184c:	4910      	ldr	r1, [pc, #64]	@ (8101890 <BNO086_sendPacket+0x98>)
 810184e:	54c8      	strb	r0, [r1, r3]
 8101850:	4610      	mov	r0, r2
 8101852:	f7ff fa59 	bl	8100d08 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8101856:	2300      	movs	r3, #0
 8101858:	73fb      	strb	r3, [r7, #15]
 810185a:	e008      	b.n	810186e <BNO086_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 810185c:	7bfb      	ldrb	r3, [r7, #15]
 810185e:	4a0d      	ldr	r2, [pc, #52]	@ (8101894 <BNO086_sendPacket+0x9c>)
 8101860:	5cd3      	ldrb	r3, [r2, r3]
 8101862:	4618      	mov	r0, r3
 8101864:	f7ff fa50 	bl	8100d08 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8101868:	7bfb      	ldrb	r3, [r7, #15]
 810186a:	3301      	adds	r3, #1
 810186c:	73fb      	strb	r3, [r7, #15]
 810186e:	7bfa      	ldrb	r2, [r7, #15]
 8101870:	79bb      	ldrb	r3, [r7, #6]
 8101872:	429a      	cmp	r2, r3
 8101874:	d3f2      	bcc.n	810185c <BNO086_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO086); // Todo
 8101876:	2201      	movs	r2, #1
 8101878:	2120      	movs	r1, #32
 810187a:	4804      	ldr	r0, [pc, #16]	@ (810188c <BNO086_sendPacket+0x94>)
 810187c:	f001 fc7c 	bl	8103178 <HAL_GPIO_WritePin>

	return (1);
 8101880:	2301      	movs	r3, #1
}
 8101882:	4618      	mov	r0, r3
 8101884:	3710      	adds	r7, #16
 8101886:	46bd      	mov	sp, r7
 8101888:	bd80      	pop	{r7, pc}
 810188a:	bf00      	nop
 810188c:	58020400 	.word	0x58020400
 8101890:	10000120 	.word	0x10000120
 8101894:	100000a0 	.word	0x100000a0

08101898 <getRoll>:

float getRoll(uint8_t unit){
 8101898:	b5b0      	push	{r4, r5, r7, lr}
 810189a:	b08c      	sub	sp, #48	@ 0x30
 810189c:	af00      	add	r7, sp, #0
 810189e:	4603      	mov	r3, r0
 81018a0:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO086_getQuatI();
 81018a2:	f7ff fc03 	bl	81010ac <BNO086_getQuatI>
 81018a6:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float dqy = BNO086_getQuatJ();
 81018aa:	f7ff fc15 	bl	81010d8 <BNO086_getQuatJ>
 81018ae:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float dqz = BNO086_getQuatK();
 81018b2:	f7ff fc27 	bl	8101104 <BNO086_getQuatK>
 81018b6:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqw = BNO086_getQuatReal();
 81018ba:	f7ff fc39 	bl	8101130 <BNO086_getQuatReal>
 81018be:	ed87 0a07 	vstr	s0, [r7, #28]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 81018c2:	edd7 7a07 	vldr	s15, [r7, #28]
 81018c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81018ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 81018ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81018d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 81018d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 81018da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81018de:	ee37 7a27 	vadd.f32	s14, s14, s15
 81018e2:	edd7 7a08 	vldr	s15, [r7, #32]
 81018e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 81018ee:	ee17 0a90 	vmov	r0, s15
 81018f2:	f7fe fe55 	bl	81005a0 <__aeabi_f2d>
 81018f6:	4602      	mov	r2, r0
 81018f8:	460b      	mov	r3, r1
 81018fa:	ec43 2b10 	vmov	d0, r2, r3
 81018fe:	f004 fccf 	bl	81062a0 <sqrt>
 8101902:	ec53 2b10 	vmov	r2, r3, d0
 8101906:	4610      	mov	r0, r2
 8101908:	4619      	mov	r1, r3
 810190a:	f7ff f951 	bl	8100bb0 <__aeabi_d2f>
 810190e:	4603      	mov	r3, r0
 8101910:	61bb      	str	r3, [r7, #24]


	dqx = dqx / norm; //x
 8101912:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8101916:	ed97 7a06 	vldr	s14, [r7, #24]
 810191a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810191e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dqy = dqy / norm; //y
 8101922:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8101926:	ed97 7a06 	vldr	s14, [r7, #24]
 810192a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810192e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dqz = dqz / norm; //z
 8101932:	edd7 6a08 	vldr	s13, [r7, #32]
 8101936:	ed97 7a06 	vldr	s14, [r7, #24]
 810193a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810193e:	edc7 7a08 	vstr	s15, [r7, #32]
	dqw = dqw / norm; //w
 8101942:	edd7 6a07 	vldr	s13, [r7, #28]
 8101946:	ed97 7a06 	vldr	s14, [r7, #24]
 810194a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810194e:	edc7 7a07 	vstr	s15, [r7, #28]

	float ysqr = dqy * dqy;
 8101952:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101956:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810195a:	edc7 7a05 	vstr	s15, [r7, #20]
	float t0 = +2.0 * (dqw * dqx + dqy * dqz);
 810195e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101962:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8101966:	ee27 7a27 	vmul.f32	s14, s14, s15
 810196a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 810196e:	edd7 7a08 	vldr	s15, [r7, #32]
 8101972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101976:	ee77 7a27 	vadd.f32	s15, s14, s15
 810197a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810197e:	edc7 7a04 	vstr	s15, [r7, #16]
	float t1 = +1.0 - 2.0 * (dqx * dqx + ysqr);
 8101982:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8101986:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810198a:	edd7 7a05 	vldr	s15, [r7, #20]
 810198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101992:	ee17 0a90 	vmov	r0, s15
 8101996:	f7fe fe03 	bl	81005a0 <__aeabi_f2d>
 810199a:	4602      	mov	r2, r0
 810199c:	460b      	mov	r3, r1
 810199e:	f7fe fca1 	bl	81002e4 <__adddf3>
 81019a2:	4602      	mov	r2, r0
 81019a4:	460b      	mov	r3, r1
 81019a6:	f04f 0000 	mov.w	r0, #0
 81019aa:	4925      	ldr	r1, [pc, #148]	@ (8101a40 <getRoll+0x1a8>)
 81019ac:	f7fe fc98 	bl	81002e0 <__aeabi_dsub>
 81019b0:	4602      	mov	r2, r0
 81019b2:	460b      	mov	r3, r1
 81019b4:	4610      	mov	r0, r2
 81019b6:	4619      	mov	r1, r3
 81019b8:	f7ff f8fa 	bl	8100bb0 <__aeabi_d2f>
 81019bc:	4603      	mov	r3, r0
 81019be:	60fb      	str	r3, [r7, #12]
	float roll = atan2(t0, t1);
 81019c0:	6938      	ldr	r0, [r7, #16]
 81019c2:	f7fe fded 	bl	81005a0 <__aeabi_f2d>
 81019c6:	4604      	mov	r4, r0
 81019c8:	460d      	mov	r5, r1
 81019ca:	68f8      	ldr	r0, [r7, #12]
 81019cc:	f7fe fde8 	bl	81005a0 <__aeabi_f2d>
 81019d0:	4602      	mov	r2, r0
 81019d2:	460b      	mov	r3, r1
 81019d4:	ec43 2b11 	vmov	d1, r2, r3
 81019d8:	ec45 4b10 	vmov	d0, r4, r5
 81019dc:	f004 fc5e 	bl	810629c <atan2>
 81019e0:	ec53 2b10 	vmov	r2, r3, d0
 81019e4:	4610      	mov	r0, r2
 81019e6:	4619      	mov	r1, r3
 81019e8:	f7ff f8e2 	bl	8100bb0 <__aeabi_d2f>
 81019ec:	4603      	mov	r3, r0
 81019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if(unit == 1){
 81019f0:	79fb      	ldrb	r3, [r7, #7]
 81019f2:	2b01      	cmp	r3, #1
 81019f4:	d118      	bne.n	8101a28 <getRoll+0x190>
		roll = roll * 180.0 / M_PI;
 81019f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81019f8:	f7fe fdd2 	bl	81005a0 <__aeabi_f2d>
 81019fc:	f04f 0200 	mov.w	r2, #0
 8101a00:	4b10      	ldr	r3, [pc, #64]	@ (8101a44 <getRoll+0x1ac>)
 8101a02:	f7fe fe25 	bl	8100650 <__aeabi_dmul>
 8101a06:	4602      	mov	r2, r0
 8101a08:	460b      	mov	r3, r1
 8101a0a:	4610      	mov	r0, r2
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	a30a      	add	r3, pc, #40	@ (adr r3, 8101a38 <getRoll+0x1a0>)
 8101a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a14:	f7fe ff46 	bl	81008a4 <__aeabi_ddiv>
 8101a18:	4602      	mov	r2, r0
 8101a1a:	460b      	mov	r3, r1
 8101a1c:	4610      	mov	r0, r2
 8101a1e:	4619      	mov	r1, r3
 8101a20:	f7ff f8c6 	bl	8100bb0 <__aeabi_d2f>
 8101a24:	4603      	mov	r3, r0
 8101a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	return (roll);
 8101a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a2a:	ee07 3a90 	vmov	s15, r3
}
 8101a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8101a32:	3730      	adds	r7, #48	@ 0x30
 8101a34:	46bd      	mov	sp, r7
 8101a36:	bdb0      	pop	{r4, r5, r7, pc}
 8101a38:	54442d18 	.word	0x54442d18
 8101a3c:	400921fb 	.word	0x400921fb
 8101a40:	3ff00000 	.word	0x3ff00000
 8101a44:	40668000 	.word	0x40668000

08101a48 <getPitch>:

float getPitch(uint8_t unit){
 8101a48:	b580      	push	{r7, lr}
 8101a4a:	b08a      	sub	sp, #40	@ 0x28
 8101a4c:	af00      	add	r7, sp, #0
 8101a4e:	4603      	mov	r3, r0
 8101a50:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO086_getQuatI();
 8101a52:	f7ff fb2b 	bl	81010ac <BNO086_getQuatI>
 8101a56:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqy = BNO086_getQuatJ();
 8101a5a:	f7ff fb3d 	bl	81010d8 <BNO086_getQuatJ>
 8101a5e:	ed87 0a06 	vstr	s0, [r7, #24]
	float dqz = BNO086_getQuatK();
 8101a62:	f7ff fb4f 	bl	8101104 <BNO086_getQuatK>
 8101a66:	ed87 0a05 	vstr	s0, [r7, #20]
	float dqw = BNO086_getQuatReal();
 8101a6a:	f7ff fb61 	bl	8101130 <BNO086_getQuatReal>
 8101a6e:	ed87 0a04 	vstr	s0, [r7, #16]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8101a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8101a76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101a7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8101a7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101a86:	edd7 7a06 	vldr	s15, [r7, #24]
 8101a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101a92:	edd7 7a05 	vldr	s15, [r7, #20]
 8101a96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101a9e:	ee17 0a90 	vmov	r0, s15
 8101aa2:	f7fe fd7d 	bl	81005a0 <__aeabi_f2d>
 8101aa6:	4602      	mov	r2, r0
 8101aa8:	460b      	mov	r3, r1
 8101aaa:	ec43 2b10 	vmov	d0, r2, r3
 8101aae:	f004 fbf7 	bl	81062a0 <sqrt>
 8101ab2:	ec53 2b10 	vmov	r2, r3, d0
 8101ab6:	4610      	mov	r0, r2
 8101ab8:	4619      	mov	r1, r3
 8101aba:	f7ff f879 	bl	8100bb0 <__aeabi_d2f>
 8101abe:	4603      	mov	r3, r0
 8101ac0:	60fb      	str	r3, [r7, #12]


	dqx = dqx / norm; //x
 8101ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8101ac6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ace:	edc7 7a07 	vstr	s15, [r7, #28]
	dqy = dqy / norm; //y
 8101ad2:	edd7 6a06 	vldr	s13, [r7, #24]
 8101ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ade:	edc7 7a06 	vstr	s15, [r7, #24]
	dqz = dqz / norm; //z
 8101ae2:	edd7 6a05 	vldr	s13, [r7, #20]
 8101ae6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101aee:	edc7 7a05 	vstr	s15, [r7, #20]
	dqw = dqw / norm; //w
 8101af2:	edd7 6a04 	vldr	s13, [r7, #16]
 8101af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101afe:	edc7 7a04 	vstr	s15, [r7, #16]
//
//	if(unit == 1){
//		pitch = pitch * 180.0 / M_PI;
//	}
	// Calculate pitch (y-axis rotation)
	float t2 = +2.0 * (dqw * dqy - dqz * dqx);
 8101b02:	ed97 7a04 	vldr	s14, [r7, #16]
 8101b06:	edd7 7a06 	vldr	s15, [r7, #24]
 8101b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101b0e:	edd7 6a05 	vldr	s13, [r7, #20]
 8101b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8101b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101b1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101b22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp t2 to stay within the asin range
	if (t2 > 1.0) t2 = 1.0;
 8101b26:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101b36:	dd02      	ble.n	8101b3e <getPitch+0xf6>
 8101b38:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8101b3c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (t2 < -1.0) t2 = -1.0;
 8101b3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101b42:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8101b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101b4e:	d501      	bpl.n	8101b54 <getPitch+0x10c>
 8101b50:	4b1d      	ldr	r3, [pc, #116]	@ (8101bc8 <getPitch+0x180>)
 8101b52:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculate pitch
	float pitch = asin(t2);
 8101b54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101b56:	f7fe fd23 	bl	81005a0 <__aeabi_f2d>
 8101b5a:	4602      	mov	r2, r0
 8101b5c:	460b      	mov	r3, r1
 8101b5e:	ec43 2b10 	vmov	d0, r2, r3
 8101b62:	f004 fb67 	bl	8106234 <asin>
 8101b66:	ec53 2b10 	vmov	r2, r3, d0
 8101b6a:	4610      	mov	r0, r2
 8101b6c:	4619      	mov	r1, r3
 8101b6e:	f7ff f81f 	bl	8100bb0 <__aeabi_d2f>
 8101b72:	4603      	mov	r3, r0
 8101b74:	623b      	str	r3, [r7, #32]

	// Convert pitch to degrees if unit is set to 1
	if (unit == 1) {
 8101b76:	79fb      	ldrb	r3, [r7, #7]
 8101b78:	2b01      	cmp	r3, #1
 8101b7a:	d118      	bne.n	8101bae <getPitch+0x166>
		pitch = pitch * 180.0 / M_PI;
 8101b7c:	6a38      	ldr	r0, [r7, #32]
 8101b7e:	f7fe fd0f 	bl	81005a0 <__aeabi_f2d>
 8101b82:	f04f 0200 	mov.w	r2, #0
 8101b86:	4b11      	ldr	r3, [pc, #68]	@ (8101bcc <getPitch+0x184>)
 8101b88:	f7fe fd62 	bl	8100650 <__aeabi_dmul>
 8101b8c:	4602      	mov	r2, r0
 8101b8e:	460b      	mov	r3, r1
 8101b90:	4610      	mov	r0, r2
 8101b92:	4619      	mov	r1, r3
 8101b94:	a30a      	add	r3, pc, #40	@ (adr r3, 8101bc0 <getPitch+0x178>)
 8101b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b9a:	f7fe fe83 	bl	81008a4 <__aeabi_ddiv>
 8101b9e:	4602      	mov	r2, r0
 8101ba0:	460b      	mov	r3, r1
 8101ba2:	4610      	mov	r0, r2
 8101ba4:	4619      	mov	r1, r3
 8101ba6:	f7ff f803 	bl	8100bb0 <__aeabi_d2f>
 8101baa:	4603      	mov	r3, r0
 8101bac:	623b      	str	r3, [r7, #32]
	}

	return (pitch);
 8101bae:	6a3b      	ldr	r3, [r7, #32]
 8101bb0:	ee07 3a90 	vmov	s15, r3
}
 8101bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8101bb8:	3728      	adds	r7, #40	@ 0x28
 8101bba:	46bd      	mov	sp, r7
 8101bbc:	bd80      	pop	{r7, pc}
 8101bbe:	bf00      	nop
 8101bc0:	54442d18 	.word	0x54442d18
 8101bc4:	400921fb 	.word	0x400921fb
 8101bc8:	bf800000 	.word	0xbf800000
 8101bcc:	40668000 	.word	0x40668000

08101bd0 <getYaw>:

float getYaw(uint8_t unit){
 8101bd0:	b5b0      	push	{r4, r5, r7, lr}
 8101bd2:	b08c      	sub	sp, #48	@ 0x30
 8101bd4:	af00      	add	r7, sp, #0
 8101bd6:	4603      	mov	r3, r0
 8101bd8:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO086_getQuatI();
 8101bda:	f7ff fa67 	bl	81010ac <BNO086_getQuatI>
 8101bde:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float dqy = BNO086_getQuatJ();
 8101be2:	f7ff fa79 	bl	81010d8 <BNO086_getQuatJ>
 8101be6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float dqz = BNO086_getQuatK();
 8101bea:	f7ff fa8b 	bl	8101104 <BNO086_getQuatK>
 8101bee:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqw = BNO086_getQuatReal();
 8101bf2:	f7ff fa9d 	bl	8101130 <BNO086_getQuatReal>
 8101bf6:	ed87 0a07 	vstr	s0, [r7, #28]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8101bfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8101bfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101c02:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8101c06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101c0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101c12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101c1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8101c1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101c26:	ee17 0a90 	vmov	r0, s15
 8101c2a:	f7fe fcb9 	bl	81005a0 <__aeabi_f2d>
 8101c2e:	4602      	mov	r2, r0
 8101c30:	460b      	mov	r3, r1
 8101c32:	ec43 2b10 	vmov	d0, r2, r3
 8101c36:	f004 fb33 	bl	81062a0 <sqrt>
 8101c3a:	ec53 2b10 	vmov	r2, r3, d0
 8101c3e:	4610      	mov	r0, r2
 8101c40:	4619      	mov	r1, r3
 8101c42:	f7fe ffb5 	bl	8100bb0 <__aeabi_d2f>
 8101c46:	4603      	mov	r3, r0
 8101c48:	61bb      	str	r3, [r7, #24]


	dqx = dqx / norm; //x
 8101c4a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8101c4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c56:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dqy = dqy / norm; //y
 8101c5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8101c5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dqz = dqz / norm; //z
 8101c6a:	edd7 6a08 	vldr	s13, [r7, #32]
 8101c6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c76:	edc7 7a08 	vstr	s15, [r7, #32]
	dqw = dqw / norm; //w
 8101c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8101c7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c86:	edc7 7a07 	vstr	s15, [r7, #28]

	float ysqr = dqy * dqy;
 8101c8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101c8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101c92:	edc7 7a05 	vstr	s15, [r7, #20]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 8101c96:	ed97 7a07 	vldr	s14, [r7, #28]
 8101c9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8101c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101ca2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8101ca6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101cb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101cb6:	edc7 7a04 	vstr	s15, [r7, #16]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8101cba:	edd7 7a08 	vldr	s15, [r7, #32]
 8101cbe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8101cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101cca:	ee17 0a90 	vmov	r0, s15
 8101cce:	f7fe fc67 	bl	81005a0 <__aeabi_f2d>
 8101cd2:	4602      	mov	r2, r0
 8101cd4:	460b      	mov	r3, r1
 8101cd6:	f7fe fb05 	bl	81002e4 <__adddf3>
 8101cda:	4602      	mov	r2, r0
 8101cdc:	460b      	mov	r3, r1
 8101cde:	f04f 0000 	mov.w	r0, #0
 8101ce2:	4925      	ldr	r1, [pc, #148]	@ (8101d78 <getYaw+0x1a8>)
 8101ce4:	f7fe fafc 	bl	81002e0 <__aeabi_dsub>
 8101ce8:	4602      	mov	r2, r0
 8101cea:	460b      	mov	r3, r1
 8101cec:	4610      	mov	r0, r2
 8101cee:	4619      	mov	r1, r3
 8101cf0:	f7fe ff5e 	bl	8100bb0 <__aeabi_d2f>
 8101cf4:	4603      	mov	r3, r0
 8101cf6:	60fb      	str	r3, [r7, #12]
	float yaw = atan2(t3, t4);
 8101cf8:	6938      	ldr	r0, [r7, #16]
 8101cfa:	f7fe fc51 	bl	81005a0 <__aeabi_f2d>
 8101cfe:	4604      	mov	r4, r0
 8101d00:	460d      	mov	r5, r1
 8101d02:	68f8      	ldr	r0, [r7, #12]
 8101d04:	f7fe fc4c 	bl	81005a0 <__aeabi_f2d>
 8101d08:	4602      	mov	r2, r0
 8101d0a:	460b      	mov	r3, r1
 8101d0c:	ec43 2b11 	vmov	d1, r2, r3
 8101d10:	ec45 4b10 	vmov	d0, r4, r5
 8101d14:	f004 fac2 	bl	810629c <atan2>
 8101d18:	ec53 2b10 	vmov	r2, r3, d0
 8101d1c:	4610      	mov	r0, r2
 8101d1e:	4619      	mov	r1, r3
 8101d20:	f7fe ff46 	bl	8100bb0 <__aeabi_d2f>
 8101d24:	4603      	mov	r3, r0
 8101d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if(unit == 1){
 8101d28:	79fb      	ldrb	r3, [r7, #7]
 8101d2a:	2b01      	cmp	r3, #1
 8101d2c:	d118      	bne.n	8101d60 <getYaw+0x190>
			yaw = yaw * 180.0 / M_PI;
 8101d2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101d30:	f7fe fc36 	bl	81005a0 <__aeabi_f2d>
 8101d34:	f04f 0200 	mov.w	r2, #0
 8101d38:	4b10      	ldr	r3, [pc, #64]	@ (8101d7c <getYaw+0x1ac>)
 8101d3a:	f7fe fc89 	bl	8100650 <__aeabi_dmul>
 8101d3e:	4602      	mov	r2, r0
 8101d40:	460b      	mov	r3, r1
 8101d42:	4610      	mov	r0, r2
 8101d44:	4619      	mov	r1, r3
 8101d46:	a30a      	add	r3, pc, #40	@ (adr r3, 8101d70 <getYaw+0x1a0>)
 8101d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d4c:	f7fe fdaa 	bl	81008a4 <__aeabi_ddiv>
 8101d50:	4602      	mov	r2, r0
 8101d52:	460b      	mov	r3, r1
 8101d54:	4610      	mov	r0, r2
 8101d56:	4619      	mov	r1, r3
 8101d58:	f7fe ff2a 	bl	8100bb0 <__aeabi_d2f>
 8101d5c:	4603      	mov	r3, r0
 8101d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

	return (yaw);
 8101d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101d62:	ee07 3a90 	vmov	s15, r3
}
 8101d66:	eeb0 0a67 	vmov.f32	s0, s15
 8101d6a:	3730      	adds	r7, #48	@ 0x30
 8101d6c:	46bd      	mov	sp, r7
 8101d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8101d70:	54442d18 	.word	0x54442d18
 8101d74:	400921fb 	.word	0x400921fb
 8101d78:	3ff00000 	.word	0x3ff00000
 8101d7c:	40668000 	.word	0x40668000

08101d80 <BNO086_getData>:

void BNO086_getData(BNO086_t *bno, RPY_UNIT rpy_unit){
 8101d80:	b580      	push	{r7, lr}
 8101d82:	b082      	sub	sp, #8
 8101d84:	af00      	add	r7, sp, #0
 8101d86:	6078      	str	r0, [r7, #4]
 8101d88:	460b      	mov	r3, r1
 8101d8a:	70fb      	strb	r3, [r7, #3]
	/* rpy_unit can be only 0 and 1  which
	 * rpy_unit = 0 set the roll,pitch and yaw unit as Radian
	 * rpy_unit = 1 set the roll,pitch and yaw unit as Degree */

		bno->quaternion.i = BNO086_getQuatI();
 8101d8c:	f7ff f98e 	bl	81010ac <BNO086_getQuatI>
 8101d90:	eef0 7a40 	vmov.f32	s15, s0
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = BNO086_getQuatJ();
 8101d9a:	f7ff f99d 	bl	81010d8 <BNO086_getQuatJ>
 8101d9e:	eef0 7a40 	vmov.f32	s15, s0
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = BNO086_getQuatK();
 8101da8:	f7ff f9ac 	bl	8101104 <BNO086_getQuatK>
 8101dac:	eef0 7a40 	vmov.f32	s15, s0
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = BNO086_getQuatReal();
 8101db6:	f7ff f9bb 	bl	8101130 <BNO086_getQuatReal>
 8101dba:	eef0 7a40 	vmov.f32	s15, s0
 8101dbe:	687b      	ldr	r3, [r7, #4]
 8101dc0:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->acceleration.x = BNO086_getAccelX();
 8101dc4:	f7ff f9d6 	bl	8101174 <BNO086_getAccelX>
 8101dc8:	eef0 7a40 	vmov.f32	s15, s0
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = BNO086_getAccelY();
 8101dd2:	f7ff f9e5 	bl	81011a0 <BNO086_getAccelY>
 8101dd6:	eef0 7a40 	vmov.f32	s15, s0
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = BNO086_getAccelZ();
 8101de0:	f7ff f9f4 	bl	81011cc <BNO086_getAccelZ>
 8101de4:	eef0 7a40 	vmov.f32	s15, s0
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	edc3 7a06 	vstr	s15, [r3, #24]

		bno->linear_acceleration.x = BNO086_getLinAccelX();
 8101dee:	f7ff fa0f 	bl	8101210 <BNO086_getLinAccelX>
 8101df2:	eef0 7a40 	vmov.f32	s15, s0
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = BNO086_getLinAccelY();
 8101dfc:	f7ff fa1e 	bl	810123c <BNO086_getLinAccelY>
 8101e00:	eef0 7a40 	vmov.f32	s15, s0
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = BNO086_getLinAccelZ();
 8101e0a:	f7ff fa2d 	bl	8101268 <BNO086_getLinAccelZ>
 8101e0e:	eef0 7a40 	vmov.f32	s15, s0
 8101e12:	687b      	ldr	r3, [r7, #4]
 8101e14:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = BNO086_getGyroX();
 8101e18:	f7ff fa3c 	bl	8101294 <BNO086_getGyroX>
 8101e1c:	eef0 7a40 	vmov.f32	s15, s0
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = BNO086_getGyroY();
 8101e26:	f7ff fa4b 	bl	81012c0 <BNO086_getGyroY>
 8101e2a:	eef0 7a40 	vmov.f32	s15, s0
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = BNO086_getGyroZ();
 8101e34:	f7ff fa5a 	bl	81012ec <BNO086_getGyroZ>
 8101e38:	eef0 7a40 	vmov.f32	s15, s0
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = BNO086_getMagX();
 8101e42:	f7ff fa75 	bl	8101330 <BNO086_getMagX>
 8101e46:	eef0 7a40 	vmov.f32	s15, s0
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = BNO086_getMagY();
 8101e50:	f7ff fa84 	bl	810135c <BNO086_getMagY>
 8101e54:	eef0 7a40 	vmov.f32	s15, s0
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = BNO086_getMagZ();
 8101e5e:	f7ff fa93 	bl	8101388 <BNO086_getMagZ>
 8101e62:	eef0 7a40 	vmov.f32	s15, s0
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->euler_angle.roll = getRoll(rpy_unit);
 8101e6c:	78fb      	ldrb	r3, [r7, #3]
 8101e6e:	4618      	mov	r0, r3
 8101e70:	f7ff fd12 	bl	8101898 <getRoll>
 8101e74:	eef0 7a40 	vmov.f32	s15, s0
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = getPitch(rpy_unit);
 8101e7e:	78fb      	ldrb	r3, [r7, #3]
 8101e80:	4618      	mov	r0, r3
 8101e82:	f7ff fde1 	bl	8101a48 <getPitch>
 8101e86:	eef0 7a40 	vmov.f32	s15, s0
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = getYaw(rpy_unit);
 8101e90:	78fb      	ldrb	r3, [r7, #3]
 8101e92:	4618      	mov	r0, r3
 8101e94:	f7ff fe9c 	bl	8101bd0 <getYaw>
 8101e98:	eef0 7a40 	vmov.f32	s15, s0
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48



}
 8101ea2:	bf00      	nop
 8101ea4:	3708      	adds	r7, #8
 8101ea6:	46bd      	mov	sp, r7
 8101ea8:	bd80      	pop	{r7, pc}

08101eaa <BNO086_SAVE_HSEM>:

void BNO086_SAVE_HSEM(BNO086_t *bno){
 8101eaa:	b590      	push	{r4, r7, lr}
 8101eac:	b083      	sub	sp, #12
 8101eae:	af00      	add	r7, sp, #0
 8101eb0:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 8101eb2:	2000      	movs	r0, #0
 8101eb4:	f001 f97a 	bl	81031ac <HAL_HSEM_FastTake>
 8101eb8:	4603      	mov	r3, r0
 8101eba:	2b00      	cmp	r3, #0
 8101ebc:	f040 80f6 	bne.w	81020ac <BNO086_SAVE_HSEM+0x202>
		  SRAM4_BNO086->Data[0] = bno->euler_angle.roll;
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101ec4:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ec8:	4618      	mov	r0, r3
 8101eca:	f7fe fb69 	bl	81005a0 <__aeabi_f2d>
 8101ece:	4602      	mov	r2, r0
 8101ed0:	460b      	mov	r3, r1
 8101ed2:	e9c4 2302 	strd	r2, r3, [r4, #8]
		  SRAM4_BNO086->Data[1] = bno->euler_angle.pitch;
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101eda:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ede:	4618      	mov	r0, r3
 8101ee0:	f7fe fb5e 	bl	81005a0 <__aeabi_f2d>
 8101ee4:	4602      	mov	r2, r0
 8101ee6:	460b      	mov	r3, r1
 8101ee8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		  SRAM4_BNO086->Data[2] = bno->euler_angle.yaw;
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101ef0:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ef4:	4618      	mov	r0, r3
 8101ef6:	f7fe fb53 	bl	81005a0 <__aeabi_f2d>
 8101efa:	4602      	mov	r2, r0
 8101efc:	460b      	mov	r3, r1
 8101efe:	e9c4 2306 	strd	r2, r3, [r4, #24]

		  SRAM4_BNO086->Data[0] = bno->quaternion.i;
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	681b      	ldr	r3, [r3, #0]
 8101f06:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f0a:	4618      	mov	r0, r3
 8101f0c:	f7fe fb48 	bl	81005a0 <__aeabi_f2d>
 8101f10:	4602      	mov	r2, r0
 8101f12:	460b      	mov	r3, r1
 8101f14:	e9c4 2302 	strd	r2, r3, [r4, #8]
		  SRAM4_BNO086->Data[1] = bno->quaternion.j;
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	685b      	ldr	r3, [r3, #4]
 8101f1c:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f20:	4618      	mov	r0, r3
 8101f22:	f7fe fb3d 	bl	81005a0 <__aeabi_f2d>
 8101f26:	4602      	mov	r2, r0
 8101f28:	460b      	mov	r3, r1
 8101f2a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		  SRAM4_BNO086->Data[2] = bno->quaternion.k;
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	689b      	ldr	r3, [r3, #8]
 8101f32:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f36:	4618      	mov	r0, r3
 8101f38:	f7fe fb32 	bl	81005a0 <__aeabi_f2d>
 8101f3c:	4602      	mov	r2, r0
 8101f3e:	460b      	mov	r3, r1
 8101f40:	e9c4 2306 	strd	r2, r3, [r4, #24]
		  SRAM4_BNO086->Data[3] = bno->quaternion.w;
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	68db      	ldr	r3, [r3, #12]
 8101f48:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	f7fe fb27 	bl	81005a0 <__aeabi_f2d>
 8101f52:	4602      	mov	r2, r0
 8101f54:	460b      	mov	r3, r1
 8101f56:	e9c4 2308 	strd	r2, r3, [r4, #32]

		  SRAM4_BNO086->Data[4] = bno->linear_acceleration.x;
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	69db      	ldr	r3, [r3, #28]
 8101f5e:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f62:	4618      	mov	r0, r3
 8101f64:	f7fe fb1c 	bl	81005a0 <__aeabi_f2d>
 8101f68:	4602      	mov	r2, r0
 8101f6a:	460b      	mov	r3, r1
 8101f6c:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
		  SRAM4_BNO086->Data[5] = bno->linear_acceleration.y;
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	6a1b      	ldr	r3, [r3, #32]
 8101f74:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f7fe fb11 	bl	81005a0 <__aeabi_f2d>
 8101f7e:	4602      	mov	r2, r0
 8101f80:	460b      	mov	r3, r1
 8101f82:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
		  SRAM4_BNO086->Data[6] = bno->linear_acceleration.z;
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101f8a:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f8e:	4618      	mov	r0, r3
 8101f90:	f7fe fb06 	bl	81005a0 <__aeabi_f2d>
 8101f94:	4602      	mov	r2, r0
 8101f96:	460b      	mov	r3, r1
 8101f98:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38

		  SRAM4_BNO086->Data[7] = bno->angular_velocity.x;
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101fa0:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fa4:	4618      	mov	r0, r3
 8101fa6:	f7fe fafb 	bl	81005a0 <__aeabi_f2d>
 8101faa:	4602      	mov	r2, r0
 8101fac:	460b      	mov	r3, r1
 8101fae:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
		  SRAM4_BNO086->Data[8] = bno->angular_velocity.y;
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101fb6:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fba:	4618      	mov	r0, r3
 8101fbc:	f7fe faf0 	bl	81005a0 <__aeabi_f2d>
 8101fc0:	4602      	mov	r2, r0
 8101fc2:	460b      	mov	r3, r1
 8101fc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		  SRAM4_BNO086->Data[9] = bno->angular_velocity.z;
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101fcc:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fd0:	4618      	mov	r0, r3
 8101fd2:	f7fe fae5 	bl	81005a0 <__aeabi_f2d>
 8101fd6:	4602      	mov	r2, r0
 8101fd8:	460b      	mov	r3, r1
 8101fda:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50

		  SRAM4_BNO086->Data[10] = bno->magnetometer.x;
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101fe2:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fe6:	4618      	mov	r0, r3
 8101fe8:	f7fe fada 	bl	81005a0 <__aeabi_f2d>
 8101fec:	4602      	mov	r2, r0
 8101fee:	460b      	mov	r3, r1
 8101ff0:	e9c4 2316 	strd	r2, r3, [r4, #88]	@ 0x58
		  SRAM4_BNO086->Data[11] = bno->magnetometer.y;
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101ff8:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ffc:	4618      	mov	r0, r3
 8101ffe:	f7fe facf 	bl	81005a0 <__aeabi_f2d>
 8102002:	4602      	mov	r2, r0
 8102004:	460b      	mov	r3, r1
 8102006:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
		  SRAM4_BNO086->Data[12] = bno->magnetometer.z;
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810200e:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102012:	4618      	mov	r0, r3
 8102014:	f7fe fac4 	bl	81005a0 <__aeabi_f2d>
 8102018:	4602      	mov	r2, r0
 810201a:	460b      	mov	r3, r1
 810201c:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68

		  SRAM4_BNO086->Data[13] = bno->acceleration.x;
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	691b      	ldr	r3, [r3, #16]
 8102024:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102028:	4618      	mov	r0, r3
 810202a:	f7fe fab9 	bl	81005a0 <__aeabi_f2d>
 810202e:	4602      	mov	r2, r0
 8102030:	460b      	mov	r3, r1
 8102032:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
		  SRAM4_BNO086->Data[14] = bno->acceleration.y;
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	695b      	ldr	r3, [r3, #20]
 810203a:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810203e:	4618      	mov	r0, r3
 8102040:	f7fe faae 	bl	81005a0 <__aeabi_f2d>
 8102044:	4602      	mov	r2, r0
 8102046:	460b      	mov	r3, r1
 8102048:	e9c4 231e 	strd	r2, r3, [r4, #120]	@ 0x78
		  SRAM4_BNO086->Data[15] = bno->acceleration.z;
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	699b      	ldr	r3, [r3, #24]
 8102050:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102054:	4618      	mov	r0, r3
 8102056:	f7fe faa3 	bl	81005a0 <__aeabi_f2d>
 810205a:	4602      	mov	r2, r0
 810205c:	460b      	mov	r3, r1
 810205e:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80

		  SRAM4_BNO086->Data[16] = bno->euler_angle.roll;
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102066:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810206a:	4618      	mov	r0, r3
 810206c:	f7fe fa98 	bl	81005a0 <__aeabi_f2d>
 8102070:	4602      	mov	r2, r0
 8102072:	460b      	mov	r3, r1
 8102074:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
		  SRAM4_BNO086->Data[17] = bno->euler_angle.pitch;
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810207c:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102080:	4618      	mov	r0, r3
 8102082:	f7fe fa8d 	bl	81005a0 <__aeabi_f2d>
 8102086:	4602      	mov	r2, r0
 8102088:	460b      	mov	r3, r1
 810208a:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90
		  SRAM4_BNO086->Data[18] = bno->euler_angle.yaw;
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102092:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102096:	4618      	mov	r0, r3
 8102098:	f7fe fa82 	bl	81005a0 <__aeabi_f2d>
 810209c:	4602      	mov	r2, r0
 810209e:	460b      	mov	r3, r1
 81020a0:	e9c4 2326 	strd	r2, r3, [r4, #152]	@ 0x98

		  HAL_HSEM_Release(HSEM_ID_0,0);
 81020a4:	2100      	movs	r1, #0
 81020a6:	2000      	movs	r0, #0
 81020a8:	f001 f89a 	bl	81031e0 <HAL_HSEM_Release>
		}
}
 81020ac:	bf00      	nop
 81020ae:	370c      	adds	r7, #12
 81020b0:	46bd      	mov	sp, r7
 81020b2:	bd90      	pop	{r4, r7, pc}

081020b4 <BNO086_Calibration>:

void BNO086_Calibration(BNO086_t *bno, CalibrateStatus *calib)
{
 81020b4:	b580      	push	{r7, lr}
 81020b6:	b084      	sub	sp, #16
 81020b8:	af00      	add	r7, sp, #0
 81020ba:	6078      	str	r0, [r7, #4]
 81020bc:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) {
 81020be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 81020c2:	4894      	ldr	r0, [pc, #592]	@ (8102314 <BNO086_Calibration+0x260>)
 81020c4:	f001 f840 	bl	8103148 <HAL_GPIO_ReadPin>
 81020c8:	4603      	mov	r3, r0
 81020ca:	2b01      	cmp	r3, #1
 81020cc:	f040 811e 	bne.w	810230c <BNO086_Calibration+0x258>

		mode = 1;
 81020d0:	4b91      	ldr	r3, [pc, #580]	@ (8102318 <BNO086_Calibration+0x264>)
 81020d2:	2201      	movs	r2, #1
 81020d4:	801a      	strh	r2, [r3, #0]
		// Resets BNO086 to disable all output
		BNO086_Initialization(&bno);
 81020d6:	1d3b      	adds	r3, r7, #4
 81020d8:	4618      	mov	r0, r3
 81020da:	f7fe fdb9 	bl	8100c50 <BNO086_Initialization>

		// Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
		// Enable Game Rotation Vector output
		// Enable Rotation Vector output
		// Enable Magnetic Field output
		BNO086_calibrateAll(); // Turn on calibration for Accel, Gyro, and Mag
 81020de:	f7ff f9f6 	bl	81014ce <BNO086_calibrateAll>
		BNO086_enableGameRotationVector(10000); // Send data update every 20ms (50Hz)
 81020e2:	f242 7010 	movw	r0, #10000	@ 0x2710
 81020e6:	f7ff f9a7 	bl	8101438 <BNO086_enableGameRotationVector>
//		BNO086_enableRotationVector(2500);
		BNO086_enableAccelerometer(2000);
 81020ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 81020ee:	f7ff f9b2 	bl	8101456 <BNO086_enableAccelerometer>
		BNO086_enableGyro(2500);
 81020f2:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 81020f6:	f7ff f9cc 	bl	8101492 <BNO086_enableGyro>
		BNO086_enableMagnetometer(10000); // Send data update every 20ms (50Hz)
 81020fa:	f242 7010 	movw	r0, #10000	@ 0x2710
 81020fe:	f7ff f9d7 	bl	81014b0 <BNO086_enableMagnetometer>

		while (mode == 1 || mode == 2)
 8102102:	e0cf      	b.n	81022a4 <BNO086_Calibration+0x1f0>
		{
			if (BNO086_dataAvailable() == 1)
 8102104:	f7fe fe18 	bl	8100d38 <BNO086_dataAvailable>
 8102108:	4603      	mov	r3, r0
 810210a:	2b01      	cmp	r3, #1
 810210c:	f040 80c7 	bne.w	810229e <BNO086_Calibration+0x1ea>
			{

				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8102110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8102114:	487f      	ldr	r0, [pc, #508]	@ (8102314 <BNO086_Calibration+0x260>)
 8102116:	f001 f817 	bl	8103148 <HAL_GPIO_ReadPin>
 810211a:	4603      	mov	r3, r0
 810211c:	2b00      	cmp	r3, #0
 810211e:	d102      	bne.n	8102126 <BNO086_Calibration+0x72>
					mode = 2;
 8102120:	4b7d      	ldr	r3, [pc, #500]	@ (8102318 <BNO086_Calibration+0x264>)
 8102122:	2202      	movs	r2, #2
 8102124:	801a      	strh	r2, [r3, #0]
				}
				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET && mode == 2){
 8102126:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 810212a:	487a      	ldr	r0, [pc, #488]	@ (8102314 <BNO086_Calibration+0x260>)
 810212c:	f001 f80c 	bl	8103148 <HAL_GPIO_ReadPin>
 8102130:	4603      	mov	r3, r0
 8102132:	2b01      	cmp	r3, #1
 8102134:	d107      	bne.n	8102146 <BNO086_Calibration+0x92>
 8102136:	4b78      	ldr	r3, [pc, #480]	@ (8102318 <BNO086_Calibration+0x264>)
 8102138:	881b      	ldrh	r3, [r3, #0]
 810213a:	2b02      	cmp	r3, #2
 810213c:	d103      	bne.n	8102146 <BNO086_Calibration+0x92>
					mode = 3;
 810213e:	4b76      	ldr	r3, [pc, #472]	@ (8102318 <BNO086_Calibration+0x264>)
 8102140:	2203      	movs	r2, #3
 8102142:	801a      	strh	r2, [r3, #0]
					break;
 8102144:	e0b8      	b.n	81022b8 <BNO086_Calibration+0x204>
				}
				BNO086_getData(&bno, UNIT_DEG);
 8102146:	1d3b      	adds	r3, r7, #4
 8102148:	2101      	movs	r1, #1
 810214a:	4618      	mov	r0, r3
 810214c:	f7ff fe18 	bl	8101d80 <BNO086_getData>
				// Observing the status bit of the sensors output
				accuracyQuat = BNO086_getQuatAccuracy();
 8102150:	f7ff f804 	bl	810115c <BNO086_getQuatAccuracy>
 8102154:	4603      	mov	r3, r0
 8102156:	461a      	mov	r2, r3
 8102158:	4b70      	ldr	r3, [pc, #448]	@ (810231c <BNO086_Calibration+0x268>)
 810215a:	701a      	strb	r2, [r3, #0]
				accuracyAccel = BNO086_getAccelAccuracy();
 810215c:	f7ff f84c 	bl	81011f8 <BNO086_getAccelAccuracy>
 8102160:	4603      	mov	r3, r0
 8102162:	461a      	mov	r2, r3
 8102164:	4b6e      	ldr	r3, [pc, #440]	@ (8102320 <BNO086_Calibration+0x26c>)
 8102166:	701a      	strb	r2, [r3, #0]
				accuracyGyro = BNO086_getGyroAccuracy();
 8102168:	f7ff f8d6 	bl	8101318 <BNO086_getGyroAccuracy>
 810216c:	4603      	mov	r3, r0
 810216e:	461a      	mov	r2, r3
 8102170:	4b6c      	ldr	r3, [pc, #432]	@ (8102324 <BNO086_Calibration+0x270>)
 8102172:	701a      	strb	r2, [r3, #0]
				accuracyMag = BNO086_getMagAccuracy();
 8102174:	f7ff f91e 	bl	81013b4 <BNO086_getMagAccuracy>
 8102178:	4603      	mov	r3, r0
 810217a:	461a      	mov	r2, r3
 810217c:	4b6a      	ldr	r3, [pc, #424]	@ (8102328 <BNO086_Calibration+0x274>)
 810217e:	701a      	strb	r2, [r3, #0]

				if (accuracyQuat == 0) calib->accuracyQuat = UNRELIABLE;
 8102180:	4b66      	ldr	r3, [pc, #408]	@ (810231c <BNO086_Calibration+0x268>)
 8102182:	781b      	ldrb	r3, [r3, #0]
 8102184:	2b00      	cmp	r3, #0
 8102186:	d103      	bne.n	8102190 <BNO086_Calibration+0xdc>
 8102188:	683b      	ldr	r3, [r7, #0]
 810218a:	2201      	movs	r2, #1
 810218c:	701a      	strb	r2, [r3, #0]
 810218e:	e016      	b.n	81021be <BNO086_Calibration+0x10a>
				else if (accuracyQuat == 1) calib->accuracyQuat = LOW;
 8102190:	4b62      	ldr	r3, [pc, #392]	@ (810231c <BNO086_Calibration+0x268>)
 8102192:	781b      	ldrb	r3, [r3, #0]
 8102194:	2b01      	cmp	r3, #1
 8102196:	d103      	bne.n	81021a0 <BNO086_Calibration+0xec>
 8102198:	683b      	ldr	r3, [r7, #0]
 810219a:	2202      	movs	r2, #2
 810219c:	701a      	strb	r2, [r3, #0]
 810219e:	e00e      	b.n	81021be <BNO086_Calibration+0x10a>
				else if (accuracyQuat == 2) calib->accuracyQuat = MEDIUM;
 81021a0:	4b5e      	ldr	r3, [pc, #376]	@ (810231c <BNO086_Calibration+0x268>)
 81021a2:	781b      	ldrb	r3, [r3, #0]
 81021a4:	2b02      	cmp	r3, #2
 81021a6:	d103      	bne.n	81021b0 <BNO086_Calibration+0xfc>
 81021a8:	683b      	ldr	r3, [r7, #0]
 81021aa:	2203      	movs	r2, #3
 81021ac:	701a      	strb	r2, [r3, #0]
 81021ae:	e006      	b.n	81021be <BNO086_Calibration+0x10a>
				else if (accuracyQuat == 3) calib->accuracyQuat = HIGH;
 81021b0:	4b5a      	ldr	r3, [pc, #360]	@ (810231c <BNO086_Calibration+0x268>)
 81021b2:	781b      	ldrb	r3, [r3, #0]
 81021b4:	2b03      	cmp	r3, #3
 81021b6:	d102      	bne.n	81021be <BNO086_Calibration+0x10a>
 81021b8:	683b      	ldr	r3, [r7, #0]
 81021ba:	2204      	movs	r2, #4
 81021bc:	701a      	strb	r2, [r3, #0]

				if (accuracyAccel == 0) calib->accuracyAccel = UNRELIABLE;
 81021be:	4b58      	ldr	r3, [pc, #352]	@ (8102320 <BNO086_Calibration+0x26c>)
 81021c0:	781b      	ldrb	r3, [r3, #0]
 81021c2:	2b00      	cmp	r3, #0
 81021c4:	d103      	bne.n	81021ce <BNO086_Calibration+0x11a>
 81021c6:	683b      	ldr	r3, [r7, #0]
 81021c8:	2201      	movs	r2, #1
 81021ca:	705a      	strb	r2, [r3, #1]
 81021cc:	e016      	b.n	81021fc <BNO086_Calibration+0x148>
				else if (accuracyAccel == 1) calib->accuracyAccel = LOW;
 81021ce:	4b54      	ldr	r3, [pc, #336]	@ (8102320 <BNO086_Calibration+0x26c>)
 81021d0:	781b      	ldrb	r3, [r3, #0]
 81021d2:	2b01      	cmp	r3, #1
 81021d4:	d103      	bne.n	81021de <BNO086_Calibration+0x12a>
 81021d6:	683b      	ldr	r3, [r7, #0]
 81021d8:	2202      	movs	r2, #2
 81021da:	705a      	strb	r2, [r3, #1]
 81021dc:	e00e      	b.n	81021fc <BNO086_Calibration+0x148>
				else if (accuracyAccel == 2) calib->accuracyAccel = MEDIUM;
 81021de:	4b50      	ldr	r3, [pc, #320]	@ (8102320 <BNO086_Calibration+0x26c>)
 81021e0:	781b      	ldrb	r3, [r3, #0]
 81021e2:	2b02      	cmp	r3, #2
 81021e4:	d103      	bne.n	81021ee <BNO086_Calibration+0x13a>
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	2203      	movs	r2, #3
 81021ea:	705a      	strb	r2, [r3, #1]
 81021ec:	e006      	b.n	81021fc <BNO086_Calibration+0x148>
				else if (accuracyAccel == 3) calib->accuracyAccel = HIGH;
 81021ee:	4b4c      	ldr	r3, [pc, #304]	@ (8102320 <BNO086_Calibration+0x26c>)
 81021f0:	781b      	ldrb	r3, [r3, #0]
 81021f2:	2b03      	cmp	r3, #3
 81021f4:	d102      	bne.n	81021fc <BNO086_Calibration+0x148>
 81021f6:	683b      	ldr	r3, [r7, #0]
 81021f8:	2204      	movs	r2, #4
 81021fa:	705a      	strb	r2, [r3, #1]

				if (accuracyGyro == 0) calib->accuracyGyro = UNRELIABLE;
 81021fc:	4b49      	ldr	r3, [pc, #292]	@ (8102324 <BNO086_Calibration+0x270>)
 81021fe:	781b      	ldrb	r3, [r3, #0]
 8102200:	2b00      	cmp	r3, #0
 8102202:	d103      	bne.n	810220c <BNO086_Calibration+0x158>
 8102204:	683b      	ldr	r3, [r7, #0]
 8102206:	2201      	movs	r2, #1
 8102208:	709a      	strb	r2, [r3, #2]
 810220a:	e016      	b.n	810223a <BNO086_Calibration+0x186>
				else if (accuracyGyro == 1) calib->accuracyGyro = LOW;
 810220c:	4b45      	ldr	r3, [pc, #276]	@ (8102324 <BNO086_Calibration+0x270>)
 810220e:	781b      	ldrb	r3, [r3, #0]
 8102210:	2b01      	cmp	r3, #1
 8102212:	d103      	bne.n	810221c <BNO086_Calibration+0x168>
 8102214:	683b      	ldr	r3, [r7, #0]
 8102216:	2202      	movs	r2, #2
 8102218:	709a      	strb	r2, [r3, #2]
 810221a:	e00e      	b.n	810223a <BNO086_Calibration+0x186>
				else if (accuracyGyro == 2) calib->accuracyGyro = MEDIUM;
 810221c:	4b41      	ldr	r3, [pc, #260]	@ (8102324 <BNO086_Calibration+0x270>)
 810221e:	781b      	ldrb	r3, [r3, #0]
 8102220:	2b02      	cmp	r3, #2
 8102222:	d103      	bne.n	810222c <BNO086_Calibration+0x178>
 8102224:	683b      	ldr	r3, [r7, #0]
 8102226:	2203      	movs	r2, #3
 8102228:	709a      	strb	r2, [r3, #2]
 810222a:	e006      	b.n	810223a <BNO086_Calibration+0x186>
				else if (accuracyGyro == 3) calib->accuracyGyro = HIGH;
 810222c:	4b3d      	ldr	r3, [pc, #244]	@ (8102324 <BNO086_Calibration+0x270>)
 810222e:	781b      	ldrb	r3, [r3, #0]
 8102230:	2b03      	cmp	r3, #3
 8102232:	d102      	bne.n	810223a <BNO086_Calibration+0x186>
 8102234:	683b      	ldr	r3, [r7, #0]
 8102236:	2204      	movs	r2, #4
 8102238:	709a      	strb	r2, [r3, #2]

				if (accuracyMag == 0) calib->accuracyMag = UNRELIABLE;
 810223a:	4b3b      	ldr	r3, [pc, #236]	@ (8102328 <BNO086_Calibration+0x274>)
 810223c:	781b      	ldrb	r3, [r3, #0]
 810223e:	2b00      	cmp	r3, #0
 8102240:	d103      	bne.n	810224a <BNO086_Calibration+0x196>
 8102242:	683b      	ldr	r3, [r7, #0]
 8102244:	2201      	movs	r2, #1
 8102246:	70da      	strb	r2, [r3, #3]
 8102248:	e016      	b.n	8102278 <BNO086_Calibration+0x1c4>
				else if (accuracyMag == 1) calib->accuracyMag = LOW;
 810224a:	4b37      	ldr	r3, [pc, #220]	@ (8102328 <BNO086_Calibration+0x274>)
 810224c:	781b      	ldrb	r3, [r3, #0]
 810224e:	2b01      	cmp	r3, #1
 8102250:	d103      	bne.n	810225a <BNO086_Calibration+0x1a6>
 8102252:	683b      	ldr	r3, [r7, #0]
 8102254:	2202      	movs	r2, #2
 8102256:	70da      	strb	r2, [r3, #3]
 8102258:	e00e      	b.n	8102278 <BNO086_Calibration+0x1c4>
				else if (accuracyMag == 2) calib->accuracyMag = MEDIUM;
 810225a:	4b33      	ldr	r3, [pc, #204]	@ (8102328 <BNO086_Calibration+0x274>)
 810225c:	781b      	ldrb	r3, [r3, #0]
 810225e:	2b02      	cmp	r3, #2
 8102260:	d103      	bne.n	810226a <BNO086_Calibration+0x1b6>
 8102262:	683b      	ldr	r3, [r7, #0]
 8102264:	2203      	movs	r2, #3
 8102266:	70da      	strb	r2, [r3, #3]
 8102268:	e006      	b.n	8102278 <BNO086_Calibration+0x1c4>
				else if (accuracyMag == 3) calib->accuracyMag = HIGH;
 810226a:	4b2f      	ldr	r3, [pc, #188]	@ (8102328 <BNO086_Calibration+0x274>)
 810226c:	781b      	ldrb	r3, [r3, #0]
 810226e:	2b03      	cmp	r3, #3
 8102270:	d102      	bne.n	8102278 <BNO086_Calibration+0x1c4>
 8102272:	683b      	ldr	r3, [r7, #0]
 8102274:	2204      	movs	r2, #4
 8102276:	70da      	strb	r2, [r3, #3]



				// Turn the LED and buzzer on when both accuracy and sensorAccuracy are high
				if (accuracy == 3 && sensorAccuracy == 3)
 8102278:	4b2c      	ldr	r3, [pc, #176]	@ (810232c <BNO086_Calibration+0x278>)
 810227a:	781b      	ldrb	r3, [r3, #0]
 810227c:	2b03      	cmp	r3, #3
 810227e:	d109      	bne.n	8102294 <BNO086_Calibration+0x1e0>
 8102280:	4b2b      	ldr	r3, [pc, #172]	@ (8102330 <BNO086_Calibration+0x27c>)
 8102282:	781b      	ldrb	r3, [r3, #0]
 8102284:	2b03      	cmp	r3, #3
 8102286:	d105      	bne.n	8102294 <BNO086_Calibration+0x1e0>
				{
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8102288:	2201      	movs	r2, #1
 810228a:	2101      	movs	r1, #1
 810228c:	4829      	ldr	r0, [pc, #164]	@ (8102334 <BNO086_Calibration+0x280>)
 810228e:	f000 ff73 	bl	8103178 <HAL_GPIO_WritePin>
 8102292:	e004      	b.n	810229e <BNO086_Calibration+0x1ea>
				}
				else
				{
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102294:	2200      	movs	r2, #0
 8102296:	2101      	movs	r1, #1
 8102298:	4826      	ldr	r0, [pc, #152]	@ (8102334 <BNO086_Calibration+0x280>)
 810229a:	f000 ff6d 	bl	8103178 <HAL_GPIO_WritePin>
				}
			}

			HAL_Delay(100);
 810229e:	2064      	movs	r0, #100	@ 0x64
 81022a0:	f000 fc5a 	bl	8102b58 <HAL_Delay>
		while (mode == 1 || mode == 2)
 81022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8102318 <BNO086_Calibration+0x264>)
 81022a6:	881b      	ldrh	r3, [r3, #0]
 81022a8:	2b01      	cmp	r3, #1
 81022aa:	f43f af2b 	beq.w	8102104 <BNO086_Calibration+0x50>
 81022ae:	4b1a      	ldr	r3, [pc, #104]	@ (8102318 <BNO086_Calibration+0x264>)
 81022b0:	881b      	ldrh	r3, [r3, #0]
 81022b2:	2b02      	cmp	r3, #2
 81022b4:	f43f af26 	beq.w	8102104 <BNO086_Calibration+0x50>
		}

		// End the loop when B1 pin is push to low, turn LED
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81022b8:	2200      	movs	r2, #0
 81022ba:	2101      	movs	r1, #1
 81022bc:	481d      	ldr	r0, [pc, #116]	@ (8102334 <BNO086_Calibration+0x280>)
 81022be:	f000 ff5b 	bl	8103178 <HAL_GPIO_WritePin>

		// Save current dynamic calibration data (DCD) to memory
		BNO086_saveCalibration();
 81022c2:	f7ff f9f1 	bl	81016a8 <BNO086_saveCalibration>
		BNO086_requestCalibrationStatus();
 81022c6:	f7ff f9d3 	bl	8101670 <BNO086_requestCalibrationStatus>

		// Wait for calibration response, timeout if no response
		int counter = 100;
 81022ca:	2364      	movs	r3, #100	@ 0x64
 81022cc:	60fb      	str	r3, [r7, #12]
		while (1)
		{
			if (--counter == 0) break;
 81022ce:	68fb      	ldr	r3, [r7, #12]
 81022d0:	3b01      	subs	r3, #1
 81022d2:	60fb      	str	r3, [r7, #12]
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	2b00      	cmp	r3, #0
 81022d8:	d011      	beq.n	81022fe <BNO086_Calibration+0x24a>
			if (BNO086_dataAvailable())
 81022da:	f7fe fd2d 	bl	8100d38 <BNO086_dataAvailable>
 81022de:	4603      	mov	r3, r0
 81022e0:	2b00      	cmp	r3, #0
 81022e2:	d008      	beq.n	81022f6 <BNO086_Calibration+0x242>
			{
				// Wait for ME Calibration Response Status byte to go to zero
				if (BNO086_calibrationComplete() == 1)
 81022e4:	f7ff f8fa 	bl	81014dc <BNO086_calibrationComplete>
 81022e8:	4603      	mov	r3, r0
 81022ea:	2b01      	cmp	r3, #1
 81022ec:	d103      	bne.n	81022f6 <BNO086_Calibration+0x242>
				{
					calib->CalibrationData = STORED_SUCCESSFULLY;
 81022ee:	683b      	ldr	r3, [r7, #0]
 81022f0:	2201      	movs	r2, #1
 81022f2:	711a      	strb	r2, [r3, #4]
					break;
 81022f4:	e004      	b.n	8102300 <BNO086_Calibration+0x24c>
				}
			}
			HAL_Delay(10);
 81022f6:	200a      	movs	r0, #10
 81022f8:	f000 fc2e 	bl	8102b58 <HAL_Delay>
			if (--counter == 0) break;
 81022fc:	e7e7      	b.n	81022ce <BNO086_Calibration+0x21a>
 81022fe:	bf00      	nop
		}

		if (counter == 0)
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	2b00      	cmp	r3, #0
 8102304:	d102      	bne.n	810230c <BNO086_Calibration+0x258>
		{
			calib->CalibrationData = STORED_FAILED;
 8102306:	683b      	ldr	r3, [r7, #0]
 8102308:	2202      	movs	r2, #2
 810230a:	711a      	strb	r2, [r3, #4]
		}
	}
}
 810230c:	bf00      	nop
 810230e:	3710      	adds	r7, #16
 8102310:	46bd      	mov	sp, r7
 8102312:	bd80      	pop	{r7, pc}
 8102314:	58020800 	.word	0x58020800
 8102318:	10000166 	.word	0x10000166
 810231c:	1000016a 	.word	0x1000016a
 8102320:	1000016b 	.word	0x1000016b
 8102324:	1000016c 	.word	0x1000016c
 8102328:	1000016d 	.word	0x1000016d
 810232c:	10000168 	.word	0x10000168
 8102330:	10000169 	.word	0x10000169
 8102334:	58020400 	.word	0x58020400

08102338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8102338:	b480      	push	{r7}
 810233a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810233c:	4b09      	ldr	r3, [pc, #36]	@ (8102364 <SystemInit+0x2c>)
 810233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102342:	4a08      	ldr	r2, [pc, #32]	@ (8102364 <SystemInit+0x2c>)
 8102344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8102348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810234c:	4b05      	ldr	r3, [pc, #20]	@ (8102364 <SystemInit+0x2c>)
 810234e:	691b      	ldr	r3, [r3, #16]
 8102350:	4a04      	ldr	r2, [pc, #16]	@ (8102364 <SystemInit+0x2c>)
 8102352:	f043 0310 	orr.w	r3, r3, #16
 8102356:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8102358:	bf00      	nop
 810235a:	46bd      	mov	sp, r7
 810235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102360:	4770      	bx	lr
 8102362:	bf00      	nop
 8102364:	e000ed00 	.word	0xe000ed00

08102368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8102368:	b480      	push	{r7}
 810236a:	b083      	sub	sp, #12
 810236c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810236e:	4b0a      	ldr	r3, [pc, #40]	@ (8102398 <MX_DMA_Init+0x30>)
 8102370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102374:	4a08      	ldr	r2, [pc, #32]	@ (8102398 <MX_DMA_Init+0x30>)
 8102376:	f043 0301 	orr.w	r3, r3, #1
 810237a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810237e:	4b06      	ldr	r3, [pc, #24]	@ (8102398 <MX_DMA_Init+0x30>)
 8102380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102384:	f003 0301 	and.w	r3, r3, #1
 8102388:	607b      	str	r3, [r7, #4]
 810238a:	687b      	ldr	r3, [r7, #4]

}
 810238c:	bf00      	nop
 810238e:	370c      	adds	r7, #12
 8102390:	46bd      	mov	sp, r7
 8102392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102396:	4770      	bx	lr
 8102398:	58024400 	.word	0x58024400

0810239c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 810239c:	b580      	push	{r7, lr}
 810239e:	b08a      	sub	sp, #40	@ 0x28
 81023a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81023a2:	f107 0314 	add.w	r3, r7, #20
 81023a6:	2200      	movs	r2, #0
 81023a8:	601a      	str	r2, [r3, #0]
 81023aa:	605a      	str	r2, [r3, #4]
 81023ac:	609a      	str	r2, [r3, #8]
 81023ae:	60da      	str	r2, [r3, #12]
 81023b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81023b2:	4b4f      	ldr	r3, [pc, #316]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023b8:	4a4d      	ldr	r2, [pc, #308]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023ba:	f043 0304 	orr.w	r3, r3, #4
 81023be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81023c2:	4b4b      	ldr	r3, [pc, #300]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023c8:	f003 0304 	and.w	r3, r3, #4
 81023cc:	613b      	str	r3, [r7, #16]
 81023ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81023d0:	4b47      	ldr	r3, [pc, #284]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023d6:	4a46      	ldr	r2, [pc, #280]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023d8:	f043 0301 	orr.w	r3, r3, #1
 81023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81023e0:	4b43      	ldr	r3, [pc, #268]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023e6:	f003 0301 	and.w	r3, r3, #1
 81023ea:	60fb      	str	r3, [r7, #12]
 81023ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81023ee:	4b40      	ldr	r3, [pc, #256]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023f4:	4a3e      	ldr	r2, [pc, #248]	@ (81024f0 <MX_GPIO_Init+0x154>)
 81023f6:	f043 0302 	orr.w	r3, r3, #2
 81023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81023fe:	4b3c      	ldr	r3, [pc, #240]	@ (81024f0 <MX_GPIO_Init+0x154>)
 8102400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102404:	f003 0302 	and.w	r3, r3, #2
 8102408:	60bb      	str	r3, [r7, #8]
 810240a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810240c:	4b38      	ldr	r3, [pc, #224]	@ (81024f0 <MX_GPIO_Init+0x154>)
 810240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102412:	4a37      	ldr	r2, [pc, #220]	@ (81024f0 <MX_GPIO_Init+0x154>)
 8102414:	f043 0308 	orr.w	r3, r3, #8
 8102418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810241c:	4b34      	ldr	r3, [pc, #208]	@ (81024f0 <MX_GPIO_Init+0x154>)
 810241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102422:	f003 0308 	and.w	r3, r3, #8
 8102426:	607b      	str	r3, [r7, #4]
 8102428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810242a:	4b31      	ldr	r3, [pc, #196]	@ (81024f0 <MX_GPIO_Init+0x154>)
 810242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102430:	4a2f      	ldr	r2, [pc, #188]	@ (81024f0 <MX_GPIO_Init+0x154>)
 8102432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8102436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810243a:	4b2d      	ldr	r3, [pc, #180]	@ (81024f0 <MX_GPIO_Init+0x154>)
 810243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102444:	603b      	str	r3, [r7, #0]
 8102446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CS_Pin, GPIO_PIN_RESET);
 8102448:	2200      	movs	r2, #0
 810244a:	2121      	movs	r1, #33	@ 0x21
 810244c:	4829      	ldr	r0, [pc, #164]	@ (81024f4 <MX_GPIO_Init+0x158>)
 810244e:	f000 fe93 	bl	8103178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WAK_Pin|RST_Pin, GPIO_PIN_RESET);
 8102452:	2200      	movs	r2, #0
 8102454:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8102458:	4827      	ldr	r0, [pc, #156]	@ (81024f8 <MX_GPIO_Init+0x15c>)
 810245a:	f000 fe8d 	bl	8103178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 810245e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102464:	2300      	movs	r3, #0
 8102466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102468:	2300      	movs	r3, #0
 810246a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 810246c:	f107 0314 	add.w	r3, r7, #20
 8102470:	4619      	mov	r1, r3
 8102472:	4822      	ldr	r0, [pc, #136]	@ (81024fc <MX_GPIO_Init+0x160>)
 8102474:	f000 fcb8 	bl	8102de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8102478:	2301      	movs	r3, #1
 810247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810247c:	2301      	movs	r3, #1
 810247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102480:	2300      	movs	r3, #0
 8102482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102484:	2300      	movs	r3, #0
 8102486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8102488:	f107 0314 	add.w	r3, r7, #20
 810248c:	4619      	mov	r1, r3
 810248e:	4819      	ldr	r0, [pc, #100]	@ (81024f4 <MX_GPIO_Init+0x158>)
 8102490:	f000 fcaa 	bl	8102de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = WAK_Pin|RST_Pin;
 8102494:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8102498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810249a:	2301      	movs	r3, #1
 810249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810249e:	2300      	movs	r3, #0
 81024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81024a2:	2303      	movs	r3, #3
 81024a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81024a6:	f107 0314 	add.w	r3, r7, #20
 81024aa:	4619      	mov	r1, r3
 81024ac:	4812      	ldr	r0, [pc, #72]	@ (81024f8 <MX_GPIO_Init+0x15c>)
 81024ae:	f000 fc9b 	bl	8102de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 81024b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81024b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81024b8:	2300      	movs	r3, #0
 81024ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024bc:	2300      	movs	r3, #0
 81024be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 81024c0:	f107 0314 	add.w	r3, r7, #20
 81024c4:	4619      	mov	r1, r3
 81024c6:	480e      	ldr	r0, [pc, #56]	@ (8102500 <MX_GPIO_Init+0x164>)
 81024c8:	f000 fc8e 	bl	8102de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 81024cc:	2320      	movs	r3, #32
 81024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81024d0:	2301      	movs	r3, #1
 81024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024d4:	2300      	movs	r3, #0
 81024d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81024d8:	2303      	movs	r3, #3
 81024da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 81024dc:	f107 0314 	add.w	r3, r7, #20
 81024e0:	4619      	mov	r1, r3
 81024e2:	4804      	ldr	r0, [pc, #16]	@ (81024f4 <MX_GPIO_Init+0x158>)
 81024e4:	f000 fc80 	bl	8102de8 <HAL_GPIO_Init>

}
 81024e8:	bf00      	nop
 81024ea:	3728      	adds	r7, #40	@ 0x28
 81024ec:	46bd      	mov	sp, r7
 81024ee:	bd80      	pop	{r7, pc}
 81024f0:	58024400 	.word	0x58024400
 81024f4:	58020400 	.word	0x58020400
 81024f8:	58020c00 	.word	0x58020c00
 81024fc:	58020800 	.word	0x58020800
 8102500:	58021800 	.word	0x58021800

08102504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102504:	b580      	push	{r7, lr}
 8102506:	b082      	sub	sp, #8
 8102508:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810250a:	4b2d      	ldr	r3, [pc, #180]	@ (81025c0 <main+0xbc>)
 810250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102510:	4a2b      	ldr	r2, [pc, #172]	@ (81025c0 <main+0xbc>)
 8102512:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8102516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810251a:	4b29      	ldr	r3, [pc, #164]	@ (81025c0 <main+0xbc>)
 810251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102524:	607b      	str	r3, [r7, #4]
 8102526:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102528:	2001      	movs	r0, #1
 810252a:	f000 fe6d 	bl	8103208 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810252e:	f000 ff2f 	bl	8103390 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8102532:	2201      	movs	r2, #1
 8102534:	2102      	movs	r1, #2
 8102536:	2000      	movs	r0, #0
 8102538:	f000 feb0 	bl	810329c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810253c:	4b21      	ldr	r3, [pc, #132]	@ (81025c4 <main+0xc0>)
 810253e:	681b      	ldr	r3, [r3, #0]
 8102540:	091b      	lsrs	r3, r3, #4
 8102542:	f003 030f 	and.w	r3, r3, #15
 8102546:	2b07      	cmp	r3, #7
 8102548:	d108      	bne.n	810255c <main+0x58>
 810254a:	4b1f      	ldr	r3, [pc, #124]	@ (81025c8 <main+0xc4>)
 810254c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8102550:	4a1d      	ldr	r2, [pc, #116]	@ (81025c8 <main+0xc4>)
 8102552:	f043 0301 	orr.w	r3, r3, #1
 8102556:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810255a:	e007      	b.n	810256c <main+0x68>
 810255c:	4b1a      	ldr	r3, [pc, #104]	@ (81025c8 <main+0xc4>)
 810255e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102562:	4a19      	ldr	r2, [pc, #100]	@ (81025c8 <main+0xc4>)
 8102564:	f043 0301 	orr.w	r3, r3, #1
 8102568:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810256c:	f000 fa40 	bl	81029f0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8102570:	f7ff fefa 	bl	8102368 <MX_DMA_Init>
  MX_GPIO_Init();
 8102574:	f7ff ff12 	bl	810239c <MX_GPIO_Init>
  MX_SPI1_Init();
 8102578:	f000 f854 	bl	8102624 <MX_SPI1_Init>
  MX_TIM2_Init();
 810257c:	f000 f99a 	bl	81028b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    // ================================================== BNO086 ==================================================//

    BNO086_Calibration(&BNO086, &CALIBRATE); // Press B1 Button before power up to enter calibration mode
 8102580:	4912      	ldr	r1, [pc, #72]	@ (81025cc <main+0xc8>)
 8102582:	4813      	ldr	r0, [pc, #76]	@ (81025d0 <main+0xcc>)
 8102584:	f7ff fd96 	bl	81020b4 <BNO086_Calibration>
 	BNO086_Initialization(&BNO086);
 8102588:	4811      	ldr	r0, [pc, #68]	@ (81025d0 <main+0xcc>)
 810258a:	f7fe fb61 	bl	8100c50 <BNO086_Initialization>
 	BNO086_enableRotationVector(2500); //enable rotation vector at 400Hz (2500 microsecs)
 810258e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8102592:	f7fe ff42 	bl	810141a <BNO086_enableRotationVector>
 	 //BNO086_enableGameRotationVector(11111); //enable Gaming Rotation vector at 90Hz (2500 microsecs)

 	BNO086_enableAccelerometer(2000); //enable Accelerometer at 400Hz (2500 microsecs)
 8102596:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 810259a:	f7fe ff5c 	bl	8101456 <BNO086_enableAccelerometer>
 	BNO086_enableLinearAccelerometer(2500); //enable Linear Accelerometer at 400Hz (2500 microsecs)
 810259e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 81025a2:	f7fe ff67 	bl	8101474 <BNO086_enableLinearAccelerometer>
 	BNO086_enableGyro(2500); //enable Gyrometer  at 400Hz (2500 microsecs)
 81025a6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 81025aa:	f7fe ff72 	bl	8101492 <BNO086_enableGyro>
 	BNO086_enableMagnetometer(10000); //enable Magnetometer at 100Hz (10000 microsecs)
 81025ae:	f242 7010 	movw	r0, #10000	@ 0x2710
 81025b2:	f7fe ff7d 	bl	81014b0 <BNO086_enableMagnetometer>

     // ================================================== Timer Interrupt ==================================================//

 	HAL_TIM_Base_Start_IT(&htim2);
 81025b6:	4807      	ldr	r0, [pc, #28]	@ (81025d4 <main+0xd0>)
 81025b8:	f003 f97c 	bl	81058b4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81025bc:	bf00      	nop
 81025be:	e7fd      	b.n	81025bc <main+0xb8>
 81025c0:	58024400 	.word	0x58024400
 81025c4:	e000ed00 	.word	0xe000ed00
 81025c8:	58026400 	.word	0x58026400
 81025cc:	100001bc 	.word	0x100001bc
 81025d0:	10000170 	.word	0x10000170
 81025d4:	1000024c 	.word	0x1000024c

081025d8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81025d8:	b580      	push	{r7, lr}
 81025da:	b082      	sub	sp, #8
 81025dc:	af00      	add	r7, sp, #0
 81025de:	6078      	str	r0, [r7, #4]
	 // =============================== Timer Interrupt ================================== //

	if(htim == &htim2){
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8102610 <HAL_TIM_PeriodElapsedCallback+0x38>)
 81025e4:	4293      	cmp	r3, r2
 81025e6:	d10e      	bne.n	8102606 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_HSEM_DeactivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81025e8:	2001      	movs	r0, #1
 81025ea:	f000 fe1f 	bl	810322c <HAL_HSEM_DeactivateNotification>

		if(BNO086_dataAvailable() == 1){
 81025ee:	f7fe fba3 	bl	8100d38 <BNO086_dataAvailable>
 81025f2:	4603      	mov	r3, r0
 81025f4:	2b01      	cmp	r3, #1
 81025f6:	d106      	bne.n	8102606 <HAL_TIM_PeriodElapsedCallback+0x2e>
			BNO086_getData(&BNO086, UNIT_DEG);
 81025f8:	2101      	movs	r1, #1
 81025fa:	4806      	ldr	r0, [pc, #24]	@ (8102614 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 81025fc:	f7ff fbc0 	bl	8101d80 <BNO086_getData>
			BNO086_SAVE_HSEM(&BNO086);
 8102600:	4804      	ldr	r0, [pc, #16]	@ (8102614 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8102602:	f7ff fc52 	bl	8101eaa <BNO086_SAVE_HSEM>
		}
	}

	// =============================================================================== //
}
 8102606:	bf00      	nop
 8102608:	3708      	adds	r7, #8
 810260a:	46bd      	mov	sp, r7
 810260c:	bd80      	pop	{r7, pc}
 810260e:	bf00      	nop
 8102610:	1000024c 	.word	0x1000024c
 8102614:	10000170 	.word	0x10000170

08102618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102618:	b480      	push	{r7}
 810261a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810261c:	b672      	cpsid	i
}
 810261e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102620:	bf00      	nop
 8102622:	e7fd      	b.n	8102620 <Error_Handler+0x8>

08102624 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102624:	b580      	push	{r7, lr}
 8102626:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102628:	4b29      	ldr	r3, [pc, #164]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810262a:	4a2a      	ldr	r2, [pc, #168]	@ (81026d4 <MX_SPI1_Init+0xb0>)
 810262c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810262e:	4b28      	ldr	r3, [pc, #160]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102630:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8102634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102636:	4b26      	ldr	r3, [pc, #152]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102638:	2200      	movs	r2, #0
 810263a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 810263c:	4b24      	ldr	r3, [pc, #144]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810263e:	2207      	movs	r2, #7
 8102640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8102642:	4b23      	ldr	r3, [pc, #140]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102644:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8102648:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 810264a:	4b21      	ldr	r3, [pc, #132]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810264c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8102650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102652:	4b1f      	ldr	r3, [pc, #124]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102654:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8102658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 810265a:	4b1d      	ldr	r3, [pc, #116]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810265c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102660:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102662:	4b1b      	ldr	r3, [pc, #108]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102664:	2200      	movs	r2, #0
 8102666:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102668:	4b19      	ldr	r3, [pc, #100]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810266a:	2200      	movs	r2, #0
 810266c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810266e:	4b18      	ldr	r3, [pc, #96]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102670:	2200      	movs	r2, #0
 8102672:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102674:	4b16      	ldr	r3, [pc, #88]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102676:	2200      	movs	r2, #0
 8102678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810267a:	4b15      	ldr	r3, [pc, #84]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810267c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102680:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102682:	4b13      	ldr	r3, [pc, #76]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102684:	2200      	movs	r2, #0
 8102686:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102688:	4b11      	ldr	r3, [pc, #68]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810268a:	2200      	movs	r2, #0
 810268c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810268e:	4b10      	ldr	r3, [pc, #64]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102690:	2200      	movs	r2, #0
 8102692:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102694:	4b0e      	ldr	r3, [pc, #56]	@ (81026d0 <MX_SPI1_Init+0xac>)
 8102696:	2200      	movs	r2, #0
 8102698:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810269a:	4b0d      	ldr	r3, [pc, #52]	@ (81026d0 <MX_SPI1_Init+0xac>)
 810269c:	2200      	movs	r2, #0
 810269e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81026a0:	4b0b      	ldr	r3, [pc, #44]	@ (81026d0 <MX_SPI1_Init+0xac>)
 81026a2:	2200      	movs	r2, #0
 81026a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81026a6:	4b0a      	ldr	r3, [pc, #40]	@ (81026d0 <MX_SPI1_Init+0xac>)
 81026a8:	2200      	movs	r2, #0
 81026aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 81026ac:	4b08      	ldr	r3, [pc, #32]	@ (81026d0 <MX_SPI1_Init+0xac>)
 81026ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81026b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81026b4:	4b06      	ldr	r3, [pc, #24]	@ (81026d0 <MX_SPI1_Init+0xac>)
 81026b6:	2200      	movs	r2, #0
 81026b8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81026ba:	4805      	ldr	r0, [pc, #20]	@ (81026d0 <MX_SPI1_Init+0xac>)
 81026bc:	f002 fb5e 	bl	8104d7c <HAL_SPI_Init>
 81026c0:	4603      	mov	r3, r0
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	d001      	beq.n	81026ca <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 81026c6:	f7ff ffa7 	bl	8102618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81026ca:	bf00      	nop
 81026cc:	bd80      	pop	{r7, pc}
 81026ce:	bf00      	nop
 81026d0:	100001c4 	.word	0x100001c4
 81026d4:	40013000 	.word	0x40013000

081026d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81026d8:	b580      	push	{r7, lr}
 81026da:	b0bc      	sub	sp, #240	@ 0xf0
 81026dc:	af00      	add	r7, sp, #0
 81026de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81026e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81026e4:	2200      	movs	r2, #0
 81026e6:	601a      	str	r2, [r3, #0]
 81026e8:	605a      	str	r2, [r3, #4]
 81026ea:	609a      	str	r2, [r3, #8]
 81026ec:	60da      	str	r2, [r3, #12]
 81026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81026f0:	f107 0318 	add.w	r3, r7, #24
 81026f4:	22c0      	movs	r2, #192	@ 0xc0
 81026f6:	2100      	movs	r1, #0
 81026f8:	4618      	mov	r0, r3
 81026fa:	f003 fd69 	bl	81061d0 <memset>
  if(spiHandle->Instance==SPI1)
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	4a38      	ldr	r2, [pc, #224]	@ (81027e4 <HAL_SPI_MspInit+0x10c>)
 8102704:	4293      	cmp	r3, r2
 8102706:	d168      	bne.n	81027da <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 810270c:	f04f 0300 	mov.w	r3, #0
 8102710:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102714:	2300      	movs	r3, #0
 8102716:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102718:	f107 0318 	add.w	r3, r7, #24
 810271c:	4618      	mov	r0, r3
 810271e:	f000 ffbf 	bl	81036a0 <HAL_RCCEx_PeriphCLKConfig>
 8102722:	4603      	mov	r3, r0
 8102724:	2b00      	cmp	r3, #0
 8102726:	d001      	beq.n	810272c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8102728:	f7ff ff76 	bl	8102618 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 810272c:	4b2e      	ldr	r3, [pc, #184]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 810272e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102732:	4a2d      	ldr	r2, [pc, #180]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 8102734:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8102738:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810273c:	4b2a      	ldr	r3, [pc, #168]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 810273e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8102746:	617b      	str	r3, [r7, #20]
 8102748:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810274a:	4b27      	ldr	r3, [pc, #156]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 810274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102750:	4a25      	ldr	r2, [pc, #148]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 8102752:	f043 0301 	orr.w	r3, r3, #1
 8102756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810275a:	4b23      	ldr	r3, [pc, #140]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 810275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102760:	f003 0301 	and.w	r3, r3, #1
 8102764:	613b      	str	r3, [r7, #16]
 8102766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102768:	4b1f      	ldr	r3, [pc, #124]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 810276a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810276e:	4a1e      	ldr	r2, [pc, #120]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 8102770:	f043 0308 	orr.w	r3, r3, #8
 8102774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102778:	4b1b      	ldr	r3, [pc, #108]	@ (81027e8 <HAL_SPI_MspInit+0x110>)
 810277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810277e:	f003 0308 	and.w	r3, r3, #8
 8102782:	60fb      	str	r3, [r7, #12]
 8102784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8102786:	2360      	movs	r3, #96	@ 0x60
 8102788:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810278c:	2302      	movs	r3, #2
 810278e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102792:	2300      	movs	r3, #0
 8102794:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102798:	2303      	movs	r3, #3
 810279a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810279e:	2305      	movs	r3, #5
 81027a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81027a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81027a8:	4619      	mov	r1, r3
 81027aa:	4810      	ldr	r0, [pc, #64]	@ (81027ec <HAL_SPI_MspInit+0x114>)
 81027ac:	f000 fb1c 	bl	8102de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81027b0:	2380      	movs	r3, #128	@ 0x80
 81027b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027b6:	2302      	movs	r3, #2
 81027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027bc:	2300      	movs	r3, #0
 81027be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81027c2:	2303      	movs	r3, #3
 81027c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81027c8:	2305      	movs	r3, #5
 81027ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81027ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81027d2:	4619      	mov	r1, r3
 81027d4:	4806      	ldr	r0, [pc, #24]	@ (81027f0 <HAL_SPI_MspInit+0x118>)
 81027d6:	f000 fb07 	bl	8102de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81027da:	bf00      	nop
 81027dc:	37f0      	adds	r7, #240	@ 0xf0
 81027de:	46bd      	mov	sp, r7
 81027e0:	bd80      	pop	{r7, pc}
 81027e2:	bf00      	nop
 81027e4:	40013000 	.word	0x40013000
 81027e8:	58024400 	.word	0x58024400
 81027ec:	58020000 	.word	0x58020000
 81027f0:	58020c00 	.word	0x58020c00

081027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81027f4:	b580      	push	{r7, lr}
 81027f6:	b082      	sub	sp, #8
 81027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8102830 <HAL_MspInit+0x3c>)
 81027fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102800:	4a0b      	ldr	r2, [pc, #44]	@ (8102830 <HAL_MspInit+0x3c>)
 8102802:	f043 0302 	orr.w	r3, r3, #2
 8102806:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810280a:	4b09      	ldr	r3, [pc, #36]	@ (8102830 <HAL_MspInit+0x3c>)
 810280c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102810:	f003 0302 	and.w	r3, r3, #2
 8102814:	607b      	str	r3, [r7, #4]
 8102816:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8102818:	2200      	movs	r2, #0
 810281a:	2100      	movs	r1, #0
 810281c:	207e      	movs	r0, #126	@ 0x7e
 810281e:	f000 fa9a 	bl	8102d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8102822:	207e      	movs	r0, #126	@ 0x7e
 8102824:	f000 fab1 	bl	8102d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102828:	bf00      	nop
 810282a:	3708      	adds	r7, #8
 810282c:	46bd      	mov	sp, r7
 810282e:	bd80      	pop	{r7, pc}
 8102830:	58024400 	.word	0x58024400

08102834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102834:	b480      	push	{r7}
 8102836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102838:	bf00      	nop
 810283a:	e7fd      	b.n	8102838 <NMI_Handler+0x4>

0810283c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810283c:	b480      	push	{r7}
 810283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102840:	bf00      	nop
 8102842:	e7fd      	b.n	8102840 <HardFault_Handler+0x4>

08102844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102844:	b480      	push	{r7}
 8102846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102848:	bf00      	nop
 810284a:	e7fd      	b.n	8102848 <MemManage_Handler+0x4>

0810284c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810284c:	b480      	push	{r7}
 810284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102850:	bf00      	nop
 8102852:	e7fd      	b.n	8102850 <BusFault_Handler+0x4>

08102854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102854:	b480      	push	{r7}
 8102856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102858:	bf00      	nop
 810285a:	e7fd      	b.n	8102858 <UsageFault_Handler+0x4>

0810285c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810285c:	b480      	push	{r7}
 810285e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102860:	bf00      	nop
 8102862:	46bd      	mov	sp, r7
 8102864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102868:	4770      	bx	lr

0810286a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810286a:	b480      	push	{r7}
 810286c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810286e:	bf00      	nop
 8102870:	46bd      	mov	sp, r7
 8102872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102876:	4770      	bx	lr

08102878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102878:	b480      	push	{r7}
 810287a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810287c:	bf00      	nop
 810287e:	46bd      	mov	sp, r7
 8102880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102884:	4770      	bx	lr

08102886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102886:	b580      	push	{r7, lr}
 8102888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810288a:	f000 f945 	bl	8102b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810288e:	bf00      	nop
 8102890:	bd80      	pop	{r7, pc}
	...

08102894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102894:	b580      	push	{r7, lr}
 8102896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102898:	4802      	ldr	r0, [pc, #8]	@ (81028a4 <TIM2_IRQHandler+0x10>)
 810289a:	f003 f883 	bl	81059a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810289e:	bf00      	nop
 81028a0:	bd80      	pop	{r7, pc}
 81028a2:	bf00      	nop
 81028a4:	1000024c 	.word	0x1000024c

081028a8 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81028a8:	b580      	push	{r7, lr}
 81028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81028ac:	f000 fcd2 	bl	8103254 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81028b0:	bf00      	nop
 81028b2:	bd80      	pop	{r7, pc}

081028b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 81028b4:	b580      	push	{r7, lr}
 81028b6:	b088      	sub	sp, #32
 81028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81028ba:	f107 0310 	add.w	r3, r7, #16
 81028be:	2200      	movs	r2, #0
 81028c0:	601a      	str	r2, [r3, #0]
 81028c2:	605a      	str	r2, [r3, #4]
 81028c4:	609a      	str	r2, [r3, #8]
 81028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81028c8:	1d3b      	adds	r3, r7, #4
 81028ca:	2200      	movs	r2, #0
 81028cc:	601a      	str	r2, [r3, #0]
 81028ce:	605a      	str	r2, [r3, #4]
 81028d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81028d2:	4b1e      	ldr	r3, [pc, #120]	@ (810294c <MX_TIM2_Init+0x98>)
 81028d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81028d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 81028da:	4b1c      	ldr	r3, [pc, #112]	@ (810294c <MX_TIM2_Init+0x98>)
 81028dc:	22a9      	movs	r2, #169	@ 0xa9
 81028de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81028e0:	4b1a      	ldr	r3, [pc, #104]	@ (810294c <MX_TIM2_Init+0x98>)
 81028e2:	2200      	movs	r2, #0
 81028e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 81028e6:	4b19      	ldr	r3, [pc, #100]	@ (810294c <MX_TIM2_Init+0x98>)
 81028e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 81028ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81028ee:	4b17      	ldr	r3, [pc, #92]	@ (810294c <MX_TIM2_Init+0x98>)
 81028f0:	2200      	movs	r2, #0
 81028f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81028f4:	4b15      	ldr	r3, [pc, #84]	@ (810294c <MX_TIM2_Init+0x98>)
 81028f6:	2200      	movs	r2, #0
 81028f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81028fa:	4814      	ldr	r0, [pc, #80]	@ (810294c <MX_TIM2_Init+0x98>)
 81028fc:	f002 ff83 	bl	8105806 <HAL_TIM_Base_Init>
 8102900:	4603      	mov	r3, r0
 8102902:	2b00      	cmp	r3, #0
 8102904:	d001      	beq.n	810290a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8102906:	f7ff fe87 	bl	8102618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810290a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810290e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102910:	f107 0310 	add.w	r3, r7, #16
 8102914:	4619      	mov	r1, r3
 8102916:	480d      	ldr	r0, [pc, #52]	@ (810294c <MX_TIM2_Init+0x98>)
 8102918:	f003 f94c 	bl	8105bb4 <HAL_TIM_ConfigClockSource>
 810291c:	4603      	mov	r3, r0
 810291e:	2b00      	cmp	r3, #0
 8102920:	d001      	beq.n	8102926 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8102922:	f7ff fe79 	bl	8102618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8102926:	2320      	movs	r3, #32
 8102928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810292a:	2300      	movs	r3, #0
 810292c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810292e:	1d3b      	adds	r3, r7, #4
 8102930:	4619      	mov	r1, r3
 8102932:	4806      	ldr	r0, [pc, #24]	@ (810294c <MX_TIM2_Init+0x98>)
 8102934:	f003 fba0 	bl	8106078 <HAL_TIMEx_MasterConfigSynchronization>
 8102938:	4603      	mov	r3, r0
 810293a:	2b00      	cmp	r3, #0
 810293c:	d001      	beq.n	8102942 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 810293e:	f7ff fe6b 	bl	8102618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8102942:	bf00      	nop
 8102944:	3720      	adds	r7, #32
 8102946:	46bd      	mov	sp, r7
 8102948:	bd80      	pop	{r7, pc}
 810294a:	bf00      	nop
 810294c:	1000024c 	.word	0x1000024c

08102950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102950:	b580      	push	{r7, lr}
 8102952:	b084      	sub	sp, #16
 8102954:	af00      	add	r7, sp, #0
 8102956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102960:	d116      	bne.n	8102990 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102962:	4b0d      	ldr	r3, [pc, #52]	@ (8102998 <HAL_TIM_Base_MspInit+0x48>)
 8102964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102968:	4a0b      	ldr	r2, [pc, #44]	@ (8102998 <HAL_TIM_Base_MspInit+0x48>)
 810296a:	f043 0301 	orr.w	r3, r3, #1
 810296e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102972:	4b09      	ldr	r3, [pc, #36]	@ (8102998 <HAL_TIM_Base_MspInit+0x48>)
 8102974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102978:	f003 0301 	and.w	r3, r3, #1
 810297c:	60fb      	str	r3, [r7, #12]
 810297e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102980:	2200      	movs	r2, #0
 8102982:	2100      	movs	r1, #0
 8102984:	201c      	movs	r0, #28
 8102986:	f000 f9e6 	bl	8102d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 810298a:	201c      	movs	r0, #28
 810298c:	f000 f9fd 	bl	8102d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8102990:	bf00      	nop
 8102992:	3710      	adds	r7, #16
 8102994:	46bd      	mov	sp, r7
 8102996:	bd80      	pop	{r7, pc}
 8102998:	58024400 	.word	0x58024400

0810299c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810299c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81029d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81029a0:	f7ff fcca 	bl	8102338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81029a4:	480c      	ldr	r0, [pc, #48]	@ (81029d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81029a6:	490d      	ldr	r1, [pc, #52]	@ (81029dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81029a8:	4a0d      	ldr	r2, [pc, #52]	@ (81029e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81029ac:	e002      	b.n	81029b4 <LoopCopyDataInit>

081029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81029b2:	3304      	adds	r3, #4

081029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81029b8:	d3f9      	bcc.n	81029ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81029ba:	4a0a      	ldr	r2, [pc, #40]	@ (81029e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81029bc:	4c0a      	ldr	r4, [pc, #40]	@ (81029e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 81029c0:	e001      	b.n	81029c6 <LoopFillZerobss>

081029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81029c4:	3204      	adds	r2, #4

081029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81029c8:	d3fb      	bcc.n	81029c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81029ca:	f003 fc0f 	bl	81061ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81029ce:	f7ff fd99 	bl	8102504 <main>
  bx  lr
 81029d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81029d4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81029d8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81029dc:	10000080 	.word	0x10000080
  ldr r2, =_sidata
 81029e0:	081075e8 	.word	0x081075e8
  ldr r2, =_sbss
 81029e4:	10000080 	.word	0x10000080
  ldr r4, =_ebss
 81029e8:	100003d4 	.word	0x100003d4

081029ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81029ec:	e7fe      	b.n	81029ec <ADC3_IRQHandler>
	...

081029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81029f0:	b580      	push	{r7, lr}
 81029f2:	b082      	sub	sp, #8
 81029f4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81029f6:	4b28      	ldr	r3, [pc, #160]	@ (8102a98 <HAL_Init+0xa8>)
 81029f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81029fc:	4a26      	ldr	r2, [pc, #152]	@ (8102a98 <HAL_Init+0xa8>)
 81029fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102a02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102a06:	4b24      	ldr	r3, [pc, #144]	@ (8102a98 <HAL_Init+0xa8>)
 8102a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102a10:	603b      	str	r3, [r7, #0]
 8102a12:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102a14:	4b21      	ldr	r3, [pc, #132]	@ (8102a9c <HAL_Init+0xac>)
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102a20:	4a1e      	ldr	r2, [pc, #120]	@ (8102a9c <HAL_Init+0xac>)
 8102a22:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102a26:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102a28:	4b1c      	ldr	r3, [pc, #112]	@ (8102a9c <HAL_Init+0xac>)
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8102a9c <HAL_Init+0xac>)
 8102a2e:	f043 0301 	orr.w	r3, r3, #1
 8102a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102a34:	2003      	movs	r0, #3
 8102a36:	f000 f983 	bl	8102d40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a3a:	f000 fcb7 	bl	81033ac <HAL_RCC_GetSysClockFreq>
 8102a3e:	4602      	mov	r2, r0
 8102a40:	4b15      	ldr	r3, [pc, #84]	@ (8102a98 <HAL_Init+0xa8>)
 8102a42:	699b      	ldr	r3, [r3, #24]
 8102a44:	0a1b      	lsrs	r3, r3, #8
 8102a46:	f003 030f 	and.w	r3, r3, #15
 8102a4a:	4915      	ldr	r1, [pc, #84]	@ (8102aa0 <HAL_Init+0xb0>)
 8102a4c:	5ccb      	ldrb	r3, [r1, r3]
 8102a4e:	f003 031f 	and.w	r3, r3, #31
 8102a52:	fa22 f303 	lsr.w	r3, r2, r3
 8102a56:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a58:	4b0f      	ldr	r3, [pc, #60]	@ (8102a98 <HAL_Init+0xa8>)
 8102a5a:	699b      	ldr	r3, [r3, #24]
 8102a5c:	f003 030f 	and.w	r3, r3, #15
 8102a60:	4a0f      	ldr	r2, [pc, #60]	@ (8102aa0 <HAL_Init+0xb0>)
 8102a62:	5cd3      	ldrb	r3, [r2, r3]
 8102a64:	f003 031f 	and.w	r3, r3, #31
 8102a68:	687a      	ldr	r2, [r7, #4]
 8102a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8102a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8102aa4 <HAL_Init+0xb4>)
 8102a70:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a72:	4b0c      	ldr	r3, [pc, #48]	@ (8102aa4 <HAL_Init+0xb4>)
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a0c      	ldr	r2, [pc, #48]	@ (8102aa8 <HAL_Init+0xb8>)
 8102a78:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102a7a:	2000      	movs	r0, #0
 8102a7c:	f000 f816 	bl	8102aac <HAL_InitTick>
 8102a80:	4603      	mov	r3, r0
 8102a82:	2b00      	cmp	r3, #0
 8102a84:	d001      	beq.n	8102a8a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102a86:	2301      	movs	r3, #1
 8102a88:	e002      	b.n	8102a90 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102a8a:	f7ff feb3 	bl	81027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102a8e:	2300      	movs	r3, #0
}
 8102a90:	4618      	mov	r0, r3
 8102a92:	3708      	adds	r7, #8
 8102a94:	46bd      	mov	sp, r7
 8102a96:	bd80      	pop	{r7, pc}
 8102a98:	58024400 	.word	0x58024400
 8102a9c:	40024400 	.word	0x40024400
 8102aa0:	08107540 	.word	0x08107540
 8102aa4:	10000010 	.word	0x10000010
 8102aa8:	1000000c 	.word	0x1000000c

08102aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102aac:	b580      	push	{r7, lr}
 8102aae:	b082      	sub	sp, #8
 8102ab0:	af00      	add	r7, sp, #0
 8102ab2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102ab4:	4b15      	ldr	r3, [pc, #84]	@ (8102b0c <HAL_InitTick+0x60>)
 8102ab6:	781b      	ldrb	r3, [r3, #0]
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	d101      	bne.n	8102ac0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102abc:	2301      	movs	r3, #1
 8102abe:	e021      	b.n	8102b04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102ac0:	4b13      	ldr	r3, [pc, #76]	@ (8102b10 <HAL_InitTick+0x64>)
 8102ac2:	681a      	ldr	r2, [r3, #0]
 8102ac4:	4b11      	ldr	r3, [pc, #68]	@ (8102b0c <HAL_InitTick+0x60>)
 8102ac6:	781b      	ldrb	r3, [r3, #0]
 8102ac8:	4619      	mov	r1, r3
 8102aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8102ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8102ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8102ad6:	4618      	mov	r0, r3
 8102ad8:	f000 f965 	bl	8102da6 <HAL_SYSTICK_Config>
 8102adc:	4603      	mov	r3, r0
 8102ade:	2b00      	cmp	r3, #0
 8102ae0:	d001      	beq.n	8102ae6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102ae2:	2301      	movs	r3, #1
 8102ae4:	e00e      	b.n	8102b04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	2b0f      	cmp	r3, #15
 8102aea:	d80a      	bhi.n	8102b02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102aec:	2200      	movs	r2, #0
 8102aee:	6879      	ldr	r1, [r7, #4]
 8102af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8102af4:	f000 f92f 	bl	8102d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102af8:	4a06      	ldr	r2, [pc, #24]	@ (8102b14 <HAL_InitTick+0x68>)
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102afe:	2300      	movs	r3, #0
 8102b00:	e000      	b.n	8102b04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102b02:	2301      	movs	r3, #1
}
 8102b04:	4618      	mov	r0, r3
 8102b06:	3708      	adds	r7, #8
 8102b08:	46bd      	mov	sp, r7
 8102b0a:	bd80      	pop	{r7, pc}
 8102b0c:	10000018 	.word	0x10000018
 8102b10:	1000000c 	.word	0x1000000c
 8102b14:	10000014 	.word	0x10000014

08102b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102b18:	b480      	push	{r7}
 8102b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102b1c:	4b06      	ldr	r3, [pc, #24]	@ (8102b38 <HAL_IncTick+0x20>)
 8102b1e:	781b      	ldrb	r3, [r3, #0]
 8102b20:	461a      	mov	r2, r3
 8102b22:	4b06      	ldr	r3, [pc, #24]	@ (8102b3c <HAL_IncTick+0x24>)
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4413      	add	r3, r2
 8102b28:	4a04      	ldr	r2, [pc, #16]	@ (8102b3c <HAL_IncTick+0x24>)
 8102b2a:	6013      	str	r3, [r2, #0]
}
 8102b2c:	bf00      	nop
 8102b2e:	46bd      	mov	sp, r7
 8102b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b34:	4770      	bx	lr
 8102b36:	bf00      	nop
 8102b38:	10000018 	.word	0x10000018
 8102b3c:	10000298 	.word	0x10000298

08102b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102b40:	b480      	push	{r7}
 8102b42:	af00      	add	r7, sp, #0
  return uwTick;
 8102b44:	4b03      	ldr	r3, [pc, #12]	@ (8102b54 <HAL_GetTick+0x14>)
 8102b46:	681b      	ldr	r3, [r3, #0]
}
 8102b48:	4618      	mov	r0, r3
 8102b4a:	46bd      	mov	sp, r7
 8102b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b50:	4770      	bx	lr
 8102b52:	bf00      	nop
 8102b54:	10000298 	.word	0x10000298

08102b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102b58:	b580      	push	{r7, lr}
 8102b5a:	b084      	sub	sp, #16
 8102b5c:	af00      	add	r7, sp, #0
 8102b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102b60:	f7ff ffee 	bl	8102b40 <HAL_GetTick>
 8102b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102b70:	d005      	beq.n	8102b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102b72:	4b0a      	ldr	r3, [pc, #40]	@ (8102b9c <HAL_Delay+0x44>)
 8102b74:	781b      	ldrb	r3, [r3, #0]
 8102b76:	461a      	mov	r2, r3
 8102b78:	68fb      	ldr	r3, [r7, #12]
 8102b7a:	4413      	add	r3, r2
 8102b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102b7e:	bf00      	nop
 8102b80:	f7ff ffde 	bl	8102b40 <HAL_GetTick>
 8102b84:	4602      	mov	r2, r0
 8102b86:	68bb      	ldr	r3, [r7, #8]
 8102b88:	1ad3      	subs	r3, r2, r3
 8102b8a:	68fa      	ldr	r2, [r7, #12]
 8102b8c:	429a      	cmp	r2, r3
 8102b8e:	d8f7      	bhi.n	8102b80 <HAL_Delay+0x28>
  {
  }
}
 8102b90:	bf00      	nop
 8102b92:	bf00      	nop
 8102b94:	3710      	adds	r7, #16
 8102b96:	46bd      	mov	sp, r7
 8102b98:	bd80      	pop	{r7, pc}
 8102b9a:	bf00      	nop
 8102b9c:	10000018 	.word	0x10000018

08102ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102ba0:	b480      	push	{r7}
 8102ba2:	b085      	sub	sp, #20
 8102ba4:	af00      	add	r7, sp, #0
 8102ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	f003 0307 	and.w	r3, r3, #7
 8102bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8102be4 <__NVIC_SetPriorityGrouping+0x44>)
 8102bb2:	68db      	ldr	r3, [r3, #12]
 8102bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102bb6:	68ba      	ldr	r2, [r7, #8]
 8102bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102bbc:	4013      	ands	r3, r2
 8102bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102bc4:	68bb      	ldr	r3, [r7, #8]
 8102bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102bd2:	4a04      	ldr	r2, [pc, #16]	@ (8102be4 <__NVIC_SetPriorityGrouping+0x44>)
 8102bd4:	68bb      	ldr	r3, [r7, #8]
 8102bd6:	60d3      	str	r3, [r2, #12]
}
 8102bd8:	bf00      	nop
 8102bda:	3714      	adds	r7, #20
 8102bdc:	46bd      	mov	sp, r7
 8102bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be2:	4770      	bx	lr
 8102be4:	e000ed00 	.word	0xe000ed00

08102be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102be8:	b480      	push	{r7}
 8102bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102bec:	4b04      	ldr	r3, [pc, #16]	@ (8102c00 <__NVIC_GetPriorityGrouping+0x18>)
 8102bee:	68db      	ldr	r3, [r3, #12]
 8102bf0:	0a1b      	lsrs	r3, r3, #8
 8102bf2:	f003 0307 	and.w	r3, r3, #7
}
 8102bf6:	4618      	mov	r0, r3
 8102bf8:	46bd      	mov	sp, r7
 8102bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfe:	4770      	bx	lr
 8102c00:	e000ed00 	.word	0xe000ed00

08102c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102c04:	b480      	push	{r7}
 8102c06:	b083      	sub	sp, #12
 8102c08:	af00      	add	r7, sp, #0
 8102c0a:	4603      	mov	r3, r0
 8102c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c12:	2b00      	cmp	r3, #0
 8102c14:	db0b      	blt.n	8102c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102c16:	88fb      	ldrh	r3, [r7, #6]
 8102c18:	f003 021f 	and.w	r2, r3, #31
 8102c1c:	4907      	ldr	r1, [pc, #28]	@ (8102c3c <__NVIC_EnableIRQ+0x38>)
 8102c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c22:	095b      	lsrs	r3, r3, #5
 8102c24:	2001      	movs	r0, #1
 8102c26:	fa00 f202 	lsl.w	r2, r0, r2
 8102c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102c2e:	bf00      	nop
 8102c30:	370c      	adds	r7, #12
 8102c32:	46bd      	mov	sp, r7
 8102c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c38:	4770      	bx	lr
 8102c3a:	bf00      	nop
 8102c3c:	e000e100 	.word	0xe000e100

08102c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102c40:	b480      	push	{r7}
 8102c42:	b083      	sub	sp, #12
 8102c44:	af00      	add	r7, sp, #0
 8102c46:	4603      	mov	r3, r0
 8102c48:	6039      	str	r1, [r7, #0]
 8102c4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c50:	2b00      	cmp	r3, #0
 8102c52:	db0a      	blt.n	8102c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102c54:	683b      	ldr	r3, [r7, #0]
 8102c56:	b2da      	uxtb	r2, r3
 8102c58:	490c      	ldr	r1, [pc, #48]	@ (8102c8c <__NVIC_SetPriority+0x4c>)
 8102c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c5e:	0112      	lsls	r2, r2, #4
 8102c60:	b2d2      	uxtb	r2, r2
 8102c62:	440b      	add	r3, r1
 8102c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102c68:	e00a      	b.n	8102c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102c6a:	683b      	ldr	r3, [r7, #0]
 8102c6c:	b2da      	uxtb	r2, r3
 8102c6e:	4908      	ldr	r1, [pc, #32]	@ (8102c90 <__NVIC_SetPriority+0x50>)
 8102c70:	88fb      	ldrh	r3, [r7, #6]
 8102c72:	f003 030f 	and.w	r3, r3, #15
 8102c76:	3b04      	subs	r3, #4
 8102c78:	0112      	lsls	r2, r2, #4
 8102c7a:	b2d2      	uxtb	r2, r2
 8102c7c:	440b      	add	r3, r1
 8102c7e:	761a      	strb	r2, [r3, #24]
}
 8102c80:	bf00      	nop
 8102c82:	370c      	adds	r7, #12
 8102c84:	46bd      	mov	sp, r7
 8102c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c8a:	4770      	bx	lr
 8102c8c:	e000e100 	.word	0xe000e100
 8102c90:	e000ed00 	.word	0xe000ed00

08102c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102c94:	b480      	push	{r7}
 8102c96:	b089      	sub	sp, #36	@ 0x24
 8102c98:	af00      	add	r7, sp, #0
 8102c9a:	60f8      	str	r0, [r7, #12]
 8102c9c:	60b9      	str	r1, [r7, #8]
 8102c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102ca0:	68fb      	ldr	r3, [r7, #12]
 8102ca2:	f003 0307 	and.w	r3, r3, #7
 8102ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102ca8:	69fb      	ldr	r3, [r7, #28]
 8102caa:	f1c3 0307 	rsb	r3, r3, #7
 8102cae:	2b04      	cmp	r3, #4
 8102cb0:	bf28      	it	cs
 8102cb2:	2304      	movcs	r3, #4
 8102cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102cb6:	69fb      	ldr	r3, [r7, #28]
 8102cb8:	3304      	adds	r3, #4
 8102cba:	2b06      	cmp	r3, #6
 8102cbc:	d902      	bls.n	8102cc4 <NVIC_EncodePriority+0x30>
 8102cbe:	69fb      	ldr	r3, [r7, #28]
 8102cc0:	3b03      	subs	r3, #3
 8102cc2:	e000      	b.n	8102cc6 <NVIC_EncodePriority+0x32>
 8102cc4:	2300      	movs	r3, #0
 8102cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8102ccc:	69bb      	ldr	r3, [r7, #24]
 8102cce:	fa02 f303 	lsl.w	r3, r2, r3
 8102cd2:	43da      	mvns	r2, r3
 8102cd4:	68bb      	ldr	r3, [r7, #8]
 8102cd6:	401a      	ands	r2, r3
 8102cd8:	697b      	ldr	r3, [r7, #20]
 8102cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102cdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8102ce0:	697b      	ldr	r3, [r7, #20]
 8102ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8102ce6:	43d9      	mvns	r1, r3
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102cec:	4313      	orrs	r3, r2
         );
}
 8102cee:	4618      	mov	r0, r3
 8102cf0:	3724      	adds	r7, #36	@ 0x24
 8102cf2:	46bd      	mov	sp, r7
 8102cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cf8:	4770      	bx	lr
	...

08102cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102cfc:	b580      	push	{r7, lr}
 8102cfe:	b082      	sub	sp, #8
 8102d00:	af00      	add	r7, sp, #0
 8102d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	3b01      	subs	r3, #1
 8102d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102d0c:	d301      	bcc.n	8102d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102d0e:	2301      	movs	r3, #1
 8102d10:	e00f      	b.n	8102d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102d12:	4a0a      	ldr	r2, [pc, #40]	@ (8102d3c <SysTick_Config+0x40>)
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	3b01      	subs	r3, #1
 8102d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102d1a:	210f      	movs	r1, #15
 8102d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8102d20:	f7ff ff8e 	bl	8102c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102d24:	4b05      	ldr	r3, [pc, #20]	@ (8102d3c <SysTick_Config+0x40>)
 8102d26:	2200      	movs	r2, #0
 8102d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102d2a:	4b04      	ldr	r3, [pc, #16]	@ (8102d3c <SysTick_Config+0x40>)
 8102d2c:	2207      	movs	r2, #7
 8102d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102d30:	2300      	movs	r3, #0
}
 8102d32:	4618      	mov	r0, r3
 8102d34:	3708      	adds	r7, #8
 8102d36:	46bd      	mov	sp, r7
 8102d38:	bd80      	pop	{r7, pc}
 8102d3a:	bf00      	nop
 8102d3c:	e000e010 	.word	0xe000e010

08102d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102d40:	b580      	push	{r7, lr}
 8102d42:	b082      	sub	sp, #8
 8102d44:	af00      	add	r7, sp, #0
 8102d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102d48:	6878      	ldr	r0, [r7, #4]
 8102d4a:	f7ff ff29 	bl	8102ba0 <__NVIC_SetPriorityGrouping>
}
 8102d4e:	bf00      	nop
 8102d50:	3708      	adds	r7, #8
 8102d52:	46bd      	mov	sp, r7
 8102d54:	bd80      	pop	{r7, pc}

08102d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102d56:	b580      	push	{r7, lr}
 8102d58:	b086      	sub	sp, #24
 8102d5a:	af00      	add	r7, sp, #0
 8102d5c:	4603      	mov	r3, r0
 8102d5e:	60b9      	str	r1, [r7, #8]
 8102d60:	607a      	str	r2, [r7, #4]
 8102d62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102d64:	f7ff ff40 	bl	8102be8 <__NVIC_GetPriorityGrouping>
 8102d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102d6a:	687a      	ldr	r2, [r7, #4]
 8102d6c:	68b9      	ldr	r1, [r7, #8]
 8102d6e:	6978      	ldr	r0, [r7, #20]
 8102d70:	f7ff ff90 	bl	8102c94 <NVIC_EncodePriority>
 8102d74:	4602      	mov	r2, r0
 8102d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102d7a:	4611      	mov	r1, r2
 8102d7c:	4618      	mov	r0, r3
 8102d7e:	f7ff ff5f 	bl	8102c40 <__NVIC_SetPriority>
}
 8102d82:	bf00      	nop
 8102d84:	3718      	adds	r7, #24
 8102d86:	46bd      	mov	sp, r7
 8102d88:	bd80      	pop	{r7, pc}

08102d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102d8a:	b580      	push	{r7, lr}
 8102d8c:	b082      	sub	sp, #8
 8102d8e:	af00      	add	r7, sp, #0
 8102d90:	4603      	mov	r3, r0
 8102d92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d98:	4618      	mov	r0, r3
 8102d9a:	f7ff ff33 	bl	8102c04 <__NVIC_EnableIRQ>
}
 8102d9e:	bf00      	nop
 8102da0:	3708      	adds	r7, #8
 8102da2:	46bd      	mov	sp, r7
 8102da4:	bd80      	pop	{r7, pc}

08102da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102da6:	b580      	push	{r7, lr}
 8102da8:	b082      	sub	sp, #8
 8102daa:	af00      	add	r7, sp, #0
 8102dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102dae:	6878      	ldr	r0, [r7, #4]
 8102db0:	f7ff ffa4 	bl	8102cfc <SysTick_Config>
 8102db4:	4603      	mov	r3, r0
}
 8102db6:	4618      	mov	r0, r3
 8102db8:	3708      	adds	r7, #8
 8102dba:	46bd      	mov	sp, r7
 8102dbc:	bd80      	pop	{r7, pc}
	...

08102dc0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102dc0:	b480      	push	{r7}
 8102dc2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102dc4:	4b07      	ldr	r3, [pc, #28]	@ (8102de4 <HAL_GetCurrentCPUID+0x24>)
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	091b      	lsrs	r3, r3, #4
 8102dca:	f003 030f 	and.w	r3, r3, #15
 8102dce:	2b07      	cmp	r3, #7
 8102dd0:	d101      	bne.n	8102dd6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102dd2:	2303      	movs	r3, #3
 8102dd4:	e000      	b.n	8102dd8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102dd6:	2301      	movs	r3, #1
  }
}
 8102dd8:	4618      	mov	r0, r3
 8102dda:	46bd      	mov	sp, r7
 8102ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de0:	4770      	bx	lr
 8102de2:	bf00      	nop
 8102de4:	e000ed00 	.word	0xe000ed00

08102de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102de8:	b480      	push	{r7}
 8102dea:	b089      	sub	sp, #36	@ 0x24
 8102dec:	af00      	add	r7, sp, #0
 8102dee:	6078      	str	r0, [r7, #4]
 8102df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102df2:	2300      	movs	r3, #0
 8102df4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102df6:	4b89      	ldr	r3, [pc, #548]	@ (810301c <HAL_GPIO_Init+0x234>)
 8102df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102dfa:	e194      	b.n	8103126 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102dfc:	683b      	ldr	r3, [r7, #0]
 8102dfe:	681a      	ldr	r2, [r3, #0]
 8102e00:	2101      	movs	r1, #1
 8102e02:	69fb      	ldr	r3, [r7, #28]
 8102e04:	fa01 f303 	lsl.w	r3, r1, r3
 8102e08:	4013      	ands	r3, r2
 8102e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102e0c:	693b      	ldr	r3, [r7, #16]
 8102e0e:	2b00      	cmp	r3, #0
 8102e10:	f000 8186 	beq.w	8103120 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102e14:	683b      	ldr	r3, [r7, #0]
 8102e16:	685b      	ldr	r3, [r3, #4]
 8102e18:	f003 0303 	and.w	r3, r3, #3
 8102e1c:	2b01      	cmp	r3, #1
 8102e1e:	d005      	beq.n	8102e2c <HAL_GPIO_Init+0x44>
 8102e20:	683b      	ldr	r3, [r7, #0]
 8102e22:	685b      	ldr	r3, [r3, #4]
 8102e24:	f003 0303 	and.w	r3, r3, #3
 8102e28:	2b02      	cmp	r3, #2
 8102e2a:	d130      	bne.n	8102e8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	689b      	ldr	r3, [r3, #8]
 8102e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102e32:	69fb      	ldr	r3, [r7, #28]
 8102e34:	005b      	lsls	r3, r3, #1
 8102e36:	2203      	movs	r2, #3
 8102e38:	fa02 f303 	lsl.w	r3, r2, r3
 8102e3c:	43db      	mvns	r3, r3
 8102e3e:	69ba      	ldr	r2, [r7, #24]
 8102e40:	4013      	ands	r3, r2
 8102e42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102e44:	683b      	ldr	r3, [r7, #0]
 8102e46:	68da      	ldr	r2, [r3, #12]
 8102e48:	69fb      	ldr	r3, [r7, #28]
 8102e4a:	005b      	lsls	r3, r3, #1
 8102e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8102e50:	69ba      	ldr	r2, [r7, #24]
 8102e52:	4313      	orrs	r3, r2
 8102e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	69ba      	ldr	r2, [r7, #24]
 8102e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	685b      	ldr	r3, [r3, #4]
 8102e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102e62:	2201      	movs	r2, #1
 8102e64:	69fb      	ldr	r3, [r7, #28]
 8102e66:	fa02 f303 	lsl.w	r3, r2, r3
 8102e6a:	43db      	mvns	r3, r3
 8102e6c:	69ba      	ldr	r2, [r7, #24]
 8102e6e:	4013      	ands	r3, r2
 8102e70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102e72:	683b      	ldr	r3, [r7, #0]
 8102e74:	685b      	ldr	r3, [r3, #4]
 8102e76:	091b      	lsrs	r3, r3, #4
 8102e78:	f003 0201 	and.w	r2, r3, #1
 8102e7c:	69fb      	ldr	r3, [r7, #28]
 8102e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e82:	69ba      	ldr	r2, [r7, #24]
 8102e84:	4313      	orrs	r3, r2
 8102e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	69ba      	ldr	r2, [r7, #24]
 8102e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102e8e:	683b      	ldr	r3, [r7, #0]
 8102e90:	685b      	ldr	r3, [r3, #4]
 8102e92:	f003 0303 	and.w	r3, r3, #3
 8102e96:	2b03      	cmp	r3, #3
 8102e98:	d017      	beq.n	8102eca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	68db      	ldr	r3, [r3, #12]
 8102e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102ea0:	69fb      	ldr	r3, [r7, #28]
 8102ea2:	005b      	lsls	r3, r3, #1
 8102ea4:	2203      	movs	r2, #3
 8102ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8102eaa:	43db      	mvns	r3, r3
 8102eac:	69ba      	ldr	r2, [r7, #24]
 8102eae:	4013      	ands	r3, r2
 8102eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102eb2:	683b      	ldr	r3, [r7, #0]
 8102eb4:	689a      	ldr	r2, [r3, #8]
 8102eb6:	69fb      	ldr	r3, [r7, #28]
 8102eb8:	005b      	lsls	r3, r3, #1
 8102eba:	fa02 f303 	lsl.w	r3, r2, r3
 8102ebe:	69ba      	ldr	r2, [r7, #24]
 8102ec0:	4313      	orrs	r3, r2
 8102ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	69ba      	ldr	r2, [r7, #24]
 8102ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102eca:	683b      	ldr	r3, [r7, #0]
 8102ecc:	685b      	ldr	r3, [r3, #4]
 8102ece:	f003 0303 	and.w	r3, r3, #3
 8102ed2:	2b02      	cmp	r3, #2
 8102ed4:	d123      	bne.n	8102f1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102ed6:	69fb      	ldr	r3, [r7, #28]
 8102ed8:	08da      	lsrs	r2, r3, #3
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	3208      	adds	r2, #8
 8102ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102ee4:	69fb      	ldr	r3, [r7, #28]
 8102ee6:	f003 0307 	and.w	r3, r3, #7
 8102eea:	009b      	lsls	r3, r3, #2
 8102eec:	220f      	movs	r2, #15
 8102eee:	fa02 f303 	lsl.w	r3, r2, r3
 8102ef2:	43db      	mvns	r3, r3
 8102ef4:	69ba      	ldr	r2, [r7, #24]
 8102ef6:	4013      	ands	r3, r2
 8102ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102efa:	683b      	ldr	r3, [r7, #0]
 8102efc:	691a      	ldr	r2, [r3, #16]
 8102efe:	69fb      	ldr	r3, [r7, #28]
 8102f00:	f003 0307 	and.w	r3, r3, #7
 8102f04:	009b      	lsls	r3, r3, #2
 8102f06:	fa02 f303 	lsl.w	r3, r2, r3
 8102f0a:	69ba      	ldr	r2, [r7, #24]
 8102f0c:	4313      	orrs	r3, r2
 8102f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102f10:	69fb      	ldr	r3, [r7, #28]
 8102f12:	08da      	lsrs	r2, r3, #3
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	3208      	adds	r2, #8
 8102f18:	69b9      	ldr	r1, [r7, #24]
 8102f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102f24:	69fb      	ldr	r3, [r7, #28]
 8102f26:	005b      	lsls	r3, r3, #1
 8102f28:	2203      	movs	r2, #3
 8102f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8102f2e:	43db      	mvns	r3, r3
 8102f30:	69ba      	ldr	r2, [r7, #24]
 8102f32:	4013      	ands	r3, r2
 8102f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102f36:	683b      	ldr	r3, [r7, #0]
 8102f38:	685b      	ldr	r3, [r3, #4]
 8102f3a:	f003 0203 	and.w	r2, r3, #3
 8102f3e:	69fb      	ldr	r3, [r7, #28]
 8102f40:	005b      	lsls	r3, r3, #1
 8102f42:	fa02 f303 	lsl.w	r3, r2, r3
 8102f46:	69ba      	ldr	r2, [r7, #24]
 8102f48:	4313      	orrs	r3, r2
 8102f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	69ba      	ldr	r2, [r7, #24]
 8102f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102f52:	683b      	ldr	r3, [r7, #0]
 8102f54:	685b      	ldr	r3, [r3, #4]
 8102f56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102f5a:	2b00      	cmp	r3, #0
 8102f5c:	f000 80e0 	beq.w	8103120 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102f60:	4b2f      	ldr	r3, [pc, #188]	@ (8103020 <HAL_GPIO_Init+0x238>)
 8102f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102f66:	4a2e      	ldr	r2, [pc, #184]	@ (8103020 <HAL_GPIO_Init+0x238>)
 8102f68:	f043 0302 	orr.w	r3, r3, #2
 8102f6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102f70:	4b2b      	ldr	r3, [pc, #172]	@ (8103020 <HAL_GPIO_Init+0x238>)
 8102f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102f76:	f003 0302 	and.w	r3, r3, #2
 8102f7a:	60fb      	str	r3, [r7, #12]
 8102f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102f7e:	4a29      	ldr	r2, [pc, #164]	@ (8103024 <HAL_GPIO_Init+0x23c>)
 8102f80:	69fb      	ldr	r3, [r7, #28]
 8102f82:	089b      	lsrs	r3, r3, #2
 8102f84:	3302      	adds	r3, #2
 8102f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102f8c:	69fb      	ldr	r3, [r7, #28]
 8102f8e:	f003 0303 	and.w	r3, r3, #3
 8102f92:	009b      	lsls	r3, r3, #2
 8102f94:	220f      	movs	r2, #15
 8102f96:	fa02 f303 	lsl.w	r3, r2, r3
 8102f9a:	43db      	mvns	r3, r3
 8102f9c:	69ba      	ldr	r2, [r7, #24]
 8102f9e:	4013      	ands	r3, r2
 8102fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	4a20      	ldr	r2, [pc, #128]	@ (8103028 <HAL_GPIO_Init+0x240>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d052      	beq.n	8103050 <HAL_GPIO_Init+0x268>
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	4a1f      	ldr	r2, [pc, #124]	@ (810302c <HAL_GPIO_Init+0x244>)
 8102fae:	4293      	cmp	r3, r2
 8102fb0:	d031      	beq.n	8103016 <HAL_GPIO_Init+0x22e>
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8103030 <HAL_GPIO_Init+0x248>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d02b      	beq.n	8103012 <HAL_GPIO_Init+0x22a>
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8103034 <HAL_GPIO_Init+0x24c>)
 8102fbe:	4293      	cmp	r3, r2
 8102fc0:	d025      	beq.n	810300e <HAL_GPIO_Init+0x226>
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8103038 <HAL_GPIO_Init+0x250>)
 8102fc6:	4293      	cmp	r3, r2
 8102fc8:	d01f      	beq.n	810300a <HAL_GPIO_Init+0x222>
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	4a1b      	ldr	r2, [pc, #108]	@ (810303c <HAL_GPIO_Init+0x254>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d019      	beq.n	8103006 <HAL_GPIO_Init+0x21e>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8103040 <HAL_GPIO_Init+0x258>)
 8102fd6:	4293      	cmp	r3, r2
 8102fd8:	d013      	beq.n	8103002 <HAL_GPIO_Init+0x21a>
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	4a19      	ldr	r2, [pc, #100]	@ (8103044 <HAL_GPIO_Init+0x25c>)
 8102fde:	4293      	cmp	r3, r2
 8102fe0:	d00d      	beq.n	8102ffe <HAL_GPIO_Init+0x216>
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	4a18      	ldr	r2, [pc, #96]	@ (8103048 <HAL_GPIO_Init+0x260>)
 8102fe6:	4293      	cmp	r3, r2
 8102fe8:	d007      	beq.n	8102ffa <HAL_GPIO_Init+0x212>
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	4a17      	ldr	r2, [pc, #92]	@ (810304c <HAL_GPIO_Init+0x264>)
 8102fee:	4293      	cmp	r3, r2
 8102ff0:	d101      	bne.n	8102ff6 <HAL_GPIO_Init+0x20e>
 8102ff2:	2309      	movs	r3, #9
 8102ff4:	e02d      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8102ff6:	230a      	movs	r3, #10
 8102ff8:	e02b      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8102ffa:	2308      	movs	r3, #8
 8102ffc:	e029      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8102ffe:	2307      	movs	r3, #7
 8103000:	e027      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8103002:	2306      	movs	r3, #6
 8103004:	e025      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8103006:	2305      	movs	r3, #5
 8103008:	e023      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 810300a:	2304      	movs	r3, #4
 810300c:	e021      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 810300e:	2303      	movs	r3, #3
 8103010:	e01f      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8103012:	2302      	movs	r3, #2
 8103014:	e01d      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 8103016:	2301      	movs	r3, #1
 8103018:	e01b      	b.n	8103052 <HAL_GPIO_Init+0x26a>
 810301a:	bf00      	nop
 810301c:	580000c0 	.word	0x580000c0
 8103020:	58024400 	.word	0x58024400
 8103024:	58000400 	.word	0x58000400
 8103028:	58020000 	.word	0x58020000
 810302c:	58020400 	.word	0x58020400
 8103030:	58020800 	.word	0x58020800
 8103034:	58020c00 	.word	0x58020c00
 8103038:	58021000 	.word	0x58021000
 810303c:	58021400 	.word	0x58021400
 8103040:	58021800 	.word	0x58021800
 8103044:	58021c00 	.word	0x58021c00
 8103048:	58022000 	.word	0x58022000
 810304c:	58022400 	.word	0x58022400
 8103050:	2300      	movs	r3, #0
 8103052:	69fa      	ldr	r2, [r7, #28]
 8103054:	f002 0203 	and.w	r2, r2, #3
 8103058:	0092      	lsls	r2, r2, #2
 810305a:	4093      	lsls	r3, r2
 810305c:	69ba      	ldr	r2, [r7, #24]
 810305e:	4313      	orrs	r3, r2
 8103060:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103062:	4938      	ldr	r1, [pc, #224]	@ (8103144 <HAL_GPIO_Init+0x35c>)
 8103064:	69fb      	ldr	r3, [r7, #28]
 8103066:	089b      	lsrs	r3, r3, #2
 8103068:	3302      	adds	r3, #2
 810306a:	69ba      	ldr	r2, [r7, #24]
 810306c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103078:	693b      	ldr	r3, [r7, #16]
 810307a:	43db      	mvns	r3, r3
 810307c:	69ba      	ldr	r2, [r7, #24]
 810307e:	4013      	ands	r3, r2
 8103080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103082:	683b      	ldr	r3, [r7, #0]
 8103084:	685b      	ldr	r3, [r3, #4]
 8103086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810308a:	2b00      	cmp	r3, #0
 810308c:	d003      	beq.n	8103096 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810308e:	69ba      	ldr	r2, [r7, #24]
 8103090:	693b      	ldr	r3, [r7, #16]
 8103092:	4313      	orrs	r3, r2
 8103094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810309a:	69bb      	ldr	r3, [r7, #24]
 810309c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810309e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81030a2:	685b      	ldr	r3, [r3, #4]
 81030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81030a6:	693b      	ldr	r3, [r7, #16]
 81030a8:	43db      	mvns	r3, r3
 81030aa:	69ba      	ldr	r2, [r7, #24]
 81030ac:	4013      	ands	r3, r2
 81030ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81030b0:	683b      	ldr	r3, [r7, #0]
 81030b2:	685b      	ldr	r3, [r3, #4]
 81030b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81030b8:	2b00      	cmp	r3, #0
 81030ba:	d003      	beq.n	81030c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81030bc:	69ba      	ldr	r2, [r7, #24]
 81030be:	693b      	ldr	r3, [r7, #16]
 81030c0:	4313      	orrs	r3, r2
 81030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81030c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81030c8:	69bb      	ldr	r3, [r7, #24]
 81030ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81030cc:	697b      	ldr	r3, [r7, #20]
 81030ce:	685b      	ldr	r3, [r3, #4]
 81030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81030d2:	693b      	ldr	r3, [r7, #16]
 81030d4:	43db      	mvns	r3, r3
 81030d6:	69ba      	ldr	r2, [r7, #24]
 81030d8:	4013      	ands	r3, r2
 81030da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81030dc:	683b      	ldr	r3, [r7, #0]
 81030de:	685b      	ldr	r3, [r3, #4]
 81030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81030e4:	2b00      	cmp	r3, #0
 81030e6:	d003      	beq.n	81030f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81030e8:	69ba      	ldr	r2, [r7, #24]
 81030ea:	693b      	ldr	r3, [r7, #16]
 81030ec:	4313      	orrs	r3, r2
 81030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81030f0:	697b      	ldr	r3, [r7, #20]
 81030f2:	69ba      	ldr	r2, [r7, #24]
 81030f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81030f6:	697b      	ldr	r3, [r7, #20]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81030fc:	693b      	ldr	r3, [r7, #16]
 81030fe:	43db      	mvns	r3, r3
 8103100:	69ba      	ldr	r2, [r7, #24]
 8103102:	4013      	ands	r3, r2
 8103104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103106:	683b      	ldr	r3, [r7, #0]
 8103108:	685b      	ldr	r3, [r3, #4]
 810310a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810310e:	2b00      	cmp	r3, #0
 8103110:	d003      	beq.n	810311a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103112:	69ba      	ldr	r2, [r7, #24]
 8103114:	693b      	ldr	r3, [r7, #16]
 8103116:	4313      	orrs	r3, r2
 8103118:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810311a:	697b      	ldr	r3, [r7, #20]
 810311c:	69ba      	ldr	r2, [r7, #24]
 810311e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103120:	69fb      	ldr	r3, [r7, #28]
 8103122:	3301      	adds	r3, #1
 8103124:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103126:	683b      	ldr	r3, [r7, #0]
 8103128:	681a      	ldr	r2, [r3, #0]
 810312a:	69fb      	ldr	r3, [r7, #28]
 810312c:	fa22 f303 	lsr.w	r3, r2, r3
 8103130:	2b00      	cmp	r3, #0
 8103132:	f47f ae63 	bne.w	8102dfc <HAL_GPIO_Init+0x14>
  }
}
 8103136:	bf00      	nop
 8103138:	bf00      	nop
 810313a:	3724      	adds	r7, #36	@ 0x24
 810313c:	46bd      	mov	sp, r7
 810313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103142:	4770      	bx	lr
 8103144:	58000400 	.word	0x58000400

08103148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103148:	b480      	push	{r7}
 810314a:	b085      	sub	sp, #20
 810314c:	af00      	add	r7, sp, #0
 810314e:	6078      	str	r0, [r7, #4]
 8103150:	460b      	mov	r3, r1
 8103152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	691a      	ldr	r2, [r3, #16]
 8103158:	887b      	ldrh	r3, [r7, #2]
 810315a:	4013      	ands	r3, r2
 810315c:	2b00      	cmp	r3, #0
 810315e:	d002      	beq.n	8103166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8103160:	2301      	movs	r3, #1
 8103162:	73fb      	strb	r3, [r7, #15]
 8103164:	e001      	b.n	810316a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8103166:	2300      	movs	r3, #0
 8103168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 810316a:	7bfb      	ldrb	r3, [r7, #15]
}
 810316c:	4618      	mov	r0, r3
 810316e:	3714      	adds	r7, #20
 8103170:	46bd      	mov	sp, r7
 8103172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103176:	4770      	bx	lr

08103178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103178:	b480      	push	{r7}
 810317a:	b083      	sub	sp, #12
 810317c:	af00      	add	r7, sp, #0
 810317e:	6078      	str	r0, [r7, #4]
 8103180:	460b      	mov	r3, r1
 8103182:	807b      	strh	r3, [r7, #2]
 8103184:	4613      	mov	r3, r2
 8103186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103188:	787b      	ldrb	r3, [r7, #1]
 810318a:	2b00      	cmp	r3, #0
 810318c:	d003      	beq.n	8103196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810318e:	887a      	ldrh	r2, [r7, #2]
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103194:	e003      	b.n	810319e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103196:	887b      	ldrh	r3, [r7, #2]
 8103198:	041a      	lsls	r2, r3, #16
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	619a      	str	r2, [r3, #24]
}
 810319e:	bf00      	nop
 81031a0:	370c      	adds	r7, #12
 81031a2:	46bd      	mov	sp, r7
 81031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a8:	4770      	bx	lr
	...

081031ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81031ac:	b480      	push	{r7}
 81031ae:	b083      	sub	sp, #12
 81031b0:	af00      	add	r7, sp, #0
 81031b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81031b4:	4a08      	ldr	r2, [pc, #32]	@ (81031d8 <HAL_HSEM_FastTake+0x2c>)
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	3320      	adds	r3, #32
 81031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81031be:	4a07      	ldr	r2, [pc, #28]	@ (81031dc <HAL_HSEM_FastTake+0x30>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d101      	bne.n	81031c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81031c4:	2300      	movs	r3, #0
 81031c6:	e000      	b.n	81031ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81031c8:	2301      	movs	r3, #1
}
 81031ca:	4618      	mov	r0, r3
 81031cc:	370c      	adds	r7, #12
 81031ce:	46bd      	mov	sp, r7
 81031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031d4:	4770      	bx	lr
 81031d6:	bf00      	nop
 81031d8:	58026400 	.word	0x58026400
 81031dc:	80000100 	.word	0x80000100

081031e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81031e0:	b480      	push	{r7}
 81031e2:	b083      	sub	sp, #12
 81031e4:	af00      	add	r7, sp, #0
 81031e6:	6078      	str	r0, [r7, #4]
 81031e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81031ea:	4906      	ldr	r1, [pc, #24]	@ (8103204 <HAL_HSEM_Release+0x24>)
 81031ec:	683b      	ldr	r3, [r7, #0]
 81031ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81031f8:	bf00      	nop
 81031fa:	370c      	adds	r7, #12
 81031fc:	46bd      	mov	sp, r7
 81031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103202:	4770      	bx	lr
 8103204:	58026400 	.word	0x58026400

08103208 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103208:	b480      	push	{r7}
 810320a:	b083      	sub	sp, #12
 810320c:	af00      	add	r7, sp, #0
 810320e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103210:	4b05      	ldr	r3, [pc, #20]	@ (8103228 <HAL_HSEM_ActivateNotification+0x20>)
 8103212:	681a      	ldr	r2, [r3, #0]
 8103214:	4904      	ldr	r1, [pc, #16]	@ (8103228 <HAL_HSEM_ActivateNotification+0x20>)
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	4313      	orrs	r3, r2
 810321a:	600b      	str	r3, [r1, #0]
#endif
}
 810321c:	bf00      	nop
 810321e:	370c      	adds	r7, #12
 8103220:	46bd      	mov	sp, r7
 8103222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103226:	4770      	bx	lr
 8103228:	58026510 	.word	0x58026510

0810322c <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
 810322c:	b480      	push	{r7}
 810322e:	b083      	sub	sp, #12
 8103230:	af00      	add	r7, sp, #0
 8103232:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
 8103234:	4b06      	ldr	r3, [pc, #24]	@ (8103250 <HAL_HSEM_DeactivateNotification+0x24>)
 8103236:	681a      	ldr	r2, [r3, #0]
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	43db      	mvns	r3, r3
 810323c:	4904      	ldr	r1, [pc, #16]	@ (8103250 <HAL_HSEM_DeactivateNotification+0x24>)
 810323e:	4013      	ands	r3, r2
 8103240:	600b      	str	r3, [r1, #0]
#endif
}
 8103242:	bf00      	nop
 8103244:	370c      	adds	r7, #12
 8103246:	46bd      	mov	sp, r7
 8103248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810324c:	4770      	bx	lr
 810324e:	bf00      	nop
 8103250:	58026510 	.word	0x58026510

08103254 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8103254:	b580      	push	{r7, lr}
 8103256:	b082      	sub	sp, #8
 8103258:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810325a:	4b0a      	ldr	r3, [pc, #40]	@ (8103284 <HAL_HSEM_IRQHandler+0x30>)
 810325c:	68db      	ldr	r3, [r3, #12]
 810325e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8103260:	4b08      	ldr	r3, [pc, #32]	@ (8103284 <HAL_HSEM_IRQHandler+0x30>)
 8103262:	681a      	ldr	r2, [r3, #0]
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	43db      	mvns	r3, r3
 8103268:	4906      	ldr	r1, [pc, #24]	@ (8103284 <HAL_HSEM_IRQHandler+0x30>)
 810326a:	4013      	ands	r3, r2
 810326c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810326e:	4a05      	ldr	r2, [pc, #20]	@ (8103284 <HAL_HSEM_IRQHandler+0x30>)
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8103274:	6878      	ldr	r0, [r7, #4]
 8103276:	f000 f807 	bl	8103288 <HAL_HSEM_FreeCallback>
}
 810327a:	bf00      	nop
 810327c:	3708      	adds	r7, #8
 810327e:	46bd      	mov	sp, r7
 8103280:	bd80      	pop	{r7, pc}
 8103282:	bf00      	nop
 8103284:	58026510 	.word	0x58026510

08103288 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8103288:	b480      	push	{r7}
 810328a:	b083      	sub	sp, #12
 810328c:	af00      	add	r7, sp, #0
 810328e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8103290:	bf00      	nop
 8103292:	370c      	adds	r7, #12
 8103294:	46bd      	mov	sp, r7
 8103296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329a:	4770      	bx	lr

0810329c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810329c:	b580      	push	{r7, lr}
 810329e:	b084      	sub	sp, #16
 81032a0:	af00      	add	r7, sp, #0
 81032a2:	60f8      	str	r0, [r7, #12]
 81032a4:	460b      	mov	r3, r1
 81032a6:	607a      	str	r2, [r7, #4]
 81032a8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81032aa:	4b37      	ldr	r3, [pc, #220]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	f023 0201 	bic.w	r2, r3, #1
 81032b2:	4935      	ldr	r1, [pc, #212]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032b4:	68fb      	ldr	r3, [r7, #12]
 81032b6:	4313      	orrs	r3, r2
 81032b8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d123      	bne.n	8103308 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81032c0:	f7ff fd7e 	bl	8102dc0 <HAL_GetCurrentCPUID>
 81032c4:	4603      	mov	r3, r0
 81032c6:	2b03      	cmp	r3, #3
 81032c8:	d158      	bne.n	810337c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81032ca:	4b2f      	ldr	r3, [pc, #188]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032cc:	691b      	ldr	r3, [r3, #16]
 81032ce:	4a2e      	ldr	r2, [pc, #184]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032d0:	f023 0301 	bic.w	r3, r3, #1
 81032d4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032d6:	4b2d      	ldr	r3, [pc, #180]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032d8:	691b      	ldr	r3, [r3, #16]
 81032da:	4a2c      	ldr	r2, [pc, #176]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032dc:	f043 0304 	orr.w	r3, r3, #4
 81032e0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81032e2:	f3bf 8f4f 	dsb	sy
}
 81032e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81032e8:	f3bf 8f6f 	isb	sy
}
 81032ec:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81032ee:	7afb      	ldrb	r3, [r7, #11]
 81032f0:	2b01      	cmp	r3, #1
 81032f2:	d101      	bne.n	81032f8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81032f4:	bf30      	wfi
 81032f6:	e000      	b.n	81032fa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81032f8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032fa:	4b24      	ldr	r3, [pc, #144]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032fc:	691b      	ldr	r3, [r3, #16]
 81032fe:	4a23      	ldr	r2, [pc, #140]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103300:	f023 0304 	bic.w	r3, r3, #4
 8103304:	6113      	str	r3, [r2, #16]
 8103306:	e03c      	b.n	8103382 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	2b01      	cmp	r3, #1
 810330c:	d123      	bne.n	8103356 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810330e:	f7ff fd57 	bl	8102dc0 <HAL_GetCurrentCPUID>
 8103312:	4603      	mov	r3, r0
 8103314:	2b01      	cmp	r3, #1
 8103316:	d133      	bne.n	8103380 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103318:	4b1b      	ldr	r3, [pc, #108]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 810331a:	695b      	ldr	r3, [r3, #20]
 810331c:	4a1a      	ldr	r2, [pc, #104]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 810331e:	f023 0302 	bic.w	r3, r3, #2
 8103322:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103324:	4b19      	ldr	r3, [pc, #100]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103326:	691b      	ldr	r3, [r3, #16]
 8103328:	4a18      	ldr	r2, [pc, #96]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810332a:	f043 0304 	orr.w	r3, r3, #4
 810332e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103330:	f3bf 8f4f 	dsb	sy
}
 8103334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103336:	f3bf 8f6f 	isb	sy
}
 810333a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810333c:	7afb      	ldrb	r3, [r7, #11]
 810333e:	2b01      	cmp	r3, #1
 8103340:	d101      	bne.n	8103346 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103342:	bf30      	wfi
 8103344:	e000      	b.n	8103348 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103346:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103348:	4b10      	ldr	r3, [pc, #64]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810334a:	691b      	ldr	r3, [r3, #16]
 810334c:	4a0f      	ldr	r2, [pc, #60]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810334e:	f023 0304 	bic.w	r3, r3, #4
 8103352:	6113      	str	r3, [r2, #16]
 8103354:	e015      	b.n	8103382 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103356:	f7ff fd33 	bl	8102dc0 <HAL_GetCurrentCPUID>
 810335a:	4603      	mov	r3, r0
 810335c:	2b03      	cmp	r3, #3
 810335e:	d106      	bne.n	810336e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103360:	4b09      	ldr	r3, [pc, #36]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103362:	691b      	ldr	r3, [r3, #16]
 8103364:	4a08      	ldr	r2, [pc, #32]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103366:	f023 0304 	bic.w	r3, r3, #4
 810336a:	6113      	str	r3, [r2, #16]
 810336c:	e009      	b.n	8103382 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810336e:	4b06      	ldr	r3, [pc, #24]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103370:	695b      	ldr	r3, [r3, #20]
 8103372:	4a05      	ldr	r2, [pc, #20]	@ (8103388 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103374:	f023 0304 	bic.w	r3, r3, #4
 8103378:	6153      	str	r3, [r2, #20]
 810337a:	e002      	b.n	8103382 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810337c:	bf00      	nop
 810337e:	e000      	b.n	8103382 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103380:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103382:	3710      	adds	r7, #16
 8103384:	46bd      	mov	sp, r7
 8103386:	bd80      	pop	{r7, pc}
 8103388:	58024800 	.word	0x58024800
 810338c:	e000ed00 	.word	0xe000ed00

08103390 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103390:	b580      	push	{r7, lr}
 8103392:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103394:	f7ff fd14 	bl	8102dc0 <HAL_GetCurrentCPUID>
 8103398:	4603      	mov	r3, r0
 810339a:	2b03      	cmp	r3, #3
 810339c:	d101      	bne.n	81033a2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810339e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81033a0:	e001      	b.n	81033a6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81033a2:	bf40      	sev
    __WFE ();
 81033a4:	bf20      	wfe
}
 81033a6:	bf00      	nop
 81033a8:	bd80      	pop	{r7, pc}
	...

081033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81033ac:	b480      	push	{r7}
 81033ae:	b089      	sub	sp, #36	@ 0x24
 81033b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81033b2:	4bb3      	ldr	r3, [pc, #716]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033b4:	691b      	ldr	r3, [r3, #16]
 81033b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81033ba:	2b18      	cmp	r3, #24
 81033bc:	f200 8155 	bhi.w	810366a <HAL_RCC_GetSysClockFreq+0x2be>
 81033c0:	a201      	add	r2, pc, #4	@ (adr r2, 81033c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033c6:	bf00      	nop
 81033c8:	0810342d 	.word	0x0810342d
 81033cc:	0810366b 	.word	0x0810366b
 81033d0:	0810366b 	.word	0x0810366b
 81033d4:	0810366b 	.word	0x0810366b
 81033d8:	0810366b 	.word	0x0810366b
 81033dc:	0810366b 	.word	0x0810366b
 81033e0:	0810366b 	.word	0x0810366b
 81033e4:	0810366b 	.word	0x0810366b
 81033e8:	08103453 	.word	0x08103453
 81033ec:	0810366b 	.word	0x0810366b
 81033f0:	0810366b 	.word	0x0810366b
 81033f4:	0810366b 	.word	0x0810366b
 81033f8:	0810366b 	.word	0x0810366b
 81033fc:	0810366b 	.word	0x0810366b
 8103400:	0810366b 	.word	0x0810366b
 8103404:	0810366b 	.word	0x0810366b
 8103408:	08103459 	.word	0x08103459
 810340c:	0810366b 	.word	0x0810366b
 8103410:	0810366b 	.word	0x0810366b
 8103414:	0810366b 	.word	0x0810366b
 8103418:	0810366b 	.word	0x0810366b
 810341c:	0810366b 	.word	0x0810366b
 8103420:	0810366b 	.word	0x0810366b
 8103424:	0810366b 	.word	0x0810366b
 8103428:	0810345f 	.word	0x0810345f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810342c:	4b94      	ldr	r3, [pc, #592]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	f003 0320 	and.w	r3, r3, #32
 8103434:	2b00      	cmp	r3, #0
 8103436:	d009      	beq.n	810344c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103438:	4b91      	ldr	r3, [pc, #580]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	08db      	lsrs	r3, r3, #3
 810343e:	f003 0303 	and.w	r3, r3, #3
 8103442:	4a90      	ldr	r2, [pc, #576]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103444:	fa22 f303 	lsr.w	r3, r2, r3
 8103448:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810344a:	e111      	b.n	8103670 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810344c:	4b8d      	ldr	r3, [pc, #564]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810344e:	61bb      	str	r3, [r7, #24]
      break;
 8103450:	e10e      	b.n	8103670 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103452:	4b8d      	ldr	r3, [pc, #564]	@ (8103688 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103454:	61bb      	str	r3, [r7, #24]
      break;
 8103456:	e10b      	b.n	8103670 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103458:	4b8c      	ldr	r3, [pc, #560]	@ (810368c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810345a:	61bb      	str	r3, [r7, #24]
      break;
 810345c:	e108      	b.n	8103670 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810345e:	4b88      	ldr	r3, [pc, #544]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103462:	f003 0303 	and.w	r3, r3, #3
 8103466:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103468:	4b85      	ldr	r3, [pc, #532]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810346c:	091b      	lsrs	r3, r3, #4
 810346e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103472:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103474:	4b82      	ldr	r3, [pc, #520]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103478:	f003 0301 	and.w	r3, r3, #1
 810347c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810347e:	4b80      	ldr	r3, [pc, #512]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103482:	08db      	lsrs	r3, r3, #3
 8103484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103488:	68fa      	ldr	r2, [r7, #12]
 810348a:	fb02 f303 	mul.w	r3, r2, r3
 810348e:	ee07 3a90 	vmov	s15, r3
 8103492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103496:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810349a:	693b      	ldr	r3, [r7, #16]
 810349c:	2b00      	cmp	r3, #0
 810349e:	f000 80e1 	beq.w	8103664 <HAL_RCC_GetSysClockFreq+0x2b8>
 81034a2:	697b      	ldr	r3, [r7, #20]
 81034a4:	2b02      	cmp	r3, #2
 81034a6:	f000 8083 	beq.w	81035b0 <HAL_RCC_GetSysClockFreq+0x204>
 81034aa:	697b      	ldr	r3, [r7, #20]
 81034ac:	2b02      	cmp	r3, #2
 81034ae:	f200 80a1 	bhi.w	81035f4 <HAL_RCC_GetSysClockFreq+0x248>
 81034b2:	697b      	ldr	r3, [r7, #20]
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	d003      	beq.n	81034c0 <HAL_RCC_GetSysClockFreq+0x114>
 81034b8:	697b      	ldr	r3, [r7, #20]
 81034ba:	2b01      	cmp	r3, #1
 81034bc:	d056      	beq.n	810356c <HAL_RCC_GetSysClockFreq+0x1c0>
 81034be:	e099      	b.n	81035f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81034c0:	4b6f      	ldr	r3, [pc, #444]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034c2:	681b      	ldr	r3, [r3, #0]
 81034c4:	f003 0320 	and.w	r3, r3, #32
 81034c8:	2b00      	cmp	r3, #0
 81034ca:	d02d      	beq.n	8103528 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81034cc:	4b6c      	ldr	r3, [pc, #432]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	08db      	lsrs	r3, r3, #3
 81034d2:	f003 0303 	and.w	r3, r3, #3
 81034d6:	4a6b      	ldr	r2, [pc, #428]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81034d8:	fa22 f303 	lsr.w	r3, r2, r3
 81034dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	ee07 3a90 	vmov	s15, r3
 81034e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034e8:	693b      	ldr	r3, [r7, #16]
 81034ea:	ee07 3a90 	vmov	s15, r3
 81034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034f6:	4b62      	ldr	r3, [pc, #392]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034fe:	ee07 3a90 	vmov	s15, r3
 8103502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103506:	ed97 6a02 	vldr	s12, [r7, #8]
 810350a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103690 <HAL_RCC_GetSysClockFreq+0x2e4>
 810350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103522:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103526:	e087      	b.n	8103638 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103528:	693b      	ldr	r3, [r7, #16]
 810352a:	ee07 3a90 	vmov	s15, r3
 810352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103532:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103694 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810353a:	4b51      	ldr	r3, [pc, #324]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103542:	ee07 3a90 	vmov	s15, r3
 8103546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810354a:	ed97 6a02 	vldr	s12, [r7, #8]
 810354e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103690 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810355a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810356a:	e065      	b.n	8103638 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810356c:	693b      	ldr	r3, [r7, #16]
 810356e:	ee07 3a90 	vmov	s15, r3
 8103572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103576:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103698 <HAL_RCC_GetSysClockFreq+0x2ec>
 810357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810357e:	4b40      	ldr	r3, [pc, #256]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103586:	ee07 3a90 	vmov	s15, r3
 810358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810358e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103592:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103690 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810359e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81035ae:	e043      	b.n	8103638 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035b0:	693b      	ldr	r3, [r7, #16]
 81035b2:	ee07 3a90 	vmov	s15, r3
 81035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810369c <HAL_RCC_GetSysClockFreq+0x2f0>
 81035be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035c2:	4b2f      	ldr	r3, [pc, #188]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035ca:	ee07 3a90 	vmov	s15, r3
 81035ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81035d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103690 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81035e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81035f2:	e021      	b.n	8103638 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035f4:	693b      	ldr	r3, [r7, #16]
 81035f6:	ee07 3a90 	vmov	s15, r3
 81035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103698 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103606:	4b1e      	ldr	r3, [pc, #120]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810360e:	ee07 3a90 	vmov	s15, r3
 8103612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103616:	ed97 6a02 	vldr	s12, [r7, #8]
 810361a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103690 <HAL_RCC_GetSysClockFreq+0x2e4>
 810361e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103636:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103638:	4b11      	ldr	r3, [pc, #68]	@ (8103680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810363c:	0a5b      	lsrs	r3, r3, #9
 810363e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103642:	3301      	adds	r3, #1
 8103644:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8103646:	683b      	ldr	r3, [r7, #0]
 8103648:	ee07 3a90 	vmov	s15, r3
 810364c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103650:	edd7 6a07 	vldr	s13, [r7, #28]
 8103654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810365c:	ee17 3a90 	vmov	r3, s15
 8103660:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103662:	e005      	b.n	8103670 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103664:	2300      	movs	r3, #0
 8103666:	61bb      	str	r3, [r7, #24]
      break;
 8103668:	e002      	b.n	8103670 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810366a:	4b07      	ldr	r3, [pc, #28]	@ (8103688 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810366c:	61bb      	str	r3, [r7, #24]
      break;
 810366e:	bf00      	nop
  }

  return sysclockfreq;
 8103670:	69bb      	ldr	r3, [r7, #24]
}
 8103672:	4618      	mov	r0, r3
 8103674:	3724      	adds	r7, #36	@ 0x24
 8103676:	46bd      	mov	sp, r7
 8103678:	f85d 7b04 	ldr.w	r7, [sp], #4
 810367c:	4770      	bx	lr
 810367e:	bf00      	nop
 8103680:	58024400 	.word	0x58024400
 8103684:	03d09000 	.word	0x03d09000
 8103688:	003d0900 	.word	0x003d0900
 810368c:	007a1200 	.word	0x007a1200
 8103690:	46000000 	.word	0x46000000
 8103694:	4c742400 	.word	0x4c742400
 8103698:	4a742400 	.word	0x4a742400
 810369c:	4af42400 	.word	0x4af42400

081036a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81036a4:	b0ca      	sub	sp, #296	@ 0x128
 81036a6:	af00      	add	r7, sp, #0
 81036a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81036ac:	2300      	movs	r3, #0
 81036ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81036b2:	2300      	movs	r3, #0
 81036b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81036c4:	2500      	movs	r5, #0
 81036c6:	ea54 0305 	orrs.w	r3, r4, r5
 81036ca:	d049      	beq.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81036d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81036d6:	d02f      	beq.n	8103738 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81036d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81036dc:	d828      	bhi.n	8103730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81036de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81036e2:	d01a      	beq.n	810371a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81036e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81036e8:	d822      	bhi.n	8103730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81036ea:	2b00      	cmp	r3, #0
 81036ec:	d003      	beq.n	81036f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81036f2:	d007      	beq.n	8103704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81036f4:	e01c      	b.n	8103730 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036f6:	4bb8      	ldr	r3, [pc, #736]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036fa:	4ab7      	ldr	r2, [pc, #732]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103702:	e01a      	b.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103708:	3308      	adds	r3, #8
 810370a:	2102      	movs	r1, #2
 810370c:	4618      	mov	r0, r3
 810370e:	f001 f9d1 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103712:	4603      	mov	r3, r0
 8103714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103718:	e00f      	b.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810371e:	3328      	adds	r3, #40	@ 0x28
 8103720:	2102      	movs	r1, #2
 8103722:	4618      	mov	r0, r3
 8103724:	f001 fa78 	bl	8104c18 <RCCEx_PLL3_Config>
 8103728:	4603      	mov	r3, r0
 810372a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810372e:	e004      	b.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103730:	2301      	movs	r3, #1
 8103732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103736:	e000      	b.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103738:	bf00      	nop
    }

    if (ret == HAL_OK)
 810373a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810373e:	2b00      	cmp	r3, #0
 8103740:	d10a      	bne.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103742:	4ba5      	ldr	r3, [pc, #660]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103746:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810374e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103750:	4aa1      	ldr	r2, [pc, #644]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103752:	430b      	orrs	r3, r1
 8103754:	6513      	str	r3, [r2, #80]	@ 0x50
 8103756:	e003      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810375c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103768:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810376c:	f04f 0900 	mov.w	r9, #0
 8103770:	ea58 0309 	orrs.w	r3, r8, r9
 8103774:	d047      	beq.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810377a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810377c:	2b04      	cmp	r3, #4
 810377e:	d82a      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103780:	a201      	add	r2, pc, #4	@ (adr r2, 8103788 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103786:	bf00      	nop
 8103788:	0810379d 	.word	0x0810379d
 810378c:	081037ab 	.word	0x081037ab
 8103790:	081037c1 	.word	0x081037c1
 8103794:	081037df 	.word	0x081037df
 8103798:	081037df 	.word	0x081037df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810379c:	4b8e      	ldr	r3, [pc, #568]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037a0:	4a8d      	ldr	r2, [pc, #564]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81037a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81037a8:	e01a      	b.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037ae:	3308      	adds	r3, #8
 81037b0:	2100      	movs	r1, #0
 81037b2:	4618      	mov	r0, r3
 81037b4:	f001 f97e 	bl	8104ab4 <RCCEx_PLL2_Config>
 81037b8:	4603      	mov	r3, r0
 81037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81037be:	e00f      	b.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037c4:	3328      	adds	r3, #40	@ 0x28
 81037c6:	2100      	movs	r1, #0
 81037c8:	4618      	mov	r0, r3
 81037ca:	f001 fa25 	bl	8104c18 <RCCEx_PLL3_Config>
 81037ce:	4603      	mov	r3, r0
 81037d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81037d4:	e004      	b.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81037d6:	2301      	movs	r3, #1
 81037d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81037dc:	e000      	b.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81037e4:	2b00      	cmp	r3, #0
 81037e6:	d10a      	bne.n	81037fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81037e8:	4b7b      	ldr	r3, [pc, #492]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81037ec:	f023 0107 	bic.w	r1, r3, #7
 81037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81037f6:	4a78      	ldr	r2, [pc, #480]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037f8:	430b      	orrs	r3, r1
 81037fa:	6513      	str	r3, [r2, #80]	@ 0x50
 81037fc:	e003      	b.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810380e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8103812:	f04f 0b00 	mov.w	fp, #0
 8103816:	ea5a 030b 	orrs.w	r3, sl, fp
 810381a:	d04c      	beq.n	81038b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103826:	d030      	beq.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810382c:	d829      	bhi.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810382e:	2bc0      	cmp	r3, #192	@ 0xc0
 8103830:	d02d      	beq.n	810388e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103832:	2bc0      	cmp	r3, #192	@ 0xc0
 8103834:	d825      	bhi.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103836:	2b80      	cmp	r3, #128	@ 0x80
 8103838:	d018      	beq.n	810386c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810383a:	2b80      	cmp	r3, #128	@ 0x80
 810383c:	d821      	bhi.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810383e:	2b00      	cmp	r3, #0
 8103840:	d002      	beq.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103842:	2b40      	cmp	r3, #64	@ 0x40
 8103844:	d007      	beq.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103846:	e01c      	b.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103848:	4b63      	ldr	r3, [pc, #396]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810384c:	4a62      	ldr	r2, [pc, #392]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810384e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103854:	e01c      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810385a:	3308      	adds	r3, #8
 810385c:	2100      	movs	r1, #0
 810385e:	4618      	mov	r0, r3
 8103860:	f001 f928 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103864:	4603      	mov	r3, r0
 8103866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810386a:	e011      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103870:	3328      	adds	r3, #40	@ 0x28
 8103872:	2100      	movs	r1, #0
 8103874:	4618      	mov	r0, r3
 8103876:	f001 f9cf 	bl	8104c18 <RCCEx_PLL3_Config>
 810387a:	4603      	mov	r3, r0
 810387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103880:	e006      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103882:	2301      	movs	r3, #1
 8103884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103888:	e002      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810388a:	bf00      	nop
 810388c:	e000      	b.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810388e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103894:	2b00      	cmp	r3, #0
 8103896:	d10a      	bne.n	81038ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103898:	4b4f      	ldr	r3, [pc, #316]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810389c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038a6:	4a4c      	ldr	r2, [pc, #304]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038a8:	430b      	orrs	r3, r1
 81038aa:	6513      	str	r3, [r2, #80]	@ 0x50
 81038ac:	e003      	b.n	81038b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81038c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81038c6:	2300      	movs	r3, #0
 81038c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81038cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81038d0:	460b      	mov	r3, r1
 81038d2:	4313      	orrs	r3, r2
 81038d4:	d053      	beq.n	810397e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81038de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81038e2:	d035      	beq.n	8103950 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81038e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81038e8:	d82e      	bhi.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81038ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81038ee:	d031      	beq.n	8103954 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81038f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81038f4:	d828      	bhi.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81038f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81038fa:	d01a      	beq.n	8103932 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81038fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103900:	d822      	bhi.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103902:	2b00      	cmp	r3, #0
 8103904:	d003      	beq.n	810390e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103906:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810390a:	d007      	beq.n	810391c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810390c:	e01c      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810390e:	4b32      	ldr	r3, [pc, #200]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103912:	4a31      	ldr	r2, [pc, #196]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103918:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810391a:	e01c      	b.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103920:	3308      	adds	r3, #8
 8103922:	2100      	movs	r1, #0
 8103924:	4618      	mov	r0, r3
 8103926:	f001 f8c5 	bl	8104ab4 <RCCEx_PLL2_Config>
 810392a:	4603      	mov	r3, r0
 810392c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103930:	e011      	b.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103936:	3328      	adds	r3, #40	@ 0x28
 8103938:	2100      	movs	r1, #0
 810393a:	4618      	mov	r0, r3
 810393c:	f001 f96c 	bl	8104c18 <RCCEx_PLL3_Config>
 8103940:	4603      	mov	r3, r0
 8103942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103946:	e006      	b.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103948:	2301      	movs	r3, #1
 810394a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810394e:	e002      	b.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103950:	bf00      	nop
 8103952:	e000      	b.n	8103956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810395a:	2b00      	cmp	r3, #0
 810395c:	d10b      	bne.n	8103976 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810395e:	4b1e      	ldr	r3, [pc, #120]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103962:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8103966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810396a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810396e:	4a1a      	ldr	r2, [pc, #104]	@ (81039d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103970:	430b      	orrs	r3, r1
 8103972:	6593      	str	r3, [r2, #88]	@ 0x58
 8103974:	e003      	b.n	810397e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103986:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810398a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810398e:	2300      	movs	r3, #0
 8103990:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8103994:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103998:	460b      	mov	r3, r1
 810399a:	4313      	orrs	r3, r2
 810399c:	d056      	beq.n	8103a4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81039a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81039aa:	d038      	beq.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81039ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81039b0:	d831      	bhi.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81039b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81039b6:	d034      	beq.n	8103a22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81039b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81039bc:	d82b      	bhi.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81039be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81039c2:	d01d      	beq.n	8103a00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81039c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81039c8:	d825      	bhi.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81039ca:	2b00      	cmp	r3, #0
 81039cc:	d006      	beq.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81039ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81039d2:	d00a      	beq.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81039d4:	e01f      	b.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81039d6:	bf00      	nop
 81039d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039dc:	4ba2      	ldr	r3, [pc, #648]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039e0:	4aa1      	ldr	r2, [pc, #644]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81039e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81039e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81039e8:	e01c      	b.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ee:	3308      	adds	r3, #8
 81039f0:	2100      	movs	r1, #0
 81039f2:	4618      	mov	r0, r3
 81039f4:	f001 f85e 	bl	8104ab4 <RCCEx_PLL2_Config>
 81039f8:	4603      	mov	r3, r0
 81039fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81039fe:	e011      	b.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a04:	3328      	adds	r3, #40	@ 0x28
 8103a06:	2100      	movs	r1, #0
 8103a08:	4618      	mov	r0, r3
 8103a0a:	f001 f905 	bl	8104c18 <RCCEx_PLL3_Config>
 8103a0e:	4603      	mov	r3, r0
 8103a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103a14:	e006      	b.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103a16:	2301      	movs	r3, #1
 8103a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103a1c:	e002      	b.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103a1e:	bf00      	nop
 8103a20:	e000      	b.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d10b      	bne.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103a30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103a3c:	4a8a      	ldr	r2, [pc, #552]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a3e:	430b      	orrs	r3, r1
 8103a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8103a42:	e003      	b.n	8103a4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103a58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8103a5c:	2300      	movs	r3, #0
 8103a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8103a62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8103a66:	460b      	mov	r3, r1
 8103a68:	4313      	orrs	r3, r2
 8103a6a:	d03a      	beq.n	8103ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103a72:	2b30      	cmp	r3, #48	@ 0x30
 8103a74:	d01f      	beq.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103a76:	2b30      	cmp	r3, #48	@ 0x30
 8103a78:	d819      	bhi.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103a7a:	2b20      	cmp	r3, #32
 8103a7c:	d00c      	beq.n	8103a98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103a7e:	2b20      	cmp	r3, #32
 8103a80:	d815      	bhi.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	d019      	beq.n	8103aba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103a86:	2b10      	cmp	r3, #16
 8103a88:	d111      	bne.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a8a:	4b77      	ldr	r3, [pc, #476]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a8e:	4a76      	ldr	r2, [pc, #472]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103a96:	e011      	b.n	8103abc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a9c:	3308      	adds	r3, #8
 8103a9e:	2102      	movs	r1, #2
 8103aa0:	4618      	mov	r0, r3
 8103aa2:	f001 f807 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103aa6:	4603      	mov	r3, r0
 8103aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103aac:	e006      	b.n	8103abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103aae:	2301      	movs	r3, #1
 8103ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ab4:	e002      	b.n	8103abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103ab6:	bf00      	nop
 8103ab8:	e000      	b.n	8103abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	d10a      	bne.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103ac4:	4b68      	ldr	r3, [pc, #416]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ac8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ad2:	4a65      	ldr	r2, [pc, #404]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ad4:	430b      	orrs	r3, r1
 8103ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103ad8:	e003      	b.n	8103ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103aea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8103aee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8103af2:	2300      	movs	r3, #0
 8103af4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103af8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103afc:	460b      	mov	r3, r1
 8103afe:	4313      	orrs	r3, r2
 8103b00:	d051      	beq.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103b08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103b0c:	d035      	beq.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103b0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103b12:	d82e      	bhi.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103b18:	d031      	beq.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103b1e:	d828      	bhi.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103b24:	d01a      	beq.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103b2a:	d822      	bhi.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d003      	beq.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103b34:	d007      	beq.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103b36:	e01c      	b.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b38:	4b4b      	ldr	r3, [pc, #300]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103b44:	e01c      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b4a:	3308      	adds	r3, #8
 8103b4c:	2100      	movs	r1, #0
 8103b4e:	4618      	mov	r0, r3
 8103b50:	f000 ffb0 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103b54:	4603      	mov	r3, r0
 8103b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103b5a:	e011      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b60:	3328      	adds	r3, #40	@ 0x28
 8103b62:	2100      	movs	r1, #0
 8103b64:	4618      	mov	r0, r3
 8103b66:	f001 f857 	bl	8104c18 <RCCEx_PLL3_Config>
 8103b6a:	4603      	mov	r3, r0
 8103b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103b70:	e006      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b72:	2301      	movs	r3, #1
 8103b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b78:	e002      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103b7a:	bf00      	nop
 8103b7c:	e000      	b.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d10a      	bne.n	8103b9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103b88:	4b37      	ldr	r3, [pc, #220]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103b96:	4a34      	ldr	r2, [pc, #208]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b98:	430b      	orrs	r3, r1
 8103b9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8103b9c:	e003      	b.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8103bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103bb6:	2300      	movs	r3, #0
 8103bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103bbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103bc0:	460b      	mov	r3, r1
 8103bc2:	4313      	orrs	r3, r2
 8103bc4:	d056      	beq.n	8103c74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103bd0:	d033      	beq.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103bd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103bd6:	d82c      	bhi.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103bd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103bdc:	d02f      	beq.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103bde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103be2:	d826      	bhi.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103be4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103be8:	d02b      	beq.n	8103c42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103bea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103bee:	d820      	bhi.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103bf4:	d012      	beq.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103bfa:	d81a      	bhi.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d022      	beq.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c04:	d115      	bne.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c0a:	3308      	adds	r3, #8
 8103c0c:	2101      	movs	r1, #1
 8103c0e:	4618      	mov	r0, r3
 8103c10:	f000 ff50 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103c14:	4603      	mov	r3, r0
 8103c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103c1a:	e015      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c20:	3328      	adds	r3, #40	@ 0x28
 8103c22:	2101      	movs	r1, #1
 8103c24:	4618      	mov	r0, r3
 8103c26:	f000 fff7 	bl	8104c18 <RCCEx_PLL3_Config>
 8103c2a:	4603      	mov	r3, r0
 8103c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103c30:	e00a      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c32:	2301      	movs	r3, #1
 8103c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103c38:	e006      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103c3a:	bf00      	nop
 8103c3c:	e004      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103c3e:	bf00      	nop
 8103c40:	e002      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103c42:	bf00      	nop
 8103c44:	e000      	b.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d10d      	bne.n	8103c6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103c50:	4b05      	ldr	r3, [pc, #20]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103c54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c5e:	4a02      	ldr	r2, [pc, #8]	@ (8103c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c60:	430b      	orrs	r3, r1
 8103c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8103c64:	e006      	b.n	8103c74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103c66:	bf00      	nop
 8103c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103c84:	2300      	movs	r3, #0
 8103c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103c8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103c8e:	460b      	mov	r3, r1
 8103c90:	4313      	orrs	r3, r2
 8103c92:	d055      	beq.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103ca0:	d033      	beq.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103ca6:	d82c      	bhi.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103cac:	d02f      	beq.n	8103d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103cb2:	d826      	bhi.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103cb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103cb8:	d02b      	beq.n	8103d12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103cba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103cbe:	d820      	bhi.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103cc4:	d012      	beq.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103cca:	d81a      	bhi.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	d022      	beq.n	8103d16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103cd4:	d115      	bne.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cda:	3308      	adds	r3, #8
 8103cdc:	2101      	movs	r1, #1
 8103cde:	4618      	mov	r0, r3
 8103ce0:	f000 fee8 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103ce4:	4603      	mov	r3, r0
 8103ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103cea:	e015      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cf0:	3328      	adds	r3, #40	@ 0x28
 8103cf2:	2101      	movs	r1, #1
 8103cf4:	4618      	mov	r0, r3
 8103cf6:	f000 ff8f 	bl	8104c18 <RCCEx_PLL3_Config>
 8103cfa:	4603      	mov	r3, r0
 8103cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103d00:	e00a      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103d02:	2301      	movs	r3, #1
 8103d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103d08:	e006      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d0a:	bf00      	nop
 8103d0c:	e004      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d0e:	bf00      	nop
 8103d10:	e002      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d12:	bf00      	nop
 8103d14:	e000      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d10b      	bne.n	8103d38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103d20:	4ba4      	ldr	r3, [pc, #656]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103d30:	4aa0      	ldr	r2, [pc, #640]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103d32:	430b      	orrs	r3, r1
 8103d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8103d36:	e003      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103d50:	2300      	movs	r3, #0
 8103d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103d5a:	460b      	mov	r3, r1
 8103d5c:	4313      	orrs	r3, r2
 8103d5e:	d037      	beq.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103d6a:	d00e      	beq.n	8103d8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103d70:	d816      	bhi.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d018      	beq.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103d7a:	d111      	bne.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d7c:	4b8d      	ldr	r3, [pc, #564]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103d80:	4a8c      	ldr	r2, [pc, #560]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103d88:	e00f      	b.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d8e:	3308      	adds	r3, #8
 8103d90:	2101      	movs	r1, #1
 8103d92:	4618      	mov	r0, r3
 8103d94:	f000 fe8e 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103d98:	4603      	mov	r3, r0
 8103d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103d9e:	e004      	b.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103da0:	2301      	movs	r3, #1
 8103da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103da6:	e000      	b.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dae:	2b00      	cmp	r3, #0
 8103db0:	d10a      	bne.n	8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103db2:	4b80      	ldr	r3, [pc, #512]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103db6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103dc0:	4a7c      	ldr	r2, [pc, #496]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dc2:	430b      	orrs	r3, r1
 8103dc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8103dc6:	e003      	b.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103de0:	2300      	movs	r3, #0
 8103de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103de6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103dea:	460b      	mov	r3, r1
 8103dec:	4313      	orrs	r3, r2
 8103dee:	d039      	beq.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103df6:	2b03      	cmp	r3, #3
 8103df8:	d81c      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8103e00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e00:	08103e3d 	.word	0x08103e3d
 8103e04:	08103e11 	.word	0x08103e11
 8103e08:	08103e1f 	.word	0x08103e1f
 8103e0c:	08103e3d 	.word	0x08103e3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e10:	4b68      	ldr	r3, [pc, #416]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e14:	4a67      	ldr	r2, [pc, #412]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103e1c:	e00f      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e22:	3308      	adds	r3, #8
 8103e24:	2102      	movs	r1, #2
 8103e26:	4618      	mov	r0, r3
 8103e28:	f000 fe44 	bl	8104ab4 <RCCEx_PLL2_Config>
 8103e2c:	4603      	mov	r3, r0
 8103e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103e32:	e004      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103e34:	2301      	movs	r3, #1
 8103e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103e3a:	e000      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d10a      	bne.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103e46:	4b5b      	ldr	r3, [pc, #364]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103e4a:	f023 0103 	bic.w	r1, r3, #3
 8103e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103e54:	4a57      	ldr	r2, [pc, #348]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e56:	430b      	orrs	r3, r1
 8103e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103e5a:	e003      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103e74:	2300      	movs	r3, #0
 8103e76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103e7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8103e7e:	460b      	mov	r3, r1
 8103e80:	4313      	orrs	r3, r2
 8103e82:	f000 809f 	beq.w	8103fc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103e86:	4b4c      	ldr	r3, [pc, #304]	@ (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	4a4b      	ldr	r2, [pc, #300]	@ (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103e92:	f7fe fe55 	bl	8102b40 <HAL_GetTick>
 8103e96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103e9a:	e00b      	b.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103e9c:	f7fe fe50 	bl	8102b40 <HAL_GetTick>
 8103ea0:	4602      	mov	r2, r0
 8103ea2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103ea6:	1ad3      	subs	r3, r2, r3
 8103ea8:	2b64      	cmp	r3, #100	@ 0x64
 8103eaa:	d903      	bls.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8103eac:	2303      	movs	r3, #3
 8103eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103eb2:	e005      	b.n	8103ec0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103eb4:	4b40      	ldr	r3, [pc, #256]	@ (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103eb6:	681b      	ldr	r3, [r3, #0]
 8103eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d0ed      	beq.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d179      	bne.n	8103fbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103eca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103ed4:	4053      	eors	r3, r2
 8103ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d015      	beq.n	8103f0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103ede:	4b35      	ldr	r3, [pc, #212]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103ee6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103eea:	4b32      	ldr	r3, [pc, #200]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103eee:	4a31      	ldr	r2, [pc, #196]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103ef4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103efa:	4a2e      	ldr	r2, [pc, #184]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103f00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103f02:	4a2c      	ldr	r2, [pc, #176]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103f16:	d118      	bne.n	8103f4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103f18:	f7fe fe12 	bl	8102b40 <HAL_GetTick>
 8103f1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103f20:	e00d      	b.n	8103f3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103f22:	f7fe fe0d 	bl	8102b40 <HAL_GetTick>
 8103f26:	4602      	mov	r2, r0
 8103f28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103f2c:	1ad2      	subs	r2, r2, r3
 8103f2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103f32:	429a      	cmp	r2, r3
 8103f34:	d903      	bls.n	8103f3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8103f36:	2303      	movs	r3, #3
 8103f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8103f3c:	e005      	b.n	8103f4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103f42:	f003 0302 	and.w	r3, r3, #2
 8103f46:	2b00      	cmp	r3, #0
 8103f48:	d0eb      	beq.n	8103f22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8103f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f4e:	2b00      	cmp	r3, #0
 8103f50:	d12b      	bne.n	8103faa <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103f62:	d110      	bne.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8103f64:	4b13      	ldr	r3, [pc, #76]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f66:	691b      	ldr	r3, [r3, #16]
 8103f68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8103f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103f74:	091b      	lsrs	r3, r3, #4
 8103f76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8103f7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8103f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f80:	430b      	orrs	r3, r1
 8103f82:	6113      	str	r3, [r2, #16]
 8103f84:	e005      	b.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8103f86:	4b0b      	ldr	r3, [pc, #44]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f88:	691b      	ldr	r3, [r3, #16]
 8103f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103f90:	6113      	str	r3, [r2, #16]
 8103f92:	4b08      	ldr	r3, [pc, #32]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8103f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103fa2:	4a04      	ldr	r2, [pc, #16]	@ (8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fa4:	430b      	orrs	r3, r1
 8103fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8103fa8:	e00c      	b.n	8103fc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8103fb2:	e007      	b.n	8103fc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8103fb4:	58024400 	.word	0x58024400
 8103fb8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fcc:	f002 0301 	and.w	r3, r2, #1
 8103fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103fd4:	2300      	movs	r3, #0
 8103fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8103fda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8103fde:	460b      	mov	r3, r1
 8103fe0:	4313      	orrs	r3, r2
 8103fe2:	f000 8089 	beq.w	81040f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103fec:	2b28      	cmp	r3, #40	@ 0x28
 8103fee:	d86b      	bhi.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8103ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8103ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8103ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ff6:	bf00      	nop
 8103ff8:	081040d1 	.word	0x081040d1
 8103ffc:	081040c9 	.word	0x081040c9
 8104000:	081040c9 	.word	0x081040c9
 8104004:	081040c9 	.word	0x081040c9
 8104008:	081040c9 	.word	0x081040c9
 810400c:	081040c9 	.word	0x081040c9
 8104010:	081040c9 	.word	0x081040c9
 8104014:	081040c9 	.word	0x081040c9
 8104018:	0810409d 	.word	0x0810409d
 810401c:	081040c9 	.word	0x081040c9
 8104020:	081040c9 	.word	0x081040c9
 8104024:	081040c9 	.word	0x081040c9
 8104028:	081040c9 	.word	0x081040c9
 810402c:	081040c9 	.word	0x081040c9
 8104030:	081040c9 	.word	0x081040c9
 8104034:	081040c9 	.word	0x081040c9
 8104038:	081040b3 	.word	0x081040b3
 810403c:	081040c9 	.word	0x081040c9
 8104040:	081040c9 	.word	0x081040c9
 8104044:	081040c9 	.word	0x081040c9
 8104048:	081040c9 	.word	0x081040c9
 810404c:	081040c9 	.word	0x081040c9
 8104050:	081040c9 	.word	0x081040c9
 8104054:	081040c9 	.word	0x081040c9
 8104058:	081040d1 	.word	0x081040d1
 810405c:	081040c9 	.word	0x081040c9
 8104060:	081040c9 	.word	0x081040c9
 8104064:	081040c9 	.word	0x081040c9
 8104068:	081040c9 	.word	0x081040c9
 810406c:	081040c9 	.word	0x081040c9
 8104070:	081040c9 	.word	0x081040c9
 8104074:	081040c9 	.word	0x081040c9
 8104078:	081040d1 	.word	0x081040d1
 810407c:	081040c9 	.word	0x081040c9
 8104080:	081040c9 	.word	0x081040c9
 8104084:	081040c9 	.word	0x081040c9
 8104088:	081040c9 	.word	0x081040c9
 810408c:	081040c9 	.word	0x081040c9
 8104090:	081040c9 	.word	0x081040c9
 8104094:	081040c9 	.word	0x081040c9
 8104098:	081040d1 	.word	0x081040d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040a0:	3308      	adds	r3, #8
 81040a2:	2101      	movs	r1, #1
 81040a4:	4618      	mov	r0, r3
 81040a6:	f000 fd05 	bl	8104ab4 <RCCEx_PLL2_Config>
 81040aa:	4603      	mov	r3, r0
 81040ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81040b0:	e00f      	b.n	81040d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040b6:	3328      	adds	r3, #40	@ 0x28
 81040b8:	2101      	movs	r1, #1
 81040ba:	4618      	mov	r0, r3
 81040bc:	f000 fdac 	bl	8104c18 <RCCEx_PLL3_Config>
 81040c0:	4603      	mov	r3, r0
 81040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81040c6:	e004      	b.n	81040d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81040c8:	2301      	movs	r3, #1
 81040ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81040ce:	e000      	b.n	81040d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81040d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81040d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040d6:	2b00      	cmp	r3, #0
 81040d8:	d10a      	bne.n	81040f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81040da:	4bbf      	ldr	r3, [pc, #764]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81040dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81040de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81040e8:	4abb      	ldr	r2, [pc, #748]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81040ea:	430b      	orrs	r3, r1
 81040ec:	6553      	str	r3, [r2, #84]	@ 0x54
 81040ee:	e003      	b.n	81040f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104100:	f002 0302 	and.w	r3, r2, #2
 8104104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8104108:	2300      	movs	r3, #0
 810410a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810410e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8104112:	460b      	mov	r3, r1
 8104114:	4313      	orrs	r3, r2
 8104116:	d041      	beq.n	810419c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810411c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810411e:	2b05      	cmp	r3, #5
 8104120:	d824      	bhi.n	810416c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8104122:	a201      	add	r2, pc, #4	@ (adr r2, 8104128 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8104124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104128:	08104175 	.word	0x08104175
 810412c:	08104141 	.word	0x08104141
 8104130:	08104157 	.word	0x08104157
 8104134:	08104175 	.word	0x08104175
 8104138:	08104175 	.word	0x08104175
 810413c:	08104175 	.word	0x08104175
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104144:	3308      	adds	r3, #8
 8104146:	2101      	movs	r1, #1
 8104148:	4618      	mov	r0, r3
 810414a:	f000 fcb3 	bl	8104ab4 <RCCEx_PLL2_Config>
 810414e:	4603      	mov	r3, r0
 8104150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104154:	e00f      	b.n	8104176 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810415a:	3328      	adds	r3, #40	@ 0x28
 810415c:	2101      	movs	r1, #1
 810415e:	4618      	mov	r0, r3
 8104160:	f000 fd5a 	bl	8104c18 <RCCEx_PLL3_Config>
 8104164:	4603      	mov	r3, r0
 8104166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810416a:	e004      	b.n	8104176 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810416c:	2301      	movs	r3, #1
 810416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104172:	e000      	b.n	8104176 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8104174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810417a:	2b00      	cmp	r3, #0
 810417c:	d10a      	bne.n	8104194 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810417e:	4b96      	ldr	r3, [pc, #600]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104182:	f023 0107 	bic.w	r1, r3, #7
 8104186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810418a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810418c:	4a92      	ldr	r2, [pc, #584]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810418e:	430b      	orrs	r3, r1
 8104190:	6553      	str	r3, [r2, #84]	@ 0x54
 8104192:	e003      	b.n	810419c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041a4:	f002 0304 	and.w	r3, r2, #4
 81041a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81041ac:	2300      	movs	r3, #0
 81041ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81041b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81041b6:	460b      	mov	r3, r1
 81041b8:	4313      	orrs	r3, r2
 81041ba:	d044      	beq.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81041c4:	2b05      	cmp	r3, #5
 81041c6:	d825      	bhi.n	8104214 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81041c8:	a201      	add	r2, pc, #4	@ (adr r2, 81041d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041ce:	bf00      	nop
 81041d0:	0810421d 	.word	0x0810421d
 81041d4:	081041e9 	.word	0x081041e9
 81041d8:	081041ff 	.word	0x081041ff
 81041dc:	0810421d 	.word	0x0810421d
 81041e0:	0810421d 	.word	0x0810421d
 81041e4:	0810421d 	.word	0x0810421d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041ec:	3308      	adds	r3, #8
 81041ee:	2101      	movs	r1, #1
 81041f0:	4618      	mov	r0, r3
 81041f2:	f000 fc5f 	bl	8104ab4 <RCCEx_PLL2_Config>
 81041f6:	4603      	mov	r3, r0
 81041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81041fc:	e00f      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104202:	3328      	adds	r3, #40	@ 0x28
 8104204:	2101      	movs	r1, #1
 8104206:	4618      	mov	r0, r3
 8104208:	f000 fd06 	bl	8104c18 <RCCEx_PLL3_Config>
 810420c:	4603      	mov	r3, r0
 810420e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104212:	e004      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104214:	2301      	movs	r3, #1
 8104216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810421a:	e000      	b.n	810421e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810421e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104222:	2b00      	cmp	r3, #0
 8104224:	d10b      	bne.n	810423e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104226:	4b6c      	ldr	r3, [pc, #432]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810422a:	f023 0107 	bic.w	r1, r3, #7
 810422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104236:	4a68      	ldr	r2, [pc, #416]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104238:	430b      	orrs	r3, r1
 810423a:	6593      	str	r3, [r2, #88]	@ 0x58
 810423c:	e003      	b.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810424e:	f002 0320 	and.w	r3, r2, #32
 8104252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8104256:	2300      	movs	r3, #0
 8104258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810425c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8104260:	460b      	mov	r3, r1
 8104262:	4313      	orrs	r3, r2
 8104264:	d055      	beq.n	8104312 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810426e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104272:	d033      	beq.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8104274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104278:	d82c      	bhi.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810427e:	d02f      	beq.n	81042e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104284:	d826      	bhi.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104286:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810428a:	d02b      	beq.n	81042e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810428c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104290:	d820      	bhi.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104296:	d012      	beq.n	81042be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810429c:	d81a      	bhi.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810429e:	2b00      	cmp	r3, #0
 81042a0:	d022      	beq.n	81042e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81042a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81042a6:	d115      	bne.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042ac:	3308      	adds	r3, #8
 81042ae:	2100      	movs	r1, #0
 81042b0:	4618      	mov	r0, r3
 81042b2:	f000 fbff 	bl	8104ab4 <RCCEx_PLL2_Config>
 81042b6:	4603      	mov	r3, r0
 81042b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81042bc:	e015      	b.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042c2:	3328      	adds	r3, #40	@ 0x28
 81042c4:	2102      	movs	r1, #2
 81042c6:	4618      	mov	r0, r3
 81042c8:	f000 fca6 	bl	8104c18 <RCCEx_PLL3_Config>
 81042cc:	4603      	mov	r3, r0
 81042ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81042d2:	e00a      	b.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042d4:	2301      	movs	r3, #1
 81042d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81042da:	e006      	b.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81042dc:	bf00      	nop
 81042de:	e004      	b.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81042e0:	bf00      	nop
 81042e2:	e002      	b.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81042e4:	bf00      	nop
 81042e6:	e000      	b.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042ee:	2b00      	cmp	r3, #0
 81042f0:	d10b      	bne.n	810430a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81042f2:	4b39      	ldr	r3, [pc, #228]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81042f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104302:	4a35      	ldr	r2, [pc, #212]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104304:	430b      	orrs	r3, r1
 8104306:	6553      	str	r3, [r2, #84]	@ 0x54
 8104308:	e003      	b.n	8104312 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810430a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810430e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104316:	e9d3 2300 	ldrd	r2, r3, [r3]
 810431a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810431e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8104322:	2300      	movs	r3, #0
 8104324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8104328:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810432c:	460b      	mov	r3, r1
 810432e:	4313      	orrs	r3, r2
 8104330:	d058      	beq.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810433a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810433e:	d033      	beq.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8104340:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8104344:	d82c      	bhi.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810434a:	d02f      	beq.n	81043ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810434c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104350:	d826      	bhi.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104352:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8104356:	d02b      	beq.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8104358:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810435c:	d820      	bhi.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810435e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104362:	d012      	beq.n	810438a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8104364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104368:	d81a      	bhi.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810436a:	2b00      	cmp	r3, #0
 810436c:	d022      	beq.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104372:	d115      	bne.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104378:	3308      	adds	r3, #8
 810437a:	2100      	movs	r1, #0
 810437c:	4618      	mov	r0, r3
 810437e:	f000 fb99 	bl	8104ab4 <RCCEx_PLL2_Config>
 8104382:	4603      	mov	r3, r0
 8104384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104388:	e015      	b.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810438e:	3328      	adds	r3, #40	@ 0x28
 8104390:	2102      	movs	r1, #2
 8104392:	4618      	mov	r0, r3
 8104394:	f000 fc40 	bl	8104c18 <RCCEx_PLL3_Config>
 8104398:	4603      	mov	r3, r0
 810439a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810439e:	e00a      	b.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81043a0:	2301      	movs	r3, #1
 81043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81043a6:	e006      	b.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81043a8:	bf00      	nop
 81043aa:	e004      	b.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81043ac:	bf00      	nop
 81043ae:	e002      	b.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81043b0:	bf00      	nop
 81043b2:	e000      	b.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81043ba:	2b00      	cmp	r3, #0
 81043bc:	d10e      	bne.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81043be:	4b06      	ldr	r3, [pc, #24]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81043c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81043c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81043ce:	4a02      	ldr	r2, [pc, #8]	@ (81043d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81043d0:	430b      	orrs	r3, r1
 81043d2:	6593      	str	r3, [r2, #88]	@ 0x58
 81043d4:	e006      	b.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81043d6:	bf00      	nop
 81043d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81043e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81043f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81043f4:	2300      	movs	r3, #0
 81043f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81043fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81043fe:	460b      	mov	r3, r1
 8104400:	4313      	orrs	r3, r2
 8104402:	d055      	beq.n	81044b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810440c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104410:	d033      	beq.n	810447a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8104412:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104416:	d82c      	bhi.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810441c:	d02f      	beq.n	810447e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810441e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104422:	d826      	bhi.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104424:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104428:	d02b      	beq.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810442a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810442e:	d820      	bhi.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104434:	d012      	beq.n	810445c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8104436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810443a:	d81a      	bhi.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810443c:	2b00      	cmp	r3, #0
 810443e:	d022      	beq.n	8104486 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8104440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104444:	d115      	bne.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810444a:	3308      	adds	r3, #8
 810444c:	2100      	movs	r1, #0
 810444e:	4618      	mov	r0, r3
 8104450:	f000 fb30 	bl	8104ab4 <RCCEx_PLL2_Config>
 8104454:	4603      	mov	r3, r0
 8104456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810445a:	e015      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104460:	3328      	adds	r3, #40	@ 0x28
 8104462:	2102      	movs	r1, #2
 8104464:	4618      	mov	r0, r3
 8104466:	f000 fbd7 	bl	8104c18 <RCCEx_PLL3_Config>
 810446a:	4603      	mov	r3, r0
 810446c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104470:	e00a      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104472:	2301      	movs	r3, #1
 8104474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104478:	e006      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810447a:	bf00      	nop
 810447c:	e004      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810447e:	bf00      	nop
 8104480:	e002      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104482:	bf00      	nop
 8104484:	e000      	b.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810448c:	2b00      	cmp	r3, #0
 810448e:	d10b      	bne.n	81044a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104490:	4ba1      	ldr	r3, [pc, #644]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104494:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8104498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810449c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81044a0:	4a9d      	ldr	r2, [pc, #628]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81044a2:	430b      	orrs	r3, r1
 81044a4:	6593      	str	r3, [r2, #88]	@ 0x58
 81044a6:	e003      	b.n	81044b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81044ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044b8:	f002 0308 	and.w	r3, r2, #8
 81044bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81044c0:	2300      	movs	r3, #0
 81044c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81044c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81044ca:	460b      	mov	r3, r1
 81044cc:	4313      	orrs	r3, r2
 81044ce:	d01e      	beq.n	810450e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81044d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81044dc:	d10c      	bne.n	81044f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044e2:	3328      	adds	r3, #40	@ 0x28
 81044e4:	2102      	movs	r1, #2
 81044e6:	4618      	mov	r0, r3
 81044e8:	f000 fb96 	bl	8104c18 <RCCEx_PLL3_Config>
 81044ec:	4603      	mov	r3, r0
 81044ee:	2b00      	cmp	r3, #0
 81044f0:	d002      	beq.n	81044f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81044f2:	2301      	movs	r3, #1
 81044f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81044f8:	4b87      	ldr	r3, [pc, #540]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81044fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104508:	4a83      	ldr	r2, [pc, #524]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810450a:	430b      	orrs	r3, r1
 810450c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104516:	f002 0310 	and.w	r3, r2, #16
 810451a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810451e:	2300      	movs	r3, #0
 8104520:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8104524:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8104528:	460b      	mov	r3, r1
 810452a:	4313      	orrs	r3, r2
 810452c:	d01e      	beq.n	810456c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810453a:	d10c      	bne.n	8104556 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104540:	3328      	adds	r3, #40	@ 0x28
 8104542:	2102      	movs	r1, #2
 8104544:	4618      	mov	r0, r3
 8104546:	f000 fb67 	bl	8104c18 <RCCEx_PLL3_Config>
 810454a:	4603      	mov	r3, r0
 810454c:	2b00      	cmp	r3, #0
 810454e:	d002      	beq.n	8104556 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8104550:	2301      	movs	r3, #1
 8104552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104556:	4b70      	ldr	r3, [pc, #448]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810455a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104566:	4a6c      	ldr	r2, [pc, #432]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104568:	430b      	orrs	r3, r1
 810456a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104574:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8104578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810457c:	2300      	movs	r3, #0
 810457e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8104582:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8104586:	460b      	mov	r3, r1
 8104588:	4313      	orrs	r3, r2
 810458a:	d03e      	beq.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104598:	d022      	beq.n	81045e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810459a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810459e:	d81b      	bhi.n	81045d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81045a0:	2b00      	cmp	r3, #0
 81045a2:	d003      	beq.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81045a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81045a8:	d00b      	beq.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81045aa:	e015      	b.n	81045d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045b0:	3308      	adds	r3, #8
 81045b2:	2100      	movs	r1, #0
 81045b4:	4618      	mov	r0, r3
 81045b6:	f000 fa7d 	bl	8104ab4 <RCCEx_PLL2_Config>
 81045ba:	4603      	mov	r3, r0
 81045bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81045c0:	e00f      	b.n	81045e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045c6:	3328      	adds	r3, #40	@ 0x28
 81045c8:	2102      	movs	r1, #2
 81045ca:	4618      	mov	r0, r3
 81045cc:	f000 fb24 	bl	8104c18 <RCCEx_PLL3_Config>
 81045d0:	4603      	mov	r3, r0
 81045d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81045d6:	e004      	b.n	81045e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81045d8:	2301      	movs	r3, #1
 81045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81045de:	e000      	b.n	81045e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81045e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81045e6:	2b00      	cmp	r3, #0
 81045e8:	d10b      	bne.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81045ea:	4b4b      	ldr	r3, [pc, #300]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81045ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81045fa:	4a47      	ldr	r2, [pc, #284]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045fc:	430b      	orrs	r3, r1
 81045fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8104600:	e003      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104612:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8104616:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104618:	2300      	movs	r3, #0
 810461a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810461c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8104620:	460b      	mov	r3, r1
 8104622:	4313      	orrs	r3, r2
 8104624:	d03b      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810462e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104632:	d01f      	beq.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8104634:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104638:	d818      	bhi.n	810466c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810463a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810463e:	d003      	beq.n	8104648 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8104640:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104644:	d007      	beq.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8104646:	e011      	b.n	810466c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104648:	4b33      	ldr	r3, [pc, #204]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810464c:	4a32      	ldr	r2, [pc, #200]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810464e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8104654:	e00f      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810465a:	3328      	adds	r3, #40	@ 0x28
 810465c:	2101      	movs	r1, #1
 810465e:	4618      	mov	r0, r3
 8104660:	f000 fada 	bl	8104c18 <RCCEx_PLL3_Config>
 8104664:	4603      	mov	r3, r0
 8104666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810466a:	e004      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810466c:	2301      	movs	r3, #1
 810466e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104672:	e000      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8104674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810467a:	2b00      	cmp	r3, #0
 810467c:	d10b      	bne.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810467e:	4b26      	ldr	r3, [pc, #152]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104682:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8104686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810468e:	4a22      	ldr	r2, [pc, #136]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104690:	430b      	orrs	r3, r1
 8104692:	6553      	str	r3, [r2, #84]	@ 0x54
 8104694:	e003      	b.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810469a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81046aa:	673b      	str	r3, [r7, #112]	@ 0x70
 81046ac:	2300      	movs	r3, #0
 81046ae:	677b      	str	r3, [r7, #116]	@ 0x74
 81046b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81046b4:	460b      	mov	r3, r1
 81046b6:	4313      	orrs	r3, r2
 81046b8:	d034      	beq.n	8104724 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81046c0:	2b00      	cmp	r3, #0
 81046c2:	d003      	beq.n	81046cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81046c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81046c8:	d007      	beq.n	81046da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81046ca:	e011      	b.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046cc:	4b12      	ldr	r3, [pc, #72]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81046d0:	4a11      	ldr	r2, [pc, #68]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81046d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81046d8:	e00e      	b.n	81046f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046de:	3308      	adds	r3, #8
 81046e0:	2102      	movs	r1, #2
 81046e2:	4618      	mov	r0, r3
 81046e4:	f000 f9e6 	bl	8104ab4 <RCCEx_PLL2_Config>
 81046e8:	4603      	mov	r3, r0
 81046ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81046ee:	e003      	b.n	81046f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81046f0:	2301      	movs	r3, #1
 81046f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81046f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81046fc:	2b00      	cmp	r3, #0
 81046fe:	d10d      	bne.n	810471c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104700:	4b05      	ldr	r3, [pc, #20]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104704:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810470c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810470e:	4a02      	ldr	r2, [pc, #8]	@ (8104718 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104710:	430b      	orrs	r3, r1
 8104712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104714:	e006      	b.n	8104724 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104716:	bf00      	nop
 8104718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810471c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104728:	e9d3 2300 	ldrd	r2, r3, [r3]
 810472c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104730:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104732:	2300      	movs	r3, #0
 8104734:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8104736:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810473a:	460b      	mov	r3, r1
 810473c:	4313      	orrs	r3, r2
 810473e:	d00c      	beq.n	810475a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104744:	3328      	adds	r3, #40	@ 0x28
 8104746:	2102      	movs	r1, #2
 8104748:	4618      	mov	r0, r3
 810474a:	f000 fa65 	bl	8104c18 <RCCEx_PLL3_Config>
 810474e:	4603      	mov	r3, r0
 8104750:	2b00      	cmp	r3, #0
 8104752:	d002      	beq.n	810475a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8104754:	2301      	movs	r3, #1
 8104756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104762:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8104766:	663b      	str	r3, [r7, #96]	@ 0x60
 8104768:	2300      	movs	r3, #0
 810476a:	667b      	str	r3, [r7, #100]	@ 0x64
 810476c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104770:	460b      	mov	r3, r1
 8104772:	4313      	orrs	r3, r2
 8104774:	d038      	beq.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810477a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810477e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104782:	d018      	beq.n	81047b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104784:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104788:	d811      	bhi.n	81047ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810478a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810478e:	d014      	beq.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104794:	d80b      	bhi.n	81047ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104796:	2b00      	cmp	r3, #0
 8104798:	d011      	beq.n	81047be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810479a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810479e:	d106      	bne.n	81047ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047a0:	4bc3      	ldr	r3, [pc, #780]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81047a4:	4ac2      	ldr	r2, [pc, #776]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81047aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81047ac:	e008      	b.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047ae:	2301      	movs	r3, #1
 81047b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81047b4:	e004      	b.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81047b6:	bf00      	nop
 81047b8:	e002      	b.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81047ba:	bf00      	nop
 81047bc:	e000      	b.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81047be:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81047c4:	2b00      	cmp	r3, #0
 81047c6:	d10b      	bne.n	81047e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81047c8:	4bb9      	ldr	r3, [pc, #740]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81047d8:	4ab5      	ldr	r2, [pc, #724]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047da:	430b      	orrs	r3, r1
 81047dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81047de:	e003      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81047e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81047f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81047f6:	2300      	movs	r3, #0
 81047f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81047fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81047fe:	460b      	mov	r3, r1
 8104800:	4313      	orrs	r3, r2
 8104802:	d009      	beq.n	8104818 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104804:	4baa      	ldr	r3, [pc, #680]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104808:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104812:	4aa7      	ldr	r2, [pc, #668]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104814:	430b      	orrs	r3, r1
 8104816:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104820:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8104824:	653b      	str	r3, [r7, #80]	@ 0x50
 8104826:	2300      	movs	r3, #0
 8104828:	657b      	str	r3, [r7, #84]	@ 0x54
 810482a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810482e:	460b      	mov	r3, r1
 8104830:	4313      	orrs	r3, r2
 8104832:	d00a      	beq.n	810484a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104834:	4b9e      	ldr	r3, [pc, #632]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104836:	691b      	ldr	r3, [r3, #16]
 8104838:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104840:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104844:	4a9a      	ldr	r2, [pc, #616]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104846:	430b      	orrs	r3, r1
 8104848:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104852:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8104856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104858:	2300      	movs	r3, #0
 810485a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810485c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8104860:	460b      	mov	r3, r1
 8104862:	4313      	orrs	r3, r2
 8104864:	d009      	beq.n	810487a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104866:	4b92      	ldr	r3, [pc, #584]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810486a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104874:	4a8e      	ldr	r2, [pc, #568]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104876:	430b      	orrs	r3, r1
 8104878:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104882:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8104886:	643b      	str	r3, [r7, #64]	@ 0x40
 8104888:	2300      	movs	r3, #0
 810488a:	647b      	str	r3, [r7, #68]	@ 0x44
 810488c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104890:	460b      	mov	r3, r1
 8104892:	4313      	orrs	r3, r2
 8104894:	d00e      	beq.n	81048b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104896:	4b86      	ldr	r3, [pc, #536]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104898:	691b      	ldr	r3, [r3, #16]
 810489a:	4a85      	ldr	r2, [pc, #532]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810489c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81048a0:	6113      	str	r3, [r2, #16]
 81048a2:	4b83      	ldr	r3, [pc, #524]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048a4:	6919      	ldr	r1, [r3, #16]
 81048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81048ae:	4a80      	ldr	r2, [pc, #512]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048b0:	430b      	orrs	r3, r1
 81048b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81048c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81048c2:	2300      	movs	r3, #0
 81048c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81048c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81048ca:	460b      	mov	r3, r1
 81048cc:	4313      	orrs	r3, r2
 81048ce:	d009      	beq.n	81048e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81048d0:	4b77      	ldr	r3, [pc, #476]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81048d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048de:	4a74      	ldr	r2, [pc, #464]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048e0:	430b      	orrs	r3, r1
 81048e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81048f0:	633b      	str	r3, [r7, #48]	@ 0x30
 81048f2:	2300      	movs	r3, #0
 81048f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81048f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81048fa:	460b      	mov	r3, r1
 81048fc:	4313      	orrs	r3, r2
 81048fe:	d00a      	beq.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104900:	4b6b      	ldr	r3, [pc, #428]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104904:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810490c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104910:	4a67      	ldr	r2, [pc, #412]	@ (8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104912:	430b      	orrs	r3, r1
 8104914:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810491e:	2100      	movs	r1, #0
 8104920:	62b9      	str	r1, [r7, #40]	@ 0x28
 8104922:	f003 0301 	and.w	r3, r3, #1
 8104926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104928:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810492c:	460b      	mov	r3, r1
 810492e:	4313      	orrs	r3, r2
 8104930:	d011      	beq.n	8104956 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104936:	3308      	adds	r3, #8
 8104938:	2100      	movs	r1, #0
 810493a:	4618      	mov	r0, r3
 810493c:	f000 f8ba 	bl	8104ab4 <RCCEx_PLL2_Config>
 8104940:	4603      	mov	r3, r0
 8104942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810494a:	2b00      	cmp	r3, #0
 810494c:	d003      	beq.n	8104956 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810495e:	2100      	movs	r1, #0
 8104960:	6239      	str	r1, [r7, #32]
 8104962:	f003 0302 	and.w	r3, r3, #2
 8104966:	627b      	str	r3, [r7, #36]	@ 0x24
 8104968:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810496c:	460b      	mov	r3, r1
 810496e:	4313      	orrs	r3, r2
 8104970:	d011      	beq.n	8104996 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104976:	3308      	adds	r3, #8
 8104978:	2101      	movs	r1, #1
 810497a:	4618      	mov	r0, r3
 810497c:	f000 f89a 	bl	8104ab4 <RCCEx_PLL2_Config>
 8104980:	4603      	mov	r3, r0
 8104982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810498a:	2b00      	cmp	r3, #0
 810498c:	d003      	beq.n	8104996 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810499e:	2100      	movs	r1, #0
 81049a0:	61b9      	str	r1, [r7, #24]
 81049a2:	f003 0304 	and.w	r3, r3, #4
 81049a6:	61fb      	str	r3, [r7, #28]
 81049a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81049ac:	460b      	mov	r3, r1
 81049ae:	4313      	orrs	r3, r2
 81049b0:	d011      	beq.n	81049d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049b6:	3308      	adds	r3, #8
 81049b8:	2102      	movs	r1, #2
 81049ba:	4618      	mov	r0, r3
 81049bc:	f000 f87a 	bl	8104ab4 <RCCEx_PLL2_Config>
 81049c0:	4603      	mov	r3, r0
 81049c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81049ca:	2b00      	cmp	r3, #0
 81049cc:	d003      	beq.n	81049d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81049d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049de:	2100      	movs	r1, #0
 81049e0:	6139      	str	r1, [r7, #16]
 81049e2:	f003 0308 	and.w	r3, r3, #8
 81049e6:	617b      	str	r3, [r7, #20]
 81049e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81049ec:	460b      	mov	r3, r1
 81049ee:	4313      	orrs	r3, r2
 81049f0:	d011      	beq.n	8104a16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049f6:	3328      	adds	r3, #40	@ 0x28
 81049f8:	2100      	movs	r1, #0
 81049fa:	4618      	mov	r0, r3
 81049fc:	f000 f90c 	bl	8104c18 <RCCEx_PLL3_Config>
 8104a00:	4603      	mov	r3, r0
 8104a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8104a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d003      	beq.n	8104a16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a1e:	2100      	movs	r1, #0
 8104a20:	60b9      	str	r1, [r7, #8]
 8104a22:	f003 0310 	and.w	r3, r3, #16
 8104a26:	60fb      	str	r3, [r7, #12]
 8104a28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104a2c:	460b      	mov	r3, r1
 8104a2e:	4313      	orrs	r3, r2
 8104a30:	d011      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a36:	3328      	adds	r3, #40	@ 0x28
 8104a38:	2101      	movs	r1, #1
 8104a3a:	4618      	mov	r0, r3
 8104a3c:	f000 f8ec 	bl	8104c18 <RCCEx_PLL3_Config>
 8104a40:	4603      	mov	r3, r0
 8104a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a4a:	2b00      	cmp	r3, #0
 8104a4c:	d003      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a5e:	2100      	movs	r1, #0
 8104a60:	6039      	str	r1, [r7, #0]
 8104a62:	f003 0320 	and.w	r3, r3, #32
 8104a66:	607b      	str	r3, [r7, #4]
 8104a68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104a6c:	460b      	mov	r3, r1
 8104a6e:	4313      	orrs	r3, r2
 8104a70:	d011      	beq.n	8104a96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a76:	3328      	adds	r3, #40	@ 0x28
 8104a78:	2102      	movs	r1, #2
 8104a7a:	4618      	mov	r0, r3
 8104a7c:	f000 f8cc 	bl	8104c18 <RCCEx_PLL3_Config>
 8104a80:	4603      	mov	r3, r0
 8104a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d003      	beq.n	8104a96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8104a96:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8104a9a:	2b00      	cmp	r3, #0
 8104a9c:	d101      	bne.n	8104aa2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104a9e:	2300      	movs	r3, #0
 8104aa0:	e000      	b.n	8104aa4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104aa2:	2301      	movs	r3, #1
}
 8104aa4:	4618      	mov	r0, r3
 8104aa6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8104aaa:	46bd      	mov	sp, r7
 8104aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104ab0:	58024400 	.word	0x58024400

08104ab4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104ab4:	b580      	push	{r7, lr}
 8104ab6:	b084      	sub	sp, #16
 8104ab8:	af00      	add	r7, sp, #0
 8104aba:	6078      	str	r0, [r7, #4]
 8104abc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104abe:	2300      	movs	r3, #0
 8104ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104ac2:	4b54      	ldr	r3, [pc, #336]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ac6:	f003 0303 	and.w	r3, r3, #3
 8104aca:	2b03      	cmp	r3, #3
 8104acc:	d101      	bne.n	8104ad2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104ace:	2301      	movs	r3, #1
 8104ad0:	e09b      	b.n	8104c0a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104ad2:	4b50      	ldr	r3, [pc, #320]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	4a4f      	ldr	r2, [pc, #316]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104ad8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8104adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104ade:	f7fe f82f 	bl	8102b40 <HAL_GetTick>
 8104ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104ae4:	e008      	b.n	8104af8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104ae6:	f7fe f82b 	bl	8102b40 <HAL_GetTick>
 8104aea:	4602      	mov	r2, r0
 8104aec:	68bb      	ldr	r3, [r7, #8]
 8104aee:	1ad3      	subs	r3, r2, r3
 8104af0:	2b02      	cmp	r3, #2
 8104af2:	d901      	bls.n	8104af8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104af4:	2303      	movs	r3, #3
 8104af6:	e088      	b.n	8104c0a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104af8:	4b46      	ldr	r3, [pc, #280]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	d1f0      	bne.n	8104ae6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104b04:	4b43      	ldr	r3, [pc, #268]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104b08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	031b      	lsls	r3, r3, #12
 8104b12:	4940      	ldr	r1, [pc, #256]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b14:	4313      	orrs	r3, r2
 8104b16:	628b      	str	r3, [r1, #40]	@ 0x28
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	685b      	ldr	r3, [r3, #4]
 8104b1c:	3b01      	subs	r3, #1
 8104b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	689b      	ldr	r3, [r3, #8]
 8104b26:	3b01      	subs	r3, #1
 8104b28:	025b      	lsls	r3, r3, #9
 8104b2a:	b29b      	uxth	r3, r3
 8104b2c:	431a      	orrs	r2, r3
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	68db      	ldr	r3, [r3, #12]
 8104b32:	3b01      	subs	r3, #1
 8104b34:	041b      	lsls	r3, r3, #16
 8104b36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104b3a:	431a      	orrs	r2, r3
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	691b      	ldr	r3, [r3, #16]
 8104b40:	3b01      	subs	r3, #1
 8104b42:	061b      	lsls	r3, r3, #24
 8104b44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104b48:	4932      	ldr	r1, [pc, #200]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b4a:	4313      	orrs	r3, r2
 8104b4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104b4e:	4b31      	ldr	r3, [pc, #196]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	695b      	ldr	r3, [r3, #20]
 8104b5a:	492e      	ldr	r1, [pc, #184]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b5c:	4313      	orrs	r3, r2
 8104b5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104b60:	4b2c      	ldr	r3, [pc, #176]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b64:	f023 0220 	bic.w	r2, r3, #32
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	699b      	ldr	r3, [r3, #24]
 8104b6c:	4929      	ldr	r1, [pc, #164]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b6e:	4313      	orrs	r3, r2
 8104b70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104b72:	4b28      	ldr	r3, [pc, #160]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b76:	4a27      	ldr	r2, [pc, #156]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b78:	f023 0310 	bic.w	r3, r3, #16
 8104b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104b7e:	4b25      	ldr	r3, [pc, #148]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104b86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104b8a:	687a      	ldr	r2, [r7, #4]
 8104b8c:	69d2      	ldr	r2, [r2, #28]
 8104b8e:	00d2      	lsls	r2, r2, #3
 8104b90:	4920      	ldr	r1, [pc, #128]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b92:	4313      	orrs	r3, r2
 8104b94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104b96:	4b1f      	ldr	r3, [pc, #124]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104b9c:	f043 0310 	orr.w	r3, r3, #16
 8104ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104ba2:	683b      	ldr	r3, [r7, #0]
 8104ba4:	2b00      	cmp	r3, #0
 8104ba6:	d106      	bne.n	8104bb6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bac:	4a19      	ldr	r2, [pc, #100]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104bb4:	e00f      	b.n	8104bd6 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104bb6:	683b      	ldr	r3, [r7, #0]
 8104bb8:	2b01      	cmp	r3, #1
 8104bba:	d106      	bne.n	8104bca <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104bbc:	4b15      	ldr	r3, [pc, #84]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bc0:	4a14      	ldr	r2, [pc, #80]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104bc8:	e005      	b.n	8104bd6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104bca:	4b12      	ldr	r3, [pc, #72]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bce:	4a11      	ldr	r2, [pc, #68]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	4a0e      	ldr	r2, [pc, #56]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8104be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104be2:	f7fd ffad 	bl	8102b40 <HAL_GetTick>
 8104be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104be8:	e008      	b.n	8104bfc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104bea:	f7fd ffa9 	bl	8102b40 <HAL_GetTick>
 8104bee:	4602      	mov	r2, r0
 8104bf0:	68bb      	ldr	r3, [r7, #8]
 8104bf2:	1ad3      	subs	r3, r2, r3
 8104bf4:	2b02      	cmp	r3, #2
 8104bf6:	d901      	bls.n	8104bfc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104bf8:	2303      	movs	r3, #3
 8104bfa:	e006      	b.n	8104c0a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104bfc:	4b05      	ldr	r3, [pc, #20]	@ (8104c14 <RCCEx_PLL2_Config+0x160>)
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104c04:	2b00      	cmp	r3, #0
 8104c06:	d0f0      	beq.n	8104bea <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8104c0a:	4618      	mov	r0, r3
 8104c0c:	3710      	adds	r7, #16
 8104c0e:	46bd      	mov	sp, r7
 8104c10:	bd80      	pop	{r7, pc}
 8104c12:	bf00      	nop
 8104c14:	58024400 	.word	0x58024400

08104c18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104c18:	b580      	push	{r7, lr}
 8104c1a:	b084      	sub	sp, #16
 8104c1c:	af00      	add	r7, sp, #0
 8104c1e:	6078      	str	r0, [r7, #4]
 8104c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104c22:	2300      	movs	r3, #0
 8104c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104c26:	4b54      	ldr	r3, [pc, #336]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c2a:	f003 0303 	and.w	r3, r3, #3
 8104c2e:	2b03      	cmp	r3, #3
 8104c30:	d101      	bne.n	8104c36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104c32:	2301      	movs	r3, #1
 8104c34:	e09b      	b.n	8104d6e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104c36:	4b50      	ldr	r3, [pc, #320]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	4a4f      	ldr	r2, [pc, #316]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c42:	f7fd ff7d 	bl	8102b40 <HAL_GetTick>
 8104c46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104c48:	e008      	b.n	8104c5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104c4a:	f7fd ff79 	bl	8102b40 <HAL_GetTick>
 8104c4e:	4602      	mov	r2, r0
 8104c50:	68bb      	ldr	r3, [r7, #8]
 8104c52:	1ad3      	subs	r3, r2, r3
 8104c54:	2b02      	cmp	r3, #2
 8104c56:	d901      	bls.n	8104c5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104c58:	2303      	movs	r3, #3
 8104c5a:	e088      	b.n	8104d6e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104c5c:	4b46      	ldr	r3, [pc, #280]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104c64:	2b00      	cmp	r3, #0
 8104c66:	d1f0      	bne.n	8104c4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104c68:	4b43      	ldr	r3, [pc, #268]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	051b      	lsls	r3, r3, #20
 8104c76:	4940      	ldr	r1, [pc, #256]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104c78:	4313      	orrs	r3, r2
 8104c7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	685b      	ldr	r3, [r3, #4]
 8104c80:	3b01      	subs	r3, #1
 8104c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	689b      	ldr	r3, [r3, #8]
 8104c8a:	3b01      	subs	r3, #1
 8104c8c:	025b      	lsls	r3, r3, #9
 8104c8e:	b29b      	uxth	r3, r3
 8104c90:	431a      	orrs	r2, r3
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	68db      	ldr	r3, [r3, #12]
 8104c96:	3b01      	subs	r3, #1
 8104c98:	041b      	lsls	r3, r3, #16
 8104c9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104c9e:	431a      	orrs	r2, r3
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	691b      	ldr	r3, [r3, #16]
 8104ca4:	3b01      	subs	r3, #1
 8104ca6:	061b      	lsls	r3, r3, #24
 8104ca8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104cac:	4932      	ldr	r1, [pc, #200]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cae:	4313      	orrs	r3, r2
 8104cb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104cb2:	4b31      	ldr	r3, [pc, #196]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	695b      	ldr	r3, [r3, #20]
 8104cbe:	492e      	ldr	r1, [pc, #184]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cc0:	4313      	orrs	r3, r2
 8104cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	699b      	ldr	r3, [r3, #24]
 8104cd0:	4929      	ldr	r1, [pc, #164]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cd2:	4313      	orrs	r3, r2
 8104cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104cd6:	4b28      	ldr	r3, [pc, #160]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cda:	4a27      	ldr	r2, [pc, #156]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104ce2:	4b25      	ldr	r3, [pc, #148]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104cea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104cee:	687a      	ldr	r2, [r7, #4]
 8104cf0:	69d2      	ldr	r2, [r2, #28]
 8104cf2:	00d2      	lsls	r2, r2, #3
 8104cf4:	4920      	ldr	r1, [pc, #128]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cf6:	4313      	orrs	r3, r2
 8104cf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104d06:	683b      	ldr	r3, [r7, #0]
 8104d08:	2b00      	cmp	r3, #0
 8104d0a:	d106      	bne.n	8104d1a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d10:	4a19      	ldr	r2, [pc, #100]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104d18:	e00f      	b.n	8104d3a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104d1a:	683b      	ldr	r3, [r7, #0]
 8104d1c:	2b01      	cmp	r3, #1
 8104d1e:	d106      	bne.n	8104d2e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104d20:	4b15      	ldr	r3, [pc, #84]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d24:	4a14      	ldr	r2, [pc, #80]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104d2c:	e005      	b.n	8104d3a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104d2e:	4b12      	ldr	r3, [pc, #72]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d32:	4a11      	ldr	r2, [pc, #68]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d3c:	681b      	ldr	r3, [r3, #0]
 8104d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104d46:	f7fd fefb 	bl	8102b40 <HAL_GetTick>
 8104d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104d4c:	e008      	b.n	8104d60 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104d4e:	f7fd fef7 	bl	8102b40 <HAL_GetTick>
 8104d52:	4602      	mov	r2, r0
 8104d54:	68bb      	ldr	r3, [r7, #8]
 8104d56:	1ad3      	subs	r3, r2, r3
 8104d58:	2b02      	cmp	r3, #2
 8104d5a:	d901      	bls.n	8104d60 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104d5c:	2303      	movs	r3, #3
 8104d5e:	e006      	b.n	8104d6e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104d60:	4b05      	ldr	r3, [pc, #20]	@ (8104d78 <RCCEx_PLL3_Config+0x160>)
 8104d62:	681b      	ldr	r3, [r3, #0]
 8104d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104d68:	2b00      	cmp	r3, #0
 8104d6a:	d0f0      	beq.n	8104d4e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8104d6e:	4618      	mov	r0, r3
 8104d70:	3710      	adds	r7, #16
 8104d72:	46bd      	mov	sp, r7
 8104d74:	bd80      	pop	{r7, pc}
 8104d76:	bf00      	nop
 8104d78:	58024400 	.word	0x58024400

08104d7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104d7c:	b580      	push	{r7, lr}
 8104d7e:	b084      	sub	sp, #16
 8104d80:	af00      	add	r7, sp, #0
 8104d82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	2b00      	cmp	r3, #0
 8104d88:	d101      	bne.n	8104d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104d8a:	2301      	movs	r3, #1
 8104d8c:	e10f      	b.n	8104fae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	2200      	movs	r2, #0
 8104d92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	4a87      	ldr	r2, [pc, #540]	@ (8104fb8 <HAL_SPI_Init+0x23c>)
 8104d9a:	4293      	cmp	r3, r2
 8104d9c:	d00f      	beq.n	8104dbe <HAL_SPI_Init+0x42>
 8104d9e:	687b      	ldr	r3, [r7, #4]
 8104da0:	681b      	ldr	r3, [r3, #0]
 8104da2:	4a86      	ldr	r2, [pc, #536]	@ (8104fbc <HAL_SPI_Init+0x240>)
 8104da4:	4293      	cmp	r3, r2
 8104da6:	d00a      	beq.n	8104dbe <HAL_SPI_Init+0x42>
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	4a84      	ldr	r2, [pc, #528]	@ (8104fc0 <HAL_SPI_Init+0x244>)
 8104dae:	4293      	cmp	r3, r2
 8104db0:	d005      	beq.n	8104dbe <HAL_SPI_Init+0x42>
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	68db      	ldr	r3, [r3, #12]
 8104db6:	2b0f      	cmp	r3, #15
 8104db8:	d901      	bls.n	8104dbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104dba:	2301      	movs	r3, #1
 8104dbc:	e0f7      	b.n	8104fae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104dbe:	6878      	ldr	r0, [r7, #4]
 8104dc0:	f000 fd06 	bl	81057d0 <SPI_GetPacketSize>
 8104dc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	4a7b      	ldr	r2, [pc, #492]	@ (8104fb8 <HAL_SPI_Init+0x23c>)
 8104dcc:	4293      	cmp	r3, r2
 8104dce:	d00c      	beq.n	8104dea <HAL_SPI_Init+0x6e>
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	681b      	ldr	r3, [r3, #0]
 8104dd4:	4a79      	ldr	r2, [pc, #484]	@ (8104fbc <HAL_SPI_Init+0x240>)
 8104dd6:	4293      	cmp	r3, r2
 8104dd8:	d007      	beq.n	8104dea <HAL_SPI_Init+0x6e>
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	4a78      	ldr	r2, [pc, #480]	@ (8104fc0 <HAL_SPI_Init+0x244>)
 8104de0:	4293      	cmp	r3, r2
 8104de2:	d002      	beq.n	8104dea <HAL_SPI_Init+0x6e>
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	2b08      	cmp	r3, #8
 8104de8:	d811      	bhi.n	8104e0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104dee:	4a72      	ldr	r2, [pc, #456]	@ (8104fb8 <HAL_SPI_Init+0x23c>)
 8104df0:	4293      	cmp	r3, r2
 8104df2:	d009      	beq.n	8104e08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	4a70      	ldr	r2, [pc, #448]	@ (8104fbc <HAL_SPI_Init+0x240>)
 8104dfa:	4293      	cmp	r3, r2
 8104dfc:	d004      	beq.n	8104e08 <HAL_SPI_Init+0x8c>
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	4a6f      	ldr	r2, [pc, #444]	@ (8104fc0 <HAL_SPI_Init+0x244>)
 8104e04:	4293      	cmp	r3, r2
 8104e06:	d104      	bne.n	8104e12 <HAL_SPI_Init+0x96>
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	2b10      	cmp	r3, #16
 8104e0c:	d901      	bls.n	8104e12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8104e0e:	2301      	movs	r3, #1
 8104e10:	e0cd      	b.n	8104fae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8104e18:	b2db      	uxtb	r3, r3
 8104e1a:	2b00      	cmp	r3, #0
 8104e1c:	d106      	bne.n	8104e2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	2200      	movs	r2, #0
 8104e22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104e26:	6878      	ldr	r0, [r7, #4]
 8104e28:	f7fd fc56 	bl	81026d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	2202      	movs	r2, #2
 8104e30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	681b      	ldr	r3, [r3, #0]
 8104e38:	681a      	ldr	r2, [r3, #0]
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	f022 0201 	bic.w	r2, r2, #1
 8104e42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	681b      	ldr	r3, [r3, #0]
 8104e48:	689b      	ldr	r3, [r3, #8]
 8104e4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8104e4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	699b      	ldr	r3, [r3, #24]
 8104e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104e58:	d119      	bne.n	8104e8e <HAL_SPI_Init+0x112>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	685b      	ldr	r3, [r3, #4]
 8104e5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104e62:	d103      	bne.n	8104e6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104e68:	2b00      	cmp	r3, #0
 8104e6a:	d008      	beq.n	8104e7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d10c      	bne.n	8104e8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104e7c:	d107      	bne.n	8104e8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	681a      	ldr	r2, [r3, #0]
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8104e8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	685b      	ldr	r3, [r3, #4]
 8104e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d00f      	beq.n	8104eba <HAL_SPI_Init+0x13e>
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	68db      	ldr	r3, [r3, #12]
 8104e9e:	2b06      	cmp	r3, #6
 8104ea0:	d90b      	bls.n	8104eba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	681b      	ldr	r3, [r3, #0]
 8104eb4:	430a      	orrs	r2, r1
 8104eb6:	601a      	str	r2, [r3, #0]
 8104eb8:	e007      	b.n	8104eca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	681b      	ldr	r3, [r3, #0]
 8104ebe:	681a      	ldr	r2, [r3, #0]
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	681b      	ldr	r3, [r3, #0]
 8104ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104ec8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	69da      	ldr	r2, [r3, #28]
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ed2:	431a      	orrs	r2, r3
 8104ed4:	68bb      	ldr	r3, [r7, #8]
 8104ed6:	431a      	orrs	r2, r3
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104edc:	ea42 0103 	orr.w	r1, r2, r3
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	68da      	ldr	r2, [r3, #12]
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	430a      	orrs	r2, r1
 8104eea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104ef4:	431a      	orrs	r2, r3
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104efa:	431a      	orrs	r2, r3
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	699b      	ldr	r3, [r3, #24]
 8104f00:	431a      	orrs	r2, r3
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	691b      	ldr	r3, [r3, #16]
 8104f06:	431a      	orrs	r2, r3
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	695b      	ldr	r3, [r3, #20]
 8104f0c:	431a      	orrs	r2, r3
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	6a1b      	ldr	r3, [r3, #32]
 8104f12:	431a      	orrs	r2, r3
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	685b      	ldr	r3, [r3, #4]
 8104f18:	431a      	orrs	r2, r3
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104f1e:	431a      	orrs	r2, r3
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	689b      	ldr	r3, [r3, #8]
 8104f24:	431a      	orrs	r2, r3
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104f2a:	ea42 0103 	orr.w	r1, r2, r3
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	430a      	orrs	r2, r1
 8104f38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	685b      	ldr	r3, [r3, #4]
 8104f3e:	2b00      	cmp	r3, #0
 8104f40:	d113      	bne.n	8104f6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	689b      	ldr	r3, [r3, #8]
 8104f48:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	681b      	ldr	r3, [r3, #0]
 8104f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104f54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	681b      	ldr	r3, [r3, #0]
 8104f5a:	689b      	ldr	r3, [r3, #8]
 8104f5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8104f68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	f022 0201 	bic.w	r2, r2, #1
 8104f78:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	685b      	ldr	r3, [r3, #4]
 8104f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104f82:	2b00      	cmp	r3, #0
 8104f84:	d00a      	beq.n	8104f9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	68db      	ldr	r3, [r3, #12]
 8104f8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	430a      	orrs	r2, r1
 8104f9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	2200      	movs	r2, #0
 8104fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	2201      	movs	r2, #1
 8104fa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8104fac:	2300      	movs	r3, #0
}
 8104fae:	4618      	mov	r0, r3
 8104fb0:	3710      	adds	r7, #16
 8104fb2:	46bd      	mov	sp, r7
 8104fb4:	bd80      	pop	{r7, pc}
 8104fb6:	bf00      	nop
 8104fb8:	40013000 	.word	0x40013000
 8104fbc:	40003800 	.word	0x40003800
 8104fc0:	40003c00 	.word	0x40003c00

08104fc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8104fc4:	b580      	push	{r7, lr}
 8104fc6:	b08e      	sub	sp, #56	@ 0x38
 8104fc8:	af02      	add	r7, sp, #8
 8104fca:	60f8      	str	r0, [r7, #12]
 8104fcc:	60b9      	str	r1, [r7, #8]
 8104fce:	607a      	str	r2, [r7, #4]
 8104fd0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104fd2:	68fb      	ldr	r3, [r7, #12]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	3320      	adds	r3, #32
 8104fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	3330      	adds	r3, #48	@ 0x30
 8104fe0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104fe6:	095b      	lsrs	r3, r3, #5
 8104fe8:	b29b      	uxth	r3, r3
 8104fea:	3301      	adds	r3, #1
 8104fec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104fee:	f7fd fda7 	bl	8102b40 <HAL_GetTick>
 8104ff2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8104ff4:	887b      	ldrh	r3, [r7, #2]
 8104ff6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8104ff8:	887b      	ldrh	r3, [r7, #2]
 8104ffa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8104ffc:	68fb      	ldr	r3, [r7, #12]
 8104ffe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8105002:	b2db      	uxtb	r3, r3
 8105004:	2b01      	cmp	r3, #1
 8105006:	d001      	beq.n	810500c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8105008:	2302      	movs	r3, #2
 810500a:	e30e      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810500c:	68bb      	ldr	r3, [r7, #8]
 810500e:	2b00      	cmp	r3, #0
 8105010:	d005      	beq.n	810501e <HAL_SPI_TransmitReceive+0x5a>
 8105012:	687b      	ldr	r3, [r7, #4]
 8105014:	2b00      	cmp	r3, #0
 8105016:	d002      	beq.n	810501e <HAL_SPI_TransmitReceive+0x5a>
 8105018:	887b      	ldrh	r3, [r7, #2]
 810501a:	2b00      	cmp	r3, #0
 810501c:	d101      	bne.n	8105022 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 810501e:	2301      	movs	r3, #1
 8105020:	e303      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8105022:	68fb      	ldr	r3, [r7, #12]
 8105024:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8105028:	2b01      	cmp	r3, #1
 810502a:	d101      	bne.n	8105030 <HAL_SPI_TransmitReceive+0x6c>
 810502c:	2302      	movs	r3, #2
 810502e:	e2fc      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
 8105030:	68fb      	ldr	r3, [r7, #12]
 8105032:	2201      	movs	r2, #1
 8105034:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8105038:	68fb      	ldr	r3, [r7, #12]
 810503a:	2205      	movs	r2, #5
 810503c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105040:	68fb      	ldr	r3, [r7, #12]
 8105042:	2200      	movs	r2, #0
 8105044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8105048:	68fb      	ldr	r3, [r7, #12]
 810504a:	687a      	ldr	r2, [r7, #4]
 810504c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 810504e:	68fb      	ldr	r3, [r7, #12]
 8105050:	887a      	ldrh	r2, [r7, #2]
 8105052:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8105056:	68fb      	ldr	r3, [r7, #12]
 8105058:	887a      	ldrh	r2, [r7, #2]
 810505a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 810505e:	68fb      	ldr	r3, [r7, #12]
 8105060:	68ba      	ldr	r2, [r7, #8]
 8105062:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8105064:	68fb      	ldr	r3, [r7, #12]
 8105066:	887a      	ldrh	r2, [r7, #2]
 8105068:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 810506c:	68fb      	ldr	r3, [r7, #12]
 810506e:	887a      	ldrh	r2, [r7, #2]
 8105070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8105074:	68fb      	ldr	r3, [r7, #12]
 8105076:	2200      	movs	r2, #0
 8105078:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 810507a:	68fb      	ldr	r3, [r7, #12]
 810507c:	2200      	movs	r2, #0
 810507e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8105080:	68fb      	ldr	r3, [r7, #12]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	68da      	ldr	r2, [r3, #12]
 8105086:	68fb      	ldr	r3, [r7, #12]
 8105088:	681b      	ldr	r3, [r3, #0]
 810508a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 810508e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8105090:	68fb      	ldr	r3, [r7, #12]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	4a70      	ldr	r2, [pc, #448]	@ (8105258 <HAL_SPI_TransmitReceive+0x294>)
 8105096:	4293      	cmp	r3, r2
 8105098:	d009      	beq.n	81050ae <HAL_SPI_TransmitReceive+0xea>
 810509a:	68fb      	ldr	r3, [r7, #12]
 810509c:	681b      	ldr	r3, [r3, #0]
 810509e:	4a6f      	ldr	r2, [pc, #444]	@ (810525c <HAL_SPI_TransmitReceive+0x298>)
 81050a0:	4293      	cmp	r3, r2
 81050a2:	d004      	beq.n	81050ae <HAL_SPI_TransmitReceive+0xea>
 81050a4:	68fb      	ldr	r3, [r7, #12]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	4a6d      	ldr	r2, [pc, #436]	@ (8105260 <HAL_SPI_TransmitReceive+0x29c>)
 81050aa:	4293      	cmp	r3, r2
 81050ac:	d102      	bne.n	81050b4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 81050ae:	2310      	movs	r3, #16
 81050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81050b2:	e001      	b.n	81050b8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 81050b4:	2308      	movs	r3, #8
 81050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81050b8:	68fb      	ldr	r3, [r7, #12]
 81050ba:	681b      	ldr	r3, [r3, #0]
 81050bc:	685b      	ldr	r3, [r3, #4]
 81050be:	0c1b      	lsrs	r3, r3, #16
 81050c0:	041b      	lsls	r3, r3, #16
 81050c2:	8879      	ldrh	r1, [r7, #2]
 81050c4:	68fa      	ldr	r2, [r7, #12]
 81050c6:	6812      	ldr	r2, [r2, #0]
 81050c8:	430b      	orrs	r3, r1
 81050ca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 81050cc:	68fb      	ldr	r3, [r7, #12]
 81050ce:	681b      	ldr	r3, [r3, #0]
 81050d0:	681a      	ldr	r2, [r3, #0]
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	f042 0201 	orr.w	r2, r2, #1
 81050da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	685b      	ldr	r3, [r3, #4]
 81050e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81050e4:	d107      	bne.n	81050f6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81050e6:	68fb      	ldr	r3, [r7, #12]
 81050e8:	681b      	ldr	r3, [r3, #0]
 81050ea:	681a      	ldr	r2, [r3, #0]
 81050ec:	68fb      	ldr	r3, [r7, #12]
 81050ee:	681b      	ldr	r3, [r3, #0]
 81050f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81050f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	68db      	ldr	r3, [r3, #12]
 81050fa:	2b0f      	cmp	r3, #15
 81050fc:	f240 80a2 	bls.w	8105244 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8105100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105102:	089b      	lsrs	r3, r3, #2
 8105104:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105106:	e094      	b.n	8105232 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	695b      	ldr	r3, [r3, #20]
 810510e:	f003 0302 	and.w	r3, r3, #2
 8105112:	2b02      	cmp	r3, #2
 8105114:	d120      	bne.n	8105158 <HAL_SPI_TransmitReceive+0x194>
 8105116:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8105118:	2b00      	cmp	r3, #0
 810511a:	d01d      	beq.n	8105158 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 810511c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810511e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8105120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105122:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8105124:	429a      	cmp	r2, r3
 8105126:	d217      	bcs.n	8105158 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8105128:	68fb      	ldr	r3, [r7, #12]
 810512a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	681b      	ldr	r3, [r3, #0]
 8105130:	6812      	ldr	r2, [r2, #0]
 8105132:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8105134:	68fb      	ldr	r3, [r7, #12]
 8105136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105138:	1d1a      	adds	r2, r3, #4
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 810513e:	68fb      	ldr	r3, [r7, #12]
 8105140:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105144:	b29b      	uxth	r3, r3
 8105146:	3b01      	subs	r3, #1
 8105148:	b29a      	uxth	r2, r3
 810514a:	68fb      	ldr	r3, [r7, #12]
 810514c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105156:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	695b      	ldr	r3, [r3, #20]
 810515e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8105160:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8105162:	2b00      	cmp	r3, #0
 8105164:	d065      	beq.n	8105232 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8105166:	68fb      	ldr	r3, [r7, #12]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	695b      	ldr	r3, [r3, #20]
 810516c:	f003 0301 	and.w	r3, r3, #1
 8105170:	2b01      	cmp	r3, #1
 8105172:	d118      	bne.n	81051a6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105174:	68fb      	ldr	r3, [r7, #12]
 8105176:	681a      	ldr	r2, [r3, #0]
 8105178:	68fb      	ldr	r3, [r7, #12]
 810517a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810517c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810517e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105180:	68fb      	ldr	r3, [r7, #12]
 8105182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105184:	1d1a      	adds	r2, r3, #4
 8105186:	68fb      	ldr	r3, [r7, #12]
 8105188:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105190:	b29b      	uxth	r3, r3
 8105192:	3b01      	subs	r3, #1
 8105194:	b29a      	uxth	r2, r3
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810519c:	68fb      	ldr	r3, [r7, #12]
 810519e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81051a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 81051a4:	e045      	b.n	8105232 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81051a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81051a8:	8bfb      	ldrh	r3, [r7, #30]
 81051aa:	429a      	cmp	r2, r3
 81051ac:	d21d      	bcs.n	81051ea <HAL_SPI_TransmitReceive+0x226>
 81051ae:	697b      	ldr	r3, [r7, #20]
 81051b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81051b4:	2b00      	cmp	r3, #0
 81051b6:	d018      	beq.n	81051ea <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	681a      	ldr	r2, [r3, #0]
 81051bc:	68fb      	ldr	r3, [r7, #12]
 81051be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81051c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81051c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81051c8:	1d1a      	adds	r2, r3, #4
 81051ca:	68fb      	ldr	r3, [r7, #12]
 81051cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81051ce:	68fb      	ldr	r3, [r7, #12]
 81051d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81051d4:	b29b      	uxth	r3, r3
 81051d6:	3b01      	subs	r3, #1
 81051d8:	b29a      	uxth	r2, r3
 81051da:	68fb      	ldr	r3, [r7, #12]
 81051dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81051e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 81051e8:	e023      	b.n	8105232 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81051ea:	f7fd fca9 	bl	8102b40 <HAL_GetTick>
 81051ee:	4602      	mov	r2, r0
 81051f0:	69bb      	ldr	r3, [r7, #24]
 81051f2:	1ad3      	subs	r3, r2, r3
 81051f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81051f6:	429a      	cmp	r2, r3
 81051f8:	d803      	bhi.n	8105202 <HAL_SPI_TransmitReceive+0x23e>
 81051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8105200:	d102      	bne.n	8105208 <HAL_SPI_TransmitReceive+0x244>
 8105202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105204:	2b00      	cmp	r3, #0
 8105206:	d114      	bne.n	8105232 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8105208:	68f8      	ldr	r0, [r7, #12]
 810520a:	f000 fa13 	bl	8105634 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105214:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 810521e:	68fb      	ldr	r3, [r7, #12]
 8105220:	2201      	movs	r2, #1
 8105222:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8105226:	68fb      	ldr	r3, [r7, #12]
 8105228:	2200      	movs	r2, #0
 810522a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 810522e:	2303      	movs	r3, #3
 8105230:	e1fb      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105232:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8105234:	2b00      	cmp	r3, #0
 8105236:	f47f af67 	bne.w	8105108 <HAL_SPI_TransmitReceive+0x144>
 810523a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810523c:	2b00      	cmp	r3, #0
 810523e:	f47f af63 	bne.w	8105108 <HAL_SPI_TransmitReceive+0x144>
 8105242:	e1cc      	b.n	81055de <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	68db      	ldr	r3, [r3, #12]
 8105248:	2b07      	cmp	r3, #7
 810524a:	f240 81c0 	bls.w	81055ce <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 810524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105250:	085b      	lsrs	r3, r3, #1
 8105252:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105254:	e0c7      	b.n	81053e6 <HAL_SPI_TransmitReceive+0x422>
 8105256:	bf00      	nop
 8105258:	40013000 	.word	0x40013000
 810525c:	40003800 	.word	0x40003800
 8105260:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8105264:	68fb      	ldr	r3, [r7, #12]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	695b      	ldr	r3, [r3, #20]
 810526a:	f003 0302 	and.w	r3, r3, #2
 810526e:	2b02      	cmp	r3, #2
 8105270:	d11f      	bne.n	81052b2 <HAL_SPI_TransmitReceive+0x2ee>
 8105272:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8105274:	2b00      	cmp	r3, #0
 8105276:	d01c      	beq.n	81052b2 <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8105278:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810527a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810527c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810527e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8105280:	429a      	cmp	r2, r3
 8105282:	d216      	bcs.n	81052b2 <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8105284:	68fb      	ldr	r3, [r7, #12]
 8105286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105288:	881a      	ldrh	r2, [r3, #0]
 810528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810528c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810528e:	68fb      	ldr	r3, [r7, #12]
 8105290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105292:	1c9a      	adds	r2, r3, #2
 8105294:	68fb      	ldr	r3, [r7, #12]
 8105296:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8105298:	68fb      	ldr	r3, [r7, #12]
 810529a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810529e:	b29b      	uxth	r3, r3
 81052a0:	3b01      	subs	r3, #1
 81052a2:	b29a      	uxth	r2, r3
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81052aa:	68fb      	ldr	r3, [r7, #12]
 81052ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81052b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 81052b2:	68fb      	ldr	r3, [r7, #12]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	695b      	ldr	r3, [r3, #20]
 81052b8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 81052ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81052bc:	2b00      	cmp	r3, #0
 81052be:	f000 8092 	beq.w	81053e6 <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81052c2:	68fb      	ldr	r3, [r7, #12]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	695b      	ldr	r3, [r3, #20]
 81052c8:	f003 0301 	and.w	r3, r3, #1
 81052cc:	2b01      	cmp	r3, #1
 81052ce:	d118      	bne.n	8105302 <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81052d4:	6a3a      	ldr	r2, [r7, #32]
 81052d6:	8812      	ldrh	r2, [r2, #0]
 81052d8:	b292      	uxth	r2, r2
 81052da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81052dc:	68fb      	ldr	r3, [r7, #12]
 81052de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81052e0:	1c9a      	adds	r2, r3, #2
 81052e2:	68fb      	ldr	r3, [r7, #12]
 81052e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81052ec:	b29b      	uxth	r3, r3
 81052ee:	3b01      	subs	r3, #1
 81052f0:	b29a      	uxth	r2, r3
 81052f2:	68fb      	ldr	r3, [r7, #12]
 81052f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81052f8:	68fb      	ldr	r3, [r7, #12]
 81052fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81052fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105300:	e071      	b.n	81053e6 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8105302:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8105304:	8bfb      	ldrh	r3, [r7, #30]
 8105306:	429a      	cmp	r2, r3
 8105308:	d228      	bcs.n	810535c <HAL_SPI_TransmitReceive+0x398>
 810530a:	697b      	ldr	r3, [r7, #20]
 810530c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105310:	2b00      	cmp	r3, #0
 8105312:	d023      	beq.n	810535c <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105314:	68fb      	ldr	r3, [r7, #12]
 8105316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105318:	6a3a      	ldr	r2, [r7, #32]
 810531a:	8812      	ldrh	r2, [r2, #0]
 810531c:	b292      	uxth	r2, r2
 810531e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105320:	68fb      	ldr	r3, [r7, #12]
 8105322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105324:	1c9a      	adds	r2, r3, #2
 8105326:	68fb      	ldr	r3, [r7, #12]
 8105328:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810532e:	6a3a      	ldr	r2, [r7, #32]
 8105330:	8812      	ldrh	r2, [r2, #0]
 8105332:	b292      	uxth	r2, r2
 8105334:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105336:	68fb      	ldr	r3, [r7, #12]
 8105338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810533a:	1c9a      	adds	r2, r3, #2
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105340:	68fb      	ldr	r3, [r7, #12]
 8105342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105346:	b29b      	uxth	r3, r3
 8105348:	3b02      	subs	r3, #2
 810534a:	b29a      	uxth	r2, r3
 810534c:	68fb      	ldr	r3, [r7, #12]
 810534e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105358:	853b      	strh	r3, [r7, #40]	@ 0x28
 810535a:	e044      	b.n	81053e6 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 810535c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810535e:	2b01      	cmp	r3, #1
 8105360:	d11d      	bne.n	810539e <HAL_SPI_TransmitReceive+0x3da>
 8105362:	697b      	ldr	r3, [r7, #20]
 8105364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8105368:	2b00      	cmp	r3, #0
 810536a:	d018      	beq.n	810539e <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105370:	6a3a      	ldr	r2, [r7, #32]
 8105372:	8812      	ldrh	r2, [r2, #0]
 8105374:	b292      	uxth	r2, r2
 8105376:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810537c:	1c9a      	adds	r2, r3, #2
 810537e:	68fb      	ldr	r3, [r7, #12]
 8105380:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8105382:	68fb      	ldr	r3, [r7, #12]
 8105384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105388:	b29b      	uxth	r3, r3
 810538a:	3b01      	subs	r3, #1
 810538c:	b29a      	uxth	r2, r3
 810538e:	68fb      	ldr	r3, [r7, #12]
 8105390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810539a:	853b      	strh	r3, [r7, #40]	@ 0x28
 810539c:	e023      	b.n	81053e6 <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810539e:	f7fd fbcf 	bl	8102b40 <HAL_GetTick>
 81053a2:	4602      	mov	r2, r0
 81053a4:	69bb      	ldr	r3, [r7, #24]
 81053a6:	1ad3      	subs	r3, r2, r3
 81053a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81053aa:	429a      	cmp	r2, r3
 81053ac:	d803      	bhi.n	81053b6 <HAL_SPI_TransmitReceive+0x3f2>
 81053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81053b4:	d102      	bne.n	81053bc <HAL_SPI_TransmitReceive+0x3f8>
 81053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053b8:	2b00      	cmp	r3, #0
 81053ba:	d114      	bne.n	81053e6 <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81053bc:	68f8      	ldr	r0, [r7, #12]
 81053be:	f000 f939 	bl	8105634 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81053c2:	68fb      	ldr	r3, [r7, #12]
 81053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81053c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81053cc:	68fb      	ldr	r3, [r7, #12]
 81053ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81053d2:	68fb      	ldr	r3, [r7, #12]
 81053d4:	2201      	movs	r2, #1
 81053d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	2200      	movs	r2, #0
 81053de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81053e2:	2303      	movs	r3, #3
 81053e4:	e121      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81053e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81053e8:	2b00      	cmp	r3, #0
 81053ea:	f47f af3b 	bne.w	8105264 <HAL_SPI_TransmitReceive+0x2a0>
 81053ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81053f0:	2b00      	cmp	r3, #0
 81053f2:	f47f af37 	bne.w	8105264 <HAL_SPI_TransmitReceive+0x2a0>
 81053f6:	e0f2      	b.n	81055de <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 81053f8:	68fb      	ldr	r3, [r7, #12]
 81053fa:	681b      	ldr	r3, [r3, #0]
 81053fc:	695b      	ldr	r3, [r3, #20]
 81053fe:	f003 0302 	and.w	r3, r3, #2
 8105402:	2b02      	cmp	r3, #2
 8105404:	d121      	bne.n	810544a <HAL_SPI_TransmitReceive+0x486>
 8105406:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8105408:	2b00      	cmp	r3, #0
 810540a:	d01e      	beq.n	810544a <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 810540c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810540e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8105410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105412:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8105414:	429a      	cmp	r2, r3
 8105416:	d218      	bcs.n	810544a <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8105418:	68fb      	ldr	r3, [r7, #12]
 810541a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810541c:	68fb      	ldr	r3, [r7, #12]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	3320      	adds	r3, #32
 8105422:	7812      	ldrb	r2, [r2, #0]
 8105424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8105426:	68fb      	ldr	r3, [r7, #12]
 8105428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810542a:	1c5a      	adds	r2, r3, #1
 810542c:	68fb      	ldr	r3, [r7, #12]
 810542e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105436:	b29b      	uxth	r3, r3
 8105438:	3b01      	subs	r3, #1
 810543a:	b29a      	uxth	r2, r3
 810543c:	68fb      	ldr	r3, [r7, #12]
 810543e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105442:	68fb      	ldr	r3, [r7, #12]
 8105444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105448:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810544a:	68fb      	ldr	r3, [r7, #12]
 810544c:	681b      	ldr	r3, [r3, #0]
 810544e:	695b      	ldr	r3, [r3, #20]
 8105450:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8105452:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8105454:	2b00      	cmp	r3, #0
 8105456:	f000 80ba 	beq.w	81055ce <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810545a:	68fb      	ldr	r3, [r7, #12]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	695b      	ldr	r3, [r3, #20]
 8105460:	f003 0301 	and.w	r3, r3, #1
 8105464:	2b01      	cmp	r3, #1
 8105466:	d11b      	bne.n	81054a0 <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8105470:	68fb      	ldr	r3, [r7, #12]
 8105472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105474:	7812      	ldrb	r2, [r2, #0]
 8105476:	b2d2      	uxtb	r2, r2
 8105478:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810547a:	68fb      	ldr	r3, [r7, #12]
 810547c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810547e:	1c5a      	adds	r2, r3, #1
 8105480:	68fb      	ldr	r3, [r7, #12]
 8105482:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8105484:	68fb      	ldr	r3, [r7, #12]
 8105486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810548a:	b29b      	uxth	r3, r3
 810548c:	3b01      	subs	r3, #1
 810548e:	b29a      	uxth	r2, r3
 8105490:	68fb      	ldr	r3, [r7, #12]
 8105492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105496:	68fb      	ldr	r3, [r7, #12]
 8105498:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810549c:	853b      	strh	r3, [r7, #40]	@ 0x28
 810549e:	e096      	b.n	81055ce <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81054a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81054a2:	8bfb      	ldrh	r3, [r7, #30]
 81054a4:	429a      	cmp	r2, r3
 81054a6:	d24a      	bcs.n	810553e <HAL_SPI_TransmitReceive+0x57a>
 81054a8:	697b      	ldr	r3, [r7, #20]
 81054aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81054ae:	2b00      	cmp	r3, #0
 81054b0:	d045      	beq.n	810553e <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81054b2:	68fb      	ldr	r3, [r7, #12]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81054ba:	68fb      	ldr	r3, [r7, #12]
 81054bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81054be:	7812      	ldrb	r2, [r2, #0]
 81054c0:	b2d2      	uxtb	r2, r2
 81054c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81054c4:	68fb      	ldr	r3, [r7, #12]
 81054c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81054c8:	1c5a      	adds	r2, r3, #1
 81054ca:	68fb      	ldr	r3, [r7, #12]
 81054cc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81054d6:	68fb      	ldr	r3, [r7, #12]
 81054d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81054da:	7812      	ldrb	r2, [r2, #0]
 81054dc:	b2d2      	uxtb	r2, r2
 81054de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81054e0:	68fb      	ldr	r3, [r7, #12]
 81054e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81054e4:	1c5a      	adds	r2, r3, #1
 81054e6:	68fb      	ldr	r3, [r7, #12]
 81054e8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81054ea:	68fb      	ldr	r3, [r7, #12]
 81054ec:	681b      	ldr	r3, [r3, #0]
 81054ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81054f2:	68fb      	ldr	r3, [r7, #12]
 81054f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81054f6:	7812      	ldrb	r2, [r2, #0]
 81054f8:	b2d2      	uxtb	r2, r2
 81054fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81054fc:	68fb      	ldr	r3, [r7, #12]
 81054fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105500:	1c5a      	adds	r2, r3, #1
 8105502:	68fb      	ldr	r3, [r7, #12]
 8105504:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105506:	68fb      	ldr	r3, [r7, #12]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810550e:	68fb      	ldr	r3, [r7, #12]
 8105510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105512:	7812      	ldrb	r2, [r2, #0]
 8105514:	b2d2      	uxtb	r2, r2
 8105516:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810551c:	1c5a      	adds	r2, r3, #1
 810551e:	68fb      	ldr	r3, [r7, #12]
 8105520:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8105522:	68fb      	ldr	r3, [r7, #12]
 8105524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105528:	b29b      	uxth	r3, r3
 810552a:	3b04      	subs	r3, #4
 810552c:	b29a      	uxth	r2, r3
 810552e:	68fb      	ldr	r3, [r7, #12]
 8105530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810553a:	853b      	strh	r3, [r7, #40]	@ 0x28
 810553c:	e047      	b.n	81055ce <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 810553e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8105540:	2b03      	cmp	r3, #3
 8105542:	d820      	bhi.n	8105586 <HAL_SPI_TransmitReceive+0x5c2>
 8105544:	697b      	ldr	r3, [r7, #20]
 8105546:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 810554a:	2b00      	cmp	r3, #0
 810554c:	d01b      	beq.n	8105586 <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8105556:	68fb      	ldr	r3, [r7, #12]
 8105558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810555a:	7812      	ldrb	r2, [r2, #0]
 810555c:	b2d2      	uxtb	r2, r2
 810555e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105564:	1c5a      	adds	r2, r3, #1
 8105566:	68fb      	ldr	r3, [r7, #12]
 8105568:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810556a:	68fb      	ldr	r3, [r7, #12]
 810556c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105570:	b29b      	uxth	r3, r3
 8105572:	3b01      	subs	r3, #1
 8105574:	b29a      	uxth	r2, r3
 8105576:	68fb      	ldr	r3, [r7, #12]
 8105578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810557c:	68fb      	ldr	r3, [r7, #12]
 810557e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105582:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105584:	e023      	b.n	81055ce <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105586:	f7fd fadb 	bl	8102b40 <HAL_GetTick>
 810558a:	4602      	mov	r2, r0
 810558c:	69bb      	ldr	r3, [r7, #24]
 810558e:	1ad3      	subs	r3, r2, r3
 8105590:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8105592:	429a      	cmp	r2, r3
 8105594:	d803      	bhi.n	810559e <HAL_SPI_TransmitReceive+0x5da>
 8105596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810559c:	d102      	bne.n	81055a4 <HAL_SPI_TransmitReceive+0x5e0>
 810559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055a0:	2b00      	cmp	r3, #0
 81055a2:	d114      	bne.n	81055ce <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81055a4:	68f8      	ldr	r0, [r7, #12]
 81055a6:	f000 f845 	bl	8105634 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81055aa:	68fb      	ldr	r3, [r7, #12]
 81055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81055b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	2201      	movs	r2, #1
 81055be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	2200      	movs	r2, #0
 81055c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81055ca:	2303      	movs	r3, #3
 81055cc:	e02d      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81055ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81055d0:	2b00      	cmp	r3, #0
 81055d2:	f47f af11 	bne.w	81053f8 <HAL_SPI_TransmitReceive+0x434>
 81055d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81055d8:	2b00      	cmp	r3, #0
 81055da:	f47f af0d 	bne.w	81053f8 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 81055de:	69bb      	ldr	r3, [r7, #24]
 81055e0:	9300      	str	r3, [sp, #0]
 81055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055e4:	2200      	movs	r2, #0
 81055e6:	2108      	movs	r1, #8
 81055e8:	68f8      	ldr	r0, [r7, #12]
 81055ea:	f000 f8c3 	bl	8105774 <SPI_WaitOnFlagUntilTimeout>
 81055ee:	4603      	mov	r3, r0
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d007      	beq.n	8105604 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81055f4:	68fb      	ldr	r3, [r7, #12]
 81055f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81055fa:	f043 0220 	orr.w	r2, r3, #32
 81055fe:	68fb      	ldr	r3, [r7, #12]
 8105600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105604:	68f8      	ldr	r0, [r7, #12]
 8105606:	f000 f815 	bl	8105634 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810560a:	68fb      	ldr	r3, [r7, #12]
 810560c:	2201      	movs	r2, #1
 810560e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105612:	68fb      	ldr	r3, [r7, #12]
 8105614:	2200      	movs	r2, #0
 8105616:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810561a:	68fb      	ldr	r3, [r7, #12]
 810561c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105620:	2b00      	cmp	r3, #0
 8105622:	d001      	beq.n	8105628 <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 8105624:	2301      	movs	r3, #1
 8105626:	e000      	b.n	810562a <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 8105628:	2300      	movs	r3, #0
  }
}
 810562a:	4618      	mov	r0, r3
 810562c:	3730      	adds	r7, #48	@ 0x30
 810562e:	46bd      	mov	sp, r7
 8105630:	bd80      	pop	{r7, pc}
 8105632:	bf00      	nop

08105634 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105634:	b480      	push	{r7}
 8105636:	b085      	sub	sp, #20
 8105638:	af00      	add	r7, sp, #0
 810563a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	695b      	ldr	r3, [r3, #20]
 8105642:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	699a      	ldr	r2, [r3, #24]
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	681b      	ldr	r3, [r3, #0]
 810564e:	f042 0208 	orr.w	r2, r2, #8
 8105652:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	699a      	ldr	r2, [r3, #24]
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	f042 0210 	orr.w	r2, r2, #16
 8105662:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	681a      	ldr	r2, [r3, #0]
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	681b      	ldr	r3, [r3, #0]
 810566e:	f022 0201 	bic.w	r2, r2, #1
 8105672:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8105674:	687b      	ldr	r3, [r7, #4]
 8105676:	681b      	ldr	r3, [r3, #0]
 8105678:	691b      	ldr	r3, [r3, #16]
 810567a:	687a      	ldr	r2, [r7, #4]
 810567c:	6812      	ldr	r2, [r2, #0]
 810567e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8105682:	f023 0303 	bic.w	r3, r3, #3
 8105686:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	689a      	ldr	r2, [r3, #8]
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	681b      	ldr	r3, [r3, #0]
 8105692:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8105696:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810569e:	b2db      	uxtb	r3, r3
 81056a0:	2b04      	cmp	r3, #4
 81056a2:	d014      	beq.n	81056ce <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81056a4:	68fb      	ldr	r3, [r7, #12]
 81056a6:	f003 0320 	and.w	r3, r3, #32
 81056aa:	2b00      	cmp	r3, #0
 81056ac:	d00f      	beq.n	81056ce <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81056b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	699a      	ldr	r2, [r3, #24]
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	681b      	ldr	r3, [r3, #0]
 81056c8:	f042 0220 	orr.w	r2, r2, #32
 81056cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81056d4:	b2db      	uxtb	r3, r3
 81056d6:	2b03      	cmp	r3, #3
 81056d8:	d014      	beq.n	8105704 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81056da:	68fb      	ldr	r3, [r7, #12]
 81056dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81056e0:	2b00      	cmp	r3, #0
 81056e2:	d00f      	beq.n	8105704 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81056ea:	f043 0204 	orr.w	r2, r3, #4
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	699a      	ldr	r2, [r3, #24]
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8105702:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810570a:	2b00      	cmp	r3, #0
 810570c:	d00f      	beq.n	810572e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105714:	f043 0201 	orr.w	r2, r3, #1
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	699a      	ldr	r2, [r3, #24]
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810572c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810572e:	68fb      	ldr	r3, [r7, #12]
 8105730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105734:	2b00      	cmp	r3, #0
 8105736:	d00f      	beq.n	8105758 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810573e:	f043 0208 	orr.w	r2, r3, #8
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	699a      	ldr	r2, [r3, #24]
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	681b      	ldr	r3, [r3, #0]
 8105752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105756:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105758:	687b      	ldr	r3, [r7, #4]
 810575a:	2200      	movs	r2, #0
 810575c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105760:	687b      	ldr	r3, [r7, #4]
 8105762:	2200      	movs	r2, #0
 8105764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8105768:	bf00      	nop
 810576a:	3714      	adds	r7, #20
 810576c:	46bd      	mov	sp, r7
 810576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105772:	4770      	bx	lr

08105774 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8105774:	b580      	push	{r7, lr}
 8105776:	b084      	sub	sp, #16
 8105778:	af00      	add	r7, sp, #0
 810577a:	60f8      	str	r0, [r7, #12]
 810577c:	60b9      	str	r1, [r7, #8]
 810577e:	603b      	str	r3, [r7, #0]
 8105780:	4613      	mov	r3, r2
 8105782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105784:	e010      	b.n	81057a8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105786:	f7fd f9db 	bl	8102b40 <HAL_GetTick>
 810578a:	4602      	mov	r2, r0
 810578c:	69bb      	ldr	r3, [r7, #24]
 810578e:	1ad3      	subs	r3, r2, r3
 8105790:	683a      	ldr	r2, [r7, #0]
 8105792:	429a      	cmp	r2, r3
 8105794:	d803      	bhi.n	810579e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8105796:	683b      	ldr	r3, [r7, #0]
 8105798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810579c:	d102      	bne.n	81057a4 <SPI_WaitOnFlagUntilTimeout+0x30>
 810579e:	683b      	ldr	r3, [r7, #0]
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d101      	bne.n	81057a8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81057a4:	2303      	movs	r3, #3
 81057a6:	e00f      	b.n	81057c8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81057a8:	68fb      	ldr	r3, [r7, #12]
 81057aa:	681b      	ldr	r3, [r3, #0]
 81057ac:	695a      	ldr	r2, [r3, #20]
 81057ae:	68bb      	ldr	r3, [r7, #8]
 81057b0:	4013      	ands	r3, r2
 81057b2:	68ba      	ldr	r2, [r7, #8]
 81057b4:	429a      	cmp	r2, r3
 81057b6:	bf0c      	ite	eq
 81057b8:	2301      	moveq	r3, #1
 81057ba:	2300      	movne	r3, #0
 81057bc:	b2db      	uxtb	r3, r3
 81057be:	461a      	mov	r2, r3
 81057c0:	79fb      	ldrb	r3, [r7, #7]
 81057c2:	429a      	cmp	r2, r3
 81057c4:	d0df      	beq.n	8105786 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81057c6:	2300      	movs	r3, #0
}
 81057c8:	4618      	mov	r0, r3
 81057ca:	3710      	adds	r7, #16
 81057cc:	46bd      	mov	sp, r7
 81057ce:	bd80      	pop	{r7, pc}

081057d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81057d0:	b480      	push	{r7}
 81057d2:	b085      	sub	sp, #20
 81057d4:	af00      	add	r7, sp, #0
 81057d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81057dc:	095b      	lsrs	r3, r3, #5
 81057de:	3301      	adds	r3, #1
 81057e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	68db      	ldr	r3, [r3, #12]
 81057e6:	3301      	adds	r3, #1
 81057e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81057ea:	68bb      	ldr	r3, [r7, #8]
 81057ec:	3307      	adds	r3, #7
 81057ee:	08db      	lsrs	r3, r3, #3
 81057f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81057f2:	68bb      	ldr	r3, [r7, #8]
 81057f4:	68fa      	ldr	r2, [r7, #12]
 81057f6:	fb02 f303 	mul.w	r3, r2, r3
}
 81057fa:	4618      	mov	r0, r3
 81057fc:	3714      	adds	r7, #20
 81057fe:	46bd      	mov	sp, r7
 8105800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105804:	4770      	bx	lr

08105806 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105806:	b580      	push	{r7, lr}
 8105808:	b082      	sub	sp, #8
 810580a:	af00      	add	r7, sp, #0
 810580c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	2b00      	cmp	r3, #0
 8105812:	d101      	bne.n	8105818 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105814:	2301      	movs	r3, #1
 8105816:	e049      	b.n	81058ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810581e:	b2db      	uxtb	r3, r3
 8105820:	2b00      	cmp	r3, #0
 8105822:	d106      	bne.n	8105832 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	2200      	movs	r2, #0
 8105828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810582c:	6878      	ldr	r0, [r7, #4]
 810582e:	f7fd f88f 	bl	8102950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	2202      	movs	r2, #2
 8105836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681a      	ldr	r2, [r3, #0]
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	3304      	adds	r3, #4
 8105842:	4619      	mov	r1, r3
 8105844:	4610      	mov	r0, r2
 8105846:	f000 fad5 	bl	8105df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	2201      	movs	r2, #1
 810584e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	2201      	movs	r2, #1
 8105856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	2201      	movs	r2, #1
 810585e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	2201      	movs	r2, #1
 8105866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	2201      	movs	r2, #1
 810586e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	2201      	movs	r2, #1
 8105876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	2201      	movs	r2, #1
 810587e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	2201      	movs	r2, #1
 8105886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	2201      	movs	r2, #1
 810588e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	2201      	movs	r2, #1
 8105896:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	2201      	movs	r2, #1
 810589e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	2201      	movs	r2, #1
 81058a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81058aa:	2300      	movs	r3, #0
}
 81058ac:	4618      	mov	r0, r3
 81058ae:	3708      	adds	r7, #8
 81058b0:	46bd      	mov	sp, r7
 81058b2:	bd80      	pop	{r7, pc}

081058b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81058b4:	b480      	push	{r7}
 81058b6:	b085      	sub	sp, #20
 81058b8:	af00      	add	r7, sp, #0
 81058ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81058c2:	b2db      	uxtb	r3, r3
 81058c4:	2b01      	cmp	r3, #1
 81058c6:	d001      	beq.n	81058cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81058c8:	2301      	movs	r3, #1
 81058ca:	e054      	b.n	8105976 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	2202      	movs	r2, #2
 81058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	681b      	ldr	r3, [r3, #0]
 81058d8:	68da      	ldr	r2, [r3, #12]
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	f042 0201 	orr.w	r2, r2, #1
 81058e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	681b      	ldr	r3, [r3, #0]
 81058e8:	4a26      	ldr	r2, [pc, #152]	@ (8105984 <HAL_TIM_Base_Start_IT+0xd0>)
 81058ea:	4293      	cmp	r3, r2
 81058ec:	d022      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	681b      	ldr	r3, [r3, #0]
 81058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81058f6:	d01d      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	4a22      	ldr	r2, [pc, #136]	@ (8105988 <HAL_TIM_Base_Start_IT+0xd4>)
 81058fe:	4293      	cmp	r3, r2
 8105900:	d018      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	4a21      	ldr	r2, [pc, #132]	@ (810598c <HAL_TIM_Base_Start_IT+0xd8>)
 8105908:	4293      	cmp	r3, r2
 810590a:	d013      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	4a1f      	ldr	r2, [pc, #124]	@ (8105990 <HAL_TIM_Base_Start_IT+0xdc>)
 8105912:	4293      	cmp	r3, r2
 8105914:	d00e      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	4a1e      	ldr	r2, [pc, #120]	@ (8105994 <HAL_TIM_Base_Start_IT+0xe0>)
 810591c:	4293      	cmp	r3, r2
 810591e:	d009      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	4a1c      	ldr	r2, [pc, #112]	@ (8105998 <HAL_TIM_Base_Start_IT+0xe4>)
 8105926:	4293      	cmp	r3, r2
 8105928:	d004      	beq.n	8105934 <HAL_TIM_Base_Start_IT+0x80>
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	4a1b      	ldr	r2, [pc, #108]	@ (810599c <HAL_TIM_Base_Start_IT+0xe8>)
 8105930:	4293      	cmp	r3, r2
 8105932:	d115      	bne.n	8105960 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	681b      	ldr	r3, [r3, #0]
 8105938:	689a      	ldr	r2, [r3, #8]
 810593a:	4b19      	ldr	r3, [pc, #100]	@ (81059a0 <HAL_TIM_Base_Start_IT+0xec>)
 810593c:	4013      	ands	r3, r2
 810593e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	2b06      	cmp	r3, #6
 8105944:	d015      	beq.n	8105972 <HAL_TIM_Base_Start_IT+0xbe>
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810594c:	d011      	beq.n	8105972 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	681a      	ldr	r2, [r3, #0]
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	681b      	ldr	r3, [r3, #0]
 8105958:	f042 0201 	orr.w	r2, r2, #1
 810595c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810595e:	e008      	b.n	8105972 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	681a      	ldr	r2, [r3, #0]
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	f042 0201 	orr.w	r2, r2, #1
 810596e:	601a      	str	r2, [r3, #0]
 8105970:	e000      	b.n	8105974 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105974:	2300      	movs	r3, #0
}
 8105976:	4618      	mov	r0, r3
 8105978:	3714      	adds	r7, #20
 810597a:	46bd      	mov	sp, r7
 810597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105980:	4770      	bx	lr
 8105982:	bf00      	nop
 8105984:	40010000 	.word	0x40010000
 8105988:	40000400 	.word	0x40000400
 810598c:	40000800 	.word	0x40000800
 8105990:	40000c00 	.word	0x40000c00
 8105994:	40010400 	.word	0x40010400
 8105998:	40001800 	.word	0x40001800
 810599c:	40014000 	.word	0x40014000
 81059a0:	00010007 	.word	0x00010007

081059a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81059a4:	b580      	push	{r7, lr}
 81059a6:	b084      	sub	sp, #16
 81059a8:	af00      	add	r7, sp, #0
 81059aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	681b      	ldr	r3, [r3, #0]
 81059b0:	68db      	ldr	r3, [r3, #12]
 81059b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	691b      	ldr	r3, [r3, #16]
 81059ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81059bc:	68bb      	ldr	r3, [r7, #8]
 81059be:	f003 0302 	and.w	r3, r3, #2
 81059c2:	2b00      	cmp	r3, #0
 81059c4:	d020      	beq.n	8105a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81059c6:	68fb      	ldr	r3, [r7, #12]
 81059c8:	f003 0302 	and.w	r3, r3, #2
 81059cc:	2b00      	cmp	r3, #0
 81059ce:	d01b      	beq.n	8105a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	681b      	ldr	r3, [r3, #0]
 81059d4:	f06f 0202 	mvn.w	r2, #2
 81059d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	2201      	movs	r2, #1
 81059de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81059e0:	687b      	ldr	r3, [r7, #4]
 81059e2:	681b      	ldr	r3, [r3, #0]
 81059e4:	699b      	ldr	r3, [r3, #24]
 81059e6:	f003 0303 	and.w	r3, r3, #3
 81059ea:	2b00      	cmp	r3, #0
 81059ec:	d003      	beq.n	81059f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81059ee:	6878      	ldr	r0, [r7, #4]
 81059f0:	f000 f9e2 	bl	8105db8 <HAL_TIM_IC_CaptureCallback>
 81059f4:	e005      	b.n	8105a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81059f6:	6878      	ldr	r0, [r7, #4]
 81059f8:	f000 f9d4 	bl	8105da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81059fc:	6878      	ldr	r0, [r7, #4]
 81059fe:	f000 f9e5 	bl	8105dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	2200      	movs	r2, #0
 8105a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8105a08:	68bb      	ldr	r3, [r7, #8]
 8105a0a:	f003 0304 	and.w	r3, r3, #4
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d020      	beq.n	8105a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8105a12:	68fb      	ldr	r3, [r7, #12]
 8105a14:	f003 0304 	and.w	r3, r3, #4
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	d01b      	beq.n	8105a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	681b      	ldr	r3, [r3, #0]
 8105a20:	f06f 0204 	mvn.w	r2, #4
 8105a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	2202      	movs	r2, #2
 8105a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	699b      	ldr	r3, [r3, #24]
 8105a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105a36:	2b00      	cmp	r3, #0
 8105a38:	d003      	beq.n	8105a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105a3a:	6878      	ldr	r0, [r7, #4]
 8105a3c:	f000 f9bc 	bl	8105db8 <HAL_TIM_IC_CaptureCallback>
 8105a40:	e005      	b.n	8105a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105a42:	6878      	ldr	r0, [r7, #4]
 8105a44:	f000 f9ae 	bl	8105da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105a48:	6878      	ldr	r0, [r7, #4]
 8105a4a:	f000 f9bf 	bl	8105dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	2200      	movs	r2, #0
 8105a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8105a54:	68bb      	ldr	r3, [r7, #8]
 8105a56:	f003 0308 	and.w	r3, r3, #8
 8105a5a:	2b00      	cmp	r3, #0
 8105a5c:	d020      	beq.n	8105aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8105a5e:	68fb      	ldr	r3, [r7, #12]
 8105a60:	f003 0308 	and.w	r3, r3, #8
 8105a64:	2b00      	cmp	r3, #0
 8105a66:	d01b      	beq.n	8105aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	f06f 0208 	mvn.w	r2, #8
 8105a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	2204      	movs	r2, #4
 8105a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	681b      	ldr	r3, [r3, #0]
 8105a7c:	69db      	ldr	r3, [r3, #28]
 8105a7e:	f003 0303 	and.w	r3, r3, #3
 8105a82:	2b00      	cmp	r3, #0
 8105a84:	d003      	beq.n	8105a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105a86:	6878      	ldr	r0, [r7, #4]
 8105a88:	f000 f996 	bl	8105db8 <HAL_TIM_IC_CaptureCallback>
 8105a8c:	e005      	b.n	8105a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105a8e:	6878      	ldr	r0, [r7, #4]
 8105a90:	f000 f988 	bl	8105da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105a94:	6878      	ldr	r0, [r7, #4]
 8105a96:	f000 f999 	bl	8105dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	2200      	movs	r2, #0
 8105a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8105aa0:	68bb      	ldr	r3, [r7, #8]
 8105aa2:	f003 0310 	and.w	r3, r3, #16
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d020      	beq.n	8105aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8105aaa:	68fb      	ldr	r3, [r7, #12]
 8105aac:	f003 0310 	and.w	r3, r3, #16
 8105ab0:	2b00      	cmp	r3, #0
 8105ab2:	d01b      	beq.n	8105aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	681b      	ldr	r3, [r3, #0]
 8105ab8:	f06f 0210 	mvn.w	r2, #16
 8105abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	2208      	movs	r2, #8
 8105ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	69db      	ldr	r3, [r3, #28]
 8105aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d003      	beq.n	8105ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105ad2:	6878      	ldr	r0, [r7, #4]
 8105ad4:	f000 f970 	bl	8105db8 <HAL_TIM_IC_CaptureCallback>
 8105ad8:	e005      	b.n	8105ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105ada:	6878      	ldr	r0, [r7, #4]
 8105adc:	f000 f962 	bl	8105da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105ae0:	6878      	ldr	r0, [r7, #4]
 8105ae2:	f000 f973 	bl	8105dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	2200      	movs	r2, #0
 8105aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8105aec:	68bb      	ldr	r3, [r7, #8]
 8105aee:	f003 0301 	and.w	r3, r3, #1
 8105af2:	2b00      	cmp	r3, #0
 8105af4:	d00c      	beq.n	8105b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	f003 0301 	and.w	r3, r3, #1
 8105afc:	2b00      	cmp	r3, #0
 8105afe:	d007      	beq.n	8105b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	f06f 0201 	mvn.w	r2, #1
 8105b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8105b0a:	6878      	ldr	r0, [r7, #4]
 8105b0c:	f7fc fd64 	bl	81025d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8105b10:	68bb      	ldr	r3, [r7, #8]
 8105b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105b16:	2b00      	cmp	r3, #0
 8105b18:	d104      	bne.n	8105b24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8105b1a:	68bb      	ldr	r3, [r7, #8]
 8105b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	d00c      	beq.n	8105b3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	d007      	beq.n	8105b3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	681b      	ldr	r3, [r3, #0]
 8105b32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8105b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8105b38:	6878      	ldr	r0, [r7, #4]
 8105b3a:	f000 fb35 	bl	81061a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8105b3e:	68bb      	ldr	r3, [r7, #8]
 8105b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105b44:	2b00      	cmp	r3, #0
 8105b46:	d00c      	beq.n	8105b62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8105b48:	68fb      	ldr	r3, [r7, #12]
 8105b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105b4e:	2b00      	cmp	r3, #0
 8105b50:	d007      	beq.n	8105b62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8105b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105b5c:	6878      	ldr	r0, [r7, #4]
 8105b5e:	f000 fb2d 	bl	81061bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8105b62:	68bb      	ldr	r3, [r7, #8]
 8105b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b68:	2b00      	cmp	r3, #0
 8105b6a:	d00c      	beq.n	8105b86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8105b6c:	68fb      	ldr	r3, [r7, #12]
 8105b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b72:	2b00      	cmp	r3, #0
 8105b74:	d007      	beq.n	8105b86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	681b      	ldr	r3, [r3, #0]
 8105b7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8105b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105b80:	6878      	ldr	r0, [r7, #4]
 8105b82:	f000 f92d 	bl	8105de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8105b86:	68bb      	ldr	r3, [r7, #8]
 8105b88:	f003 0320 	and.w	r3, r3, #32
 8105b8c:	2b00      	cmp	r3, #0
 8105b8e:	d00c      	beq.n	8105baa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	f003 0320 	and.w	r3, r3, #32
 8105b96:	2b00      	cmp	r3, #0
 8105b98:	d007      	beq.n	8105baa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	681b      	ldr	r3, [r3, #0]
 8105b9e:	f06f 0220 	mvn.w	r2, #32
 8105ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105ba4:	6878      	ldr	r0, [r7, #4]
 8105ba6:	f000 faf5 	bl	8106194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105baa:	bf00      	nop
 8105bac:	3710      	adds	r7, #16
 8105bae:	46bd      	mov	sp, r7
 8105bb0:	bd80      	pop	{r7, pc}
	...

08105bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105bb4:	b580      	push	{r7, lr}
 8105bb6:	b084      	sub	sp, #16
 8105bb8:	af00      	add	r7, sp, #0
 8105bba:	6078      	str	r0, [r7, #4]
 8105bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105bbe:	2300      	movs	r3, #0
 8105bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105bc8:	2b01      	cmp	r3, #1
 8105bca:	d101      	bne.n	8105bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8105bcc:	2302      	movs	r3, #2
 8105bce:	e0de      	b.n	8105d8e <HAL_TIM_ConfigClockSource+0x1da>
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	2201      	movs	r2, #1
 8105bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	2202      	movs	r2, #2
 8105bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	689b      	ldr	r3, [r3, #8]
 8105be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8105be8:	68bb      	ldr	r3, [r7, #8]
 8105bea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8105bee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8105bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105bf4:	68bb      	ldr	r3, [r7, #8]
 8105bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	68ba      	ldr	r2, [r7, #8]
 8105c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8105c04:	683b      	ldr	r3, [r7, #0]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	4a63      	ldr	r2, [pc, #396]	@ (8105d98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105c0a:	4293      	cmp	r3, r2
 8105c0c:	f000 80a9 	beq.w	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105c10:	4a61      	ldr	r2, [pc, #388]	@ (8105d98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105c12:	4293      	cmp	r3, r2
 8105c14:	f200 80ae 	bhi.w	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c18:	4a60      	ldr	r2, [pc, #384]	@ (8105d9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8105c1a:	4293      	cmp	r3, r2
 8105c1c:	f000 80a1 	beq.w	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105c20:	4a5e      	ldr	r2, [pc, #376]	@ (8105d9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8105c22:	4293      	cmp	r3, r2
 8105c24:	f200 80a6 	bhi.w	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c28:	4a5d      	ldr	r2, [pc, #372]	@ (8105da0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105c2a:	4293      	cmp	r3, r2
 8105c2c:	f000 8099 	beq.w	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105c30:	4a5b      	ldr	r2, [pc, #364]	@ (8105da0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105c32:	4293      	cmp	r3, r2
 8105c34:	f200 809e 	bhi.w	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8105c3c:	f000 8091 	beq.w	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105c40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8105c44:	f200 8096 	bhi.w	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105c4c:	f000 8089 	beq.w	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105c54:	f200 808e 	bhi.w	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105c5c:	d03e      	beq.n	8105cdc <HAL_TIM_ConfigClockSource+0x128>
 8105c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105c62:	f200 8087 	bhi.w	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105c6a:	f000 8086 	beq.w	8105d7a <HAL_TIM_ConfigClockSource+0x1c6>
 8105c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105c72:	d87f      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c74:	2b70      	cmp	r3, #112	@ 0x70
 8105c76:	d01a      	beq.n	8105cae <HAL_TIM_ConfigClockSource+0xfa>
 8105c78:	2b70      	cmp	r3, #112	@ 0x70
 8105c7a:	d87b      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c7c:	2b60      	cmp	r3, #96	@ 0x60
 8105c7e:	d050      	beq.n	8105d22 <HAL_TIM_ConfigClockSource+0x16e>
 8105c80:	2b60      	cmp	r3, #96	@ 0x60
 8105c82:	d877      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c84:	2b50      	cmp	r3, #80	@ 0x50
 8105c86:	d03c      	beq.n	8105d02 <HAL_TIM_ConfigClockSource+0x14e>
 8105c88:	2b50      	cmp	r3, #80	@ 0x50
 8105c8a:	d873      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c8c:	2b40      	cmp	r3, #64	@ 0x40
 8105c8e:	d058      	beq.n	8105d42 <HAL_TIM_ConfigClockSource+0x18e>
 8105c90:	2b40      	cmp	r3, #64	@ 0x40
 8105c92:	d86f      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c94:	2b30      	cmp	r3, #48	@ 0x30
 8105c96:	d064      	beq.n	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105c98:	2b30      	cmp	r3, #48	@ 0x30
 8105c9a:	d86b      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105c9c:	2b20      	cmp	r3, #32
 8105c9e:	d060      	beq.n	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105ca0:	2b20      	cmp	r3, #32
 8105ca2:	d867      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
 8105ca4:	2b00      	cmp	r3, #0
 8105ca6:	d05c      	beq.n	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105ca8:	2b10      	cmp	r3, #16
 8105caa:	d05a      	beq.n	8105d62 <HAL_TIM_ConfigClockSource+0x1ae>
 8105cac:	e062      	b.n	8105d74 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8105cb2:	683b      	ldr	r3, [r7, #0]
 8105cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8105cb6:	683b      	ldr	r3, [r7, #0]
 8105cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8105cba:	683b      	ldr	r3, [r7, #0]
 8105cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8105cbe:	f000 f9bb 	bl	8106038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	689b      	ldr	r3, [r3, #8]
 8105cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105cca:	68bb      	ldr	r3, [r7, #8]
 8105ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8105cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	68ba      	ldr	r2, [r7, #8]
 8105cd8:	609a      	str	r2, [r3, #8]
      break;
 8105cda:	e04f      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105cdc:	687b      	ldr	r3, [r7, #4]
 8105cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8105ce0:	683b      	ldr	r3, [r7, #0]
 8105ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8105ce4:	683b      	ldr	r3, [r7, #0]
 8105ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8105ce8:	683b      	ldr	r3, [r7, #0]
 8105cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8105cec:	f000 f9a4 	bl	8106038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	681b      	ldr	r3, [r3, #0]
 8105cf4:	689a      	ldr	r2, [r3, #8]
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105cfe:	609a      	str	r2, [r3, #8]
      break;
 8105d00:	e03c      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105d06:	683b      	ldr	r3, [r7, #0]
 8105d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8105d0a:	683b      	ldr	r3, [r7, #0]
 8105d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8105d0e:	461a      	mov	r2, r3
 8105d10:	f000 f916 	bl	8105f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	2150      	movs	r1, #80	@ 0x50
 8105d1a:	4618      	mov	r0, r3
 8105d1c:	f000 f96f 	bl	8105ffe <TIM_ITRx_SetConfig>
      break;
 8105d20:	e02c      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105d26:	683b      	ldr	r3, [r7, #0]
 8105d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8105d2a:	683b      	ldr	r3, [r7, #0]
 8105d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8105d2e:	461a      	mov	r2, r3
 8105d30:	f000 f935 	bl	8105f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	2160      	movs	r1, #96	@ 0x60
 8105d3a:	4618      	mov	r0, r3
 8105d3c:	f000 f95f 	bl	8105ffe <TIM_ITRx_SetConfig>
      break;
 8105d40:	e01c      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105d46:	683b      	ldr	r3, [r7, #0]
 8105d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8105d4a:	683b      	ldr	r3, [r7, #0]
 8105d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8105d4e:	461a      	mov	r2, r3
 8105d50:	f000 f8f6 	bl	8105f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	2140      	movs	r1, #64	@ 0x40
 8105d5a:	4618      	mov	r0, r3
 8105d5c:	f000 f94f 	bl	8105ffe <TIM_ITRx_SetConfig>
      break;
 8105d60:	e00c      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	681a      	ldr	r2, [r3, #0]
 8105d66:	683b      	ldr	r3, [r7, #0]
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	4619      	mov	r1, r3
 8105d6c:	4610      	mov	r0, r2
 8105d6e:	f000 f946 	bl	8105ffe <TIM_ITRx_SetConfig>
      break;
 8105d72:	e003      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105d74:	2301      	movs	r3, #1
 8105d76:	73fb      	strb	r3, [r7, #15]
      break;
 8105d78:	e000      	b.n	8105d7c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	2201      	movs	r2, #1
 8105d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	2200      	movs	r2, #0
 8105d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8105d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8105d8e:	4618      	mov	r0, r3
 8105d90:	3710      	adds	r7, #16
 8105d92:	46bd      	mov	sp, r7
 8105d94:	bd80      	pop	{r7, pc}
 8105d96:	bf00      	nop
 8105d98:	00100040 	.word	0x00100040
 8105d9c:	00100030 	.word	0x00100030
 8105da0:	00100020 	.word	0x00100020

08105da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105da4:	b480      	push	{r7}
 8105da6:	b083      	sub	sp, #12
 8105da8:	af00      	add	r7, sp, #0
 8105daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105dac:	bf00      	nop
 8105dae:	370c      	adds	r7, #12
 8105db0:	46bd      	mov	sp, r7
 8105db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105db6:	4770      	bx	lr

08105db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105db8:	b480      	push	{r7}
 8105dba:	b083      	sub	sp, #12
 8105dbc:	af00      	add	r7, sp, #0
 8105dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105dc0:	bf00      	nop
 8105dc2:	370c      	adds	r7, #12
 8105dc4:	46bd      	mov	sp, r7
 8105dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dca:	4770      	bx	lr

08105dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105dcc:	b480      	push	{r7}
 8105dce:	b083      	sub	sp, #12
 8105dd0:	af00      	add	r7, sp, #0
 8105dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105dd4:	bf00      	nop
 8105dd6:	370c      	adds	r7, #12
 8105dd8:	46bd      	mov	sp, r7
 8105dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dde:	4770      	bx	lr

08105de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105de0:	b480      	push	{r7}
 8105de2:	b083      	sub	sp, #12
 8105de4:	af00      	add	r7, sp, #0
 8105de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105de8:	bf00      	nop
 8105dea:	370c      	adds	r7, #12
 8105dec:	46bd      	mov	sp, r7
 8105dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105df2:	4770      	bx	lr

08105df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8105df4:	b480      	push	{r7}
 8105df6:	b085      	sub	sp, #20
 8105df8:	af00      	add	r7, sp, #0
 8105dfa:	6078      	str	r0, [r7, #4]
 8105dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	4a46      	ldr	r2, [pc, #280]	@ (8105f20 <TIM_Base_SetConfig+0x12c>)
 8105e08:	4293      	cmp	r3, r2
 8105e0a:	d013      	beq.n	8105e34 <TIM_Base_SetConfig+0x40>
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105e12:	d00f      	beq.n	8105e34 <TIM_Base_SetConfig+0x40>
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	4a43      	ldr	r2, [pc, #268]	@ (8105f24 <TIM_Base_SetConfig+0x130>)
 8105e18:	4293      	cmp	r3, r2
 8105e1a:	d00b      	beq.n	8105e34 <TIM_Base_SetConfig+0x40>
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	4a42      	ldr	r2, [pc, #264]	@ (8105f28 <TIM_Base_SetConfig+0x134>)
 8105e20:	4293      	cmp	r3, r2
 8105e22:	d007      	beq.n	8105e34 <TIM_Base_SetConfig+0x40>
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	4a41      	ldr	r2, [pc, #260]	@ (8105f2c <TIM_Base_SetConfig+0x138>)
 8105e28:	4293      	cmp	r3, r2
 8105e2a:	d003      	beq.n	8105e34 <TIM_Base_SetConfig+0x40>
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	4a40      	ldr	r2, [pc, #256]	@ (8105f30 <TIM_Base_SetConfig+0x13c>)
 8105e30:	4293      	cmp	r3, r2
 8105e32:	d108      	bne.n	8105e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105e3c:	683b      	ldr	r3, [r7, #0]
 8105e3e:	685b      	ldr	r3, [r3, #4]
 8105e40:	68fa      	ldr	r2, [r7, #12]
 8105e42:	4313      	orrs	r3, r2
 8105e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	4a35      	ldr	r2, [pc, #212]	@ (8105f20 <TIM_Base_SetConfig+0x12c>)
 8105e4a:	4293      	cmp	r3, r2
 8105e4c:	d01f      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105e54:	d01b      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	4a32      	ldr	r2, [pc, #200]	@ (8105f24 <TIM_Base_SetConfig+0x130>)
 8105e5a:	4293      	cmp	r3, r2
 8105e5c:	d017      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	4a31      	ldr	r2, [pc, #196]	@ (8105f28 <TIM_Base_SetConfig+0x134>)
 8105e62:	4293      	cmp	r3, r2
 8105e64:	d013      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	4a30      	ldr	r2, [pc, #192]	@ (8105f2c <TIM_Base_SetConfig+0x138>)
 8105e6a:	4293      	cmp	r3, r2
 8105e6c:	d00f      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	4a2f      	ldr	r2, [pc, #188]	@ (8105f30 <TIM_Base_SetConfig+0x13c>)
 8105e72:	4293      	cmp	r3, r2
 8105e74:	d00b      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	4a2e      	ldr	r2, [pc, #184]	@ (8105f34 <TIM_Base_SetConfig+0x140>)
 8105e7a:	4293      	cmp	r3, r2
 8105e7c:	d007      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	4a2d      	ldr	r2, [pc, #180]	@ (8105f38 <TIM_Base_SetConfig+0x144>)
 8105e82:	4293      	cmp	r3, r2
 8105e84:	d003      	beq.n	8105e8e <TIM_Base_SetConfig+0x9a>
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	4a2c      	ldr	r2, [pc, #176]	@ (8105f3c <TIM_Base_SetConfig+0x148>)
 8105e8a:	4293      	cmp	r3, r2
 8105e8c:	d108      	bne.n	8105ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105e8e:	68fb      	ldr	r3, [r7, #12]
 8105e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105e96:	683b      	ldr	r3, [r7, #0]
 8105e98:	68db      	ldr	r3, [r3, #12]
 8105e9a:	68fa      	ldr	r2, [r7, #12]
 8105e9c:	4313      	orrs	r3, r2
 8105e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8105ea6:	683b      	ldr	r3, [r7, #0]
 8105ea8:	695b      	ldr	r3, [r3, #20]
 8105eaa:	4313      	orrs	r3, r2
 8105eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	68fa      	ldr	r2, [r7, #12]
 8105eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105eb4:	683b      	ldr	r3, [r7, #0]
 8105eb6:	689a      	ldr	r2, [r3, #8]
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105ebc:	683b      	ldr	r3, [r7, #0]
 8105ebe:	681a      	ldr	r2, [r3, #0]
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	4a16      	ldr	r2, [pc, #88]	@ (8105f20 <TIM_Base_SetConfig+0x12c>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d00f      	beq.n	8105eec <TIM_Base_SetConfig+0xf8>
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	4a18      	ldr	r2, [pc, #96]	@ (8105f30 <TIM_Base_SetConfig+0x13c>)
 8105ed0:	4293      	cmp	r3, r2
 8105ed2:	d00b      	beq.n	8105eec <TIM_Base_SetConfig+0xf8>
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	4a17      	ldr	r2, [pc, #92]	@ (8105f34 <TIM_Base_SetConfig+0x140>)
 8105ed8:	4293      	cmp	r3, r2
 8105eda:	d007      	beq.n	8105eec <TIM_Base_SetConfig+0xf8>
 8105edc:	687b      	ldr	r3, [r7, #4]
 8105ede:	4a16      	ldr	r2, [pc, #88]	@ (8105f38 <TIM_Base_SetConfig+0x144>)
 8105ee0:	4293      	cmp	r3, r2
 8105ee2:	d003      	beq.n	8105eec <TIM_Base_SetConfig+0xf8>
 8105ee4:	687b      	ldr	r3, [r7, #4]
 8105ee6:	4a15      	ldr	r2, [pc, #84]	@ (8105f3c <TIM_Base_SetConfig+0x148>)
 8105ee8:	4293      	cmp	r3, r2
 8105eea:	d103      	bne.n	8105ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105eec:	683b      	ldr	r3, [r7, #0]
 8105eee:	691a      	ldr	r2, [r3, #16]
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	2201      	movs	r2, #1
 8105ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	691b      	ldr	r3, [r3, #16]
 8105efe:	f003 0301 	and.w	r3, r3, #1
 8105f02:	2b01      	cmp	r3, #1
 8105f04:	d105      	bne.n	8105f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	691b      	ldr	r3, [r3, #16]
 8105f0a:	f023 0201 	bic.w	r2, r3, #1
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	611a      	str	r2, [r3, #16]
  }
}
 8105f12:	bf00      	nop
 8105f14:	3714      	adds	r7, #20
 8105f16:	46bd      	mov	sp, r7
 8105f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f1c:	4770      	bx	lr
 8105f1e:	bf00      	nop
 8105f20:	40010000 	.word	0x40010000
 8105f24:	40000400 	.word	0x40000400
 8105f28:	40000800 	.word	0x40000800
 8105f2c:	40000c00 	.word	0x40000c00
 8105f30:	40010400 	.word	0x40010400
 8105f34:	40014000 	.word	0x40014000
 8105f38:	40014400 	.word	0x40014400
 8105f3c:	40014800 	.word	0x40014800

08105f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105f40:	b480      	push	{r7}
 8105f42:	b087      	sub	sp, #28
 8105f44:	af00      	add	r7, sp, #0
 8105f46:	60f8      	str	r0, [r7, #12]
 8105f48:	60b9      	str	r1, [r7, #8]
 8105f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	6a1b      	ldr	r3, [r3, #32]
 8105f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105f52:	68fb      	ldr	r3, [r7, #12]
 8105f54:	6a1b      	ldr	r3, [r3, #32]
 8105f56:	f023 0201 	bic.w	r2, r3, #1
 8105f5a:	68fb      	ldr	r3, [r7, #12]
 8105f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	699b      	ldr	r3, [r3, #24]
 8105f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105f64:	693b      	ldr	r3, [r7, #16]
 8105f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8105f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	011b      	lsls	r3, r3, #4
 8105f70:	693a      	ldr	r2, [r7, #16]
 8105f72:	4313      	orrs	r3, r2
 8105f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8105f76:	697b      	ldr	r3, [r7, #20]
 8105f78:	f023 030a 	bic.w	r3, r3, #10
 8105f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8105f7e:	697a      	ldr	r2, [r7, #20]
 8105f80:	68bb      	ldr	r3, [r7, #8]
 8105f82:	4313      	orrs	r3, r2
 8105f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8105f86:	68fb      	ldr	r3, [r7, #12]
 8105f88:	693a      	ldr	r2, [r7, #16]
 8105f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105f8c:	68fb      	ldr	r3, [r7, #12]
 8105f8e:	697a      	ldr	r2, [r7, #20]
 8105f90:	621a      	str	r2, [r3, #32]
}
 8105f92:	bf00      	nop
 8105f94:	371c      	adds	r7, #28
 8105f96:	46bd      	mov	sp, r7
 8105f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f9c:	4770      	bx	lr

08105f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105f9e:	b480      	push	{r7}
 8105fa0:	b087      	sub	sp, #28
 8105fa2:	af00      	add	r7, sp, #0
 8105fa4:	60f8      	str	r0, [r7, #12]
 8105fa6:	60b9      	str	r1, [r7, #8]
 8105fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8105faa:	68fb      	ldr	r3, [r7, #12]
 8105fac:	6a1b      	ldr	r3, [r3, #32]
 8105fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105fb0:	68fb      	ldr	r3, [r7, #12]
 8105fb2:	6a1b      	ldr	r3, [r3, #32]
 8105fb4:	f023 0210 	bic.w	r2, r3, #16
 8105fb8:	68fb      	ldr	r3, [r7, #12]
 8105fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105fbc:	68fb      	ldr	r3, [r7, #12]
 8105fbe:	699b      	ldr	r3, [r3, #24]
 8105fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8105fc2:	693b      	ldr	r3, [r7, #16]
 8105fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8105fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	031b      	lsls	r3, r3, #12
 8105fce:	693a      	ldr	r2, [r7, #16]
 8105fd0:	4313      	orrs	r3, r2
 8105fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105fd4:	697b      	ldr	r3, [r7, #20]
 8105fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8105fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8105fdc:	68bb      	ldr	r3, [r7, #8]
 8105fde:	011b      	lsls	r3, r3, #4
 8105fe0:	697a      	ldr	r2, [r7, #20]
 8105fe2:	4313      	orrs	r3, r2
 8105fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8105fe6:	68fb      	ldr	r3, [r7, #12]
 8105fe8:	693a      	ldr	r2, [r7, #16]
 8105fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105fec:	68fb      	ldr	r3, [r7, #12]
 8105fee:	697a      	ldr	r2, [r7, #20]
 8105ff0:	621a      	str	r2, [r3, #32]
}
 8105ff2:	bf00      	nop
 8105ff4:	371c      	adds	r7, #28
 8105ff6:	46bd      	mov	sp, r7
 8105ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ffc:	4770      	bx	lr

08105ffe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8105ffe:	b480      	push	{r7}
 8106000:	b085      	sub	sp, #20
 8106002:	af00      	add	r7, sp, #0
 8106004:	6078      	str	r0, [r7, #4]
 8106006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	689b      	ldr	r3, [r3, #8]
 810600c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810600e:	68fb      	ldr	r3, [r7, #12]
 8106010:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8106014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810601a:	683a      	ldr	r2, [r7, #0]
 810601c:	68fb      	ldr	r3, [r7, #12]
 810601e:	4313      	orrs	r3, r2
 8106020:	f043 0307 	orr.w	r3, r3, #7
 8106024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	68fa      	ldr	r2, [r7, #12]
 810602a:	609a      	str	r2, [r3, #8]
}
 810602c:	bf00      	nop
 810602e:	3714      	adds	r7, #20
 8106030:	46bd      	mov	sp, r7
 8106032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106036:	4770      	bx	lr

08106038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8106038:	b480      	push	{r7}
 810603a:	b087      	sub	sp, #28
 810603c:	af00      	add	r7, sp, #0
 810603e:	60f8      	str	r0, [r7, #12]
 8106040:	60b9      	str	r1, [r7, #8]
 8106042:	607a      	str	r2, [r7, #4]
 8106044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8106046:	68fb      	ldr	r3, [r7, #12]
 8106048:	689b      	ldr	r3, [r3, #8]
 810604a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810604c:	697b      	ldr	r3, [r7, #20]
 810604e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106054:	683b      	ldr	r3, [r7, #0]
 8106056:	021a      	lsls	r2, r3, #8
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	431a      	orrs	r2, r3
 810605c:	68bb      	ldr	r3, [r7, #8]
 810605e:	4313      	orrs	r3, r2
 8106060:	697a      	ldr	r2, [r7, #20]
 8106062:	4313      	orrs	r3, r2
 8106064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106066:	68fb      	ldr	r3, [r7, #12]
 8106068:	697a      	ldr	r2, [r7, #20]
 810606a:	609a      	str	r2, [r3, #8]
}
 810606c:	bf00      	nop
 810606e:	371c      	adds	r7, #28
 8106070:	46bd      	mov	sp, r7
 8106072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106076:	4770      	bx	lr

08106078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106078:	b480      	push	{r7}
 810607a:	b085      	sub	sp, #20
 810607c:	af00      	add	r7, sp, #0
 810607e:	6078      	str	r0, [r7, #4]
 8106080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8106088:	2b01      	cmp	r3, #1
 810608a:	d101      	bne.n	8106090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810608c:	2302      	movs	r3, #2
 810608e:	e06d      	b.n	810616c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	2201      	movs	r2, #1
 8106094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	2202      	movs	r2, #2
 810609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	685b      	ldr	r3, [r3, #4]
 81060a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	689b      	ldr	r3, [r3, #8]
 81060ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81060b0:	687b      	ldr	r3, [r7, #4]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	4a30      	ldr	r2, [pc, #192]	@ (8106178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81060b6:	4293      	cmp	r3, r2
 81060b8:	d004      	beq.n	81060c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	4a2f      	ldr	r2, [pc, #188]	@ (810617c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81060c0:	4293      	cmp	r3, r2
 81060c2:	d108      	bne.n	81060d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81060c4:	68fb      	ldr	r3, [r7, #12]
 81060c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 81060ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81060cc:	683b      	ldr	r3, [r7, #0]
 81060ce:	685b      	ldr	r3, [r3, #4]
 81060d0:	68fa      	ldr	r2, [r7, #12]
 81060d2:	4313      	orrs	r3, r2
 81060d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81060d6:	68fb      	ldr	r3, [r7, #12]
 81060d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81060dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81060de:	683b      	ldr	r3, [r7, #0]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	68fa      	ldr	r2, [r7, #12]
 81060e4:	4313      	orrs	r3, r2
 81060e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	681b      	ldr	r3, [r3, #0]
 81060ec:	68fa      	ldr	r2, [r7, #12]
 81060ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	681b      	ldr	r3, [r3, #0]
 81060f4:	4a20      	ldr	r2, [pc, #128]	@ (8106178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81060f6:	4293      	cmp	r3, r2
 81060f8:	d022      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81060fa:	687b      	ldr	r3, [r7, #4]
 81060fc:	681b      	ldr	r3, [r3, #0]
 81060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106102:	d01d      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	681b      	ldr	r3, [r3, #0]
 8106108:	4a1d      	ldr	r2, [pc, #116]	@ (8106180 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810610a:	4293      	cmp	r3, r2
 810610c:	d018      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	681b      	ldr	r3, [r3, #0]
 8106112:	4a1c      	ldr	r2, [pc, #112]	@ (8106184 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106114:	4293      	cmp	r3, r2
 8106116:	d013      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	4a1a      	ldr	r2, [pc, #104]	@ (8106188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810611e:	4293      	cmp	r3, r2
 8106120:	d00e      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	681b      	ldr	r3, [r3, #0]
 8106126:	4a15      	ldr	r2, [pc, #84]	@ (810617c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106128:	4293      	cmp	r3, r2
 810612a:	d009      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	4a16      	ldr	r2, [pc, #88]	@ (810618c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106132:	4293      	cmp	r3, r2
 8106134:	d004      	beq.n	8106140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	681b      	ldr	r3, [r3, #0]
 810613a:	4a15      	ldr	r2, [pc, #84]	@ (8106190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810613c:	4293      	cmp	r3, r2
 810613e:	d10c      	bne.n	810615a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106140:	68bb      	ldr	r3, [r7, #8]
 8106142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8106146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106148:	683b      	ldr	r3, [r7, #0]
 810614a:	689b      	ldr	r3, [r3, #8]
 810614c:	68ba      	ldr	r2, [r7, #8]
 810614e:	4313      	orrs	r3, r2
 8106150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106152:	687b      	ldr	r3, [r7, #4]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	68ba      	ldr	r2, [r7, #8]
 8106158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	2201      	movs	r2, #1
 810615e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	2200      	movs	r2, #0
 8106166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810616a:	2300      	movs	r3, #0
}
 810616c:	4618      	mov	r0, r3
 810616e:	3714      	adds	r7, #20
 8106170:	46bd      	mov	sp, r7
 8106172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106176:	4770      	bx	lr
 8106178:	40010000 	.word	0x40010000
 810617c:	40010400 	.word	0x40010400
 8106180:	40000400 	.word	0x40000400
 8106184:	40000800 	.word	0x40000800
 8106188:	40000c00 	.word	0x40000c00
 810618c:	40001800 	.word	0x40001800
 8106190:	40014000 	.word	0x40014000

08106194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106194:	b480      	push	{r7}
 8106196:	b083      	sub	sp, #12
 8106198:	af00      	add	r7, sp, #0
 810619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810619c:	bf00      	nop
 810619e:	370c      	adds	r7, #12
 81061a0:	46bd      	mov	sp, r7
 81061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061a6:	4770      	bx	lr

081061a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81061a8:	b480      	push	{r7}
 81061aa:	b083      	sub	sp, #12
 81061ac:	af00      	add	r7, sp, #0
 81061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81061b0:	bf00      	nop
 81061b2:	370c      	adds	r7, #12
 81061b4:	46bd      	mov	sp, r7
 81061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ba:	4770      	bx	lr

081061bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81061bc:	b480      	push	{r7}
 81061be:	b083      	sub	sp, #12
 81061c0:	af00      	add	r7, sp, #0
 81061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81061c4:	bf00      	nop
 81061c6:	370c      	adds	r7, #12
 81061c8:	46bd      	mov	sp, r7
 81061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ce:	4770      	bx	lr

081061d0 <memset>:
 81061d0:	4402      	add	r2, r0
 81061d2:	4603      	mov	r3, r0
 81061d4:	4293      	cmp	r3, r2
 81061d6:	d100      	bne.n	81061da <memset+0xa>
 81061d8:	4770      	bx	lr
 81061da:	f803 1b01 	strb.w	r1, [r3], #1
 81061de:	e7f9      	b.n	81061d4 <memset+0x4>

081061e0 <__errno>:
 81061e0:	4b01      	ldr	r3, [pc, #4]	@ (81061e8 <__errno+0x8>)
 81061e2:	6818      	ldr	r0, [r3, #0]
 81061e4:	4770      	bx	lr
 81061e6:	bf00      	nop
 81061e8:	1000001c 	.word	0x1000001c

081061ec <__libc_init_array>:
 81061ec:	b570      	push	{r4, r5, r6, lr}
 81061ee:	4d0d      	ldr	r5, [pc, #52]	@ (8106224 <__libc_init_array+0x38>)
 81061f0:	4c0d      	ldr	r4, [pc, #52]	@ (8106228 <__libc_init_array+0x3c>)
 81061f2:	1b64      	subs	r4, r4, r5
 81061f4:	10a4      	asrs	r4, r4, #2
 81061f6:	2600      	movs	r6, #0
 81061f8:	42a6      	cmp	r6, r4
 81061fa:	d109      	bne.n	8106210 <__libc_init_array+0x24>
 81061fc:	4d0b      	ldr	r5, [pc, #44]	@ (810622c <__libc_init_array+0x40>)
 81061fe:	4c0c      	ldr	r4, [pc, #48]	@ (8106230 <__libc_init_array+0x44>)
 8106200:	f001 f992 	bl	8107528 <_init>
 8106204:	1b64      	subs	r4, r4, r5
 8106206:	10a4      	asrs	r4, r4, #2
 8106208:	2600      	movs	r6, #0
 810620a:	42a6      	cmp	r6, r4
 810620c:	d105      	bne.n	810621a <__libc_init_array+0x2e>
 810620e:	bd70      	pop	{r4, r5, r6, pc}
 8106210:	f855 3b04 	ldr.w	r3, [r5], #4
 8106214:	4798      	blx	r3
 8106216:	3601      	adds	r6, #1
 8106218:	e7ee      	b.n	81061f8 <__libc_init_array+0xc>
 810621a:	f855 3b04 	ldr.w	r3, [r5], #4
 810621e:	4798      	blx	r3
 8106220:	3601      	adds	r6, #1
 8106222:	e7f2      	b.n	810620a <__libc_init_array+0x1e>
 8106224:	081075e0 	.word	0x081075e0
 8106228:	081075e0 	.word	0x081075e0
 810622c:	081075e0 	.word	0x081075e0
 8106230:	081075e4 	.word	0x081075e4

08106234 <asin>:
 8106234:	b538      	push	{r3, r4, r5, lr}
 8106236:	ed2d 8b02 	vpush	{d8}
 810623a:	ec55 4b10 	vmov	r4, r5, d0
 810623e:	f000 f9a7 	bl	8106590 <__ieee754_asin>
 8106242:	4622      	mov	r2, r4
 8106244:	462b      	mov	r3, r5
 8106246:	4620      	mov	r0, r4
 8106248:	4629      	mov	r1, r5
 810624a:	eeb0 8a40 	vmov.f32	s16, s0
 810624e:	eef0 8a60 	vmov.f32	s17, s1
 8106252:	f7fa fc97 	bl	8100b84 <__aeabi_dcmpun>
 8106256:	b9a8      	cbnz	r0, 8106284 <asin+0x50>
 8106258:	ec45 4b10 	vmov	d0, r4, r5
 810625c:	f000 f84c 	bl	81062f8 <fabs>
 8106260:	4b0c      	ldr	r3, [pc, #48]	@ (8106294 <asin+0x60>)
 8106262:	ec51 0b10 	vmov	r0, r1, d0
 8106266:	2200      	movs	r2, #0
 8106268:	f7fa fc82 	bl	8100b70 <__aeabi_dcmpgt>
 810626c:	b150      	cbz	r0, 8106284 <asin+0x50>
 810626e:	f7ff ffb7 	bl	81061e0 <__errno>
 8106272:	ecbd 8b02 	vpop	{d8}
 8106276:	2321      	movs	r3, #33	@ 0x21
 8106278:	6003      	str	r3, [r0, #0]
 810627a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810627e:	4806      	ldr	r0, [pc, #24]	@ (8106298 <asin+0x64>)
 8106280:	f000 b89a 	b.w	81063b8 <nan>
 8106284:	eeb0 0a48 	vmov.f32	s0, s16
 8106288:	eef0 0a68 	vmov.f32	s1, s17
 810628c:	ecbd 8b02 	vpop	{d8}
 8106290:	bd38      	pop	{r3, r4, r5, pc}
 8106292:	bf00      	nop
 8106294:	3ff00000 	.word	0x3ff00000
 8106298:	08107550 	.word	0x08107550

0810629c <atan2>:
 810629c:	f000 bb7c 	b.w	8106998 <__ieee754_atan2>

081062a0 <sqrt>:
 81062a0:	b538      	push	{r3, r4, r5, lr}
 81062a2:	ed2d 8b02 	vpush	{d8}
 81062a6:	ec55 4b10 	vmov	r4, r5, d0
 81062aa:	f000 f897 	bl	81063dc <__ieee754_sqrt>
 81062ae:	4622      	mov	r2, r4
 81062b0:	462b      	mov	r3, r5
 81062b2:	4620      	mov	r0, r4
 81062b4:	4629      	mov	r1, r5
 81062b6:	eeb0 8a40 	vmov.f32	s16, s0
 81062ba:	eef0 8a60 	vmov.f32	s17, s1
 81062be:	f7fa fc61 	bl	8100b84 <__aeabi_dcmpun>
 81062c2:	b990      	cbnz	r0, 81062ea <sqrt+0x4a>
 81062c4:	2200      	movs	r2, #0
 81062c6:	2300      	movs	r3, #0
 81062c8:	4620      	mov	r0, r4
 81062ca:	4629      	mov	r1, r5
 81062cc:	f7fa fc32 	bl	8100b34 <__aeabi_dcmplt>
 81062d0:	b158      	cbz	r0, 81062ea <sqrt+0x4a>
 81062d2:	f7ff ff85 	bl	81061e0 <__errno>
 81062d6:	2321      	movs	r3, #33	@ 0x21
 81062d8:	6003      	str	r3, [r0, #0]
 81062da:	2200      	movs	r2, #0
 81062dc:	2300      	movs	r3, #0
 81062de:	4610      	mov	r0, r2
 81062e0:	4619      	mov	r1, r3
 81062e2:	f7fa fadf 	bl	81008a4 <__aeabi_ddiv>
 81062e6:	ec41 0b18 	vmov	d8, r0, r1
 81062ea:	eeb0 0a48 	vmov.f32	s0, s16
 81062ee:	eef0 0a68 	vmov.f32	s1, s17
 81062f2:	ecbd 8b02 	vpop	{d8}
 81062f6:	bd38      	pop	{r3, r4, r5, pc}

081062f8 <fabs>:
 81062f8:	ec51 0b10 	vmov	r0, r1, d0
 81062fc:	4602      	mov	r2, r0
 81062fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8106302:	ec43 2b10 	vmov	d0, r2, r3
 8106306:	4770      	bx	lr

08106308 <powf>:
 8106308:	b508      	push	{r3, lr}
 810630a:	ed2d 8b04 	vpush	{d8-d9}
 810630e:	eeb0 8a60 	vmov.f32	s16, s1
 8106312:	eeb0 9a40 	vmov.f32	s18, s0
 8106316:	f000 fd9f 	bl	8106e58 <__ieee754_powf>
 810631a:	eeb4 8a48 	vcmp.f32	s16, s16
 810631e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106322:	eef0 8a40 	vmov.f32	s17, s0
 8106326:	d63e      	bvs.n	81063a6 <powf+0x9e>
 8106328:	eeb5 9a40 	vcmp.f32	s18, #0.0
 810632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106330:	d112      	bne.n	8106358 <powf+0x50>
 8106332:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8106336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810633a:	d039      	beq.n	81063b0 <powf+0xa8>
 810633c:	eeb0 0a48 	vmov.f32	s0, s16
 8106340:	f000 f842 	bl	81063c8 <finitef>
 8106344:	b378      	cbz	r0, 81063a6 <powf+0x9e>
 8106346:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810634e:	d52a      	bpl.n	81063a6 <powf+0x9e>
 8106350:	f7ff ff46 	bl	81061e0 <__errno>
 8106354:	2322      	movs	r3, #34	@ 0x22
 8106356:	e014      	b.n	8106382 <powf+0x7a>
 8106358:	f000 f836 	bl	81063c8 <finitef>
 810635c:	b998      	cbnz	r0, 8106386 <powf+0x7e>
 810635e:	eeb0 0a49 	vmov.f32	s0, s18
 8106362:	f000 f831 	bl	81063c8 <finitef>
 8106366:	b170      	cbz	r0, 8106386 <powf+0x7e>
 8106368:	eeb0 0a48 	vmov.f32	s0, s16
 810636c:	f000 f82c 	bl	81063c8 <finitef>
 8106370:	b148      	cbz	r0, 8106386 <powf+0x7e>
 8106372:	eef4 8a68 	vcmp.f32	s17, s17
 8106376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810637a:	d7e9      	bvc.n	8106350 <powf+0x48>
 810637c:	f7ff ff30 	bl	81061e0 <__errno>
 8106380:	2321      	movs	r3, #33	@ 0x21
 8106382:	6003      	str	r3, [r0, #0]
 8106384:	e00f      	b.n	81063a6 <powf+0x9e>
 8106386:	eef5 8a40 	vcmp.f32	s17, #0.0
 810638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810638e:	d10a      	bne.n	81063a6 <powf+0x9e>
 8106390:	eeb0 0a49 	vmov.f32	s0, s18
 8106394:	f000 f818 	bl	81063c8 <finitef>
 8106398:	b128      	cbz	r0, 81063a6 <powf+0x9e>
 810639a:	eeb0 0a48 	vmov.f32	s0, s16
 810639e:	f000 f813 	bl	81063c8 <finitef>
 81063a2:	2800      	cmp	r0, #0
 81063a4:	d1d4      	bne.n	8106350 <powf+0x48>
 81063a6:	eeb0 0a68 	vmov.f32	s0, s17
 81063aa:	ecbd 8b04 	vpop	{d8-d9}
 81063ae:	bd08      	pop	{r3, pc}
 81063b0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 81063b4:	e7f7      	b.n	81063a6 <powf+0x9e>
	...

081063b8 <nan>:
 81063b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 81063c0 <nan+0x8>
 81063bc:	4770      	bx	lr
 81063be:	bf00      	nop
 81063c0:	00000000 	.word	0x00000000
 81063c4:	7ff80000 	.word	0x7ff80000

081063c8 <finitef>:
 81063c8:	ee10 3a10 	vmov	r3, s0
 81063cc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 81063d0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 81063d4:	bfac      	ite	ge
 81063d6:	2000      	movge	r0, #0
 81063d8:	2001      	movlt	r0, #1
 81063da:	4770      	bx	lr

081063dc <__ieee754_sqrt>:
 81063dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81063e0:	4a68      	ldr	r2, [pc, #416]	@ (8106584 <__ieee754_sqrt+0x1a8>)
 81063e2:	ec55 4b10 	vmov	r4, r5, d0
 81063e6:	43aa      	bics	r2, r5
 81063e8:	462b      	mov	r3, r5
 81063ea:	4621      	mov	r1, r4
 81063ec:	d110      	bne.n	8106410 <__ieee754_sqrt+0x34>
 81063ee:	4622      	mov	r2, r4
 81063f0:	4620      	mov	r0, r4
 81063f2:	4629      	mov	r1, r5
 81063f4:	f7fa f92c 	bl	8100650 <__aeabi_dmul>
 81063f8:	4602      	mov	r2, r0
 81063fa:	460b      	mov	r3, r1
 81063fc:	4620      	mov	r0, r4
 81063fe:	4629      	mov	r1, r5
 8106400:	f7f9 ff70 	bl	81002e4 <__adddf3>
 8106404:	4604      	mov	r4, r0
 8106406:	460d      	mov	r5, r1
 8106408:	ec45 4b10 	vmov	d0, r4, r5
 810640c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106410:	2d00      	cmp	r5, #0
 8106412:	dc0e      	bgt.n	8106432 <__ieee754_sqrt+0x56>
 8106414:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8106418:	4322      	orrs	r2, r4
 810641a:	d0f5      	beq.n	8106408 <__ieee754_sqrt+0x2c>
 810641c:	b19d      	cbz	r5, 8106446 <__ieee754_sqrt+0x6a>
 810641e:	4622      	mov	r2, r4
 8106420:	4620      	mov	r0, r4
 8106422:	4629      	mov	r1, r5
 8106424:	f7f9 ff5c 	bl	81002e0 <__aeabi_dsub>
 8106428:	4602      	mov	r2, r0
 810642a:	460b      	mov	r3, r1
 810642c:	f7fa fa3a 	bl	81008a4 <__aeabi_ddiv>
 8106430:	e7e8      	b.n	8106404 <__ieee754_sqrt+0x28>
 8106432:	152a      	asrs	r2, r5, #20
 8106434:	d115      	bne.n	8106462 <__ieee754_sqrt+0x86>
 8106436:	2000      	movs	r0, #0
 8106438:	e009      	b.n	810644e <__ieee754_sqrt+0x72>
 810643a:	0acb      	lsrs	r3, r1, #11
 810643c:	3a15      	subs	r2, #21
 810643e:	0549      	lsls	r1, r1, #21
 8106440:	2b00      	cmp	r3, #0
 8106442:	d0fa      	beq.n	810643a <__ieee754_sqrt+0x5e>
 8106444:	e7f7      	b.n	8106436 <__ieee754_sqrt+0x5a>
 8106446:	462a      	mov	r2, r5
 8106448:	e7fa      	b.n	8106440 <__ieee754_sqrt+0x64>
 810644a:	005b      	lsls	r3, r3, #1
 810644c:	3001      	adds	r0, #1
 810644e:	02dc      	lsls	r4, r3, #11
 8106450:	d5fb      	bpl.n	810644a <__ieee754_sqrt+0x6e>
 8106452:	1e44      	subs	r4, r0, #1
 8106454:	1b12      	subs	r2, r2, r4
 8106456:	f1c0 0420 	rsb	r4, r0, #32
 810645a:	fa21 f404 	lsr.w	r4, r1, r4
 810645e:	4323      	orrs	r3, r4
 8106460:	4081      	lsls	r1, r0
 8106462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8106466:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 810646a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810646e:	07d2      	lsls	r2, r2, #31
 8106470:	bf5c      	itt	pl
 8106472:	005b      	lslpl	r3, r3, #1
 8106474:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8106478:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810647c:	bf58      	it	pl
 810647e:	0049      	lslpl	r1, r1, #1
 8106480:	2600      	movs	r6, #0
 8106482:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8106486:	106d      	asrs	r5, r5, #1
 8106488:	0049      	lsls	r1, r1, #1
 810648a:	2016      	movs	r0, #22
 810648c:	4632      	mov	r2, r6
 810648e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8106492:	1917      	adds	r7, r2, r4
 8106494:	429f      	cmp	r7, r3
 8106496:	bfde      	ittt	le
 8106498:	193a      	addle	r2, r7, r4
 810649a:	1bdb      	suble	r3, r3, r7
 810649c:	1936      	addle	r6, r6, r4
 810649e:	0fcf      	lsrs	r7, r1, #31
 81064a0:	3801      	subs	r0, #1
 81064a2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 81064a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 81064aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 81064ae:	d1f0      	bne.n	8106492 <__ieee754_sqrt+0xb6>
 81064b0:	4604      	mov	r4, r0
 81064b2:	2720      	movs	r7, #32
 81064b4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 81064b8:	429a      	cmp	r2, r3
 81064ba:	eb00 0e0c 	add.w	lr, r0, ip
 81064be:	db02      	blt.n	81064c6 <__ieee754_sqrt+0xea>
 81064c0:	d113      	bne.n	81064ea <__ieee754_sqrt+0x10e>
 81064c2:	458e      	cmp	lr, r1
 81064c4:	d811      	bhi.n	81064ea <__ieee754_sqrt+0x10e>
 81064c6:	f1be 0f00 	cmp.w	lr, #0
 81064ca:	eb0e 000c 	add.w	r0, lr, ip
 81064ce:	da42      	bge.n	8106556 <__ieee754_sqrt+0x17a>
 81064d0:	2800      	cmp	r0, #0
 81064d2:	db40      	blt.n	8106556 <__ieee754_sqrt+0x17a>
 81064d4:	f102 0801 	add.w	r8, r2, #1
 81064d8:	1a9b      	subs	r3, r3, r2
 81064da:	458e      	cmp	lr, r1
 81064dc:	bf88      	it	hi
 81064de:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 81064e2:	eba1 010e 	sub.w	r1, r1, lr
 81064e6:	4464      	add	r4, ip
 81064e8:	4642      	mov	r2, r8
 81064ea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 81064ee:	3f01      	subs	r7, #1
 81064f0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 81064f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 81064f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 81064fc:	d1dc      	bne.n	81064b8 <__ieee754_sqrt+0xdc>
 81064fe:	4319      	orrs	r1, r3
 8106500:	d01b      	beq.n	810653a <__ieee754_sqrt+0x15e>
 8106502:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8106588 <__ieee754_sqrt+0x1ac>
 8106506:	f8df b084 	ldr.w	fp, [pc, #132]	@ 810658c <__ieee754_sqrt+0x1b0>
 810650a:	e9da 0100 	ldrd	r0, r1, [sl]
 810650e:	e9db 2300 	ldrd	r2, r3, [fp]
 8106512:	f7f9 fee5 	bl	81002e0 <__aeabi_dsub>
 8106516:	e9da 8900 	ldrd	r8, r9, [sl]
 810651a:	4602      	mov	r2, r0
 810651c:	460b      	mov	r3, r1
 810651e:	4640      	mov	r0, r8
 8106520:	4649      	mov	r1, r9
 8106522:	f7fa fb11 	bl	8100b48 <__aeabi_dcmple>
 8106526:	b140      	cbz	r0, 810653a <__ieee754_sqrt+0x15e>
 8106528:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 810652c:	e9da 0100 	ldrd	r0, r1, [sl]
 8106530:	e9db 2300 	ldrd	r2, r3, [fp]
 8106534:	d111      	bne.n	810655a <__ieee754_sqrt+0x17e>
 8106536:	3601      	adds	r6, #1
 8106538:	463c      	mov	r4, r7
 810653a:	1072      	asrs	r2, r6, #1
 810653c:	0863      	lsrs	r3, r4, #1
 810653e:	07f1      	lsls	r1, r6, #31
 8106540:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8106544:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8106548:	bf48      	it	mi
 810654a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 810654e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8106552:	4618      	mov	r0, r3
 8106554:	e756      	b.n	8106404 <__ieee754_sqrt+0x28>
 8106556:	4690      	mov	r8, r2
 8106558:	e7be      	b.n	81064d8 <__ieee754_sqrt+0xfc>
 810655a:	f7f9 fec3 	bl	81002e4 <__adddf3>
 810655e:	e9da 8900 	ldrd	r8, r9, [sl]
 8106562:	4602      	mov	r2, r0
 8106564:	460b      	mov	r3, r1
 8106566:	4640      	mov	r0, r8
 8106568:	4649      	mov	r1, r9
 810656a:	f7fa fae3 	bl	8100b34 <__aeabi_dcmplt>
 810656e:	b120      	cbz	r0, 810657a <__ieee754_sqrt+0x19e>
 8106570:	1ca0      	adds	r0, r4, #2
 8106572:	bf08      	it	eq
 8106574:	3601      	addeq	r6, #1
 8106576:	3402      	adds	r4, #2
 8106578:	e7df      	b.n	810653a <__ieee754_sqrt+0x15e>
 810657a:	1c63      	adds	r3, r4, #1
 810657c:	f023 0401 	bic.w	r4, r3, #1
 8106580:	e7db      	b.n	810653a <__ieee754_sqrt+0x15e>
 8106582:	bf00      	nop
 8106584:	7ff00000 	.word	0x7ff00000
 8106588:	10000078 	.word	0x10000078
 810658c:	10000070 	.word	0x10000070

08106590 <__ieee754_asin>:
 8106590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106594:	ec55 4b10 	vmov	r4, r5, d0
 8106598:	4bc7      	ldr	r3, [pc, #796]	@ (81068b8 <__ieee754_asin+0x328>)
 810659a:	b087      	sub	sp, #28
 810659c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 81065a0:	429e      	cmp	r6, r3
 81065a2:	9501      	str	r5, [sp, #4]
 81065a4:	d92d      	bls.n	8106602 <__ieee754_asin+0x72>
 81065a6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 81065aa:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 81065ae:	4326      	orrs	r6, r4
 81065b0:	d116      	bne.n	81065e0 <__ieee754_asin+0x50>
 81065b2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8106850 <__ieee754_asin+0x2c0>)
 81065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065b8:	4620      	mov	r0, r4
 81065ba:	4629      	mov	r1, r5
 81065bc:	f7fa f848 	bl	8100650 <__aeabi_dmul>
 81065c0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8106858 <__ieee754_asin+0x2c8>)
 81065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065c6:	4606      	mov	r6, r0
 81065c8:	460f      	mov	r7, r1
 81065ca:	4620      	mov	r0, r4
 81065cc:	4629      	mov	r1, r5
 81065ce:	f7fa f83f 	bl	8100650 <__aeabi_dmul>
 81065d2:	4602      	mov	r2, r0
 81065d4:	460b      	mov	r3, r1
 81065d6:	4630      	mov	r0, r6
 81065d8:	4639      	mov	r1, r7
 81065da:	f7f9 fe83 	bl	81002e4 <__adddf3>
 81065de:	e009      	b.n	81065f4 <__ieee754_asin+0x64>
 81065e0:	4622      	mov	r2, r4
 81065e2:	462b      	mov	r3, r5
 81065e4:	4620      	mov	r0, r4
 81065e6:	4629      	mov	r1, r5
 81065e8:	f7f9 fe7a 	bl	81002e0 <__aeabi_dsub>
 81065ec:	4602      	mov	r2, r0
 81065ee:	460b      	mov	r3, r1
 81065f0:	f7fa f958 	bl	81008a4 <__aeabi_ddiv>
 81065f4:	4604      	mov	r4, r0
 81065f6:	460d      	mov	r5, r1
 81065f8:	ec45 4b10 	vmov	d0, r4, r5
 81065fc:	b007      	add	sp, #28
 81065fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106602:	4bae      	ldr	r3, [pc, #696]	@ (81068bc <__ieee754_asin+0x32c>)
 8106604:	429e      	cmp	r6, r3
 8106606:	d810      	bhi.n	810662a <__ieee754_asin+0x9a>
 8106608:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 810660c:	f080 80ad 	bcs.w	810676a <__ieee754_asin+0x1da>
 8106610:	a393      	add	r3, pc, #588	@ (adr r3, 8106860 <__ieee754_asin+0x2d0>)
 8106612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106616:	4620      	mov	r0, r4
 8106618:	4629      	mov	r1, r5
 810661a:	f7f9 fe63 	bl	81002e4 <__adddf3>
 810661e:	4ba8      	ldr	r3, [pc, #672]	@ (81068c0 <__ieee754_asin+0x330>)
 8106620:	2200      	movs	r2, #0
 8106622:	f7fa faa5 	bl	8100b70 <__aeabi_dcmpgt>
 8106626:	2800      	cmp	r0, #0
 8106628:	d1e6      	bne.n	81065f8 <__ieee754_asin+0x68>
 810662a:	ec45 4b10 	vmov	d0, r4, r5
 810662e:	f7ff fe63 	bl	81062f8 <fabs>
 8106632:	49a3      	ldr	r1, [pc, #652]	@ (81068c0 <__ieee754_asin+0x330>)
 8106634:	ec53 2b10 	vmov	r2, r3, d0
 8106638:	2000      	movs	r0, #0
 810663a:	f7f9 fe51 	bl	81002e0 <__aeabi_dsub>
 810663e:	4ba1      	ldr	r3, [pc, #644]	@ (81068c4 <__ieee754_asin+0x334>)
 8106640:	2200      	movs	r2, #0
 8106642:	f7fa f805 	bl	8100650 <__aeabi_dmul>
 8106646:	a388      	add	r3, pc, #544	@ (adr r3, 8106868 <__ieee754_asin+0x2d8>)
 8106648:	e9d3 2300 	ldrd	r2, r3, [r3]
 810664c:	4604      	mov	r4, r0
 810664e:	460d      	mov	r5, r1
 8106650:	f7f9 fffe 	bl	8100650 <__aeabi_dmul>
 8106654:	a386      	add	r3, pc, #536	@ (adr r3, 8106870 <__ieee754_asin+0x2e0>)
 8106656:	e9d3 2300 	ldrd	r2, r3, [r3]
 810665a:	f7f9 fe43 	bl	81002e4 <__adddf3>
 810665e:	4622      	mov	r2, r4
 8106660:	462b      	mov	r3, r5
 8106662:	f7f9 fff5 	bl	8100650 <__aeabi_dmul>
 8106666:	a384      	add	r3, pc, #528	@ (adr r3, 8106878 <__ieee754_asin+0x2e8>)
 8106668:	e9d3 2300 	ldrd	r2, r3, [r3]
 810666c:	f7f9 fe38 	bl	81002e0 <__aeabi_dsub>
 8106670:	4622      	mov	r2, r4
 8106672:	462b      	mov	r3, r5
 8106674:	f7f9 ffec 	bl	8100650 <__aeabi_dmul>
 8106678:	a381      	add	r3, pc, #516	@ (adr r3, 8106880 <__ieee754_asin+0x2f0>)
 810667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810667e:	f7f9 fe31 	bl	81002e4 <__adddf3>
 8106682:	4622      	mov	r2, r4
 8106684:	462b      	mov	r3, r5
 8106686:	f7f9 ffe3 	bl	8100650 <__aeabi_dmul>
 810668a:	a37f      	add	r3, pc, #508	@ (adr r3, 8106888 <__ieee754_asin+0x2f8>)
 810668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106690:	f7f9 fe26 	bl	81002e0 <__aeabi_dsub>
 8106694:	4622      	mov	r2, r4
 8106696:	462b      	mov	r3, r5
 8106698:	f7f9 ffda 	bl	8100650 <__aeabi_dmul>
 810669c:	a37c      	add	r3, pc, #496	@ (adr r3, 8106890 <__ieee754_asin+0x300>)
 810669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066a2:	f7f9 fe1f 	bl	81002e4 <__adddf3>
 81066a6:	4622      	mov	r2, r4
 81066a8:	462b      	mov	r3, r5
 81066aa:	f7f9 ffd1 	bl	8100650 <__aeabi_dmul>
 81066ae:	a37a      	add	r3, pc, #488	@ (adr r3, 8106898 <__ieee754_asin+0x308>)
 81066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81066b8:	4620      	mov	r0, r4
 81066ba:	4629      	mov	r1, r5
 81066bc:	f7f9 ffc8 	bl	8100650 <__aeabi_dmul>
 81066c0:	a377      	add	r3, pc, #476	@ (adr r3, 81068a0 <__ieee754_asin+0x310>)
 81066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066c6:	f7f9 fe0b 	bl	81002e0 <__aeabi_dsub>
 81066ca:	4622      	mov	r2, r4
 81066cc:	462b      	mov	r3, r5
 81066ce:	f7f9 ffbf 	bl	8100650 <__aeabi_dmul>
 81066d2:	a375      	add	r3, pc, #468	@ (adr r3, 81068a8 <__ieee754_asin+0x318>)
 81066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066d8:	f7f9 fe04 	bl	81002e4 <__adddf3>
 81066dc:	4622      	mov	r2, r4
 81066de:	462b      	mov	r3, r5
 81066e0:	f7f9 ffb6 	bl	8100650 <__aeabi_dmul>
 81066e4:	a372      	add	r3, pc, #456	@ (adr r3, 81068b0 <__ieee754_asin+0x320>)
 81066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ea:	f7f9 fdf9 	bl	81002e0 <__aeabi_dsub>
 81066ee:	4622      	mov	r2, r4
 81066f0:	462b      	mov	r3, r5
 81066f2:	f7f9 ffad 	bl	8100650 <__aeabi_dmul>
 81066f6:	4b72      	ldr	r3, [pc, #456]	@ (81068c0 <__ieee754_asin+0x330>)
 81066f8:	2200      	movs	r2, #0
 81066fa:	f7f9 fdf3 	bl	81002e4 <__adddf3>
 81066fe:	ec45 4b10 	vmov	d0, r4, r5
 8106702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8106706:	f7ff fe69 	bl	81063dc <__ieee754_sqrt>
 810670a:	4b6f      	ldr	r3, [pc, #444]	@ (81068c8 <__ieee754_asin+0x338>)
 810670c:	429e      	cmp	r6, r3
 810670e:	ec5b ab10 	vmov	sl, fp, d0
 8106712:	f240 80db 	bls.w	81068cc <__ieee754_asin+0x33c>
 8106716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810671a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810671e:	f7fa f8c1 	bl	81008a4 <__aeabi_ddiv>
 8106722:	4652      	mov	r2, sl
 8106724:	465b      	mov	r3, fp
 8106726:	f7f9 ff93 	bl	8100650 <__aeabi_dmul>
 810672a:	4652      	mov	r2, sl
 810672c:	465b      	mov	r3, fp
 810672e:	f7f9 fdd9 	bl	81002e4 <__adddf3>
 8106732:	4602      	mov	r2, r0
 8106734:	460b      	mov	r3, r1
 8106736:	f7f9 fdd5 	bl	81002e4 <__adddf3>
 810673a:	a347      	add	r3, pc, #284	@ (adr r3, 8106858 <__ieee754_asin+0x2c8>)
 810673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106740:	f7f9 fdce 	bl	81002e0 <__aeabi_dsub>
 8106744:	4602      	mov	r2, r0
 8106746:	460b      	mov	r3, r1
 8106748:	a141      	add	r1, pc, #260	@ (adr r1, 8106850 <__ieee754_asin+0x2c0>)
 810674a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810674e:	f7f9 fdc7 	bl	81002e0 <__aeabi_dsub>
 8106752:	9b01      	ldr	r3, [sp, #4]
 8106754:	2b00      	cmp	r3, #0
 8106756:	bfdc      	itt	le
 8106758:	4602      	movle	r2, r0
 810675a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 810675e:	4604      	mov	r4, r0
 8106760:	460d      	mov	r5, r1
 8106762:	bfdc      	itt	le
 8106764:	4614      	movle	r4, r2
 8106766:	461d      	movle	r5, r3
 8106768:	e746      	b.n	81065f8 <__ieee754_asin+0x68>
 810676a:	4622      	mov	r2, r4
 810676c:	462b      	mov	r3, r5
 810676e:	4620      	mov	r0, r4
 8106770:	4629      	mov	r1, r5
 8106772:	f7f9 ff6d 	bl	8100650 <__aeabi_dmul>
 8106776:	a33c      	add	r3, pc, #240	@ (adr r3, 8106868 <__ieee754_asin+0x2d8>)
 8106778:	e9d3 2300 	ldrd	r2, r3, [r3]
 810677c:	4606      	mov	r6, r0
 810677e:	460f      	mov	r7, r1
 8106780:	f7f9 ff66 	bl	8100650 <__aeabi_dmul>
 8106784:	a33a      	add	r3, pc, #232	@ (adr r3, 8106870 <__ieee754_asin+0x2e0>)
 8106786:	e9d3 2300 	ldrd	r2, r3, [r3]
 810678a:	f7f9 fdab 	bl	81002e4 <__adddf3>
 810678e:	4632      	mov	r2, r6
 8106790:	463b      	mov	r3, r7
 8106792:	f7f9 ff5d 	bl	8100650 <__aeabi_dmul>
 8106796:	a338      	add	r3, pc, #224	@ (adr r3, 8106878 <__ieee754_asin+0x2e8>)
 8106798:	e9d3 2300 	ldrd	r2, r3, [r3]
 810679c:	f7f9 fda0 	bl	81002e0 <__aeabi_dsub>
 81067a0:	4632      	mov	r2, r6
 81067a2:	463b      	mov	r3, r7
 81067a4:	f7f9 ff54 	bl	8100650 <__aeabi_dmul>
 81067a8:	a335      	add	r3, pc, #212	@ (adr r3, 8106880 <__ieee754_asin+0x2f0>)
 81067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067ae:	f7f9 fd99 	bl	81002e4 <__adddf3>
 81067b2:	4632      	mov	r2, r6
 81067b4:	463b      	mov	r3, r7
 81067b6:	f7f9 ff4b 	bl	8100650 <__aeabi_dmul>
 81067ba:	a333      	add	r3, pc, #204	@ (adr r3, 8106888 <__ieee754_asin+0x2f8>)
 81067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067c0:	f7f9 fd8e 	bl	81002e0 <__aeabi_dsub>
 81067c4:	4632      	mov	r2, r6
 81067c6:	463b      	mov	r3, r7
 81067c8:	f7f9 ff42 	bl	8100650 <__aeabi_dmul>
 81067cc:	a330      	add	r3, pc, #192	@ (adr r3, 8106890 <__ieee754_asin+0x300>)
 81067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067d2:	f7f9 fd87 	bl	81002e4 <__adddf3>
 81067d6:	4632      	mov	r2, r6
 81067d8:	463b      	mov	r3, r7
 81067da:	f7f9 ff39 	bl	8100650 <__aeabi_dmul>
 81067de:	a32e      	add	r3, pc, #184	@ (adr r3, 8106898 <__ieee754_asin+0x308>)
 81067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067e4:	4680      	mov	r8, r0
 81067e6:	4689      	mov	r9, r1
 81067e8:	4630      	mov	r0, r6
 81067ea:	4639      	mov	r1, r7
 81067ec:	f7f9 ff30 	bl	8100650 <__aeabi_dmul>
 81067f0:	a32b      	add	r3, pc, #172	@ (adr r3, 81068a0 <__ieee754_asin+0x310>)
 81067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067f6:	f7f9 fd73 	bl	81002e0 <__aeabi_dsub>
 81067fa:	4632      	mov	r2, r6
 81067fc:	463b      	mov	r3, r7
 81067fe:	f7f9 ff27 	bl	8100650 <__aeabi_dmul>
 8106802:	a329      	add	r3, pc, #164	@ (adr r3, 81068a8 <__ieee754_asin+0x318>)
 8106804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106808:	f7f9 fd6c 	bl	81002e4 <__adddf3>
 810680c:	4632      	mov	r2, r6
 810680e:	463b      	mov	r3, r7
 8106810:	f7f9 ff1e 	bl	8100650 <__aeabi_dmul>
 8106814:	a326      	add	r3, pc, #152	@ (adr r3, 81068b0 <__ieee754_asin+0x320>)
 8106816:	e9d3 2300 	ldrd	r2, r3, [r3]
 810681a:	f7f9 fd61 	bl	81002e0 <__aeabi_dsub>
 810681e:	4632      	mov	r2, r6
 8106820:	463b      	mov	r3, r7
 8106822:	f7f9 ff15 	bl	8100650 <__aeabi_dmul>
 8106826:	4b26      	ldr	r3, [pc, #152]	@ (81068c0 <__ieee754_asin+0x330>)
 8106828:	2200      	movs	r2, #0
 810682a:	f7f9 fd5b 	bl	81002e4 <__adddf3>
 810682e:	4602      	mov	r2, r0
 8106830:	460b      	mov	r3, r1
 8106832:	4640      	mov	r0, r8
 8106834:	4649      	mov	r1, r9
 8106836:	f7fa f835 	bl	81008a4 <__aeabi_ddiv>
 810683a:	4622      	mov	r2, r4
 810683c:	462b      	mov	r3, r5
 810683e:	f7f9 ff07 	bl	8100650 <__aeabi_dmul>
 8106842:	4602      	mov	r2, r0
 8106844:	460b      	mov	r3, r1
 8106846:	4620      	mov	r0, r4
 8106848:	4629      	mov	r1, r5
 810684a:	e6c6      	b.n	81065da <__ieee754_asin+0x4a>
 810684c:	f3af 8000 	nop.w
 8106850:	54442d18 	.word	0x54442d18
 8106854:	3ff921fb 	.word	0x3ff921fb
 8106858:	33145c07 	.word	0x33145c07
 810685c:	3c91a626 	.word	0x3c91a626
 8106860:	8800759c 	.word	0x8800759c
 8106864:	7e37e43c 	.word	0x7e37e43c
 8106868:	0dfdf709 	.word	0x0dfdf709
 810686c:	3f023de1 	.word	0x3f023de1
 8106870:	7501b288 	.word	0x7501b288
 8106874:	3f49efe0 	.word	0x3f49efe0
 8106878:	b5688f3b 	.word	0xb5688f3b
 810687c:	3fa48228 	.word	0x3fa48228
 8106880:	0e884455 	.word	0x0e884455
 8106884:	3fc9c155 	.word	0x3fc9c155
 8106888:	03eb6f7d 	.word	0x03eb6f7d
 810688c:	3fd4d612 	.word	0x3fd4d612
 8106890:	55555555 	.word	0x55555555
 8106894:	3fc55555 	.word	0x3fc55555
 8106898:	b12e9282 	.word	0xb12e9282
 810689c:	3fb3b8c5 	.word	0x3fb3b8c5
 81068a0:	1b8d0159 	.word	0x1b8d0159
 81068a4:	3fe6066c 	.word	0x3fe6066c
 81068a8:	9c598ac8 	.word	0x9c598ac8
 81068ac:	40002ae5 	.word	0x40002ae5
 81068b0:	1c8a2d4b 	.word	0x1c8a2d4b
 81068b4:	40033a27 	.word	0x40033a27
 81068b8:	3fefffff 	.word	0x3fefffff
 81068bc:	3fdfffff 	.word	0x3fdfffff
 81068c0:	3ff00000 	.word	0x3ff00000
 81068c4:	3fe00000 	.word	0x3fe00000
 81068c8:	3fef3332 	.word	0x3fef3332
 81068cc:	4652      	mov	r2, sl
 81068ce:	465b      	mov	r3, fp
 81068d0:	4650      	mov	r0, sl
 81068d2:	4659      	mov	r1, fp
 81068d4:	f7f9 fd06 	bl	81002e4 <__adddf3>
 81068d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81068dc:	4606      	mov	r6, r0
 81068de:	460f      	mov	r7, r1
 81068e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81068e4:	f7f9 ffde 	bl	81008a4 <__aeabi_ddiv>
 81068e8:	4602      	mov	r2, r0
 81068ea:	460b      	mov	r3, r1
 81068ec:	4630      	mov	r0, r6
 81068ee:	4639      	mov	r1, r7
 81068f0:	f7f9 feae 	bl	8100650 <__aeabi_dmul>
 81068f4:	f04f 0800 	mov.w	r8, #0
 81068f8:	4606      	mov	r6, r0
 81068fa:	460f      	mov	r7, r1
 81068fc:	4642      	mov	r2, r8
 81068fe:	465b      	mov	r3, fp
 8106900:	4640      	mov	r0, r8
 8106902:	4659      	mov	r1, fp
 8106904:	f7f9 fea4 	bl	8100650 <__aeabi_dmul>
 8106908:	4602      	mov	r2, r0
 810690a:	460b      	mov	r3, r1
 810690c:	4620      	mov	r0, r4
 810690e:	4629      	mov	r1, r5
 8106910:	f7f9 fce6 	bl	81002e0 <__aeabi_dsub>
 8106914:	4642      	mov	r2, r8
 8106916:	4604      	mov	r4, r0
 8106918:	460d      	mov	r5, r1
 810691a:	465b      	mov	r3, fp
 810691c:	4650      	mov	r0, sl
 810691e:	4659      	mov	r1, fp
 8106920:	f7f9 fce0 	bl	81002e4 <__adddf3>
 8106924:	4602      	mov	r2, r0
 8106926:	460b      	mov	r3, r1
 8106928:	4620      	mov	r0, r4
 810692a:	4629      	mov	r1, r5
 810692c:	f7f9 ffba 	bl	81008a4 <__aeabi_ddiv>
 8106930:	4602      	mov	r2, r0
 8106932:	460b      	mov	r3, r1
 8106934:	f7f9 fcd6 	bl	81002e4 <__adddf3>
 8106938:	4602      	mov	r2, r0
 810693a:	460b      	mov	r3, r1
 810693c:	a112      	add	r1, pc, #72	@ (adr r1, 8106988 <__ieee754_asin+0x3f8>)
 810693e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106942:	f7f9 fccd 	bl	81002e0 <__aeabi_dsub>
 8106946:	4602      	mov	r2, r0
 8106948:	460b      	mov	r3, r1
 810694a:	4630      	mov	r0, r6
 810694c:	4639      	mov	r1, r7
 810694e:	f7f9 fcc7 	bl	81002e0 <__aeabi_dsub>
 8106952:	4642      	mov	r2, r8
 8106954:	4604      	mov	r4, r0
 8106956:	460d      	mov	r5, r1
 8106958:	465b      	mov	r3, fp
 810695a:	4640      	mov	r0, r8
 810695c:	4659      	mov	r1, fp
 810695e:	f7f9 fcc1 	bl	81002e4 <__adddf3>
 8106962:	4602      	mov	r2, r0
 8106964:	460b      	mov	r3, r1
 8106966:	a10a      	add	r1, pc, #40	@ (adr r1, 8106990 <__ieee754_asin+0x400>)
 8106968:	e9d1 0100 	ldrd	r0, r1, [r1]
 810696c:	f7f9 fcb8 	bl	81002e0 <__aeabi_dsub>
 8106970:	4602      	mov	r2, r0
 8106972:	460b      	mov	r3, r1
 8106974:	4620      	mov	r0, r4
 8106976:	4629      	mov	r1, r5
 8106978:	f7f9 fcb2 	bl	81002e0 <__aeabi_dsub>
 810697c:	4602      	mov	r2, r0
 810697e:	460b      	mov	r3, r1
 8106980:	a103      	add	r1, pc, #12	@ (adr r1, 8106990 <__ieee754_asin+0x400>)
 8106982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106986:	e6e2      	b.n	810674e <__ieee754_asin+0x1be>
 8106988:	33145c07 	.word	0x33145c07
 810698c:	3c91a626 	.word	0x3c91a626
 8106990:	54442d18 	.word	0x54442d18
 8106994:	3fe921fb 	.word	0x3fe921fb

08106998 <__ieee754_atan2>:
 8106998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810699c:	ec57 6b11 	vmov	r6, r7, d1
 81069a0:	4273      	negs	r3, r6
 81069a2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8106b20 <__ieee754_atan2+0x188>
 81069a6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 81069aa:	4333      	orrs	r3, r6
 81069ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 81069b0:	4543      	cmp	r3, r8
 81069b2:	ec51 0b10 	vmov	r0, r1, d0
 81069b6:	4635      	mov	r5, r6
 81069b8:	d809      	bhi.n	81069ce <__ieee754_atan2+0x36>
 81069ba:	4244      	negs	r4, r0
 81069bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 81069c0:	4304      	orrs	r4, r0
 81069c2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 81069c6:	4544      	cmp	r4, r8
 81069c8:	468e      	mov	lr, r1
 81069ca:	4681      	mov	r9, r0
 81069cc:	d907      	bls.n	81069de <__ieee754_atan2+0x46>
 81069ce:	4632      	mov	r2, r6
 81069d0:	463b      	mov	r3, r7
 81069d2:	f7f9 fc87 	bl	81002e4 <__adddf3>
 81069d6:	ec41 0b10 	vmov	d0, r0, r1
 81069da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81069de:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 81069e2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 81069e6:	4334      	orrs	r4, r6
 81069e8:	d103      	bne.n	81069f2 <__ieee754_atan2+0x5a>
 81069ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81069ee:	f000 b89b 	b.w	8106b28 <atan>
 81069f2:	17bc      	asrs	r4, r7, #30
 81069f4:	f004 0402 	and.w	r4, r4, #2
 81069f8:	ea53 0909 	orrs.w	r9, r3, r9
 81069fc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8106a00:	d107      	bne.n	8106a12 <__ieee754_atan2+0x7a>
 8106a02:	2c02      	cmp	r4, #2
 8106a04:	d05f      	beq.n	8106ac6 <__ieee754_atan2+0x12e>
 8106a06:	2c03      	cmp	r4, #3
 8106a08:	d1e5      	bne.n	81069d6 <__ieee754_atan2+0x3e>
 8106a0a:	a141      	add	r1, pc, #260	@ (adr r1, 8106b10 <__ieee754_atan2+0x178>)
 8106a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106a10:	e7e1      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106a12:	4315      	orrs	r5, r2
 8106a14:	d106      	bne.n	8106a24 <__ieee754_atan2+0x8c>
 8106a16:	f1be 0f00 	cmp.w	lr, #0
 8106a1a:	da5f      	bge.n	8106adc <__ieee754_atan2+0x144>
 8106a1c:	a13e      	add	r1, pc, #248	@ (adr r1, 8106b18 <__ieee754_atan2+0x180>)
 8106a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106a22:	e7d8      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106a24:	4542      	cmp	r2, r8
 8106a26:	d10f      	bne.n	8106a48 <__ieee754_atan2+0xb0>
 8106a28:	4293      	cmp	r3, r2
 8106a2a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8106a2e:	d107      	bne.n	8106a40 <__ieee754_atan2+0xa8>
 8106a30:	2c02      	cmp	r4, #2
 8106a32:	d84c      	bhi.n	8106ace <__ieee754_atan2+0x136>
 8106a34:	4b34      	ldr	r3, [pc, #208]	@ (8106b08 <__ieee754_atan2+0x170>)
 8106a36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8106a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8106a3e:	e7ca      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106a40:	2c02      	cmp	r4, #2
 8106a42:	d848      	bhi.n	8106ad6 <__ieee754_atan2+0x13e>
 8106a44:	4b31      	ldr	r3, [pc, #196]	@ (8106b0c <__ieee754_atan2+0x174>)
 8106a46:	e7f6      	b.n	8106a36 <__ieee754_atan2+0x9e>
 8106a48:	4543      	cmp	r3, r8
 8106a4a:	d0e4      	beq.n	8106a16 <__ieee754_atan2+0x7e>
 8106a4c:	1a9b      	subs	r3, r3, r2
 8106a4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8106a52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8106a56:	da1e      	bge.n	8106a96 <__ieee754_atan2+0xfe>
 8106a58:	2f00      	cmp	r7, #0
 8106a5a:	da01      	bge.n	8106a60 <__ieee754_atan2+0xc8>
 8106a5c:	323c      	adds	r2, #60	@ 0x3c
 8106a5e:	db1e      	blt.n	8106a9e <__ieee754_atan2+0x106>
 8106a60:	4632      	mov	r2, r6
 8106a62:	463b      	mov	r3, r7
 8106a64:	f7f9 ff1e 	bl	81008a4 <__aeabi_ddiv>
 8106a68:	ec41 0b10 	vmov	d0, r0, r1
 8106a6c:	f7ff fc44 	bl	81062f8 <fabs>
 8106a70:	f000 f85a 	bl	8106b28 <atan>
 8106a74:	ec51 0b10 	vmov	r0, r1, d0
 8106a78:	2c01      	cmp	r4, #1
 8106a7a:	d013      	beq.n	8106aa4 <__ieee754_atan2+0x10c>
 8106a7c:	2c02      	cmp	r4, #2
 8106a7e:	d015      	beq.n	8106aac <__ieee754_atan2+0x114>
 8106a80:	2c00      	cmp	r4, #0
 8106a82:	d0a8      	beq.n	81069d6 <__ieee754_atan2+0x3e>
 8106a84:	a318      	add	r3, pc, #96	@ (adr r3, 8106ae8 <__ieee754_atan2+0x150>)
 8106a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a8a:	f7f9 fc29 	bl	81002e0 <__aeabi_dsub>
 8106a8e:	a318      	add	r3, pc, #96	@ (adr r3, 8106af0 <__ieee754_atan2+0x158>)
 8106a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a94:	e014      	b.n	8106ac0 <__ieee754_atan2+0x128>
 8106a96:	a118      	add	r1, pc, #96	@ (adr r1, 8106af8 <__ieee754_atan2+0x160>)
 8106a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106a9c:	e7ec      	b.n	8106a78 <__ieee754_atan2+0xe0>
 8106a9e:	2000      	movs	r0, #0
 8106aa0:	2100      	movs	r1, #0
 8106aa2:	e7e9      	b.n	8106a78 <__ieee754_atan2+0xe0>
 8106aa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8106aa8:	4619      	mov	r1, r3
 8106aaa:	e794      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106aac:	a30e      	add	r3, pc, #56	@ (adr r3, 8106ae8 <__ieee754_atan2+0x150>)
 8106aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ab2:	f7f9 fc15 	bl	81002e0 <__aeabi_dsub>
 8106ab6:	4602      	mov	r2, r0
 8106ab8:	460b      	mov	r3, r1
 8106aba:	a10d      	add	r1, pc, #52	@ (adr r1, 8106af0 <__ieee754_atan2+0x158>)
 8106abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106ac0:	f7f9 fc0e 	bl	81002e0 <__aeabi_dsub>
 8106ac4:	e787      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106ac6:	a10a      	add	r1, pc, #40	@ (adr r1, 8106af0 <__ieee754_atan2+0x158>)
 8106ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106acc:	e783      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106ace:	a10c      	add	r1, pc, #48	@ (adr r1, 8106b00 <__ieee754_atan2+0x168>)
 8106ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106ad4:	e77f      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106ad6:	2000      	movs	r0, #0
 8106ad8:	2100      	movs	r1, #0
 8106ada:	e77c      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106adc:	a106      	add	r1, pc, #24	@ (adr r1, 8106af8 <__ieee754_atan2+0x160>)
 8106ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106ae2:	e778      	b.n	81069d6 <__ieee754_atan2+0x3e>
 8106ae4:	f3af 8000 	nop.w
 8106ae8:	33145c07 	.word	0x33145c07
 8106aec:	3ca1a626 	.word	0x3ca1a626
 8106af0:	54442d18 	.word	0x54442d18
 8106af4:	400921fb 	.word	0x400921fb
 8106af8:	54442d18 	.word	0x54442d18
 8106afc:	3ff921fb 	.word	0x3ff921fb
 8106b00:	54442d18 	.word	0x54442d18
 8106b04:	3fe921fb 	.word	0x3fe921fb
 8106b08:	08107570 	.word	0x08107570
 8106b0c:	08107558 	.word	0x08107558
 8106b10:	54442d18 	.word	0x54442d18
 8106b14:	c00921fb 	.word	0xc00921fb
 8106b18:	54442d18 	.word	0x54442d18
 8106b1c:	bff921fb 	.word	0xbff921fb
 8106b20:	7ff00000 	.word	0x7ff00000
 8106b24:	00000000 	.word	0x00000000

08106b28 <atan>:
 8106b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106b2c:	ec55 4b10 	vmov	r4, r5, d0
 8106b30:	4bbf      	ldr	r3, [pc, #764]	@ (8106e30 <atan+0x308>)
 8106b32:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8106b36:	429e      	cmp	r6, r3
 8106b38:	46ab      	mov	fp, r5
 8106b3a:	d918      	bls.n	8106b6e <atan+0x46>
 8106b3c:	4bbd      	ldr	r3, [pc, #756]	@ (8106e34 <atan+0x30c>)
 8106b3e:	429e      	cmp	r6, r3
 8106b40:	d801      	bhi.n	8106b46 <atan+0x1e>
 8106b42:	d109      	bne.n	8106b58 <atan+0x30>
 8106b44:	b144      	cbz	r4, 8106b58 <atan+0x30>
 8106b46:	4622      	mov	r2, r4
 8106b48:	462b      	mov	r3, r5
 8106b4a:	4620      	mov	r0, r4
 8106b4c:	4629      	mov	r1, r5
 8106b4e:	f7f9 fbc9 	bl	81002e4 <__adddf3>
 8106b52:	4604      	mov	r4, r0
 8106b54:	460d      	mov	r5, r1
 8106b56:	e006      	b.n	8106b66 <atan+0x3e>
 8106b58:	f1bb 0f00 	cmp.w	fp, #0
 8106b5c:	f340 812b 	ble.w	8106db6 <atan+0x28e>
 8106b60:	a597      	add	r5, pc, #604	@ (adr r5, 8106dc0 <atan+0x298>)
 8106b62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8106b66:	ec45 4b10 	vmov	d0, r4, r5
 8106b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106b6e:	4bb2      	ldr	r3, [pc, #712]	@ (8106e38 <atan+0x310>)
 8106b70:	429e      	cmp	r6, r3
 8106b72:	d813      	bhi.n	8106b9c <atan+0x74>
 8106b74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8106b78:	429e      	cmp	r6, r3
 8106b7a:	d80c      	bhi.n	8106b96 <atan+0x6e>
 8106b7c:	a392      	add	r3, pc, #584	@ (adr r3, 8106dc8 <atan+0x2a0>)
 8106b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b82:	4620      	mov	r0, r4
 8106b84:	4629      	mov	r1, r5
 8106b86:	f7f9 fbad 	bl	81002e4 <__adddf3>
 8106b8a:	4bac      	ldr	r3, [pc, #688]	@ (8106e3c <atan+0x314>)
 8106b8c:	2200      	movs	r2, #0
 8106b8e:	f7f9 ffef 	bl	8100b70 <__aeabi_dcmpgt>
 8106b92:	2800      	cmp	r0, #0
 8106b94:	d1e7      	bne.n	8106b66 <atan+0x3e>
 8106b96:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8106b9a:	e029      	b.n	8106bf0 <atan+0xc8>
 8106b9c:	f7ff fbac 	bl	81062f8 <fabs>
 8106ba0:	4ba7      	ldr	r3, [pc, #668]	@ (8106e40 <atan+0x318>)
 8106ba2:	429e      	cmp	r6, r3
 8106ba4:	ec55 4b10 	vmov	r4, r5, d0
 8106ba8:	f200 80bc 	bhi.w	8106d24 <atan+0x1fc>
 8106bac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8106bb0:	429e      	cmp	r6, r3
 8106bb2:	f200 809e 	bhi.w	8106cf2 <atan+0x1ca>
 8106bb6:	4622      	mov	r2, r4
 8106bb8:	462b      	mov	r3, r5
 8106bba:	4620      	mov	r0, r4
 8106bbc:	4629      	mov	r1, r5
 8106bbe:	f7f9 fb91 	bl	81002e4 <__adddf3>
 8106bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8106e3c <atan+0x314>)
 8106bc4:	2200      	movs	r2, #0
 8106bc6:	f7f9 fb8b 	bl	81002e0 <__aeabi_dsub>
 8106bca:	2200      	movs	r2, #0
 8106bcc:	4606      	mov	r6, r0
 8106bce:	460f      	mov	r7, r1
 8106bd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8106bd4:	4620      	mov	r0, r4
 8106bd6:	4629      	mov	r1, r5
 8106bd8:	f7f9 fb84 	bl	81002e4 <__adddf3>
 8106bdc:	4602      	mov	r2, r0
 8106bde:	460b      	mov	r3, r1
 8106be0:	4630      	mov	r0, r6
 8106be2:	4639      	mov	r1, r7
 8106be4:	f7f9 fe5e 	bl	81008a4 <__aeabi_ddiv>
 8106be8:	f04f 0a00 	mov.w	sl, #0
 8106bec:	4604      	mov	r4, r0
 8106bee:	460d      	mov	r5, r1
 8106bf0:	4622      	mov	r2, r4
 8106bf2:	462b      	mov	r3, r5
 8106bf4:	4620      	mov	r0, r4
 8106bf6:	4629      	mov	r1, r5
 8106bf8:	f7f9 fd2a 	bl	8100650 <__aeabi_dmul>
 8106bfc:	4602      	mov	r2, r0
 8106bfe:	460b      	mov	r3, r1
 8106c00:	4680      	mov	r8, r0
 8106c02:	4689      	mov	r9, r1
 8106c04:	f7f9 fd24 	bl	8100650 <__aeabi_dmul>
 8106c08:	a371      	add	r3, pc, #452	@ (adr r3, 8106dd0 <atan+0x2a8>)
 8106c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c0e:	4606      	mov	r6, r0
 8106c10:	460f      	mov	r7, r1
 8106c12:	f7f9 fd1d 	bl	8100650 <__aeabi_dmul>
 8106c16:	a370      	add	r3, pc, #448	@ (adr r3, 8106dd8 <atan+0x2b0>)
 8106c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c1c:	f7f9 fb62 	bl	81002e4 <__adddf3>
 8106c20:	4632      	mov	r2, r6
 8106c22:	463b      	mov	r3, r7
 8106c24:	f7f9 fd14 	bl	8100650 <__aeabi_dmul>
 8106c28:	a36d      	add	r3, pc, #436	@ (adr r3, 8106de0 <atan+0x2b8>)
 8106c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c2e:	f7f9 fb59 	bl	81002e4 <__adddf3>
 8106c32:	4632      	mov	r2, r6
 8106c34:	463b      	mov	r3, r7
 8106c36:	f7f9 fd0b 	bl	8100650 <__aeabi_dmul>
 8106c3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8106de8 <atan+0x2c0>)
 8106c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c40:	f7f9 fb50 	bl	81002e4 <__adddf3>
 8106c44:	4632      	mov	r2, r6
 8106c46:	463b      	mov	r3, r7
 8106c48:	f7f9 fd02 	bl	8100650 <__aeabi_dmul>
 8106c4c:	a368      	add	r3, pc, #416	@ (adr r3, 8106df0 <atan+0x2c8>)
 8106c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c52:	f7f9 fb47 	bl	81002e4 <__adddf3>
 8106c56:	4632      	mov	r2, r6
 8106c58:	463b      	mov	r3, r7
 8106c5a:	f7f9 fcf9 	bl	8100650 <__aeabi_dmul>
 8106c5e:	a366      	add	r3, pc, #408	@ (adr r3, 8106df8 <atan+0x2d0>)
 8106c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c64:	f7f9 fb3e 	bl	81002e4 <__adddf3>
 8106c68:	4642      	mov	r2, r8
 8106c6a:	464b      	mov	r3, r9
 8106c6c:	f7f9 fcf0 	bl	8100650 <__aeabi_dmul>
 8106c70:	a363      	add	r3, pc, #396	@ (adr r3, 8106e00 <atan+0x2d8>)
 8106c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c76:	4680      	mov	r8, r0
 8106c78:	4689      	mov	r9, r1
 8106c7a:	4630      	mov	r0, r6
 8106c7c:	4639      	mov	r1, r7
 8106c7e:	f7f9 fce7 	bl	8100650 <__aeabi_dmul>
 8106c82:	a361      	add	r3, pc, #388	@ (adr r3, 8106e08 <atan+0x2e0>)
 8106c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c88:	f7f9 fb2a 	bl	81002e0 <__aeabi_dsub>
 8106c8c:	4632      	mov	r2, r6
 8106c8e:	463b      	mov	r3, r7
 8106c90:	f7f9 fcde 	bl	8100650 <__aeabi_dmul>
 8106c94:	a35e      	add	r3, pc, #376	@ (adr r3, 8106e10 <atan+0x2e8>)
 8106c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c9a:	f7f9 fb21 	bl	81002e0 <__aeabi_dsub>
 8106c9e:	4632      	mov	r2, r6
 8106ca0:	463b      	mov	r3, r7
 8106ca2:	f7f9 fcd5 	bl	8100650 <__aeabi_dmul>
 8106ca6:	a35c      	add	r3, pc, #368	@ (adr r3, 8106e18 <atan+0x2f0>)
 8106ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cac:	f7f9 fb18 	bl	81002e0 <__aeabi_dsub>
 8106cb0:	4632      	mov	r2, r6
 8106cb2:	463b      	mov	r3, r7
 8106cb4:	f7f9 fccc 	bl	8100650 <__aeabi_dmul>
 8106cb8:	a359      	add	r3, pc, #356	@ (adr r3, 8106e20 <atan+0x2f8>)
 8106cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cbe:	f7f9 fb0f 	bl	81002e0 <__aeabi_dsub>
 8106cc2:	4632      	mov	r2, r6
 8106cc4:	463b      	mov	r3, r7
 8106cc6:	f7f9 fcc3 	bl	8100650 <__aeabi_dmul>
 8106cca:	4602      	mov	r2, r0
 8106ccc:	460b      	mov	r3, r1
 8106cce:	4640      	mov	r0, r8
 8106cd0:	4649      	mov	r1, r9
 8106cd2:	f7f9 fb07 	bl	81002e4 <__adddf3>
 8106cd6:	4622      	mov	r2, r4
 8106cd8:	462b      	mov	r3, r5
 8106cda:	f7f9 fcb9 	bl	8100650 <__aeabi_dmul>
 8106cde:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8106ce2:	4602      	mov	r2, r0
 8106ce4:	460b      	mov	r3, r1
 8106ce6:	d148      	bne.n	8106d7a <atan+0x252>
 8106ce8:	4620      	mov	r0, r4
 8106cea:	4629      	mov	r1, r5
 8106cec:	f7f9 faf8 	bl	81002e0 <__aeabi_dsub>
 8106cf0:	e72f      	b.n	8106b52 <atan+0x2a>
 8106cf2:	4b52      	ldr	r3, [pc, #328]	@ (8106e3c <atan+0x314>)
 8106cf4:	2200      	movs	r2, #0
 8106cf6:	4620      	mov	r0, r4
 8106cf8:	4629      	mov	r1, r5
 8106cfa:	f7f9 faf1 	bl	81002e0 <__aeabi_dsub>
 8106cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8106e3c <atan+0x314>)
 8106d00:	4606      	mov	r6, r0
 8106d02:	460f      	mov	r7, r1
 8106d04:	2200      	movs	r2, #0
 8106d06:	4620      	mov	r0, r4
 8106d08:	4629      	mov	r1, r5
 8106d0a:	f7f9 faeb 	bl	81002e4 <__adddf3>
 8106d0e:	4602      	mov	r2, r0
 8106d10:	460b      	mov	r3, r1
 8106d12:	4630      	mov	r0, r6
 8106d14:	4639      	mov	r1, r7
 8106d16:	f7f9 fdc5 	bl	81008a4 <__aeabi_ddiv>
 8106d1a:	f04f 0a01 	mov.w	sl, #1
 8106d1e:	4604      	mov	r4, r0
 8106d20:	460d      	mov	r5, r1
 8106d22:	e765      	b.n	8106bf0 <atan+0xc8>
 8106d24:	4b47      	ldr	r3, [pc, #284]	@ (8106e44 <atan+0x31c>)
 8106d26:	429e      	cmp	r6, r3
 8106d28:	d21c      	bcs.n	8106d64 <atan+0x23c>
 8106d2a:	4b47      	ldr	r3, [pc, #284]	@ (8106e48 <atan+0x320>)
 8106d2c:	2200      	movs	r2, #0
 8106d2e:	4620      	mov	r0, r4
 8106d30:	4629      	mov	r1, r5
 8106d32:	f7f9 fad5 	bl	81002e0 <__aeabi_dsub>
 8106d36:	4b44      	ldr	r3, [pc, #272]	@ (8106e48 <atan+0x320>)
 8106d38:	4606      	mov	r6, r0
 8106d3a:	460f      	mov	r7, r1
 8106d3c:	2200      	movs	r2, #0
 8106d3e:	4620      	mov	r0, r4
 8106d40:	4629      	mov	r1, r5
 8106d42:	f7f9 fc85 	bl	8100650 <__aeabi_dmul>
 8106d46:	4b3d      	ldr	r3, [pc, #244]	@ (8106e3c <atan+0x314>)
 8106d48:	2200      	movs	r2, #0
 8106d4a:	f7f9 facb 	bl	81002e4 <__adddf3>
 8106d4e:	4602      	mov	r2, r0
 8106d50:	460b      	mov	r3, r1
 8106d52:	4630      	mov	r0, r6
 8106d54:	4639      	mov	r1, r7
 8106d56:	f7f9 fda5 	bl	81008a4 <__aeabi_ddiv>
 8106d5a:	f04f 0a02 	mov.w	sl, #2
 8106d5e:	4604      	mov	r4, r0
 8106d60:	460d      	mov	r5, r1
 8106d62:	e745      	b.n	8106bf0 <atan+0xc8>
 8106d64:	4622      	mov	r2, r4
 8106d66:	462b      	mov	r3, r5
 8106d68:	4938      	ldr	r1, [pc, #224]	@ (8106e4c <atan+0x324>)
 8106d6a:	2000      	movs	r0, #0
 8106d6c:	f7f9 fd9a 	bl	81008a4 <__aeabi_ddiv>
 8106d70:	f04f 0a03 	mov.w	sl, #3
 8106d74:	4604      	mov	r4, r0
 8106d76:	460d      	mov	r5, r1
 8106d78:	e73a      	b.n	8106bf0 <atan+0xc8>
 8106d7a:	4b35      	ldr	r3, [pc, #212]	@ (8106e50 <atan+0x328>)
 8106d7c:	4e35      	ldr	r6, [pc, #212]	@ (8106e54 <atan+0x32c>)
 8106d7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8106d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d86:	f7f9 faab 	bl	81002e0 <__aeabi_dsub>
 8106d8a:	4622      	mov	r2, r4
 8106d8c:	462b      	mov	r3, r5
 8106d8e:	f7f9 faa7 	bl	81002e0 <__aeabi_dsub>
 8106d92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8106d96:	4602      	mov	r2, r0
 8106d98:	460b      	mov	r3, r1
 8106d9a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8106d9e:	f7f9 fa9f 	bl	81002e0 <__aeabi_dsub>
 8106da2:	f1bb 0f00 	cmp.w	fp, #0
 8106da6:	4604      	mov	r4, r0
 8106da8:	460d      	mov	r5, r1
 8106daa:	f6bf aedc 	bge.w	8106b66 <atan+0x3e>
 8106dae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8106db2:	461d      	mov	r5, r3
 8106db4:	e6d7      	b.n	8106b66 <atan+0x3e>
 8106db6:	a51c      	add	r5, pc, #112	@ (adr r5, 8106e28 <atan+0x300>)
 8106db8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8106dbc:	e6d3      	b.n	8106b66 <atan+0x3e>
 8106dbe:	bf00      	nop
 8106dc0:	54442d18 	.word	0x54442d18
 8106dc4:	3ff921fb 	.word	0x3ff921fb
 8106dc8:	8800759c 	.word	0x8800759c
 8106dcc:	7e37e43c 	.word	0x7e37e43c
 8106dd0:	e322da11 	.word	0xe322da11
 8106dd4:	3f90ad3a 	.word	0x3f90ad3a
 8106dd8:	24760deb 	.word	0x24760deb
 8106ddc:	3fa97b4b 	.word	0x3fa97b4b
 8106de0:	a0d03d51 	.word	0xa0d03d51
 8106de4:	3fb10d66 	.word	0x3fb10d66
 8106de8:	c54c206e 	.word	0xc54c206e
 8106dec:	3fb745cd 	.word	0x3fb745cd
 8106df0:	920083ff 	.word	0x920083ff
 8106df4:	3fc24924 	.word	0x3fc24924
 8106df8:	5555550d 	.word	0x5555550d
 8106dfc:	3fd55555 	.word	0x3fd55555
 8106e00:	2c6a6c2f 	.word	0x2c6a6c2f
 8106e04:	bfa2b444 	.word	0xbfa2b444
 8106e08:	52defd9a 	.word	0x52defd9a
 8106e0c:	3fadde2d 	.word	0x3fadde2d
 8106e10:	af749a6d 	.word	0xaf749a6d
 8106e14:	3fb3b0f2 	.word	0x3fb3b0f2
 8106e18:	fe231671 	.word	0xfe231671
 8106e1c:	3fbc71c6 	.word	0x3fbc71c6
 8106e20:	9998ebc4 	.word	0x9998ebc4
 8106e24:	3fc99999 	.word	0x3fc99999
 8106e28:	54442d18 	.word	0x54442d18
 8106e2c:	bff921fb 	.word	0xbff921fb
 8106e30:	440fffff 	.word	0x440fffff
 8106e34:	7ff00000 	.word	0x7ff00000
 8106e38:	3fdbffff 	.word	0x3fdbffff
 8106e3c:	3ff00000 	.word	0x3ff00000
 8106e40:	3ff2ffff 	.word	0x3ff2ffff
 8106e44:	40038000 	.word	0x40038000
 8106e48:	3ff80000 	.word	0x3ff80000
 8106e4c:	bff00000 	.word	0xbff00000
 8106e50:	08107588 	.word	0x08107588
 8106e54:	081075a8 	.word	0x081075a8

08106e58 <__ieee754_powf>:
 8106e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106e5c:	ee10 4a90 	vmov	r4, s1
 8106e60:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8106e64:	ed2d 8b02 	vpush	{d8}
 8106e68:	ee10 6a10 	vmov	r6, s0
 8106e6c:	eeb0 8a40 	vmov.f32	s16, s0
 8106e70:	eef0 8a60 	vmov.f32	s17, s1
 8106e74:	d10c      	bne.n	8106e90 <__ieee754_powf+0x38>
 8106e76:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8106e7a:	0076      	lsls	r6, r6, #1
 8106e7c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8106e80:	f240 829c 	bls.w	81073bc <__ieee754_powf+0x564>
 8106e84:	ee38 0a28 	vadd.f32	s0, s16, s17
 8106e88:	ecbd 8b02 	vpop	{d8}
 8106e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106e90:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8106e94:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8106e98:	d802      	bhi.n	8106ea0 <__ieee754_powf+0x48>
 8106e9a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8106e9e:	d908      	bls.n	8106eb2 <__ieee754_powf+0x5a>
 8106ea0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8106ea4:	d1ee      	bne.n	8106e84 <__ieee754_powf+0x2c>
 8106ea6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8106eaa:	0064      	lsls	r4, r4, #1
 8106eac:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8106eb0:	e7e6      	b.n	8106e80 <__ieee754_powf+0x28>
 8106eb2:	2e00      	cmp	r6, #0
 8106eb4:	da1e      	bge.n	8106ef4 <__ieee754_powf+0x9c>
 8106eb6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8106eba:	d22b      	bcs.n	8106f14 <__ieee754_powf+0xbc>
 8106ebc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8106ec0:	d332      	bcc.n	8106f28 <__ieee754_powf+0xd0>
 8106ec2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8106ec6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8106eca:	fa49 f503 	asr.w	r5, r9, r3
 8106ece:	fa05 f303 	lsl.w	r3, r5, r3
 8106ed2:	454b      	cmp	r3, r9
 8106ed4:	d126      	bne.n	8106f24 <__ieee754_powf+0xcc>
 8106ed6:	f005 0501 	and.w	r5, r5, #1
 8106eda:	f1c5 0502 	rsb	r5, r5, #2
 8106ede:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8106ee2:	d122      	bne.n	8106f2a <__ieee754_powf+0xd2>
 8106ee4:	2c00      	cmp	r4, #0
 8106ee6:	f280 826f 	bge.w	81073c8 <__ieee754_powf+0x570>
 8106eea:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8106eee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8106ef2:	e7c9      	b.n	8106e88 <__ieee754_powf+0x30>
 8106ef4:	2500      	movs	r5, #0
 8106ef6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8106efa:	d1f0      	bne.n	8106ede <__ieee754_powf+0x86>
 8106efc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8106f00:	f000 825c 	beq.w	81073bc <__ieee754_powf+0x564>
 8106f04:	d908      	bls.n	8106f18 <__ieee754_powf+0xc0>
 8106f06:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8107268 <__ieee754_powf+0x410>
 8106f0a:	2c00      	cmp	r4, #0
 8106f0c:	bfa8      	it	ge
 8106f0e:	eeb0 0a68 	vmovge.f32	s0, s17
 8106f12:	e7b9      	b.n	8106e88 <__ieee754_powf+0x30>
 8106f14:	2502      	movs	r5, #2
 8106f16:	e7ee      	b.n	8106ef6 <__ieee754_powf+0x9e>
 8106f18:	2c00      	cmp	r4, #0
 8106f1a:	f280 8252 	bge.w	81073c2 <__ieee754_powf+0x56a>
 8106f1e:	eeb1 0a68 	vneg.f32	s0, s17
 8106f22:	e7b1      	b.n	8106e88 <__ieee754_powf+0x30>
 8106f24:	2500      	movs	r5, #0
 8106f26:	e7da      	b.n	8106ede <__ieee754_powf+0x86>
 8106f28:	2500      	movs	r5, #0
 8106f2a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8106f2e:	d102      	bne.n	8106f36 <__ieee754_powf+0xde>
 8106f30:	ee28 0a08 	vmul.f32	s0, s16, s16
 8106f34:	e7a8      	b.n	8106e88 <__ieee754_powf+0x30>
 8106f36:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8106f3a:	d109      	bne.n	8106f50 <__ieee754_powf+0xf8>
 8106f3c:	2e00      	cmp	r6, #0
 8106f3e:	db07      	blt.n	8106f50 <__ieee754_powf+0xf8>
 8106f40:	eeb0 0a48 	vmov.f32	s0, s16
 8106f44:	ecbd 8b02 	vpop	{d8}
 8106f48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106f4c:	f000 bae8 	b.w	8107520 <__ieee754_sqrtf>
 8106f50:	eeb0 0a48 	vmov.f32	s0, s16
 8106f54:	f000 fa50 	bl	81073f8 <fabsf>
 8106f58:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8106f5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8106f60:	4647      	mov	r7, r8
 8106f62:	d002      	beq.n	8106f6a <__ieee754_powf+0x112>
 8106f64:	f1b8 0f00 	cmp.w	r8, #0
 8106f68:	d117      	bne.n	8106f9a <__ieee754_powf+0x142>
 8106f6a:	2c00      	cmp	r4, #0
 8106f6c:	bfbc      	itt	lt
 8106f6e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8106f72:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8106f76:	2e00      	cmp	r6, #0
 8106f78:	da86      	bge.n	8106e88 <__ieee754_powf+0x30>
 8106f7a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8106f7e:	ea58 0805 	orrs.w	r8, r8, r5
 8106f82:	d104      	bne.n	8106f8e <__ieee754_powf+0x136>
 8106f84:	ee70 7a40 	vsub.f32	s15, s0, s0
 8106f88:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8106f8c:	e77c      	b.n	8106e88 <__ieee754_powf+0x30>
 8106f8e:	2d01      	cmp	r5, #1
 8106f90:	f47f af7a 	bne.w	8106e88 <__ieee754_powf+0x30>
 8106f94:	eeb1 0a40 	vneg.f32	s0, s0
 8106f98:	e776      	b.n	8106e88 <__ieee754_powf+0x30>
 8106f9a:	0ff0      	lsrs	r0, r6, #31
 8106f9c:	3801      	subs	r0, #1
 8106f9e:	ea55 0300 	orrs.w	r3, r5, r0
 8106fa2:	d104      	bne.n	8106fae <__ieee754_powf+0x156>
 8106fa4:	ee38 8a48 	vsub.f32	s16, s16, s16
 8106fa8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8106fac:	e76c      	b.n	8106e88 <__ieee754_powf+0x30>
 8106fae:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8106fb2:	d973      	bls.n	810709c <__ieee754_powf+0x244>
 8106fb4:	4bad      	ldr	r3, [pc, #692]	@ (810726c <__ieee754_powf+0x414>)
 8106fb6:	4598      	cmp	r8, r3
 8106fb8:	d808      	bhi.n	8106fcc <__ieee754_powf+0x174>
 8106fba:	2c00      	cmp	r4, #0
 8106fbc:	da0b      	bge.n	8106fd6 <__ieee754_powf+0x17e>
 8106fbe:	2000      	movs	r0, #0
 8106fc0:	ecbd 8b02 	vpop	{d8}
 8106fc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106fc8:	f000 baa4 	b.w	8107514 <__math_oflowf>
 8106fcc:	4ba8      	ldr	r3, [pc, #672]	@ (8107270 <__ieee754_powf+0x418>)
 8106fce:	4598      	cmp	r8, r3
 8106fd0:	d908      	bls.n	8106fe4 <__ieee754_powf+0x18c>
 8106fd2:	2c00      	cmp	r4, #0
 8106fd4:	dcf3      	bgt.n	8106fbe <__ieee754_powf+0x166>
 8106fd6:	2000      	movs	r0, #0
 8106fd8:	ecbd 8b02 	vpop	{d8}
 8106fdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106fe0:	f000 ba92 	b.w	8107508 <__math_uflowf>
 8106fe4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8106fe8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8106fec:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8107274 <__ieee754_powf+0x41c>
 8106ff0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8106ff4:	eee0 6a67 	vfms.f32	s13, s0, s15
 8106ff8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8106ffc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8107000:	ee20 7a00 	vmul.f32	s14, s0, s0
 8107004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8107008:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8107278 <__ieee754_powf+0x420>
 810700c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8107010:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 810727c <__ieee754_powf+0x424>
 8107014:	eee0 7a07 	vfma.f32	s15, s0, s14
 8107018:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8107280 <__ieee754_powf+0x428>
 810701c:	eef0 6a67 	vmov.f32	s13, s15
 8107020:	eee0 6a07 	vfma.f32	s13, s0, s14
 8107024:	ee16 3a90 	vmov	r3, s13
 8107028:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 810702c:	f023 030f 	bic.w	r3, r3, #15
 8107030:	ee06 3a90 	vmov	s13, r3
 8107034:	eee0 6a47 	vfms.f32	s13, s0, s14
 8107038:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810703c:	3d01      	subs	r5, #1
 810703e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8107042:	4305      	orrs	r5, r0
 8107044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107048:	f024 040f 	bic.w	r4, r4, #15
 810704c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8107050:	bf18      	it	ne
 8107052:	eeb0 8a47 	vmovne.f32	s16, s14
 8107056:	ee07 4a10 	vmov	s14, r4
 810705a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 810705e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8107062:	ee07 3a90 	vmov	s15, r3
 8107066:	eee7 0a27 	vfma.f32	s1, s14, s15
 810706a:	ee07 4a10 	vmov	s14, r4
 810706e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8107072:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8107076:	ee17 1a10 	vmov	r1, s14
 810707a:	2900      	cmp	r1, #0
 810707c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8107080:	f340 80dd 	ble.w	810723e <__ieee754_powf+0x3e6>
 8107084:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8107088:	f240 80ca 	bls.w	8107220 <__ieee754_powf+0x3c8>
 810708c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8107090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107094:	bf4c      	ite	mi
 8107096:	2001      	movmi	r0, #1
 8107098:	2000      	movpl	r0, #0
 810709a:	e791      	b.n	8106fc0 <__ieee754_powf+0x168>
 810709c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 81070a0:	bf01      	itttt	eq
 81070a2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8107284 <__ieee754_powf+0x42c>
 81070a6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 81070aa:	f06f 0317 	mvneq.w	r3, #23
 81070ae:	ee17 7a90 	vmoveq	r7, s15
 81070b2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 81070b6:	bf18      	it	ne
 81070b8:	2300      	movne	r3, #0
 81070ba:	3a7f      	subs	r2, #127	@ 0x7f
 81070bc:	441a      	add	r2, r3
 81070be:	4b72      	ldr	r3, [pc, #456]	@ (8107288 <__ieee754_powf+0x430>)
 81070c0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 81070c4:	429f      	cmp	r7, r3
 81070c6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 81070ca:	dd06      	ble.n	81070da <__ieee754_powf+0x282>
 81070cc:	4b6f      	ldr	r3, [pc, #444]	@ (810728c <__ieee754_powf+0x434>)
 81070ce:	429f      	cmp	r7, r3
 81070d0:	f340 80a4 	ble.w	810721c <__ieee754_powf+0x3c4>
 81070d4:	3201      	adds	r2, #1
 81070d6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 81070da:	2600      	movs	r6, #0
 81070dc:	4b6c      	ldr	r3, [pc, #432]	@ (8107290 <__ieee754_powf+0x438>)
 81070de:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 81070e2:	ee07 1a10 	vmov	s14, r1
 81070e6:	edd3 5a00 	vldr	s11, [r3]
 81070ea:	4b6a      	ldr	r3, [pc, #424]	@ (8107294 <__ieee754_powf+0x43c>)
 81070ec:	ee75 7a87 	vadd.f32	s15, s11, s14
 81070f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81070f4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 81070f8:	1049      	asrs	r1, r1, #1
 81070fa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 81070fe:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8107102:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8107106:	ee37 6a65 	vsub.f32	s12, s14, s11
 810710a:	ee07 1a90 	vmov	s15, r1
 810710e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8107112:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8107116:	ee15 7a10 	vmov	r7, s10
 810711a:	401f      	ands	r7, r3
 810711c:	ee06 7a90 	vmov	s13, r7
 8107120:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8107124:	ee37 7a65 	vsub.f32	s14, s14, s11
 8107128:	ee65 7a05 	vmul.f32	s15, s10, s10
 810712c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8107130:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8107298 <__ieee754_powf+0x440>
 8107134:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810729c <__ieee754_powf+0x444>
 8107138:	eee7 5a87 	vfma.f32	s11, s15, s14
 810713c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 81072a0 <__ieee754_powf+0x448>
 8107140:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8107144:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8107274 <__ieee754_powf+0x41c>
 8107148:	eee7 5a27 	vfma.f32	s11, s14, s15
 810714c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 81072a4 <__ieee754_powf+0x44c>
 8107150:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8107154:	eddf 5a54 	vldr	s11, [pc, #336]	@ 81072a8 <__ieee754_powf+0x450>
 8107158:	ee26 6a24 	vmul.f32	s12, s12, s9
 810715c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8107160:	ee35 7a26 	vadd.f32	s14, s10, s13
 8107164:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8107168:	ee27 7a06 	vmul.f32	s14, s14, s12
 810716c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8107170:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8107174:	eef0 5a67 	vmov.f32	s11, s15
 8107178:	eee6 5aa6 	vfma.f32	s11, s13, s13
 810717c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8107180:	ee15 1a90 	vmov	r1, s11
 8107184:	4019      	ands	r1, r3
 8107186:	ee05 1a90 	vmov	s11, r1
 810718a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810718e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8107192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107196:	ee67 7a85 	vmul.f32	s15, s15, s10
 810719a:	eee6 7a25 	vfma.f32	s15, s12, s11
 810719e:	eeb0 6a67 	vmov.f32	s12, s15
 81071a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 81071a6:	ee16 1a10 	vmov	r1, s12
 81071aa:	4019      	ands	r1, r3
 81071ac:	ee06 1a10 	vmov	s12, r1
 81071b0:	eeb0 7a46 	vmov.f32	s14, s12
 81071b4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 81071b8:	493c      	ldr	r1, [pc, #240]	@ (81072ac <__ieee754_powf+0x454>)
 81071ba:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 81071be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81071c2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 81072b0 <__ieee754_powf+0x458>
 81071c6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 81072b4 <__ieee754_powf+0x45c>
 81071ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 81071ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 81072b8 <__ieee754_powf+0x460>
 81071d2:	eee6 7a07 	vfma.f32	s15, s12, s14
 81071d6:	ed91 7a00 	vldr	s14, [r1]
 81071da:	ee77 7a87 	vadd.f32	s15, s15, s14
 81071de:	ee07 2a10 	vmov	s14, r2
 81071e2:	eef0 6a67 	vmov.f32	s13, s15
 81071e6:	4a35      	ldr	r2, [pc, #212]	@ (81072bc <__ieee754_powf+0x464>)
 81071e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 81071ec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 81071f0:	ed92 5a00 	vldr	s10, [r2]
 81071f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81071f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 81071fc:	ee76 6a87 	vadd.f32	s13, s13, s14
 8107200:	ee16 2a90 	vmov	r2, s13
 8107204:	4013      	ands	r3, r2
 8107206:	ee06 3a90 	vmov	s13, r3
 810720a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 810720e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8107212:	eea6 7a65 	vfms.f32	s14, s12, s11
 8107216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810721a:	e70f      	b.n	810703c <__ieee754_powf+0x1e4>
 810721c:	2601      	movs	r6, #1
 810721e:	e75d      	b.n	81070dc <__ieee754_powf+0x284>
 8107220:	d152      	bne.n	81072c8 <__ieee754_powf+0x470>
 8107222:	eddf 6a27 	vldr	s13, [pc, #156]	@ 81072c0 <__ieee754_powf+0x468>
 8107226:	ee37 7a67 	vsub.f32	s14, s14, s15
 810722a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 810722e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8107232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107236:	f73f af29 	bgt.w	810708c <__ieee754_powf+0x234>
 810723a:	2386      	movs	r3, #134	@ 0x86
 810723c:	e048      	b.n	81072d0 <__ieee754_powf+0x478>
 810723e:	4a21      	ldr	r2, [pc, #132]	@ (81072c4 <__ieee754_powf+0x46c>)
 8107240:	4293      	cmp	r3, r2
 8107242:	d907      	bls.n	8107254 <__ieee754_powf+0x3fc>
 8107244:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8107248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810724c:	bf4c      	ite	mi
 810724e:	2001      	movmi	r0, #1
 8107250:	2000      	movpl	r0, #0
 8107252:	e6c1      	b.n	8106fd8 <__ieee754_powf+0x180>
 8107254:	d138      	bne.n	81072c8 <__ieee754_powf+0x470>
 8107256:	ee37 7a67 	vsub.f32	s14, s14, s15
 810725a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 810725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107262:	dbea      	blt.n	810723a <__ieee754_powf+0x3e2>
 8107264:	e7ee      	b.n	8107244 <__ieee754_powf+0x3ec>
 8107266:	bf00      	nop
 8107268:	00000000 	.word	0x00000000
 810726c:	3f7ffff3 	.word	0x3f7ffff3
 8107270:	3f800007 	.word	0x3f800007
 8107274:	3eaaaaab 	.word	0x3eaaaaab
 8107278:	3fb8aa3b 	.word	0x3fb8aa3b
 810727c:	36eca570 	.word	0x36eca570
 8107280:	3fb8aa00 	.word	0x3fb8aa00
 8107284:	4b800000 	.word	0x4b800000
 8107288:	001cc471 	.word	0x001cc471
 810728c:	005db3d6 	.word	0x005db3d6
 8107290:	081075d8 	.word	0x081075d8
 8107294:	fffff000 	.word	0xfffff000
 8107298:	3e6c3255 	.word	0x3e6c3255
 810729c:	3e53f142 	.word	0x3e53f142
 81072a0:	3e8ba305 	.word	0x3e8ba305
 81072a4:	3edb6db7 	.word	0x3edb6db7
 81072a8:	3f19999a 	.word	0x3f19999a
 81072ac:	081075c8 	.word	0x081075c8
 81072b0:	3f76384f 	.word	0x3f76384f
 81072b4:	3f763800 	.word	0x3f763800
 81072b8:	369dc3a0 	.word	0x369dc3a0
 81072bc:	081075d0 	.word	0x081075d0
 81072c0:	3338aa3c 	.word	0x3338aa3c
 81072c4:	43160000 	.word	0x43160000
 81072c8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 81072cc:	d971      	bls.n	81073b2 <__ieee754_powf+0x55a>
 81072ce:	15db      	asrs	r3, r3, #23
 81072d0:	3b7e      	subs	r3, #126	@ 0x7e
 81072d2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 81072d6:	4118      	asrs	r0, r3
 81072d8:	4408      	add	r0, r1
 81072da:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 81072de:	4a3c      	ldr	r2, [pc, #240]	@ (81073d0 <__ieee754_powf+0x578>)
 81072e0:	3b7f      	subs	r3, #127	@ 0x7f
 81072e2:	411a      	asrs	r2, r3
 81072e4:	4002      	ands	r2, r0
 81072e6:	ee07 2a10 	vmov	s14, r2
 81072ea:	f3c0 0016 	ubfx	r0, r0, #0, #23
 81072ee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 81072f2:	f1c3 0317 	rsb	r3, r3, #23
 81072f6:	4118      	asrs	r0, r3
 81072f8:	2900      	cmp	r1, #0
 81072fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81072fe:	bfb8      	it	lt
 8107300:	4240      	neglt	r0, r0
 8107302:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8107306:	eddf 6a33 	vldr	s13, [pc, #204]	@ 81073d4 <__ieee754_powf+0x57c>
 810730a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 81073d8 <__ieee754_powf+0x580>
 810730e:	ee17 3a10 	vmov	r3, s14
 8107312:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8107316:	f023 030f 	bic.w	r3, r3, #15
 810731a:	ee07 3a10 	vmov	s14, r3
 810731e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107322:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8107326:	ee70 0ae7 	vsub.f32	s1, s1, s15
 810732a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 81073dc <__ieee754_powf+0x584>
 810732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107332:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8107336:	eef0 6a67 	vmov.f32	s13, s15
 810733a:	eee7 6a06 	vfma.f32	s13, s14, s12
 810733e:	eef0 5a66 	vmov.f32	s11, s13
 8107342:	eee7 5a46 	vfms.f32	s11, s14, s12
 8107346:	ee26 7aa6 	vmul.f32	s14, s13, s13
 810734a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 810734e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 81073e0 <__ieee754_powf+0x588>
 8107352:	eddf 5a24 	vldr	s11, [pc, #144]	@ 81073e4 <__ieee754_powf+0x58c>
 8107356:	eea7 6a25 	vfma.f32	s12, s14, s11
 810735a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 81073e8 <__ieee754_powf+0x590>
 810735e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8107362:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 81073ec <__ieee754_powf+0x594>
 8107366:	eea5 6a87 	vfma.f32	s12, s11, s14
 810736a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 81073f0 <__ieee754_powf+0x598>
 810736e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8107372:	eeb0 6a66 	vmov.f32	s12, s13
 8107376:	eea5 6ac7 	vfms.f32	s12, s11, s14
 810737a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 810737e:	ee66 5a86 	vmul.f32	s11, s13, s12
 8107382:	ee36 6a47 	vsub.f32	s12, s12, s14
 8107386:	eee6 7aa7 	vfma.f32	s15, s13, s15
 810738a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 810738e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8107396:	ee30 0a67 	vsub.f32	s0, s0, s15
 810739a:	ee10 3a10 	vmov	r3, s0
 810739e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 81073a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81073a6:	da06      	bge.n	81073b6 <__ieee754_powf+0x55e>
 81073a8:	f000 f82e 	bl	8107408 <scalbnf>
 81073ac:	ee20 0a08 	vmul.f32	s0, s0, s16
 81073b0:	e56a      	b.n	8106e88 <__ieee754_powf+0x30>
 81073b2:	2000      	movs	r0, #0
 81073b4:	e7a5      	b.n	8107302 <__ieee754_powf+0x4aa>
 81073b6:	ee00 3a10 	vmov	s0, r3
 81073ba:	e7f7      	b.n	81073ac <__ieee754_powf+0x554>
 81073bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 81073c0:	e562      	b.n	8106e88 <__ieee754_powf+0x30>
 81073c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 81073f4 <__ieee754_powf+0x59c>
 81073c6:	e55f      	b.n	8106e88 <__ieee754_powf+0x30>
 81073c8:	eeb0 0a48 	vmov.f32	s0, s16
 81073cc:	e55c      	b.n	8106e88 <__ieee754_powf+0x30>
 81073ce:	bf00      	nop
 81073d0:	ff800000 	.word	0xff800000
 81073d4:	3f317218 	.word	0x3f317218
 81073d8:	3f317200 	.word	0x3f317200
 81073dc:	35bfbe8c 	.word	0x35bfbe8c
 81073e0:	b5ddea0e 	.word	0xb5ddea0e
 81073e4:	3331bb4c 	.word	0x3331bb4c
 81073e8:	388ab355 	.word	0x388ab355
 81073ec:	bb360b61 	.word	0xbb360b61
 81073f0:	3e2aaaab 	.word	0x3e2aaaab
 81073f4:	00000000 	.word	0x00000000

081073f8 <fabsf>:
 81073f8:	ee10 3a10 	vmov	r3, s0
 81073fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8107400:	ee00 3a10 	vmov	s0, r3
 8107404:	4770      	bx	lr
	...

08107408 <scalbnf>:
 8107408:	ee10 3a10 	vmov	r3, s0
 810740c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8107410:	d02b      	beq.n	810746a <scalbnf+0x62>
 8107412:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8107416:	d302      	bcc.n	810741e <scalbnf+0x16>
 8107418:	ee30 0a00 	vadd.f32	s0, s0, s0
 810741c:	4770      	bx	lr
 810741e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8107422:	d123      	bne.n	810746c <scalbnf+0x64>
 8107424:	4b24      	ldr	r3, [pc, #144]	@ (81074b8 <scalbnf+0xb0>)
 8107426:	eddf 7a25 	vldr	s15, [pc, #148]	@ 81074bc <scalbnf+0xb4>
 810742a:	4298      	cmp	r0, r3
 810742c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8107430:	db17      	blt.n	8107462 <scalbnf+0x5a>
 8107432:	ee10 3a10 	vmov	r3, s0
 8107436:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810743a:	3a19      	subs	r2, #25
 810743c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8107440:	4288      	cmp	r0, r1
 8107442:	dd15      	ble.n	8107470 <scalbnf+0x68>
 8107444:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 81074c0 <scalbnf+0xb8>
 8107448:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 81074c4 <scalbnf+0xbc>
 810744c:	ee10 3a10 	vmov	r3, s0
 8107450:	eeb0 7a67 	vmov.f32	s14, s15
 8107454:	2b00      	cmp	r3, #0
 8107456:	bfb8      	it	lt
 8107458:	eef0 7a66 	vmovlt.f32	s15, s13
 810745c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8107460:	4770      	bx	lr
 8107462:	eddf 7a19 	vldr	s15, [pc, #100]	@ 81074c8 <scalbnf+0xc0>
 8107466:	ee27 0a80 	vmul.f32	s0, s15, s0
 810746a:	4770      	bx	lr
 810746c:	0dd2      	lsrs	r2, r2, #23
 810746e:	e7e5      	b.n	810743c <scalbnf+0x34>
 8107470:	4410      	add	r0, r2
 8107472:	28fe      	cmp	r0, #254	@ 0xfe
 8107474:	dce6      	bgt.n	8107444 <scalbnf+0x3c>
 8107476:	2800      	cmp	r0, #0
 8107478:	dd06      	ble.n	8107488 <scalbnf+0x80>
 810747a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 810747e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8107482:	ee00 3a10 	vmov	s0, r3
 8107486:	4770      	bx	lr
 8107488:	f110 0f16 	cmn.w	r0, #22
 810748c:	da09      	bge.n	81074a2 <scalbnf+0x9a>
 810748e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 81074c8 <scalbnf+0xc0>
 8107492:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 81074cc <scalbnf+0xc4>
 8107496:	ee10 3a10 	vmov	r3, s0
 810749a:	eeb0 7a67 	vmov.f32	s14, s15
 810749e:	2b00      	cmp	r3, #0
 81074a0:	e7d9      	b.n	8107456 <scalbnf+0x4e>
 81074a2:	3019      	adds	r0, #25
 81074a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 81074a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 81074ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 81074d0 <scalbnf+0xc8>
 81074b0:	ee07 3a90 	vmov	s15, r3
 81074b4:	e7d7      	b.n	8107466 <scalbnf+0x5e>
 81074b6:	bf00      	nop
 81074b8:	ffff3cb0 	.word	0xffff3cb0
 81074bc:	4c000000 	.word	0x4c000000
 81074c0:	7149f2ca 	.word	0x7149f2ca
 81074c4:	f149f2ca 	.word	0xf149f2ca
 81074c8:	0da24260 	.word	0x0da24260
 81074cc:	8da24260 	.word	0x8da24260
 81074d0:	33000000 	.word	0x33000000

081074d4 <with_errnof>:
 81074d4:	b510      	push	{r4, lr}
 81074d6:	ed2d 8b02 	vpush	{d8}
 81074da:	eeb0 8a40 	vmov.f32	s16, s0
 81074de:	4604      	mov	r4, r0
 81074e0:	f7fe fe7e 	bl	81061e0 <__errno>
 81074e4:	eeb0 0a48 	vmov.f32	s0, s16
 81074e8:	ecbd 8b02 	vpop	{d8}
 81074ec:	6004      	str	r4, [r0, #0]
 81074ee:	bd10      	pop	{r4, pc}

081074f0 <xflowf>:
 81074f0:	b130      	cbz	r0, 8107500 <xflowf+0x10>
 81074f2:	eef1 7a40 	vneg.f32	s15, s0
 81074f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 81074fa:	2022      	movs	r0, #34	@ 0x22
 81074fc:	f7ff bfea 	b.w	81074d4 <with_errnof>
 8107500:	eef0 7a40 	vmov.f32	s15, s0
 8107504:	e7f7      	b.n	81074f6 <xflowf+0x6>
	...

08107508 <__math_uflowf>:
 8107508:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8107510 <__math_uflowf+0x8>
 810750c:	f7ff bff0 	b.w	81074f0 <xflowf>
 8107510:	10000000 	.word	0x10000000

08107514 <__math_oflowf>:
 8107514:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810751c <__math_oflowf+0x8>
 8107518:	f7ff bfea 	b.w	81074f0 <xflowf>
 810751c:	70000000 	.word	0x70000000

08107520 <__ieee754_sqrtf>:
 8107520:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8107524:	4770      	bx	lr
	...

08107528 <_init>:
 8107528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810752a:	bf00      	nop
 810752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810752e:	bc08      	pop	{r3}
 8107530:	469e      	mov	lr, r3
 8107532:	4770      	bx	lr

08107534 <_fini>:
 8107534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107536:	bf00      	nop
 8107538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810753a:	bc08      	pop	{r3}
 810753c:	469e      	mov	lr, r3
 810753e:	4770      	bx	lr
