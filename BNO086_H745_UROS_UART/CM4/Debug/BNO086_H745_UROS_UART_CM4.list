
BNO086_H745_UROS_UART_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007190  08100298  08100298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08107428  08107428  00008428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081074c8  081074c8  000084c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  081074cc  081074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000080  10000000  081074d0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  10000080  08107550  00009080  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100003cc  08107550  000093cc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013406  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a78  00000000  00000000  0001c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001200  00000000  00000000  0001ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000dd1  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bc5f  00000000  00000000  00020f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015c60  00000000  00000000  0005cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018b572  00000000  00000000  000727c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001fdd32  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005148  00000000  00000000  001fdd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007c  00000000  00000000  00202ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000080 	.word	0x10000080
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08107410 	.word	0x08107410

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000084 	.word	0x10000084
 81002d4:	08107410 	.word	0x08107410

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	@ 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <BNO080_Initialization>:
unsigned char accuracy;
unsigned char sensorAccuracy;
CalibrateStatus calibratestruck;

int BNO080_Initialization(BNO086_t *bno)
{
 8100c50:	b580      	push	{r7, lr}
 8100c52:	b082      	sub	sp, #8
 8100c54:	af00      	add	r7, sp, #0
 8100c56:	6078      	str	r0, [r7, #4]

	CHIP_DESELECT(BNO080);
 8100c58:	2201      	movs	r2, #1
 8100c5a:	2120      	movs	r1, #32
 8100c5c:	4827      	ldr	r0, [pc, #156]	@ (8100cfc <BNO080_Initialization+0xac>)
 8100c5e:	f002 f9ff 	bl	8103060 <HAL_GPIO_WritePin>
	WAKE_HIGH();
 8100c62:	2201      	movs	r2, #1
 8100c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8100c68:	4825      	ldr	r0, [pc, #148]	@ (8100d00 <BNO080_Initialization+0xb0>)
 8100c6a:	f002 f9f9 	bl	8103060 <HAL_GPIO_WritePin>
	RESET_HIGH();
 8100c6e:	2201      	movs	r2, #1
 8100c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100c74:	4822      	ldr	r0, [pc, #136]	@ (8100d00 <BNO080_Initialization+0xb0>)
 8100c76:	f002 f9f3 	bl	8103060 <HAL_GPIO_WritePin>

	CHIP_DESELECT(BNO080);
 8100c7a:	2201      	movs	r2, #1
 8100c7c:	2120      	movs	r1, #32
 8100c7e:	481f      	ldr	r0, [pc, #124]	@ (8100cfc <BNO080_Initialization+0xac>)
 8100c80:	f002 f9ee 	bl	8103060 <HAL_GPIO_WritePin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8100c84:	2201      	movs	r2, #1
 8100c86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8100c8a:	481d      	ldr	r0, [pc, #116]	@ (8100d00 <BNO080_Initialization+0xb0>)
 8100c8c:	f002 f9e8 	bl	8103060 <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO080
 8100c90:	2200      	movs	r2, #0
 8100c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100c96:	481a      	ldr	r0, [pc, #104]	@ (8100d00 <BNO080_Initialization+0xb0>)
 8100c98:	f002 f9e2 	bl	8103060 <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8100c9c:	20c8      	movs	r0, #200	@ 0xc8
 8100c9e:	f001 fecf 	bl	8102a40 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8100ca2:	2201      	movs	r2, #1
 8100ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100ca8:	4815      	ldr	r0, [pc, #84]	@ (8100d00 <BNO080_Initialization+0xb0>)
 8100caa:	f002 f9d9 	bl	8103060 <HAL_GPIO_WritePin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8100cae:	f000 fcfd 	bl	81016ac <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8100cb2:	f000 fcfb 	bl	81016ac <BNO080_waitForSPI>
	BNO080_receivePacket();
 8100cb6:	f000 fd17 	bl	81016e8 <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8100cba:	f000 fcf7 	bl	81016ac <BNO080_waitForSPI>
	BNO080_receivePacket();
 8100cbe:	f000 fd13 	bl	81016e8 <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8100cc2:	4b10      	ldr	r3, [pc, #64]	@ (8100d04 <BNO080_Initialization+0xb4>)
 8100cc4:	22f9      	movs	r2, #249	@ 0xf9
 8100cc6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8100cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8100d04 <BNO080_Initialization+0xb4>)
 8100cca:	2200      	movs	r2, #0
 8100ccc:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8100cce:	2102      	movs	r1, #2
 8100cd0:	2002      	movs	r0, #2
 8100cd2:	f000 fd79 	bl	81017c8 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 8100cd6:	f000 fce9 	bl	81016ac <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8100cda:	f000 fd05 	bl	81016e8 <BNO080_receivePacket>
 8100cde:	4603      	mov	r3, r0
 8100ce0:	2b01      	cmp	r3, #1
 8100ce2:	d105      	bne.n	8100cf0 <BNO080_Initialization+0xa0>
	{
//		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8100ce4:	4b07      	ldr	r3, [pc, #28]	@ (8100d04 <BNO080_Initialization+0xb4>)
 8100ce6:	781b      	ldrb	r3, [r3, #0]
 8100ce8:	2bf8      	cmp	r3, #248	@ 0xf8
 8100cea:	d101      	bne.n	8100cf0 <BNO080_Initialization+0xa0>
		{
//			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
			return (0);
 8100cec:	2300      	movs	r3, #0
 8100cee:	e000      	b.n	8100cf2 <BNO080_Initialization+0xa2>
		}// Sensor OK
	}

//	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
	return (1); //Something went wrong
 8100cf0:	2301      	movs	r3, #1
}
 8100cf2:	4618      	mov	r0, r3
 8100cf4:	3708      	adds	r7, #8
 8100cf6:	46bd      	mov	sp, r7
 8100cf8:	bd80      	pop	{r7, pc}
 8100cfa:	bf00      	nop
 8100cfc:	58020400 	.word	0x58020400
 8100d00:	58020c00 	.word	0x58020c00
 8100d04:	100000a0 	.word	0x100000a0

08100d08 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data) // Todo
{
 8100d08:	b580      	push	{r7, lr}
 8100d0a:	b084      	sub	sp, #16
 8100d0c:	af02      	add	r7, sp, #8
 8100d0e:	4603      	mov	r3, r0
 8100d10:	71fb      	strb	r3, [r7, #7]
//	CHIP_SELECT(BNO080);

    HAL_SPI_TransmitReceive(&hspi1, &data, &receivedData, 1, HAL_MAX_DELAY);
 8100d12:	1df9      	adds	r1, r7, #7
 8100d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8100d18:	9300      	str	r3, [sp, #0]
 8100d1a:	2301      	movs	r3, #1
 8100d1c:	4a04      	ldr	r2, [pc, #16]	@ (8100d30 <SPI2_SendByte+0x28>)
 8100d1e:	4805      	ldr	r0, [pc, #20]	@ (8100d34 <SPI2_SendByte+0x2c>)
 8100d20:	f004 f8c4 	bl	8104eac <HAL_SPI_TransmitReceive>

    return receivedData;
 8100d24:	4b02      	ldr	r3, [pc, #8]	@ (8100d30 <SPI2_SendByte+0x28>)
 8100d26:	781b      	ldrb	r3, [r3, #0]
}
 8100d28:	4618      	mov	r0, r3
 8100d2a:	3708      	adds	r7, #8
 8100d2c:	46bd      	mov	sp, r7
 8100d2e:	bd80      	pop	{r7, pc}
 8100d30:	10000165 	.word	0x10000165
 8100d34:	100001bc 	.word	0x100001bc

08100d38 <BNO080_dataAvailable>:


//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8100d38:	b580      	push	{r7, lr}
 8100d3a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13

	if (HAL_GPIO_ReadPin(INT_GPIO_Port, INT_Pin) == 1)
 8100d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8100d40:	4811      	ldr	r0, [pc, #68]	@ (8100d88 <BNO080_dataAvailable+0x50>)
 8100d42:	f002 f975 	bl	8103030 <HAL_GPIO_ReadPin>
 8100d46:	4603      	mov	r3, r0
 8100d48:	2b01      	cmp	r3, #1
 8100d4a:	d101      	bne.n	8100d50 <BNO080_dataAvailable+0x18>
		return (0);
 8100d4c:	2300      	movs	r3, #0
 8100d4e:	e019      	b.n	8100d84 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8100d50:	f000 fcca 	bl	81016e8 <BNO080_receivePacket>
 8100d54:	4603      	mov	r3, r0
 8100d56:	2b01      	cmp	r3, #1
 8100d58:	d113      	bne.n	8100d82 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8100d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8100d8c <BNO080_dataAvailable+0x54>)
 8100d5c:	789b      	ldrb	r3, [r3, #2]
 8100d5e:	2b03      	cmp	r3, #3
 8100d60:	d107      	bne.n	8100d72 <BNO080_dataAvailable+0x3a>
 8100d62:	4b0b      	ldr	r3, [pc, #44]	@ (8100d90 <BNO080_dataAvailable+0x58>)
 8100d64:	781b      	ldrb	r3, [r3, #0]
 8100d66:	2bfb      	cmp	r3, #251	@ 0xfb
 8100d68:	d103      	bne.n	8100d72 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8100d6a:	f000 f82f 	bl	8100dcc <BNO080_parseInputReport>
			return (1);
 8100d6e:	2301      	movs	r3, #1
 8100d70:	e008      	b.n	8100d84 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8100d72:	4b06      	ldr	r3, [pc, #24]	@ (8100d8c <BNO080_dataAvailable+0x54>)
 8100d74:	789b      	ldrb	r3, [r3, #2]
 8100d76:	2b02      	cmp	r3, #2
 8100d78:	d103      	bne.n	8100d82 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8100d7a:	f000 f80b 	bl	8100d94 <BNO080_parseCommandReport>
			return (1);
 8100d7e:	2301      	movs	r3, #1
 8100d80:	e000      	b.n	8100d84 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8100d82:	2300      	movs	r3, #0
}
 8100d84:	4618      	mov	r0, r3
 8100d86:	bd80      	pop	{r7, pc}
 8100d88:	58021800 	.word	0x58021800
 8100d8c:	1000009c 	.word	0x1000009c
 8100d90:	100000a0 	.word	0x100000a0

08100d94 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8100d94:	b480      	push	{r7}
 8100d96:	b083      	sub	sp, #12
 8100d98:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8100d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8100dc4 <BNO080_parseCommandReport+0x30>)
 8100d9c:	781b      	ldrb	r3, [r3, #0]
 8100d9e:	2bf1      	cmp	r3, #241	@ 0xf1
 8100da0:	d109      	bne.n	8100db6 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8100da2:	4b08      	ldr	r3, [pc, #32]	@ (8100dc4 <BNO080_parseCommandReport+0x30>)
 8100da4:	789b      	ldrb	r3, [r3, #2]
 8100da6:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8100da8:	79fb      	ldrb	r3, [r7, #7]
 8100daa:	2b07      	cmp	r3, #7
 8100dac:	d103      	bne.n	8100db6 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8100dae:	4b05      	ldr	r3, [pc, #20]	@ (8100dc4 <BNO080_parseCommandReport+0x30>)
 8100db0:	795a      	ldrb	r2, [r3, #5]
 8100db2:	4b05      	ldr	r3, [pc, #20]	@ (8100dc8 <BNO080_parseCommandReport+0x34>)
 8100db4:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	// additional feature reports may be strung together. Parse them all.
}
 8100db6:	bf00      	nop
 8100db8:	370c      	adds	r7, #12
 8100dba:	46bd      	mov	sp, r7
 8100dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc0:	4770      	bx	lr
 8100dc2:	bf00      	nop
 8100dc4:	100000a0 	.word	0x100000a0
 8100dc8:	10000164 	.word	0x10000164

08100dcc <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8100dcc:	b480      	push	{r7}
 8100dce:	b087      	sub	sp, #28
 8100dd0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8100dd2:	4b98      	ldr	r3, [pc, #608]	@ (8101034 <BNO080_parseInputReport+0x268>)
 8100dd4:	785b      	ldrb	r3, [r3, #1]
 8100dd6:	021b      	lsls	r3, r3, #8
 8100dd8:	b21a      	sxth	r2, r3
 8100dda:	4b96      	ldr	r3, [pc, #600]	@ (8101034 <BNO080_parseInputReport+0x268>)
 8100ddc:	781b      	ldrb	r3, [r3, #0]
 8100dde:	b21b      	sxth	r3, r3
 8100de0:	4313      	orrs	r3, r2
 8100de2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8100de4:	8a3b      	ldrh	r3, [r7, #16]
 8100de6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8100dea:	823b      	strh	r3, [r7, #16]
	//Ignore it for now.  catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8100dec:	8a3b      	ldrh	r3, [r7, #16]
 8100dee:	3b04      	subs	r3, #4
 8100df0:	b29b      	uxth	r3, r3
 8100df2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8100df4:	4b90      	ldr	r3, [pc, #576]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100df6:	791b      	ldrb	r3, [r3, #4]
 8100df8:	061a      	lsls	r2, r3, #24
 8100dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100dfc:	78db      	ldrb	r3, [r3, #3]
 8100dfe:	041b      	lsls	r3, r3, #16
 8100e00:	431a      	orrs	r2, r3
 8100e02:	4b8d      	ldr	r3, [pc, #564]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e04:	789b      	ldrb	r3, [r3, #2]
 8100e06:	021b      	lsls	r3, r3, #8
 8100e08:	4313      	orrs	r3, r2
 8100e0a:	4a8b      	ldr	r2, [pc, #556]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e0c:	7852      	ldrb	r2, [r2, #1]
 8100e0e:	4313      	orrs	r3, r2
 8100e10:	4a8a      	ldr	r2, [pc, #552]	@ (810103c <BNO080_parseInputReport+0x270>)
 8100e12:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8100e14:	4b88      	ldr	r3, [pc, #544]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e16:	79db      	ldrb	r3, [r3, #7]
 8100e18:	f003 0303 	and.w	r3, r3, #3
 8100e1c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8100e1e:	4b86      	ldr	r3, [pc, #536]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e20:	7a9b      	ldrb	r3, [r3, #10]
 8100e22:	021b      	lsls	r3, r3, #8
 8100e24:	b21a      	sxth	r2, r3
 8100e26:	4b84      	ldr	r3, [pc, #528]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e28:	7a5b      	ldrb	r3, [r3, #9]
 8100e2a:	b21b      	sxth	r3, r3
 8100e2c:	4313      	orrs	r3, r2
 8100e2e:	b21b      	sxth	r3, r3
 8100e30:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8100e32:	4b81      	ldr	r3, [pc, #516]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e34:	7b1b      	ldrb	r3, [r3, #12]
 8100e36:	021b      	lsls	r3, r3, #8
 8100e38:	b21a      	sxth	r2, r3
 8100e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e3c:	7adb      	ldrb	r3, [r3, #11]
 8100e3e:	b21b      	sxth	r3, r3
 8100e40:	4313      	orrs	r3, r2
 8100e42:	b21b      	sxth	r3, r3
 8100e44:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8100e46:	4b7c      	ldr	r3, [pc, #496]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e48:	7b9b      	ldrb	r3, [r3, #14]
 8100e4a:	021b      	lsls	r3, r3, #8
 8100e4c:	b21a      	sxth	r2, r3
 8100e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e50:	7b5b      	ldrb	r3, [r3, #13]
 8100e52:	b21b      	sxth	r3, r3
 8100e54:	4313      	orrs	r3, r2
 8100e56:	b21b      	sxth	r3, r3
 8100e58:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8100e5a:	2300      	movs	r3, #0
 8100e5c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8100e5e:	2300      	movs	r3, #0
 8100e60:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8100e62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8100e66:	2b0e      	cmp	r3, #14
 8100e68:	dd09      	ble.n	8100e7e <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8100e6a:	4b73      	ldr	r3, [pc, #460]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e6c:	7c1b      	ldrb	r3, [r3, #16]
 8100e6e:	021b      	lsls	r3, r3, #8
 8100e70:	b21a      	sxth	r2, r3
 8100e72:	4b71      	ldr	r3, [pc, #452]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e74:	7bdb      	ldrb	r3, [r3, #15]
 8100e76:	b21b      	sxth	r3, r3
 8100e78:	4313      	orrs	r3, r2
 8100e7a:	b21b      	sxth	r3, r3
 8100e7c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8100e7e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8100e82:	2b10      	cmp	r3, #16
 8100e84:	dd09      	ble.n	8100e9a <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8100e86:	4b6c      	ldr	r3, [pc, #432]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e88:	7c9b      	ldrb	r3, [r3, #18]
 8100e8a:	021b      	lsls	r3, r3, #8
 8100e8c:	b21a      	sxth	r2, r3
 8100e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e90:	7c5b      	ldrb	r3, [r3, #17]
 8100e92:	b21b      	sxth	r3, r3
 8100e94:	4313      	orrs	r3, r2
 8100e96:	b21b      	sxth	r3, r3
 8100e98:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8100e9a:	4b67      	ldr	r3, [pc, #412]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100e9c:	795b      	ldrb	r3, [r3, #5]
 8100e9e:	2b1e      	cmp	r3, #30
 8100ea0:	dc46      	bgt.n	8100f30 <BNO080_parseInputReport+0x164>
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	f340 80bf 	ble.w	8101026 <BNO080_parseInputReport+0x25a>
 8100ea8:	3b01      	subs	r3, #1
 8100eaa:	2b1d      	cmp	r3, #29
 8100eac:	f200 80bb 	bhi.w	8101026 <BNO080_parseInputReport+0x25a>
 8100eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8100eb8 <BNO080_parseInputReport+0xec>)
 8100eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100eb6:	bf00      	nop
 8100eb8:	08100f37 	.word	0x08100f37
 8100ebc:	08100f6f 	.word	0x08100f6f
 8100ec0:	08100f8b 	.word	0x08100f8b
 8100ec4:	08100f53 	.word	0x08100f53
 8100ec8:	08100fa7 	.word	0x08100fa7
 8100ecc:	08101027 	.word	0x08101027
 8100ed0:	08101027 	.word	0x08101027
 8100ed4:	08100fa7 	.word	0x08100fa7
 8100ed8:	08101027 	.word	0x08101027
 8100edc:	08101027 	.word	0x08101027
 8100ee0:	08101027 	.word	0x08101027
 8100ee4:	08101027 	.word	0x08101027
 8100ee8:	08101027 	.word	0x08101027
 8100eec:	08101027 	.word	0x08101027
 8100ef0:	08101027 	.word	0x08101027
 8100ef4:	08101027 	.word	0x08101027
 8100ef8:	08100fcf 	.word	0x08100fcf
 8100efc:	08101027 	.word	0x08101027
 8100f00:	08100fd7 	.word	0x08100fd7
 8100f04:	08101027 	.word	0x08101027
 8100f08:	08101027 	.word	0x08101027
 8100f0c:	08101027 	.word	0x08101027
 8100f10:	08101027 	.word	0x08101027
 8100f14:	08101027 	.word	0x08101027
 8100f18:	08101027 	.word	0x08101027
 8100f1c:	08101027 	.word	0x08101027
 8100f20:	08101027 	.word	0x08101027
 8100f24:	08101027 	.word	0x08101027
 8100f28:	08101027 	.word	0x08101027
 8100f2c:	08100fe1 	.word	0x08100fe1
 8100f30:	2bf1      	cmp	r3, #241	@ 0xf1
 8100f32:	d06d      	beq.n	8101010 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	// additional feature reports may be strung together. Parse them all.
}
 8100f34:	e077      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8100f36:	7bfb      	ldrb	r3, [r7, #15]
 8100f38:	b29a      	uxth	r2, r3
 8100f3a:	4b41      	ldr	r3, [pc, #260]	@ (8101040 <BNO080_parseInputReport+0x274>)
 8100f3c:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8100f3e:	4a41      	ldr	r2, [pc, #260]	@ (8101044 <BNO080_parseInputReport+0x278>)
 8100f40:	89bb      	ldrh	r3, [r7, #12]
 8100f42:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8100f44:	4a40      	ldr	r2, [pc, #256]	@ (8101048 <BNO080_parseInputReport+0x27c>)
 8100f46:	897b      	ldrh	r3, [r7, #10]
 8100f48:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8100f4a:	4a40      	ldr	r2, [pc, #256]	@ (810104c <BNO080_parseInputReport+0x280>)
 8100f4c:	893b      	ldrh	r3, [r7, #8]
 8100f4e:	8013      	strh	r3, [r2, #0]
			break;
 8100f50:	e069      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8100f52:	7bfb      	ldrb	r3, [r7, #15]
 8100f54:	b29a      	uxth	r2, r3
 8100f56:	4b3e      	ldr	r3, [pc, #248]	@ (8101050 <BNO080_parseInputReport+0x284>)
 8100f58:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8100f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8101054 <BNO080_parseInputReport+0x288>)
 8100f5c:	89bb      	ldrh	r3, [r7, #12]
 8100f5e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8100f60:	4a3d      	ldr	r2, [pc, #244]	@ (8101058 <BNO080_parseInputReport+0x28c>)
 8100f62:	897b      	ldrh	r3, [r7, #10]
 8100f64:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8100f66:	4a3d      	ldr	r2, [pc, #244]	@ (810105c <BNO080_parseInputReport+0x290>)
 8100f68:	893b      	ldrh	r3, [r7, #8]
 8100f6a:	8013      	strh	r3, [r2, #0]
			break;
 8100f6c:	e05b      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8100f6e:	7bfb      	ldrb	r3, [r7, #15]
 8100f70:	b29a      	uxth	r2, r3
 8100f72:	4b3b      	ldr	r3, [pc, #236]	@ (8101060 <BNO080_parseInputReport+0x294>)
 8100f74:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8100f76:	4a3b      	ldr	r2, [pc, #236]	@ (8101064 <BNO080_parseInputReport+0x298>)
 8100f78:	89bb      	ldrh	r3, [r7, #12]
 8100f7a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8100f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8101068 <BNO080_parseInputReport+0x29c>)
 8100f7e:	897b      	ldrh	r3, [r7, #10]
 8100f80:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8100f82:	4a3a      	ldr	r2, [pc, #232]	@ (810106c <BNO080_parseInputReport+0x2a0>)
 8100f84:	893b      	ldrh	r3, [r7, #8]
 8100f86:	8013      	strh	r3, [r2, #0]
			break;
 8100f88:	e04d      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8100f8a:	7bfb      	ldrb	r3, [r7, #15]
 8100f8c:	b29a      	uxth	r2, r3
 8100f8e:	4b38      	ldr	r3, [pc, #224]	@ (8101070 <BNO080_parseInputReport+0x2a4>)
 8100f90:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8100f92:	4a38      	ldr	r2, [pc, #224]	@ (8101074 <BNO080_parseInputReport+0x2a8>)
 8100f94:	89bb      	ldrh	r3, [r7, #12]
 8100f96:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8100f98:	4a37      	ldr	r2, [pc, #220]	@ (8101078 <BNO080_parseInputReport+0x2ac>)
 8100f9a:	897b      	ldrh	r3, [r7, #10]
 8100f9c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8100f9e:	4a37      	ldr	r2, [pc, #220]	@ (810107c <BNO080_parseInputReport+0x2b0>)
 8100fa0:	893b      	ldrh	r3, [r7, #8]
 8100fa2:	8013      	strh	r3, [r2, #0]
			break;
 8100fa4:	e03f      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8100fa6:	7bfb      	ldrb	r3, [r7, #15]
 8100fa8:	b29a      	uxth	r2, r3
 8100faa:	4b35      	ldr	r3, [pc, #212]	@ (8101080 <BNO080_parseInputReport+0x2b4>)
 8100fac:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8100fae:	4a35      	ldr	r2, [pc, #212]	@ (8101084 <BNO080_parseInputReport+0x2b8>)
 8100fb0:	89bb      	ldrh	r3, [r7, #12]
 8100fb2:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8100fb4:	4a34      	ldr	r2, [pc, #208]	@ (8101088 <BNO080_parseInputReport+0x2bc>)
 8100fb6:	897b      	ldrh	r3, [r7, #10]
 8100fb8:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8100fba:	4a34      	ldr	r2, [pc, #208]	@ (810108c <BNO080_parseInputReport+0x2c0>)
 8100fbc:	893b      	ldrh	r3, [r7, #8]
 8100fbe:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8100fc0:	4a33      	ldr	r2, [pc, #204]	@ (8101090 <BNO080_parseInputReport+0x2c4>)
 8100fc2:	8afb      	ldrh	r3, [r7, #22]
 8100fc4:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8100fc6:	4a33      	ldr	r2, [pc, #204]	@ (8101094 <BNO080_parseInputReport+0x2c8>)
 8100fc8:	8abb      	ldrh	r3, [r7, #20]
 8100fca:	8013      	strh	r3, [r2, #0]
			break;
 8100fcc:	e02b      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8100fce:	4a32      	ldr	r2, [pc, #200]	@ (8101098 <BNO080_parseInputReport+0x2cc>)
 8100fd0:	893b      	ldrh	r3, [r7, #8]
 8100fd2:	8013      	strh	r3, [r2, #0]
			break;
 8100fd4:	e027      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8100fd6:	4b18      	ldr	r3, [pc, #96]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100fd8:	7a5a      	ldrb	r2, [r3, #9]
 8100fda:	4b30      	ldr	r3, [pc, #192]	@ (810109c <BNO080_parseInputReport+0x2d0>)
 8100fdc:	701a      	strb	r2, [r3, #0]
			break;
 8100fde:	e022      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8100fe0:	4b15      	ldr	r3, [pc, #84]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100fe2:	7a9a      	ldrb	r2, [r3, #10]
 8100fe4:	4b2e      	ldr	r3, [pc, #184]	@ (81010a0 <BNO080_parseInputReport+0x2d4>)
 8100fe6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9.  - bring in array size
 8100fe8:	2300      	movs	r3, #0
 8100fea:	74fb      	strb	r3, [r7, #19]
 8100fec:	e00c      	b.n	8101008 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8100fee:	7cfb      	ldrb	r3, [r7, #19]
 8100ff0:	f103 020b 	add.w	r2, r3, #11
 8100ff4:	4b2b      	ldr	r3, [pc, #172]	@ (81010a4 <BNO080_parseInputReport+0x2d8>)
 8100ff6:	6819      	ldr	r1, [r3, #0]
 8100ff8:	7cfb      	ldrb	r3, [r7, #19]
 8100ffa:	440b      	add	r3, r1
 8100ffc:	490e      	ldr	r1, [pc, #56]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8100ffe:	5c8a      	ldrb	r2, [r1, r2]
 8101000:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9.  - bring in array size
 8101002:	7cfb      	ldrb	r3, [r7, #19]
 8101004:	3301      	adds	r3, #1
 8101006:	74fb      	strb	r3, [r7, #19]
 8101008:	7cfb      	ldrb	r3, [r7, #19]
 810100a:	2b08      	cmp	r3, #8
 810100c:	d9ef      	bls.n	8100fee <BNO080_parseInputReport+0x222>
			break;
 810100e:	e00a      	b.n	8101026 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8101010:	4b09      	ldr	r3, [pc, #36]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 8101012:	79db      	ldrb	r3, [r3, #7]
 8101014:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8101016:	79fb      	ldrb	r3, [r7, #7]
 8101018:	2b07      	cmp	r3, #7
 810101a:	d103      	bne.n	8101024 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 810101c:	4b06      	ldr	r3, [pc, #24]	@ (8101038 <BNO080_parseInputReport+0x26c>)
 810101e:	7a9a      	ldrb	r2, [r3, #10]
 8101020:	4b21      	ldr	r3, [pc, #132]	@ (81010a8 <BNO080_parseInputReport+0x2dc>)
 8101022:	701a      	strb	r2, [r3, #0]
			break;
 8101024:	bf00      	nop
}
 8101026:	bf00      	nop
 8101028:	371c      	adds	r7, #28
 810102a:	46bd      	mov	sp, r7
 810102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101030:	4770      	bx	lr
 8101032:	bf00      	nop
 8101034:	1000009c 	.word	0x1000009c
 8101038:	100000a0 	.word	0x100000a0
 810103c:	10000158 	.word	0x10000158
 8101040:	1000012e 	.word	0x1000012e
 8101044:	10000128 	.word	0x10000128
 8101048:	1000012a 	.word	0x1000012a
 810104c:	1000012c 	.word	0x1000012c
 8101050:	10000136 	.word	0x10000136
 8101054:	10000130 	.word	0x10000130
 8101058:	10000132 	.word	0x10000132
 810105c:	10000134 	.word	0x10000134
 8101060:	1000013e 	.word	0x1000013e
 8101064:	10000138 	.word	0x10000138
 8101068:	1000013a 	.word	0x1000013a
 810106c:	1000013c 	.word	0x1000013c
 8101070:	10000146 	.word	0x10000146
 8101074:	10000140 	.word	0x10000140
 8101078:	10000142 	.word	0x10000142
 810107c:	10000144 	.word	0x10000144
 8101080:	10000152 	.word	0x10000152
 8101084:	10000148 	.word	0x10000148
 8101088:	1000014a 	.word	0x1000014a
 810108c:	1000014c 	.word	0x1000014c
 8101090:	1000014e 	.word	0x1000014e
 8101094:	10000150 	.word	0x10000150
 8101098:	10000154 	.word	0x10000154
 810109c:	1000015c 	.word	0x1000015c
 81010a0:	1000015d 	.word	0x1000015d
 81010a4:	10000160 	.word	0x10000160
 81010a8:	10000164 	.word	0x10000164

081010ac <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 81010ac:	b580      	push	{r7, lr}
 81010ae:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 81010b0:	4b07      	ldr	r3, [pc, #28]	@ (81010d0 <BNO080_getQuatI+0x24>)
 81010b2:	881b      	ldrh	r3, [r3, #0]
 81010b4:	b21b      	sxth	r3, r3
 81010b6:	4a07      	ldr	r2, [pc, #28]	@ (81010d4 <BNO080_getQuatI+0x28>)
 81010b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 81010bc:	b2d2      	uxtb	r2, r2
 81010be:	4611      	mov	r1, r2
 81010c0:	4618      	mov	r0, r3
 81010c2:	f000 f96b 	bl	810139c <BNO080_qToFloat>
 81010c6:	eef0 7a40 	vmov.f32	s15, s0
}
 81010ca:	eeb0 0a67 	vmov.f32	s0, s15
 81010ce:	bd80      	pop	{r7, pc}
 81010d0:	10000148 	.word	0x10000148
 81010d4:	10000000 	.word	0x10000000

081010d8 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 81010d8:	b580      	push	{r7, lr}
 81010da:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 81010dc:	4b07      	ldr	r3, [pc, #28]	@ (81010fc <BNO080_getQuatJ+0x24>)
 81010de:	881b      	ldrh	r3, [r3, #0]
 81010e0:	b21b      	sxth	r3, r3
 81010e2:	4a07      	ldr	r2, [pc, #28]	@ (8101100 <BNO080_getQuatJ+0x28>)
 81010e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 81010e8:	b2d2      	uxtb	r2, r2
 81010ea:	4611      	mov	r1, r2
 81010ec:	4618      	mov	r0, r3
 81010ee:	f000 f955 	bl	810139c <BNO080_qToFloat>
 81010f2:	eef0 7a40 	vmov.f32	s15, s0
}
 81010f6:	eeb0 0a67 	vmov.f32	s0, s15
 81010fa:	bd80      	pop	{r7, pc}
 81010fc:	1000014a 	.word	0x1000014a
 8101100:	10000000 	.word	0x10000000

08101104 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8101104:	b580      	push	{r7, lr}
 8101106:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8101108:	4b07      	ldr	r3, [pc, #28]	@ (8101128 <BNO080_getQuatK+0x24>)
 810110a:	881b      	ldrh	r3, [r3, #0]
 810110c:	b21b      	sxth	r3, r3
 810110e:	4a07      	ldr	r2, [pc, #28]	@ (810112c <BNO080_getQuatK+0x28>)
 8101110:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101114:	b2d2      	uxtb	r2, r2
 8101116:	4611      	mov	r1, r2
 8101118:	4618      	mov	r0, r3
 810111a:	f000 f93f 	bl	810139c <BNO080_qToFloat>
 810111e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101122:	eeb0 0a67 	vmov.f32	s0, s15
 8101126:	bd80      	pop	{r7, pc}
 8101128:	1000014c 	.word	0x1000014c
 810112c:	10000000 	.word	0x10000000

08101130 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8101130:	b580      	push	{r7, lr}
 8101132:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8101134:	4b07      	ldr	r3, [pc, #28]	@ (8101154 <BNO080_getQuatReal+0x24>)
 8101136:	881b      	ldrh	r3, [r3, #0]
 8101138:	b21b      	sxth	r3, r3
 810113a:	4a07      	ldr	r2, [pc, #28]	@ (8101158 <BNO080_getQuatReal+0x28>)
 810113c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101140:	b2d2      	uxtb	r2, r2
 8101142:	4611      	mov	r1, r2
 8101144:	4618      	mov	r0, r3
 8101146:	f000 f929 	bl	810139c <BNO080_qToFloat>
 810114a:	eef0 7a40 	vmov.f32	s15, s0
}
 810114e:	eeb0 0a67 	vmov.f32	s0, s15
 8101152:	bd80      	pop	{r7, pc}
 8101154:	1000014e 	.word	0x1000014e
 8101158:	10000000 	.word	0x10000000

0810115c <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 810115c:	b480      	push	{r7}
 810115e:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8101160:	4b03      	ldr	r3, [pc, #12]	@ (8101170 <BNO080_getQuatAccuracy+0x14>)
 8101162:	881b      	ldrh	r3, [r3, #0]
 8101164:	b2db      	uxtb	r3, r3
}
 8101166:	4618      	mov	r0, r3
 8101168:	46bd      	mov	sp, r7
 810116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810116e:	4770      	bx	lr
 8101170:	10000152 	.word	0x10000152

08101174 <BNO080_getAccelX>:

//Return the acceleration component
float BNO080_getAccelX()
{
 8101174:	b580      	push	{r7, lr}
 8101176:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawAccelX, accelerometer_Q1);
 8101178:	4b07      	ldr	r3, [pc, #28]	@ (8101198 <BNO080_getAccelX+0x24>)
 810117a:	881b      	ldrh	r3, [r3, #0]
 810117c:	b21b      	sxth	r3, r3
 810117e:	4a07      	ldr	r2, [pc, #28]	@ (810119c <BNO080_getAccelX+0x28>)
 8101180:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101184:	b2d2      	uxtb	r2, r2
 8101186:	4611      	mov	r1, r2
 8101188:	4618      	mov	r0, r3
 810118a:	f000 f907 	bl	810139c <BNO080_qToFloat>
 810118e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101192:	eeb0 0a67 	vmov.f32	s0, s15
 8101196:	bd80      	pop	{r7, pc}
 8101198:	10000128 	.word	0x10000128
 810119c:	10000002 	.word	0x10000002

081011a0 <BNO080_getAccelY>:

//Return the acceleration component
float BNO080_getAccelY()
{
 81011a0:	b580      	push	{r7, lr}
 81011a2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawAccelY, accelerometer_Q1);
 81011a4:	4b07      	ldr	r3, [pc, #28]	@ (81011c4 <BNO080_getAccelY+0x24>)
 81011a6:	881b      	ldrh	r3, [r3, #0]
 81011a8:	b21b      	sxth	r3, r3
 81011aa:	4a07      	ldr	r2, [pc, #28]	@ (81011c8 <BNO080_getAccelY+0x28>)
 81011ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 81011b0:	b2d2      	uxtb	r2, r2
 81011b2:	4611      	mov	r1, r2
 81011b4:	4618      	mov	r0, r3
 81011b6:	f000 f8f1 	bl	810139c <BNO080_qToFloat>
 81011ba:	eef0 7a40 	vmov.f32	s15, s0
}
 81011be:	eeb0 0a67 	vmov.f32	s0, s15
 81011c2:	bd80      	pop	{r7, pc}
 81011c4:	1000012a 	.word	0x1000012a
 81011c8:	10000002 	.word	0x10000002

081011cc <BNO080_getAccelZ>:

//Return the acceleration component
float BNO080_getAccelZ()
{
 81011cc:	b580      	push	{r7, lr}
 81011ce:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawAccelZ, accelerometer_Q1);
 81011d0:	4b07      	ldr	r3, [pc, #28]	@ (81011f0 <BNO080_getAccelZ+0x24>)
 81011d2:	881b      	ldrh	r3, [r3, #0]
 81011d4:	b21b      	sxth	r3, r3
 81011d6:	4a07      	ldr	r2, [pc, #28]	@ (81011f4 <BNO080_getAccelZ+0x28>)
 81011d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 81011dc:	b2d2      	uxtb	r2, r2
 81011de:	4611      	mov	r1, r2
 81011e0:	4618      	mov	r0, r3
 81011e2:	f000 f8db 	bl	810139c <BNO080_qToFloat>
 81011e6:	eef0 7a40 	vmov.f32	s15, s0
}
 81011ea:	eeb0 0a67 	vmov.f32	s0, s15
 81011ee:	bd80      	pop	{r7, pc}
 81011f0:	1000012c 	.word	0x1000012c
 81011f4:	10000002 	.word	0x10000002

081011f8 <BNO080_getLinAccelX>:

// linear acceleration, i.e. minus gravity

//Return the acceleration component
float BNO080_getLinAccelX()
{
 81011f8:	b580      	push	{r7, lr}
 81011fa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawLinAccelX, linear_accelerometer_Q1);
 81011fc:	4b07      	ldr	r3, [pc, #28]	@ (810121c <BNO080_getLinAccelX+0x24>)
 81011fe:	881b      	ldrh	r3, [r3, #0]
 8101200:	b21b      	sxth	r3, r3
 8101202:	4a07      	ldr	r2, [pc, #28]	@ (8101220 <BNO080_getLinAccelX+0x28>)
 8101204:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101208:	b2d2      	uxtb	r2, r2
 810120a:	4611      	mov	r1, r2
 810120c:	4618      	mov	r0, r3
 810120e:	f000 f8c5 	bl	810139c <BNO080_qToFloat>
 8101212:	eef0 7a40 	vmov.f32	s15, s0
}
 8101216:	eeb0 0a67 	vmov.f32	s0, s15
 810121a:	bd80      	pop	{r7, pc}
 810121c:	10000130 	.word	0x10000130
 8101220:	10000004 	.word	0x10000004

08101224 <BNO080_getLinAccelY>:

//Return the acceleration component
float BNO080_getLinAccelY()
{
 8101224:	b580      	push	{r7, lr}
 8101226:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawLinAccelY, linear_accelerometer_Q1);
 8101228:	4b07      	ldr	r3, [pc, #28]	@ (8101248 <BNO080_getLinAccelY+0x24>)
 810122a:	881b      	ldrh	r3, [r3, #0]
 810122c:	b21b      	sxth	r3, r3
 810122e:	4a07      	ldr	r2, [pc, #28]	@ (810124c <BNO080_getLinAccelY+0x28>)
 8101230:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101234:	b2d2      	uxtb	r2, r2
 8101236:	4611      	mov	r1, r2
 8101238:	4618      	mov	r0, r3
 810123a:	f000 f8af 	bl	810139c <BNO080_qToFloat>
 810123e:	eef0 7a40 	vmov.f32	s15, s0
}
 8101242:	eeb0 0a67 	vmov.f32	s0, s15
 8101246:	bd80      	pop	{r7, pc}
 8101248:	10000132 	.word	0x10000132
 810124c:	10000004 	.word	0x10000004

08101250 <BNO080_getLinAccelZ>:

//Return the acceleration component
float BNO080_getLinAccelZ()
{
 8101250:	b580      	push	{r7, lr}
 8101252:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawLinAccelZ, linear_accelerometer_Q1);
 8101254:	4b07      	ldr	r3, [pc, #28]	@ (8101274 <BNO080_getLinAccelZ+0x24>)
 8101256:	881b      	ldrh	r3, [r3, #0]
 8101258:	b21b      	sxth	r3, r3
 810125a:	4a07      	ldr	r2, [pc, #28]	@ (8101278 <BNO080_getLinAccelZ+0x28>)
 810125c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101260:	b2d2      	uxtb	r2, r2
 8101262:	4611      	mov	r1, r2
 8101264:	4618      	mov	r0, r3
 8101266:	f000 f899 	bl	810139c <BNO080_qToFloat>
 810126a:	eef0 7a40 	vmov.f32	s15, s0
}
 810126e:	eeb0 0a67 	vmov.f32	s0, s15
 8101272:	bd80      	pop	{r7, pc}
 8101274:	10000134 	.word	0x10000134
 8101278:	10000004 	.word	0x10000004

0810127c <BNO080_getGyroX>:
	return (accelLinAccuracy);
}

//Return the gyro component
float BNO080_getGyroX()
{
 810127c:	b580      	push	{r7, lr}
 810127e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawGyroX, gyro_Q1);
 8101280:	4b07      	ldr	r3, [pc, #28]	@ (81012a0 <BNO080_getGyroX+0x24>)
 8101282:	881b      	ldrh	r3, [r3, #0]
 8101284:	b21b      	sxth	r3, r3
 8101286:	4a07      	ldr	r2, [pc, #28]	@ (81012a4 <BNO080_getGyroX+0x28>)
 8101288:	f9b2 2000 	ldrsh.w	r2, [r2]
 810128c:	b2d2      	uxtb	r2, r2
 810128e:	4611      	mov	r1, r2
 8101290:	4618      	mov	r0, r3
 8101292:	f000 f883 	bl	810139c <BNO080_qToFloat>
 8101296:	eef0 7a40 	vmov.f32	s15, s0
}
 810129a:	eeb0 0a67 	vmov.f32	s0, s15
 810129e:	bd80      	pop	{r7, pc}
 81012a0:	10000138 	.word	0x10000138
 81012a4:	10000006 	.word	0x10000006

081012a8 <BNO080_getGyroY>:

//Return the gyro component
float BNO080_getGyroY()
{
 81012a8:	b580      	push	{r7, lr}
 81012aa:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawGyroY, gyro_Q1);
 81012ac:	4b07      	ldr	r3, [pc, #28]	@ (81012cc <BNO080_getGyroY+0x24>)
 81012ae:	881b      	ldrh	r3, [r3, #0]
 81012b0:	b21b      	sxth	r3, r3
 81012b2:	4a07      	ldr	r2, [pc, #28]	@ (81012d0 <BNO080_getGyroY+0x28>)
 81012b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 81012b8:	b2d2      	uxtb	r2, r2
 81012ba:	4611      	mov	r1, r2
 81012bc:	4618      	mov	r0, r3
 81012be:	f000 f86d 	bl	810139c <BNO080_qToFloat>
 81012c2:	eef0 7a40 	vmov.f32	s15, s0
}
 81012c6:	eeb0 0a67 	vmov.f32	s0, s15
 81012ca:	bd80      	pop	{r7, pc}
 81012cc:	1000013a 	.word	0x1000013a
 81012d0:	10000006 	.word	0x10000006

081012d4 <BNO080_getGyroZ>:

//Return the gyro component
float BNO080_getGyroZ()
{
 81012d4:	b580      	push	{r7, lr}
 81012d6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawGyroZ, gyro_Q1);
 81012d8:	4b07      	ldr	r3, [pc, #28]	@ (81012f8 <BNO080_getGyroZ+0x24>)
 81012da:	881b      	ldrh	r3, [r3, #0]
 81012dc:	b21b      	sxth	r3, r3
 81012de:	4a07      	ldr	r2, [pc, #28]	@ (81012fc <BNO080_getGyroZ+0x28>)
 81012e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 81012e4:	b2d2      	uxtb	r2, r2
 81012e6:	4611      	mov	r1, r2
 81012e8:	4618      	mov	r0, r3
 81012ea:	f000 f857 	bl	810139c <BNO080_qToFloat>
 81012ee:	eef0 7a40 	vmov.f32	s15, s0
}
 81012f2:	eeb0 0a67 	vmov.f32	s0, s15
 81012f6:	bd80      	pop	{r7, pc}
 81012f8:	1000013c 	.word	0x1000013c
 81012fc:	10000006 	.word	0x10000006

08101300 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8101300:	b580      	push	{r7, lr}
 8101302:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8101304:	4b07      	ldr	r3, [pc, #28]	@ (8101324 <BNO080_getMagX+0x24>)
 8101306:	881b      	ldrh	r3, [r3, #0]
 8101308:	b21b      	sxth	r3, r3
 810130a:	4a07      	ldr	r2, [pc, #28]	@ (8101328 <BNO080_getMagX+0x28>)
 810130c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101310:	b2d2      	uxtb	r2, r2
 8101312:	4611      	mov	r1, r2
 8101314:	4618      	mov	r0, r3
 8101316:	f000 f841 	bl	810139c <BNO080_qToFloat>
 810131a:	eef0 7a40 	vmov.f32	s15, s0
}
 810131e:	eeb0 0a67 	vmov.f32	s0, s15
 8101322:	bd80      	pop	{r7, pc}
 8101324:	10000140 	.word	0x10000140
 8101328:	10000008 	.word	0x10000008

0810132c <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 810132c:	b580      	push	{r7, lr}
 810132e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8101330:	4b07      	ldr	r3, [pc, #28]	@ (8101350 <BNO080_getMagY+0x24>)
 8101332:	881b      	ldrh	r3, [r3, #0]
 8101334:	b21b      	sxth	r3, r3
 8101336:	4a07      	ldr	r2, [pc, #28]	@ (8101354 <BNO080_getMagY+0x28>)
 8101338:	f9b2 2000 	ldrsh.w	r2, [r2]
 810133c:	b2d2      	uxtb	r2, r2
 810133e:	4611      	mov	r1, r2
 8101340:	4618      	mov	r0, r3
 8101342:	f000 f82b 	bl	810139c <BNO080_qToFloat>
 8101346:	eef0 7a40 	vmov.f32	s15, s0
}
 810134a:	eeb0 0a67 	vmov.f32	s0, s15
 810134e:	bd80      	pop	{r7, pc}
 8101350:	10000142 	.word	0x10000142
 8101354:	10000008 	.word	0x10000008

08101358 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8101358:	b580      	push	{r7, lr}
 810135a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 810135c:	4b07      	ldr	r3, [pc, #28]	@ (810137c <BNO080_getMagZ+0x24>)
 810135e:	881b      	ldrh	r3, [r3, #0]
 8101360:	b21b      	sxth	r3, r3
 8101362:	4a07      	ldr	r2, [pc, #28]	@ (8101380 <BNO080_getMagZ+0x28>)
 8101364:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101368:	b2d2      	uxtb	r2, r2
 810136a:	4611      	mov	r1, r2
 810136c:	4618      	mov	r0, r3
 810136e:	f000 f815 	bl	810139c <BNO080_qToFloat>
 8101372:	eef0 7a40 	vmov.f32	s15, s0
}
 8101376:	eeb0 0a67 	vmov.f32	s0, s15
 810137a:	bd80      	pop	{r7, pc}
 810137c:	10000144 	.word	0x10000144
 8101380:	10000008 	.word	0x10000008

08101384 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8101384:	b480      	push	{r7}
 8101386:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8101388:	4b03      	ldr	r3, [pc, #12]	@ (8101398 <BNO080_getMagAccuracy+0x14>)
 810138a:	881b      	ldrh	r3, [r3, #0]
 810138c:	b2db      	uxtb	r3, r3
}
 810138e:	4618      	mov	r0, r3
 8101390:	46bd      	mov	sp, r7
 8101392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101396:	4770      	bx	lr
 8101398:	10000146 	.word	0x10000146

0810139c <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 810139c:	b580      	push	{r7, lr}
 810139e:	ed2d 8b02 	vpush	{d8}
 81013a2:	b082      	sub	sp, #8
 81013a4:	af00      	add	r7, sp, #0
 81013a6:	4603      	mov	r3, r0
 81013a8:	460a      	mov	r2, r1
 81013aa:	80fb      	strh	r3, [r7, #6]
 81013ac:	4613      	mov	r3, r2
 81013ae:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 81013b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013b4:	ee07 3a90 	vmov	s15, r3
 81013b8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 81013bc:	797b      	ldrb	r3, [r7, #5]
 81013be:	425b      	negs	r3, r3
 81013c0:	ee07 3a90 	vmov	s15, r3
 81013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81013c8:	eef0 0a67 	vmov.f32	s1, s15
 81013cc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 81013d0:	f004 ff0e 	bl	81061f0 <powf>
 81013d4:	eef0 7a40 	vmov.f32	s15, s0
 81013d8:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 81013dc:	eeb0 0a67 	vmov.f32	s0, s15
 81013e0:	3708      	adds	r7, #8
 81013e2:	46bd      	mov	sp, r7
 81013e4:	ecbd 8b02 	vpop	{d8}
 81013e8:	bd80      	pop	{r7, pc}

081013ea <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 81013ea:	b580      	push	{r7, lr}
 81013ec:	b082      	sub	sp, #8
 81013ee:	af00      	add	r7, sp, #0
 81013f0:	4603      	mov	r3, r0
 81013f2:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 81013f4:	88fb      	ldrh	r3, [r7, #6]
 81013f6:	2200      	movs	r2, #0
 81013f8:	4619      	mov	r1, r3
 81013fa:	2005      	movs	r0, #5
 81013fc:	f000 f866 	bl	81014cc <BNO080_setFeatureCommand>
}
 8101400:	bf00      	nop
 8101402:	3708      	adds	r7, #8
 8101404:	46bd      	mov	sp, r7
 8101406:	bd80      	pop	{r7, pc}

08101408 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8101408:	b580      	push	{r7, lr}
 810140a:	b082      	sub	sp, #8
 810140c:	af00      	add	r7, sp, #0
 810140e:	4603      	mov	r3, r0
 8101410:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8101412:	88fb      	ldrh	r3, [r7, #6]
 8101414:	2200      	movs	r2, #0
 8101416:	4619      	mov	r1, r3
 8101418:	2008      	movs	r0, #8
 810141a:	f000 f857 	bl	81014cc <BNO080_setFeatureCommand>
}
 810141e:	bf00      	nop
 8101420:	3708      	adds	r7, #8
 8101422:	46bd      	mov	sp, r7
 8101424:	bd80      	pop	{r7, pc}

08101426 <BNO080_enableAccelerometer>:

//Sends the packet to enable the accelerometer
void BNO080_enableAccelerometer(uint16_t timeBetweenReports)
{
 8101426:	b580      	push	{r7, lr}
 8101428:	b082      	sub	sp, #8
 810142a:	af00      	add	r7, sp, #0
 810142c:	4603      	mov	r3, r0
 810142e:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ACCELEROMETER, timeBetweenReports, 0);
 8101430:	88fb      	ldrh	r3, [r7, #6]
 8101432:	2200      	movs	r2, #0
 8101434:	4619      	mov	r1, r3
 8101436:	2001      	movs	r0, #1
 8101438:	f000 f848 	bl	81014cc <BNO080_setFeatureCommand>
}
 810143c:	bf00      	nop
 810143e:	3708      	adds	r7, #8
 8101440:	46bd      	mov	sp, r7
 8101442:	bd80      	pop	{r7, pc}

08101444 <BNO080_enableLinearAccelerometer>:

//Sends the packet to enable the accelerometer
void BNO080_enableLinearAccelerometer(uint16_t timeBetweenReports)
{
 8101444:	b580      	push	{r7, lr}
 8101446:	b082      	sub	sp, #8
 8101448:	af00      	add	r7, sp, #0
 810144a:	4603      	mov	r3, r0
 810144c:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_LINEAR_ACCELERATION, timeBetweenReports, 0);
 810144e:	88fb      	ldrh	r3, [r7, #6]
 8101450:	2200      	movs	r2, #0
 8101452:	4619      	mov	r1, r3
 8101454:	2004      	movs	r0, #4
 8101456:	f000 f839 	bl	81014cc <BNO080_setFeatureCommand>
}
 810145a:	bf00      	nop
 810145c:	3708      	adds	r7, #8
 810145e:	46bd      	mov	sp, r7
 8101460:	bd80      	pop	{r7, pc}

08101462 <BNO080_enableGyro>:

//Sends the packet to enable the gyro
void BNO080_enableGyro(uint16_t timeBetweenReports)
{
 8101462:	b580      	push	{r7, lr}
 8101464:	b082      	sub	sp, #8
 8101466:	af00      	add	r7, sp, #0
 8101468:	4603      	mov	r3, r0
 810146a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
 810146c:	88fb      	ldrh	r3, [r7, #6]
 810146e:	2200      	movs	r2, #0
 8101470:	4619      	mov	r1, r3
 8101472:	2002      	movs	r0, #2
 8101474:	f000 f82a 	bl	81014cc <BNO080_setFeatureCommand>
}
 8101478:	bf00      	nop
 810147a:	3708      	adds	r7, #8
 810147c:	46bd      	mov	sp, r7
 810147e:	bd80      	pop	{r7, pc}

08101480 <BNO080_enableMagnetometer>:

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8101480:	b580      	push	{r7, lr}
 8101482:	b082      	sub	sp, #8
 8101484:	af00      	add	r7, sp, #0
 8101486:	4603      	mov	r3, r0
 8101488:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 810148a:	88fb      	ldrh	r3, [r7, #6]
 810148c:	2200      	movs	r2, #0
 810148e:	4619      	mov	r1, r3
 8101490:	2003      	movs	r0, #3
 8101492:	f000 f81b 	bl	81014cc <BNO080_setFeatureCommand>
}
 8101496:	bf00      	nop
 8101498:	3708      	adds	r7, #8
 810149a:	46bd      	mov	sp, r7
 810149c:	bd80      	pop	{r7, pc}

0810149e <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 810149e:	b580      	push	{r7, lr}
 81014a0:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 81014a2:	2004      	movs	r0, #4
 81014a4:	f000 f884 	bl	81015b0 <BNO080_sendCalibrateCommand>
}
 81014a8:	bf00      	nop
 81014aa:	bd80      	pop	{r7, pc}

081014ac <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 81014ac:	b480      	push	{r7}
 81014ae:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 81014b0:	4b05      	ldr	r3, [pc, #20]	@ (81014c8 <BNO080_calibrationComplete+0x1c>)
 81014b2:	781b      	ldrb	r3, [r3, #0]
 81014b4:	2b00      	cmp	r3, #0
 81014b6:	d101      	bne.n	81014bc <BNO080_calibrationComplete+0x10>
		return (1);
 81014b8:	2301      	movs	r3, #1
 81014ba:	e000      	b.n	81014be <BNO080_calibrationComplete+0x12>
	return (0);
 81014bc:	2300      	movs	r3, #0
}
 81014be:	4618      	mov	r0, r3
 81014c0:	46bd      	mov	sp, r7
 81014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c6:	4770      	bx	lr
 81014c8:	10000164 	.word	0x10000164

081014cc <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 81014cc:	b580      	push	{r7, lr}
 81014ce:	b084      	sub	sp, #16
 81014d0:	af00      	add	r7, sp, #0
 81014d2:	4603      	mov	r3, r0
 81014d4:	60b9      	str	r1, [r7, #8]
 81014d6:	607a      	str	r2, [r7, #4]
 81014d8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 81014da:	4b24      	ldr	r3, [pc, #144]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 81014dc:	22fd      	movs	r2, #253	@ 0xfd
 81014de:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 81014e0:	4a22      	ldr	r2, [pc, #136]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 81014e2:	7bfb      	ldrb	r3, [r7, #15]
 81014e4:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 81014e6:	4b21      	ldr	r3, [pc, #132]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 81014e8:	2200      	movs	r2, #0
 81014ea:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 81014ec:	4b1f      	ldr	r3, [pc, #124]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 81014ee:	2200      	movs	r2, #0
 81014f0:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 81014f2:	4b1e      	ldr	r3, [pc, #120]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 81014f4:	2200      	movs	r2, #0
 81014f6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 81014f8:	68bb      	ldr	r3, [r7, #8]
 81014fa:	b2da      	uxtb	r2, r3
 81014fc:	4b1b      	ldr	r3, [pc, #108]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 81014fe:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8101500:	68bb      	ldr	r3, [r7, #8]
 8101502:	0a1b      	lsrs	r3, r3, #8
 8101504:	b2da      	uxtb	r2, r3
 8101506:	4b19      	ldr	r3, [pc, #100]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101508:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 810150a:	68bb      	ldr	r3, [r7, #8]
 810150c:	0c1b      	lsrs	r3, r3, #16
 810150e:	b2da      	uxtb	r2, r3
 8101510:	4b16      	ldr	r3, [pc, #88]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101512:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8101514:	68bb      	ldr	r3, [r7, #8]
 8101516:	0e1b      	lsrs	r3, r3, #24
 8101518:	b2da      	uxtb	r2, r3
 810151a:	4b14      	ldr	r3, [pc, #80]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 810151c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 810151e:	4b13      	ldr	r3, [pc, #76]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101520:	2200      	movs	r2, #0
 8101522:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8101524:	4b11      	ldr	r3, [pc, #68]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101526:	2200      	movs	r2, #0
 8101528:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 810152a:	4b10      	ldr	r3, [pc, #64]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 810152c:	2200      	movs	r2, #0
 810152e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8101530:	4b0e      	ldr	r3, [pc, #56]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101532:	2200      	movs	r2, #0
 8101534:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8101536:	687b      	ldr	r3, [r7, #4]
 8101538:	b2da      	uxtb	r2, r3
 810153a:	4b0c      	ldr	r3, [pc, #48]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 810153c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	0a1b      	lsrs	r3, r3, #8
 8101542:	b2da      	uxtb	r2, r3
 8101544:	4b09      	ldr	r3, [pc, #36]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101546:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8101548:	687b      	ldr	r3, [r7, #4]
 810154a:	0c1b      	lsrs	r3, r3, #16
 810154c:	b2da      	uxtb	r2, r3
 810154e:	4b07      	ldr	r3, [pc, #28]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 8101550:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	0e1b      	lsrs	r3, r3, #24
 8101556:	b2da      	uxtb	r2, r3
 8101558:	4b04      	ldr	r3, [pc, #16]	@ (810156c <BNO080_setFeatureCommand+0xa0>)
 810155a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 810155c:	2111      	movs	r1, #17
 810155e:	2002      	movs	r0, #2
 8101560:	f000 f932 	bl	81017c8 <BNO080_sendPacket>
}
 8101564:	bf00      	nop
 8101566:	3710      	adds	r7, #16
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}
 810156c:	100000a0 	.word	0x100000a0

08101570 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8101570:	b580      	push	{r7, lr}
 8101572:	b082      	sub	sp, #8
 8101574:	af00      	add	r7, sp, #0
 8101576:	4603      	mov	r3, r0
 8101578:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 810157a:	4b0b      	ldr	r3, [pc, #44]	@ (81015a8 <BNO080_sendCommand+0x38>)
 810157c:	22f2      	movs	r2, #242	@ 0xf2
 810157e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8101580:	4b0a      	ldr	r3, [pc, #40]	@ (81015ac <BNO080_sendCommand+0x3c>)
 8101582:	781b      	ldrb	r3, [r3, #0]
 8101584:	1c5a      	adds	r2, r3, #1
 8101586:	b2d1      	uxtb	r1, r2
 8101588:	4a08      	ldr	r2, [pc, #32]	@ (81015ac <BNO080_sendCommand+0x3c>)
 810158a:	7011      	strb	r1, [r2, #0]
 810158c:	4a06      	ldr	r2, [pc, #24]	@ (81015a8 <BNO080_sendCommand+0x38>)
 810158e:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8101590:	4a05      	ldr	r2, [pc, #20]	@ (81015a8 <BNO080_sendCommand+0x38>)
 8101592:	79fb      	ldrb	r3, [r7, #7]
 8101594:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8101596:	210c      	movs	r1, #12
 8101598:	2002      	movs	r0, #2
 810159a:	f000 f915 	bl	81017c8 <BNO080_sendPacket>
}
 810159e:	bf00      	nop
 81015a0:	3708      	adds	r7, #8
 81015a2:	46bd      	mov	sp, r7
 81015a4:	bd80      	pop	{r7, pc}
 81015a6:	bf00      	nop
 81015a8:	100000a0 	.word	0x100000a0
 81015ac:	10000126 	.word	0x10000126

081015b0 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 81015b0:	b580      	push	{r7, lr}
 81015b2:	b084      	sub	sp, #16
 81015b4:	af00      	add	r7, sp, #0
 81015b6:	4603      	mov	r3, r0
 81015b8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 81015ba:	2303      	movs	r3, #3
 81015bc:	73fb      	strb	r3, [r7, #15]
 81015be:	e006      	b.n	81015ce <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 81015c0:	7bfb      	ldrb	r3, [r7, #15]
 81015c2:	4a1d      	ldr	r2, [pc, #116]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 81015c4:	2100      	movs	r1, #0
 81015c6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 81015c8:	7bfb      	ldrb	r3, [r7, #15]
 81015ca:	3301      	adds	r3, #1
 81015cc:	73fb      	strb	r3, [r7, #15]
 81015ce:	7bfb      	ldrb	r3, [r7, #15]
 81015d0:	2b0b      	cmp	r3, #11
 81015d2:	d9f5      	bls.n	81015c0 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 81015d4:	79fb      	ldrb	r3, [r7, #7]
 81015d6:	2b00      	cmp	r3, #0
 81015d8:	d103      	bne.n	81015e2 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 81015da:	4b17      	ldr	r3, [pc, #92]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 81015dc:	2201      	movs	r2, #1
 81015de:	70da      	strb	r2, [r3, #3]
 81015e0:	e020      	b.n	8101624 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 81015e2:	79fb      	ldrb	r3, [r7, #7]
 81015e4:	2b01      	cmp	r3, #1
 81015e6:	d103      	bne.n	81015f0 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 81015e8:	4b13      	ldr	r3, [pc, #76]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 81015ea:	2201      	movs	r2, #1
 81015ec:	711a      	strb	r2, [r3, #4]
 81015ee:	e019      	b.n	8101624 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 81015f0:	79fb      	ldrb	r3, [r7, #7]
 81015f2:	2b02      	cmp	r3, #2
 81015f4:	d103      	bne.n	81015fe <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 81015f6:	4b10      	ldr	r3, [pc, #64]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 81015f8:	2201      	movs	r2, #1
 81015fa:	715a      	strb	r2, [r3, #5]
 81015fc:	e012      	b.n	8101624 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 81015fe:	79fb      	ldrb	r3, [r7, #7]
 8101600:	2b03      	cmp	r3, #3
 8101602:	d103      	bne.n	810160c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8101604:	4b0c      	ldr	r3, [pc, #48]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 8101606:	2201      	movs	r2, #1
 8101608:	71da      	strb	r2, [r3, #7]
 810160a:	e00b      	b.n	8101624 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 810160c:	79fb      	ldrb	r3, [r7, #7]
 810160e:	2b04      	cmp	r3, #4
 8101610:	d108      	bne.n	8101624 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8101612:	4b09      	ldr	r3, [pc, #36]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 8101614:	2201      	movs	r2, #1
 8101616:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8101618:	4b07      	ldr	r3, [pc, #28]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 810161a:	2201      	movs	r2, #1
 810161c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 810161e:	4b06      	ldr	r3, [pc, #24]	@ (8101638 <BNO080_sendCalibrateCommand+0x88>)
 8101620:	2201      	movs	r2, #1
 8101622:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8101624:	4b05      	ldr	r3, [pc, #20]	@ (810163c <BNO080_sendCalibrateCommand+0x8c>)
 8101626:	2201      	movs	r2, #1
 8101628:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 810162a:	2007      	movs	r0, #7
 810162c:	f7ff ffa0 	bl	8101570 <BNO080_sendCommand>
}
 8101630:	bf00      	nop
 8101632:	3710      	adds	r7, #16
 8101634:	46bd      	mov	sp, r7
 8101636:	bd80      	pop	{r7, pc}
 8101638:	100000a0 	.word	0x100000a0
 810163c:	10000164 	.word	0x10000164

08101640 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8101640:	b580      	push	{r7, lr}
 8101642:	b082      	sub	sp, #8
 8101644:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101646:	2303      	movs	r3, #3
 8101648:	71fb      	strb	r3, [r7, #7]
 810164a:	e006      	b.n	810165a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 810164c:	79fb      	ldrb	r3, [r7, #7]
 810164e:	4a09      	ldr	r2, [pc, #36]	@ (8101674 <BNO080_requestCalibrationStatus+0x34>)
 8101650:	2100      	movs	r1, #0
 8101652:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8101654:	79fb      	ldrb	r3, [r7, #7]
 8101656:	3301      	adds	r3, #1
 8101658:	71fb      	strb	r3, [r7, #7]
 810165a:	79fb      	ldrb	r3, [r7, #7]
 810165c:	2b0b      	cmp	r3, #11
 810165e:	d9f5      	bls.n	810164c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8101660:	4b04      	ldr	r3, [pc, #16]	@ (8101674 <BNO080_requestCalibrationStatus+0x34>)
 8101662:	2201      	movs	r2, #1
 8101664:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8101666:	2007      	movs	r0, #7
 8101668:	f7ff ff82 	bl	8101570 <BNO080_sendCommand>
}
 810166c:	bf00      	nop
 810166e:	3708      	adds	r7, #8
 8101670:	46bd      	mov	sp, r7
 8101672:	bd80      	pop	{r7, pc}
 8101674:	100000a0 	.word	0x100000a0

08101678 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8101678:	b580      	push	{r7, lr}
 810167a:	b082      	sub	sp, #8
 810167c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 810167e:	2303      	movs	r3, #3
 8101680:	71fb      	strb	r3, [r7, #7]
 8101682:	e006      	b.n	8101692 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8101684:	79fb      	ldrb	r3, [r7, #7]
 8101686:	4a08      	ldr	r2, [pc, #32]	@ (81016a8 <BNO080_saveCalibration+0x30>)
 8101688:	2100      	movs	r1, #0
 810168a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 810168c:	79fb      	ldrb	r3, [r7, #7]
 810168e:	3301      	adds	r3, #1
 8101690:	71fb      	strb	r3, [r7, #7]
 8101692:	79fb      	ldrb	r3, [r7, #7]
 8101694:	2b0b      	cmp	r3, #11
 8101696:	d9f5      	bls.n	8101684 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8101698:	2006      	movs	r0, #6
 810169a:	f7ff ff69 	bl	8101570 <BNO080_sendCommand>
}
 810169e:	bf00      	nop
 81016a0:	3708      	adds	r7, #8
 81016a2:	46bd      	mov	sp, r7
 81016a4:	bd80      	pop	{r7, pc}
 81016a6:	bf00      	nop
 81016a8:	100000a0 	.word	0x100000a0

081016ac <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 81016ac:	b580      	push	{r7, lr}
 81016ae:	b082      	sub	sp, #8
 81016b0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 81016b2:	2300      	movs	r3, #0
 81016b4:	607b      	str	r3, [r7, #4]
 81016b6:	e00c      	b.n	81016d2 <BNO080_waitForSPI+0x26>
	{
		if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 81016b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81016bc:	4809      	ldr	r0, [pc, #36]	@ (81016e4 <BNO080_waitForSPI+0x38>)
 81016be:	f001 fcb7 	bl	8103030 <HAL_GPIO_ReadPin>
 81016c2:	4603      	mov	r3, r0
 81016c4:	2b00      	cmp	r3, #0
 81016c6:	d101      	bne.n	81016cc <BNO080_waitForSPI+0x20>
		{
//			printf("\nData available\n");
			return (1);
 81016c8:	2301      	movs	r3, #1
 81016ca:	e007      	b.n	81016dc <BNO080_waitForSPI+0x30>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	3301      	adds	r3, #1
 81016d0:	607b      	str	r3, [r7, #4]
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81016d8:	d1ee      	bne.n	81016b8 <BNO080_waitForSPI+0xc>
		}
//		printf("SPI Wait %d\n", counter);
	}
//	printf("\nData not available\n");
	return (0);
 81016da:	2300      	movs	r3, #0
}
 81016dc:	4618      	mov	r0, r3
 81016de:	3708      	adds	r7, #8
 81016e0:	46bd      	mov	sp, r7
 81016e2:	bd80      	pop	{r7, pc}
 81016e4:	58021800 	.word	0x58021800

081016e8 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 81016e8:	b580      	push	{r7, lr}
 81016ea:	b084      	sub	sp, #16
 81016ec:	af00      	add	r7, sp, #0
	uint8_t incoming;
	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 81016ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81016f2:	4831      	ldr	r0, [pc, #196]	@ (81017b8 <BNO080_receivePacket+0xd0>)
 81016f4:	f001 fc9c 	bl	8103030 <HAL_GPIO_ReadPin>
 81016f8:	4603      	mov	r3, r0
 81016fa:	2b01      	cmp	r3, #1
 81016fc:	d101      	bne.n	8101702 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 81016fe:	2300      	movs	r3, #0
 8101700:	e056      	b.n	81017b0 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080); // Todo
 8101702:	2200      	movs	r2, #0
 8101704:	2120      	movs	r1, #32
 8101706:	482d      	ldr	r0, [pc, #180]	@ (81017bc <BNO080_receivePacket+0xd4>)
 8101708:	f001 fcaa 	bl	8103060 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin, GPIO_PIN_RESET);

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 810170c:	2000      	movs	r0, #0
 810170e:	f7ff fafb 	bl	8100d08 <SPI2_SendByte>
 8101712:	4603      	mov	r3, r0
 8101714:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8101716:	2000      	movs	r0, #0
 8101718:	f7ff faf6 	bl	8100d08 <SPI2_SendByte>
 810171c:	4603      	mov	r3, r0
 810171e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8101720:	2000      	movs	r0, #0
 8101722:	f7ff faf1 	bl	8100d08 <SPI2_SendByte>
 8101726:	4603      	mov	r3, r0
 8101728:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 810172a:	2000      	movs	r0, #0
 810172c:	f7ff faec 	bl	8100d08 <SPI2_SendByte>
 8101730:	4603      	mov	r3, r0
 8101732:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8101734:	4a22      	ldr	r2, [pc, #136]	@ (81017c0 <BNO080_receivePacket+0xd8>)
 8101736:	7b7b      	ldrb	r3, [r7, #13]
 8101738:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 810173a:	4a21      	ldr	r2, [pc, #132]	@ (81017c0 <BNO080_receivePacket+0xd8>)
 810173c:	7b3b      	ldrb	r3, [r7, #12]
 810173e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8101740:	4a1f      	ldr	r2, [pc, #124]	@ (81017c0 <BNO080_receivePacket+0xd8>)
 8101742:	7afb      	ldrb	r3, [r7, #11]
 8101744:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8101746:	4a1e      	ldr	r2, [pc, #120]	@ (81017c0 <BNO080_receivePacket+0xd8>)
 8101748:	7abb      	ldrb	r3, [r7, #10]
 810174a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 810174c:	7b3b      	ldrb	r3, [r7, #12]
 810174e:	021b      	lsls	r3, r3, #8
 8101750:	b21a      	sxth	r2, r3
 8101752:	7b7b      	ldrb	r3, [r7, #13]
 8101754:	b21b      	sxth	r3, r3
 8101756:	4313      	orrs	r3, r2
 8101758:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 810175a:	893b      	ldrh	r3, [r7, #8]
 810175c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8101760:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	// catch this as an error and exit
	if (dataLength == 0)
 8101762:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8101766:	2b00      	cmp	r3, #0
 8101768:	d101      	bne.n	810176e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 810176a:	2300      	movs	r3, #0
 810176c:	e020      	b.n	81017b0 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 810176e:	893b      	ldrh	r3, [r7, #8]
 8101770:	3b04      	subs	r3, #4
 8101772:	b29b      	uxth	r3, r3
 8101774:	813b      	strh	r3, [r7, #8]

//	printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8101776:	2300      	movs	r3, #0
 8101778:	81fb      	strh	r3, [r7, #14]
 810177a:	e00e      	b.n	810179a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 810177c:	20ff      	movs	r0, #255	@ 0xff
 810177e:	f7ff fac3 	bl	8100d08 <SPI2_SendByte>
 8101782:	4603      	mov	r3, r0
 8101784:	71fb      	strb	r3, [r7, #7]
//		printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8101786:	89fb      	ldrh	r3, [r7, #14]
 8101788:	2b7f      	cmp	r3, #127	@ 0x7f
 810178a:	d803      	bhi.n	8101794 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 810178c:	89fb      	ldrh	r3, [r7, #14]
 810178e:	490d      	ldr	r1, [pc, #52]	@ (81017c4 <BNO080_receivePacket+0xdc>)
 8101790:	79fa      	ldrb	r2, [r7, #7]
 8101792:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8101794:	89fb      	ldrh	r3, [r7, #14]
 8101796:	3301      	adds	r3, #1
 8101798:	81fb      	strh	r3, [r7, #14]
 810179a:	89fa      	ldrh	r2, [r7, #14]
 810179c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81017a0:	429a      	cmp	r2, r3
 81017a2:	dbeb      	blt.n	810177c <BNO080_receivePacket+0x94>
	}
//	printf("\n");

	CHIP_DESELECT(BNO080); // Todo Release BNO080
 81017a4:	2201      	movs	r2, #1
 81017a6:	2120      	movs	r1, #32
 81017a8:	4804      	ldr	r0, [pc, #16]	@ (81017bc <BNO080_receivePacket+0xd4>)
 81017aa:	f001 fc59 	bl	8103060 <HAL_GPIO_WritePin>
	return (1); //We're done!
 81017ae:	2301      	movs	r3, #1
}
 81017b0:	4618      	mov	r0, r3
 81017b2:	3710      	adds	r7, #16
 81017b4:	46bd      	mov	sp, r7
 81017b6:	bd80      	pop	{r7, pc}
 81017b8:	58021800 	.word	0x58021800
 81017bc:	58020400 	.word	0x58020400
 81017c0:	1000009c 	.word	0x1000009c
 81017c4:	100000a0 	.word	0x100000a0

081017c8 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
// - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 81017c8:	b580      	push	{r7, lr}
 81017ca:	b084      	sub	sp, #16
 81017cc:	af00      	add	r7, sp, #0
 81017ce:	4603      	mov	r3, r0
 81017d0:	460a      	mov	r2, r1
 81017d2:	71fb      	strb	r3, [r7, #7]
 81017d4:	4613      	mov	r3, r2
 81017d6:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 81017d8:	79bb      	ldrb	r3, [r7, #6]
 81017da:	3304      	adds	r3, #4
 81017dc:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 81017de:	f7ff ff65 	bl	81016ac <BNO080_waitForSPI>
 81017e2:	4603      	mov	r3, r0
 81017e4:	2b00      	cmp	r3, #0
 81017e6:	d101      	bne.n	81017ec <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 81017e8:	2300      	movs	r3, #0
 81017ea:	e032      	b.n	8101852 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080); // Todo
 81017ec:	2200      	movs	r2, #0
 81017ee:	2120      	movs	r1, #32
 81017f0:	481a      	ldr	r0, [pc, #104]	@ (810185c <BNO080_sendPacket+0x94>)
 81017f2:	f001 fc35 	bl	8103060 <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 81017f6:	7bbb      	ldrb	r3, [r7, #14]
 81017f8:	4618      	mov	r0, r3
 81017fa:	f7ff fa85 	bl	8100d08 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 81017fe:	7bbb      	ldrb	r3, [r7, #14]
 8101800:	121b      	asrs	r3, r3, #8
 8101802:	b2db      	uxtb	r3, r3
 8101804:	4618      	mov	r0, r3
 8101806:	f7ff fa7f 	bl	8100d08 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 810180a:	79fb      	ldrb	r3, [r7, #7]
 810180c:	4618      	mov	r0, r3
 810180e:	f7ff fa7b 	bl	8100d08 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8101812:	79fb      	ldrb	r3, [r7, #7]
 8101814:	4a12      	ldr	r2, [pc, #72]	@ (8101860 <BNO080_sendPacket+0x98>)
 8101816:	5cd2      	ldrb	r2, [r2, r3]
 8101818:	1c51      	adds	r1, r2, #1
 810181a:	b2c8      	uxtb	r0, r1
 810181c:	4910      	ldr	r1, [pc, #64]	@ (8101860 <BNO080_sendPacket+0x98>)
 810181e:	54c8      	strb	r0, [r1, r3]
 8101820:	4610      	mov	r0, r2
 8101822:	f7ff fa71 	bl	8100d08 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8101826:	2300      	movs	r3, #0
 8101828:	73fb      	strb	r3, [r7, #15]
 810182a:	e008      	b.n	810183e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 810182c:	7bfb      	ldrb	r3, [r7, #15]
 810182e:	4a0d      	ldr	r2, [pc, #52]	@ (8101864 <BNO080_sendPacket+0x9c>)
 8101830:	5cd3      	ldrb	r3, [r2, r3]
 8101832:	4618      	mov	r0, r3
 8101834:	f7ff fa68 	bl	8100d08 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8101838:	7bfb      	ldrb	r3, [r7, #15]
 810183a:	3301      	adds	r3, #1
 810183c:	73fb      	strb	r3, [r7, #15]
 810183e:	7bfa      	ldrb	r2, [r7, #15]
 8101840:	79bb      	ldrb	r3, [r7, #6]
 8101842:	429a      	cmp	r2, r3
 8101844:	d3f2      	bcc.n	810182c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080); // Todo
 8101846:	2201      	movs	r2, #1
 8101848:	2120      	movs	r1, #32
 810184a:	4804      	ldr	r0, [pc, #16]	@ (810185c <BNO080_sendPacket+0x94>)
 810184c:	f001 fc08 	bl	8103060 <HAL_GPIO_WritePin>

	return (1);
 8101850:	2301      	movs	r3, #1
}
 8101852:	4618      	mov	r0, r3
 8101854:	3710      	adds	r7, #16
 8101856:	46bd      	mov	sp, r7
 8101858:	bd80      	pop	{r7, pc}
 810185a:	bf00      	nop
 810185c:	58020400 	.word	0x58020400
 8101860:	10000120 	.word	0x10000120
 8101864:	100000a0 	.word	0x100000a0

08101868 <getRoll>:

float getRoll(uint8_t unit){
 8101868:	b5b0      	push	{r4, r5, r7, lr}
 810186a:	b08c      	sub	sp, #48	@ 0x30
 810186c:	af00      	add	r7, sp, #0
 810186e:	4603      	mov	r3, r0
 8101870:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO080_getQuatI();
 8101872:	f7ff fc1b 	bl	81010ac <BNO080_getQuatI>
 8101876:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float dqy = BNO080_getQuatJ();
 810187a:	f7ff fc2d 	bl	81010d8 <BNO080_getQuatJ>
 810187e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float dqz = BNO080_getQuatK();
 8101882:	f7ff fc3f 	bl	8101104 <BNO080_getQuatK>
 8101886:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqw = BNO080_getQuatReal();
 810188a:	f7ff fc51 	bl	8101130 <BNO080_getQuatReal>
 810188e:	ed87 0a07 	vstr	s0, [r7, #28]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8101892:	edd7 7a07 	vldr	s15, [r7, #28]
 8101896:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810189a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 810189e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81018a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 81018a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 81018aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81018ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 81018b2:	edd7 7a08 	vldr	s15, [r7, #32]
 81018b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 81018be:	ee17 0a90 	vmov	r0, s15
 81018c2:	f7fe fe6d 	bl	81005a0 <__aeabi_f2d>
 81018c6:	4602      	mov	r2, r0
 81018c8:	460b      	mov	r3, r1
 81018ca:	ec43 2b10 	vmov	d0, r2, r3
 81018ce:	f004 fc5b 	bl	8106188 <sqrt>
 81018d2:	ec53 2b10 	vmov	r2, r3, d0
 81018d6:	4610      	mov	r0, r2
 81018d8:	4619      	mov	r1, r3
 81018da:	f7ff f969 	bl	8100bb0 <__aeabi_d2f>
 81018de:	4603      	mov	r3, r0
 81018e0:	61bb      	str	r3, [r7, #24]


	dqx = dqx / norm; //x
 81018e2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 81018e6:	ed97 7a06 	vldr	s14, [r7, #24]
 81018ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81018ee:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dqy = dqy / norm; //y
 81018f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 81018f6:	ed97 7a06 	vldr	s14, [r7, #24]
 81018fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81018fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dqz = dqz / norm; //z
 8101902:	edd7 6a08 	vldr	s13, [r7, #32]
 8101906:	ed97 7a06 	vldr	s14, [r7, #24]
 810190a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810190e:	edc7 7a08 	vstr	s15, [r7, #32]
	dqw = dqw / norm; //w
 8101912:	edd7 6a07 	vldr	s13, [r7, #28]
 8101916:	ed97 7a06 	vldr	s14, [r7, #24]
 810191a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810191e:	edc7 7a07 	vstr	s15, [r7, #28]

	float ysqr = dqy * dqy;
 8101922:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101926:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810192a:	edc7 7a05 	vstr	s15, [r7, #20]
	float t0 = +2.0 * (dqw * dqx + dqy * dqz);
 810192e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101932:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8101936:	ee27 7a27 	vmul.f32	s14, s14, s15
 810193a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 810193e:	edd7 7a08 	vldr	s15, [r7, #32]
 8101942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101946:	ee77 7a27 	vadd.f32	s15, s14, s15
 810194a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810194e:	edc7 7a04 	vstr	s15, [r7, #16]
	float t1 = +1.0 - 2.0 * (dqx * dqx + ysqr);
 8101952:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8101956:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810195a:	edd7 7a05 	vldr	s15, [r7, #20]
 810195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101962:	ee17 0a90 	vmov	r0, s15
 8101966:	f7fe fe1b 	bl	81005a0 <__aeabi_f2d>
 810196a:	4602      	mov	r2, r0
 810196c:	460b      	mov	r3, r1
 810196e:	f7fe fcb9 	bl	81002e4 <__adddf3>
 8101972:	4602      	mov	r2, r0
 8101974:	460b      	mov	r3, r1
 8101976:	f04f 0000 	mov.w	r0, #0
 810197a:	4925      	ldr	r1, [pc, #148]	@ (8101a10 <getRoll+0x1a8>)
 810197c:	f7fe fcb0 	bl	81002e0 <__aeabi_dsub>
 8101980:	4602      	mov	r2, r0
 8101982:	460b      	mov	r3, r1
 8101984:	4610      	mov	r0, r2
 8101986:	4619      	mov	r1, r3
 8101988:	f7ff f912 	bl	8100bb0 <__aeabi_d2f>
 810198c:	4603      	mov	r3, r0
 810198e:	60fb      	str	r3, [r7, #12]
	float roll = atan2(t0, t1);
 8101990:	6938      	ldr	r0, [r7, #16]
 8101992:	f7fe fe05 	bl	81005a0 <__aeabi_f2d>
 8101996:	4604      	mov	r4, r0
 8101998:	460d      	mov	r5, r1
 810199a:	68f8      	ldr	r0, [r7, #12]
 810199c:	f7fe fe00 	bl	81005a0 <__aeabi_f2d>
 81019a0:	4602      	mov	r2, r0
 81019a2:	460b      	mov	r3, r1
 81019a4:	ec43 2b11 	vmov	d1, r2, r3
 81019a8:	ec45 4b10 	vmov	d0, r4, r5
 81019ac:	f004 fbea 	bl	8106184 <atan2>
 81019b0:	ec53 2b10 	vmov	r2, r3, d0
 81019b4:	4610      	mov	r0, r2
 81019b6:	4619      	mov	r1, r3
 81019b8:	f7ff f8fa 	bl	8100bb0 <__aeabi_d2f>
 81019bc:	4603      	mov	r3, r0
 81019be:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if(unit == 1){
 81019c0:	79fb      	ldrb	r3, [r7, #7]
 81019c2:	2b01      	cmp	r3, #1
 81019c4:	d118      	bne.n	81019f8 <getRoll+0x190>
		roll = roll * 180.0 / M_PI;
 81019c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81019c8:	f7fe fdea 	bl	81005a0 <__aeabi_f2d>
 81019cc:	f04f 0200 	mov.w	r2, #0
 81019d0:	4b10      	ldr	r3, [pc, #64]	@ (8101a14 <getRoll+0x1ac>)
 81019d2:	f7fe fe3d 	bl	8100650 <__aeabi_dmul>
 81019d6:	4602      	mov	r2, r0
 81019d8:	460b      	mov	r3, r1
 81019da:	4610      	mov	r0, r2
 81019dc:	4619      	mov	r1, r3
 81019de:	a30a      	add	r3, pc, #40	@ (adr r3, 8101a08 <getRoll+0x1a0>)
 81019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019e4:	f7fe ff5e 	bl	81008a4 <__aeabi_ddiv>
 81019e8:	4602      	mov	r2, r0
 81019ea:	460b      	mov	r3, r1
 81019ec:	4610      	mov	r0, r2
 81019ee:	4619      	mov	r1, r3
 81019f0:	f7ff f8de 	bl	8100bb0 <__aeabi_d2f>
 81019f4:	4603      	mov	r3, r0
 81019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	return (roll);
 81019f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81019fa:	ee07 3a90 	vmov	s15, r3
}
 81019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8101a02:	3730      	adds	r7, #48	@ 0x30
 8101a04:	46bd      	mov	sp, r7
 8101a06:	bdb0      	pop	{r4, r5, r7, pc}
 8101a08:	54442d18 	.word	0x54442d18
 8101a0c:	400921fb 	.word	0x400921fb
 8101a10:	3ff00000 	.word	0x3ff00000
 8101a14:	40668000 	.word	0x40668000

08101a18 <getPitch>:

float getPitch(uint8_t unit){
 8101a18:	b580      	push	{r7, lr}
 8101a1a:	b08a      	sub	sp, #40	@ 0x28
 8101a1c:	af00      	add	r7, sp, #0
 8101a1e:	4603      	mov	r3, r0
 8101a20:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO080_getQuatI();
 8101a22:	f7ff fb43 	bl	81010ac <BNO080_getQuatI>
 8101a26:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqy = BNO080_getQuatJ();
 8101a2a:	f7ff fb55 	bl	81010d8 <BNO080_getQuatJ>
 8101a2e:	ed87 0a06 	vstr	s0, [r7, #24]
	float dqz = BNO080_getQuatK();
 8101a32:	f7ff fb67 	bl	8101104 <BNO080_getQuatK>
 8101a36:	ed87 0a05 	vstr	s0, [r7, #20]
	float dqw = BNO080_getQuatReal();
 8101a3a:	f7ff fb79 	bl	8101130 <BNO080_getQuatReal>
 8101a3e:	ed87 0a04 	vstr	s0, [r7, #16]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8101a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8101a46:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101a4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8101a4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8101a5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8101a66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101a6e:	ee17 0a90 	vmov	r0, s15
 8101a72:	f7fe fd95 	bl	81005a0 <__aeabi_f2d>
 8101a76:	4602      	mov	r2, r0
 8101a78:	460b      	mov	r3, r1
 8101a7a:	ec43 2b10 	vmov	d0, r2, r3
 8101a7e:	f004 fb83 	bl	8106188 <sqrt>
 8101a82:	ec53 2b10 	vmov	r2, r3, d0
 8101a86:	4610      	mov	r0, r2
 8101a88:	4619      	mov	r1, r3
 8101a8a:	f7ff f891 	bl	8100bb0 <__aeabi_d2f>
 8101a8e:	4603      	mov	r3, r0
 8101a90:	60fb      	str	r3, [r7, #12]


	dqx = dqx / norm; //x
 8101a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8101a96:	ed97 7a03 	vldr	s14, [r7, #12]
 8101a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101a9e:	edc7 7a07 	vstr	s15, [r7, #28]
	dqy = dqy / norm; //y
 8101aa2:	edd7 6a06 	vldr	s13, [r7, #24]
 8101aa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101aae:	edc7 7a06 	vstr	s15, [r7, #24]
	dqz = dqz / norm; //z
 8101ab2:	edd7 6a05 	vldr	s13, [r7, #20]
 8101ab6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101abe:	edc7 7a05 	vstr	s15, [r7, #20]
	dqw = dqw / norm; //w
 8101ac2:	edd7 6a04 	vldr	s13, [r7, #16]
 8101ac6:	ed97 7a03 	vldr	s14, [r7, #12]
 8101aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ace:	edc7 7a04 	vstr	s15, [r7, #16]
//
//	if(unit == 1){
//		pitch = pitch * 180.0 / M_PI;
//	}
	// Calculate pitch (y-axis rotation)
	float t2 = +2.0 * (dqw * dqy - dqz * dqx);
 8101ad2:	ed97 7a04 	vldr	s14, [r7, #16]
 8101ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8101ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101ade:	edd7 6a05 	vldr	s13, [r7, #20]
 8101ae2:	edd7 7a07 	vldr	s15, [r7, #28]
 8101ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101aee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101af2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp t2 to stay within the asin range
	if (t2 > 1.0) t2 = 1.0;
 8101af6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101b06:	dd02      	ble.n	8101b0e <getPitch+0xf6>
 8101b08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8101b0c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (t2 < -1.0) t2 = -1.0;
 8101b0e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101b12:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8101b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101b1e:	d501      	bpl.n	8101b24 <getPitch+0x10c>
 8101b20:	4b1d      	ldr	r3, [pc, #116]	@ (8101b98 <getPitch+0x180>)
 8101b22:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculate pitch
	float pitch = asin(t2);
 8101b24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101b26:	f7fe fd3b 	bl	81005a0 <__aeabi_f2d>
 8101b2a:	4602      	mov	r2, r0
 8101b2c:	460b      	mov	r3, r1
 8101b2e:	ec43 2b10 	vmov	d0, r2, r3
 8101b32:	f004 faf3 	bl	810611c <asin>
 8101b36:	ec53 2b10 	vmov	r2, r3, d0
 8101b3a:	4610      	mov	r0, r2
 8101b3c:	4619      	mov	r1, r3
 8101b3e:	f7ff f837 	bl	8100bb0 <__aeabi_d2f>
 8101b42:	4603      	mov	r3, r0
 8101b44:	623b      	str	r3, [r7, #32]

	// Convert pitch to degrees if unit is set to 1
	if (unit == 1) {
 8101b46:	79fb      	ldrb	r3, [r7, #7]
 8101b48:	2b01      	cmp	r3, #1
 8101b4a:	d118      	bne.n	8101b7e <getPitch+0x166>
		pitch = pitch * 180.0 / M_PI;
 8101b4c:	6a38      	ldr	r0, [r7, #32]
 8101b4e:	f7fe fd27 	bl	81005a0 <__aeabi_f2d>
 8101b52:	f04f 0200 	mov.w	r2, #0
 8101b56:	4b11      	ldr	r3, [pc, #68]	@ (8101b9c <getPitch+0x184>)
 8101b58:	f7fe fd7a 	bl	8100650 <__aeabi_dmul>
 8101b5c:	4602      	mov	r2, r0
 8101b5e:	460b      	mov	r3, r1
 8101b60:	4610      	mov	r0, r2
 8101b62:	4619      	mov	r1, r3
 8101b64:	a30a      	add	r3, pc, #40	@ (adr r3, 8101b90 <getPitch+0x178>)
 8101b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b6a:	f7fe fe9b 	bl	81008a4 <__aeabi_ddiv>
 8101b6e:	4602      	mov	r2, r0
 8101b70:	460b      	mov	r3, r1
 8101b72:	4610      	mov	r0, r2
 8101b74:	4619      	mov	r1, r3
 8101b76:	f7ff f81b 	bl	8100bb0 <__aeabi_d2f>
 8101b7a:	4603      	mov	r3, r0
 8101b7c:	623b      	str	r3, [r7, #32]
	}

	return (pitch);
 8101b7e:	6a3b      	ldr	r3, [r7, #32]
 8101b80:	ee07 3a90 	vmov	s15, r3
}
 8101b84:	eeb0 0a67 	vmov.f32	s0, s15
 8101b88:	3728      	adds	r7, #40	@ 0x28
 8101b8a:	46bd      	mov	sp, r7
 8101b8c:	bd80      	pop	{r7, pc}
 8101b8e:	bf00      	nop
 8101b90:	54442d18 	.word	0x54442d18
 8101b94:	400921fb 	.word	0x400921fb
 8101b98:	bf800000 	.word	0xbf800000
 8101b9c:	40668000 	.word	0x40668000

08101ba0 <getYaw>:

float getYaw(uint8_t unit){
 8101ba0:	b5b0      	push	{r4, r5, r7, lr}
 8101ba2:	b08c      	sub	sp, #48	@ 0x30
 8101ba4:	af00      	add	r7, sp, #0
 8101ba6:	4603      	mov	r3, r0
 8101ba8:	71fb      	strb	r3, [r7, #7]
	float dqx = BNO080_getQuatI();
 8101baa:	f7ff fa7f 	bl	81010ac <BNO080_getQuatI>
 8101bae:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float dqy = BNO080_getQuatJ();
 8101bb2:	f7ff fa91 	bl	81010d8 <BNO080_getQuatJ>
 8101bb6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	float dqz = BNO080_getQuatK();
 8101bba:	f7ff faa3 	bl	8101104 <BNO080_getQuatK>
 8101bbe:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqw = BNO080_getQuatReal();
 8101bc2:	f7ff fab5 	bl	8101130 <BNO080_getQuatReal>
 8101bc6:	ed87 0a07 	vstr	s0, [r7, #28]

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8101bca:	edd7 7a07 	vldr	s15, [r7, #28]
 8101bce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101bd2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8101bd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101bde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101be2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101bea:	edd7 7a08 	vldr	s15, [r7, #32]
 8101bee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101bf6:	ee17 0a90 	vmov	r0, s15
 8101bfa:	f7fe fcd1 	bl	81005a0 <__aeabi_f2d>
 8101bfe:	4602      	mov	r2, r0
 8101c00:	460b      	mov	r3, r1
 8101c02:	ec43 2b10 	vmov	d0, r2, r3
 8101c06:	f004 fabf 	bl	8106188 <sqrt>
 8101c0a:	ec53 2b10 	vmov	r2, r3, d0
 8101c0e:	4610      	mov	r0, r2
 8101c10:	4619      	mov	r1, r3
 8101c12:	f7fe ffcd 	bl	8100bb0 <__aeabi_d2f>
 8101c16:	4603      	mov	r3, r0
 8101c18:	61bb      	str	r3, [r7, #24]


	dqx = dqx / norm; //x
 8101c1a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8101c1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c26:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dqy = dqy / norm; //y
 8101c2a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8101c2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dqz = dqz / norm; //z
 8101c3a:	edd7 6a08 	vldr	s13, [r7, #32]
 8101c3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c46:	edc7 7a08 	vstr	s15, [r7, #32]
	dqw = dqw / norm; //w
 8101c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8101c4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101c56:	edc7 7a07 	vstr	s15, [r7, #28]

	float ysqr = dqy * dqy;
 8101c5a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101c5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101c62:	edc7 7a05 	vstr	s15, [r7, #20]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 8101c66:	ed97 7a07 	vldr	s14, [r7, #28]
 8101c6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8101c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101c72:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8101c76:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8101c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101c82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101c86:	edc7 7a04 	vstr	s15, [r7, #16]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8101c8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8101c8e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101c92:	edd7 7a05 	vldr	s15, [r7, #20]
 8101c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101c9a:	ee17 0a90 	vmov	r0, s15
 8101c9e:	f7fe fc7f 	bl	81005a0 <__aeabi_f2d>
 8101ca2:	4602      	mov	r2, r0
 8101ca4:	460b      	mov	r3, r1
 8101ca6:	f7fe fb1d 	bl	81002e4 <__adddf3>
 8101caa:	4602      	mov	r2, r0
 8101cac:	460b      	mov	r3, r1
 8101cae:	f04f 0000 	mov.w	r0, #0
 8101cb2:	4925      	ldr	r1, [pc, #148]	@ (8101d48 <getYaw+0x1a8>)
 8101cb4:	f7fe fb14 	bl	81002e0 <__aeabi_dsub>
 8101cb8:	4602      	mov	r2, r0
 8101cba:	460b      	mov	r3, r1
 8101cbc:	4610      	mov	r0, r2
 8101cbe:	4619      	mov	r1, r3
 8101cc0:	f7fe ff76 	bl	8100bb0 <__aeabi_d2f>
 8101cc4:	4603      	mov	r3, r0
 8101cc6:	60fb      	str	r3, [r7, #12]
	float yaw = atan2(t3, t4);
 8101cc8:	6938      	ldr	r0, [r7, #16]
 8101cca:	f7fe fc69 	bl	81005a0 <__aeabi_f2d>
 8101cce:	4604      	mov	r4, r0
 8101cd0:	460d      	mov	r5, r1
 8101cd2:	68f8      	ldr	r0, [r7, #12]
 8101cd4:	f7fe fc64 	bl	81005a0 <__aeabi_f2d>
 8101cd8:	4602      	mov	r2, r0
 8101cda:	460b      	mov	r3, r1
 8101cdc:	ec43 2b11 	vmov	d1, r2, r3
 8101ce0:	ec45 4b10 	vmov	d0, r4, r5
 8101ce4:	f004 fa4e 	bl	8106184 <atan2>
 8101ce8:	ec53 2b10 	vmov	r2, r3, d0
 8101cec:	4610      	mov	r0, r2
 8101cee:	4619      	mov	r1, r3
 8101cf0:	f7fe ff5e 	bl	8100bb0 <__aeabi_d2f>
 8101cf4:	4603      	mov	r3, r0
 8101cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if(unit == 1){
 8101cf8:	79fb      	ldrb	r3, [r7, #7]
 8101cfa:	2b01      	cmp	r3, #1
 8101cfc:	d118      	bne.n	8101d30 <getYaw+0x190>
			yaw = yaw * 180.0 / M_PI;
 8101cfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101d00:	f7fe fc4e 	bl	81005a0 <__aeabi_f2d>
 8101d04:	f04f 0200 	mov.w	r2, #0
 8101d08:	4b10      	ldr	r3, [pc, #64]	@ (8101d4c <getYaw+0x1ac>)
 8101d0a:	f7fe fca1 	bl	8100650 <__aeabi_dmul>
 8101d0e:	4602      	mov	r2, r0
 8101d10:	460b      	mov	r3, r1
 8101d12:	4610      	mov	r0, r2
 8101d14:	4619      	mov	r1, r3
 8101d16:	a30a      	add	r3, pc, #40	@ (adr r3, 8101d40 <getYaw+0x1a0>)
 8101d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d1c:	f7fe fdc2 	bl	81008a4 <__aeabi_ddiv>
 8101d20:	4602      	mov	r2, r0
 8101d22:	460b      	mov	r3, r1
 8101d24:	4610      	mov	r0, r2
 8101d26:	4619      	mov	r1, r3
 8101d28:	f7fe ff42 	bl	8100bb0 <__aeabi_d2f>
 8101d2c:	4603      	mov	r3, r0
 8101d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

	return (yaw);
 8101d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101d32:	ee07 3a90 	vmov	s15, r3
}
 8101d36:	eeb0 0a67 	vmov.f32	s0, s15
 8101d3a:	3730      	adds	r7, #48	@ 0x30
 8101d3c:	46bd      	mov	sp, r7
 8101d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8101d40:	54442d18 	.word	0x54442d18
 8101d44:	400921fb 	.word	0x400921fb
 8101d48:	3ff00000 	.word	0x3ff00000
 8101d4c:	40668000 	.word	0x40668000

08101d50 <BNO086_getData>:

void BNO086_getData(BNO086_t *bno, RPY_UNIT rpy_unit){
 8101d50:	b580      	push	{r7, lr}
 8101d52:	b082      	sub	sp, #8
 8101d54:	af00      	add	r7, sp, #0
 8101d56:	6078      	str	r0, [r7, #4]
 8101d58:	460b      	mov	r3, r1
 8101d5a:	70fb      	strb	r3, [r7, #3]
	/* rpy_unit can be only 0 and 1  which
	 * rpy_unit = 0 set the roll,pitch and yaw unit as Radian
	 * rpy_unit = 1 set the roll,pitch and yaw unit as Degree */

		bno->quaternion.i = BNO080_getQuatI();
 8101d5c:	f7ff f9a6 	bl	81010ac <BNO080_getQuatI>
 8101d60:	eef0 7a40 	vmov.f32	s15, s0
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = BNO080_getQuatJ();
 8101d6a:	f7ff f9b5 	bl	81010d8 <BNO080_getQuatJ>
 8101d6e:	eef0 7a40 	vmov.f32	s15, s0
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = BNO080_getQuatK();
 8101d78:	f7ff f9c4 	bl	8101104 <BNO080_getQuatK>
 8101d7c:	eef0 7a40 	vmov.f32	s15, s0
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = BNO080_getQuatReal();
 8101d86:	f7ff f9d3 	bl	8101130 <BNO080_getQuatReal>
 8101d8a:	eef0 7a40 	vmov.f32	s15, s0
 8101d8e:	687b      	ldr	r3, [r7, #4]
 8101d90:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->acceleration.x = BNO080_getAccelX();
 8101d94:	f7ff f9ee 	bl	8101174 <BNO080_getAccelX>
 8101d98:	eef0 7a40 	vmov.f32	s15, s0
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = BNO080_getAccelY();
 8101da2:	f7ff f9fd 	bl	81011a0 <BNO080_getAccelY>
 8101da6:	eef0 7a40 	vmov.f32	s15, s0
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = BNO080_getAccelZ();
 8101db0:	f7ff fa0c 	bl	81011cc <BNO080_getAccelZ>
 8101db4:	eef0 7a40 	vmov.f32	s15, s0
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	edc3 7a06 	vstr	s15, [r3, #24]

		bno->linear_acceleration.x = BNO080_getLinAccelX();
 8101dbe:	f7ff fa1b 	bl	81011f8 <BNO080_getLinAccelX>
 8101dc2:	eef0 7a40 	vmov.f32	s15, s0
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = BNO080_getLinAccelY();
 8101dcc:	f7ff fa2a 	bl	8101224 <BNO080_getLinAccelY>
 8101dd0:	eef0 7a40 	vmov.f32	s15, s0
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = BNO080_getLinAccelZ();
 8101dda:	f7ff fa39 	bl	8101250 <BNO080_getLinAccelZ>
 8101dde:	eef0 7a40 	vmov.f32	s15, s0
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = BNO080_getGyroX();
 8101de8:	f7ff fa48 	bl	810127c <BNO080_getGyroX>
 8101dec:	eef0 7a40 	vmov.f32	s15, s0
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = BNO080_getGyroY();
 8101df6:	f7ff fa57 	bl	81012a8 <BNO080_getGyroY>
 8101dfa:	eef0 7a40 	vmov.f32	s15, s0
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = BNO080_getGyroZ();
 8101e04:	f7ff fa66 	bl	81012d4 <BNO080_getGyroZ>
 8101e08:	eef0 7a40 	vmov.f32	s15, s0
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = BNO080_getMagX();
 8101e12:	f7ff fa75 	bl	8101300 <BNO080_getMagX>
 8101e16:	eef0 7a40 	vmov.f32	s15, s0
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = BNO080_getMagY();
 8101e20:	f7ff fa84 	bl	810132c <BNO080_getMagY>
 8101e24:	eef0 7a40 	vmov.f32	s15, s0
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = BNO080_getMagZ();
 8101e2e:	f7ff fa93 	bl	8101358 <BNO080_getMagZ>
 8101e32:	eef0 7a40 	vmov.f32	s15, s0
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->euler_angle.roll = getRoll(rpy_unit);
 8101e3c:	78fb      	ldrb	r3, [r7, #3]
 8101e3e:	4618      	mov	r0, r3
 8101e40:	f7ff fd12 	bl	8101868 <getRoll>
 8101e44:	eef0 7a40 	vmov.f32	s15, s0
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = getPitch(rpy_unit);
 8101e4e:	78fb      	ldrb	r3, [r7, #3]
 8101e50:	4618      	mov	r0, r3
 8101e52:	f7ff fde1 	bl	8101a18 <getPitch>
 8101e56:	eef0 7a40 	vmov.f32	s15, s0
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = getYaw(rpy_unit);
 8101e60:	78fb      	ldrb	r3, [r7, #3]
 8101e62:	4618      	mov	r0, r3
 8101e64:	f7ff fe9c 	bl	8101ba0 <getYaw>
 8101e68:	eef0 7a40 	vmov.f32	s15, s0
 8101e6c:	687b      	ldr	r3, [r7, #4]
 8101e6e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48



}
 8101e72:	bf00      	nop
 8101e74:	3708      	adds	r7, #8
 8101e76:	46bd      	mov	sp, r7
 8101e78:	bd80      	pop	{r7, pc}

08101e7a <SAVEIMU_HSEM>:

void SAVEIMU_HSEM(BNO086_t *bno){
 8101e7a:	b590      	push	{r4, r7, lr}
 8101e7c:	b083      	sub	sp, #12
 8101e7e:	af00      	add	r7, sp, #0
 8101e80:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 8101e82:	2000      	movs	r0, #0
 8101e84:	f001 f906 	bl	8103094 <HAL_HSEM_FastTake>
 8101e88:	4603      	mov	r3, r0
 8101e8a:	2b00      	cmp	r3, #0
 8101e8c:	f040 80d5 	bne.w	810203a <SAVEIMU_HSEM+0x1c0>
		SRAM4->Data[0] = bno->quaternion.i;
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	681b      	ldr	r3, [r3, #0]
 8101e94:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101e98:	4618      	mov	r0, r3
 8101e9a:	f7fe fb81 	bl	81005a0 <__aeabi_f2d>
 8101e9e:	4602      	mov	r2, r0
 8101ea0:	460b      	mov	r3, r1
 8101ea2:	e9c4 2302 	strd	r2, r3, [r4, #8]
		SRAM4->Data[1] = bno->quaternion.j;
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	685b      	ldr	r3, [r3, #4]
 8101eaa:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101eae:	4618      	mov	r0, r3
 8101eb0:	f7fe fb76 	bl	81005a0 <__aeabi_f2d>
 8101eb4:	4602      	mov	r2, r0
 8101eb6:	460b      	mov	r3, r1
 8101eb8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		SRAM4->Data[2] = bno->quaternion.k;
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	689b      	ldr	r3, [r3, #8]
 8101ec0:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ec4:	4618      	mov	r0, r3
 8101ec6:	f7fe fb6b 	bl	81005a0 <__aeabi_f2d>
 8101eca:	4602      	mov	r2, r0
 8101ecc:	460b      	mov	r3, r1
 8101ece:	e9c4 2306 	strd	r2, r3, [r4, #24]
		SRAM4->Data[3] = bno->quaternion.w;
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	68db      	ldr	r3, [r3, #12]
 8101ed6:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101eda:	4618      	mov	r0, r3
 8101edc:	f7fe fb60 	bl	81005a0 <__aeabi_f2d>
 8101ee0:	4602      	mov	r2, r0
 8101ee2:	460b      	mov	r3, r1
 8101ee4:	e9c4 2308 	strd	r2, r3, [r4, #32]

		SRAM4->Data[4] = bno->linear_acceleration.x;
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	69db      	ldr	r3, [r3, #28]
 8101eec:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ef0:	4618      	mov	r0, r3
 8101ef2:	f7fe fb55 	bl	81005a0 <__aeabi_f2d>
 8101ef6:	4602      	mov	r2, r0
 8101ef8:	460b      	mov	r3, r1
 8101efa:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
		SRAM4->Data[5] = bno->linear_acceleration.y;
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	6a1b      	ldr	r3, [r3, #32]
 8101f02:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f06:	4618      	mov	r0, r3
 8101f08:	f7fe fb4a 	bl	81005a0 <__aeabi_f2d>
 8101f0c:	4602      	mov	r2, r0
 8101f0e:	460b      	mov	r3, r1
 8101f10:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
		SRAM4->Data[6] = bno->linear_acceleration.z;
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101f18:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f1c:	4618      	mov	r0, r3
 8101f1e:	f7fe fb3f 	bl	81005a0 <__aeabi_f2d>
 8101f22:	4602      	mov	r2, r0
 8101f24:	460b      	mov	r3, r1
 8101f26:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38

		SRAM4->Data[7] = bno->angular_velocity.x;
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101f2e:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f32:	4618      	mov	r0, r3
 8101f34:	f7fe fb34 	bl	81005a0 <__aeabi_f2d>
 8101f38:	4602      	mov	r2, r0
 8101f3a:	460b      	mov	r3, r1
 8101f3c:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
		SRAM4->Data[8] = bno->angular_velocity.y;
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f44:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f48:	4618      	mov	r0, r3
 8101f4a:	f7fe fb29 	bl	81005a0 <__aeabi_f2d>
 8101f4e:	4602      	mov	r2, r0
 8101f50:	460b      	mov	r3, r1
 8101f52:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		SRAM4->Data[9] = bno->angular_velocity.z;
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f5a:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f5e:	4618      	mov	r0, r3
 8101f60:	f7fe fb1e 	bl	81005a0 <__aeabi_f2d>
 8101f64:	4602      	mov	r2, r0
 8101f66:	460b      	mov	r3, r1
 8101f68:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50

		SRAM4->Data[10] = bno->magnetometer.x;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101f70:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f74:	4618      	mov	r0, r3
 8101f76:	f7fe fb13 	bl	81005a0 <__aeabi_f2d>
 8101f7a:	4602      	mov	r2, r0
 8101f7c:	460b      	mov	r3, r1
 8101f7e:	e9c4 2316 	strd	r2, r3, [r4, #88]	@ 0x58
		SRAM4->Data[11] = bno->magnetometer.y;
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101f86:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101f8a:	4618      	mov	r0, r3
 8101f8c:	f7fe fb08 	bl	81005a0 <__aeabi_f2d>
 8101f90:	4602      	mov	r2, r0
 8101f92:	460b      	mov	r3, r1
 8101f94:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
		SRAM4->Data[12] = bno->magnetometer.z;
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101f9c:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fa0:	4618      	mov	r0, r3
 8101fa2:	f7fe fafd 	bl	81005a0 <__aeabi_f2d>
 8101fa6:	4602      	mov	r2, r0
 8101fa8:	460b      	mov	r3, r1
 8101faa:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68

		SRAM4->Data[13] = bno->acceleration.x;
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	691b      	ldr	r3, [r3, #16]
 8101fb2:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fb6:	4618      	mov	r0, r3
 8101fb8:	f7fe faf2 	bl	81005a0 <__aeabi_f2d>
 8101fbc:	4602      	mov	r2, r0
 8101fbe:	460b      	mov	r3, r1
 8101fc0:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
		SRAM4->Data[14] = bno->acceleration.y;
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	695b      	ldr	r3, [r3, #20]
 8101fc8:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fcc:	4618      	mov	r0, r3
 8101fce:	f7fe fae7 	bl	81005a0 <__aeabi_f2d>
 8101fd2:	4602      	mov	r2, r0
 8101fd4:	460b      	mov	r3, r1
 8101fd6:	e9c4 231e 	strd	r2, r3, [r4, #120]	@ 0x78
		SRAM4->Data[15] = bno->acceleration.z;
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	699b      	ldr	r3, [r3, #24]
 8101fde:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101fe2:	4618      	mov	r0, r3
 8101fe4:	f7fe fadc 	bl	81005a0 <__aeabi_f2d>
 8101fe8:	4602      	mov	r2, r0
 8101fea:	460b      	mov	r3, r1
 8101fec:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80

		SRAM4->Data[16] = bno->euler_angle.roll;
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101ff4:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8101ff8:	4618      	mov	r0, r3
 8101ffa:	f7fe fad1 	bl	81005a0 <__aeabi_f2d>
 8101ffe:	4602      	mov	r2, r0
 8102000:	460b      	mov	r3, r1
 8102002:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
		SRAM4->Data[17] = bno->euler_angle.pitch;
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810200a:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 810200e:	4618      	mov	r0, r3
 8102010:	f7fe fac6 	bl	81005a0 <__aeabi_f2d>
 8102014:	4602      	mov	r2, r0
 8102016:	460b      	mov	r3, r1
 8102018:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90
		SRAM4->Data[18] = bno->euler_angle.yaw;
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102020:	f04f 5460 	mov.w	r4, #939524096	@ 0x38000000
 8102024:	4618      	mov	r0, r3
 8102026:	f7fe fabb 	bl	81005a0 <__aeabi_f2d>
 810202a:	4602      	mov	r2, r0
 810202c:	460b      	mov	r3, r1
 810202e:	e9c4 2326 	strd	r2, r3, [r4, #152]	@ 0x98

		  HAL_HSEM_Release(HSEM_ID_0,0);
 8102032:	2100      	movs	r1, #0
 8102034:	2000      	movs	r0, #0
 8102036:	f001 f847 	bl	81030c8 <HAL_HSEM_Release>
		}
}
 810203a:	bf00      	nop
 810203c:	370c      	adds	r7, #12
 810203e:	46bd      	mov	sp, r7
 8102040:	bd90      	pop	{r4, r7, pc}
	...

08102044 <BNO080_Calibration>:

void BNO080_Calibration(CalibrateStatus *calib)
{
 8102044:	b580      	push	{r7, lr}
 8102046:	b084      	sub	sp, #16
 8102048:	af00      	add	r7, sp, #0
 810204a:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) {
 810204c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8102050:	486d      	ldr	r0, [pc, #436]	@ (8102208 <BNO080_Calibration+0x1c4>)
 8102052:	f000 ffed 	bl	8103030 <HAL_GPIO_ReadPin>
 8102056:	4603      	mov	r3, r0
 8102058:	2b01      	cmp	r3, #1
 810205a:	f040 80d1 	bne.w	8102200 <BNO080_Calibration+0x1bc>

		mode = 1;
 810205e:	4b6b      	ldr	r3, [pc, #428]	@ (810220c <BNO080_Calibration+0x1c8>)
 8102060:	2201      	movs	r2, #1
 8102062:	801a      	strh	r2, [r3, #0]
		// Resets BNO086 to disable all output
		BNO080_Initialization(&BNO086);
 8102064:	486a      	ldr	r0, [pc, #424]	@ (8102210 <BNO080_Calibration+0x1cc>)
 8102066:	f7fe fdf3 	bl	8100c50 <BNO080_Initialization>

		// Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
		// Enable Game Rotation Vector output
		// Enable Rotation Vector output
		// Enable Magnetic Field output
		BNO080_calibrateAll(); // Turn on calibration for Accel, Gyro, and Mag
 810206a:	f7ff fa18 	bl	810149e <BNO080_calibrateAll>
		BNO080_enableGameRotationVector(20000); // Send data update every 20ms (50Hz)
 810206e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8102072:	f7ff f9c9 	bl	8101408 <BNO080_enableGameRotationVector>
		BNO080_enableRotationVector(2500);
 8102076:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 810207a:	f7ff f9b6 	bl	81013ea <BNO080_enableRotationVector>
		BNO080_enableAccelerometer(2000);
 810207e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8102082:	f7ff f9d0 	bl	8101426 <BNO080_enableAccelerometer>
		BNO080_enableMagnetometer(20000); // Send data update every 20ms (50Hz)
 8102086:	f644 6020 	movw	r0, #20000	@ 0x4e20
 810208a:	f7ff f9f9 	bl	8101480 <BNO080_enableMagnetometer>

		while (mode == 1 || mode == 2)
 810208e:	e083      	b.n	8102198 <BNO080_Calibration+0x154>
		{
			if (BNO080_dataAvailable() == 1)
 8102090:	f7fe fe52 	bl	8100d38 <BNO080_dataAvailable>
 8102094:	4603      	mov	r3, r0
 8102096:	2b01      	cmp	r3, #1
 8102098:	d17b      	bne.n	8102192 <BNO080_Calibration+0x14e>
			{

				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 810209a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 810209e:	485a      	ldr	r0, [pc, #360]	@ (8102208 <BNO080_Calibration+0x1c4>)
 81020a0:	f000 ffc6 	bl	8103030 <HAL_GPIO_ReadPin>
 81020a4:	4603      	mov	r3, r0
 81020a6:	2b00      	cmp	r3, #0
 81020a8:	d102      	bne.n	81020b0 <BNO080_Calibration+0x6c>
					mode = 2;
 81020aa:	4b58      	ldr	r3, [pc, #352]	@ (810220c <BNO080_Calibration+0x1c8>)
 81020ac:	2202      	movs	r2, #2
 81020ae:	801a      	strh	r2, [r3, #0]
				}
				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET && mode == 2){
 81020b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 81020b4:	4854      	ldr	r0, [pc, #336]	@ (8102208 <BNO080_Calibration+0x1c4>)
 81020b6:	f000 ffbb 	bl	8103030 <HAL_GPIO_ReadPin>
 81020ba:	4603      	mov	r3, r0
 81020bc:	2b01      	cmp	r3, #1
 81020be:	d107      	bne.n	81020d0 <BNO080_Calibration+0x8c>
 81020c0:	4b52      	ldr	r3, [pc, #328]	@ (810220c <BNO080_Calibration+0x1c8>)
 81020c2:	881b      	ldrh	r3, [r3, #0]
 81020c4:	2b02      	cmp	r3, #2
 81020c6:	d103      	bne.n	81020d0 <BNO080_Calibration+0x8c>
					mode = 3;
 81020c8:	4b50      	ldr	r3, [pc, #320]	@ (810220c <BNO080_Calibration+0x1c8>)
 81020ca:	2203      	movs	r2, #3
 81020cc:	801a      	strh	r2, [r3, #0]
					break;
 81020ce:	e06d      	b.n	81021ac <BNO080_Calibration+0x168>
				}
				BNO086_getData(&BNO086, UNIT_DEG);
 81020d0:	2101      	movs	r1, #1
 81020d2:	484f      	ldr	r0, [pc, #316]	@ (8102210 <BNO080_Calibration+0x1cc>)
 81020d4:	f7ff fe3c 	bl	8101d50 <BNO086_getData>
				// Observing the status bit of the magnetic field output
				accuracy = BNO080_getMagAccuracy();
 81020d8:	f7ff f954 	bl	8101384 <BNO080_getMagAccuracy>
 81020dc:	4603      	mov	r3, r0
 81020de:	461a      	mov	r2, r3
 81020e0:	4b4c      	ldr	r3, [pc, #304]	@ (8102214 <BNO080_Calibration+0x1d0>)
 81020e2:	701a      	strb	r2, [r3, #0]

				sensorAccuracy = BNO080_getQuatAccuracy();
 81020e4:	f7ff f83a 	bl	810115c <BNO080_getQuatAccuracy>
 81020e8:	4603      	mov	r3, r0
 81020ea:	461a      	mov	r2, r3
 81020ec:	4b4a      	ldr	r3, [pc, #296]	@ (8102218 <BNO080_Calibration+0x1d4>)
 81020ee:	701a      	strb	r2, [r3, #0]

				if (accuracy == 0) calib->accuracy_status = UNRELIABLE;
 81020f0:	4b48      	ldr	r3, [pc, #288]	@ (8102214 <BNO080_Calibration+0x1d0>)
 81020f2:	781b      	ldrb	r3, [r3, #0]
 81020f4:	2b00      	cmp	r3, #0
 81020f6:	d103      	bne.n	8102100 <BNO080_Calibration+0xbc>
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	2201      	movs	r2, #1
 81020fc:	701a      	strb	r2, [r3, #0]
 81020fe:	e016      	b.n	810212e <BNO080_Calibration+0xea>
				else if (accuracy == 1) calib->accuracy_status = LOW;
 8102100:	4b44      	ldr	r3, [pc, #272]	@ (8102214 <BNO080_Calibration+0x1d0>)
 8102102:	781b      	ldrb	r3, [r3, #0]
 8102104:	2b01      	cmp	r3, #1
 8102106:	d103      	bne.n	8102110 <BNO080_Calibration+0xcc>
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	2202      	movs	r2, #2
 810210c:	701a      	strb	r2, [r3, #0]
 810210e:	e00e      	b.n	810212e <BNO080_Calibration+0xea>
				else if (accuracy == 2) calib->accuracy_status = MEDIUM;
 8102110:	4b40      	ldr	r3, [pc, #256]	@ (8102214 <BNO080_Calibration+0x1d0>)
 8102112:	781b      	ldrb	r3, [r3, #0]
 8102114:	2b02      	cmp	r3, #2
 8102116:	d103      	bne.n	8102120 <BNO080_Calibration+0xdc>
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	2203      	movs	r2, #3
 810211c:	701a      	strb	r2, [r3, #0]
 810211e:	e006      	b.n	810212e <BNO080_Calibration+0xea>
				else if (accuracy == 3) calib->accuracy_status = HIGH;
 8102120:	4b3c      	ldr	r3, [pc, #240]	@ (8102214 <BNO080_Calibration+0x1d0>)
 8102122:	781b      	ldrb	r3, [r3, #0]
 8102124:	2b03      	cmp	r3, #3
 8102126:	d102      	bne.n	810212e <BNO080_Calibration+0xea>
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	2204      	movs	r2, #4
 810212c:	701a      	strb	r2, [r3, #0]

				if (sensorAccuracy == 0) calib->sensorAccuracy_status = UNRELIABLE;
 810212e:	4b3a      	ldr	r3, [pc, #232]	@ (8102218 <BNO080_Calibration+0x1d4>)
 8102130:	781b      	ldrb	r3, [r3, #0]
 8102132:	2b00      	cmp	r3, #0
 8102134:	d103      	bne.n	810213e <BNO080_Calibration+0xfa>
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	2201      	movs	r2, #1
 810213a:	705a      	strb	r2, [r3, #1]
 810213c:	e016      	b.n	810216c <BNO080_Calibration+0x128>
				else if (sensorAccuracy == 1) calib->sensorAccuracy_status = LOW;
 810213e:	4b36      	ldr	r3, [pc, #216]	@ (8102218 <BNO080_Calibration+0x1d4>)
 8102140:	781b      	ldrb	r3, [r3, #0]
 8102142:	2b01      	cmp	r3, #1
 8102144:	d103      	bne.n	810214e <BNO080_Calibration+0x10a>
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	2202      	movs	r2, #2
 810214a:	705a      	strb	r2, [r3, #1]
 810214c:	e00e      	b.n	810216c <BNO080_Calibration+0x128>
				else if (sensorAccuracy == 2) calib->sensorAccuracy_status = MEDIUM;
 810214e:	4b32      	ldr	r3, [pc, #200]	@ (8102218 <BNO080_Calibration+0x1d4>)
 8102150:	781b      	ldrb	r3, [r3, #0]
 8102152:	2b02      	cmp	r3, #2
 8102154:	d103      	bne.n	810215e <BNO080_Calibration+0x11a>
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	2203      	movs	r2, #3
 810215a:	705a      	strb	r2, [r3, #1]
 810215c:	e006      	b.n	810216c <BNO080_Calibration+0x128>
				else if (sensorAccuracy == 3) calib->sensorAccuracy_status = HIGH;
 810215e:	4b2e      	ldr	r3, [pc, #184]	@ (8102218 <BNO080_Calibration+0x1d4>)
 8102160:	781b      	ldrb	r3, [r3, #0]
 8102162:	2b03      	cmp	r3, #3
 8102164:	d102      	bne.n	810216c <BNO080_Calibration+0x128>
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	2204      	movs	r2, #4
 810216a:	705a      	strb	r2, [r3, #1]

				// Turn the LED and buzzer on when both accuracy and sensorAccuracy are high
				if (accuracy == 3 && sensorAccuracy == 3)
 810216c:	4b29      	ldr	r3, [pc, #164]	@ (8102214 <BNO080_Calibration+0x1d0>)
 810216e:	781b      	ldrb	r3, [r3, #0]
 8102170:	2b03      	cmp	r3, #3
 8102172:	d109      	bne.n	8102188 <BNO080_Calibration+0x144>
 8102174:	4b28      	ldr	r3, [pc, #160]	@ (8102218 <BNO080_Calibration+0x1d4>)
 8102176:	781b      	ldrb	r3, [r3, #0]
 8102178:	2b03      	cmp	r3, #3
 810217a:	d105      	bne.n	8102188 <BNO080_Calibration+0x144>
				{
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 810217c:	2201      	movs	r2, #1
 810217e:	2101      	movs	r1, #1
 8102180:	4826      	ldr	r0, [pc, #152]	@ (810221c <BNO080_Calibration+0x1d8>)
 8102182:	f000 ff6d 	bl	8103060 <HAL_GPIO_WritePin>
 8102186:	e004      	b.n	8102192 <BNO080_Calibration+0x14e>
				}
				else
				{
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102188:	2200      	movs	r2, #0
 810218a:	2101      	movs	r1, #1
 810218c:	4823      	ldr	r0, [pc, #140]	@ (810221c <BNO080_Calibration+0x1d8>)
 810218e:	f000 ff67 	bl	8103060 <HAL_GPIO_WritePin>
				}
			}

			HAL_Delay(100);
 8102192:	2064      	movs	r0, #100	@ 0x64
 8102194:	f000 fc54 	bl	8102a40 <HAL_Delay>
		while (mode == 1 || mode == 2)
 8102198:	4b1c      	ldr	r3, [pc, #112]	@ (810220c <BNO080_Calibration+0x1c8>)
 810219a:	881b      	ldrh	r3, [r3, #0]
 810219c:	2b01      	cmp	r3, #1
 810219e:	f43f af77 	beq.w	8102090 <BNO080_Calibration+0x4c>
 81021a2:	4b1a      	ldr	r3, [pc, #104]	@ (810220c <BNO080_Calibration+0x1c8>)
 81021a4:	881b      	ldrh	r3, [r3, #0]
 81021a6:	2b02      	cmp	r3, #2
 81021a8:	f43f af72 	beq.w	8102090 <BNO080_Calibration+0x4c>
		}

		// End the loop when B1 pin is push to low, turn LED
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81021ac:	2200      	movs	r2, #0
 81021ae:	2101      	movs	r1, #1
 81021b0:	481a      	ldr	r0, [pc, #104]	@ (810221c <BNO080_Calibration+0x1d8>)
 81021b2:	f000 ff55 	bl	8103060 <HAL_GPIO_WritePin>

		// Save current dynamic calibration data (DCD) to memory
		BNO080_saveCalibration();
 81021b6:	f7ff fa5f 	bl	8101678 <BNO080_saveCalibration>
		BNO080_requestCalibrationStatus();
 81021ba:	f7ff fa41 	bl	8101640 <BNO080_requestCalibrationStatus>

		// Wait for calibration response, timeout if no response
		int counter = 100;
 81021be:	2364      	movs	r3, #100	@ 0x64
 81021c0:	60fb      	str	r3, [r7, #12]
		while (1)
		{
			if (--counter == 0) break;
 81021c2:	68fb      	ldr	r3, [r7, #12]
 81021c4:	3b01      	subs	r3, #1
 81021c6:	60fb      	str	r3, [r7, #12]
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	2b00      	cmp	r3, #0
 81021cc:	d011      	beq.n	81021f2 <BNO080_Calibration+0x1ae>
			if (BNO080_dataAvailable())
 81021ce:	f7fe fdb3 	bl	8100d38 <BNO080_dataAvailable>
 81021d2:	4603      	mov	r3, r0
 81021d4:	2b00      	cmp	r3, #0
 81021d6:	d008      	beq.n	81021ea <BNO080_Calibration+0x1a6>
			{
				// Wait for ME Calibration Response Status byte to go to zero
				if (BNO080_calibrationComplete() == 1)
 81021d8:	f7ff f968 	bl	81014ac <BNO080_calibrationComplete>
 81021dc:	4603      	mov	r3, r0
 81021de:	2b01      	cmp	r3, #1
 81021e0:	d103      	bne.n	81021ea <BNO080_Calibration+0x1a6>
				{
					calib->CalibrationData = STORED_SUCCESSFULLY;
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	2201      	movs	r2, #1
 81021e6:	709a      	strb	r2, [r3, #2]
					break;
 81021e8:	e004      	b.n	81021f4 <BNO080_Calibration+0x1b0>
				}
			}
			HAL_Delay(10);
 81021ea:	200a      	movs	r0, #10
 81021ec:	f000 fc28 	bl	8102a40 <HAL_Delay>
			if (--counter == 0) break;
 81021f0:	e7e7      	b.n	81021c2 <BNO080_Calibration+0x17e>
 81021f2:	bf00      	nop
		}

		if (counter == 0)
 81021f4:	68fb      	ldr	r3, [r7, #12]
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d102      	bne.n	8102200 <BNO080_Calibration+0x1bc>
		{
			calib->CalibrationData = STORED_FAILED;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	2202      	movs	r2, #2
 81021fe:	709a      	strb	r2, [r3, #2]
		}
	}
}
 8102200:	bf00      	nop
 8102202:	3710      	adds	r7, #16
 8102204:	46bd      	mov	sp, r7
 8102206:	bd80      	pop	{r7, pc}
 8102208:	58020800 	.word	0x58020800
 810220c:	10000166 	.word	0x10000166
 8102210:	1000016c 	.word	0x1000016c
 8102214:	10000168 	.word	0x10000168
 8102218:	10000169 	.word	0x10000169
 810221c:	58020400 	.word	0x58020400

08102220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8102220:	b480      	push	{r7}
 8102222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8102224:	4b09      	ldr	r3, [pc, #36]	@ (810224c <SystemInit+0x2c>)
 8102226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810222a:	4a08      	ldr	r2, [pc, #32]	@ (810224c <SystemInit+0x2c>)
 810222c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8102230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8102234:	4b05      	ldr	r3, [pc, #20]	@ (810224c <SystemInit+0x2c>)
 8102236:	691b      	ldr	r3, [r3, #16]
 8102238:	4a04      	ldr	r2, [pc, #16]	@ (810224c <SystemInit+0x2c>)
 810223a:	f043 0310 	orr.w	r3, r3, #16
 810223e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8102240:	bf00      	nop
 8102242:	46bd      	mov	sp, r7
 8102244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102248:	4770      	bx	lr
 810224a:	bf00      	nop
 810224c:	e000ed00 	.word	0xe000ed00

08102250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8102250:	b480      	push	{r7}
 8102252:	b083      	sub	sp, #12
 8102254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8102256:	4b0a      	ldr	r3, [pc, #40]	@ (8102280 <MX_DMA_Init+0x30>)
 8102258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810225c:	4a08      	ldr	r2, [pc, #32]	@ (8102280 <MX_DMA_Init+0x30>)
 810225e:	f043 0301 	orr.w	r3, r3, #1
 8102262:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102266:	4b06      	ldr	r3, [pc, #24]	@ (8102280 <MX_DMA_Init+0x30>)
 8102268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810226c:	f003 0301 	and.w	r3, r3, #1
 8102270:	607b      	str	r3, [r7, #4]
 8102272:	687b      	ldr	r3, [r7, #4]

}
 8102274:	bf00      	nop
 8102276:	370c      	adds	r7, #12
 8102278:	46bd      	mov	sp, r7
 810227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227e:	4770      	bx	lr
 8102280:	58024400 	.word	0x58024400

08102284 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8102284:	b580      	push	{r7, lr}
 8102286:	b08a      	sub	sp, #40	@ 0x28
 8102288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810228a:	f107 0314 	add.w	r3, r7, #20
 810228e:	2200      	movs	r2, #0
 8102290:	601a      	str	r2, [r3, #0]
 8102292:	605a      	str	r2, [r3, #4]
 8102294:	609a      	str	r2, [r3, #8]
 8102296:	60da      	str	r2, [r3, #12]
 8102298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810229a:	4b4f      	ldr	r3, [pc, #316]	@ (81023d8 <MX_GPIO_Init+0x154>)
 810229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022a0:	4a4d      	ldr	r2, [pc, #308]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022a2:	f043 0304 	orr.w	r3, r3, #4
 81022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022aa:	4b4b      	ldr	r3, [pc, #300]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022b0:	f003 0304 	and.w	r3, r3, #4
 81022b4:	613b      	str	r3, [r7, #16]
 81022b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81022b8:	4b47      	ldr	r3, [pc, #284]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022be:	4a46      	ldr	r2, [pc, #280]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022c0:	f043 0301 	orr.w	r3, r3, #1
 81022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022c8:	4b43      	ldr	r3, [pc, #268]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ce:	f003 0301 	and.w	r3, r3, #1
 81022d2:	60fb      	str	r3, [r7, #12]
 81022d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81022d6:	4b40      	ldr	r3, [pc, #256]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022dc:	4a3e      	ldr	r2, [pc, #248]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022de:	f043 0302 	orr.w	r3, r3, #2
 81022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022e6:	4b3c      	ldr	r3, [pc, #240]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ec:	f003 0302 	and.w	r3, r3, #2
 81022f0:	60bb      	str	r3, [r7, #8]
 81022f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81022f4:	4b38      	ldr	r3, [pc, #224]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022fa:	4a37      	ldr	r2, [pc, #220]	@ (81023d8 <MX_GPIO_Init+0x154>)
 81022fc:	f043 0308 	orr.w	r3, r3, #8
 8102300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102304:	4b34      	ldr	r3, [pc, #208]	@ (81023d8 <MX_GPIO_Init+0x154>)
 8102306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810230a:	f003 0308 	and.w	r3, r3, #8
 810230e:	607b      	str	r3, [r7, #4]
 8102310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102312:	4b31      	ldr	r3, [pc, #196]	@ (81023d8 <MX_GPIO_Init+0x154>)
 8102314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102318:	4a2f      	ldr	r2, [pc, #188]	@ (81023d8 <MX_GPIO_Init+0x154>)
 810231a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810231e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102322:	4b2d      	ldr	r3, [pc, #180]	@ (81023d8 <MX_GPIO_Init+0x154>)
 8102324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810232c:	603b      	str	r3, [r7, #0]
 810232e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|CS_Pin, GPIO_PIN_RESET);
 8102330:	2200      	movs	r2, #0
 8102332:	2121      	movs	r1, #33	@ 0x21
 8102334:	4829      	ldr	r0, [pc, #164]	@ (81023dc <MX_GPIO_Init+0x158>)
 8102336:	f000 fe93 	bl	8103060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WAK_Pin|RST_Pin, GPIO_PIN_RESET);
 810233a:	2200      	movs	r2, #0
 810233c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8102340:	4827      	ldr	r0, [pc, #156]	@ (81023e0 <MX_GPIO_Init+0x15c>)
 8102342:	f000 fe8d 	bl	8103060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8102346:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810234c:	2300      	movs	r3, #0
 810234e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102350:	2300      	movs	r3, #0
 8102352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8102354:	f107 0314 	add.w	r3, r7, #20
 8102358:	4619      	mov	r1, r3
 810235a:	4822      	ldr	r0, [pc, #136]	@ (81023e4 <MX_GPIO_Init+0x160>)
 810235c:	f000 fcb8 	bl	8102cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8102360:	2301      	movs	r3, #1
 8102362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102364:	2301      	movs	r3, #1
 8102366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102368:	2300      	movs	r3, #0
 810236a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810236c:	2300      	movs	r3, #0
 810236e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8102370:	f107 0314 	add.w	r3, r7, #20
 8102374:	4619      	mov	r1, r3
 8102376:	4819      	ldr	r0, [pc, #100]	@ (81023dc <MX_GPIO_Init+0x158>)
 8102378:	f000 fcaa 	bl	8102cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = WAK_Pin|RST_Pin;
 810237c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8102380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102382:	2301      	movs	r3, #1
 8102384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102386:	2300      	movs	r3, #0
 8102388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810238a:	2303      	movs	r3, #3
 810238c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810238e:	f107 0314 	add.w	r3, r7, #20
 8102392:	4619      	mov	r1, r3
 8102394:	4812      	ldr	r0, [pc, #72]	@ (81023e0 <MX_GPIO_Init+0x15c>)
 8102396:	f000 fc9b 	bl	8102cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 810239a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81023a0:	2300      	movs	r3, #0
 81023a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023a4:	2300      	movs	r3, #0
 81023a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 81023a8:	f107 0314 	add.w	r3, r7, #20
 81023ac:	4619      	mov	r1, r3
 81023ae:	480e      	ldr	r0, [pc, #56]	@ (81023e8 <MX_GPIO_Init+0x164>)
 81023b0:	f000 fc8e 	bl	8102cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 81023b4:	2320      	movs	r3, #32
 81023b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81023b8:	2301      	movs	r3, #1
 81023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023bc:	2300      	movs	r3, #0
 81023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023c0:	2303      	movs	r3, #3
 81023c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 81023c4:	f107 0314 	add.w	r3, r7, #20
 81023c8:	4619      	mov	r1, r3
 81023ca:	4804      	ldr	r0, [pc, #16]	@ (81023dc <MX_GPIO_Init+0x158>)
 81023cc:	f000 fc80 	bl	8102cd0 <HAL_GPIO_Init>

}
 81023d0:	bf00      	nop
 81023d2:	3728      	adds	r7, #40	@ 0x28
 81023d4:	46bd      	mov	sp, r7
 81023d6:	bd80      	pop	{r7, pc}
 81023d8:	58024400 	.word	0x58024400
 81023dc:	58020400 	.word	0x58020400
 81023e0:	58020c00 	.word	0x58020c00
 81023e4:	58020800 	.word	0x58020800
 81023e8:	58021800 	.word	0x58021800

081023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81023ec:	b580      	push	{r7, lr}
 81023ee:	b082      	sub	sp, #8
 81023f0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81023f2:	4b2d      	ldr	r3, [pc, #180]	@ (81024a8 <main+0xbc>)
 81023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023f8:	4a2b      	ldr	r2, [pc, #172]	@ (81024a8 <main+0xbc>)
 81023fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102402:	4b29      	ldr	r3, [pc, #164]	@ (81024a8 <main+0xbc>)
 8102404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810240c:	607b      	str	r3, [r7, #4]
 810240e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102410:	2001      	movs	r0, #1
 8102412:	f000 fe6d 	bl	81030f0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8102416:	f000 ff2f 	bl	8103278 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810241a:	2201      	movs	r2, #1
 810241c:	2102      	movs	r1, #2
 810241e:	2000      	movs	r0, #0
 8102420:	f000 feb0 	bl	8103184 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102424:	4b21      	ldr	r3, [pc, #132]	@ (81024ac <main+0xc0>)
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	091b      	lsrs	r3, r3, #4
 810242a:	f003 030f 	and.w	r3, r3, #15
 810242e:	2b07      	cmp	r3, #7
 8102430:	d108      	bne.n	8102444 <main+0x58>
 8102432:	4b1f      	ldr	r3, [pc, #124]	@ (81024b0 <main+0xc4>)
 8102434:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8102438:	4a1d      	ldr	r2, [pc, #116]	@ (81024b0 <main+0xc4>)
 810243a:	f043 0301 	orr.w	r3, r3, #1
 810243e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102442:	e007      	b.n	8102454 <main+0x68>
 8102444:	4b1a      	ldr	r3, [pc, #104]	@ (81024b0 <main+0xc4>)
 8102446:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810244a:	4a19      	ldr	r2, [pc, #100]	@ (81024b0 <main+0xc4>)
 810244c:	f043 0301 	orr.w	r3, r3, #1
 8102450:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102454:	f000 fa40 	bl	81028d8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8102458:	f7ff fefa 	bl	8102250 <MX_DMA_Init>
  MX_GPIO_Init();
 810245c:	f7ff ff12 	bl	8102284 <MX_GPIO_Init>
  MX_SPI1_Init();
 8102460:	f000 f854 	bl	810250c <MX_SPI1_Init>
  MX_TIM2_Init();
 8102464:	f000 f99a 	bl	810279c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	  BNO080_Calibration(&CALIBRATE);
 8102468:	4812      	ldr	r0, [pc, #72]	@ (81024b4 <main+0xc8>)
 810246a:	f7ff fdeb 	bl	8102044 <BNO080_Calibration>

	  BNO080_Initialization(&BNO086);
 810246e:	4812      	ldr	r0, [pc, #72]	@ (81024b8 <main+0xcc>)
 8102470:	f7fe fbee 	bl	8100c50 <BNO080_Initialization>
	  BNO080_enableRotationVector(2500); //enable rotation vector at 400Hz (2500 microsecs)
 8102474:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8102478:	f7fe ffb7 	bl	81013ea <BNO080_enableRotationVector>
//	  BNO080_enableGameRotationVector(11111); //enable Gaming Rotation vector at 90Hz (2500 microsecs)

	  BNO080_enableAccelerometer(2000); //enable Accelerometer at 400Hz (2500 microsecs)
 810247c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8102480:	f7fe ffd1 	bl	8101426 <BNO080_enableAccelerometer>
	  BNO080_enableLinearAccelerometer(2500); //enable Linear Accelerometer at 400Hz (2500 microsecs)
 8102484:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8102488:	f7fe ffdc 	bl	8101444 <BNO080_enableLinearAccelerometer>
	  BNO080_enableGyro(2500); //enable Gyrometer  at 400Hz (2500 microsecs)
 810248c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8102490:	f7fe ffe7 	bl	8101462 <BNO080_enableGyro>
	  BNO080_enableMagnetometer(10000); //enable Magnetometer at 100Hz (10000 microsecs)
 8102494:	f242 7010 	movw	r0, #10000	@ 0x2710
 8102498:	f7fe fff2 	bl	8101480 <BNO080_enableMagnetometer>

	  HAL_TIM_Base_Start_IT(&htim2);
 810249c:	4807      	ldr	r0, [pc, #28]	@ (81024bc <main+0xd0>)
 810249e:	f003 f97d 	bl	810579c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81024a2:	bf00      	nop
 81024a4:	e7fd      	b.n	81024a2 <main+0xb6>
 81024a6:	bf00      	nop
 81024a8:	58024400 	.word	0x58024400
 81024ac:	e000ed00 	.word	0xe000ed00
 81024b0:	58026400 	.word	0x58026400
 81024b4:	100001b8 	.word	0x100001b8
 81024b8:	1000016c 	.word	0x1000016c
 81024bc:	10000244 	.word	0x10000244

081024c0 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81024c0:	b580      	push	{r7, lr}
 81024c2:	b082      	sub	sp, #8
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	6078      	str	r0, [r7, #4]
	 // =============================== Timer Interrupt ================================== //

	if(htim == &htim2){
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	4a0b      	ldr	r2, [pc, #44]	@ (81024f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 81024cc:	4293      	cmp	r3, r2
 81024ce:	d10e      	bne.n	81024ee <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_HSEM_DeactivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81024d0:	2001      	movs	r0, #1
 81024d2:	f000 fe1f 	bl	8103114 <HAL_HSEM_DeactivateNotification>

		if(BNO080_dataAvailable() == 1){
 81024d6:	f7fe fc2f 	bl	8100d38 <BNO080_dataAvailable>
 81024da:	4603      	mov	r3, r0
 81024dc:	2b01      	cmp	r3, #1
 81024de:	d106      	bne.n	81024ee <HAL_TIM_PeriodElapsedCallback+0x2e>
			BNO086_getData(&BNO086, UNIT_DEG);
 81024e0:	2101      	movs	r1, #1
 81024e2:	4806      	ldr	r0, [pc, #24]	@ (81024fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 81024e4:	f7ff fc34 	bl	8101d50 <BNO086_getData>
			SAVEIMU_HSEM(&BNO086);
 81024e8:	4804      	ldr	r0, [pc, #16]	@ (81024fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 81024ea:	f7ff fcc6 	bl	8101e7a <SAVEIMU_HSEM>
		}
	}

	// =============================================================================== //
}
 81024ee:	bf00      	nop
 81024f0:	3708      	adds	r7, #8
 81024f2:	46bd      	mov	sp, r7
 81024f4:	bd80      	pop	{r7, pc}
 81024f6:	bf00      	nop
 81024f8:	10000244 	.word	0x10000244
 81024fc:	1000016c 	.word	0x1000016c

08102500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102500:	b480      	push	{r7}
 8102502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102504:	b672      	cpsid	i
}
 8102506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102508:	bf00      	nop
 810250a:	e7fd      	b.n	8102508 <Error_Handler+0x8>

0810250c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 810250c:	b580      	push	{r7, lr}
 810250e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102510:	4b29      	ldr	r3, [pc, #164]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102512:	4a2a      	ldr	r2, [pc, #168]	@ (81025bc <MX_SPI1_Init+0xb0>)
 8102514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102516:	4b28      	ldr	r3, [pc, #160]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102518:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810251c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 810251e:	4b26      	ldr	r3, [pc, #152]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102520:	2200      	movs	r2, #0
 8102522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102524:	4b24      	ldr	r3, [pc, #144]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102526:	2207      	movs	r2, #7
 8102528:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 810252a:	4b23      	ldr	r3, [pc, #140]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810252c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8102530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8102532:	4b21      	ldr	r3, [pc, #132]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8102538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810253a:	4b1f      	ldr	r3, [pc, #124]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810253c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8102540:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8102542:	4b1d      	ldr	r3, [pc, #116]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810254a:	4b1b      	ldr	r3, [pc, #108]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810254c:	2200      	movs	r2, #0
 810254e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102550:	4b19      	ldr	r3, [pc, #100]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102552:	2200      	movs	r2, #0
 8102554:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102556:	4b18      	ldr	r3, [pc, #96]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102558:	2200      	movs	r2, #0
 810255a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810255c:	4b16      	ldr	r3, [pc, #88]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810255e:	2200      	movs	r2, #0
 8102560:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102562:	4b15      	ldr	r3, [pc, #84]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102564:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102568:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810256a:	4b13      	ldr	r3, [pc, #76]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810256c:	2200      	movs	r2, #0
 810256e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102570:	4b11      	ldr	r3, [pc, #68]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102572:	2200      	movs	r2, #0
 8102574:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102576:	4b10      	ldr	r3, [pc, #64]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102578:	2200      	movs	r2, #0
 810257a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810257c:	4b0e      	ldr	r3, [pc, #56]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810257e:	2200      	movs	r2, #0
 8102580:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102582:	4b0d      	ldr	r3, [pc, #52]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102584:	2200      	movs	r2, #0
 8102586:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102588:	4b0b      	ldr	r3, [pc, #44]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810258a:	2200      	movs	r2, #0
 810258c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810258e:	4b0a      	ldr	r3, [pc, #40]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102590:	2200      	movs	r2, #0
 8102592:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8102594:	4b08      	ldr	r3, [pc, #32]	@ (81025b8 <MX_SPI1_Init+0xac>)
 8102596:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810259a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810259c:	4b06      	ldr	r3, [pc, #24]	@ (81025b8 <MX_SPI1_Init+0xac>)
 810259e:	2200      	movs	r2, #0
 81025a0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81025a2:	4805      	ldr	r0, [pc, #20]	@ (81025b8 <MX_SPI1_Init+0xac>)
 81025a4:	f002 fb5e 	bl	8104c64 <HAL_SPI_Init>
 81025a8:	4603      	mov	r3, r0
 81025aa:	2b00      	cmp	r3, #0
 81025ac:	d001      	beq.n	81025b2 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 81025ae:	f7ff ffa7 	bl	8102500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81025b2:	bf00      	nop
 81025b4:	bd80      	pop	{r7, pc}
 81025b6:	bf00      	nop
 81025b8:	100001bc 	.word	0x100001bc
 81025bc:	40013000 	.word	0x40013000

081025c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81025c0:	b580      	push	{r7, lr}
 81025c2:	b0bc      	sub	sp, #240	@ 0xf0
 81025c4:	af00      	add	r7, sp, #0
 81025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81025c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81025cc:	2200      	movs	r2, #0
 81025ce:	601a      	str	r2, [r3, #0]
 81025d0:	605a      	str	r2, [r3, #4]
 81025d2:	609a      	str	r2, [r3, #8]
 81025d4:	60da      	str	r2, [r3, #12]
 81025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81025d8:	f107 0318 	add.w	r3, r7, #24
 81025dc:	22c0      	movs	r2, #192	@ 0xc0
 81025de:	2100      	movs	r1, #0
 81025e0:	4618      	mov	r0, r3
 81025e2:	f003 fd69 	bl	81060b8 <memset>
  if(spiHandle->Instance==SPI1)
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	4a38      	ldr	r2, [pc, #224]	@ (81026cc <HAL_SPI_MspInit+0x10c>)
 81025ec:	4293      	cmp	r3, r2
 81025ee:	d168      	bne.n	81026c2 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81025f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 81025f4:	f04f 0300 	mov.w	r3, #0
 81025f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81025fc:	2300      	movs	r3, #0
 81025fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102600:	f107 0318 	add.w	r3, r7, #24
 8102604:	4618      	mov	r0, r3
 8102606:	f000 ffbf 	bl	8103588 <HAL_RCCEx_PeriphCLKConfig>
 810260a:	4603      	mov	r3, r0
 810260c:	2b00      	cmp	r3, #0
 810260e:	d001      	beq.n	8102614 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8102610:	f7ff ff76 	bl	8102500 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102614:	4b2e      	ldr	r3, [pc, #184]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810261a:	4a2d      	ldr	r2, [pc, #180]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 810261c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8102620:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102624:	4b2a      	ldr	r3, [pc, #168]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810262a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810262e:	617b      	str	r3, [r7, #20]
 8102630:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102632:	4b27      	ldr	r3, [pc, #156]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102638:	4a25      	ldr	r2, [pc, #148]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 810263a:	f043 0301 	orr.w	r3, r3, #1
 810263e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102642:	4b23      	ldr	r3, [pc, #140]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102648:	f003 0301 	and.w	r3, r3, #1
 810264c:	613b      	str	r3, [r7, #16]
 810264e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102650:	4b1f      	ldr	r3, [pc, #124]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102656:	4a1e      	ldr	r2, [pc, #120]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102658:	f043 0308 	orr.w	r3, r3, #8
 810265c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102660:	4b1b      	ldr	r3, [pc, #108]	@ (81026d0 <HAL_SPI_MspInit+0x110>)
 8102662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102666:	f003 0308 	and.w	r3, r3, #8
 810266a:	60fb      	str	r3, [r7, #12]
 810266c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 810266e:	2360      	movs	r3, #96	@ 0x60
 8102670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102674:	2302      	movs	r3, #2
 8102676:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810267a:	2300      	movs	r3, #0
 810267c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102680:	2303      	movs	r3, #3
 8102682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102686:	2305      	movs	r3, #5
 8102688:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810268c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102690:	4619      	mov	r1, r3
 8102692:	4810      	ldr	r0, [pc, #64]	@ (81026d4 <HAL_SPI_MspInit+0x114>)
 8102694:	f000 fb1c 	bl	8102cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8102698:	2380      	movs	r3, #128	@ 0x80
 810269a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810269e:	2302      	movs	r3, #2
 81026a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026a4:	2300      	movs	r3, #0
 81026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81026aa:	2303      	movs	r3, #3
 81026ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81026b0:	2305      	movs	r3, #5
 81026b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81026b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81026ba:	4619      	mov	r1, r3
 81026bc:	4806      	ldr	r0, [pc, #24]	@ (81026d8 <HAL_SPI_MspInit+0x118>)
 81026be:	f000 fb07 	bl	8102cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81026c2:	bf00      	nop
 81026c4:	37f0      	adds	r7, #240	@ 0xf0
 81026c6:	46bd      	mov	sp, r7
 81026c8:	bd80      	pop	{r7, pc}
 81026ca:	bf00      	nop
 81026cc:	40013000 	.word	0x40013000
 81026d0:	58024400 	.word	0x58024400
 81026d4:	58020000 	.word	0x58020000
 81026d8:	58020c00 	.word	0x58020c00

081026dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81026dc:	b580      	push	{r7, lr}
 81026de:	b082      	sub	sp, #8
 81026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8102718 <HAL_MspInit+0x3c>)
 81026e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81026e8:	4a0b      	ldr	r2, [pc, #44]	@ (8102718 <HAL_MspInit+0x3c>)
 81026ea:	f043 0302 	orr.w	r3, r3, #2
 81026ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81026f2:	4b09      	ldr	r3, [pc, #36]	@ (8102718 <HAL_MspInit+0x3c>)
 81026f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81026f8:	f003 0302 	and.w	r3, r3, #2
 81026fc:	607b      	str	r3, [r7, #4]
 81026fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8102700:	2200      	movs	r2, #0
 8102702:	2100      	movs	r1, #0
 8102704:	207e      	movs	r0, #126	@ 0x7e
 8102706:	f000 fa9a 	bl	8102c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810270a:	207e      	movs	r0, #126	@ 0x7e
 810270c:	f000 fab1 	bl	8102c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102710:	bf00      	nop
 8102712:	3708      	adds	r7, #8
 8102714:	46bd      	mov	sp, r7
 8102716:	bd80      	pop	{r7, pc}
 8102718:	58024400 	.word	0x58024400

0810271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810271c:	b480      	push	{r7}
 810271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102720:	bf00      	nop
 8102722:	e7fd      	b.n	8102720 <NMI_Handler+0x4>

08102724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102724:	b480      	push	{r7}
 8102726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102728:	bf00      	nop
 810272a:	e7fd      	b.n	8102728 <HardFault_Handler+0x4>

0810272c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810272c:	b480      	push	{r7}
 810272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102730:	bf00      	nop
 8102732:	e7fd      	b.n	8102730 <MemManage_Handler+0x4>

08102734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102734:	b480      	push	{r7}
 8102736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102738:	bf00      	nop
 810273a:	e7fd      	b.n	8102738 <BusFault_Handler+0x4>

0810273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810273c:	b480      	push	{r7}
 810273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102740:	bf00      	nop
 8102742:	e7fd      	b.n	8102740 <UsageFault_Handler+0x4>

08102744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102744:	b480      	push	{r7}
 8102746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102748:	bf00      	nop
 810274a:	46bd      	mov	sp, r7
 810274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102750:	4770      	bx	lr

08102752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102752:	b480      	push	{r7}
 8102754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102756:	bf00      	nop
 8102758:	46bd      	mov	sp, r7
 810275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275e:	4770      	bx	lr

08102760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102760:	b480      	push	{r7}
 8102762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102764:	bf00      	nop
 8102766:	46bd      	mov	sp, r7
 8102768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810276c:	4770      	bx	lr

0810276e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810276e:	b580      	push	{r7, lr}
 8102770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102772:	f000 f945 	bl	8102a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102776:	bf00      	nop
 8102778:	bd80      	pop	{r7, pc}
	...

0810277c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 810277c:	b580      	push	{r7, lr}
 810277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102780:	4802      	ldr	r0, [pc, #8]	@ (810278c <TIM2_IRQHandler+0x10>)
 8102782:	f003 f883 	bl	810588c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102786:	bf00      	nop
 8102788:	bd80      	pop	{r7, pc}
 810278a:	bf00      	nop
 810278c:	10000244 	.word	0x10000244

08102790 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102790:	b580      	push	{r7, lr}
 8102792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102794:	f000 fcd2 	bl	810313c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8102798:	bf00      	nop
 810279a:	bd80      	pop	{r7, pc}

0810279c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 810279c:	b580      	push	{r7, lr}
 810279e:	b088      	sub	sp, #32
 81027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81027a2:	f107 0310 	add.w	r3, r7, #16
 81027a6:	2200      	movs	r2, #0
 81027a8:	601a      	str	r2, [r3, #0]
 81027aa:	605a      	str	r2, [r3, #4]
 81027ac:	609a      	str	r2, [r3, #8]
 81027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81027b0:	1d3b      	adds	r3, r7, #4
 81027b2:	2200      	movs	r2, #0
 81027b4:	601a      	str	r2, [r3, #0]
 81027b6:	605a      	str	r2, [r3, #4]
 81027b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81027c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 81027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027c4:	22a9      	movs	r2, #169	@ 0xa9
 81027c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027ca:	2200      	movs	r2, #0
 81027cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 81027ce:	4b19      	ldr	r3, [pc, #100]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 81027d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81027d6:	4b17      	ldr	r3, [pc, #92]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027d8:	2200      	movs	r2, #0
 81027da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81027dc:	4b15      	ldr	r3, [pc, #84]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027de:	2200      	movs	r2, #0
 81027e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81027e2:	4814      	ldr	r0, [pc, #80]	@ (8102834 <MX_TIM2_Init+0x98>)
 81027e4:	f002 ff83 	bl	81056ee <HAL_TIM_Base_Init>
 81027e8:	4603      	mov	r3, r0
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	d001      	beq.n	81027f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 81027ee:	f7ff fe87 	bl	8102500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81027f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81027f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81027f8:	f107 0310 	add.w	r3, r7, #16
 81027fc:	4619      	mov	r1, r3
 81027fe:	480d      	ldr	r0, [pc, #52]	@ (8102834 <MX_TIM2_Init+0x98>)
 8102800:	f003 f94c 	bl	8105a9c <HAL_TIM_ConfigClockSource>
 8102804:	4603      	mov	r3, r0
 8102806:	2b00      	cmp	r3, #0
 8102808:	d001      	beq.n	810280e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 810280a:	f7ff fe79 	bl	8102500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 810280e:	2320      	movs	r3, #32
 8102810:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102812:	2300      	movs	r3, #0
 8102814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8102816:	1d3b      	adds	r3, r7, #4
 8102818:	4619      	mov	r1, r3
 810281a:	4806      	ldr	r0, [pc, #24]	@ (8102834 <MX_TIM2_Init+0x98>)
 810281c:	f003 fba0 	bl	8105f60 <HAL_TIMEx_MasterConfigSynchronization>
 8102820:	4603      	mov	r3, r0
 8102822:	2b00      	cmp	r3, #0
 8102824:	d001      	beq.n	810282a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8102826:	f7ff fe6b 	bl	8102500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 810282a:	bf00      	nop
 810282c:	3720      	adds	r7, #32
 810282e:	46bd      	mov	sp, r7
 8102830:	bd80      	pop	{r7, pc}
 8102832:	bf00      	nop
 8102834:	10000244 	.word	0x10000244

08102838 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102838:	b580      	push	{r7, lr}
 810283a:	b084      	sub	sp, #16
 810283c:	af00      	add	r7, sp, #0
 810283e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	681b      	ldr	r3, [r3, #0]
 8102844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102848:	d116      	bne.n	8102878 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 810284a:	4b0d      	ldr	r3, [pc, #52]	@ (8102880 <HAL_TIM_Base_MspInit+0x48>)
 810284c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102850:	4a0b      	ldr	r2, [pc, #44]	@ (8102880 <HAL_TIM_Base_MspInit+0x48>)
 8102852:	f043 0301 	orr.w	r3, r3, #1
 8102856:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810285a:	4b09      	ldr	r3, [pc, #36]	@ (8102880 <HAL_TIM_Base_MspInit+0x48>)
 810285c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102860:	f003 0301 	and.w	r3, r3, #1
 8102864:	60fb      	str	r3, [r7, #12]
 8102866:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102868:	2200      	movs	r2, #0
 810286a:	2100      	movs	r1, #0
 810286c:	201c      	movs	r0, #28
 810286e:	f000 f9e6 	bl	8102c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102872:	201c      	movs	r0, #28
 8102874:	f000 f9fd 	bl	8102c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8102878:	bf00      	nop
 810287a:	3710      	adds	r7, #16
 810287c:	46bd      	mov	sp, r7
 810287e:	bd80      	pop	{r7, pc}
 8102880:	58024400 	.word	0x58024400

08102884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81028bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102888:	f7ff fcca 	bl	8102220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810288c:	480c      	ldr	r0, [pc, #48]	@ (81028c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810288e:	490d      	ldr	r1, [pc, #52]	@ (81028c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102890:	4a0d      	ldr	r2, [pc, #52]	@ (81028c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102894:	e002      	b.n	810289c <LoopCopyDataInit>

08102896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810289a:	3304      	adds	r3, #4

0810289c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810289c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810289e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81028a0:	d3f9      	bcc.n	8102896 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81028a2:	4a0a      	ldr	r2, [pc, #40]	@ (81028cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81028a4:	4c0a      	ldr	r4, [pc, #40]	@ (81028d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81028a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81028a8:	e001      	b.n	81028ae <LoopFillZerobss>

081028aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81028aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81028ac:	3204      	adds	r2, #4

081028ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81028ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81028b0:	d3fb      	bcc.n	81028aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81028b2:	f003 fc0f 	bl	81060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81028b6:	f7ff fd99 	bl	81023ec <main>
  bx  lr
 81028ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81028bc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81028c0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81028c4:	10000080 	.word	0x10000080
  ldr r2, =_sidata
 81028c8:	081074d0 	.word	0x081074d0
  ldr r2, =_sbss
 81028cc:	10000080 	.word	0x10000080
  ldr r4, =_ebss
 81028d0:	100003cc 	.word	0x100003cc

081028d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81028d4:	e7fe      	b.n	81028d4 <ADC3_IRQHandler>
	...

081028d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b082      	sub	sp, #8
 81028dc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81028de:	4b28      	ldr	r3, [pc, #160]	@ (8102980 <HAL_Init+0xa8>)
 81028e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81028e4:	4a26      	ldr	r2, [pc, #152]	@ (8102980 <HAL_Init+0xa8>)
 81028e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81028ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81028ee:	4b24      	ldr	r3, [pc, #144]	@ (8102980 <HAL_Init+0xa8>)
 81028f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81028f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81028f8:	603b      	str	r3, [r7, #0]
 81028fa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81028fc:	4b21      	ldr	r3, [pc, #132]	@ (8102984 <HAL_Init+0xac>)
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102904:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102908:	4a1e      	ldr	r2, [pc, #120]	@ (8102984 <HAL_Init+0xac>)
 810290a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810290e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102910:	4b1c      	ldr	r3, [pc, #112]	@ (8102984 <HAL_Init+0xac>)
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	4a1b      	ldr	r2, [pc, #108]	@ (8102984 <HAL_Init+0xac>)
 8102916:	f043 0301 	orr.w	r3, r3, #1
 810291a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810291c:	2003      	movs	r0, #3
 810291e:	f000 f983 	bl	8102c28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102922:	f000 fcb7 	bl	8103294 <HAL_RCC_GetSysClockFreq>
 8102926:	4602      	mov	r2, r0
 8102928:	4b15      	ldr	r3, [pc, #84]	@ (8102980 <HAL_Init+0xa8>)
 810292a:	699b      	ldr	r3, [r3, #24]
 810292c:	0a1b      	lsrs	r3, r3, #8
 810292e:	f003 030f 	and.w	r3, r3, #15
 8102932:	4915      	ldr	r1, [pc, #84]	@ (8102988 <HAL_Init+0xb0>)
 8102934:	5ccb      	ldrb	r3, [r1, r3]
 8102936:	f003 031f 	and.w	r3, r3, #31
 810293a:	fa22 f303 	lsr.w	r3, r2, r3
 810293e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102940:	4b0f      	ldr	r3, [pc, #60]	@ (8102980 <HAL_Init+0xa8>)
 8102942:	699b      	ldr	r3, [r3, #24]
 8102944:	f003 030f 	and.w	r3, r3, #15
 8102948:	4a0f      	ldr	r2, [pc, #60]	@ (8102988 <HAL_Init+0xb0>)
 810294a:	5cd3      	ldrb	r3, [r2, r3]
 810294c:	f003 031f 	and.w	r3, r3, #31
 8102950:	687a      	ldr	r2, [r7, #4]
 8102952:	fa22 f303 	lsr.w	r3, r2, r3
 8102956:	4a0d      	ldr	r2, [pc, #52]	@ (810298c <HAL_Init+0xb4>)
 8102958:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810295a:	4b0c      	ldr	r3, [pc, #48]	@ (810298c <HAL_Init+0xb4>)
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	4a0c      	ldr	r2, [pc, #48]	@ (8102990 <HAL_Init+0xb8>)
 8102960:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102962:	2000      	movs	r0, #0
 8102964:	f000 f816 	bl	8102994 <HAL_InitTick>
 8102968:	4603      	mov	r3, r0
 810296a:	2b00      	cmp	r3, #0
 810296c:	d001      	beq.n	8102972 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810296e:	2301      	movs	r3, #1
 8102970:	e002      	b.n	8102978 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102972:	f7ff feb3 	bl	81026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102976:	2300      	movs	r3, #0
}
 8102978:	4618      	mov	r0, r3
 810297a:	3708      	adds	r7, #8
 810297c:	46bd      	mov	sp, r7
 810297e:	bd80      	pop	{r7, pc}
 8102980:	58024400 	.word	0x58024400
 8102984:	40024400 	.word	0x40024400
 8102988:	08107428 	.word	0x08107428
 810298c:	10000010 	.word	0x10000010
 8102990:	1000000c 	.word	0x1000000c

08102994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102994:	b580      	push	{r7, lr}
 8102996:	b082      	sub	sp, #8
 8102998:	af00      	add	r7, sp, #0
 810299a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810299c:	4b15      	ldr	r3, [pc, #84]	@ (81029f4 <HAL_InitTick+0x60>)
 810299e:	781b      	ldrb	r3, [r3, #0]
 81029a0:	2b00      	cmp	r3, #0
 81029a2:	d101      	bne.n	81029a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81029a4:	2301      	movs	r3, #1
 81029a6:	e021      	b.n	81029ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81029a8:	4b13      	ldr	r3, [pc, #76]	@ (81029f8 <HAL_InitTick+0x64>)
 81029aa:	681a      	ldr	r2, [r3, #0]
 81029ac:	4b11      	ldr	r3, [pc, #68]	@ (81029f4 <HAL_InitTick+0x60>)
 81029ae:	781b      	ldrb	r3, [r3, #0]
 81029b0:	4619      	mov	r1, r3
 81029b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 81029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 81029be:	4618      	mov	r0, r3
 81029c0:	f000 f965 	bl	8102c8e <HAL_SYSTICK_Config>
 81029c4:	4603      	mov	r3, r0
 81029c6:	2b00      	cmp	r3, #0
 81029c8:	d001      	beq.n	81029ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81029ca:	2301      	movs	r3, #1
 81029cc:	e00e      	b.n	81029ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	2b0f      	cmp	r3, #15
 81029d2:	d80a      	bhi.n	81029ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81029d4:	2200      	movs	r2, #0
 81029d6:	6879      	ldr	r1, [r7, #4]
 81029d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81029dc:	f000 f92f 	bl	8102c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81029e0:	4a06      	ldr	r2, [pc, #24]	@ (81029fc <HAL_InitTick+0x68>)
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81029e6:	2300      	movs	r3, #0
 81029e8:	e000      	b.n	81029ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 81029ea:	2301      	movs	r3, #1
}
 81029ec:	4618      	mov	r0, r3
 81029ee:	3708      	adds	r7, #8
 81029f0:	46bd      	mov	sp, r7
 81029f2:	bd80      	pop	{r7, pc}
 81029f4:	10000018 	.word	0x10000018
 81029f8:	1000000c 	.word	0x1000000c
 81029fc:	10000014 	.word	0x10000014

08102a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102a00:	b480      	push	{r7}
 8102a02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102a04:	4b06      	ldr	r3, [pc, #24]	@ (8102a20 <HAL_IncTick+0x20>)
 8102a06:	781b      	ldrb	r3, [r3, #0]
 8102a08:	461a      	mov	r2, r3
 8102a0a:	4b06      	ldr	r3, [pc, #24]	@ (8102a24 <HAL_IncTick+0x24>)
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	4413      	add	r3, r2
 8102a10:	4a04      	ldr	r2, [pc, #16]	@ (8102a24 <HAL_IncTick+0x24>)
 8102a12:	6013      	str	r3, [r2, #0]
}
 8102a14:	bf00      	nop
 8102a16:	46bd      	mov	sp, r7
 8102a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a1c:	4770      	bx	lr
 8102a1e:	bf00      	nop
 8102a20:	10000018 	.word	0x10000018
 8102a24:	10000290 	.word	0x10000290

08102a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102a28:	b480      	push	{r7}
 8102a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8102a2c:	4b03      	ldr	r3, [pc, #12]	@ (8102a3c <HAL_GetTick+0x14>)
 8102a2e:	681b      	ldr	r3, [r3, #0]
}
 8102a30:	4618      	mov	r0, r3
 8102a32:	46bd      	mov	sp, r7
 8102a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a38:	4770      	bx	lr
 8102a3a:	bf00      	nop
 8102a3c:	10000290 	.word	0x10000290

08102a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102a40:	b580      	push	{r7, lr}
 8102a42:	b084      	sub	sp, #16
 8102a44:	af00      	add	r7, sp, #0
 8102a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102a48:	f7ff ffee 	bl	8102a28 <HAL_GetTick>
 8102a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102a52:	68fb      	ldr	r3, [r7, #12]
 8102a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102a58:	d005      	beq.n	8102a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8102a84 <HAL_Delay+0x44>)
 8102a5c:	781b      	ldrb	r3, [r3, #0]
 8102a5e:	461a      	mov	r2, r3
 8102a60:	68fb      	ldr	r3, [r7, #12]
 8102a62:	4413      	add	r3, r2
 8102a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102a66:	bf00      	nop
 8102a68:	f7ff ffde 	bl	8102a28 <HAL_GetTick>
 8102a6c:	4602      	mov	r2, r0
 8102a6e:	68bb      	ldr	r3, [r7, #8]
 8102a70:	1ad3      	subs	r3, r2, r3
 8102a72:	68fa      	ldr	r2, [r7, #12]
 8102a74:	429a      	cmp	r2, r3
 8102a76:	d8f7      	bhi.n	8102a68 <HAL_Delay+0x28>
  {
  }
}
 8102a78:	bf00      	nop
 8102a7a:	bf00      	nop
 8102a7c:	3710      	adds	r7, #16
 8102a7e:	46bd      	mov	sp, r7
 8102a80:	bd80      	pop	{r7, pc}
 8102a82:	bf00      	nop
 8102a84:	10000018 	.word	0x10000018

08102a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102a88:	b480      	push	{r7}
 8102a8a:	b085      	sub	sp, #20
 8102a8c:	af00      	add	r7, sp, #0
 8102a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	f003 0307 	and.w	r3, r3, #7
 8102a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102a98:	4b0c      	ldr	r3, [pc, #48]	@ (8102acc <__NVIC_SetPriorityGrouping+0x44>)
 8102a9a:	68db      	ldr	r3, [r3, #12]
 8102a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102a9e:	68ba      	ldr	r2, [r7, #8]
 8102aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102aa4:	4013      	ands	r3, r2
 8102aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102aa8:	68fb      	ldr	r3, [r7, #12]
 8102aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102aac:	68bb      	ldr	r3, [r7, #8]
 8102aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102aba:	4a04      	ldr	r2, [pc, #16]	@ (8102acc <__NVIC_SetPriorityGrouping+0x44>)
 8102abc:	68bb      	ldr	r3, [r7, #8]
 8102abe:	60d3      	str	r3, [r2, #12]
}
 8102ac0:	bf00      	nop
 8102ac2:	3714      	adds	r7, #20
 8102ac4:	46bd      	mov	sp, r7
 8102ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aca:	4770      	bx	lr
 8102acc:	e000ed00 	.word	0xe000ed00

08102ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102ad0:	b480      	push	{r7}
 8102ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102ad4:	4b04      	ldr	r3, [pc, #16]	@ (8102ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8102ad6:	68db      	ldr	r3, [r3, #12]
 8102ad8:	0a1b      	lsrs	r3, r3, #8
 8102ada:	f003 0307 	and.w	r3, r3, #7
}
 8102ade:	4618      	mov	r0, r3
 8102ae0:	46bd      	mov	sp, r7
 8102ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ae6:	4770      	bx	lr
 8102ae8:	e000ed00 	.word	0xe000ed00

08102aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102aec:	b480      	push	{r7}
 8102aee:	b083      	sub	sp, #12
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	4603      	mov	r3, r0
 8102af4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102afa:	2b00      	cmp	r3, #0
 8102afc:	db0b      	blt.n	8102b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102afe:	88fb      	ldrh	r3, [r7, #6]
 8102b00:	f003 021f 	and.w	r2, r3, #31
 8102b04:	4907      	ldr	r1, [pc, #28]	@ (8102b24 <__NVIC_EnableIRQ+0x38>)
 8102b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102b0a:	095b      	lsrs	r3, r3, #5
 8102b0c:	2001      	movs	r0, #1
 8102b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8102b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102b16:	bf00      	nop
 8102b18:	370c      	adds	r7, #12
 8102b1a:	46bd      	mov	sp, r7
 8102b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b20:	4770      	bx	lr
 8102b22:	bf00      	nop
 8102b24:	e000e100 	.word	0xe000e100

08102b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102b28:	b480      	push	{r7}
 8102b2a:	b083      	sub	sp, #12
 8102b2c:	af00      	add	r7, sp, #0
 8102b2e:	4603      	mov	r3, r0
 8102b30:	6039      	str	r1, [r7, #0]
 8102b32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102b38:	2b00      	cmp	r3, #0
 8102b3a:	db0a      	blt.n	8102b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102b3c:	683b      	ldr	r3, [r7, #0]
 8102b3e:	b2da      	uxtb	r2, r3
 8102b40:	490c      	ldr	r1, [pc, #48]	@ (8102b74 <__NVIC_SetPriority+0x4c>)
 8102b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102b46:	0112      	lsls	r2, r2, #4
 8102b48:	b2d2      	uxtb	r2, r2
 8102b4a:	440b      	add	r3, r1
 8102b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102b50:	e00a      	b.n	8102b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102b52:	683b      	ldr	r3, [r7, #0]
 8102b54:	b2da      	uxtb	r2, r3
 8102b56:	4908      	ldr	r1, [pc, #32]	@ (8102b78 <__NVIC_SetPriority+0x50>)
 8102b58:	88fb      	ldrh	r3, [r7, #6]
 8102b5a:	f003 030f 	and.w	r3, r3, #15
 8102b5e:	3b04      	subs	r3, #4
 8102b60:	0112      	lsls	r2, r2, #4
 8102b62:	b2d2      	uxtb	r2, r2
 8102b64:	440b      	add	r3, r1
 8102b66:	761a      	strb	r2, [r3, #24]
}
 8102b68:	bf00      	nop
 8102b6a:	370c      	adds	r7, #12
 8102b6c:	46bd      	mov	sp, r7
 8102b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b72:	4770      	bx	lr
 8102b74:	e000e100 	.word	0xe000e100
 8102b78:	e000ed00 	.word	0xe000ed00

08102b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102b7c:	b480      	push	{r7}
 8102b7e:	b089      	sub	sp, #36	@ 0x24
 8102b80:	af00      	add	r7, sp, #0
 8102b82:	60f8      	str	r0, [r7, #12]
 8102b84:	60b9      	str	r1, [r7, #8]
 8102b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	f003 0307 	and.w	r3, r3, #7
 8102b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102b90:	69fb      	ldr	r3, [r7, #28]
 8102b92:	f1c3 0307 	rsb	r3, r3, #7
 8102b96:	2b04      	cmp	r3, #4
 8102b98:	bf28      	it	cs
 8102b9a:	2304      	movcs	r3, #4
 8102b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102b9e:	69fb      	ldr	r3, [r7, #28]
 8102ba0:	3304      	adds	r3, #4
 8102ba2:	2b06      	cmp	r3, #6
 8102ba4:	d902      	bls.n	8102bac <NVIC_EncodePriority+0x30>
 8102ba6:	69fb      	ldr	r3, [r7, #28]
 8102ba8:	3b03      	subs	r3, #3
 8102baa:	e000      	b.n	8102bae <NVIC_EncodePriority+0x32>
 8102bac:	2300      	movs	r3, #0
 8102bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8102bb4:	69bb      	ldr	r3, [r7, #24]
 8102bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8102bba:	43da      	mvns	r2, r3
 8102bbc:	68bb      	ldr	r3, [r7, #8]
 8102bbe:	401a      	ands	r2, r3
 8102bc0:	697b      	ldr	r3, [r7, #20]
 8102bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102bc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8102bc8:	697b      	ldr	r3, [r7, #20]
 8102bca:	fa01 f303 	lsl.w	r3, r1, r3
 8102bce:	43d9      	mvns	r1, r3
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102bd4:	4313      	orrs	r3, r2
         );
}
 8102bd6:	4618      	mov	r0, r3
 8102bd8:	3724      	adds	r7, #36	@ 0x24
 8102bda:	46bd      	mov	sp, r7
 8102bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be0:	4770      	bx	lr
	...

08102be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102be4:	b580      	push	{r7, lr}
 8102be6:	b082      	sub	sp, #8
 8102be8:	af00      	add	r7, sp, #0
 8102bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	3b01      	subs	r3, #1
 8102bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102bf4:	d301      	bcc.n	8102bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102bf6:	2301      	movs	r3, #1
 8102bf8:	e00f      	b.n	8102c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8102c24 <SysTick_Config+0x40>)
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	3b01      	subs	r3, #1
 8102c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102c02:	210f      	movs	r1, #15
 8102c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8102c08:	f7ff ff8e 	bl	8102b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102c0c:	4b05      	ldr	r3, [pc, #20]	@ (8102c24 <SysTick_Config+0x40>)
 8102c0e:	2200      	movs	r2, #0
 8102c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102c12:	4b04      	ldr	r3, [pc, #16]	@ (8102c24 <SysTick_Config+0x40>)
 8102c14:	2207      	movs	r2, #7
 8102c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102c18:	2300      	movs	r3, #0
}
 8102c1a:	4618      	mov	r0, r3
 8102c1c:	3708      	adds	r7, #8
 8102c1e:	46bd      	mov	sp, r7
 8102c20:	bd80      	pop	{r7, pc}
 8102c22:	bf00      	nop
 8102c24:	e000e010 	.word	0xe000e010

08102c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102c28:	b580      	push	{r7, lr}
 8102c2a:	b082      	sub	sp, #8
 8102c2c:	af00      	add	r7, sp, #0
 8102c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102c30:	6878      	ldr	r0, [r7, #4]
 8102c32:	f7ff ff29 	bl	8102a88 <__NVIC_SetPriorityGrouping>
}
 8102c36:	bf00      	nop
 8102c38:	3708      	adds	r7, #8
 8102c3a:	46bd      	mov	sp, r7
 8102c3c:	bd80      	pop	{r7, pc}

08102c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102c3e:	b580      	push	{r7, lr}
 8102c40:	b086      	sub	sp, #24
 8102c42:	af00      	add	r7, sp, #0
 8102c44:	4603      	mov	r3, r0
 8102c46:	60b9      	str	r1, [r7, #8]
 8102c48:	607a      	str	r2, [r7, #4]
 8102c4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102c4c:	f7ff ff40 	bl	8102ad0 <__NVIC_GetPriorityGrouping>
 8102c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102c52:	687a      	ldr	r2, [r7, #4]
 8102c54:	68b9      	ldr	r1, [r7, #8]
 8102c56:	6978      	ldr	r0, [r7, #20]
 8102c58:	f7ff ff90 	bl	8102b7c <NVIC_EncodePriority>
 8102c5c:	4602      	mov	r2, r0
 8102c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102c62:	4611      	mov	r1, r2
 8102c64:	4618      	mov	r0, r3
 8102c66:	f7ff ff5f 	bl	8102b28 <__NVIC_SetPriority>
}
 8102c6a:	bf00      	nop
 8102c6c:	3718      	adds	r7, #24
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	bd80      	pop	{r7, pc}

08102c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102c72:	b580      	push	{r7, lr}
 8102c74:	b082      	sub	sp, #8
 8102c76:	af00      	add	r7, sp, #0
 8102c78:	4603      	mov	r3, r0
 8102c7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c80:	4618      	mov	r0, r3
 8102c82:	f7ff ff33 	bl	8102aec <__NVIC_EnableIRQ>
}
 8102c86:	bf00      	nop
 8102c88:	3708      	adds	r7, #8
 8102c8a:	46bd      	mov	sp, r7
 8102c8c:	bd80      	pop	{r7, pc}

08102c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102c8e:	b580      	push	{r7, lr}
 8102c90:	b082      	sub	sp, #8
 8102c92:	af00      	add	r7, sp, #0
 8102c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102c96:	6878      	ldr	r0, [r7, #4]
 8102c98:	f7ff ffa4 	bl	8102be4 <SysTick_Config>
 8102c9c:	4603      	mov	r3, r0
}
 8102c9e:	4618      	mov	r0, r3
 8102ca0:	3708      	adds	r7, #8
 8102ca2:	46bd      	mov	sp, r7
 8102ca4:	bd80      	pop	{r7, pc}
	...

08102ca8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102ca8:	b480      	push	{r7}
 8102caa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102cac:	4b07      	ldr	r3, [pc, #28]	@ (8102ccc <HAL_GetCurrentCPUID+0x24>)
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	091b      	lsrs	r3, r3, #4
 8102cb2:	f003 030f 	and.w	r3, r3, #15
 8102cb6:	2b07      	cmp	r3, #7
 8102cb8:	d101      	bne.n	8102cbe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102cba:	2303      	movs	r3, #3
 8102cbc:	e000      	b.n	8102cc0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102cbe:	2301      	movs	r3, #1
  }
}
 8102cc0:	4618      	mov	r0, r3
 8102cc2:	46bd      	mov	sp, r7
 8102cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cc8:	4770      	bx	lr
 8102cca:	bf00      	nop
 8102ccc:	e000ed00 	.word	0xe000ed00

08102cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102cd0:	b480      	push	{r7}
 8102cd2:	b089      	sub	sp, #36	@ 0x24
 8102cd4:	af00      	add	r7, sp, #0
 8102cd6:	6078      	str	r0, [r7, #4]
 8102cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102cda:	2300      	movs	r3, #0
 8102cdc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102cde:	4b89      	ldr	r3, [pc, #548]	@ (8102f04 <HAL_GPIO_Init+0x234>)
 8102ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102ce2:	e194      	b.n	810300e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102ce4:	683b      	ldr	r3, [r7, #0]
 8102ce6:	681a      	ldr	r2, [r3, #0]
 8102ce8:	2101      	movs	r1, #1
 8102cea:	69fb      	ldr	r3, [r7, #28]
 8102cec:	fa01 f303 	lsl.w	r3, r1, r3
 8102cf0:	4013      	ands	r3, r2
 8102cf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102cf4:	693b      	ldr	r3, [r7, #16]
 8102cf6:	2b00      	cmp	r3, #0
 8102cf8:	f000 8186 	beq.w	8103008 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102cfc:	683b      	ldr	r3, [r7, #0]
 8102cfe:	685b      	ldr	r3, [r3, #4]
 8102d00:	f003 0303 	and.w	r3, r3, #3
 8102d04:	2b01      	cmp	r3, #1
 8102d06:	d005      	beq.n	8102d14 <HAL_GPIO_Init+0x44>
 8102d08:	683b      	ldr	r3, [r7, #0]
 8102d0a:	685b      	ldr	r3, [r3, #4]
 8102d0c:	f003 0303 	and.w	r3, r3, #3
 8102d10:	2b02      	cmp	r3, #2
 8102d12:	d130      	bne.n	8102d76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	689b      	ldr	r3, [r3, #8]
 8102d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102d1a:	69fb      	ldr	r3, [r7, #28]
 8102d1c:	005b      	lsls	r3, r3, #1
 8102d1e:	2203      	movs	r2, #3
 8102d20:	fa02 f303 	lsl.w	r3, r2, r3
 8102d24:	43db      	mvns	r3, r3
 8102d26:	69ba      	ldr	r2, [r7, #24]
 8102d28:	4013      	ands	r3, r2
 8102d2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102d2c:	683b      	ldr	r3, [r7, #0]
 8102d2e:	68da      	ldr	r2, [r3, #12]
 8102d30:	69fb      	ldr	r3, [r7, #28]
 8102d32:	005b      	lsls	r3, r3, #1
 8102d34:	fa02 f303 	lsl.w	r3, r2, r3
 8102d38:	69ba      	ldr	r2, [r7, #24]
 8102d3a:	4313      	orrs	r3, r2
 8102d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	69ba      	ldr	r2, [r7, #24]
 8102d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	685b      	ldr	r3, [r3, #4]
 8102d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102d4a:	2201      	movs	r2, #1
 8102d4c:	69fb      	ldr	r3, [r7, #28]
 8102d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d52:	43db      	mvns	r3, r3
 8102d54:	69ba      	ldr	r2, [r7, #24]
 8102d56:	4013      	ands	r3, r2
 8102d58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102d5a:	683b      	ldr	r3, [r7, #0]
 8102d5c:	685b      	ldr	r3, [r3, #4]
 8102d5e:	091b      	lsrs	r3, r3, #4
 8102d60:	f003 0201 	and.w	r2, r3, #1
 8102d64:	69fb      	ldr	r3, [r7, #28]
 8102d66:	fa02 f303 	lsl.w	r3, r2, r3
 8102d6a:	69ba      	ldr	r2, [r7, #24]
 8102d6c:	4313      	orrs	r3, r2
 8102d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	69ba      	ldr	r2, [r7, #24]
 8102d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102d76:	683b      	ldr	r3, [r7, #0]
 8102d78:	685b      	ldr	r3, [r3, #4]
 8102d7a:	f003 0303 	and.w	r3, r3, #3
 8102d7e:	2b03      	cmp	r3, #3
 8102d80:	d017      	beq.n	8102db2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	68db      	ldr	r3, [r3, #12]
 8102d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102d88:	69fb      	ldr	r3, [r7, #28]
 8102d8a:	005b      	lsls	r3, r3, #1
 8102d8c:	2203      	movs	r2, #3
 8102d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d92:	43db      	mvns	r3, r3
 8102d94:	69ba      	ldr	r2, [r7, #24]
 8102d96:	4013      	ands	r3, r2
 8102d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102d9a:	683b      	ldr	r3, [r7, #0]
 8102d9c:	689a      	ldr	r2, [r3, #8]
 8102d9e:	69fb      	ldr	r3, [r7, #28]
 8102da0:	005b      	lsls	r3, r3, #1
 8102da2:	fa02 f303 	lsl.w	r3, r2, r3
 8102da6:	69ba      	ldr	r2, [r7, #24]
 8102da8:	4313      	orrs	r3, r2
 8102daa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	69ba      	ldr	r2, [r7, #24]
 8102db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102db2:	683b      	ldr	r3, [r7, #0]
 8102db4:	685b      	ldr	r3, [r3, #4]
 8102db6:	f003 0303 	and.w	r3, r3, #3
 8102dba:	2b02      	cmp	r3, #2
 8102dbc:	d123      	bne.n	8102e06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102dbe:	69fb      	ldr	r3, [r7, #28]
 8102dc0:	08da      	lsrs	r2, r3, #3
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	3208      	adds	r2, #8
 8102dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102dcc:	69fb      	ldr	r3, [r7, #28]
 8102dce:	f003 0307 	and.w	r3, r3, #7
 8102dd2:	009b      	lsls	r3, r3, #2
 8102dd4:	220f      	movs	r2, #15
 8102dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8102dda:	43db      	mvns	r3, r3
 8102ddc:	69ba      	ldr	r2, [r7, #24]
 8102dde:	4013      	ands	r3, r2
 8102de0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102de2:	683b      	ldr	r3, [r7, #0]
 8102de4:	691a      	ldr	r2, [r3, #16]
 8102de6:	69fb      	ldr	r3, [r7, #28]
 8102de8:	f003 0307 	and.w	r3, r3, #7
 8102dec:	009b      	lsls	r3, r3, #2
 8102dee:	fa02 f303 	lsl.w	r3, r2, r3
 8102df2:	69ba      	ldr	r2, [r7, #24]
 8102df4:	4313      	orrs	r3, r2
 8102df6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102df8:	69fb      	ldr	r3, [r7, #28]
 8102dfa:	08da      	lsrs	r2, r3, #3
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	3208      	adds	r2, #8
 8102e00:	69b9      	ldr	r1, [r7, #24]
 8102e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102e0c:	69fb      	ldr	r3, [r7, #28]
 8102e0e:	005b      	lsls	r3, r3, #1
 8102e10:	2203      	movs	r2, #3
 8102e12:	fa02 f303 	lsl.w	r3, r2, r3
 8102e16:	43db      	mvns	r3, r3
 8102e18:	69ba      	ldr	r2, [r7, #24]
 8102e1a:	4013      	ands	r3, r2
 8102e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102e1e:	683b      	ldr	r3, [r7, #0]
 8102e20:	685b      	ldr	r3, [r3, #4]
 8102e22:	f003 0203 	and.w	r2, r3, #3
 8102e26:	69fb      	ldr	r3, [r7, #28]
 8102e28:	005b      	lsls	r3, r3, #1
 8102e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8102e2e:	69ba      	ldr	r2, [r7, #24]
 8102e30:	4313      	orrs	r3, r2
 8102e32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	69ba      	ldr	r2, [r7, #24]
 8102e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102e3a:	683b      	ldr	r3, [r7, #0]
 8102e3c:	685b      	ldr	r3, [r3, #4]
 8102e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102e42:	2b00      	cmp	r3, #0
 8102e44:	f000 80e0 	beq.w	8103008 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102e48:	4b2f      	ldr	r3, [pc, #188]	@ (8102f08 <HAL_GPIO_Init+0x238>)
 8102e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8102f08 <HAL_GPIO_Init+0x238>)
 8102e50:	f043 0302 	orr.w	r3, r3, #2
 8102e54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102e58:	4b2b      	ldr	r3, [pc, #172]	@ (8102f08 <HAL_GPIO_Init+0x238>)
 8102e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102e5e:	f003 0302 	and.w	r3, r3, #2
 8102e62:	60fb      	str	r3, [r7, #12]
 8102e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102e66:	4a29      	ldr	r2, [pc, #164]	@ (8102f0c <HAL_GPIO_Init+0x23c>)
 8102e68:	69fb      	ldr	r3, [r7, #28]
 8102e6a:	089b      	lsrs	r3, r3, #2
 8102e6c:	3302      	adds	r3, #2
 8102e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102e74:	69fb      	ldr	r3, [r7, #28]
 8102e76:	f003 0303 	and.w	r3, r3, #3
 8102e7a:	009b      	lsls	r3, r3, #2
 8102e7c:	220f      	movs	r2, #15
 8102e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e82:	43db      	mvns	r3, r3
 8102e84:	69ba      	ldr	r2, [r7, #24]
 8102e86:	4013      	ands	r3, r2
 8102e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	4a20      	ldr	r2, [pc, #128]	@ (8102f10 <HAL_GPIO_Init+0x240>)
 8102e8e:	4293      	cmp	r3, r2
 8102e90:	d052      	beq.n	8102f38 <HAL_GPIO_Init+0x268>
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	4a1f      	ldr	r2, [pc, #124]	@ (8102f14 <HAL_GPIO_Init+0x244>)
 8102e96:	4293      	cmp	r3, r2
 8102e98:	d031      	beq.n	8102efe <HAL_GPIO_Init+0x22e>
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8102f18 <HAL_GPIO_Init+0x248>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d02b      	beq.n	8102efa <HAL_GPIO_Init+0x22a>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8102f1c <HAL_GPIO_Init+0x24c>)
 8102ea6:	4293      	cmp	r3, r2
 8102ea8:	d025      	beq.n	8102ef6 <HAL_GPIO_Init+0x226>
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	4a1c      	ldr	r2, [pc, #112]	@ (8102f20 <HAL_GPIO_Init+0x250>)
 8102eae:	4293      	cmp	r3, r2
 8102eb0:	d01f      	beq.n	8102ef2 <HAL_GPIO_Init+0x222>
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8102f24 <HAL_GPIO_Init+0x254>)
 8102eb6:	4293      	cmp	r3, r2
 8102eb8:	d019      	beq.n	8102eee <HAL_GPIO_Init+0x21e>
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8102f28 <HAL_GPIO_Init+0x258>)
 8102ebe:	4293      	cmp	r3, r2
 8102ec0:	d013      	beq.n	8102eea <HAL_GPIO_Init+0x21a>
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	4a19      	ldr	r2, [pc, #100]	@ (8102f2c <HAL_GPIO_Init+0x25c>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d00d      	beq.n	8102ee6 <HAL_GPIO_Init+0x216>
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	4a18      	ldr	r2, [pc, #96]	@ (8102f30 <HAL_GPIO_Init+0x260>)
 8102ece:	4293      	cmp	r3, r2
 8102ed0:	d007      	beq.n	8102ee2 <HAL_GPIO_Init+0x212>
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	4a17      	ldr	r2, [pc, #92]	@ (8102f34 <HAL_GPIO_Init+0x264>)
 8102ed6:	4293      	cmp	r3, r2
 8102ed8:	d101      	bne.n	8102ede <HAL_GPIO_Init+0x20e>
 8102eda:	2309      	movs	r3, #9
 8102edc:	e02d      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102ede:	230a      	movs	r3, #10
 8102ee0:	e02b      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102ee2:	2308      	movs	r3, #8
 8102ee4:	e029      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102ee6:	2307      	movs	r3, #7
 8102ee8:	e027      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102eea:	2306      	movs	r3, #6
 8102eec:	e025      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102eee:	2305      	movs	r3, #5
 8102ef0:	e023      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102ef2:	2304      	movs	r3, #4
 8102ef4:	e021      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102ef6:	2303      	movs	r3, #3
 8102ef8:	e01f      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102efa:	2302      	movs	r3, #2
 8102efc:	e01d      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102efe:	2301      	movs	r3, #1
 8102f00:	e01b      	b.n	8102f3a <HAL_GPIO_Init+0x26a>
 8102f02:	bf00      	nop
 8102f04:	580000c0 	.word	0x580000c0
 8102f08:	58024400 	.word	0x58024400
 8102f0c:	58000400 	.word	0x58000400
 8102f10:	58020000 	.word	0x58020000
 8102f14:	58020400 	.word	0x58020400
 8102f18:	58020800 	.word	0x58020800
 8102f1c:	58020c00 	.word	0x58020c00
 8102f20:	58021000 	.word	0x58021000
 8102f24:	58021400 	.word	0x58021400
 8102f28:	58021800 	.word	0x58021800
 8102f2c:	58021c00 	.word	0x58021c00
 8102f30:	58022000 	.word	0x58022000
 8102f34:	58022400 	.word	0x58022400
 8102f38:	2300      	movs	r3, #0
 8102f3a:	69fa      	ldr	r2, [r7, #28]
 8102f3c:	f002 0203 	and.w	r2, r2, #3
 8102f40:	0092      	lsls	r2, r2, #2
 8102f42:	4093      	lsls	r3, r2
 8102f44:	69ba      	ldr	r2, [r7, #24]
 8102f46:	4313      	orrs	r3, r2
 8102f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102f4a:	4938      	ldr	r1, [pc, #224]	@ (810302c <HAL_GPIO_Init+0x35c>)
 8102f4c:	69fb      	ldr	r3, [r7, #28]
 8102f4e:	089b      	lsrs	r3, r3, #2
 8102f50:	3302      	adds	r3, #2
 8102f52:	69ba      	ldr	r2, [r7, #24]
 8102f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102f60:	693b      	ldr	r3, [r7, #16]
 8102f62:	43db      	mvns	r3, r3
 8102f64:	69ba      	ldr	r2, [r7, #24]
 8102f66:	4013      	ands	r3, r2
 8102f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102f6a:	683b      	ldr	r3, [r7, #0]
 8102f6c:	685b      	ldr	r3, [r3, #4]
 8102f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102f72:	2b00      	cmp	r3, #0
 8102f74:	d003      	beq.n	8102f7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102f76:	69ba      	ldr	r2, [r7, #24]
 8102f78:	693b      	ldr	r3, [r7, #16]
 8102f7a:	4313      	orrs	r3, r2
 8102f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102f82:	69bb      	ldr	r3, [r7, #24]
 8102f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102f8a:	685b      	ldr	r3, [r3, #4]
 8102f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102f8e:	693b      	ldr	r3, [r7, #16]
 8102f90:	43db      	mvns	r3, r3
 8102f92:	69ba      	ldr	r2, [r7, #24]
 8102f94:	4013      	ands	r3, r2
 8102f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102f98:	683b      	ldr	r3, [r7, #0]
 8102f9a:	685b      	ldr	r3, [r3, #4]
 8102f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102fa0:	2b00      	cmp	r3, #0
 8102fa2:	d003      	beq.n	8102fac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102fa4:	69ba      	ldr	r2, [r7, #24]
 8102fa6:	693b      	ldr	r3, [r7, #16]
 8102fa8:	4313      	orrs	r3, r2
 8102faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102fb0:	69bb      	ldr	r3, [r7, #24]
 8102fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102fb4:	697b      	ldr	r3, [r7, #20]
 8102fb6:	685b      	ldr	r3, [r3, #4]
 8102fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102fba:	693b      	ldr	r3, [r7, #16]
 8102fbc:	43db      	mvns	r3, r3
 8102fbe:	69ba      	ldr	r2, [r7, #24]
 8102fc0:	4013      	ands	r3, r2
 8102fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102fc4:	683b      	ldr	r3, [r7, #0]
 8102fc6:	685b      	ldr	r3, [r3, #4]
 8102fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102fcc:	2b00      	cmp	r3, #0
 8102fce:	d003      	beq.n	8102fd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102fd0:	69ba      	ldr	r2, [r7, #24]
 8102fd2:	693b      	ldr	r3, [r7, #16]
 8102fd4:	4313      	orrs	r3, r2
 8102fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102fd8:	697b      	ldr	r3, [r7, #20]
 8102fda:	69ba      	ldr	r2, [r7, #24]
 8102fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102fde:	697b      	ldr	r3, [r7, #20]
 8102fe0:	681b      	ldr	r3, [r3, #0]
 8102fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102fe4:	693b      	ldr	r3, [r7, #16]
 8102fe6:	43db      	mvns	r3, r3
 8102fe8:	69ba      	ldr	r2, [r7, #24]
 8102fea:	4013      	ands	r3, r2
 8102fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102fee:	683b      	ldr	r3, [r7, #0]
 8102ff0:	685b      	ldr	r3, [r3, #4]
 8102ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102ff6:	2b00      	cmp	r3, #0
 8102ff8:	d003      	beq.n	8103002 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102ffa:	69ba      	ldr	r2, [r7, #24]
 8102ffc:	693b      	ldr	r3, [r7, #16]
 8102ffe:	4313      	orrs	r3, r2
 8103000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103002:	697b      	ldr	r3, [r7, #20]
 8103004:	69ba      	ldr	r2, [r7, #24]
 8103006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103008:	69fb      	ldr	r3, [r7, #28]
 810300a:	3301      	adds	r3, #1
 810300c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810300e:	683b      	ldr	r3, [r7, #0]
 8103010:	681a      	ldr	r2, [r3, #0]
 8103012:	69fb      	ldr	r3, [r7, #28]
 8103014:	fa22 f303 	lsr.w	r3, r2, r3
 8103018:	2b00      	cmp	r3, #0
 810301a:	f47f ae63 	bne.w	8102ce4 <HAL_GPIO_Init+0x14>
  }
}
 810301e:	bf00      	nop
 8103020:	bf00      	nop
 8103022:	3724      	adds	r7, #36	@ 0x24
 8103024:	46bd      	mov	sp, r7
 8103026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810302a:	4770      	bx	lr
 810302c:	58000400 	.word	0x58000400

08103030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103030:	b480      	push	{r7}
 8103032:	b085      	sub	sp, #20
 8103034:	af00      	add	r7, sp, #0
 8103036:	6078      	str	r0, [r7, #4]
 8103038:	460b      	mov	r3, r1
 810303a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	691a      	ldr	r2, [r3, #16]
 8103040:	887b      	ldrh	r3, [r7, #2]
 8103042:	4013      	ands	r3, r2
 8103044:	2b00      	cmp	r3, #0
 8103046:	d002      	beq.n	810304e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8103048:	2301      	movs	r3, #1
 810304a:	73fb      	strb	r3, [r7, #15]
 810304c:	e001      	b.n	8103052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 810304e:	2300      	movs	r3, #0
 8103050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8103052:	7bfb      	ldrb	r3, [r7, #15]
}
 8103054:	4618      	mov	r0, r3
 8103056:	3714      	adds	r7, #20
 8103058:	46bd      	mov	sp, r7
 810305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810305e:	4770      	bx	lr

08103060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103060:	b480      	push	{r7}
 8103062:	b083      	sub	sp, #12
 8103064:	af00      	add	r7, sp, #0
 8103066:	6078      	str	r0, [r7, #4]
 8103068:	460b      	mov	r3, r1
 810306a:	807b      	strh	r3, [r7, #2]
 810306c:	4613      	mov	r3, r2
 810306e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103070:	787b      	ldrb	r3, [r7, #1]
 8103072:	2b00      	cmp	r3, #0
 8103074:	d003      	beq.n	810307e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103076:	887a      	ldrh	r2, [r7, #2]
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810307c:	e003      	b.n	8103086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810307e:	887b      	ldrh	r3, [r7, #2]
 8103080:	041a      	lsls	r2, r3, #16
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	619a      	str	r2, [r3, #24]
}
 8103086:	bf00      	nop
 8103088:	370c      	adds	r7, #12
 810308a:	46bd      	mov	sp, r7
 810308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103090:	4770      	bx	lr
	...

08103094 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8103094:	b480      	push	{r7}
 8103096:	b083      	sub	sp, #12
 8103098:	af00      	add	r7, sp, #0
 810309a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 810309c:	4a08      	ldr	r2, [pc, #32]	@ (81030c0 <HAL_HSEM_FastTake+0x2c>)
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	3320      	adds	r3, #32
 81030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81030a6:	4a07      	ldr	r2, [pc, #28]	@ (81030c4 <HAL_HSEM_FastTake+0x30>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d101      	bne.n	81030b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81030ac:	2300      	movs	r3, #0
 81030ae:	e000      	b.n	81030b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81030b0:	2301      	movs	r3, #1
}
 81030b2:	4618      	mov	r0, r3
 81030b4:	370c      	adds	r7, #12
 81030b6:	46bd      	mov	sp, r7
 81030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030bc:	4770      	bx	lr
 81030be:	bf00      	nop
 81030c0:	58026400 	.word	0x58026400
 81030c4:	80000100 	.word	0x80000100

081030c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81030c8:	b480      	push	{r7}
 81030ca:	b083      	sub	sp, #12
 81030cc:	af00      	add	r7, sp, #0
 81030ce:	6078      	str	r0, [r7, #4]
 81030d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81030d2:	4906      	ldr	r1, [pc, #24]	@ (81030ec <HAL_HSEM_Release+0x24>)
 81030d4:	683b      	ldr	r3, [r7, #0]
 81030d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81030e0:	bf00      	nop
 81030e2:	370c      	adds	r7, #12
 81030e4:	46bd      	mov	sp, r7
 81030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ea:	4770      	bx	lr
 81030ec:	58026400 	.word	0x58026400

081030f0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81030f0:	b480      	push	{r7}
 81030f2:	b083      	sub	sp, #12
 81030f4:	af00      	add	r7, sp, #0
 81030f6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81030f8:	4b05      	ldr	r3, [pc, #20]	@ (8103110 <HAL_HSEM_ActivateNotification+0x20>)
 81030fa:	681a      	ldr	r2, [r3, #0]
 81030fc:	4904      	ldr	r1, [pc, #16]	@ (8103110 <HAL_HSEM_ActivateNotification+0x20>)
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	4313      	orrs	r3, r2
 8103102:	600b      	str	r3, [r1, #0]
#endif
}
 8103104:	bf00      	nop
 8103106:	370c      	adds	r7, #12
 8103108:	46bd      	mov	sp, r7
 810310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810310e:	4770      	bx	lr
 8103110:	58026510 	.word	0x58026510

08103114 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
 8103114:	b480      	push	{r7}
 8103116:	b083      	sub	sp, #12
 8103118:	af00      	add	r7, sp, #0
 810311a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
 810311c:	4b06      	ldr	r3, [pc, #24]	@ (8103138 <HAL_HSEM_DeactivateNotification+0x24>)
 810311e:	681a      	ldr	r2, [r3, #0]
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	43db      	mvns	r3, r3
 8103124:	4904      	ldr	r1, [pc, #16]	@ (8103138 <HAL_HSEM_DeactivateNotification+0x24>)
 8103126:	4013      	ands	r3, r2
 8103128:	600b      	str	r3, [r1, #0]
#endif
}
 810312a:	bf00      	nop
 810312c:	370c      	adds	r7, #12
 810312e:	46bd      	mov	sp, r7
 8103130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103134:	4770      	bx	lr
 8103136:	bf00      	nop
 8103138:	58026510 	.word	0x58026510

0810313c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810313c:	b580      	push	{r7, lr}
 810313e:	b082      	sub	sp, #8
 8103140:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8103142:	4b0a      	ldr	r3, [pc, #40]	@ (810316c <HAL_HSEM_IRQHandler+0x30>)
 8103144:	68db      	ldr	r3, [r3, #12]
 8103146:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8103148:	4b08      	ldr	r3, [pc, #32]	@ (810316c <HAL_HSEM_IRQHandler+0x30>)
 810314a:	681a      	ldr	r2, [r3, #0]
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	43db      	mvns	r3, r3
 8103150:	4906      	ldr	r1, [pc, #24]	@ (810316c <HAL_HSEM_IRQHandler+0x30>)
 8103152:	4013      	ands	r3, r2
 8103154:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8103156:	4a05      	ldr	r2, [pc, #20]	@ (810316c <HAL_HSEM_IRQHandler+0x30>)
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810315c:	6878      	ldr	r0, [r7, #4]
 810315e:	f000 f807 	bl	8103170 <HAL_HSEM_FreeCallback>
}
 8103162:	bf00      	nop
 8103164:	3708      	adds	r7, #8
 8103166:	46bd      	mov	sp, r7
 8103168:	bd80      	pop	{r7, pc}
 810316a:	bf00      	nop
 810316c:	58026510 	.word	0x58026510

08103170 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8103170:	b480      	push	{r7}
 8103172:	b083      	sub	sp, #12
 8103174:	af00      	add	r7, sp, #0
 8103176:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8103178:	bf00      	nop
 810317a:	370c      	adds	r7, #12
 810317c:	46bd      	mov	sp, r7
 810317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103182:	4770      	bx	lr

08103184 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103184:	b580      	push	{r7, lr}
 8103186:	b084      	sub	sp, #16
 8103188:	af00      	add	r7, sp, #0
 810318a:	60f8      	str	r0, [r7, #12]
 810318c:	460b      	mov	r3, r1
 810318e:	607a      	str	r2, [r7, #4]
 8103190:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103192:	4b37      	ldr	r3, [pc, #220]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	f023 0201 	bic.w	r2, r3, #1
 810319a:	4935      	ldr	r1, [pc, #212]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 810319c:	68fb      	ldr	r3, [r7, #12]
 810319e:	4313      	orrs	r3, r2
 81031a0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	2b00      	cmp	r3, #0
 81031a6:	d123      	bne.n	81031f0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81031a8:	f7ff fd7e 	bl	8102ca8 <HAL_GetCurrentCPUID>
 81031ac:	4603      	mov	r3, r0
 81031ae:	2b03      	cmp	r3, #3
 81031b0:	d158      	bne.n	8103264 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81031b2:	4b2f      	ldr	r3, [pc, #188]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031b4:	691b      	ldr	r3, [r3, #16]
 81031b6:	4a2e      	ldr	r2, [pc, #184]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031b8:	f023 0301 	bic.w	r3, r3, #1
 81031bc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81031be:	4b2d      	ldr	r3, [pc, #180]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031c0:	691b      	ldr	r3, [r3, #16]
 81031c2:	4a2c      	ldr	r2, [pc, #176]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031c4:	f043 0304 	orr.w	r3, r3, #4
 81031c8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81031ca:	f3bf 8f4f 	dsb	sy
}
 81031ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81031d0:	f3bf 8f6f 	isb	sy
}
 81031d4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81031d6:	7afb      	ldrb	r3, [r7, #11]
 81031d8:	2b01      	cmp	r3, #1
 81031da:	d101      	bne.n	81031e0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81031dc:	bf30      	wfi
 81031de:	e000      	b.n	81031e2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81031e0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81031e2:	4b24      	ldr	r3, [pc, #144]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031e4:	691b      	ldr	r3, [r3, #16]
 81031e6:	4a23      	ldr	r2, [pc, #140]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031e8:	f023 0304 	bic.w	r3, r3, #4
 81031ec:	6113      	str	r3, [r2, #16]
 81031ee:	e03c      	b.n	810326a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	2b01      	cmp	r3, #1
 81031f4:	d123      	bne.n	810323e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81031f6:	f7ff fd57 	bl	8102ca8 <HAL_GetCurrentCPUID>
 81031fa:	4603      	mov	r3, r0
 81031fc:	2b01      	cmp	r3, #1
 81031fe:	d133      	bne.n	8103268 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103200:	4b1b      	ldr	r3, [pc, #108]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103202:	695b      	ldr	r3, [r3, #20]
 8103204:	4a1a      	ldr	r2, [pc, #104]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103206:	f023 0302 	bic.w	r3, r3, #2
 810320a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810320c:	4b19      	ldr	r3, [pc, #100]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810320e:	691b      	ldr	r3, [r3, #16]
 8103210:	4a18      	ldr	r2, [pc, #96]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103212:	f043 0304 	orr.w	r3, r3, #4
 8103216:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103218:	f3bf 8f4f 	dsb	sy
}
 810321c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810321e:	f3bf 8f6f 	isb	sy
}
 8103222:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103224:	7afb      	ldrb	r3, [r7, #11]
 8103226:	2b01      	cmp	r3, #1
 8103228:	d101      	bne.n	810322e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810322a:	bf30      	wfi
 810322c:	e000      	b.n	8103230 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810322e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103230:	4b10      	ldr	r3, [pc, #64]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103232:	691b      	ldr	r3, [r3, #16]
 8103234:	4a0f      	ldr	r2, [pc, #60]	@ (8103274 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103236:	f023 0304 	bic.w	r3, r3, #4
 810323a:	6113      	str	r3, [r2, #16]
 810323c:	e015      	b.n	810326a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810323e:	f7ff fd33 	bl	8102ca8 <HAL_GetCurrentCPUID>
 8103242:	4603      	mov	r3, r0
 8103244:	2b03      	cmp	r3, #3
 8103246:	d106      	bne.n	8103256 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103248:	4b09      	ldr	r3, [pc, #36]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 810324a:	691b      	ldr	r3, [r3, #16]
 810324c:	4a08      	ldr	r2, [pc, #32]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 810324e:	f023 0304 	bic.w	r3, r3, #4
 8103252:	6113      	str	r3, [r2, #16]
 8103254:	e009      	b.n	810326a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103256:	4b06      	ldr	r3, [pc, #24]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103258:	695b      	ldr	r3, [r3, #20]
 810325a:	4a05      	ldr	r2, [pc, #20]	@ (8103270 <HAL_PWREx_EnterSTOPMode+0xec>)
 810325c:	f023 0304 	bic.w	r3, r3, #4
 8103260:	6153      	str	r3, [r2, #20]
 8103262:	e002      	b.n	810326a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103264:	bf00      	nop
 8103266:	e000      	b.n	810326a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103268:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810326a:	3710      	adds	r7, #16
 810326c:	46bd      	mov	sp, r7
 810326e:	bd80      	pop	{r7, pc}
 8103270:	58024800 	.word	0x58024800
 8103274:	e000ed00 	.word	0xe000ed00

08103278 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103278:	b580      	push	{r7, lr}
 810327a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810327c:	f7ff fd14 	bl	8102ca8 <HAL_GetCurrentCPUID>
 8103280:	4603      	mov	r3, r0
 8103282:	2b03      	cmp	r3, #3
 8103284:	d101      	bne.n	810328a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103286:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103288:	e001      	b.n	810328e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810328a:	bf40      	sev
    __WFE ();
 810328c:	bf20      	wfe
}
 810328e:	bf00      	nop
 8103290:	bd80      	pop	{r7, pc}
	...

08103294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103294:	b480      	push	{r7}
 8103296:	b089      	sub	sp, #36	@ 0x24
 8103298:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810329a:	4bb3      	ldr	r3, [pc, #716]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810329c:	691b      	ldr	r3, [r3, #16]
 810329e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81032a2:	2b18      	cmp	r3, #24
 81032a4:	f200 8155 	bhi.w	8103552 <HAL_RCC_GetSysClockFreq+0x2be>
 81032a8:	a201      	add	r2, pc, #4	@ (adr r2, 81032b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032ae:	bf00      	nop
 81032b0:	08103315 	.word	0x08103315
 81032b4:	08103553 	.word	0x08103553
 81032b8:	08103553 	.word	0x08103553
 81032bc:	08103553 	.word	0x08103553
 81032c0:	08103553 	.word	0x08103553
 81032c4:	08103553 	.word	0x08103553
 81032c8:	08103553 	.word	0x08103553
 81032cc:	08103553 	.word	0x08103553
 81032d0:	0810333b 	.word	0x0810333b
 81032d4:	08103553 	.word	0x08103553
 81032d8:	08103553 	.word	0x08103553
 81032dc:	08103553 	.word	0x08103553
 81032e0:	08103553 	.word	0x08103553
 81032e4:	08103553 	.word	0x08103553
 81032e8:	08103553 	.word	0x08103553
 81032ec:	08103553 	.word	0x08103553
 81032f0:	08103341 	.word	0x08103341
 81032f4:	08103553 	.word	0x08103553
 81032f8:	08103553 	.word	0x08103553
 81032fc:	08103553 	.word	0x08103553
 8103300:	08103553 	.word	0x08103553
 8103304:	08103553 	.word	0x08103553
 8103308:	08103553 	.word	0x08103553
 810330c:	08103553 	.word	0x08103553
 8103310:	08103347 	.word	0x08103347
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103314:	4b94      	ldr	r3, [pc, #592]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	f003 0320 	and.w	r3, r3, #32
 810331c:	2b00      	cmp	r3, #0
 810331e:	d009      	beq.n	8103334 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103320:	4b91      	ldr	r3, [pc, #580]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	08db      	lsrs	r3, r3, #3
 8103326:	f003 0303 	and.w	r3, r3, #3
 810332a:	4a90      	ldr	r2, [pc, #576]	@ (810356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810332c:	fa22 f303 	lsr.w	r3, r2, r3
 8103330:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103332:	e111      	b.n	8103558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103334:	4b8d      	ldr	r3, [pc, #564]	@ (810356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103336:	61bb      	str	r3, [r7, #24]
      break;
 8103338:	e10e      	b.n	8103558 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810333a:	4b8d      	ldr	r3, [pc, #564]	@ (8103570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810333c:	61bb      	str	r3, [r7, #24]
      break;
 810333e:	e10b      	b.n	8103558 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103340:	4b8c      	ldr	r3, [pc, #560]	@ (8103574 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103342:	61bb      	str	r3, [r7, #24]
      break;
 8103344:	e108      	b.n	8103558 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103346:	4b88      	ldr	r3, [pc, #544]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810334a:	f003 0303 	and.w	r3, r3, #3
 810334e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103350:	4b85      	ldr	r3, [pc, #532]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103354:	091b      	lsrs	r3, r3, #4
 8103356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810335a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810335c:	4b82      	ldr	r3, [pc, #520]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103360:	f003 0301 	and.w	r3, r3, #1
 8103364:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103366:	4b80      	ldr	r3, [pc, #512]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810336a:	08db      	lsrs	r3, r3, #3
 810336c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103370:	68fa      	ldr	r2, [r7, #12]
 8103372:	fb02 f303 	mul.w	r3, r2, r3
 8103376:	ee07 3a90 	vmov	s15, r3
 810337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810337e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103382:	693b      	ldr	r3, [r7, #16]
 8103384:	2b00      	cmp	r3, #0
 8103386:	f000 80e1 	beq.w	810354c <HAL_RCC_GetSysClockFreq+0x2b8>
 810338a:	697b      	ldr	r3, [r7, #20]
 810338c:	2b02      	cmp	r3, #2
 810338e:	f000 8083 	beq.w	8103498 <HAL_RCC_GetSysClockFreq+0x204>
 8103392:	697b      	ldr	r3, [r7, #20]
 8103394:	2b02      	cmp	r3, #2
 8103396:	f200 80a1 	bhi.w	81034dc <HAL_RCC_GetSysClockFreq+0x248>
 810339a:	697b      	ldr	r3, [r7, #20]
 810339c:	2b00      	cmp	r3, #0
 810339e:	d003      	beq.n	81033a8 <HAL_RCC_GetSysClockFreq+0x114>
 81033a0:	697b      	ldr	r3, [r7, #20]
 81033a2:	2b01      	cmp	r3, #1
 81033a4:	d056      	beq.n	8103454 <HAL_RCC_GetSysClockFreq+0x1c0>
 81033a6:	e099      	b.n	81034dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81033a8:	4b6f      	ldr	r3, [pc, #444]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	f003 0320 	and.w	r3, r3, #32
 81033b0:	2b00      	cmp	r3, #0
 81033b2:	d02d      	beq.n	8103410 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81033b4:	4b6c      	ldr	r3, [pc, #432]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	08db      	lsrs	r3, r3, #3
 81033ba:	f003 0303 	and.w	r3, r3, #3
 81033be:	4a6b      	ldr	r2, [pc, #428]	@ (810356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81033c0:	fa22 f303 	lsr.w	r3, r2, r3
 81033c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	ee07 3a90 	vmov	s15, r3
 81033cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033d0:	693b      	ldr	r3, [r7, #16]
 81033d2:	ee07 3a90 	vmov	s15, r3
 81033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033de:	4b62      	ldr	r3, [pc, #392]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033e6:	ee07 3a90 	vmov	s15, r3
 81033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81033f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103578 <HAL_RCC_GetSysClockFreq+0x2e4>
 81033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103406:	ee67 7a27 	vmul.f32	s15, s14, s15
 810340a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810340e:	e087      	b.n	8103520 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103410:	693b      	ldr	r3, [r7, #16]
 8103412:	ee07 3a90 	vmov	s15, r3
 8103416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810341a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810357c <HAL_RCC_GetSysClockFreq+0x2e8>
 810341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103422:	4b51      	ldr	r3, [pc, #324]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810342a:	ee07 3a90 	vmov	s15, r3
 810342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103432:	ed97 6a02 	vldr	s12, [r7, #8]
 8103436:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103578 <HAL_RCC_GetSysClockFreq+0x2e4>
 810343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810344e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103452:	e065      	b.n	8103520 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103454:	693b      	ldr	r3, [r7, #16]
 8103456:	ee07 3a90 	vmov	s15, r3
 810345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810345e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103580 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103466:	4b40      	ldr	r3, [pc, #256]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810346e:	ee07 3a90 	vmov	s15, r3
 8103472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103476:	ed97 6a02 	vldr	s12, [r7, #8]
 810347a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103578 <HAL_RCC_GetSysClockFreq+0x2e4>
 810347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103496:	e043      	b.n	8103520 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103498:	693b      	ldr	r3, [r7, #16]
 810349a:	ee07 3a90 	vmov	s15, r3
 810349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103584 <HAL_RCC_GetSysClockFreq+0x2f0>
 81034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034aa:	4b2f      	ldr	r3, [pc, #188]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034b2:	ee07 3a90 	vmov	s15, r3
 81034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81034be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103578 <HAL_RCC_GetSysClockFreq+0x2e4>
 81034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81034da:	e021      	b.n	8103520 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034dc:	693b      	ldr	r3, [r7, #16]
 81034de:	ee07 3a90 	vmov	s15, r3
 81034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103580 <HAL_RCC_GetSysClockFreq+0x2ec>
 81034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034f6:	ee07 3a90 	vmov	s15, r3
 81034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103502:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103578 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810350e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103516:	ee67 7a27 	vmul.f32	s15, s14, s15
 810351a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810351e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103520:	4b11      	ldr	r3, [pc, #68]	@ (8103568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103524:	0a5b      	lsrs	r3, r3, #9
 8103526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810352a:	3301      	adds	r3, #1
 810352c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810352e:	683b      	ldr	r3, [r7, #0]
 8103530:	ee07 3a90 	vmov	s15, r3
 8103534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103538:	edd7 6a07 	vldr	s13, [r7, #28]
 810353c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103544:	ee17 3a90 	vmov	r3, s15
 8103548:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810354a:	e005      	b.n	8103558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810354c:	2300      	movs	r3, #0
 810354e:	61bb      	str	r3, [r7, #24]
      break;
 8103550:	e002      	b.n	8103558 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103552:	4b07      	ldr	r3, [pc, #28]	@ (8103570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103554:	61bb      	str	r3, [r7, #24]
      break;
 8103556:	bf00      	nop
  }

  return sysclockfreq;
 8103558:	69bb      	ldr	r3, [r7, #24]
}
 810355a:	4618      	mov	r0, r3
 810355c:	3724      	adds	r7, #36	@ 0x24
 810355e:	46bd      	mov	sp, r7
 8103560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103564:	4770      	bx	lr
 8103566:	bf00      	nop
 8103568:	58024400 	.word	0x58024400
 810356c:	03d09000 	.word	0x03d09000
 8103570:	003d0900 	.word	0x003d0900
 8103574:	007a1200 	.word	0x007a1200
 8103578:	46000000 	.word	0x46000000
 810357c:	4c742400 	.word	0x4c742400
 8103580:	4a742400 	.word	0x4a742400
 8103584:	4af42400 	.word	0x4af42400

08103588 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810358c:	b0ca      	sub	sp, #296	@ 0x128
 810358e:	af00      	add	r7, sp, #0
 8103590:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103594:	2300      	movs	r3, #0
 8103596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810359a:	2300      	movs	r3, #0
 810359c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81035ac:	2500      	movs	r5, #0
 81035ae:	ea54 0305 	orrs.w	r3, r4, r5
 81035b2:	d049      	beq.n	8103648 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81035ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81035be:	d02f      	beq.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81035c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81035c4:	d828      	bhi.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81035c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81035ca:	d01a      	beq.n	8103602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81035cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81035d0:	d822      	bhi.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d003      	beq.n	81035de <HAL_RCCEx_PeriphCLKConfig+0x56>
 81035d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81035da:	d007      	beq.n	81035ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 81035dc:	e01c      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035de:	4bb8      	ldr	r3, [pc, #736]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035e2:	4ab7      	ldr	r2, [pc, #732]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81035e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81035e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81035ea:	e01a      	b.n	8103622 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035f0:	3308      	adds	r3, #8
 81035f2:	2102      	movs	r1, #2
 81035f4:	4618      	mov	r0, r3
 81035f6:	f001 f9d1 	bl	810499c <RCCEx_PLL2_Config>
 81035fa:	4603      	mov	r3, r0
 81035fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103600:	e00f      	b.n	8103622 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103606:	3328      	adds	r3, #40	@ 0x28
 8103608:	2102      	movs	r1, #2
 810360a:	4618      	mov	r0, r3
 810360c:	f001 fa78 	bl	8104b00 <RCCEx_PLL3_Config>
 8103610:	4603      	mov	r3, r0
 8103612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103616:	e004      	b.n	8103622 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103618:	2301      	movs	r3, #1
 810361a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810361e:	e000      	b.n	8103622 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103626:	2b00      	cmp	r3, #0
 8103628:	d10a      	bne.n	8103640 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810362a:	4ba5      	ldr	r3, [pc, #660]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810362e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103638:	4aa1      	ldr	r2, [pc, #644]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810363a:	430b      	orrs	r3, r1
 810363c:	6513      	str	r3, [r2, #80]	@ 0x50
 810363e:	e003      	b.n	8103648 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103650:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8103654:	f04f 0900 	mov.w	r9, #0
 8103658:	ea58 0309 	orrs.w	r3, r8, r9
 810365c:	d047      	beq.n	81036ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103664:	2b04      	cmp	r3, #4
 8103666:	d82a      	bhi.n	81036be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103668:	a201      	add	r2, pc, #4	@ (adr r2, 8103670 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810366e:	bf00      	nop
 8103670:	08103685 	.word	0x08103685
 8103674:	08103693 	.word	0x08103693
 8103678:	081036a9 	.word	0x081036a9
 810367c:	081036c7 	.word	0x081036c7
 8103680:	081036c7 	.word	0x081036c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103684:	4b8e      	ldr	r3, [pc, #568]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103688:	4a8d      	ldr	r2, [pc, #564]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810368a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810368e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103690:	e01a      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103696:	3308      	adds	r3, #8
 8103698:	2100      	movs	r1, #0
 810369a:	4618      	mov	r0, r3
 810369c:	f001 f97e 	bl	810499c <RCCEx_PLL2_Config>
 81036a0:	4603      	mov	r3, r0
 81036a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81036a6:	e00f      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ac:	3328      	adds	r3, #40	@ 0x28
 81036ae:	2100      	movs	r1, #0
 81036b0:	4618      	mov	r0, r3
 81036b2:	f001 fa25 	bl	8104b00 <RCCEx_PLL3_Config>
 81036b6:	4603      	mov	r3, r0
 81036b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81036bc:	e004      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036be:	2301      	movs	r3, #1
 81036c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81036c4:	e000      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036cc:	2b00      	cmp	r3, #0
 81036ce:	d10a      	bne.n	81036e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81036d0:	4b7b      	ldr	r3, [pc, #492]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81036d4:	f023 0107 	bic.w	r1, r3, #7
 81036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81036de:	4a78      	ldr	r2, [pc, #480]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036e0:	430b      	orrs	r3, r1
 81036e2:	6513      	str	r3, [r2, #80]	@ 0x50
 81036e4:	e003      	b.n	81036ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81036fa:	f04f 0b00 	mov.w	fp, #0
 81036fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8103702:	d04c      	beq.n	810379e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810370a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810370e:	d030      	beq.n	8103772 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103714:	d829      	bhi.n	810376a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103716:	2bc0      	cmp	r3, #192	@ 0xc0
 8103718:	d02d      	beq.n	8103776 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810371a:	2bc0      	cmp	r3, #192	@ 0xc0
 810371c:	d825      	bhi.n	810376a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810371e:	2b80      	cmp	r3, #128	@ 0x80
 8103720:	d018      	beq.n	8103754 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103722:	2b80      	cmp	r3, #128	@ 0x80
 8103724:	d821      	bhi.n	810376a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103726:	2b00      	cmp	r3, #0
 8103728:	d002      	beq.n	8103730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810372a:	2b40      	cmp	r3, #64	@ 0x40
 810372c:	d007      	beq.n	810373e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810372e:	e01c      	b.n	810376a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103730:	4b63      	ldr	r3, [pc, #396]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103734:	4a62      	ldr	r2, [pc, #392]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810373a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810373c:	e01c      	b.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103742:	3308      	adds	r3, #8
 8103744:	2100      	movs	r1, #0
 8103746:	4618      	mov	r0, r3
 8103748:	f001 f928 	bl	810499c <RCCEx_PLL2_Config>
 810374c:	4603      	mov	r3, r0
 810374e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103752:	e011      	b.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103758:	3328      	adds	r3, #40	@ 0x28
 810375a:	2100      	movs	r1, #0
 810375c:	4618      	mov	r0, r3
 810375e:	f001 f9cf 	bl	8104b00 <RCCEx_PLL3_Config>
 8103762:	4603      	mov	r3, r0
 8103764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103768:	e006      	b.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810376a:	2301      	movs	r3, #1
 810376c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103770:	e002      	b.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103772:	bf00      	nop
 8103774:	e000      	b.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810377c:	2b00      	cmp	r3, #0
 810377e:	d10a      	bne.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103780:	4b4f      	ldr	r3, [pc, #316]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103784:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810378e:	4a4c      	ldr	r2, [pc, #304]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103790:	430b      	orrs	r3, r1
 8103792:	6513      	str	r3, [r2, #80]	@ 0x50
 8103794:	e003      	b.n	810379e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810379a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81037aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81037ae:	2300      	movs	r3, #0
 81037b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81037b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81037b8:	460b      	mov	r3, r1
 81037ba:	4313      	orrs	r3, r2
 81037bc:	d053      	beq.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81037c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81037ca:	d035      	beq.n	8103838 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81037cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81037d0:	d82e      	bhi.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81037d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81037d6:	d031      	beq.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81037d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81037dc:	d828      	bhi.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81037de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81037e2:	d01a      	beq.n	810381a <HAL_RCCEx_PeriphCLKConfig+0x292>
 81037e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81037e8:	d822      	bhi.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d003      	beq.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81037ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81037f2:	d007      	beq.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81037f4:	e01c      	b.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81037f6:	4b32      	ldr	r3, [pc, #200]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037fa:	4a31      	ldr	r2, [pc, #196]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103802:	e01c      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103808:	3308      	adds	r3, #8
 810380a:	2100      	movs	r1, #0
 810380c:	4618      	mov	r0, r3
 810380e:	f001 f8c5 	bl	810499c <RCCEx_PLL2_Config>
 8103812:	4603      	mov	r3, r0
 8103814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103818:	e011      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810381e:	3328      	adds	r3, #40	@ 0x28
 8103820:	2100      	movs	r1, #0
 8103822:	4618      	mov	r0, r3
 8103824:	f001 f96c 	bl	8104b00 <RCCEx_PLL3_Config>
 8103828:	4603      	mov	r3, r0
 810382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810382e:	e006      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103830:	2301      	movs	r3, #1
 8103832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103836:	e002      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103838:	bf00      	nop
 810383a:	e000      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810383c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810383e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103842:	2b00      	cmp	r3, #0
 8103844:	d10b      	bne.n	810385e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103846:	4b1e      	ldr	r3, [pc, #120]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810384a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103856:	4a1a      	ldr	r2, [pc, #104]	@ (81038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103858:	430b      	orrs	r3, r1
 810385a:	6593      	str	r3, [r2, #88]	@ 0x58
 810385c:	e003      	b.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810385e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810386e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103872:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103876:	2300      	movs	r3, #0
 8103878:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810387c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103880:	460b      	mov	r3, r1
 8103882:	4313      	orrs	r3, r2
 8103884:	d056      	beq.n	8103934 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810388a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810388e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103892:	d038      	beq.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103894:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103898:	d831      	bhi.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 810389a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810389e:	d034      	beq.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x382>
 81038a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81038a4:	d82b      	bhi.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 81038a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81038aa:	d01d      	beq.n	81038e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81038ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81038b0:	d825      	bhi.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 81038b2:	2b00      	cmp	r3, #0
 81038b4:	d006      	beq.n	81038c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81038b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81038ba:	d00a      	beq.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81038bc:	e01f      	b.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 81038be:	bf00      	nop
 81038c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038c4:	4ba2      	ldr	r3, [pc, #648]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038c8:	4aa1      	ldr	r2, [pc, #644]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81038ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81038ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81038d0:	e01c      	b.n	810390c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038d6:	3308      	adds	r3, #8
 81038d8:	2100      	movs	r1, #0
 81038da:	4618      	mov	r0, r3
 81038dc:	f001 f85e 	bl	810499c <RCCEx_PLL2_Config>
 81038e0:	4603      	mov	r3, r0
 81038e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81038e6:	e011      	b.n	810390c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ec:	3328      	adds	r3, #40	@ 0x28
 81038ee:	2100      	movs	r1, #0
 81038f0:	4618      	mov	r0, r3
 81038f2:	f001 f905 	bl	8104b00 <RCCEx_PLL3_Config>
 81038f6:	4603      	mov	r3, r0
 81038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81038fc:	e006      	b.n	810390c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81038fe:	2301      	movs	r3, #1
 8103900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103904:	e002      	b.n	810390c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103906:	bf00      	nop
 8103908:	e000      	b.n	810390c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810390a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810390c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103910:	2b00      	cmp	r3, #0
 8103912:	d10b      	bne.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103914:	4b8e      	ldr	r3, [pc, #568]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103918:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103920:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103924:	4a8a      	ldr	r2, [pc, #552]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103926:	430b      	orrs	r3, r1
 8103928:	6593      	str	r3, [r2, #88]	@ 0x58
 810392a:	e003      	b.n	8103934 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810392c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103938:	e9d3 2300 	ldrd	r2, r3, [r3]
 810393c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103940:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8103944:	2300      	movs	r3, #0
 8103946:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810394a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810394e:	460b      	mov	r3, r1
 8103950:	4313      	orrs	r3, r2
 8103952:	d03a      	beq.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810395a:	2b30      	cmp	r3, #48	@ 0x30
 810395c:	d01f      	beq.n	810399e <HAL_RCCEx_PeriphCLKConfig+0x416>
 810395e:	2b30      	cmp	r3, #48	@ 0x30
 8103960:	d819      	bhi.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103962:	2b20      	cmp	r3, #32
 8103964:	d00c      	beq.n	8103980 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103966:	2b20      	cmp	r3, #32
 8103968:	d815      	bhi.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810396a:	2b00      	cmp	r3, #0
 810396c:	d019      	beq.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810396e:	2b10      	cmp	r3, #16
 8103970:	d111      	bne.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103972:	4b77      	ldr	r3, [pc, #476]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103976:	4a76      	ldr	r2, [pc, #472]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810397c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810397e:	e011      	b.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103984:	3308      	adds	r3, #8
 8103986:	2102      	movs	r1, #2
 8103988:	4618      	mov	r0, r3
 810398a:	f001 f807 	bl	810499c <RCCEx_PLL2_Config>
 810398e:	4603      	mov	r3, r0
 8103990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103994:	e006      	b.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103996:	2301      	movs	r3, #1
 8103998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810399c:	e002      	b.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810399e:	bf00      	nop
 81039a0:	e000      	b.n	81039a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81039a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039a8:	2b00      	cmp	r3, #0
 81039aa:	d10a      	bne.n	81039c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81039ac:	4b68      	ldr	r3, [pc, #416]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81039ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81039b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81039ba:	4a65      	ldr	r2, [pc, #404]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81039bc:	430b      	orrs	r3, r1
 81039be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81039c0:	e003      	b.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81039d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81039da:	2300      	movs	r3, #0
 81039dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81039e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81039e4:	460b      	mov	r3, r1
 81039e6:	4313      	orrs	r3, r2
 81039e8:	d051      	beq.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81039f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81039f4:	d035      	beq.n	8103a62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81039f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81039fa:	d82e      	bhi.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81039fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103a00:	d031      	beq.n	8103a66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103a02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103a06:	d828      	bhi.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103a0c:	d01a      	beq.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103a12:	d822      	bhi.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d003      	beq.n	8103a20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103a1c:	d007      	beq.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103a1e:	e01c      	b.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a20:	4b4b      	ldr	r3, [pc, #300]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a24:	4a4a      	ldr	r2, [pc, #296]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103a2c:	e01c      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a32:	3308      	adds	r3, #8
 8103a34:	2100      	movs	r1, #0
 8103a36:	4618      	mov	r0, r3
 8103a38:	f000 ffb0 	bl	810499c <RCCEx_PLL2_Config>
 8103a3c:	4603      	mov	r3, r0
 8103a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103a42:	e011      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a48:	3328      	adds	r3, #40	@ 0x28
 8103a4a:	2100      	movs	r1, #0
 8103a4c:	4618      	mov	r0, r3
 8103a4e:	f001 f857 	bl	8104b00 <RCCEx_PLL3_Config>
 8103a52:	4603      	mov	r3, r0
 8103a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103a58:	e006      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a5a:	2301      	movs	r3, #1
 8103a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103a60:	e002      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103a62:	bf00      	nop
 8103a64:	e000      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a6c:	2b00      	cmp	r3, #0
 8103a6e:	d10a      	bne.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103a70:	4b37      	ldr	r3, [pc, #220]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103a74:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103a7e:	4a34      	ldr	r2, [pc, #208]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a80:	430b      	orrs	r3, r1
 8103a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8103a84:	e003      	b.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a96:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8103a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103a9e:	2300      	movs	r3, #0
 8103aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103aa4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103aa8:	460b      	mov	r3, r1
 8103aaa:	4313      	orrs	r3, r2
 8103aac:	d056      	beq.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103ab8:	d033      	beq.n	8103b22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103aba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103abe:	d82c      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103ac0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103ac4:	d02f      	beq.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103ac6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103aca:	d826      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103acc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103ad0:	d02b      	beq.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103ad2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103ad6:	d820      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103adc:	d012      	beq.n	8103b04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103ae2:	d81a      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d022      	beq.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103aec:	d115      	bne.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103af2:	3308      	adds	r3, #8
 8103af4:	2101      	movs	r1, #1
 8103af6:	4618      	mov	r0, r3
 8103af8:	f000 ff50 	bl	810499c <RCCEx_PLL2_Config>
 8103afc:	4603      	mov	r3, r0
 8103afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103b02:	e015      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b08:	3328      	adds	r3, #40	@ 0x28
 8103b0a:	2101      	movs	r1, #1
 8103b0c:	4618      	mov	r0, r3
 8103b0e:	f000 fff7 	bl	8104b00 <RCCEx_PLL3_Config>
 8103b12:	4603      	mov	r3, r0
 8103b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103b18:	e00a      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b1a:	2301      	movs	r3, #1
 8103b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b20:	e006      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103b22:	bf00      	nop
 8103b24:	e004      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103b26:	bf00      	nop
 8103b28:	e002      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103b2a:	bf00      	nop
 8103b2c:	e000      	b.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	d10d      	bne.n	8103b54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103b38:	4b05      	ldr	r3, [pc, #20]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103b46:	4a02      	ldr	r2, [pc, #8]	@ (8103b50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b48:	430b      	orrs	r3, r1
 8103b4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8103b4c:	e006      	b.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103b4e:	bf00      	nop
 8103b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b64:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103b6c:	2300      	movs	r3, #0
 8103b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103b72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103b76:	460b      	mov	r3, r1
 8103b78:	4313      	orrs	r3, r2
 8103b7a:	d055      	beq.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103b88:	d033      	beq.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103b8e:	d82c      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103b94:	d02f      	beq.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103b9a:	d826      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103b9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103ba0:	d02b      	beq.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103ba2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103ba6:	d820      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bac:	d012      	beq.n	8103bd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bb2:	d81a      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103bb4:	2b00      	cmp	r3, #0
 8103bb6:	d022      	beq.n	8103bfe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103bbc:	d115      	bne.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bc2:	3308      	adds	r3, #8
 8103bc4:	2101      	movs	r1, #1
 8103bc6:	4618      	mov	r0, r3
 8103bc8:	f000 fee8 	bl	810499c <RCCEx_PLL2_Config>
 8103bcc:	4603      	mov	r3, r0
 8103bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103bd2:	e015      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bd8:	3328      	adds	r3, #40	@ 0x28
 8103bda:	2101      	movs	r1, #1
 8103bdc:	4618      	mov	r0, r3
 8103bde:	f000 ff8f 	bl	8104b00 <RCCEx_PLL3_Config>
 8103be2:	4603      	mov	r3, r0
 8103be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103be8:	e00a      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103bea:	2301      	movs	r3, #1
 8103bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103bf0:	e006      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103bf2:	bf00      	nop
 8103bf4:	e004      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103bf6:	bf00      	nop
 8103bf8:	e002      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103bfa:	bf00      	nop
 8103bfc:	e000      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d10b      	bne.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103c08:	4ba4      	ldr	r3, [pc, #656]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103c0c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103c18:	4aa0      	ldr	r2, [pc, #640]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103c1a:	430b      	orrs	r3, r1
 8103c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8103c1e:	e003      	b.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103c34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103c38:	2300      	movs	r3, #0
 8103c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103c3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103c42:	460b      	mov	r3, r1
 8103c44:	4313      	orrs	r3, r2
 8103c46:	d037      	beq.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103c52:	d00e      	beq.n	8103c72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103c58:	d816      	bhi.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103c5a:	2b00      	cmp	r3, #0
 8103c5c:	d018      	beq.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103c62:	d111      	bne.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c64:	4b8d      	ldr	r3, [pc, #564]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103c68:	4a8c      	ldr	r2, [pc, #560]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103c70:	e00f      	b.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c76:	3308      	adds	r3, #8
 8103c78:	2101      	movs	r1, #1
 8103c7a:	4618      	mov	r0, r3
 8103c7c:	f000 fe8e 	bl	810499c <RCCEx_PLL2_Config>
 8103c80:	4603      	mov	r3, r0
 8103c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103c86:	e004      	b.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c88:	2301      	movs	r3, #1
 8103c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103c8e:	e000      	b.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	d10a      	bne.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103c9a:	4b80      	ldr	r3, [pc, #512]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103c9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103ca8:	4a7c      	ldr	r2, [pc, #496]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103caa:	430b      	orrs	r3, r1
 8103cac:	6513      	str	r3, [r2, #80]	@ 0x50
 8103cae:	e003      	b.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cc0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103cc8:	2300      	movs	r3, #0
 8103cca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103cce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103cd2:	460b      	mov	r3, r1
 8103cd4:	4313      	orrs	r3, r2
 8103cd6:	d039      	beq.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103cde:	2b03      	cmp	r3, #3
 8103ce0:	d81c      	bhi.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ce8:	08103d25 	.word	0x08103d25
 8103cec:	08103cf9 	.word	0x08103cf9
 8103cf0:	08103d07 	.word	0x08103d07
 8103cf4:	08103d25 	.word	0x08103d25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cf8:	4b68      	ldr	r3, [pc, #416]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103cfc:	4a67      	ldr	r2, [pc, #412]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103d04:	e00f      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d0a:	3308      	adds	r3, #8
 8103d0c:	2102      	movs	r1, #2
 8103d0e:	4618      	mov	r0, r3
 8103d10:	f000 fe44 	bl	810499c <RCCEx_PLL2_Config>
 8103d14:	4603      	mov	r3, r0
 8103d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103d1a:	e004      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103d1c:	2301      	movs	r3, #1
 8103d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103d22:	e000      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d2a:	2b00      	cmp	r3, #0
 8103d2c:	d10a      	bne.n	8103d44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103d32:	f023 0103 	bic.w	r1, r3, #3
 8103d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103d3c:	4a57      	ldr	r2, [pc, #348]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103d3e:	430b      	orrs	r3, r1
 8103d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103d42:	e003      	b.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103d5c:	2300      	movs	r3, #0
 8103d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103d62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8103d66:	460b      	mov	r3, r1
 8103d68:	4313      	orrs	r3, r2
 8103d6a:	f000 809f 	beq.w	8103eac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8103ea0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	4a4b      	ldr	r2, [pc, #300]	@ (8103ea0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103d78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103d7a:	f7fe fe55 	bl	8102a28 <HAL_GetTick>
 8103d7e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103d82:	e00b      	b.n	8103d9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103d84:	f7fe fe50 	bl	8102a28 <HAL_GetTick>
 8103d88:	4602      	mov	r2, r0
 8103d8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103d8e:	1ad3      	subs	r3, r2, r3
 8103d90:	2b64      	cmp	r3, #100	@ 0x64
 8103d92:	d903      	bls.n	8103d9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8103d94:	2303      	movs	r3, #3
 8103d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103d9a:	e005      	b.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103d9c:	4b40      	ldr	r3, [pc, #256]	@ (8103ea0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103da4:	2b00      	cmp	r3, #0
 8103da6:	d0ed      	beq.n	8103d84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dac:	2b00      	cmp	r3, #0
 8103dae:	d179      	bne.n	8103ea4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103db0:	4b3a      	ldr	r3, [pc, #232]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103db2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103db8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103dbc:	4053      	eors	r3, r2
 8103dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	d015      	beq.n	8103df2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103dc6:	4b35      	ldr	r3, [pc, #212]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103dce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103dd2:	4b32      	ldr	r3, [pc, #200]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103dd6:	4a31      	ldr	r2, [pc, #196]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103ddc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103dde:	4b2f      	ldr	r3, [pc, #188]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103de2:	4a2e      	ldr	r2, [pc, #184]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103de8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103dea:	4a2c      	ldr	r2, [pc, #176]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103df0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103dfe:	d118      	bne.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103e00:	f7fe fe12 	bl	8102a28 <HAL_GetTick>
 8103e04:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103e08:	e00d      	b.n	8103e26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103e0a:	f7fe fe0d 	bl	8102a28 <HAL_GetTick>
 8103e0e:	4602      	mov	r2, r0
 8103e10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103e14:	1ad2      	subs	r2, r2, r3
 8103e16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103e1a:	429a      	cmp	r2, r3
 8103e1c:	d903      	bls.n	8103e26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8103e1e:	2303      	movs	r3, #3
 8103e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8103e24:	e005      	b.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103e26:	4b1d      	ldr	r3, [pc, #116]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103e2a:	f003 0302 	and.w	r3, r3, #2
 8103e2e:	2b00      	cmp	r3, #0
 8103e30:	d0eb      	beq.n	8103e0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8103e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e36:	2b00      	cmp	r3, #0
 8103e38:	d12b      	bne.n	8103e92 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103e4a:	d110      	bne.n	8103e6e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8103e4c:	4b13      	ldr	r3, [pc, #76]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e4e:	691b      	ldr	r3, [r3, #16]
 8103e50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8103e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103e5c:	091b      	lsrs	r3, r3, #4
 8103e5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8103e62:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8103e66:	4a0d      	ldr	r2, [pc, #52]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e68:	430b      	orrs	r3, r1
 8103e6a:	6113      	str	r3, [r2, #16]
 8103e6c:	e005      	b.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8103e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e70:	691b      	ldr	r3, [r3, #16]
 8103e72:	4a0a      	ldr	r2, [pc, #40]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103e78:	6113      	str	r3, [r2, #16]
 8103e7a:	4b08      	ldr	r3, [pc, #32]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8103e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103e8a:	4a04      	ldr	r2, [pc, #16]	@ (8103e9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e8c:	430b      	orrs	r3, r1
 8103e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8103e90:	e00c      	b.n	8103eac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8103e9a:	e007      	b.n	8103eac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8103e9c:	58024400 	.word	0x58024400
 8103ea0:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eb4:	f002 0301 	and.w	r3, r2, #1
 8103eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103ebc:	2300      	movs	r3, #0
 8103ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8103ec2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8103ec6:	460b      	mov	r3, r1
 8103ec8:	4313      	orrs	r3, r2
 8103eca:	f000 8089 	beq.w	8103fe0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103ed4:	2b28      	cmp	r3, #40	@ 0x28
 8103ed6:	d86b      	bhi.n	8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8103ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8103ee0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8103eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ede:	bf00      	nop
 8103ee0:	08103fb9 	.word	0x08103fb9
 8103ee4:	08103fb1 	.word	0x08103fb1
 8103ee8:	08103fb1 	.word	0x08103fb1
 8103eec:	08103fb1 	.word	0x08103fb1
 8103ef0:	08103fb1 	.word	0x08103fb1
 8103ef4:	08103fb1 	.word	0x08103fb1
 8103ef8:	08103fb1 	.word	0x08103fb1
 8103efc:	08103fb1 	.word	0x08103fb1
 8103f00:	08103f85 	.word	0x08103f85
 8103f04:	08103fb1 	.word	0x08103fb1
 8103f08:	08103fb1 	.word	0x08103fb1
 8103f0c:	08103fb1 	.word	0x08103fb1
 8103f10:	08103fb1 	.word	0x08103fb1
 8103f14:	08103fb1 	.word	0x08103fb1
 8103f18:	08103fb1 	.word	0x08103fb1
 8103f1c:	08103fb1 	.word	0x08103fb1
 8103f20:	08103f9b 	.word	0x08103f9b
 8103f24:	08103fb1 	.word	0x08103fb1
 8103f28:	08103fb1 	.word	0x08103fb1
 8103f2c:	08103fb1 	.word	0x08103fb1
 8103f30:	08103fb1 	.word	0x08103fb1
 8103f34:	08103fb1 	.word	0x08103fb1
 8103f38:	08103fb1 	.word	0x08103fb1
 8103f3c:	08103fb1 	.word	0x08103fb1
 8103f40:	08103fb9 	.word	0x08103fb9
 8103f44:	08103fb1 	.word	0x08103fb1
 8103f48:	08103fb1 	.word	0x08103fb1
 8103f4c:	08103fb1 	.word	0x08103fb1
 8103f50:	08103fb1 	.word	0x08103fb1
 8103f54:	08103fb1 	.word	0x08103fb1
 8103f58:	08103fb1 	.word	0x08103fb1
 8103f5c:	08103fb1 	.word	0x08103fb1
 8103f60:	08103fb9 	.word	0x08103fb9
 8103f64:	08103fb1 	.word	0x08103fb1
 8103f68:	08103fb1 	.word	0x08103fb1
 8103f6c:	08103fb1 	.word	0x08103fb1
 8103f70:	08103fb1 	.word	0x08103fb1
 8103f74:	08103fb1 	.word	0x08103fb1
 8103f78:	08103fb1 	.word	0x08103fb1
 8103f7c:	08103fb1 	.word	0x08103fb1
 8103f80:	08103fb9 	.word	0x08103fb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f88:	3308      	adds	r3, #8
 8103f8a:	2101      	movs	r1, #1
 8103f8c:	4618      	mov	r0, r3
 8103f8e:	f000 fd05 	bl	810499c <RCCEx_PLL2_Config>
 8103f92:	4603      	mov	r3, r0
 8103f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103f98:	e00f      	b.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f9e:	3328      	adds	r3, #40	@ 0x28
 8103fa0:	2101      	movs	r1, #1
 8103fa2:	4618      	mov	r0, r3
 8103fa4:	f000 fdac 	bl	8104b00 <RCCEx_PLL3_Config>
 8103fa8:	4603      	mov	r3, r0
 8103faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103fae:	e004      	b.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103fb0:	2301      	movs	r3, #1
 8103fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103fb6:	e000      	b.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8103fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fbe:	2b00      	cmp	r3, #0
 8103fc0:	d10a      	bne.n	8103fd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103fc2:	4bbf      	ldr	r3, [pc, #764]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103fd0:	4abb      	ldr	r2, [pc, #748]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103fd2:	430b      	orrs	r3, r1
 8103fd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8103fd6:	e003      	b.n	8103fe0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fe8:	f002 0302 	and.w	r3, r2, #2
 8103fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103ff0:	2300      	movs	r3, #0
 8103ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103ff6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103ffa:	460b      	mov	r3, r1
 8103ffc:	4313      	orrs	r3, r2
 8103ffe:	d041      	beq.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104006:	2b05      	cmp	r3, #5
 8104008:	d824      	bhi.n	8104054 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810400a:	a201      	add	r2, pc, #4	@ (adr r2, 8104010 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104010:	0810405d 	.word	0x0810405d
 8104014:	08104029 	.word	0x08104029
 8104018:	0810403f 	.word	0x0810403f
 810401c:	0810405d 	.word	0x0810405d
 8104020:	0810405d 	.word	0x0810405d
 8104024:	0810405d 	.word	0x0810405d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810402c:	3308      	adds	r3, #8
 810402e:	2101      	movs	r1, #1
 8104030:	4618      	mov	r0, r3
 8104032:	f000 fcb3 	bl	810499c <RCCEx_PLL2_Config>
 8104036:	4603      	mov	r3, r0
 8104038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810403c:	e00f      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104042:	3328      	adds	r3, #40	@ 0x28
 8104044:	2101      	movs	r1, #1
 8104046:	4618      	mov	r0, r3
 8104048:	f000 fd5a 	bl	8104b00 <RCCEx_PLL3_Config>
 810404c:	4603      	mov	r3, r0
 810404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104052:	e004      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104054:	2301      	movs	r3, #1
 8104056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810405a:	e000      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104062:	2b00      	cmp	r3, #0
 8104064:	d10a      	bne.n	810407c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104066:	4b96      	ldr	r3, [pc, #600]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810406a:	f023 0107 	bic.w	r1, r3, #7
 810406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104074:	4a92      	ldr	r2, [pc, #584]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104076:	430b      	orrs	r3, r1
 8104078:	6553      	str	r3, [r2, #84]	@ 0x54
 810407a:	e003      	b.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810407c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104088:	e9d3 2300 	ldrd	r2, r3, [r3]
 810408c:	f002 0304 	and.w	r3, r2, #4
 8104090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104094:	2300      	movs	r3, #0
 8104096:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810409a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810409e:	460b      	mov	r3, r1
 81040a0:	4313      	orrs	r3, r2
 81040a2:	d044      	beq.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81040ac:	2b05      	cmp	r3, #5
 81040ae:	d825      	bhi.n	81040fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81040b0:	a201      	add	r2, pc, #4	@ (adr r2, 81040b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040b6:	bf00      	nop
 81040b8:	08104105 	.word	0x08104105
 81040bc:	081040d1 	.word	0x081040d1
 81040c0:	081040e7 	.word	0x081040e7
 81040c4:	08104105 	.word	0x08104105
 81040c8:	08104105 	.word	0x08104105
 81040cc:	08104105 	.word	0x08104105
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040d4:	3308      	adds	r3, #8
 81040d6:	2101      	movs	r1, #1
 81040d8:	4618      	mov	r0, r3
 81040da:	f000 fc5f 	bl	810499c <RCCEx_PLL2_Config>
 81040de:	4603      	mov	r3, r0
 81040e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81040e4:	e00f      	b.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040ea:	3328      	adds	r3, #40	@ 0x28
 81040ec:	2101      	movs	r1, #1
 81040ee:	4618      	mov	r0, r3
 81040f0:	f000 fd06 	bl	8104b00 <RCCEx_PLL3_Config>
 81040f4:	4603      	mov	r3, r0
 81040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81040fa:	e004      	b.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81040fc:	2301      	movs	r3, #1
 81040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104102:	e000      	b.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8104104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810410a:	2b00      	cmp	r3, #0
 810410c:	d10b      	bne.n	8104126 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810410e:	4b6c      	ldr	r3, [pc, #432]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104112:	f023 0107 	bic.w	r1, r3, #7
 8104116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810411e:	4a68      	ldr	r2, [pc, #416]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104120:	430b      	orrs	r3, r1
 8104122:	6593      	str	r3, [r2, #88]	@ 0x58
 8104124:	e003      	b.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810412a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104136:	f002 0320 	and.w	r3, r2, #32
 810413a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810413e:	2300      	movs	r3, #0
 8104140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8104144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8104148:	460b      	mov	r3, r1
 810414a:	4313      	orrs	r3, r2
 810414c:	d055      	beq.n	81041fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810415a:	d033      	beq.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810415c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104160:	d82c      	bhi.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104166:	d02f      	beq.n	81041c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810416c:	d826      	bhi.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810416e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104172:	d02b      	beq.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8104174:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104178:	d820      	bhi.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810417a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810417e:	d012      	beq.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104184:	d81a      	bhi.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104186:	2b00      	cmp	r3, #0
 8104188:	d022      	beq.n	81041d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810418a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810418e:	d115      	bne.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104194:	3308      	adds	r3, #8
 8104196:	2100      	movs	r1, #0
 8104198:	4618      	mov	r0, r3
 810419a:	f000 fbff 	bl	810499c <RCCEx_PLL2_Config>
 810419e:	4603      	mov	r3, r0
 81041a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81041a4:	e015      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041aa:	3328      	adds	r3, #40	@ 0x28
 81041ac:	2102      	movs	r1, #2
 81041ae:	4618      	mov	r0, r3
 81041b0:	f000 fca6 	bl	8104b00 <RCCEx_PLL3_Config>
 81041b4:	4603      	mov	r3, r0
 81041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81041ba:	e00a      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041bc:	2301      	movs	r3, #1
 81041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81041c2:	e006      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81041c4:	bf00      	nop
 81041c6:	e004      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81041c8:	bf00      	nop
 81041ca:	e002      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81041cc:	bf00      	nop
 81041ce:	e000      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81041d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	d10b      	bne.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81041da:	4b39      	ldr	r3, [pc, #228]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81041ea:	4a35      	ldr	r2, [pc, #212]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81041ec:	430b      	orrs	r3, r1
 81041ee:	6553      	str	r3, [r2, #84]	@ 0x54
 81041f0:	e003      	b.n	81041fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81041f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104202:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8104206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810420a:	2300      	movs	r3, #0
 810420c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8104210:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8104214:	460b      	mov	r3, r1
 8104216:	4313      	orrs	r3, r2
 8104218:	d058      	beq.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810421e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104222:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8104226:	d033      	beq.n	8104290 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8104228:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810422c:	d82c      	bhi.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810422e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104232:	d02f      	beq.n	8104294 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8104234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104238:	d826      	bhi.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810423a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810423e:	d02b      	beq.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8104240:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8104244:	d820      	bhi.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810424a:	d012      	beq.n	8104272 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810424c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104250:	d81a      	bhi.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104252:	2b00      	cmp	r3, #0
 8104254:	d022      	beq.n	810429c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8104256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810425a:	d115      	bne.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104260:	3308      	adds	r3, #8
 8104262:	2100      	movs	r1, #0
 8104264:	4618      	mov	r0, r3
 8104266:	f000 fb99 	bl	810499c <RCCEx_PLL2_Config>
 810426a:	4603      	mov	r3, r0
 810426c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104270:	e015      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104276:	3328      	adds	r3, #40	@ 0x28
 8104278:	2102      	movs	r1, #2
 810427a:	4618      	mov	r0, r3
 810427c:	f000 fc40 	bl	8104b00 <RCCEx_PLL3_Config>
 8104280:	4603      	mov	r3, r0
 8104282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104286:	e00a      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104288:	2301      	movs	r3, #1
 810428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810428e:	e006      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104290:	bf00      	nop
 8104292:	e004      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104294:	bf00      	nop
 8104296:	e002      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104298:	bf00      	nop
 810429a:	e000      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810429c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810429e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d10e      	bne.n	81042c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81042a6:	4b06      	ldr	r3, [pc, #24]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81042aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81042b6:	4a02      	ldr	r2, [pc, #8]	@ (81042c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042b8:	430b      	orrs	r3, r1
 81042ba:	6593      	str	r3, [r2, #88]	@ 0x58
 81042bc:	e006      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81042be:	bf00      	nop
 81042c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81042d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81042dc:	2300      	movs	r3, #0
 81042de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81042e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81042e6:	460b      	mov	r3, r1
 81042e8:	4313      	orrs	r3, r2
 81042ea:	d055      	beq.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81042f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81042f8:	d033      	beq.n	8104362 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81042fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81042fe:	d82c      	bhi.n	810435a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104304:	d02f      	beq.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8104306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810430a:	d826      	bhi.n	810435a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810430c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104310:	d02b      	beq.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8104312:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104316:	d820      	bhi.n	810435a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810431c:	d012      	beq.n	8104344 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810431e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104322:	d81a      	bhi.n	810435a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104324:	2b00      	cmp	r3, #0
 8104326:	d022      	beq.n	810436e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8104328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810432c:	d115      	bne.n	810435a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104332:	3308      	adds	r3, #8
 8104334:	2100      	movs	r1, #0
 8104336:	4618      	mov	r0, r3
 8104338:	f000 fb30 	bl	810499c <RCCEx_PLL2_Config>
 810433c:	4603      	mov	r3, r0
 810433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104342:	e015      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104348:	3328      	adds	r3, #40	@ 0x28
 810434a:	2102      	movs	r1, #2
 810434c:	4618      	mov	r0, r3
 810434e:	f000 fbd7 	bl	8104b00 <RCCEx_PLL3_Config>
 8104352:	4603      	mov	r3, r0
 8104354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104358:	e00a      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810435a:	2301      	movs	r3, #1
 810435c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104360:	e006      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104362:	bf00      	nop
 8104364:	e004      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104366:	bf00      	nop
 8104368:	e002      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810436a:	bf00      	nop
 810436c:	e000      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810436e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104374:	2b00      	cmp	r3, #0
 8104376:	d10b      	bne.n	8104390 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104378:	4ba1      	ldr	r3, [pc, #644]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810437c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8104380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104388:	4a9d      	ldr	r2, [pc, #628]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810438a:	430b      	orrs	r3, r1
 810438c:	6593      	str	r3, [r2, #88]	@ 0x58
 810438e:	e003      	b.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043a0:	f002 0308 	and.w	r3, r2, #8
 81043a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81043a8:	2300      	movs	r3, #0
 81043aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81043ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81043b2:	460b      	mov	r3, r1
 81043b4:	4313      	orrs	r3, r2
 81043b6:	d01e      	beq.n	81043f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81043c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81043c4:	d10c      	bne.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043ca:	3328      	adds	r3, #40	@ 0x28
 81043cc:	2102      	movs	r1, #2
 81043ce:	4618      	mov	r0, r3
 81043d0:	f000 fb96 	bl	8104b00 <RCCEx_PLL3_Config>
 81043d4:	4603      	mov	r3, r0
 81043d6:	2b00      	cmp	r3, #0
 81043d8:	d002      	beq.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81043da:	2301      	movs	r3, #1
 81043dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81043e0:	4b87      	ldr	r3, [pc, #540]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81043e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81043f0:	4a83      	ldr	r2, [pc, #524]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81043f2:	430b      	orrs	r3, r1
 81043f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043fe:	f002 0310 	and.w	r3, r2, #16
 8104402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8104406:	2300      	movs	r3, #0
 8104408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810440c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8104410:	460b      	mov	r3, r1
 8104412:	4313      	orrs	r3, r2
 8104414:	d01e      	beq.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810441a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810441e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104422:	d10c      	bne.n	810443e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104428:	3328      	adds	r3, #40	@ 0x28
 810442a:	2102      	movs	r1, #2
 810442c:	4618      	mov	r0, r3
 810442e:	f000 fb67 	bl	8104b00 <RCCEx_PLL3_Config>
 8104432:	4603      	mov	r3, r0
 8104434:	2b00      	cmp	r3, #0
 8104436:	d002      	beq.n	810443e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8104438:	2301      	movs	r3, #1
 810443a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810443e:	4b70      	ldr	r3, [pc, #448]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104442:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810444a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810444e:	4a6c      	ldr	r2, [pc, #432]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104450:	430b      	orrs	r3, r1
 8104452:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810445c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8104460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8104464:	2300      	movs	r3, #0
 8104466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810446a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810446e:	460b      	mov	r3, r1
 8104470:	4313      	orrs	r3, r2
 8104472:	d03e      	beq.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810447c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104480:	d022      	beq.n	81044c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8104482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104486:	d81b      	bhi.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8104488:	2b00      	cmp	r3, #0
 810448a:	d003      	beq.n	8104494 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104490:	d00b      	beq.n	81044aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8104492:	e015      	b.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104498:	3308      	adds	r3, #8
 810449a:	2100      	movs	r1, #0
 810449c:	4618      	mov	r0, r3
 810449e:	f000 fa7d 	bl	810499c <RCCEx_PLL2_Config>
 81044a2:	4603      	mov	r3, r0
 81044a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81044a8:	e00f      	b.n	81044ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044ae:	3328      	adds	r3, #40	@ 0x28
 81044b0:	2102      	movs	r1, #2
 81044b2:	4618      	mov	r0, r3
 81044b4:	f000 fb24 	bl	8104b00 <RCCEx_PLL3_Config>
 81044b8:	4603      	mov	r3, r0
 81044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81044be:	e004      	b.n	81044ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81044c0:	2301      	movs	r3, #1
 81044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81044c6:	e000      	b.n	81044ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81044c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d10b      	bne.n	81044ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81044d2:	4b4b      	ldr	r3, [pc, #300]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81044d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81044e2:	4a47      	ldr	r2, [pc, #284]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81044e4:	430b      	orrs	r3, r1
 81044e6:	6593      	str	r3, [r2, #88]	@ 0x58
 81044e8:	e003      	b.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81044ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81044fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104500:	2300      	movs	r3, #0
 8104502:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104504:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8104508:	460b      	mov	r3, r1
 810450a:	4313      	orrs	r3, r2
 810450c:	d03b      	beq.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104516:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810451a:	d01f      	beq.n	810455c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810451c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104520:	d818      	bhi.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8104522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104526:	d003      	beq.n	8104530 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8104528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810452c:	d007      	beq.n	810453e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810452e:	e011      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104530:	4b33      	ldr	r3, [pc, #204]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104534:	4a32      	ldr	r2, [pc, #200]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810453a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810453c:	e00f      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104542:	3328      	adds	r3, #40	@ 0x28
 8104544:	2101      	movs	r1, #1
 8104546:	4618      	mov	r0, r3
 8104548:	f000 fada 	bl	8104b00 <RCCEx_PLL3_Config>
 810454c:	4603      	mov	r3, r0
 810454e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8104552:	e004      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104554:	2301      	movs	r3, #1
 8104556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810455a:	e000      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 810455c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810455e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104562:	2b00      	cmp	r3, #0
 8104564:	d10b      	bne.n	810457e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104566:	4b26      	ldr	r3, [pc, #152]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810456a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104576:	4a22      	ldr	r2, [pc, #136]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104578:	430b      	orrs	r3, r1
 810457a:	6553      	str	r3, [r2, #84]	@ 0x54
 810457c:	e003      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810457e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810458e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8104592:	673b      	str	r3, [r7, #112]	@ 0x70
 8104594:	2300      	movs	r3, #0
 8104596:	677b      	str	r3, [r7, #116]	@ 0x74
 8104598:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810459c:	460b      	mov	r3, r1
 810459e:	4313      	orrs	r3, r2
 81045a0:	d034      	beq.n	810460c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d003      	beq.n	81045b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81045ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81045b0:	d007      	beq.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81045b2:	e011      	b.n	81045d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045b4:	4b12      	ldr	r3, [pc, #72]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045b8:	4a11      	ldr	r2, [pc, #68]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81045be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81045c0:	e00e      	b.n	81045e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045c6:	3308      	adds	r3, #8
 81045c8:	2102      	movs	r1, #2
 81045ca:	4618      	mov	r0, r3
 81045cc:	f000 f9e6 	bl	810499c <RCCEx_PLL2_Config>
 81045d0:	4603      	mov	r3, r0
 81045d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81045d6:	e003      	b.n	81045e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81045d8:	2301      	movs	r3, #1
 81045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81045e4:	2b00      	cmp	r3, #0
 81045e6:	d10d      	bne.n	8104604 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81045e8:	4b05      	ldr	r3, [pc, #20]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81045ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81045f6:	4a02      	ldr	r2, [pc, #8]	@ (8104600 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045f8:	430b      	orrs	r3, r1
 81045fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81045fc:	e006      	b.n	810460c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81045fe:	bf00      	nop
 8104600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104614:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104618:	66bb      	str	r3, [r7, #104]	@ 0x68
 810461a:	2300      	movs	r3, #0
 810461c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810461e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8104622:	460b      	mov	r3, r1
 8104624:	4313      	orrs	r3, r2
 8104626:	d00c      	beq.n	8104642 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810462c:	3328      	adds	r3, #40	@ 0x28
 810462e:	2102      	movs	r1, #2
 8104630:	4618      	mov	r0, r3
 8104632:	f000 fa65 	bl	8104b00 <RCCEx_PLL3_Config>
 8104636:	4603      	mov	r3, r0
 8104638:	2b00      	cmp	r3, #0
 810463a:	d002      	beq.n	8104642 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 810463c:	2301      	movs	r3, #1
 810463e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104646:	e9d3 2300 	ldrd	r2, r3, [r3]
 810464a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810464e:	663b      	str	r3, [r7, #96]	@ 0x60
 8104650:	2300      	movs	r3, #0
 8104652:	667b      	str	r3, [r7, #100]	@ 0x64
 8104654:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104658:	460b      	mov	r3, r1
 810465a:	4313      	orrs	r3, r2
 810465c:	d038      	beq.n	81046d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810466a:	d018      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 810466c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104670:	d811      	bhi.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104676:	d014      	beq.n	81046a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810467c:	d80b      	bhi.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810467e:	2b00      	cmp	r3, #0
 8104680:	d011      	beq.n	81046a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8104682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104686:	d106      	bne.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104688:	4bc3      	ldr	r3, [pc, #780]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810468c:	4ac2      	ldr	r2, [pc, #776]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810468e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104694:	e008      	b.n	81046a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104696:	2301      	movs	r3, #1
 8104698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810469c:	e004      	b.n	81046a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810469e:	bf00      	nop
 81046a0:	e002      	b.n	81046a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81046a2:	bf00      	nop
 81046a4:	e000      	b.n	81046a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81046a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81046ac:	2b00      	cmp	r3, #0
 81046ae:	d10b      	bne.n	81046c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81046b0:	4bb9      	ldr	r3, [pc, #740]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81046b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81046c0:	4ab5      	ldr	r2, [pc, #724]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81046c2:	430b      	orrs	r3, r1
 81046c4:	6553      	str	r3, [r2, #84]	@ 0x54
 81046c6:	e003      	b.n	81046d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81046cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81046dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 81046de:	2300      	movs	r3, #0
 81046e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81046e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81046e6:	460b      	mov	r3, r1
 81046e8:	4313      	orrs	r3, r2
 81046ea:	d009      	beq.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81046ec:	4baa      	ldr	r3, [pc, #680]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81046ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81046f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81046fa:	4aa7      	ldr	r2, [pc, #668]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81046fc:	430b      	orrs	r3, r1
 81046fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104708:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810470c:	653b      	str	r3, [r7, #80]	@ 0x50
 810470e:	2300      	movs	r3, #0
 8104710:	657b      	str	r3, [r7, #84]	@ 0x54
 8104712:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104716:	460b      	mov	r3, r1
 8104718:	4313      	orrs	r3, r2
 810471a:	d00a      	beq.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810471c:	4b9e      	ldr	r3, [pc, #632]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810471e:	691b      	ldr	r3, [r3, #16]
 8104720:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8104724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104728:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810472c:	4a9a      	ldr	r2, [pc, #616]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810472e:	430b      	orrs	r3, r1
 8104730:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810473a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810473e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104740:	2300      	movs	r3, #0
 8104742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104744:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8104748:	460b      	mov	r3, r1
 810474a:	4313      	orrs	r3, r2
 810474c:	d009      	beq.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810474e:	4b92      	ldr	r3, [pc, #584]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104752:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8104756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810475a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810475c:	4a8e      	ldr	r2, [pc, #568]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810475e:	430b      	orrs	r3, r1
 8104760:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810476a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810476e:	643b      	str	r3, [r7, #64]	@ 0x40
 8104770:	2300      	movs	r3, #0
 8104772:	647b      	str	r3, [r7, #68]	@ 0x44
 8104774:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104778:	460b      	mov	r3, r1
 810477a:	4313      	orrs	r3, r2
 810477c:	d00e      	beq.n	810479c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810477e:	4b86      	ldr	r3, [pc, #536]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104780:	691b      	ldr	r3, [r3, #16]
 8104782:	4a85      	ldr	r2, [pc, #532]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104784:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104788:	6113      	str	r3, [r2, #16]
 810478a:	4b83      	ldr	r3, [pc, #524]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810478c:	6919      	ldr	r1, [r3, #16]
 810478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104796:	4a80      	ldr	r2, [pc, #512]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104798:	430b      	orrs	r3, r1
 810479a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81047a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 81047aa:	2300      	movs	r3, #0
 81047ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81047b2:	460b      	mov	r3, r1
 81047b4:	4313      	orrs	r3, r2
 81047b6:	d009      	beq.n	81047cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81047b8:	4b77      	ldr	r3, [pc, #476]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81047bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047c6:	4a74      	ldr	r2, [pc, #464]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047c8:	430b      	orrs	r3, r1
 81047ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81047d8:	633b      	str	r3, [r7, #48]	@ 0x30
 81047da:	2300      	movs	r3, #0
 81047dc:	637b      	str	r3, [r7, #52]	@ 0x34
 81047de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81047e2:	460b      	mov	r3, r1
 81047e4:	4313      	orrs	r3, r2
 81047e6:	d00a      	beq.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81047e8:	4b6b      	ldr	r3, [pc, #428]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81047f8:	4a67      	ldr	r2, [pc, #412]	@ (8104998 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81047fa:	430b      	orrs	r3, r1
 81047fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104806:	2100      	movs	r1, #0
 8104808:	62b9      	str	r1, [r7, #40]	@ 0x28
 810480a:	f003 0301 	and.w	r3, r3, #1
 810480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104810:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104814:	460b      	mov	r3, r1
 8104816:	4313      	orrs	r3, r2
 8104818:	d011      	beq.n	810483e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810481e:	3308      	adds	r3, #8
 8104820:	2100      	movs	r1, #0
 8104822:	4618      	mov	r0, r3
 8104824:	f000 f8ba 	bl	810499c <RCCEx_PLL2_Config>
 8104828:	4603      	mov	r3, r0
 810482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104832:	2b00      	cmp	r3, #0
 8104834:	d003      	beq.n	810483e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810483a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104846:	2100      	movs	r1, #0
 8104848:	6239      	str	r1, [r7, #32]
 810484a:	f003 0302 	and.w	r3, r3, #2
 810484e:	627b      	str	r3, [r7, #36]	@ 0x24
 8104850:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104854:	460b      	mov	r3, r1
 8104856:	4313      	orrs	r3, r2
 8104858:	d011      	beq.n	810487e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810485e:	3308      	adds	r3, #8
 8104860:	2101      	movs	r1, #1
 8104862:	4618      	mov	r0, r3
 8104864:	f000 f89a 	bl	810499c <RCCEx_PLL2_Config>
 8104868:	4603      	mov	r3, r0
 810486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104872:	2b00      	cmp	r3, #0
 8104874:	d003      	beq.n	810487e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810487a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104886:	2100      	movs	r1, #0
 8104888:	61b9      	str	r1, [r7, #24]
 810488a:	f003 0304 	and.w	r3, r3, #4
 810488e:	61fb      	str	r3, [r7, #28]
 8104890:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104894:	460b      	mov	r3, r1
 8104896:	4313      	orrs	r3, r2
 8104898:	d011      	beq.n	81048be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810489e:	3308      	adds	r3, #8
 81048a0:	2102      	movs	r1, #2
 81048a2:	4618      	mov	r0, r3
 81048a4:	f000 f87a 	bl	810499c <RCCEx_PLL2_Config>
 81048a8:	4603      	mov	r3, r0
 81048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81048b2:	2b00      	cmp	r3, #0
 81048b4:	d003      	beq.n	81048be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81048ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048c6:	2100      	movs	r1, #0
 81048c8:	6139      	str	r1, [r7, #16]
 81048ca:	f003 0308 	and.w	r3, r3, #8
 81048ce:	617b      	str	r3, [r7, #20]
 81048d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81048d4:	460b      	mov	r3, r1
 81048d6:	4313      	orrs	r3, r2
 81048d8:	d011      	beq.n	81048fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048de:	3328      	adds	r3, #40	@ 0x28
 81048e0:	2100      	movs	r1, #0
 81048e2:	4618      	mov	r0, r3
 81048e4:	f000 f90c 	bl	8104b00 <RCCEx_PLL3_Config>
 81048e8:	4603      	mov	r3, r0
 81048ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d003      	beq.n	81048fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81048fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104906:	2100      	movs	r1, #0
 8104908:	60b9      	str	r1, [r7, #8]
 810490a:	f003 0310 	and.w	r3, r3, #16
 810490e:	60fb      	str	r3, [r7, #12]
 8104910:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104914:	460b      	mov	r3, r1
 8104916:	4313      	orrs	r3, r2
 8104918:	d011      	beq.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810491e:	3328      	adds	r3, #40	@ 0x28
 8104920:	2101      	movs	r1, #1
 8104922:	4618      	mov	r0, r3
 8104924:	f000 f8ec 	bl	8104b00 <RCCEx_PLL3_Config>
 8104928:	4603      	mov	r3, r0
 810492a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104932:	2b00      	cmp	r3, #0
 8104934:	d003      	beq.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810493a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104946:	2100      	movs	r1, #0
 8104948:	6039      	str	r1, [r7, #0]
 810494a:	f003 0320 	and.w	r3, r3, #32
 810494e:	607b      	str	r3, [r7, #4]
 8104950:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104954:	460b      	mov	r3, r1
 8104956:	4313      	orrs	r3, r2
 8104958:	d011      	beq.n	810497e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810495e:	3328      	adds	r3, #40	@ 0x28
 8104960:	2102      	movs	r1, #2
 8104962:	4618      	mov	r0, r3
 8104964:	f000 f8cc 	bl	8104b00 <RCCEx_PLL3_Config>
 8104968:	4603      	mov	r3, r0
 810496a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810496e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104972:	2b00      	cmp	r3, #0
 8104974:	d003      	beq.n	810497e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810497a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810497e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8104982:	2b00      	cmp	r3, #0
 8104984:	d101      	bne.n	810498a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104986:	2300      	movs	r3, #0
 8104988:	e000      	b.n	810498c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810498a:	2301      	movs	r3, #1
}
 810498c:	4618      	mov	r0, r3
 810498e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8104992:	46bd      	mov	sp, r7
 8104994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104998:	58024400 	.word	0x58024400

0810499c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810499c:	b580      	push	{r7, lr}
 810499e:	b084      	sub	sp, #16
 81049a0:	af00      	add	r7, sp, #0
 81049a2:	6078      	str	r0, [r7, #4]
 81049a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81049a6:	2300      	movs	r3, #0
 81049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81049aa:	4b54      	ldr	r3, [pc, #336]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 81049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049ae:	f003 0303 	and.w	r3, r3, #3
 81049b2:	2b03      	cmp	r3, #3
 81049b4:	d101      	bne.n	81049ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81049b6:	2301      	movs	r3, #1
 81049b8:	e09b      	b.n	8104af2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81049ba:	4b50      	ldr	r3, [pc, #320]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 81049bc:	681b      	ldr	r3, [r3, #0]
 81049be:	4a4f      	ldr	r2, [pc, #316]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 81049c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81049c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81049c6:	f7fe f82f 	bl	8102a28 <HAL_GetTick>
 81049ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81049cc:	e008      	b.n	81049e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81049ce:	f7fe f82b 	bl	8102a28 <HAL_GetTick>
 81049d2:	4602      	mov	r2, r0
 81049d4:	68bb      	ldr	r3, [r7, #8]
 81049d6:	1ad3      	subs	r3, r2, r3
 81049d8:	2b02      	cmp	r3, #2
 81049da:	d901      	bls.n	81049e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81049dc:	2303      	movs	r3, #3
 81049de:	e088      	b.n	8104af2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81049e0:	4b46      	ldr	r3, [pc, #280]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81049e8:	2b00      	cmp	r3, #0
 81049ea:	d1f0      	bne.n	81049ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81049ec:	4b43      	ldr	r3, [pc, #268]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 81049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	681b      	ldr	r3, [r3, #0]
 81049f8:	031b      	lsls	r3, r3, #12
 81049fa:	4940      	ldr	r1, [pc, #256]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 81049fc:	4313      	orrs	r3, r2
 81049fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	685b      	ldr	r3, [r3, #4]
 8104a04:	3b01      	subs	r3, #1
 8104a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104a0a:	687b      	ldr	r3, [r7, #4]
 8104a0c:	689b      	ldr	r3, [r3, #8]
 8104a0e:	3b01      	subs	r3, #1
 8104a10:	025b      	lsls	r3, r3, #9
 8104a12:	b29b      	uxth	r3, r3
 8104a14:	431a      	orrs	r2, r3
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	68db      	ldr	r3, [r3, #12]
 8104a1a:	3b01      	subs	r3, #1
 8104a1c:	041b      	lsls	r3, r3, #16
 8104a1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104a22:	431a      	orrs	r2, r3
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	691b      	ldr	r3, [r3, #16]
 8104a28:	3b01      	subs	r3, #1
 8104a2a:	061b      	lsls	r3, r3, #24
 8104a2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104a30:	4932      	ldr	r1, [pc, #200]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a32:	4313      	orrs	r3, r2
 8104a34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104a36:	4b31      	ldr	r3, [pc, #196]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	695b      	ldr	r3, [r3, #20]
 8104a42:	492e      	ldr	r1, [pc, #184]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a44:	4313      	orrs	r3, r2
 8104a46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104a48:	4b2c      	ldr	r3, [pc, #176]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a4c:	f023 0220 	bic.w	r2, r3, #32
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	699b      	ldr	r3, [r3, #24]
 8104a54:	4929      	ldr	r1, [pc, #164]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a56:	4313      	orrs	r3, r2
 8104a58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104a5a:	4b28      	ldr	r3, [pc, #160]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a5e:	4a27      	ldr	r2, [pc, #156]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a60:	f023 0310 	bic.w	r3, r3, #16
 8104a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104a66:	4b25      	ldr	r3, [pc, #148]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104a6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104a72:	687a      	ldr	r2, [r7, #4]
 8104a74:	69d2      	ldr	r2, [r2, #28]
 8104a76:	00d2      	lsls	r2, r2, #3
 8104a78:	4920      	ldr	r1, [pc, #128]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a7a:	4313      	orrs	r3, r2
 8104a7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a82:	4a1e      	ldr	r2, [pc, #120]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a84:	f043 0310 	orr.w	r3, r3, #16
 8104a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104a8a:	683b      	ldr	r3, [r7, #0]
 8104a8c:	2b00      	cmp	r3, #0
 8104a8e:	d106      	bne.n	8104a9e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104a90:	4b1a      	ldr	r3, [pc, #104]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a94:	4a19      	ldr	r2, [pc, #100]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104a96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104a9c:	e00f      	b.n	8104abe <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104a9e:	683b      	ldr	r3, [r7, #0]
 8104aa0:	2b01      	cmp	r3, #1
 8104aa2:	d106      	bne.n	8104ab2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104aa4:	4b15      	ldr	r3, [pc, #84]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104aa8:	4a14      	ldr	r2, [pc, #80]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104ab0:	e005      	b.n	8104abe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104ab2:	4b12      	ldr	r3, [pc, #72]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ab6:	4a11      	ldr	r2, [pc, #68]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104abe:	4b0f      	ldr	r3, [pc, #60]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8104ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104aca:	f7fd ffad 	bl	8102a28 <HAL_GetTick>
 8104ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104ad0:	e008      	b.n	8104ae4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104ad2:	f7fd ffa9 	bl	8102a28 <HAL_GetTick>
 8104ad6:	4602      	mov	r2, r0
 8104ad8:	68bb      	ldr	r3, [r7, #8]
 8104ada:	1ad3      	subs	r3, r2, r3
 8104adc:	2b02      	cmp	r3, #2
 8104ade:	d901      	bls.n	8104ae4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104ae0:	2303      	movs	r3, #3
 8104ae2:	e006      	b.n	8104af2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104ae4:	4b05      	ldr	r3, [pc, #20]	@ (8104afc <RCCEx_PLL2_Config+0x160>)
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104aec:	2b00      	cmp	r3, #0
 8104aee:	d0f0      	beq.n	8104ad2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8104af2:	4618      	mov	r0, r3
 8104af4:	3710      	adds	r7, #16
 8104af6:	46bd      	mov	sp, r7
 8104af8:	bd80      	pop	{r7, pc}
 8104afa:	bf00      	nop
 8104afc:	58024400 	.word	0x58024400

08104b00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104b00:	b580      	push	{r7, lr}
 8104b02:	b084      	sub	sp, #16
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
 8104b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104b0a:	2300      	movs	r3, #0
 8104b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104b0e:	4b54      	ldr	r3, [pc, #336]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104b12:	f003 0303 	and.w	r3, r3, #3
 8104b16:	2b03      	cmp	r3, #3
 8104b18:	d101      	bne.n	8104b1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104b1a:	2301      	movs	r3, #1
 8104b1c:	e09b      	b.n	8104c56 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104b1e:	4b50      	ldr	r3, [pc, #320]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	4a4f      	ldr	r2, [pc, #316]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104b2a:	f7fd ff7d 	bl	8102a28 <HAL_GetTick>
 8104b2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104b30:	e008      	b.n	8104b44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104b32:	f7fd ff79 	bl	8102a28 <HAL_GetTick>
 8104b36:	4602      	mov	r2, r0
 8104b38:	68bb      	ldr	r3, [r7, #8]
 8104b3a:	1ad3      	subs	r3, r2, r3
 8104b3c:	2b02      	cmp	r3, #2
 8104b3e:	d901      	bls.n	8104b44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104b40:	2303      	movs	r3, #3
 8104b42:	e088      	b.n	8104c56 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104b44:	4b46      	ldr	r3, [pc, #280]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104b4c:	2b00      	cmp	r3, #0
 8104b4e:	d1f0      	bne.n	8104b32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104b50:	4b43      	ldr	r3, [pc, #268]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104b54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	051b      	lsls	r3, r3, #20
 8104b5e:	4940      	ldr	r1, [pc, #256]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b60:	4313      	orrs	r3, r2
 8104b62:	628b      	str	r3, [r1, #40]	@ 0x28
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	685b      	ldr	r3, [r3, #4]
 8104b68:	3b01      	subs	r3, #1
 8104b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	689b      	ldr	r3, [r3, #8]
 8104b72:	3b01      	subs	r3, #1
 8104b74:	025b      	lsls	r3, r3, #9
 8104b76:	b29b      	uxth	r3, r3
 8104b78:	431a      	orrs	r2, r3
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	68db      	ldr	r3, [r3, #12]
 8104b7e:	3b01      	subs	r3, #1
 8104b80:	041b      	lsls	r3, r3, #16
 8104b82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104b86:	431a      	orrs	r2, r3
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	691b      	ldr	r3, [r3, #16]
 8104b8c:	3b01      	subs	r3, #1
 8104b8e:	061b      	lsls	r3, r3, #24
 8104b90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104b94:	4932      	ldr	r1, [pc, #200]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b96:	4313      	orrs	r3, r2
 8104b98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104b9a:	4b31      	ldr	r3, [pc, #196]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	695b      	ldr	r3, [r3, #20]
 8104ba6:	492e      	ldr	r1, [pc, #184]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104ba8:	4313      	orrs	r3, r2
 8104baa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104bac:	4b2c      	ldr	r3, [pc, #176]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	699b      	ldr	r3, [r3, #24]
 8104bb8:	4929      	ldr	r1, [pc, #164]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bba:	4313      	orrs	r3, r2
 8104bbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104bbe:	4b28      	ldr	r3, [pc, #160]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bc2:	4a27      	ldr	r2, [pc, #156]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104bca:	4b25      	ldr	r3, [pc, #148]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104bd2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104bd6:	687a      	ldr	r2, [r7, #4]
 8104bd8:	69d2      	ldr	r2, [r2, #28]
 8104bda:	00d2      	lsls	r2, r2, #3
 8104bdc:	4920      	ldr	r1, [pc, #128]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bde:	4313      	orrs	r3, r2
 8104be0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104be2:	4b1f      	ldr	r3, [pc, #124]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104be6:	4a1e      	ldr	r2, [pc, #120]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104bee:	683b      	ldr	r3, [r7, #0]
 8104bf0:	2b00      	cmp	r3, #0
 8104bf2:	d106      	bne.n	8104c02 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bf8:	4a19      	ldr	r2, [pc, #100]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104bfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104c00:	e00f      	b.n	8104c22 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104c02:	683b      	ldr	r3, [r7, #0]
 8104c04:	2b01      	cmp	r3, #1
 8104c06:	d106      	bne.n	8104c16 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104c08:	4b15      	ldr	r3, [pc, #84]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c0c:	4a14      	ldr	r2, [pc, #80]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104c14:	e005      	b.n	8104c22 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104c16:	4b12      	ldr	r3, [pc, #72]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c1a:	4a11      	ldr	r2, [pc, #68]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104c22:	4b0f      	ldr	r3, [pc, #60]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	4a0e      	ldr	r2, [pc, #56]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c2e:	f7fd fefb 	bl	8102a28 <HAL_GetTick>
 8104c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104c34:	e008      	b.n	8104c48 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104c36:	f7fd fef7 	bl	8102a28 <HAL_GetTick>
 8104c3a:	4602      	mov	r2, r0
 8104c3c:	68bb      	ldr	r3, [r7, #8]
 8104c3e:	1ad3      	subs	r3, r2, r3
 8104c40:	2b02      	cmp	r3, #2
 8104c42:	d901      	bls.n	8104c48 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104c44:	2303      	movs	r3, #3
 8104c46:	e006      	b.n	8104c56 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104c48:	4b05      	ldr	r3, [pc, #20]	@ (8104c60 <RCCEx_PLL3_Config+0x160>)
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104c50:	2b00      	cmp	r3, #0
 8104c52:	d0f0      	beq.n	8104c36 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8104c56:	4618      	mov	r0, r3
 8104c58:	3710      	adds	r7, #16
 8104c5a:	46bd      	mov	sp, r7
 8104c5c:	bd80      	pop	{r7, pc}
 8104c5e:	bf00      	nop
 8104c60:	58024400 	.word	0x58024400

08104c64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104c64:	b580      	push	{r7, lr}
 8104c66:	b084      	sub	sp, #16
 8104c68:	af00      	add	r7, sp, #0
 8104c6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	2b00      	cmp	r3, #0
 8104c70:	d101      	bne.n	8104c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104c72:	2301      	movs	r3, #1
 8104c74:	e10f      	b.n	8104e96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	2200      	movs	r2, #0
 8104c7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	4a87      	ldr	r2, [pc, #540]	@ (8104ea0 <HAL_SPI_Init+0x23c>)
 8104c82:	4293      	cmp	r3, r2
 8104c84:	d00f      	beq.n	8104ca6 <HAL_SPI_Init+0x42>
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	681b      	ldr	r3, [r3, #0]
 8104c8a:	4a86      	ldr	r2, [pc, #536]	@ (8104ea4 <HAL_SPI_Init+0x240>)
 8104c8c:	4293      	cmp	r3, r2
 8104c8e:	d00a      	beq.n	8104ca6 <HAL_SPI_Init+0x42>
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	4a84      	ldr	r2, [pc, #528]	@ (8104ea8 <HAL_SPI_Init+0x244>)
 8104c96:	4293      	cmp	r3, r2
 8104c98:	d005      	beq.n	8104ca6 <HAL_SPI_Init+0x42>
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	68db      	ldr	r3, [r3, #12]
 8104c9e:	2b0f      	cmp	r3, #15
 8104ca0:	d901      	bls.n	8104ca6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104ca2:	2301      	movs	r3, #1
 8104ca4:	e0f7      	b.n	8104e96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104ca6:	6878      	ldr	r0, [r7, #4]
 8104ca8:	f000 fd06 	bl	81056b8 <SPI_GetPacketSize>
 8104cac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	4a7b      	ldr	r2, [pc, #492]	@ (8104ea0 <HAL_SPI_Init+0x23c>)
 8104cb4:	4293      	cmp	r3, r2
 8104cb6:	d00c      	beq.n	8104cd2 <HAL_SPI_Init+0x6e>
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	681b      	ldr	r3, [r3, #0]
 8104cbc:	4a79      	ldr	r2, [pc, #484]	@ (8104ea4 <HAL_SPI_Init+0x240>)
 8104cbe:	4293      	cmp	r3, r2
 8104cc0:	d007      	beq.n	8104cd2 <HAL_SPI_Init+0x6e>
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	681b      	ldr	r3, [r3, #0]
 8104cc6:	4a78      	ldr	r2, [pc, #480]	@ (8104ea8 <HAL_SPI_Init+0x244>)
 8104cc8:	4293      	cmp	r3, r2
 8104cca:	d002      	beq.n	8104cd2 <HAL_SPI_Init+0x6e>
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	2b08      	cmp	r3, #8
 8104cd0:	d811      	bhi.n	8104cf6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104cd6:	4a72      	ldr	r2, [pc, #456]	@ (8104ea0 <HAL_SPI_Init+0x23c>)
 8104cd8:	4293      	cmp	r3, r2
 8104cda:	d009      	beq.n	8104cf0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	681b      	ldr	r3, [r3, #0]
 8104ce0:	4a70      	ldr	r2, [pc, #448]	@ (8104ea4 <HAL_SPI_Init+0x240>)
 8104ce2:	4293      	cmp	r3, r2
 8104ce4:	d004      	beq.n	8104cf0 <HAL_SPI_Init+0x8c>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	4a6f      	ldr	r2, [pc, #444]	@ (8104ea8 <HAL_SPI_Init+0x244>)
 8104cec:	4293      	cmp	r3, r2
 8104cee:	d104      	bne.n	8104cfa <HAL_SPI_Init+0x96>
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	2b10      	cmp	r3, #16
 8104cf4:	d901      	bls.n	8104cfa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8104cf6:	2301      	movs	r3, #1
 8104cf8:	e0cd      	b.n	8104e96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8104d00:	b2db      	uxtb	r3, r3
 8104d02:	2b00      	cmp	r3, #0
 8104d04:	d106      	bne.n	8104d14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	2200      	movs	r2, #0
 8104d0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104d0e:	6878      	ldr	r0, [r7, #4]
 8104d10:	f7fd fc56 	bl	81025c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	2202      	movs	r2, #2
 8104d18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	681b      	ldr	r3, [r3, #0]
 8104d20:	681a      	ldr	r2, [r3, #0]
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	f022 0201 	bic.w	r2, r2, #1
 8104d2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	689b      	ldr	r3, [r3, #8]
 8104d32:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8104d36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	699b      	ldr	r3, [r3, #24]
 8104d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104d40:	d119      	bne.n	8104d76 <HAL_SPI_Init+0x112>
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	685b      	ldr	r3, [r3, #4]
 8104d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104d4a:	d103      	bne.n	8104d54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d008      	beq.n	8104d66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104d58:	2b00      	cmp	r3, #0
 8104d5a:	d10c      	bne.n	8104d76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104d64:	d107      	bne.n	8104d76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	681b      	ldr	r3, [r3, #0]
 8104d6a:	681a      	ldr	r2, [r3, #0]
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	681b      	ldr	r3, [r3, #0]
 8104d70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8104d74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8104d76:	687b      	ldr	r3, [r7, #4]
 8104d78:	685b      	ldr	r3, [r3, #4]
 8104d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104d7e:	2b00      	cmp	r3, #0
 8104d80:	d00f      	beq.n	8104da2 <HAL_SPI_Init+0x13e>
 8104d82:	687b      	ldr	r3, [r7, #4]
 8104d84:	68db      	ldr	r3, [r3, #12]
 8104d86:	2b06      	cmp	r3, #6
 8104d88:	d90b      	bls.n	8104da2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	430a      	orrs	r2, r1
 8104d9e:	601a      	str	r2, [r3, #0]
 8104da0:	e007      	b.n	8104db2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	681a      	ldr	r2, [r3, #0]
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104db0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	69da      	ldr	r2, [r3, #28]
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104dba:	431a      	orrs	r2, r3
 8104dbc:	68bb      	ldr	r3, [r7, #8]
 8104dbe:	431a      	orrs	r2, r3
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104dc4:	ea42 0103 	orr.w	r1, r2, r3
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	68da      	ldr	r2, [r3, #12]
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	681b      	ldr	r3, [r3, #0]
 8104dd0:	430a      	orrs	r2, r1
 8104dd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104ddc:	431a      	orrs	r2, r3
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104de2:	431a      	orrs	r2, r3
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	699b      	ldr	r3, [r3, #24]
 8104de8:	431a      	orrs	r2, r3
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	691b      	ldr	r3, [r3, #16]
 8104dee:	431a      	orrs	r2, r3
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	695b      	ldr	r3, [r3, #20]
 8104df4:	431a      	orrs	r2, r3
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	6a1b      	ldr	r3, [r3, #32]
 8104dfa:	431a      	orrs	r2, r3
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	685b      	ldr	r3, [r3, #4]
 8104e00:	431a      	orrs	r2, r3
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104e06:	431a      	orrs	r2, r3
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	689b      	ldr	r3, [r3, #8]
 8104e0c:	431a      	orrs	r2, r3
 8104e0e:	687b      	ldr	r3, [r7, #4]
 8104e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104e12:	ea42 0103 	orr.w	r1, r2, r3
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	430a      	orrs	r2, r1
 8104e20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	685b      	ldr	r3, [r3, #4]
 8104e26:	2b00      	cmp	r3, #0
 8104e28:	d113      	bne.n	8104e52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	689b      	ldr	r3, [r3, #8]
 8104e30:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	681b      	ldr	r3, [r3, #0]
 8104e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104e3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	681b      	ldr	r3, [r3, #0]
 8104e42:	689b      	ldr	r3, [r3, #8]
 8104e44:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8104e50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	681b      	ldr	r3, [r3, #0]
 8104e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	f022 0201 	bic.w	r2, r2, #1
 8104e60:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104e62:	687b      	ldr	r3, [r7, #4]
 8104e64:	685b      	ldr	r3, [r3, #4]
 8104e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	d00a      	beq.n	8104e84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	68db      	ldr	r3, [r3, #12]
 8104e74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	430a      	orrs	r2, r1
 8104e82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	2200      	movs	r2, #0
 8104e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	2201      	movs	r2, #1
 8104e90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8104e94:	2300      	movs	r3, #0
}
 8104e96:	4618      	mov	r0, r3
 8104e98:	3710      	adds	r7, #16
 8104e9a:	46bd      	mov	sp, r7
 8104e9c:	bd80      	pop	{r7, pc}
 8104e9e:	bf00      	nop
 8104ea0:	40013000 	.word	0x40013000
 8104ea4:	40003800 	.word	0x40003800
 8104ea8:	40003c00 	.word	0x40003c00

08104eac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8104eac:	b580      	push	{r7, lr}
 8104eae:	b08e      	sub	sp, #56	@ 0x38
 8104eb0:	af02      	add	r7, sp, #8
 8104eb2:	60f8      	str	r0, [r7, #12]
 8104eb4:	60b9      	str	r1, [r7, #8]
 8104eb6:	607a      	str	r2, [r7, #4]
 8104eb8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104eba:	68fb      	ldr	r3, [r7, #12]
 8104ebc:	681b      	ldr	r3, [r3, #0]
 8104ebe:	3320      	adds	r3, #32
 8104ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104ec2:	68fb      	ldr	r3, [r7, #12]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	3330      	adds	r3, #48	@ 0x30
 8104ec8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8104eca:	68fb      	ldr	r3, [r7, #12]
 8104ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104ece:	095b      	lsrs	r3, r3, #5
 8104ed0:	b29b      	uxth	r3, r3
 8104ed2:	3301      	adds	r3, #1
 8104ed4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104ed6:	f7fd fda7 	bl	8102a28 <HAL_GetTick>
 8104eda:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8104edc:	887b      	ldrh	r3, [r7, #2]
 8104ede:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8104ee0:	887b      	ldrh	r3, [r7, #2]
 8104ee2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8104ee4:	68fb      	ldr	r3, [r7, #12]
 8104ee6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8104eea:	b2db      	uxtb	r3, r3
 8104eec:	2b01      	cmp	r3, #1
 8104eee:	d001      	beq.n	8104ef4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8104ef0:	2302      	movs	r3, #2
 8104ef2:	e30e      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104ef4:	68bb      	ldr	r3, [r7, #8]
 8104ef6:	2b00      	cmp	r3, #0
 8104ef8:	d005      	beq.n	8104f06 <HAL_SPI_TransmitReceive+0x5a>
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	2b00      	cmp	r3, #0
 8104efe:	d002      	beq.n	8104f06 <HAL_SPI_TransmitReceive+0x5a>
 8104f00:	887b      	ldrh	r3, [r7, #2]
 8104f02:	2b00      	cmp	r3, #0
 8104f04:	d101      	bne.n	8104f0a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8104f06:	2301      	movs	r3, #1
 8104f08:	e303      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104f0a:	68fb      	ldr	r3, [r7, #12]
 8104f0c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8104f10:	2b01      	cmp	r3, #1
 8104f12:	d101      	bne.n	8104f18 <HAL_SPI_TransmitReceive+0x6c>
 8104f14:	2302      	movs	r3, #2
 8104f16:	e2fc      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	2201      	movs	r2, #1
 8104f1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	2205      	movs	r2, #5
 8104f24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104f28:	68fb      	ldr	r3, [r7, #12]
 8104f2a:	2200      	movs	r2, #0
 8104f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	687a      	ldr	r2, [r7, #4]
 8104f34:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8104f36:	68fb      	ldr	r3, [r7, #12]
 8104f38:	887a      	ldrh	r2, [r7, #2]
 8104f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8104f3e:	68fb      	ldr	r3, [r7, #12]
 8104f40:	887a      	ldrh	r2, [r7, #2]
 8104f42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	68ba      	ldr	r2, [r7, #8]
 8104f4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8104f4c:	68fb      	ldr	r3, [r7, #12]
 8104f4e:	887a      	ldrh	r2, [r7, #2]
 8104f50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8104f54:	68fb      	ldr	r3, [r7, #12]
 8104f56:	887a      	ldrh	r2, [r7, #2]
 8104f58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8104f5c:	68fb      	ldr	r3, [r7, #12]
 8104f5e:	2200      	movs	r2, #0
 8104f60:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8104f62:	68fb      	ldr	r3, [r7, #12]
 8104f64:	2200      	movs	r2, #0
 8104f66:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8104f68:	68fb      	ldr	r3, [r7, #12]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	68da      	ldr	r2, [r3, #12]
 8104f6e:	68fb      	ldr	r3, [r7, #12]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8104f76:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8104f78:	68fb      	ldr	r3, [r7, #12]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	4a70      	ldr	r2, [pc, #448]	@ (8105140 <HAL_SPI_TransmitReceive+0x294>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	d009      	beq.n	8104f96 <HAL_SPI_TransmitReceive+0xea>
 8104f82:	68fb      	ldr	r3, [r7, #12]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	4a6f      	ldr	r2, [pc, #444]	@ (8105144 <HAL_SPI_TransmitReceive+0x298>)
 8104f88:	4293      	cmp	r3, r2
 8104f8a:	d004      	beq.n	8104f96 <HAL_SPI_TransmitReceive+0xea>
 8104f8c:	68fb      	ldr	r3, [r7, #12]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	4a6d      	ldr	r2, [pc, #436]	@ (8105148 <HAL_SPI_TransmitReceive+0x29c>)
 8104f92:	4293      	cmp	r3, r2
 8104f94:	d102      	bne.n	8104f9c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8104f96:	2310      	movs	r3, #16
 8104f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104f9a:	e001      	b.n	8104fa0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8104f9c:	2308      	movs	r3, #8
 8104f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	685b      	ldr	r3, [r3, #4]
 8104fa6:	0c1b      	lsrs	r3, r3, #16
 8104fa8:	041b      	lsls	r3, r3, #16
 8104faa:	8879      	ldrh	r1, [r7, #2]
 8104fac:	68fa      	ldr	r2, [r7, #12]
 8104fae:	6812      	ldr	r2, [r2, #0]
 8104fb0:	430b      	orrs	r3, r1
 8104fb2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104fb4:	68fb      	ldr	r3, [r7, #12]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	681a      	ldr	r2, [r3, #0]
 8104fba:	68fb      	ldr	r3, [r7, #12]
 8104fbc:	681b      	ldr	r3, [r3, #0]
 8104fbe:	f042 0201 	orr.w	r2, r2, #1
 8104fc2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104fc4:	68fb      	ldr	r3, [r7, #12]
 8104fc6:	685b      	ldr	r3, [r3, #4]
 8104fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104fcc:	d107      	bne.n	8104fde <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	681a      	ldr	r2, [r3, #0]
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8104fdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104fde:	68fb      	ldr	r3, [r7, #12]
 8104fe0:	68db      	ldr	r3, [r3, #12]
 8104fe2:	2b0f      	cmp	r3, #15
 8104fe4:	f240 80a2 	bls.w	810512c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8104fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104fea:	089b      	lsrs	r3, r3, #2
 8104fec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104fee:	e094      	b.n	810511a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8104ff0:	68fb      	ldr	r3, [r7, #12]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	695b      	ldr	r3, [r3, #20]
 8104ff6:	f003 0302 	and.w	r3, r3, #2
 8104ffa:	2b02      	cmp	r3, #2
 8104ffc:	d120      	bne.n	8105040 <HAL_SPI_TransmitReceive+0x194>
 8104ffe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8105000:	2b00      	cmp	r3, #0
 8105002:	d01d      	beq.n	8105040 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8105004:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8105006:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8105008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810500a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810500c:	429a      	cmp	r2, r3
 810500e:	d217      	bcs.n	8105040 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8105014:	68fb      	ldr	r3, [r7, #12]
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	6812      	ldr	r2, [r2, #0]
 810501a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810501c:	68fb      	ldr	r3, [r7, #12]
 810501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105020:	1d1a      	adds	r2, r3, #4
 8105022:	68fb      	ldr	r3, [r7, #12]
 8105024:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8105026:	68fb      	ldr	r3, [r7, #12]
 8105028:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810502c:	b29b      	uxth	r3, r3
 810502e:	3b01      	subs	r3, #1
 8105030:	b29a      	uxth	r2, r3
 8105032:	68fb      	ldr	r3, [r7, #12]
 8105034:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105038:	68fb      	ldr	r3, [r7, #12]
 810503a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810503e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8105040:	68fb      	ldr	r3, [r7, #12]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	695b      	ldr	r3, [r3, #20]
 8105046:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8105048:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810504a:	2b00      	cmp	r3, #0
 810504c:	d065      	beq.n	810511a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810504e:	68fb      	ldr	r3, [r7, #12]
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	695b      	ldr	r3, [r3, #20]
 8105054:	f003 0301 	and.w	r3, r3, #1
 8105058:	2b01      	cmp	r3, #1
 810505a:	d118      	bne.n	810508e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810505c:	68fb      	ldr	r3, [r7, #12]
 810505e:	681a      	ldr	r2, [r3, #0]
 8105060:	68fb      	ldr	r3, [r7, #12]
 8105062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105064:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8105066:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105068:	68fb      	ldr	r3, [r7, #12]
 810506a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810506c:	1d1a      	adds	r2, r3, #4
 810506e:	68fb      	ldr	r3, [r7, #12]
 8105070:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8105072:	68fb      	ldr	r3, [r7, #12]
 8105074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105078:	b29b      	uxth	r3, r3
 810507a:	3b01      	subs	r3, #1
 810507c:	b29a      	uxth	r2, r3
 810507e:	68fb      	ldr	r3, [r7, #12]
 8105080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105084:	68fb      	ldr	r3, [r7, #12]
 8105086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810508a:	853b      	strh	r3, [r7, #40]	@ 0x28
 810508c:	e045      	b.n	810511a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810508e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8105090:	8bfb      	ldrh	r3, [r7, #30]
 8105092:	429a      	cmp	r2, r3
 8105094:	d21d      	bcs.n	81050d2 <HAL_SPI_TransmitReceive+0x226>
 8105096:	697b      	ldr	r3, [r7, #20]
 8105098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810509c:	2b00      	cmp	r3, #0
 810509e:	d018      	beq.n	81050d2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81050a0:	68fb      	ldr	r3, [r7, #12]
 81050a2:	681a      	ldr	r2, [r3, #0]
 81050a4:	68fb      	ldr	r3, [r7, #12]
 81050a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81050a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81050aa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81050ac:	68fb      	ldr	r3, [r7, #12]
 81050ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81050b0:	1d1a      	adds	r2, r3, #4
 81050b2:	68fb      	ldr	r3, [r7, #12]
 81050b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81050b6:	68fb      	ldr	r3, [r7, #12]
 81050b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81050bc:	b29b      	uxth	r3, r3
 81050be:	3b01      	subs	r3, #1
 81050c0:	b29a      	uxth	r2, r3
 81050c2:	68fb      	ldr	r3, [r7, #12]
 81050c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81050c8:	68fb      	ldr	r3, [r7, #12]
 81050ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81050ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 81050d0:	e023      	b.n	810511a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81050d2:	f7fd fca9 	bl	8102a28 <HAL_GetTick>
 81050d6:	4602      	mov	r2, r0
 81050d8:	69bb      	ldr	r3, [r7, #24]
 81050da:	1ad3      	subs	r3, r2, r3
 81050dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81050de:	429a      	cmp	r2, r3
 81050e0:	d803      	bhi.n	81050ea <HAL_SPI_TransmitReceive+0x23e>
 81050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81050e8:	d102      	bne.n	81050f0 <HAL_SPI_TransmitReceive+0x244>
 81050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	d114      	bne.n	810511a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81050f0:	68f8      	ldr	r0, [r7, #12]
 81050f2:	f000 fa13 	bl	810551c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81050fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8105100:	68fb      	ldr	r3, [r7, #12]
 8105102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8105106:	68fb      	ldr	r3, [r7, #12]
 8105108:	2201      	movs	r2, #1
 810510a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	2200      	movs	r2, #0
 8105112:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8105116:	2303      	movs	r3, #3
 8105118:	e1fb      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810511a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810511c:	2b00      	cmp	r3, #0
 810511e:	f47f af67 	bne.w	8104ff0 <HAL_SPI_TransmitReceive+0x144>
 8105122:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8105124:	2b00      	cmp	r3, #0
 8105126:	f47f af63 	bne.w	8104ff0 <HAL_SPI_TransmitReceive+0x144>
 810512a:	e1cc      	b.n	81054c6 <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	68db      	ldr	r3, [r3, #12]
 8105130:	2b07      	cmp	r3, #7
 8105132:	f240 81c0 	bls.w	81054b6 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8105136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105138:	085b      	lsrs	r3, r3, #1
 810513a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810513c:	e0c7      	b.n	81052ce <HAL_SPI_TransmitReceive+0x422>
 810513e:	bf00      	nop
 8105140:	40013000 	.word	0x40013000
 8105144:	40003800 	.word	0x40003800
 8105148:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	695b      	ldr	r3, [r3, #20]
 8105152:	f003 0302 	and.w	r3, r3, #2
 8105156:	2b02      	cmp	r3, #2
 8105158:	d11f      	bne.n	810519a <HAL_SPI_TransmitReceive+0x2ee>
 810515a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810515c:	2b00      	cmp	r3, #0
 810515e:	d01c      	beq.n	810519a <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8105160:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8105162:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8105164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105166:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8105168:	429a      	cmp	r2, r3
 810516a:	d216      	bcs.n	810519a <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 810516c:	68fb      	ldr	r3, [r7, #12]
 810516e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105170:	881a      	ldrh	r2, [r3, #0]
 8105172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105174:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8105176:	68fb      	ldr	r3, [r7, #12]
 8105178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810517a:	1c9a      	adds	r2, r3, #2
 810517c:	68fb      	ldr	r3, [r7, #12]
 810517e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8105180:	68fb      	ldr	r3, [r7, #12]
 8105182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105186:	b29b      	uxth	r3, r3
 8105188:	3b01      	subs	r3, #1
 810518a:	b29a      	uxth	r2, r3
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105192:	68fb      	ldr	r3, [r7, #12]
 8105194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105198:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	695b      	ldr	r3, [r3, #20]
 81051a0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 81051a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81051a4:	2b00      	cmp	r3, #0
 81051a6:	f000 8092 	beq.w	81052ce <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81051aa:	68fb      	ldr	r3, [r7, #12]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	695b      	ldr	r3, [r3, #20]
 81051b0:	f003 0301 	and.w	r3, r3, #1
 81051b4:	2b01      	cmp	r3, #1
 81051b6:	d118      	bne.n	81051ea <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81051bc:	6a3a      	ldr	r2, [r7, #32]
 81051be:	8812      	ldrh	r2, [r2, #0]
 81051c0:	b292      	uxth	r2, r2
 81051c2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81051c8:	1c9a      	adds	r2, r3, #2
 81051ca:	68fb      	ldr	r3, [r7, #12]
 81051cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81051ce:	68fb      	ldr	r3, [r7, #12]
 81051d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81051d4:	b29b      	uxth	r3, r3
 81051d6:	3b01      	subs	r3, #1
 81051d8:	b29a      	uxth	r2, r3
 81051da:	68fb      	ldr	r3, [r7, #12]
 81051dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81051e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 81051e8:	e071      	b.n	81052ce <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81051ea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81051ec:	8bfb      	ldrh	r3, [r7, #30]
 81051ee:	429a      	cmp	r2, r3
 81051f0:	d228      	bcs.n	8105244 <HAL_SPI_TransmitReceive+0x398>
 81051f2:	697b      	ldr	r3, [r7, #20]
 81051f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81051f8:	2b00      	cmp	r3, #0
 81051fa:	d023      	beq.n	8105244 <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81051fc:	68fb      	ldr	r3, [r7, #12]
 81051fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105200:	6a3a      	ldr	r2, [r7, #32]
 8105202:	8812      	ldrh	r2, [r2, #0]
 8105204:	b292      	uxth	r2, r2
 8105206:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810520c:	1c9a      	adds	r2, r3, #2
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105216:	6a3a      	ldr	r2, [r7, #32]
 8105218:	8812      	ldrh	r2, [r2, #0]
 810521a:	b292      	uxth	r2, r2
 810521c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810521e:	68fb      	ldr	r3, [r7, #12]
 8105220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105222:	1c9a      	adds	r2, r3, #2
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810522e:	b29b      	uxth	r3, r3
 8105230:	3b02      	subs	r3, #2
 8105232:	b29a      	uxth	r2, r3
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810523a:	68fb      	ldr	r3, [r7, #12]
 810523c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105240:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105242:	e044      	b.n	81052ce <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8105244:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8105246:	2b01      	cmp	r3, #1
 8105248:	d11d      	bne.n	8105286 <HAL_SPI_TransmitReceive+0x3da>
 810524a:	697b      	ldr	r3, [r7, #20]
 810524c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8105250:	2b00      	cmp	r3, #0
 8105252:	d018      	beq.n	8105286 <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105254:	68fb      	ldr	r3, [r7, #12]
 8105256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105258:	6a3a      	ldr	r2, [r7, #32]
 810525a:	8812      	ldrh	r2, [r2, #0]
 810525c:	b292      	uxth	r2, r2
 810525e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105260:	68fb      	ldr	r3, [r7, #12]
 8105262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105264:	1c9a      	adds	r2, r3, #2
 8105266:	68fb      	ldr	r3, [r7, #12]
 8105268:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810526a:	68fb      	ldr	r3, [r7, #12]
 810526c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105270:	b29b      	uxth	r3, r3
 8105272:	3b01      	subs	r3, #1
 8105274:	b29a      	uxth	r2, r3
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810527c:	68fb      	ldr	r3, [r7, #12]
 810527e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105282:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105284:	e023      	b.n	81052ce <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105286:	f7fd fbcf 	bl	8102a28 <HAL_GetTick>
 810528a:	4602      	mov	r2, r0
 810528c:	69bb      	ldr	r3, [r7, #24]
 810528e:	1ad3      	subs	r3, r2, r3
 8105290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8105292:	429a      	cmp	r2, r3
 8105294:	d803      	bhi.n	810529e <HAL_SPI_TransmitReceive+0x3f2>
 8105296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810529c:	d102      	bne.n	81052a4 <HAL_SPI_TransmitReceive+0x3f8>
 810529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052a0:	2b00      	cmp	r3, #0
 81052a2:	d114      	bne.n	81052ce <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81052a4:	68f8      	ldr	r0, [r7, #12]
 81052a6:	f000 f939 	bl	810551c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81052aa:	68fb      	ldr	r3, [r7, #12]
 81052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81052b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81052b4:	68fb      	ldr	r3, [r7, #12]
 81052b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81052ba:	68fb      	ldr	r3, [r7, #12]
 81052bc:	2201      	movs	r2, #1
 81052be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81052c2:	68fb      	ldr	r3, [r7, #12]
 81052c4:	2200      	movs	r2, #0
 81052c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81052ca:	2303      	movs	r3, #3
 81052cc:	e121      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81052ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81052d0:	2b00      	cmp	r3, #0
 81052d2:	f47f af3b 	bne.w	810514c <HAL_SPI_TransmitReceive+0x2a0>
 81052d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81052d8:	2b00      	cmp	r3, #0
 81052da:	f47f af37 	bne.w	810514c <HAL_SPI_TransmitReceive+0x2a0>
 81052de:	e0f2      	b.n	81054c6 <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	695b      	ldr	r3, [r3, #20]
 81052e6:	f003 0302 	and.w	r3, r3, #2
 81052ea:	2b02      	cmp	r3, #2
 81052ec:	d121      	bne.n	8105332 <HAL_SPI_TransmitReceive+0x486>
 81052ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81052f0:	2b00      	cmp	r3, #0
 81052f2:	d01e      	beq.n	8105332 <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 81052f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81052f6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 81052f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81052fa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 81052fc:	429a      	cmp	r2, r3
 81052fe:	d218      	bcs.n	8105332 <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8105300:	68fb      	ldr	r3, [r7, #12]
 8105302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8105304:	68fb      	ldr	r3, [r7, #12]
 8105306:	681b      	ldr	r3, [r3, #0]
 8105308:	3320      	adds	r3, #32
 810530a:	7812      	ldrb	r2, [r2, #0]
 810530c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105312:	1c5a      	adds	r2, r3, #1
 8105314:	68fb      	ldr	r3, [r7, #12]
 8105316:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810531e:	b29b      	uxth	r3, r3
 8105320:	3b01      	subs	r3, #1
 8105322:	b29a      	uxth	r2, r3
 8105324:	68fb      	ldr	r3, [r7, #12]
 8105326:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8105330:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8105332:	68fb      	ldr	r3, [r7, #12]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	695b      	ldr	r3, [r3, #20]
 8105338:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810533a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810533c:	2b00      	cmp	r3, #0
 810533e:	f000 80ba 	beq.w	81054b6 <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8105342:	68fb      	ldr	r3, [r7, #12]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	695b      	ldr	r3, [r3, #20]
 8105348:	f003 0301 	and.w	r3, r3, #1
 810534c:	2b01      	cmp	r3, #1
 810534e:	d11b      	bne.n	8105388 <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105350:	68fb      	ldr	r3, [r7, #12]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8105358:	68fb      	ldr	r3, [r7, #12]
 810535a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810535c:	7812      	ldrb	r2, [r2, #0]
 810535e:	b2d2      	uxtb	r2, r2
 8105360:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105362:	68fb      	ldr	r3, [r7, #12]
 8105364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105366:	1c5a      	adds	r2, r3, #1
 8105368:	68fb      	ldr	r3, [r7, #12]
 810536a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105372:	b29b      	uxth	r3, r3
 8105374:	3b01      	subs	r3, #1
 8105376:	b29a      	uxth	r2, r3
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810537e:	68fb      	ldr	r3, [r7, #12]
 8105380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105384:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105386:	e096      	b.n	81054b6 <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8105388:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810538a:	8bfb      	ldrh	r3, [r7, #30]
 810538c:	429a      	cmp	r2, r3
 810538e:	d24a      	bcs.n	8105426 <HAL_SPI_TransmitReceive+0x57a>
 8105390:	697b      	ldr	r3, [r7, #20]
 8105392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105396:	2b00      	cmp	r3, #0
 8105398:	d045      	beq.n	8105426 <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810539a:	68fb      	ldr	r3, [r7, #12]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81053a2:	68fb      	ldr	r3, [r7, #12]
 81053a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053a6:	7812      	ldrb	r2, [r2, #0]
 81053a8:	b2d2      	uxtb	r2, r2
 81053aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81053ac:	68fb      	ldr	r3, [r7, #12]
 81053ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053b0:	1c5a      	adds	r2, r3, #1
 81053b2:	68fb      	ldr	r3, [r7, #12]
 81053b4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81053b6:	68fb      	ldr	r3, [r7, #12]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81053be:	68fb      	ldr	r3, [r7, #12]
 81053c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053c2:	7812      	ldrb	r2, [r2, #0]
 81053c4:	b2d2      	uxtb	r2, r2
 81053c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81053c8:	68fb      	ldr	r3, [r7, #12]
 81053ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053cc:	1c5a      	adds	r2, r3, #1
 81053ce:	68fb      	ldr	r3, [r7, #12]
 81053d0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81053d2:	68fb      	ldr	r3, [r7, #12]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053de:	7812      	ldrb	r2, [r2, #0]
 81053e0:	b2d2      	uxtb	r2, r2
 81053e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053e8:	1c5a      	adds	r2, r3, #1
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81053ee:	68fb      	ldr	r3, [r7, #12]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81053f6:	68fb      	ldr	r3, [r7, #12]
 81053f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81053fa:	7812      	ldrb	r2, [r2, #0]
 81053fc:	b2d2      	uxtb	r2, r2
 81053fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105400:	68fb      	ldr	r3, [r7, #12]
 8105402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105404:	1c5a      	adds	r2, r3, #1
 8105406:	68fb      	ldr	r3, [r7, #12]
 8105408:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105410:	b29b      	uxth	r3, r3
 8105412:	3b04      	subs	r3, #4
 8105414:	b29a      	uxth	r2, r3
 8105416:	68fb      	ldr	r3, [r7, #12]
 8105418:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810541c:	68fb      	ldr	r3, [r7, #12]
 810541e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105422:	853b      	strh	r3, [r7, #40]	@ 0x28
 8105424:	e047      	b.n	81054b6 <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8105426:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8105428:	2b03      	cmp	r3, #3
 810542a:	d820      	bhi.n	810546e <HAL_SPI_TransmitReceive+0x5c2>
 810542c:	697b      	ldr	r3, [r7, #20]
 810542e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8105432:	2b00      	cmp	r3, #0
 8105434:	d01b      	beq.n	810546e <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105436:	68fb      	ldr	r3, [r7, #12]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810543e:	68fb      	ldr	r3, [r7, #12]
 8105440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105442:	7812      	ldrb	r2, [r2, #0]
 8105444:	b2d2      	uxtb	r2, r2
 8105446:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105448:	68fb      	ldr	r3, [r7, #12]
 810544a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810544c:	1c5a      	adds	r2, r3, #1
 810544e:	68fb      	ldr	r3, [r7, #12]
 8105450:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8105452:	68fb      	ldr	r3, [r7, #12]
 8105454:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105458:	b29b      	uxth	r3, r3
 810545a:	3b01      	subs	r3, #1
 810545c:	b29a      	uxth	r2, r3
 810545e:	68fb      	ldr	r3, [r7, #12]
 8105460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810546a:	853b      	strh	r3, [r7, #40]	@ 0x28
 810546c:	e023      	b.n	81054b6 <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810546e:	f7fd fadb 	bl	8102a28 <HAL_GetTick>
 8105472:	4602      	mov	r2, r0
 8105474:	69bb      	ldr	r3, [r7, #24]
 8105476:	1ad3      	subs	r3, r2, r3
 8105478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810547a:	429a      	cmp	r2, r3
 810547c:	d803      	bhi.n	8105486 <HAL_SPI_TransmitReceive+0x5da>
 810547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8105484:	d102      	bne.n	810548c <HAL_SPI_TransmitReceive+0x5e0>
 8105486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105488:	2b00      	cmp	r3, #0
 810548a:	d114      	bne.n	81054b6 <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 810548c:	68f8      	ldr	r0, [r7, #12]
 810548e:	f000 f845 	bl	810551c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105492:	68fb      	ldr	r3, [r7, #12]
 8105494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105498:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810549c:	68fb      	ldr	r3, [r7, #12]
 810549e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	2201      	movs	r2, #1
 81054a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81054aa:	68fb      	ldr	r3, [r7, #12]
 81054ac:	2200      	movs	r2, #0
 81054ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81054b2:	2303      	movs	r3, #3
 81054b4:	e02d      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81054b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	f47f af11 	bne.w	81052e0 <HAL_SPI_TransmitReceive+0x434>
 81054be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81054c0:	2b00      	cmp	r3, #0
 81054c2:	f47f af0d 	bne.w	81052e0 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 81054c6:	69bb      	ldr	r3, [r7, #24]
 81054c8:	9300      	str	r3, [sp, #0]
 81054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054cc:	2200      	movs	r2, #0
 81054ce:	2108      	movs	r1, #8
 81054d0:	68f8      	ldr	r0, [r7, #12]
 81054d2:	f000 f8c3 	bl	810565c <SPI_WaitOnFlagUntilTimeout>
 81054d6:	4603      	mov	r3, r0
 81054d8:	2b00      	cmp	r3, #0
 81054da:	d007      	beq.n	81054ec <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81054dc:	68fb      	ldr	r3, [r7, #12]
 81054de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81054e2:	f043 0220 	orr.w	r2, r3, #32
 81054e6:	68fb      	ldr	r3, [r7, #12]
 81054e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81054ec:	68f8      	ldr	r0, [r7, #12]
 81054ee:	f000 f815 	bl	810551c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 81054f2:	68fb      	ldr	r3, [r7, #12]
 81054f4:	2201      	movs	r2, #1
 81054f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81054fa:	68fb      	ldr	r3, [r7, #12]
 81054fc:	2200      	movs	r2, #0
 81054fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105502:	68fb      	ldr	r3, [r7, #12]
 8105504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105508:	2b00      	cmp	r3, #0
 810550a:	d001      	beq.n	8105510 <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 810550c:	2301      	movs	r3, #1
 810550e:	e000      	b.n	8105512 <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 8105510:	2300      	movs	r3, #0
  }
}
 8105512:	4618      	mov	r0, r3
 8105514:	3730      	adds	r7, #48	@ 0x30
 8105516:	46bd      	mov	sp, r7
 8105518:	bd80      	pop	{r7, pc}
 810551a:	bf00      	nop

0810551c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810551c:	b480      	push	{r7}
 810551e:	b085      	sub	sp, #20
 8105520:	af00      	add	r7, sp, #0
 8105522:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	695b      	ldr	r3, [r3, #20]
 810552a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	681b      	ldr	r3, [r3, #0]
 8105530:	699a      	ldr	r2, [r3, #24]
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	681b      	ldr	r3, [r3, #0]
 8105536:	f042 0208 	orr.w	r2, r2, #8
 810553a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	699a      	ldr	r2, [r3, #24]
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	f042 0210 	orr.w	r2, r2, #16
 810554a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	681a      	ldr	r2, [r3, #0]
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	f022 0201 	bic.w	r2, r2, #1
 810555a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	691b      	ldr	r3, [r3, #16]
 8105562:	687a      	ldr	r2, [r7, #4]
 8105564:	6812      	ldr	r2, [r2, #0]
 8105566:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 810556a:	f023 0303 	bic.w	r3, r3, #3
 810556e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	689a      	ldr	r2, [r3, #8]
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 810557e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8105586:	b2db      	uxtb	r3, r3
 8105588:	2b04      	cmp	r3, #4
 810558a:	d014      	beq.n	81055b6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810558c:	68fb      	ldr	r3, [r7, #12]
 810558e:	f003 0320 	and.w	r3, r3, #32
 8105592:	2b00      	cmp	r3, #0
 8105594:	d00f      	beq.n	81055b6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810559c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	699a      	ldr	r2, [r3, #24]
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	f042 0220 	orr.w	r2, r2, #32
 81055b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81055bc:	b2db      	uxtb	r3, r3
 81055be:	2b03      	cmp	r3, #3
 81055c0:	d014      	beq.n	81055ec <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d00f      	beq.n	81055ec <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81055d2:	f043 0204 	orr.w	r2, r3, #4
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	699a      	ldr	r2, [r3, #24]
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81055ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81055f2:	2b00      	cmp	r3, #0
 81055f4:	d00f      	beq.n	8105616 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81055fc:	f043 0201 	orr.w	r2, r3, #1
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	699a      	ldr	r2, [r3, #24]
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8105614:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8105616:	68fb      	ldr	r3, [r7, #12]
 8105618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810561c:	2b00      	cmp	r3, #0
 810561e:	d00f      	beq.n	8105640 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105626:	f043 0208 	orr.w	r2, r3, #8
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	699a      	ldr	r2, [r3, #24]
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	681b      	ldr	r3, [r3, #0]
 810563a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810563e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	2200      	movs	r2, #0
 8105644:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	2200      	movs	r2, #0
 810564c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8105650:	bf00      	nop
 8105652:	3714      	adds	r7, #20
 8105654:	46bd      	mov	sp, r7
 8105656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810565a:	4770      	bx	lr

0810565c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810565c:	b580      	push	{r7, lr}
 810565e:	b084      	sub	sp, #16
 8105660:	af00      	add	r7, sp, #0
 8105662:	60f8      	str	r0, [r7, #12]
 8105664:	60b9      	str	r1, [r7, #8]
 8105666:	603b      	str	r3, [r7, #0]
 8105668:	4613      	mov	r3, r2
 810566a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810566c:	e010      	b.n	8105690 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810566e:	f7fd f9db 	bl	8102a28 <HAL_GetTick>
 8105672:	4602      	mov	r2, r0
 8105674:	69bb      	ldr	r3, [r7, #24]
 8105676:	1ad3      	subs	r3, r2, r3
 8105678:	683a      	ldr	r2, [r7, #0]
 810567a:	429a      	cmp	r2, r3
 810567c:	d803      	bhi.n	8105686 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810567e:	683b      	ldr	r3, [r7, #0]
 8105680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8105684:	d102      	bne.n	810568c <SPI_WaitOnFlagUntilTimeout+0x30>
 8105686:	683b      	ldr	r3, [r7, #0]
 8105688:	2b00      	cmp	r3, #0
 810568a:	d101      	bne.n	8105690 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810568c:	2303      	movs	r3, #3
 810568e:	e00f      	b.n	81056b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	695a      	ldr	r2, [r3, #20]
 8105696:	68bb      	ldr	r3, [r7, #8]
 8105698:	4013      	ands	r3, r2
 810569a:	68ba      	ldr	r2, [r7, #8]
 810569c:	429a      	cmp	r2, r3
 810569e:	bf0c      	ite	eq
 81056a0:	2301      	moveq	r3, #1
 81056a2:	2300      	movne	r3, #0
 81056a4:	b2db      	uxtb	r3, r3
 81056a6:	461a      	mov	r2, r3
 81056a8:	79fb      	ldrb	r3, [r7, #7]
 81056aa:	429a      	cmp	r2, r3
 81056ac:	d0df      	beq.n	810566e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81056ae:	2300      	movs	r3, #0
}
 81056b0:	4618      	mov	r0, r3
 81056b2:	3710      	adds	r7, #16
 81056b4:	46bd      	mov	sp, r7
 81056b6:	bd80      	pop	{r7, pc}

081056b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81056b8:	b480      	push	{r7}
 81056ba:	b085      	sub	sp, #20
 81056bc:	af00      	add	r7, sp, #0
 81056be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81056c4:	095b      	lsrs	r3, r3, #5
 81056c6:	3301      	adds	r3, #1
 81056c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	68db      	ldr	r3, [r3, #12]
 81056ce:	3301      	adds	r3, #1
 81056d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81056d2:	68bb      	ldr	r3, [r7, #8]
 81056d4:	3307      	adds	r3, #7
 81056d6:	08db      	lsrs	r3, r3, #3
 81056d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81056da:	68bb      	ldr	r3, [r7, #8]
 81056dc:	68fa      	ldr	r2, [r7, #12]
 81056de:	fb02 f303 	mul.w	r3, r2, r3
}
 81056e2:	4618      	mov	r0, r3
 81056e4:	3714      	adds	r7, #20
 81056e6:	46bd      	mov	sp, r7
 81056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056ec:	4770      	bx	lr

081056ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81056ee:	b580      	push	{r7, lr}
 81056f0:	b082      	sub	sp, #8
 81056f2:	af00      	add	r7, sp, #0
 81056f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	2b00      	cmp	r3, #0
 81056fa:	d101      	bne.n	8105700 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81056fc:	2301      	movs	r3, #1
 81056fe:	e049      	b.n	8105794 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8105706:	b2db      	uxtb	r3, r3
 8105708:	2b00      	cmp	r3, #0
 810570a:	d106      	bne.n	810571a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	2200      	movs	r2, #0
 8105710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105714:	6878      	ldr	r0, [r7, #4]
 8105716:	f7fd f88f 	bl	8102838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	2202      	movs	r2, #2
 810571e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681a      	ldr	r2, [r3, #0]
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	3304      	adds	r3, #4
 810572a:	4619      	mov	r1, r3
 810572c:	4610      	mov	r0, r2
 810572e:	f000 fad5 	bl	8105cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	2201      	movs	r2, #1
 8105736:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	2201      	movs	r2, #1
 810573e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	2201      	movs	r2, #1
 8105746:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	2201      	movs	r2, #1
 810574e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	2201      	movs	r2, #1
 8105756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	2201      	movs	r2, #1
 810575e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8105762:	687b      	ldr	r3, [r7, #4]
 8105764:	2201      	movs	r2, #1
 8105766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	2201      	movs	r2, #1
 810576e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	2201      	movs	r2, #1
 8105776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	2201      	movs	r2, #1
 810577e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	2201      	movs	r2, #1
 8105786:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	2201      	movs	r2, #1
 810578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8105792:	2300      	movs	r3, #0
}
 8105794:	4618      	mov	r0, r3
 8105796:	3708      	adds	r7, #8
 8105798:	46bd      	mov	sp, r7
 810579a:	bd80      	pop	{r7, pc}

0810579c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810579c:	b480      	push	{r7}
 810579e:	b085      	sub	sp, #20
 81057a0:	af00      	add	r7, sp, #0
 81057a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81057aa:	b2db      	uxtb	r3, r3
 81057ac:	2b01      	cmp	r3, #1
 81057ae:	d001      	beq.n	81057b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81057b0:	2301      	movs	r3, #1
 81057b2:	e054      	b.n	810585e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	2202      	movs	r2, #2
 81057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	681b      	ldr	r3, [r3, #0]
 81057c0:	68da      	ldr	r2, [r3, #12]
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	681b      	ldr	r3, [r3, #0]
 81057c6:	f042 0201 	orr.w	r2, r2, #1
 81057ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	4a26      	ldr	r2, [pc, #152]	@ (810586c <HAL_TIM_Base_Start_IT+0xd0>)
 81057d2:	4293      	cmp	r3, r2
 81057d4:	d022      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81057de:	d01d      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	4a22      	ldr	r2, [pc, #136]	@ (8105870 <HAL_TIM_Base_Start_IT+0xd4>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d018      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	4a21      	ldr	r2, [pc, #132]	@ (8105874 <HAL_TIM_Base_Start_IT+0xd8>)
 81057f0:	4293      	cmp	r3, r2
 81057f2:	d013      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	681b      	ldr	r3, [r3, #0]
 81057f8:	4a1f      	ldr	r2, [pc, #124]	@ (8105878 <HAL_TIM_Base_Start_IT+0xdc>)
 81057fa:	4293      	cmp	r3, r2
 81057fc:	d00e      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	681b      	ldr	r3, [r3, #0]
 8105802:	4a1e      	ldr	r2, [pc, #120]	@ (810587c <HAL_TIM_Base_Start_IT+0xe0>)
 8105804:	4293      	cmp	r3, r2
 8105806:	d009      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	4a1c      	ldr	r2, [pc, #112]	@ (8105880 <HAL_TIM_Base_Start_IT+0xe4>)
 810580e:	4293      	cmp	r3, r2
 8105810:	d004      	beq.n	810581c <HAL_TIM_Base_Start_IT+0x80>
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	4a1b      	ldr	r2, [pc, #108]	@ (8105884 <HAL_TIM_Base_Start_IT+0xe8>)
 8105818:	4293      	cmp	r3, r2
 810581a:	d115      	bne.n	8105848 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	689a      	ldr	r2, [r3, #8]
 8105822:	4b19      	ldr	r3, [pc, #100]	@ (8105888 <HAL_TIM_Base_Start_IT+0xec>)
 8105824:	4013      	ands	r3, r2
 8105826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	2b06      	cmp	r3, #6
 810582c:	d015      	beq.n	810585a <HAL_TIM_Base_Start_IT+0xbe>
 810582e:	68fb      	ldr	r3, [r7, #12]
 8105830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105834:	d011      	beq.n	810585a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	681b      	ldr	r3, [r3, #0]
 810583a:	681a      	ldr	r2, [r3, #0]
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	f042 0201 	orr.w	r2, r2, #1
 8105844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105846:	e008      	b.n	810585a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105848:	687b      	ldr	r3, [r7, #4]
 810584a:	681b      	ldr	r3, [r3, #0]
 810584c:	681a      	ldr	r2, [r3, #0]
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	f042 0201 	orr.w	r2, r2, #1
 8105856:	601a      	str	r2, [r3, #0]
 8105858:	e000      	b.n	810585c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810585a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810585c:	2300      	movs	r3, #0
}
 810585e:	4618      	mov	r0, r3
 8105860:	3714      	adds	r7, #20
 8105862:	46bd      	mov	sp, r7
 8105864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105868:	4770      	bx	lr
 810586a:	bf00      	nop
 810586c:	40010000 	.word	0x40010000
 8105870:	40000400 	.word	0x40000400
 8105874:	40000800 	.word	0x40000800
 8105878:	40000c00 	.word	0x40000c00
 810587c:	40010400 	.word	0x40010400
 8105880:	40001800 	.word	0x40001800
 8105884:	40014000 	.word	0x40014000
 8105888:	00010007 	.word	0x00010007

0810588c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810588c:	b580      	push	{r7, lr}
 810588e:	b084      	sub	sp, #16
 8105890:	af00      	add	r7, sp, #0
 8105892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	68db      	ldr	r3, [r3, #12]
 810589a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	691b      	ldr	r3, [r3, #16]
 81058a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81058a4:	68bb      	ldr	r3, [r7, #8]
 81058a6:	f003 0302 	and.w	r3, r3, #2
 81058aa:	2b00      	cmp	r3, #0
 81058ac:	d020      	beq.n	81058f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	f003 0302 	and.w	r3, r3, #2
 81058b4:	2b00      	cmp	r3, #0
 81058b6:	d01b      	beq.n	81058f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	f06f 0202 	mvn.w	r2, #2
 81058c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	2201      	movs	r2, #1
 81058c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	699b      	ldr	r3, [r3, #24]
 81058ce:	f003 0303 	and.w	r3, r3, #3
 81058d2:	2b00      	cmp	r3, #0
 81058d4:	d003      	beq.n	81058de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81058d6:	6878      	ldr	r0, [r7, #4]
 81058d8:	f000 f9e2 	bl	8105ca0 <HAL_TIM_IC_CaptureCallback>
 81058dc:	e005      	b.n	81058ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81058de:	6878      	ldr	r0, [r7, #4]
 81058e0:	f000 f9d4 	bl	8105c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81058e4:	6878      	ldr	r0, [r7, #4]
 81058e6:	f000 f9e5 	bl	8105cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	2200      	movs	r2, #0
 81058ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81058f0:	68bb      	ldr	r3, [r7, #8]
 81058f2:	f003 0304 	and.w	r3, r3, #4
 81058f6:	2b00      	cmp	r3, #0
 81058f8:	d020      	beq.n	810593c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81058fa:	68fb      	ldr	r3, [r7, #12]
 81058fc:	f003 0304 	and.w	r3, r3, #4
 8105900:	2b00      	cmp	r3, #0
 8105902:	d01b      	beq.n	810593c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8105904:	687b      	ldr	r3, [r7, #4]
 8105906:	681b      	ldr	r3, [r3, #0]
 8105908:	f06f 0204 	mvn.w	r2, #4
 810590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810590e:	687b      	ldr	r3, [r7, #4]
 8105910:	2202      	movs	r2, #2
 8105912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	699b      	ldr	r3, [r3, #24]
 810591a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810591e:	2b00      	cmp	r3, #0
 8105920:	d003      	beq.n	810592a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105922:	6878      	ldr	r0, [r7, #4]
 8105924:	f000 f9bc 	bl	8105ca0 <HAL_TIM_IC_CaptureCallback>
 8105928:	e005      	b.n	8105936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810592a:	6878      	ldr	r0, [r7, #4]
 810592c:	f000 f9ae 	bl	8105c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105930:	6878      	ldr	r0, [r7, #4]
 8105932:	f000 f9bf 	bl	8105cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	2200      	movs	r2, #0
 810593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810593c:	68bb      	ldr	r3, [r7, #8]
 810593e:	f003 0308 	and.w	r3, r3, #8
 8105942:	2b00      	cmp	r3, #0
 8105944:	d020      	beq.n	8105988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	f003 0308 	and.w	r3, r3, #8
 810594c:	2b00      	cmp	r3, #0
 810594e:	d01b      	beq.n	8105988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	f06f 0208 	mvn.w	r2, #8
 8105958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	2204      	movs	r2, #4
 810595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	69db      	ldr	r3, [r3, #28]
 8105966:	f003 0303 	and.w	r3, r3, #3
 810596a:	2b00      	cmp	r3, #0
 810596c:	d003      	beq.n	8105976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810596e:	6878      	ldr	r0, [r7, #4]
 8105970:	f000 f996 	bl	8105ca0 <HAL_TIM_IC_CaptureCallback>
 8105974:	e005      	b.n	8105982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105976:	6878      	ldr	r0, [r7, #4]
 8105978:	f000 f988 	bl	8105c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810597c:	6878      	ldr	r0, [r7, #4]
 810597e:	f000 f999 	bl	8105cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	2200      	movs	r2, #0
 8105986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8105988:	68bb      	ldr	r3, [r7, #8]
 810598a:	f003 0310 	and.w	r3, r3, #16
 810598e:	2b00      	cmp	r3, #0
 8105990:	d020      	beq.n	81059d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8105992:	68fb      	ldr	r3, [r7, #12]
 8105994:	f003 0310 	and.w	r3, r3, #16
 8105998:	2b00      	cmp	r3, #0
 810599a:	d01b      	beq.n	81059d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	f06f 0210 	mvn.w	r2, #16
 81059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81059a6:	687b      	ldr	r3, [r7, #4]
 81059a8:	2208      	movs	r2, #8
 81059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	681b      	ldr	r3, [r3, #0]
 81059b0:	69db      	ldr	r3, [r3, #28]
 81059b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81059b6:	2b00      	cmp	r3, #0
 81059b8:	d003      	beq.n	81059c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81059ba:	6878      	ldr	r0, [r7, #4]
 81059bc:	f000 f970 	bl	8105ca0 <HAL_TIM_IC_CaptureCallback>
 81059c0:	e005      	b.n	81059ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81059c2:	6878      	ldr	r0, [r7, #4]
 81059c4:	f000 f962 	bl	8105c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81059c8:	6878      	ldr	r0, [r7, #4]
 81059ca:	f000 f973 	bl	8105cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81059ce:	687b      	ldr	r3, [r7, #4]
 81059d0:	2200      	movs	r2, #0
 81059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81059d4:	68bb      	ldr	r3, [r7, #8]
 81059d6:	f003 0301 	and.w	r3, r3, #1
 81059da:	2b00      	cmp	r3, #0
 81059dc:	d00c      	beq.n	81059f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81059de:	68fb      	ldr	r3, [r7, #12]
 81059e0:	f003 0301 	and.w	r3, r3, #1
 81059e4:	2b00      	cmp	r3, #0
 81059e6:	d007      	beq.n	81059f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	f06f 0201 	mvn.w	r2, #1
 81059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81059f2:	6878      	ldr	r0, [r7, #4]
 81059f4:	f7fc fd64 	bl	81024c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81059f8:	68bb      	ldr	r3, [r7, #8]
 81059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d104      	bne.n	8105a0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8105a02:	68bb      	ldr	r3, [r7, #8]
 8105a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8105a08:	2b00      	cmp	r3, #0
 8105a0a:	d00c      	beq.n	8105a26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8105a0c:	68fb      	ldr	r3, [r7, #12]
 8105a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105a12:	2b00      	cmp	r3, #0
 8105a14:	d007      	beq.n	8105a26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8105a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8105a20:	6878      	ldr	r0, [r7, #4]
 8105a22:	f000 fb35 	bl	8106090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8105a26:	68bb      	ldr	r3, [r7, #8]
 8105a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105a2c:	2b00      	cmp	r3, #0
 8105a2e:	d00c      	beq.n	8105a4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8105a30:	68fb      	ldr	r3, [r7, #12]
 8105a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105a36:	2b00      	cmp	r3, #0
 8105a38:	d007      	beq.n	8105a4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8105a3a:	687b      	ldr	r3, [r7, #4]
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8105a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105a44:	6878      	ldr	r0, [r7, #4]
 8105a46:	f000 fb2d 	bl	81060a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8105a4a:	68bb      	ldr	r3, [r7, #8]
 8105a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105a50:	2b00      	cmp	r3, #0
 8105a52:	d00c      	beq.n	8105a6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8105a54:	68fb      	ldr	r3, [r7, #12]
 8105a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105a5a:	2b00      	cmp	r3, #0
 8105a5c:	d007      	beq.n	8105a6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8105a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105a68:	6878      	ldr	r0, [r7, #4]
 8105a6a:	f000 f92d 	bl	8105cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8105a6e:	68bb      	ldr	r3, [r7, #8]
 8105a70:	f003 0320 	and.w	r3, r3, #32
 8105a74:	2b00      	cmp	r3, #0
 8105a76:	d00c      	beq.n	8105a92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8105a78:	68fb      	ldr	r3, [r7, #12]
 8105a7a:	f003 0320 	and.w	r3, r3, #32
 8105a7e:	2b00      	cmp	r3, #0
 8105a80:	d007      	beq.n	8105a92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	f06f 0220 	mvn.w	r2, #32
 8105a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105a8c:	6878      	ldr	r0, [r7, #4]
 8105a8e:	f000 faf5 	bl	810607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105a92:	bf00      	nop
 8105a94:	3710      	adds	r7, #16
 8105a96:	46bd      	mov	sp, r7
 8105a98:	bd80      	pop	{r7, pc}
	...

08105a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105a9c:	b580      	push	{r7, lr}
 8105a9e:	b084      	sub	sp, #16
 8105aa0:	af00      	add	r7, sp, #0
 8105aa2:	6078      	str	r0, [r7, #4]
 8105aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105aa6:	2300      	movs	r3, #0
 8105aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105ab0:	2b01      	cmp	r3, #1
 8105ab2:	d101      	bne.n	8105ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8105ab4:	2302      	movs	r3, #2
 8105ab6:	e0de      	b.n	8105c76 <HAL_TIM_ConfigClockSource+0x1da>
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	2201      	movs	r2, #1
 8105abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	2202      	movs	r2, #2
 8105ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	689b      	ldr	r3, [r3, #8]
 8105ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8105ad0:	68bb      	ldr	r3, [r7, #8]
 8105ad2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8105ad6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8105ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105adc:	68bb      	ldr	r3, [r7, #8]
 8105ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	68ba      	ldr	r2, [r7, #8]
 8105aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8105aec:	683b      	ldr	r3, [r7, #0]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	4a63      	ldr	r2, [pc, #396]	@ (8105c80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105af2:	4293      	cmp	r3, r2
 8105af4:	f000 80a9 	beq.w	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105af8:	4a61      	ldr	r2, [pc, #388]	@ (8105c80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105afa:	4293      	cmp	r3, r2
 8105afc:	f200 80ae 	bhi.w	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b00:	4a60      	ldr	r2, [pc, #384]	@ (8105c84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105b02:	4293      	cmp	r3, r2
 8105b04:	f000 80a1 	beq.w	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b08:	4a5e      	ldr	r2, [pc, #376]	@ (8105c84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105b0a:	4293      	cmp	r3, r2
 8105b0c:	f200 80a6 	bhi.w	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b10:	4a5d      	ldr	r2, [pc, #372]	@ (8105c88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105b12:	4293      	cmp	r3, r2
 8105b14:	f000 8099 	beq.w	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b18:	4a5b      	ldr	r2, [pc, #364]	@ (8105c88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105b1a:	4293      	cmp	r3, r2
 8105b1c:	f200 809e 	bhi.w	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8105b24:	f000 8091 	beq.w	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8105b2c:	f200 8096 	bhi.w	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105b34:	f000 8089 	beq.w	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105b3c:	f200 808e 	bhi.w	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105b44:	d03e      	beq.n	8105bc4 <HAL_TIM_ConfigClockSource+0x128>
 8105b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105b4a:	f200 8087 	bhi.w	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105b52:	f000 8086 	beq.w	8105c62 <HAL_TIM_ConfigClockSource+0x1c6>
 8105b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105b5a:	d87f      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b5c:	2b70      	cmp	r3, #112	@ 0x70
 8105b5e:	d01a      	beq.n	8105b96 <HAL_TIM_ConfigClockSource+0xfa>
 8105b60:	2b70      	cmp	r3, #112	@ 0x70
 8105b62:	d87b      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b64:	2b60      	cmp	r3, #96	@ 0x60
 8105b66:	d050      	beq.n	8105c0a <HAL_TIM_ConfigClockSource+0x16e>
 8105b68:	2b60      	cmp	r3, #96	@ 0x60
 8105b6a:	d877      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b6c:	2b50      	cmp	r3, #80	@ 0x50
 8105b6e:	d03c      	beq.n	8105bea <HAL_TIM_ConfigClockSource+0x14e>
 8105b70:	2b50      	cmp	r3, #80	@ 0x50
 8105b72:	d873      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b74:	2b40      	cmp	r3, #64	@ 0x40
 8105b76:	d058      	beq.n	8105c2a <HAL_TIM_ConfigClockSource+0x18e>
 8105b78:	2b40      	cmp	r3, #64	@ 0x40
 8105b7a:	d86f      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b7c:	2b30      	cmp	r3, #48	@ 0x30
 8105b7e:	d064      	beq.n	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b80:	2b30      	cmp	r3, #48	@ 0x30
 8105b82:	d86b      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b84:	2b20      	cmp	r3, #32
 8105b86:	d060      	beq.n	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b88:	2b20      	cmp	r3, #32
 8105b8a:	d867      	bhi.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
 8105b8c:	2b00      	cmp	r3, #0
 8105b8e:	d05c      	beq.n	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b90:	2b10      	cmp	r3, #16
 8105b92:	d05a      	beq.n	8105c4a <HAL_TIM_ConfigClockSource+0x1ae>
 8105b94:	e062      	b.n	8105c5c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8105b9a:	683b      	ldr	r3, [r7, #0]
 8105b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8105b9e:	683b      	ldr	r3, [r7, #0]
 8105ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8105ba2:	683b      	ldr	r3, [r7, #0]
 8105ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8105ba6:	f000 f9bb 	bl	8105f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	681b      	ldr	r3, [r3, #0]
 8105bae:	689b      	ldr	r3, [r3, #8]
 8105bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105bb2:	68bb      	ldr	r3, [r7, #8]
 8105bb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8105bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	68ba      	ldr	r2, [r7, #8]
 8105bc0:	609a      	str	r2, [r3, #8]
      break;
 8105bc2:	e04f      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8105bc8:	683b      	ldr	r3, [r7, #0]
 8105bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8105bcc:	683b      	ldr	r3, [r7, #0]
 8105bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8105bd0:	683b      	ldr	r3, [r7, #0]
 8105bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8105bd4:	f000 f9a4 	bl	8105f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	681b      	ldr	r3, [r3, #0]
 8105bdc:	689a      	ldr	r2, [r3, #8]
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	681b      	ldr	r3, [r3, #0]
 8105be2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105be6:	609a      	str	r2, [r3, #8]
      break;
 8105be8:	e03c      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105bee:	683b      	ldr	r3, [r7, #0]
 8105bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8105bf2:	683b      	ldr	r3, [r7, #0]
 8105bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8105bf6:	461a      	mov	r2, r3
 8105bf8:	f000 f916 	bl	8105e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	2150      	movs	r1, #80	@ 0x50
 8105c02:	4618      	mov	r0, r3
 8105c04:	f000 f96f 	bl	8105ee6 <TIM_ITRx_SetConfig>
      break;
 8105c08:	e02c      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105c0e:	683b      	ldr	r3, [r7, #0]
 8105c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8105c12:	683b      	ldr	r3, [r7, #0]
 8105c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8105c16:	461a      	mov	r2, r3
 8105c18:	f000 f935 	bl	8105e86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	681b      	ldr	r3, [r3, #0]
 8105c20:	2160      	movs	r1, #96	@ 0x60
 8105c22:	4618      	mov	r0, r3
 8105c24:	f000 f95f 	bl	8105ee6 <TIM_ITRx_SetConfig>
      break;
 8105c28:	e01c      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8105c2e:	683b      	ldr	r3, [r7, #0]
 8105c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8105c32:	683b      	ldr	r3, [r7, #0]
 8105c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8105c36:	461a      	mov	r2, r3
 8105c38:	f000 f8f6 	bl	8105e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	2140      	movs	r1, #64	@ 0x40
 8105c42:	4618      	mov	r0, r3
 8105c44:	f000 f94f 	bl	8105ee6 <TIM_ITRx_SetConfig>
      break;
 8105c48:	e00c      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	681a      	ldr	r2, [r3, #0]
 8105c4e:	683b      	ldr	r3, [r7, #0]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	4619      	mov	r1, r3
 8105c54:	4610      	mov	r0, r2
 8105c56:	f000 f946 	bl	8105ee6 <TIM_ITRx_SetConfig>
      break;
 8105c5a:	e003      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105c5c:	2301      	movs	r3, #1
 8105c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8105c60:	e000      	b.n	8105c64 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2201      	movs	r2, #1
 8105c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	2200      	movs	r2, #0
 8105c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8105c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c76:	4618      	mov	r0, r3
 8105c78:	3710      	adds	r7, #16
 8105c7a:	46bd      	mov	sp, r7
 8105c7c:	bd80      	pop	{r7, pc}
 8105c7e:	bf00      	nop
 8105c80:	00100040 	.word	0x00100040
 8105c84:	00100030 	.word	0x00100030
 8105c88:	00100020 	.word	0x00100020

08105c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105c8c:	b480      	push	{r7}
 8105c8e:	b083      	sub	sp, #12
 8105c90:	af00      	add	r7, sp, #0
 8105c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105c94:	bf00      	nop
 8105c96:	370c      	adds	r7, #12
 8105c98:	46bd      	mov	sp, r7
 8105c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c9e:	4770      	bx	lr

08105ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105ca0:	b480      	push	{r7}
 8105ca2:	b083      	sub	sp, #12
 8105ca4:	af00      	add	r7, sp, #0
 8105ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105ca8:	bf00      	nop
 8105caa:	370c      	adds	r7, #12
 8105cac:	46bd      	mov	sp, r7
 8105cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cb2:	4770      	bx	lr

08105cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105cb4:	b480      	push	{r7}
 8105cb6:	b083      	sub	sp, #12
 8105cb8:	af00      	add	r7, sp, #0
 8105cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105cbc:	bf00      	nop
 8105cbe:	370c      	adds	r7, #12
 8105cc0:	46bd      	mov	sp, r7
 8105cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cc6:	4770      	bx	lr

08105cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105cc8:	b480      	push	{r7}
 8105cca:	b083      	sub	sp, #12
 8105ccc:	af00      	add	r7, sp, #0
 8105cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105cd0:	bf00      	nop
 8105cd2:	370c      	adds	r7, #12
 8105cd4:	46bd      	mov	sp, r7
 8105cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cda:	4770      	bx	lr

08105cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8105cdc:	b480      	push	{r7}
 8105cde:	b085      	sub	sp, #20
 8105ce0:	af00      	add	r7, sp, #0
 8105ce2:	6078      	str	r0, [r7, #4]
 8105ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105ce6:	687b      	ldr	r3, [r7, #4]
 8105ce8:	681b      	ldr	r3, [r3, #0]
 8105cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	4a46      	ldr	r2, [pc, #280]	@ (8105e08 <TIM_Base_SetConfig+0x12c>)
 8105cf0:	4293      	cmp	r3, r2
 8105cf2:	d013      	beq.n	8105d1c <TIM_Base_SetConfig+0x40>
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105cfa:	d00f      	beq.n	8105d1c <TIM_Base_SetConfig+0x40>
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	4a43      	ldr	r2, [pc, #268]	@ (8105e0c <TIM_Base_SetConfig+0x130>)
 8105d00:	4293      	cmp	r3, r2
 8105d02:	d00b      	beq.n	8105d1c <TIM_Base_SetConfig+0x40>
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	4a42      	ldr	r2, [pc, #264]	@ (8105e10 <TIM_Base_SetConfig+0x134>)
 8105d08:	4293      	cmp	r3, r2
 8105d0a:	d007      	beq.n	8105d1c <TIM_Base_SetConfig+0x40>
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	4a41      	ldr	r2, [pc, #260]	@ (8105e14 <TIM_Base_SetConfig+0x138>)
 8105d10:	4293      	cmp	r3, r2
 8105d12:	d003      	beq.n	8105d1c <TIM_Base_SetConfig+0x40>
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	4a40      	ldr	r2, [pc, #256]	@ (8105e18 <TIM_Base_SetConfig+0x13c>)
 8105d18:	4293      	cmp	r3, r2
 8105d1a:	d108      	bne.n	8105d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105d1c:	68fb      	ldr	r3, [r7, #12]
 8105d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105d24:	683b      	ldr	r3, [r7, #0]
 8105d26:	685b      	ldr	r3, [r3, #4]
 8105d28:	68fa      	ldr	r2, [r7, #12]
 8105d2a:	4313      	orrs	r3, r2
 8105d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	4a35      	ldr	r2, [pc, #212]	@ (8105e08 <TIM_Base_SetConfig+0x12c>)
 8105d32:	4293      	cmp	r3, r2
 8105d34:	d01f      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105d3c:	d01b      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	4a32      	ldr	r2, [pc, #200]	@ (8105e0c <TIM_Base_SetConfig+0x130>)
 8105d42:	4293      	cmp	r3, r2
 8105d44:	d017      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	4a31      	ldr	r2, [pc, #196]	@ (8105e10 <TIM_Base_SetConfig+0x134>)
 8105d4a:	4293      	cmp	r3, r2
 8105d4c:	d013      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d4e:	687b      	ldr	r3, [r7, #4]
 8105d50:	4a30      	ldr	r2, [pc, #192]	@ (8105e14 <TIM_Base_SetConfig+0x138>)
 8105d52:	4293      	cmp	r3, r2
 8105d54:	d00f      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	4a2f      	ldr	r2, [pc, #188]	@ (8105e18 <TIM_Base_SetConfig+0x13c>)
 8105d5a:	4293      	cmp	r3, r2
 8105d5c:	d00b      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	4a2e      	ldr	r2, [pc, #184]	@ (8105e1c <TIM_Base_SetConfig+0x140>)
 8105d62:	4293      	cmp	r3, r2
 8105d64:	d007      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	4a2d      	ldr	r2, [pc, #180]	@ (8105e20 <TIM_Base_SetConfig+0x144>)
 8105d6a:	4293      	cmp	r3, r2
 8105d6c:	d003      	beq.n	8105d76 <TIM_Base_SetConfig+0x9a>
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	4a2c      	ldr	r2, [pc, #176]	@ (8105e24 <TIM_Base_SetConfig+0x148>)
 8105d72:	4293      	cmp	r3, r2
 8105d74:	d108      	bne.n	8105d88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105d7e:	683b      	ldr	r3, [r7, #0]
 8105d80:	68db      	ldr	r3, [r3, #12]
 8105d82:	68fa      	ldr	r2, [r7, #12]
 8105d84:	4313      	orrs	r3, r2
 8105d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105d88:	68fb      	ldr	r3, [r7, #12]
 8105d8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8105d8e:	683b      	ldr	r3, [r7, #0]
 8105d90:	695b      	ldr	r3, [r3, #20]
 8105d92:	4313      	orrs	r3, r2
 8105d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	68fa      	ldr	r2, [r7, #12]
 8105d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105d9c:	683b      	ldr	r3, [r7, #0]
 8105d9e:	689a      	ldr	r2, [r3, #8]
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105da4:	683b      	ldr	r3, [r7, #0]
 8105da6:	681a      	ldr	r2, [r3, #0]
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	4a16      	ldr	r2, [pc, #88]	@ (8105e08 <TIM_Base_SetConfig+0x12c>)
 8105db0:	4293      	cmp	r3, r2
 8105db2:	d00f      	beq.n	8105dd4 <TIM_Base_SetConfig+0xf8>
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	4a18      	ldr	r2, [pc, #96]	@ (8105e18 <TIM_Base_SetConfig+0x13c>)
 8105db8:	4293      	cmp	r3, r2
 8105dba:	d00b      	beq.n	8105dd4 <TIM_Base_SetConfig+0xf8>
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	4a17      	ldr	r2, [pc, #92]	@ (8105e1c <TIM_Base_SetConfig+0x140>)
 8105dc0:	4293      	cmp	r3, r2
 8105dc2:	d007      	beq.n	8105dd4 <TIM_Base_SetConfig+0xf8>
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	4a16      	ldr	r2, [pc, #88]	@ (8105e20 <TIM_Base_SetConfig+0x144>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d003      	beq.n	8105dd4 <TIM_Base_SetConfig+0xf8>
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	4a15      	ldr	r2, [pc, #84]	@ (8105e24 <TIM_Base_SetConfig+0x148>)
 8105dd0:	4293      	cmp	r3, r2
 8105dd2:	d103      	bne.n	8105ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105dd4:	683b      	ldr	r3, [r7, #0]
 8105dd6:	691a      	ldr	r2, [r3, #16]
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	2201      	movs	r2, #1
 8105de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	691b      	ldr	r3, [r3, #16]
 8105de6:	f003 0301 	and.w	r3, r3, #1
 8105dea:	2b01      	cmp	r3, #1
 8105dec:	d105      	bne.n	8105dfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	691b      	ldr	r3, [r3, #16]
 8105df2:	f023 0201 	bic.w	r2, r3, #1
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	611a      	str	r2, [r3, #16]
  }
}
 8105dfa:	bf00      	nop
 8105dfc:	3714      	adds	r7, #20
 8105dfe:	46bd      	mov	sp, r7
 8105e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e04:	4770      	bx	lr
 8105e06:	bf00      	nop
 8105e08:	40010000 	.word	0x40010000
 8105e0c:	40000400 	.word	0x40000400
 8105e10:	40000800 	.word	0x40000800
 8105e14:	40000c00 	.word	0x40000c00
 8105e18:	40010400 	.word	0x40010400
 8105e1c:	40014000 	.word	0x40014000
 8105e20:	40014400 	.word	0x40014400
 8105e24:	40014800 	.word	0x40014800

08105e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105e28:	b480      	push	{r7}
 8105e2a:	b087      	sub	sp, #28
 8105e2c:	af00      	add	r7, sp, #0
 8105e2e:	60f8      	str	r0, [r7, #12]
 8105e30:	60b9      	str	r1, [r7, #8]
 8105e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	6a1b      	ldr	r3, [r3, #32]
 8105e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105e3a:	68fb      	ldr	r3, [r7, #12]
 8105e3c:	6a1b      	ldr	r3, [r3, #32]
 8105e3e:	f023 0201 	bic.w	r2, r3, #1
 8105e42:	68fb      	ldr	r3, [r7, #12]
 8105e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	699b      	ldr	r3, [r3, #24]
 8105e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105e4c:	693b      	ldr	r3, [r7, #16]
 8105e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8105e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	011b      	lsls	r3, r3, #4
 8105e58:	693a      	ldr	r2, [r7, #16]
 8105e5a:	4313      	orrs	r3, r2
 8105e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8105e5e:	697b      	ldr	r3, [r7, #20]
 8105e60:	f023 030a 	bic.w	r3, r3, #10
 8105e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8105e66:	697a      	ldr	r2, [r7, #20]
 8105e68:	68bb      	ldr	r3, [r7, #8]
 8105e6a:	4313      	orrs	r3, r2
 8105e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8105e6e:	68fb      	ldr	r3, [r7, #12]
 8105e70:	693a      	ldr	r2, [r7, #16]
 8105e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105e74:	68fb      	ldr	r3, [r7, #12]
 8105e76:	697a      	ldr	r2, [r7, #20]
 8105e78:	621a      	str	r2, [r3, #32]
}
 8105e7a:	bf00      	nop
 8105e7c:	371c      	adds	r7, #28
 8105e7e:	46bd      	mov	sp, r7
 8105e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e84:	4770      	bx	lr

08105e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105e86:	b480      	push	{r7}
 8105e88:	b087      	sub	sp, #28
 8105e8a:	af00      	add	r7, sp, #0
 8105e8c:	60f8      	str	r0, [r7, #12]
 8105e8e:	60b9      	str	r1, [r7, #8]
 8105e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8105e92:	68fb      	ldr	r3, [r7, #12]
 8105e94:	6a1b      	ldr	r3, [r3, #32]
 8105e96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105e98:	68fb      	ldr	r3, [r7, #12]
 8105e9a:	6a1b      	ldr	r3, [r3, #32]
 8105e9c:	f023 0210 	bic.w	r2, r3, #16
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105ea4:	68fb      	ldr	r3, [r7, #12]
 8105ea6:	699b      	ldr	r3, [r3, #24]
 8105ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8105eaa:	693b      	ldr	r3, [r7, #16]
 8105eac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8105eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	031b      	lsls	r3, r3, #12
 8105eb6:	693a      	ldr	r2, [r7, #16]
 8105eb8:	4313      	orrs	r3, r2
 8105eba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105ebc:	697b      	ldr	r3, [r7, #20]
 8105ebe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8105ec2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8105ec4:	68bb      	ldr	r3, [r7, #8]
 8105ec6:	011b      	lsls	r3, r3, #4
 8105ec8:	697a      	ldr	r2, [r7, #20]
 8105eca:	4313      	orrs	r3, r2
 8105ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	693a      	ldr	r2, [r7, #16]
 8105ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105ed4:	68fb      	ldr	r3, [r7, #12]
 8105ed6:	697a      	ldr	r2, [r7, #20]
 8105ed8:	621a      	str	r2, [r3, #32]
}
 8105eda:	bf00      	nop
 8105edc:	371c      	adds	r7, #28
 8105ede:	46bd      	mov	sp, r7
 8105ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ee4:	4770      	bx	lr

08105ee6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8105ee6:	b480      	push	{r7}
 8105ee8:	b085      	sub	sp, #20
 8105eea:	af00      	add	r7, sp, #0
 8105eec:	6078      	str	r0, [r7, #4]
 8105eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	689b      	ldr	r3, [r3, #8]
 8105ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8105ef6:	68fb      	ldr	r3, [r7, #12]
 8105ef8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8105efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105f02:	683a      	ldr	r2, [r7, #0]
 8105f04:	68fb      	ldr	r3, [r7, #12]
 8105f06:	4313      	orrs	r3, r2
 8105f08:	f043 0307 	orr.w	r3, r3, #7
 8105f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	68fa      	ldr	r2, [r7, #12]
 8105f12:	609a      	str	r2, [r3, #8]
}
 8105f14:	bf00      	nop
 8105f16:	3714      	adds	r7, #20
 8105f18:	46bd      	mov	sp, r7
 8105f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f1e:	4770      	bx	lr

08105f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105f20:	b480      	push	{r7}
 8105f22:	b087      	sub	sp, #28
 8105f24:	af00      	add	r7, sp, #0
 8105f26:	60f8      	str	r0, [r7, #12]
 8105f28:	60b9      	str	r1, [r7, #8]
 8105f2a:	607a      	str	r2, [r7, #4]
 8105f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	689b      	ldr	r3, [r3, #8]
 8105f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105f34:	697b      	ldr	r3, [r7, #20]
 8105f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105f3c:	683b      	ldr	r3, [r7, #0]
 8105f3e:	021a      	lsls	r2, r3, #8
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	431a      	orrs	r2, r3
 8105f44:	68bb      	ldr	r3, [r7, #8]
 8105f46:	4313      	orrs	r3, r2
 8105f48:	697a      	ldr	r2, [r7, #20]
 8105f4a:	4313      	orrs	r3, r2
 8105f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105f4e:	68fb      	ldr	r3, [r7, #12]
 8105f50:	697a      	ldr	r2, [r7, #20]
 8105f52:	609a      	str	r2, [r3, #8]
}
 8105f54:	bf00      	nop
 8105f56:	371c      	adds	r7, #28
 8105f58:	46bd      	mov	sp, r7
 8105f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f5e:	4770      	bx	lr

08105f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105f60:	b480      	push	{r7}
 8105f62:	b085      	sub	sp, #20
 8105f64:	af00      	add	r7, sp, #0
 8105f66:	6078      	str	r0, [r7, #4]
 8105f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8105f70:	2b01      	cmp	r3, #1
 8105f72:	d101      	bne.n	8105f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8105f74:	2302      	movs	r3, #2
 8105f76:	e06d      	b.n	8106054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	2201      	movs	r2, #1
 8105f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	2202      	movs	r2, #2
 8105f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	685b      	ldr	r3, [r3, #4]
 8105f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	689b      	ldr	r3, [r3, #8]
 8105f96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	4a30      	ldr	r2, [pc, #192]	@ (8106060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105f9e:	4293      	cmp	r3, r2
 8105fa0:	d004      	beq.n	8105fac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8106064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105fa8:	4293      	cmp	r3, r2
 8105faa:	d108      	bne.n	8105fbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105fac:	68fb      	ldr	r3, [r7, #12]
 8105fae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8105fb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105fb4:	683b      	ldr	r3, [r7, #0]
 8105fb6:	685b      	ldr	r3, [r3, #4]
 8105fb8:	68fa      	ldr	r2, [r7, #12]
 8105fba:	4313      	orrs	r3, r2
 8105fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8105fbe:	68fb      	ldr	r3, [r7, #12]
 8105fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8105fc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105fc6:	683b      	ldr	r3, [r7, #0]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	68fa      	ldr	r2, [r7, #12]
 8105fcc:	4313      	orrs	r3, r2
 8105fce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	68fa      	ldr	r2, [r7, #12]
 8105fd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	4a20      	ldr	r2, [pc, #128]	@ (8106060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105fde:	4293      	cmp	r3, r2
 8105fe0:	d022      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105fea:	d01d      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8106068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8105ff2:	4293      	cmp	r3, r2
 8105ff4:	d018      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	681b      	ldr	r3, [r3, #0]
 8105ffa:	4a1c      	ldr	r2, [pc, #112]	@ (810606c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105ffc:	4293      	cmp	r3, r2
 8105ffe:	d013      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	4a1a      	ldr	r2, [pc, #104]	@ (8106070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8106006:	4293      	cmp	r3, r2
 8106008:	d00e      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	681b      	ldr	r3, [r3, #0]
 810600e:	4a15      	ldr	r2, [pc, #84]	@ (8106064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106010:	4293      	cmp	r3, r2
 8106012:	d009      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	681b      	ldr	r3, [r3, #0]
 8106018:	4a16      	ldr	r2, [pc, #88]	@ (8106074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810601a:	4293      	cmp	r3, r2
 810601c:	d004      	beq.n	8106028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	4a15      	ldr	r2, [pc, #84]	@ (8106078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106024:	4293      	cmp	r3, r2
 8106026:	d10c      	bne.n	8106042 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106028:	68bb      	ldr	r3, [r7, #8]
 810602a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810602e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106030:	683b      	ldr	r3, [r7, #0]
 8106032:	689b      	ldr	r3, [r3, #8]
 8106034:	68ba      	ldr	r2, [r7, #8]
 8106036:	4313      	orrs	r3, r2
 8106038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	68ba      	ldr	r2, [r7, #8]
 8106040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	2201      	movs	r2, #1
 8106046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	2200      	movs	r2, #0
 810604e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8106052:	2300      	movs	r3, #0
}
 8106054:	4618      	mov	r0, r3
 8106056:	3714      	adds	r7, #20
 8106058:	46bd      	mov	sp, r7
 810605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810605e:	4770      	bx	lr
 8106060:	40010000 	.word	0x40010000
 8106064:	40010400 	.word	0x40010400
 8106068:	40000400 	.word	0x40000400
 810606c:	40000800 	.word	0x40000800
 8106070:	40000c00 	.word	0x40000c00
 8106074:	40001800 	.word	0x40001800
 8106078:	40014000 	.word	0x40014000

0810607c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810607c:	b480      	push	{r7}
 810607e:	b083      	sub	sp, #12
 8106080:	af00      	add	r7, sp, #0
 8106082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106084:	bf00      	nop
 8106086:	370c      	adds	r7, #12
 8106088:	46bd      	mov	sp, r7
 810608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810608e:	4770      	bx	lr

08106090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106090:	b480      	push	{r7}
 8106092:	b083      	sub	sp, #12
 8106094:	af00      	add	r7, sp, #0
 8106096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106098:	bf00      	nop
 810609a:	370c      	adds	r7, #12
 810609c:	46bd      	mov	sp, r7
 810609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060a2:	4770      	bx	lr

081060a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81060a4:	b480      	push	{r7}
 81060a6:	b083      	sub	sp, #12
 81060a8:	af00      	add	r7, sp, #0
 81060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81060ac:	bf00      	nop
 81060ae:	370c      	adds	r7, #12
 81060b0:	46bd      	mov	sp, r7
 81060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b6:	4770      	bx	lr

081060b8 <memset>:
 81060b8:	4402      	add	r2, r0
 81060ba:	4603      	mov	r3, r0
 81060bc:	4293      	cmp	r3, r2
 81060be:	d100      	bne.n	81060c2 <memset+0xa>
 81060c0:	4770      	bx	lr
 81060c2:	f803 1b01 	strb.w	r1, [r3], #1
 81060c6:	e7f9      	b.n	81060bc <memset+0x4>

081060c8 <__errno>:
 81060c8:	4b01      	ldr	r3, [pc, #4]	@ (81060d0 <__errno+0x8>)
 81060ca:	6818      	ldr	r0, [r3, #0]
 81060cc:	4770      	bx	lr
 81060ce:	bf00      	nop
 81060d0:	1000001c 	.word	0x1000001c

081060d4 <__libc_init_array>:
 81060d4:	b570      	push	{r4, r5, r6, lr}
 81060d6:	4d0d      	ldr	r5, [pc, #52]	@ (810610c <__libc_init_array+0x38>)
 81060d8:	4c0d      	ldr	r4, [pc, #52]	@ (8106110 <__libc_init_array+0x3c>)
 81060da:	1b64      	subs	r4, r4, r5
 81060dc:	10a4      	asrs	r4, r4, #2
 81060de:	2600      	movs	r6, #0
 81060e0:	42a6      	cmp	r6, r4
 81060e2:	d109      	bne.n	81060f8 <__libc_init_array+0x24>
 81060e4:	4d0b      	ldr	r5, [pc, #44]	@ (8106114 <__libc_init_array+0x40>)
 81060e6:	4c0c      	ldr	r4, [pc, #48]	@ (8106118 <__libc_init_array+0x44>)
 81060e8:	f001 f992 	bl	8107410 <_init>
 81060ec:	1b64      	subs	r4, r4, r5
 81060ee:	10a4      	asrs	r4, r4, #2
 81060f0:	2600      	movs	r6, #0
 81060f2:	42a6      	cmp	r6, r4
 81060f4:	d105      	bne.n	8106102 <__libc_init_array+0x2e>
 81060f6:	bd70      	pop	{r4, r5, r6, pc}
 81060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 81060fc:	4798      	blx	r3
 81060fe:	3601      	adds	r6, #1
 8106100:	e7ee      	b.n	81060e0 <__libc_init_array+0xc>
 8106102:	f855 3b04 	ldr.w	r3, [r5], #4
 8106106:	4798      	blx	r3
 8106108:	3601      	adds	r6, #1
 810610a:	e7f2      	b.n	81060f2 <__libc_init_array+0x1e>
 810610c:	081074c8 	.word	0x081074c8
 8106110:	081074c8 	.word	0x081074c8
 8106114:	081074c8 	.word	0x081074c8
 8106118:	081074cc 	.word	0x081074cc

0810611c <asin>:
 810611c:	b538      	push	{r3, r4, r5, lr}
 810611e:	ed2d 8b02 	vpush	{d8}
 8106122:	ec55 4b10 	vmov	r4, r5, d0
 8106126:	f000 f9a7 	bl	8106478 <__ieee754_asin>
 810612a:	4622      	mov	r2, r4
 810612c:	462b      	mov	r3, r5
 810612e:	4620      	mov	r0, r4
 8106130:	4629      	mov	r1, r5
 8106132:	eeb0 8a40 	vmov.f32	s16, s0
 8106136:	eef0 8a60 	vmov.f32	s17, s1
 810613a:	f7fa fd23 	bl	8100b84 <__aeabi_dcmpun>
 810613e:	b9a8      	cbnz	r0, 810616c <asin+0x50>
 8106140:	ec45 4b10 	vmov	d0, r4, r5
 8106144:	f000 f84c 	bl	81061e0 <fabs>
 8106148:	4b0c      	ldr	r3, [pc, #48]	@ (810617c <asin+0x60>)
 810614a:	ec51 0b10 	vmov	r0, r1, d0
 810614e:	2200      	movs	r2, #0
 8106150:	f7fa fd0e 	bl	8100b70 <__aeabi_dcmpgt>
 8106154:	b150      	cbz	r0, 810616c <asin+0x50>
 8106156:	f7ff ffb7 	bl	81060c8 <__errno>
 810615a:	ecbd 8b02 	vpop	{d8}
 810615e:	2321      	movs	r3, #33	@ 0x21
 8106160:	6003      	str	r3, [r0, #0]
 8106162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8106166:	4806      	ldr	r0, [pc, #24]	@ (8106180 <asin+0x64>)
 8106168:	f000 b89a 	b.w	81062a0 <nan>
 810616c:	eeb0 0a48 	vmov.f32	s0, s16
 8106170:	eef0 0a68 	vmov.f32	s1, s17
 8106174:	ecbd 8b02 	vpop	{d8}
 8106178:	bd38      	pop	{r3, r4, r5, pc}
 810617a:	bf00      	nop
 810617c:	3ff00000 	.word	0x3ff00000
 8106180:	08107438 	.word	0x08107438

08106184 <atan2>:
 8106184:	f000 bb7c 	b.w	8106880 <__ieee754_atan2>

08106188 <sqrt>:
 8106188:	b538      	push	{r3, r4, r5, lr}
 810618a:	ed2d 8b02 	vpush	{d8}
 810618e:	ec55 4b10 	vmov	r4, r5, d0
 8106192:	f000 f897 	bl	81062c4 <__ieee754_sqrt>
 8106196:	4622      	mov	r2, r4
 8106198:	462b      	mov	r3, r5
 810619a:	4620      	mov	r0, r4
 810619c:	4629      	mov	r1, r5
 810619e:	eeb0 8a40 	vmov.f32	s16, s0
 81061a2:	eef0 8a60 	vmov.f32	s17, s1
 81061a6:	f7fa fced 	bl	8100b84 <__aeabi_dcmpun>
 81061aa:	b990      	cbnz	r0, 81061d2 <sqrt+0x4a>
 81061ac:	2200      	movs	r2, #0
 81061ae:	2300      	movs	r3, #0
 81061b0:	4620      	mov	r0, r4
 81061b2:	4629      	mov	r1, r5
 81061b4:	f7fa fcbe 	bl	8100b34 <__aeabi_dcmplt>
 81061b8:	b158      	cbz	r0, 81061d2 <sqrt+0x4a>
 81061ba:	f7ff ff85 	bl	81060c8 <__errno>
 81061be:	2321      	movs	r3, #33	@ 0x21
 81061c0:	6003      	str	r3, [r0, #0]
 81061c2:	2200      	movs	r2, #0
 81061c4:	2300      	movs	r3, #0
 81061c6:	4610      	mov	r0, r2
 81061c8:	4619      	mov	r1, r3
 81061ca:	f7fa fb6b 	bl	81008a4 <__aeabi_ddiv>
 81061ce:	ec41 0b18 	vmov	d8, r0, r1
 81061d2:	eeb0 0a48 	vmov.f32	s0, s16
 81061d6:	eef0 0a68 	vmov.f32	s1, s17
 81061da:	ecbd 8b02 	vpop	{d8}
 81061de:	bd38      	pop	{r3, r4, r5, pc}

081061e0 <fabs>:
 81061e0:	ec51 0b10 	vmov	r0, r1, d0
 81061e4:	4602      	mov	r2, r0
 81061e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 81061ea:	ec43 2b10 	vmov	d0, r2, r3
 81061ee:	4770      	bx	lr

081061f0 <powf>:
 81061f0:	b508      	push	{r3, lr}
 81061f2:	ed2d 8b04 	vpush	{d8-d9}
 81061f6:	eeb0 8a60 	vmov.f32	s16, s1
 81061fa:	eeb0 9a40 	vmov.f32	s18, s0
 81061fe:	f000 fd9f 	bl	8106d40 <__ieee754_powf>
 8106202:	eeb4 8a48 	vcmp.f32	s16, s16
 8106206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810620a:	eef0 8a40 	vmov.f32	s17, s0
 810620e:	d63e      	bvs.n	810628e <powf+0x9e>
 8106210:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8106214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106218:	d112      	bne.n	8106240 <powf+0x50>
 810621a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106222:	d039      	beq.n	8106298 <powf+0xa8>
 8106224:	eeb0 0a48 	vmov.f32	s0, s16
 8106228:	f000 f842 	bl	81062b0 <finitef>
 810622c:	b378      	cbz	r0, 810628e <powf+0x9e>
 810622e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8106232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106236:	d52a      	bpl.n	810628e <powf+0x9e>
 8106238:	f7ff ff46 	bl	81060c8 <__errno>
 810623c:	2322      	movs	r3, #34	@ 0x22
 810623e:	e014      	b.n	810626a <powf+0x7a>
 8106240:	f000 f836 	bl	81062b0 <finitef>
 8106244:	b998      	cbnz	r0, 810626e <powf+0x7e>
 8106246:	eeb0 0a49 	vmov.f32	s0, s18
 810624a:	f000 f831 	bl	81062b0 <finitef>
 810624e:	b170      	cbz	r0, 810626e <powf+0x7e>
 8106250:	eeb0 0a48 	vmov.f32	s0, s16
 8106254:	f000 f82c 	bl	81062b0 <finitef>
 8106258:	b148      	cbz	r0, 810626e <powf+0x7e>
 810625a:	eef4 8a68 	vcmp.f32	s17, s17
 810625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106262:	d7e9      	bvc.n	8106238 <powf+0x48>
 8106264:	f7ff ff30 	bl	81060c8 <__errno>
 8106268:	2321      	movs	r3, #33	@ 0x21
 810626a:	6003      	str	r3, [r0, #0]
 810626c:	e00f      	b.n	810628e <powf+0x9e>
 810626e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8106272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106276:	d10a      	bne.n	810628e <powf+0x9e>
 8106278:	eeb0 0a49 	vmov.f32	s0, s18
 810627c:	f000 f818 	bl	81062b0 <finitef>
 8106280:	b128      	cbz	r0, 810628e <powf+0x9e>
 8106282:	eeb0 0a48 	vmov.f32	s0, s16
 8106286:	f000 f813 	bl	81062b0 <finitef>
 810628a:	2800      	cmp	r0, #0
 810628c:	d1d4      	bne.n	8106238 <powf+0x48>
 810628e:	eeb0 0a68 	vmov.f32	s0, s17
 8106292:	ecbd 8b04 	vpop	{d8-d9}
 8106296:	bd08      	pop	{r3, pc}
 8106298:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 810629c:	e7f7      	b.n	810628e <powf+0x9e>
	...

081062a0 <nan>:
 81062a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 81062a8 <nan+0x8>
 81062a4:	4770      	bx	lr
 81062a6:	bf00      	nop
 81062a8:	00000000 	.word	0x00000000
 81062ac:	7ff80000 	.word	0x7ff80000

081062b0 <finitef>:
 81062b0:	ee10 3a10 	vmov	r3, s0
 81062b4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 81062b8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 81062bc:	bfac      	ite	ge
 81062be:	2000      	movge	r0, #0
 81062c0:	2001      	movlt	r0, #1
 81062c2:	4770      	bx	lr

081062c4 <__ieee754_sqrt>:
 81062c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81062c8:	4a68      	ldr	r2, [pc, #416]	@ (810646c <__ieee754_sqrt+0x1a8>)
 81062ca:	ec55 4b10 	vmov	r4, r5, d0
 81062ce:	43aa      	bics	r2, r5
 81062d0:	462b      	mov	r3, r5
 81062d2:	4621      	mov	r1, r4
 81062d4:	d110      	bne.n	81062f8 <__ieee754_sqrt+0x34>
 81062d6:	4622      	mov	r2, r4
 81062d8:	4620      	mov	r0, r4
 81062da:	4629      	mov	r1, r5
 81062dc:	f7fa f9b8 	bl	8100650 <__aeabi_dmul>
 81062e0:	4602      	mov	r2, r0
 81062e2:	460b      	mov	r3, r1
 81062e4:	4620      	mov	r0, r4
 81062e6:	4629      	mov	r1, r5
 81062e8:	f7f9 fffc 	bl	81002e4 <__adddf3>
 81062ec:	4604      	mov	r4, r0
 81062ee:	460d      	mov	r5, r1
 81062f0:	ec45 4b10 	vmov	d0, r4, r5
 81062f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81062f8:	2d00      	cmp	r5, #0
 81062fa:	dc0e      	bgt.n	810631a <__ieee754_sqrt+0x56>
 81062fc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8106300:	4322      	orrs	r2, r4
 8106302:	d0f5      	beq.n	81062f0 <__ieee754_sqrt+0x2c>
 8106304:	b19d      	cbz	r5, 810632e <__ieee754_sqrt+0x6a>
 8106306:	4622      	mov	r2, r4
 8106308:	4620      	mov	r0, r4
 810630a:	4629      	mov	r1, r5
 810630c:	f7f9 ffe8 	bl	81002e0 <__aeabi_dsub>
 8106310:	4602      	mov	r2, r0
 8106312:	460b      	mov	r3, r1
 8106314:	f7fa fac6 	bl	81008a4 <__aeabi_ddiv>
 8106318:	e7e8      	b.n	81062ec <__ieee754_sqrt+0x28>
 810631a:	152a      	asrs	r2, r5, #20
 810631c:	d115      	bne.n	810634a <__ieee754_sqrt+0x86>
 810631e:	2000      	movs	r0, #0
 8106320:	e009      	b.n	8106336 <__ieee754_sqrt+0x72>
 8106322:	0acb      	lsrs	r3, r1, #11
 8106324:	3a15      	subs	r2, #21
 8106326:	0549      	lsls	r1, r1, #21
 8106328:	2b00      	cmp	r3, #0
 810632a:	d0fa      	beq.n	8106322 <__ieee754_sqrt+0x5e>
 810632c:	e7f7      	b.n	810631e <__ieee754_sqrt+0x5a>
 810632e:	462a      	mov	r2, r5
 8106330:	e7fa      	b.n	8106328 <__ieee754_sqrt+0x64>
 8106332:	005b      	lsls	r3, r3, #1
 8106334:	3001      	adds	r0, #1
 8106336:	02dc      	lsls	r4, r3, #11
 8106338:	d5fb      	bpl.n	8106332 <__ieee754_sqrt+0x6e>
 810633a:	1e44      	subs	r4, r0, #1
 810633c:	1b12      	subs	r2, r2, r4
 810633e:	f1c0 0420 	rsb	r4, r0, #32
 8106342:	fa21 f404 	lsr.w	r4, r1, r4
 8106346:	4323      	orrs	r3, r4
 8106348:	4081      	lsls	r1, r0
 810634a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810634e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8106352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106356:	07d2      	lsls	r2, r2, #31
 8106358:	bf5c      	itt	pl
 810635a:	005b      	lslpl	r3, r3, #1
 810635c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8106360:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8106364:	bf58      	it	pl
 8106366:	0049      	lslpl	r1, r1, #1
 8106368:	2600      	movs	r6, #0
 810636a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 810636e:	106d      	asrs	r5, r5, #1
 8106370:	0049      	lsls	r1, r1, #1
 8106372:	2016      	movs	r0, #22
 8106374:	4632      	mov	r2, r6
 8106376:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 810637a:	1917      	adds	r7, r2, r4
 810637c:	429f      	cmp	r7, r3
 810637e:	bfde      	ittt	le
 8106380:	193a      	addle	r2, r7, r4
 8106382:	1bdb      	suble	r3, r3, r7
 8106384:	1936      	addle	r6, r6, r4
 8106386:	0fcf      	lsrs	r7, r1, #31
 8106388:	3801      	subs	r0, #1
 810638a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 810638e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8106392:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8106396:	d1f0      	bne.n	810637a <__ieee754_sqrt+0xb6>
 8106398:	4604      	mov	r4, r0
 810639a:	2720      	movs	r7, #32
 810639c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 81063a0:	429a      	cmp	r2, r3
 81063a2:	eb00 0e0c 	add.w	lr, r0, ip
 81063a6:	db02      	blt.n	81063ae <__ieee754_sqrt+0xea>
 81063a8:	d113      	bne.n	81063d2 <__ieee754_sqrt+0x10e>
 81063aa:	458e      	cmp	lr, r1
 81063ac:	d811      	bhi.n	81063d2 <__ieee754_sqrt+0x10e>
 81063ae:	f1be 0f00 	cmp.w	lr, #0
 81063b2:	eb0e 000c 	add.w	r0, lr, ip
 81063b6:	da42      	bge.n	810643e <__ieee754_sqrt+0x17a>
 81063b8:	2800      	cmp	r0, #0
 81063ba:	db40      	blt.n	810643e <__ieee754_sqrt+0x17a>
 81063bc:	f102 0801 	add.w	r8, r2, #1
 81063c0:	1a9b      	subs	r3, r3, r2
 81063c2:	458e      	cmp	lr, r1
 81063c4:	bf88      	it	hi
 81063c6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 81063ca:	eba1 010e 	sub.w	r1, r1, lr
 81063ce:	4464      	add	r4, ip
 81063d0:	4642      	mov	r2, r8
 81063d2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 81063d6:	3f01      	subs	r7, #1
 81063d8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 81063dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 81063e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 81063e4:	d1dc      	bne.n	81063a0 <__ieee754_sqrt+0xdc>
 81063e6:	4319      	orrs	r1, r3
 81063e8:	d01b      	beq.n	8106422 <__ieee754_sqrt+0x15e>
 81063ea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8106470 <__ieee754_sqrt+0x1ac>
 81063ee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8106474 <__ieee754_sqrt+0x1b0>
 81063f2:	e9da 0100 	ldrd	r0, r1, [sl]
 81063f6:	e9db 2300 	ldrd	r2, r3, [fp]
 81063fa:	f7f9 ff71 	bl	81002e0 <__aeabi_dsub>
 81063fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8106402:	4602      	mov	r2, r0
 8106404:	460b      	mov	r3, r1
 8106406:	4640      	mov	r0, r8
 8106408:	4649      	mov	r1, r9
 810640a:	f7fa fb9d 	bl	8100b48 <__aeabi_dcmple>
 810640e:	b140      	cbz	r0, 8106422 <__ieee754_sqrt+0x15e>
 8106410:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8106414:	e9da 0100 	ldrd	r0, r1, [sl]
 8106418:	e9db 2300 	ldrd	r2, r3, [fp]
 810641c:	d111      	bne.n	8106442 <__ieee754_sqrt+0x17e>
 810641e:	3601      	adds	r6, #1
 8106420:	463c      	mov	r4, r7
 8106422:	1072      	asrs	r2, r6, #1
 8106424:	0863      	lsrs	r3, r4, #1
 8106426:	07f1      	lsls	r1, r6, #31
 8106428:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 810642c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8106430:	bf48      	it	mi
 8106432:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8106436:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 810643a:	4618      	mov	r0, r3
 810643c:	e756      	b.n	81062ec <__ieee754_sqrt+0x28>
 810643e:	4690      	mov	r8, r2
 8106440:	e7be      	b.n	81063c0 <__ieee754_sqrt+0xfc>
 8106442:	f7f9 ff4f 	bl	81002e4 <__adddf3>
 8106446:	e9da 8900 	ldrd	r8, r9, [sl]
 810644a:	4602      	mov	r2, r0
 810644c:	460b      	mov	r3, r1
 810644e:	4640      	mov	r0, r8
 8106450:	4649      	mov	r1, r9
 8106452:	f7fa fb6f 	bl	8100b34 <__aeabi_dcmplt>
 8106456:	b120      	cbz	r0, 8106462 <__ieee754_sqrt+0x19e>
 8106458:	1ca0      	adds	r0, r4, #2
 810645a:	bf08      	it	eq
 810645c:	3601      	addeq	r6, #1
 810645e:	3402      	adds	r4, #2
 8106460:	e7df      	b.n	8106422 <__ieee754_sqrt+0x15e>
 8106462:	1c63      	adds	r3, r4, #1
 8106464:	f023 0401 	bic.w	r4, r3, #1
 8106468:	e7db      	b.n	8106422 <__ieee754_sqrt+0x15e>
 810646a:	bf00      	nop
 810646c:	7ff00000 	.word	0x7ff00000
 8106470:	10000078 	.word	0x10000078
 8106474:	10000070 	.word	0x10000070

08106478 <__ieee754_asin>:
 8106478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810647c:	ec55 4b10 	vmov	r4, r5, d0
 8106480:	4bc7      	ldr	r3, [pc, #796]	@ (81067a0 <__ieee754_asin+0x328>)
 8106482:	b087      	sub	sp, #28
 8106484:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8106488:	429e      	cmp	r6, r3
 810648a:	9501      	str	r5, [sp, #4]
 810648c:	d92d      	bls.n	81064ea <__ieee754_asin+0x72>
 810648e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8106492:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8106496:	4326      	orrs	r6, r4
 8106498:	d116      	bne.n	81064c8 <__ieee754_asin+0x50>
 810649a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8106738 <__ieee754_asin+0x2c0>)
 810649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064a0:	4620      	mov	r0, r4
 81064a2:	4629      	mov	r1, r5
 81064a4:	f7fa f8d4 	bl	8100650 <__aeabi_dmul>
 81064a8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8106740 <__ieee754_asin+0x2c8>)
 81064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064ae:	4606      	mov	r6, r0
 81064b0:	460f      	mov	r7, r1
 81064b2:	4620      	mov	r0, r4
 81064b4:	4629      	mov	r1, r5
 81064b6:	f7fa f8cb 	bl	8100650 <__aeabi_dmul>
 81064ba:	4602      	mov	r2, r0
 81064bc:	460b      	mov	r3, r1
 81064be:	4630      	mov	r0, r6
 81064c0:	4639      	mov	r1, r7
 81064c2:	f7f9 ff0f 	bl	81002e4 <__adddf3>
 81064c6:	e009      	b.n	81064dc <__ieee754_asin+0x64>
 81064c8:	4622      	mov	r2, r4
 81064ca:	462b      	mov	r3, r5
 81064cc:	4620      	mov	r0, r4
 81064ce:	4629      	mov	r1, r5
 81064d0:	f7f9 ff06 	bl	81002e0 <__aeabi_dsub>
 81064d4:	4602      	mov	r2, r0
 81064d6:	460b      	mov	r3, r1
 81064d8:	f7fa f9e4 	bl	81008a4 <__aeabi_ddiv>
 81064dc:	4604      	mov	r4, r0
 81064de:	460d      	mov	r5, r1
 81064e0:	ec45 4b10 	vmov	d0, r4, r5
 81064e4:	b007      	add	sp, #28
 81064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81064ea:	4bae      	ldr	r3, [pc, #696]	@ (81067a4 <__ieee754_asin+0x32c>)
 81064ec:	429e      	cmp	r6, r3
 81064ee:	d810      	bhi.n	8106512 <__ieee754_asin+0x9a>
 81064f0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 81064f4:	f080 80ad 	bcs.w	8106652 <__ieee754_asin+0x1da>
 81064f8:	a393      	add	r3, pc, #588	@ (adr r3, 8106748 <__ieee754_asin+0x2d0>)
 81064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064fe:	4620      	mov	r0, r4
 8106500:	4629      	mov	r1, r5
 8106502:	f7f9 feef 	bl	81002e4 <__adddf3>
 8106506:	4ba8      	ldr	r3, [pc, #672]	@ (81067a8 <__ieee754_asin+0x330>)
 8106508:	2200      	movs	r2, #0
 810650a:	f7fa fb31 	bl	8100b70 <__aeabi_dcmpgt>
 810650e:	2800      	cmp	r0, #0
 8106510:	d1e6      	bne.n	81064e0 <__ieee754_asin+0x68>
 8106512:	ec45 4b10 	vmov	d0, r4, r5
 8106516:	f7ff fe63 	bl	81061e0 <fabs>
 810651a:	49a3      	ldr	r1, [pc, #652]	@ (81067a8 <__ieee754_asin+0x330>)
 810651c:	ec53 2b10 	vmov	r2, r3, d0
 8106520:	2000      	movs	r0, #0
 8106522:	f7f9 fedd 	bl	81002e0 <__aeabi_dsub>
 8106526:	4ba1      	ldr	r3, [pc, #644]	@ (81067ac <__ieee754_asin+0x334>)
 8106528:	2200      	movs	r2, #0
 810652a:	f7fa f891 	bl	8100650 <__aeabi_dmul>
 810652e:	a388      	add	r3, pc, #544	@ (adr r3, 8106750 <__ieee754_asin+0x2d8>)
 8106530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106534:	4604      	mov	r4, r0
 8106536:	460d      	mov	r5, r1
 8106538:	f7fa f88a 	bl	8100650 <__aeabi_dmul>
 810653c:	a386      	add	r3, pc, #536	@ (adr r3, 8106758 <__ieee754_asin+0x2e0>)
 810653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106542:	f7f9 fecf 	bl	81002e4 <__adddf3>
 8106546:	4622      	mov	r2, r4
 8106548:	462b      	mov	r3, r5
 810654a:	f7fa f881 	bl	8100650 <__aeabi_dmul>
 810654e:	a384      	add	r3, pc, #528	@ (adr r3, 8106760 <__ieee754_asin+0x2e8>)
 8106550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106554:	f7f9 fec4 	bl	81002e0 <__aeabi_dsub>
 8106558:	4622      	mov	r2, r4
 810655a:	462b      	mov	r3, r5
 810655c:	f7fa f878 	bl	8100650 <__aeabi_dmul>
 8106560:	a381      	add	r3, pc, #516	@ (adr r3, 8106768 <__ieee754_asin+0x2f0>)
 8106562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106566:	f7f9 febd 	bl	81002e4 <__adddf3>
 810656a:	4622      	mov	r2, r4
 810656c:	462b      	mov	r3, r5
 810656e:	f7fa f86f 	bl	8100650 <__aeabi_dmul>
 8106572:	a37f      	add	r3, pc, #508	@ (adr r3, 8106770 <__ieee754_asin+0x2f8>)
 8106574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106578:	f7f9 feb2 	bl	81002e0 <__aeabi_dsub>
 810657c:	4622      	mov	r2, r4
 810657e:	462b      	mov	r3, r5
 8106580:	f7fa f866 	bl	8100650 <__aeabi_dmul>
 8106584:	a37c      	add	r3, pc, #496	@ (adr r3, 8106778 <__ieee754_asin+0x300>)
 8106586:	e9d3 2300 	ldrd	r2, r3, [r3]
 810658a:	f7f9 feab 	bl	81002e4 <__adddf3>
 810658e:	4622      	mov	r2, r4
 8106590:	462b      	mov	r3, r5
 8106592:	f7fa f85d 	bl	8100650 <__aeabi_dmul>
 8106596:	a37a      	add	r3, pc, #488	@ (adr r3, 8106780 <__ieee754_asin+0x308>)
 8106598:	e9d3 2300 	ldrd	r2, r3, [r3]
 810659c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81065a0:	4620      	mov	r0, r4
 81065a2:	4629      	mov	r1, r5
 81065a4:	f7fa f854 	bl	8100650 <__aeabi_dmul>
 81065a8:	a377      	add	r3, pc, #476	@ (adr r3, 8106788 <__ieee754_asin+0x310>)
 81065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065ae:	f7f9 fe97 	bl	81002e0 <__aeabi_dsub>
 81065b2:	4622      	mov	r2, r4
 81065b4:	462b      	mov	r3, r5
 81065b6:	f7fa f84b 	bl	8100650 <__aeabi_dmul>
 81065ba:	a375      	add	r3, pc, #468	@ (adr r3, 8106790 <__ieee754_asin+0x318>)
 81065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065c0:	f7f9 fe90 	bl	81002e4 <__adddf3>
 81065c4:	4622      	mov	r2, r4
 81065c6:	462b      	mov	r3, r5
 81065c8:	f7fa f842 	bl	8100650 <__aeabi_dmul>
 81065cc:	a372      	add	r3, pc, #456	@ (adr r3, 8106798 <__ieee754_asin+0x320>)
 81065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065d2:	f7f9 fe85 	bl	81002e0 <__aeabi_dsub>
 81065d6:	4622      	mov	r2, r4
 81065d8:	462b      	mov	r3, r5
 81065da:	f7fa f839 	bl	8100650 <__aeabi_dmul>
 81065de:	4b72      	ldr	r3, [pc, #456]	@ (81067a8 <__ieee754_asin+0x330>)
 81065e0:	2200      	movs	r2, #0
 81065e2:	f7f9 fe7f 	bl	81002e4 <__adddf3>
 81065e6:	ec45 4b10 	vmov	d0, r4, r5
 81065ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81065ee:	f7ff fe69 	bl	81062c4 <__ieee754_sqrt>
 81065f2:	4b6f      	ldr	r3, [pc, #444]	@ (81067b0 <__ieee754_asin+0x338>)
 81065f4:	429e      	cmp	r6, r3
 81065f6:	ec5b ab10 	vmov	sl, fp, d0
 81065fa:	f240 80db 	bls.w	81067b4 <__ieee754_asin+0x33c>
 81065fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8106602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8106606:	f7fa f94d 	bl	81008a4 <__aeabi_ddiv>
 810660a:	4652      	mov	r2, sl
 810660c:	465b      	mov	r3, fp
 810660e:	f7fa f81f 	bl	8100650 <__aeabi_dmul>
 8106612:	4652      	mov	r2, sl
 8106614:	465b      	mov	r3, fp
 8106616:	f7f9 fe65 	bl	81002e4 <__adddf3>
 810661a:	4602      	mov	r2, r0
 810661c:	460b      	mov	r3, r1
 810661e:	f7f9 fe61 	bl	81002e4 <__adddf3>
 8106622:	a347      	add	r3, pc, #284	@ (adr r3, 8106740 <__ieee754_asin+0x2c8>)
 8106624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106628:	f7f9 fe5a 	bl	81002e0 <__aeabi_dsub>
 810662c:	4602      	mov	r2, r0
 810662e:	460b      	mov	r3, r1
 8106630:	a141      	add	r1, pc, #260	@ (adr r1, 8106738 <__ieee754_asin+0x2c0>)
 8106632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106636:	f7f9 fe53 	bl	81002e0 <__aeabi_dsub>
 810663a:	9b01      	ldr	r3, [sp, #4]
 810663c:	2b00      	cmp	r3, #0
 810663e:	bfdc      	itt	le
 8106640:	4602      	movle	r2, r0
 8106642:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8106646:	4604      	mov	r4, r0
 8106648:	460d      	mov	r5, r1
 810664a:	bfdc      	itt	le
 810664c:	4614      	movle	r4, r2
 810664e:	461d      	movle	r5, r3
 8106650:	e746      	b.n	81064e0 <__ieee754_asin+0x68>
 8106652:	4622      	mov	r2, r4
 8106654:	462b      	mov	r3, r5
 8106656:	4620      	mov	r0, r4
 8106658:	4629      	mov	r1, r5
 810665a:	f7f9 fff9 	bl	8100650 <__aeabi_dmul>
 810665e:	a33c      	add	r3, pc, #240	@ (adr r3, 8106750 <__ieee754_asin+0x2d8>)
 8106660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106664:	4606      	mov	r6, r0
 8106666:	460f      	mov	r7, r1
 8106668:	f7f9 fff2 	bl	8100650 <__aeabi_dmul>
 810666c:	a33a      	add	r3, pc, #232	@ (adr r3, 8106758 <__ieee754_asin+0x2e0>)
 810666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106672:	f7f9 fe37 	bl	81002e4 <__adddf3>
 8106676:	4632      	mov	r2, r6
 8106678:	463b      	mov	r3, r7
 810667a:	f7f9 ffe9 	bl	8100650 <__aeabi_dmul>
 810667e:	a338      	add	r3, pc, #224	@ (adr r3, 8106760 <__ieee754_asin+0x2e8>)
 8106680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106684:	f7f9 fe2c 	bl	81002e0 <__aeabi_dsub>
 8106688:	4632      	mov	r2, r6
 810668a:	463b      	mov	r3, r7
 810668c:	f7f9 ffe0 	bl	8100650 <__aeabi_dmul>
 8106690:	a335      	add	r3, pc, #212	@ (adr r3, 8106768 <__ieee754_asin+0x2f0>)
 8106692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106696:	f7f9 fe25 	bl	81002e4 <__adddf3>
 810669a:	4632      	mov	r2, r6
 810669c:	463b      	mov	r3, r7
 810669e:	f7f9 ffd7 	bl	8100650 <__aeabi_dmul>
 81066a2:	a333      	add	r3, pc, #204	@ (adr r3, 8106770 <__ieee754_asin+0x2f8>)
 81066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066a8:	f7f9 fe1a 	bl	81002e0 <__aeabi_dsub>
 81066ac:	4632      	mov	r2, r6
 81066ae:	463b      	mov	r3, r7
 81066b0:	f7f9 ffce 	bl	8100650 <__aeabi_dmul>
 81066b4:	a330      	add	r3, pc, #192	@ (adr r3, 8106778 <__ieee754_asin+0x300>)
 81066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ba:	f7f9 fe13 	bl	81002e4 <__adddf3>
 81066be:	4632      	mov	r2, r6
 81066c0:	463b      	mov	r3, r7
 81066c2:	f7f9 ffc5 	bl	8100650 <__aeabi_dmul>
 81066c6:	a32e      	add	r3, pc, #184	@ (adr r3, 8106780 <__ieee754_asin+0x308>)
 81066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066cc:	4680      	mov	r8, r0
 81066ce:	4689      	mov	r9, r1
 81066d0:	4630      	mov	r0, r6
 81066d2:	4639      	mov	r1, r7
 81066d4:	f7f9 ffbc 	bl	8100650 <__aeabi_dmul>
 81066d8:	a32b      	add	r3, pc, #172	@ (adr r3, 8106788 <__ieee754_asin+0x310>)
 81066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066de:	f7f9 fdff 	bl	81002e0 <__aeabi_dsub>
 81066e2:	4632      	mov	r2, r6
 81066e4:	463b      	mov	r3, r7
 81066e6:	f7f9 ffb3 	bl	8100650 <__aeabi_dmul>
 81066ea:	a329      	add	r3, pc, #164	@ (adr r3, 8106790 <__ieee754_asin+0x318>)
 81066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066f0:	f7f9 fdf8 	bl	81002e4 <__adddf3>
 81066f4:	4632      	mov	r2, r6
 81066f6:	463b      	mov	r3, r7
 81066f8:	f7f9 ffaa 	bl	8100650 <__aeabi_dmul>
 81066fc:	a326      	add	r3, pc, #152	@ (adr r3, 8106798 <__ieee754_asin+0x320>)
 81066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106702:	f7f9 fded 	bl	81002e0 <__aeabi_dsub>
 8106706:	4632      	mov	r2, r6
 8106708:	463b      	mov	r3, r7
 810670a:	f7f9 ffa1 	bl	8100650 <__aeabi_dmul>
 810670e:	4b26      	ldr	r3, [pc, #152]	@ (81067a8 <__ieee754_asin+0x330>)
 8106710:	2200      	movs	r2, #0
 8106712:	f7f9 fde7 	bl	81002e4 <__adddf3>
 8106716:	4602      	mov	r2, r0
 8106718:	460b      	mov	r3, r1
 810671a:	4640      	mov	r0, r8
 810671c:	4649      	mov	r1, r9
 810671e:	f7fa f8c1 	bl	81008a4 <__aeabi_ddiv>
 8106722:	4622      	mov	r2, r4
 8106724:	462b      	mov	r3, r5
 8106726:	f7f9 ff93 	bl	8100650 <__aeabi_dmul>
 810672a:	4602      	mov	r2, r0
 810672c:	460b      	mov	r3, r1
 810672e:	4620      	mov	r0, r4
 8106730:	4629      	mov	r1, r5
 8106732:	e6c6      	b.n	81064c2 <__ieee754_asin+0x4a>
 8106734:	f3af 8000 	nop.w
 8106738:	54442d18 	.word	0x54442d18
 810673c:	3ff921fb 	.word	0x3ff921fb
 8106740:	33145c07 	.word	0x33145c07
 8106744:	3c91a626 	.word	0x3c91a626
 8106748:	8800759c 	.word	0x8800759c
 810674c:	7e37e43c 	.word	0x7e37e43c
 8106750:	0dfdf709 	.word	0x0dfdf709
 8106754:	3f023de1 	.word	0x3f023de1
 8106758:	7501b288 	.word	0x7501b288
 810675c:	3f49efe0 	.word	0x3f49efe0
 8106760:	b5688f3b 	.word	0xb5688f3b
 8106764:	3fa48228 	.word	0x3fa48228
 8106768:	0e884455 	.word	0x0e884455
 810676c:	3fc9c155 	.word	0x3fc9c155
 8106770:	03eb6f7d 	.word	0x03eb6f7d
 8106774:	3fd4d612 	.word	0x3fd4d612
 8106778:	55555555 	.word	0x55555555
 810677c:	3fc55555 	.word	0x3fc55555
 8106780:	b12e9282 	.word	0xb12e9282
 8106784:	3fb3b8c5 	.word	0x3fb3b8c5
 8106788:	1b8d0159 	.word	0x1b8d0159
 810678c:	3fe6066c 	.word	0x3fe6066c
 8106790:	9c598ac8 	.word	0x9c598ac8
 8106794:	40002ae5 	.word	0x40002ae5
 8106798:	1c8a2d4b 	.word	0x1c8a2d4b
 810679c:	40033a27 	.word	0x40033a27
 81067a0:	3fefffff 	.word	0x3fefffff
 81067a4:	3fdfffff 	.word	0x3fdfffff
 81067a8:	3ff00000 	.word	0x3ff00000
 81067ac:	3fe00000 	.word	0x3fe00000
 81067b0:	3fef3332 	.word	0x3fef3332
 81067b4:	4652      	mov	r2, sl
 81067b6:	465b      	mov	r3, fp
 81067b8:	4650      	mov	r0, sl
 81067ba:	4659      	mov	r1, fp
 81067bc:	f7f9 fd92 	bl	81002e4 <__adddf3>
 81067c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81067c4:	4606      	mov	r6, r0
 81067c6:	460f      	mov	r7, r1
 81067c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81067cc:	f7fa f86a 	bl	81008a4 <__aeabi_ddiv>
 81067d0:	4602      	mov	r2, r0
 81067d2:	460b      	mov	r3, r1
 81067d4:	4630      	mov	r0, r6
 81067d6:	4639      	mov	r1, r7
 81067d8:	f7f9 ff3a 	bl	8100650 <__aeabi_dmul>
 81067dc:	f04f 0800 	mov.w	r8, #0
 81067e0:	4606      	mov	r6, r0
 81067e2:	460f      	mov	r7, r1
 81067e4:	4642      	mov	r2, r8
 81067e6:	465b      	mov	r3, fp
 81067e8:	4640      	mov	r0, r8
 81067ea:	4659      	mov	r1, fp
 81067ec:	f7f9 ff30 	bl	8100650 <__aeabi_dmul>
 81067f0:	4602      	mov	r2, r0
 81067f2:	460b      	mov	r3, r1
 81067f4:	4620      	mov	r0, r4
 81067f6:	4629      	mov	r1, r5
 81067f8:	f7f9 fd72 	bl	81002e0 <__aeabi_dsub>
 81067fc:	4642      	mov	r2, r8
 81067fe:	4604      	mov	r4, r0
 8106800:	460d      	mov	r5, r1
 8106802:	465b      	mov	r3, fp
 8106804:	4650      	mov	r0, sl
 8106806:	4659      	mov	r1, fp
 8106808:	f7f9 fd6c 	bl	81002e4 <__adddf3>
 810680c:	4602      	mov	r2, r0
 810680e:	460b      	mov	r3, r1
 8106810:	4620      	mov	r0, r4
 8106812:	4629      	mov	r1, r5
 8106814:	f7fa f846 	bl	81008a4 <__aeabi_ddiv>
 8106818:	4602      	mov	r2, r0
 810681a:	460b      	mov	r3, r1
 810681c:	f7f9 fd62 	bl	81002e4 <__adddf3>
 8106820:	4602      	mov	r2, r0
 8106822:	460b      	mov	r3, r1
 8106824:	a112      	add	r1, pc, #72	@ (adr r1, 8106870 <__ieee754_asin+0x3f8>)
 8106826:	e9d1 0100 	ldrd	r0, r1, [r1]
 810682a:	f7f9 fd59 	bl	81002e0 <__aeabi_dsub>
 810682e:	4602      	mov	r2, r0
 8106830:	460b      	mov	r3, r1
 8106832:	4630      	mov	r0, r6
 8106834:	4639      	mov	r1, r7
 8106836:	f7f9 fd53 	bl	81002e0 <__aeabi_dsub>
 810683a:	4642      	mov	r2, r8
 810683c:	4604      	mov	r4, r0
 810683e:	460d      	mov	r5, r1
 8106840:	465b      	mov	r3, fp
 8106842:	4640      	mov	r0, r8
 8106844:	4659      	mov	r1, fp
 8106846:	f7f9 fd4d 	bl	81002e4 <__adddf3>
 810684a:	4602      	mov	r2, r0
 810684c:	460b      	mov	r3, r1
 810684e:	a10a      	add	r1, pc, #40	@ (adr r1, 8106878 <__ieee754_asin+0x400>)
 8106850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106854:	f7f9 fd44 	bl	81002e0 <__aeabi_dsub>
 8106858:	4602      	mov	r2, r0
 810685a:	460b      	mov	r3, r1
 810685c:	4620      	mov	r0, r4
 810685e:	4629      	mov	r1, r5
 8106860:	f7f9 fd3e 	bl	81002e0 <__aeabi_dsub>
 8106864:	4602      	mov	r2, r0
 8106866:	460b      	mov	r3, r1
 8106868:	a103      	add	r1, pc, #12	@ (adr r1, 8106878 <__ieee754_asin+0x400>)
 810686a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810686e:	e6e2      	b.n	8106636 <__ieee754_asin+0x1be>
 8106870:	33145c07 	.word	0x33145c07
 8106874:	3c91a626 	.word	0x3c91a626
 8106878:	54442d18 	.word	0x54442d18
 810687c:	3fe921fb 	.word	0x3fe921fb

08106880 <__ieee754_atan2>:
 8106880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106884:	ec57 6b11 	vmov	r6, r7, d1
 8106888:	4273      	negs	r3, r6
 810688a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8106a08 <__ieee754_atan2+0x188>
 810688e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8106892:	4333      	orrs	r3, r6
 8106894:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8106898:	4543      	cmp	r3, r8
 810689a:	ec51 0b10 	vmov	r0, r1, d0
 810689e:	4635      	mov	r5, r6
 81068a0:	d809      	bhi.n	81068b6 <__ieee754_atan2+0x36>
 81068a2:	4244      	negs	r4, r0
 81068a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 81068a8:	4304      	orrs	r4, r0
 81068aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 81068ae:	4544      	cmp	r4, r8
 81068b0:	468e      	mov	lr, r1
 81068b2:	4681      	mov	r9, r0
 81068b4:	d907      	bls.n	81068c6 <__ieee754_atan2+0x46>
 81068b6:	4632      	mov	r2, r6
 81068b8:	463b      	mov	r3, r7
 81068ba:	f7f9 fd13 	bl	81002e4 <__adddf3>
 81068be:	ec41 0b10 	vmov	d0, r0, r1
 81068c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81068c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 81068ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 81068ce:	4334      	orrs	r4, r6
 81068d0:	d103      	bne.n	81068da <__ieee754_atan2+0x5a>
 81068d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81068d6:	f000 b89b 	b.w	8106a10 <atan>
 81068da:	17bc      	asrs	r4, r7, #30
 81068dc:	f004 0402 	and.w	r4, r4, #2
 81068e0:	ea53 0909 	orrs.w	r9, r3, r9
 81068e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 81068e8:	d107      	bne.n	81068fa <__ieee754_atan2+0x7a>
 81068ea:	2c02      	cmp	r4, #2
 81068ec:	d05f      	beq.n	81069ae <__ieee754_atan2+0x12e>
 81068ee:	2c03      	cmp	r4, #3
 81068f0:	d1e5      	bne.n	81068be <__ieee754_atan2+0x3e>
 81068f2:	a141      	add	r1, pc, #260	@ (adr r1, 81069f8 <__ieee754_atan2+0x178>)
 81068f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 81068f8:	e7e1      	b.n	81068be <__ieee754_atan2+0x3e>
 81068fa:	4315      	orrs	r5, r2
 81068fc:	d106      	bne.n	810690c <__ieee754_atan2+0x8c>
 81068fe:	f1be 0f00 	cmp.w	lr, #0
 8106902:	da5f      	bge.n	81069c4 <__ieee754_atan2+0x144>
 8106904:	a13e      	add	r1, pc, #248	@ (adr r1, 8106a00 <__ieee754_atan2+0x180>)
 8106906:	e9d1 0100 	ldrd	r0, r1, [r1]
 810690a:	e7d8      	b.n	81068be <__ieee754_atan2+0x3e>
 810690c:	4542      	cmp	r2, r8
 810690e:	d10f      	bne.n	8106930 <__ieee754_atan2+0xb0>
 8106910:	4293      	cmp	r3, r2
 8106912:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8106916:	d107      	bne.n	8106928 <__ieee754_atan2+0xa8>
 8106918:	2c02      	cmp	r4, #2
 810691a:	d84c      	bhi.n	81069b6 <__ieee754_atan2+0x136>
 810691c:	4b34      	ldr	r3, [pc, #208]	@ (81069f0 <__ieee754_atan2+0x170>)
 810691e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8106922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8106926:	e7ca      	b.n	81068be <__ieee754_atan2+0x3e>
 8106928:	2c02      	cmp	r4, #2
 810692a:	d848      	bhi.n	81069be <__ieee754_atan2+0x13e>
 810692c:	4b31      	ldr	r3, [pc, #196]	@ (81069f4 <__ieee754_atan2+0x174>)
 810692e:	e7f6      	b.n	810691e <__ieee754_atan2+0x9e>
 8106930:	4543      	cmp	r3, r8
 8106932:	d0e4      	beq.n	81068fe <__ieee754_atan2+0x7e>
 8106934:	1a9b      	subs	r3, r3, r2
 8106936:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 810693a:	ea4f 5223 	mov.w	r2, r3, asr #20
 810693e:	da1e      	bge.n	810697e <__ieee754_atan2+0xfe>
 8106940:	2f00      	cmp	r7, #0
 8106942:	da01      	bge.n	8106948 <__ieee754_atan2+0xc8>
 8106944:	323c      	adds	r2, #60	@ 0x3c
 8106946:	db1e      	blt.n	8106986 <__ieee754_atan2+0x106>
 8106948:	4632      	mov	r2, r6
 810694a:	463b      	mov	r3, r7
 810694c:	f7f9 ffaa 	bl	81008a4 <__aeabi_ddiv>
 8106950:	ec41 0b10 	vmov	d0, r0, r1
 8106954:	f7ff fc44 	bl	81061e0 <fabs>
 8106958:	f000 f85a 	bl	8106a10 <atan>
 810695c:	ec51 0b10 	vmov	r0, r1, d0
 8106960:	2c01      	cmp	r4, #1
 8106962:	d013      	beq.n	810698c <__ieee754_atan2+0x10c>
 8106964:	2c02      	cmp	r4, #2
 8106966:	d015      	beq.n	8106994 <__ieee754_atan2+0x114>
 8106968:	2c00      	cmp	r4, #0
 810696a:	d0a8      	beq.n	81068be <__ieee754_atan2+0x3e>
 810696c:	a318      	add	r3, pc, #96	@ (adr r3, 81069d0 <__ieee754_atan2+0x150>)
 810696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106972:	f7f9 fcb5 	bl	81002e0 <__aeabi_dsub>
 8106976:	a318      	add	r3, pc, #96	@ (adr r3, 81069d8 <__ieee754_atan2+0x158>)
 8106978:	e9d3 2300 	ldrd	r2, r3, [r3]
 810697c:	e014      	b.n	81069a8 <__ieee754_atan2+0x128>
 810697e:	a118      	add	r1, pc, #96	@ (adr r1, 81069e0 <__ieee754_atan2+0x160>)
 8106980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106984:	e7ec      	b.n	8106960 <__ieee754_atan2+0xe0>
 8106986:	2000      	movs	r0, #0
 8106988:	2100      	movs	r1, #0
 810698a:	e7e9      	b.n	8106960 <__ieee754_atan2+0xe0>
 810698c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8106990:	4619      	mov	r1, r3
 8106992:	e794      	b.n	81068be <__ieee754_atan2+0x3e>
 8106994:	a30e      	add	r3, pc, #56	@ (adr r3, 81069d0 <__ieee754_atan2+0x150>)
 8106996:	e9d3 2300 	ldrd	r2, r3, [r3]
 810699a:	f7f9 fca1 	bl	81002e0 <__aeabi_dsub>
 810699e:	4602      	mov	r2, r0
 81069a0:	460b      	mov	r3, r1
 81069a2:	a10d      	add	r1, pc, #52	@ (adr r1, 81069d8 <__ieee754_atan2+0x158>)
 81069a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 81069a8:	f7f9 fc9a 	bl	81002e0 <__aeabi_dsub>
 81069ac:	e787      	b.n	81068be <__ieee754_atan2+0x3e>
 81069ae:	a10a      	add	r1, pc, #40	@ (adr r1, 81069d8 <__ieee754_atan2+0x158>)
 81069b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 81069b4:	e783      	b.n	81068be <__ieee754_atan2+0x3e>
 81069b6:	a10c      	add	r1, pc, #48	@ (adr r1, 81069e8 <__ieee754_atan2+0x168>)
 81069b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81069bc:	e77f      	b.n	81068be <__ieee754_atan2+0x3e>
 81069be:	2000      	movs	r0, #0
 81069c0:	2100      	movs	r1, #0
 81069c2:	e77c      	b.n	81068be <__ieee754_atan2+0x3e>
 81069c4:	a106      	add	r1, pc, #24	@ (adr r1, 81069e0 <__ieee754_atan2+0x160>)
 81069c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81069ca:	e778      	b.n	81068be <__ieee754_atan2+0x3e>
 81069cc:	f3af 8000 	nop.w
 81069d0:	33145c07 	.word	0x33145c07
 81069d4:	3ca1a626 	.word	0x3ca1a626
 81069d8:	54442d18 	.word	0x54442d18
 81069dc:	400921fb 	.word	0x400921fb
 81069e0:	54442d18 	.word	0x54442d18
 81069e4:	3ff921fb 	.word	0x3ff921fb
 81069e8:	54442d18 	.word	0x54442d18
 81069ec:	3fe921fb 	.word	0x3fe921fb
 81069f0:	08107458 	.word	0x08107458
 81069f4:	08107440 	.word	0x08107440
 81069f8:	54442d18 	.word	0x54442d18
 81069fc:	c00921fb 	.word	0xc00921fb
 8106a00:	54442d18 	.word	0x54442d18
 8106a04:	bff921fb 	.word	0xbff921fb
 8106a08:	7ff00000 	.word	0x7ff00000
 8106a0c:	00000000 	.word	0x00000000

08106a10 <atan>:
 8106a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106a14:	ec55 4b10 	vmov	r4, r5, d0
 8106a18:	4bbf      	ldr	r3, [pc, #764]	@ (8106d18 <atan+0x308>)
 8106a1a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8106a1e:	429e      	cmp	r6, r3
 8106a20:	46ab      	mov	fp, r5
 8106a22:	d918      	bls.n	8106a56 <atan+0x46>
 8106a24:	4bbd      	ldr	r3, [pc, #756]	@ (8106d1c <atan+0x30c>)
 8106a26:	429e      	cmp	r6, r3
 8106a28:	d801      	bhi.n	8106a2e <atan+0x1e>
 8106a2a:	d109      	bne.n	8106a40 <atan+0x30>
 8106a2c:	b144      	cbz	r4, 8106a40 <atan+0x30>
 8106a2e:	4622      	mov	r2, r4
 8106a30:	462b      	mov	r3, r5
 8106a32:	4620      	mov	r0, r4
 8106a34:	4629      	mov	r1, r5
 8106a36:	f7f9 fc55 	bl	81002e4 <__adddf3>
 8106a3a:	4604      	mov	r4, r0
 8106a3c:	460d      	mov	r5, r1
 8106a3e:	e006      	b.n	8106a4e <atan+0x3e>
 8106a40:	f1bb 0f00 	cmp.w	fp, #0
 8106a44:	f340 812b 	ble.w	8106c9e <atan+0x28e>
 8106a48:	a597      	add	r5, pc, #604	@ (adr r5, 8106ca8 <atan+0x298>)
 8106a4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8106a4e:	ec45 4b10 	vmov	d0, r4, r5
 8106a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106a56:	4bb2      	ldr	r3, [pc, #712]	@ (8106d20 <atan+0x310>)
 8106a58:	429e      	cmp	r6, r3
 8106a5a:	d813      	bhi.n	8106a84 <atan+0x74>
 8106a5c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8106a60:	429e      	cmp	r6, r3
 8106a62:	d80c      	bhi.n	8106a7e <atan+0x6e>
 8106a64:	a392      	add	r3, pc, #584	@ (adr r3, 8106cb0 <atan+0x2a0>)
 8106a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a6a:	4620      	mov	r0, r4
 8106a6c:	4629      	mov	r1, r5
 8106a6e:	f7f9 fc39 	bl	81002e4 <__adddf3>
 8106a72:	4bac      	ldr	r3, [pc, #688]	@ (8106d24 <atan+0x314>)
 8106a74:	2200      	movs	r2, #0
 8106a76:	f7fa f87b 	bl	8100b70 <__aeabi_dcmpgt>
 8106a7a:	2800      	cmp	r0, #0
 8106a7c:	d1e7      	bne.n	8106a4e <atan+0x3e>
 8106a7e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8106a82:	e029      	b.n	8106ad8 <atan+0xc8>
 8106a84:	f7ff fbac 	bl	81061e0 <fabs>
 8106a88:	4ba7      	ldr	r3, [pc, #668]	@ (8106d28 <atan+0x318>)
 8106a8a:	429e      	cmp	r6, r3
 8106a8c:	ec55 4b10 	vmov	r4, r5, d0
 8106a90:	f200 80bc 	bhi.w	8106c0c <atan+0x1fc>
 8106a94:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8106a98:	429e      	cmp	r6, r3
 8106a9a:	f200 809e 	bhi.w	8106bda <atan+0x1ca>
 8106a9e:	4622      	mov	r2, r4
 8106aa0:	462b      	mov	r3, r5
 8106aa2:	4620      	mov	r0, r4
 8106aa4:	4629      	mov	r1, r5
 8106aa6:	f7f9 fc1d 	bl	81002e4 <__adddf3>
 8106aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8106d24 <atan+0x314>)
 8106aac:	2200      	movs	r2, #0
 8106aae:	f7f9 fc17 	bl	81002e0 <__aeabi_dsub>
 8106ab2:	2200      	movs	r2, #0
 8106ab4:	4606      	mov	r6, r0
 8106ab6:	460f      	mov	r7, r1
 8106ab8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8106abc:	4620      	mov	r0, r4
 8106abe:	4629      	mov	r1, r5
 8106ac0:	f7f9 fc10 	bl	81002e4 <__adddf3>
 8106ac4:	4602      	mov	r2, r0
 8106ac6:	460b      	mov	r3, r1
 8106ac8:	4630      	mov	r0, r6
 8106aca:	4639      	mov	r1, r7
 8106acc:	f7f9 feea 	bl	81008a4 <__aeabi_ddiv>
 8106ad0:	f04f 0a00 	mov.w	sl, #0
 8106ad4:	4604      	mov	r4, r0
 8106ad6:	460d      	mov	r5, r1
 8106ad8:	4622      	mov	r2, r4
 8106ada:	462b      	mov	r3, r5
 8106adc:	4620      	mov	r0, r4
 8106ade:	4629      	mov	r1, r5
 8106ae0:	f7f9 fdb6 	bl	8100650 <__aeabi_dmul>
 8106ae4:	4602      	mov	r2, r0
 8106ae6:	460b      	mov	r3, r1
 8106ae8:	4680      	mov	r8, r0
 8106aea:	4689      	mov	r9, r1
 8106aec:	f7f9 fdb0 	bl	8100650 <__aeabi_dmul>
 8106af0:	a371      	add	r3, pc, #452	@ (adr r3, 8106cb8 <atan+0x2a8>)
 8106af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106af6:	4606      	mov	r6, r0
 8106af8:	460f      	mov	r7, r1
 8106afa:	f7f9 fda9 	bl	8100650 <__aeabi_dmul>
 8106afe:	a370      	add	r3, pc, #448	@ (adr r3, 8106cc0 <atan+0x2b0>)
 8106b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b04:	f7f9 fbee 	bl	81002e4 <__adddf3>
 8106b08:	4632      	mov	r2, r6
 8106b0a:	463b      	mov	r3, r7
 8106b0c:	f7f9 fda0 	bl	8100650 <__aeabi_dmul>
 8106b10:	a36d      	add	r3, pc, #436	@ (adr r3, 8106cc8 <atan+0x2b8>)
 8106b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b16:	f7f9 fbe5 	bl	81002e4 <__adddf3>
 8106b1a:	4632      	mov	r2, r6
 8106b1c:	463b      	mov	r3, r7
 8106b1e:	f7f9 fd97 	bl	8100650 <__aeabi_dmul>
 8106b22:	a36b      	add	r3, pc, #428	@ (adr r3, 8106cd0 <atan+0x2c0>)
 8106b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b28:	f7f9 fbdc 	bl	81002e4 <__adddf3>
 8106b2c:	4632      	mov	r2, r6
 8106b2e:	463b      	mov	r3, r7
 8106b30:	f7f9 fd8e 	bl	8100650 <__aeabi_dmul>
 8106b34:	a368      	add	r3, pc, #416	@ (adr r3, 8106cd8 <atan+0x2c8>)
 8106b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b3a:	f7f9 fbd3 	bl	81002e4 <__adddf3>
 8106b3e:	4632      	mov	r2, r6
 8106b40:	463b      	mov	r3, r7
 8106b42:	f7f9 fd85 	bl	8100650 <__aeabi_dmul>
 8106b46:	a366      	add	r3, pc, #408	@ (adr r3, 8106ce0 <atan+0x2d0>)
 8106b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b4c:	f7f9 fbca 	bl	81002e4 <__adddf3>
 8106b50:	4642      	mov	r2, r8
 8106b52:	464b      	mov	r3, r9
 8106b54:	f7f9 fd7c 	bl	8100650 <__aeabi_dmul>
 8106b58:	a363      	add	r3, pc, #396	@ (adr r3, 8106ce8 <atan+0x2d8>)
 8106b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b5e:	4680      	mov	r8, r0
 8106b60:	4689      	mov	r9, r1
 8106b62:	4630      	mov	r0, r6
 8106b64:	4639      	mov	r1, r7
 8106b66:	f7f9 fd73 	bl	8100650 <__aeabi_dmul>
 8106b6a:	a361      	add	r3, pc, #388	@ (adr r3, 8106cf0 <atan+0x2e0>)
 8106b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b70:	f7f9 fbb6 	bl	81002e0 <__aeabi_dsub>
 8106b74:	4632      	mov	r2, r6
 8106b76:	463b      	mov	r3, r7
 8106b78:	f7f9 fd6a 	bl	8100650 <__aeabi_dmul>
 8106b7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8106cf8 <atan+0x2e8>)
 8106b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b82:	f7f9 fbad 	bl	81002e0 <__aeabi_dsub>
 8106b86:	4632      	mov	r2, r6
 8106b88:	463b      	mov	r3, r7
 8106b8a:	f7f9 fd61 	bl	8100650 <__aeabi_dmul>
 8106b8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8106d00 <atan+0x2f0>)
 8106b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b94:	f7f9 fba4 	bl	81002e0 <__aeabi_dsub>
 8106b98:	4632      	mov	r2, r6
 8106b9a:	463b      	mov	r3, r7
 8106b9c:	f7f9 fd58 	bl	8100650 <__aeabi_dmul>
 8106ba0:	a359      	add	r3, pc, #356	@ (adr r3, 8106d08 <atan+0x2f8>)
 8106ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ba6:	f7f9 fb9b 	bl	81002e0 <__aeabi_dsub>
 8106baa:	4632      	mov	r2, r6
 8106bac:	463b      	mov	r3, r7
 8106bae:	f7f9 fd4f 	bl	8100650 <__aeabi_dmul>
 8106bb2:	4602      	mov	r2, r0
 8106bb4:	460b      	mov	r3, r1
 8106bb6:	4640      	mov	r0, r8
 8106bb8:	4649      	mov	r1, r9
 8106bba:	f7f9 fb93 	bl	81002e4 <__adddf3>
 8106bbe:	4622      	mov	r2, r4
 8106bc0:	462b      	mov	r3, r5
 8106bc2:	f7f9 fd45 	bl	8100650 <__aeabi_dmul>
 8106bc6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8106bca:	4602      	mov	r2, r0
 8106bcc:	460b      	mov	r3, r1
 8106bce:	d148      	bne.n	8106c62 <atan+0x252>
 8106bd0:	4620      	mov	r0, r4
 8106bd2:	4629      	mov	r1, r5
 8106bd4:	f7f9 fb84 	bl	81002e0 <__aeabi_dsub>
 8106bd8:	e72f      	b.n	8106a3a <atan+0x2a>
 8106bda:	4b52      	ldr	r3, [pc, #328]	@ (8106d24 <atan+0x314>)
 8106bdc:	2200      	movs	r2, #0
 8106bde:	4620      	mov	r0, r4
 8106be0:	4629      	mov	r1, r5
 8106be2:	f7f9 fb7d 	bl	81002e0 <__aeabi_dsub>
 8106be6:	4b4f      	ldr	r3, [pc, #316]	@ (8106d24 <atan+0x314>)
 8106be8:	4606      	mov	r6, r0
 8106bea:	460f      	mov	r7, r1
 8106bec:	2200      	movs	r2, #0
 8106bee:	4620      	mov	r0, r4
 8106bf0:	4629      	mov	r1, r5
 8106bf2:	f7f9 fb77 	bl	81002e4 <__adddf3>
 8106bf6:	4602      	mov	r2, r0
 8106bf8:	460b      	mov	r3, r1
 8106bfa:	4630      	mov	r0, r6
 8106bfc:	4639      	mov	r1, r7
 8106bfe:	f7f9 fe51 	bl	81008a4 <__aeabi_ddiv>
 8106c02:	f04f 0a01 	mov.w	sl, #1
 8106c06:	4604      	mov	r4, r0
 8106c08:	460d      	mov	r5, r1
 8106c0a:	e765      	b.n	8106ad8 <atan+0xc8>
 8106c0c:	4b47      	ldr	r3, [pc, #284]	@ (8106d2c <atan+0x31c>)
 8106c0e:	429e      	cmp	r6, r3
 8106c10:	d21c      	bcs.n	8106c4c <atan+0x23c>
 8106c12:	4b47      	ldr	r3, [pc, #284]	@ (8106d30 <atan+0x320>)
 8106c14:	2200      	movs	r2, #0
 8106c16:	4620      	mov	r0, r4
 8106c18:	4629      	mov	r1, r5
 8106c1a:	f7f9 fb61 	bl	81002e0 <__aeabi_dsub>
 8106c1e:	4b44      	ldr	r3, [pc, #272]	@ (8106d30 <atan+0x320>)
 8106c20:	4606      	mov	r6, r0
 8106c22:	460f      	mov	r7, r1
 8106c24:	2200      	movs	r2, #0
 8106c26:	4620      	mov	r0, r4
 8106c28:	4629      	mov	r1, r5
 8106c2a:	f7f9 fd11 	bl	8100650 <__aeabi_dmul>
 8106c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8106d24 <atan+0x314>)
 8106c30:	2200      	movs	r2, #0
 8106c32:	f7f9 fb57 	bl	81002e4 <__adddf3>
 8106c36:	4602      	mov	r2, r0
 8106c38:	460b      	mov	r3, r1
 8106c3a:	4630      	mov	r0, r6
 8106c3c:	4639      	mov	r1, r7
 8106c3e:	f7f9 fe31 	bl	81008a4 <__aeabi_ddiv>
 8106c42:	f04f 0a02 	mov.w	sl, #2
 8106c46:	4604      	mov	r4, r0
 8106c48:	460d      	mov	r5, r1
 8106c4a:	e745      	b.n	8106ad8 <atan+0xc8>
 8106c4c:	4622      	mov	r2, r4
 8106c4e:	462b      	mov	r3, r5
 8106c50:	4938      	ldr	r1, [pc, #224]	@ (8106d34 <atan+0x324>)
 8106c52:	2000      	movs	r0, #0
 8106c54:	f7f9 fe26 	bl	81008a4 <__aeabi_ddiv>
 8106c58:	f04f 0a03 	mov.w	sl, #3
 8106c5c:	4604      	mov	r4, r0
 8106c5e:	460d      	mov	r5, r1
 8106c60:	e73a      	b.n	8106ad8 <atan+0xc8>
 8106c62:	4b35      	ldr	r3, [pc, #212]	@ (8106d38 <atan+0x328>)
 8106c64:	4e35      	ldr	r6, [pc, #212]	@ (8106d3c <atan+0x32c>)
 8106c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8106c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c6e:	f7f9 fb37 	bl	81002e0 <__aeabi_dsub>
 8106c72:	4622      	mov	r2, r4
 8106c74:	462b      	mov	r3, r5
 8106c76:	f7f9 fb33 	bl	81002e0 <__aeabi_dsub>
 8106c7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8106c7e:	4602      	mov	r2, r0
 8106c80:	460b      	mov	r3, r1
 8106c82:	e9d6 0100 	ldrd	r0, r1, [r6]
 8106c86:	f7f9 fb2b 	bl	81002e0 <__aeabi_dsub>
 8106c8a:	f1bb 0f00 	cmp.w	fp, #0
 8106c8e:	4604      	mov	r4, r0
 8106c90:	460d      	mov	r5, r1
 8106c92:	f6bf aedc 	bge.w	8106a4e <atan+0x3e>
 8106c96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8106c9a:	461d      	mov	r5, r3
 8106c9c:	e6d7      	b.n	8106a4e <atan+0x3e>
 8106c9e:	a51c      	add	r5, pc, #112	@ (adr r5, 8106d10 <atan+0x300>)
 8106ca0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8106ca4:	e6d3      	b.n	8106a4e <atan+0x3e>
 8106ca6:	bf00      	nop
 8106ca8:	54442d18 	.word	0x54442d18
 8106cac:	3ff921fb 	.word	0x3ff921fb
 8106cb0:	8800759c 	.word	0x8800759c
 8106cb4:	7e37e43c 	.word	0x7e37e43c
 8106cb8:	e322da11 	.word	0xe322da11
 8106cbc:	3f90ad3a 	.word	0x3f90ad3a
 8106cc0:	24760deb 	.word	0x24760deb
 8106cc4:	3fa97b4b 	.word	0x3fa97b4b
 8106cc8:	a0d03d51 	.word	0xa0d03d51
 8106ccc:	3fb10d66 	.word	0x3fb10d66
 8106cd0:	c54c206e 	.word	0xc54c206e
 8106cd4:	3fb745cd 	.word	0x3fb745cd
 8106cd8:	920083ff 	.word	0x920083ff
 8106cdc:	3fc24924 	.word	0x3fc24924
 8106ce0:	5555550d 	.word	0x5555550d
 8106ce4:	3fd55555 	.word	0x3fd55555
 8106ce8:	2c6a6c2f 	.word	0x2c6a6c2f
 8106cec:	bfa2b444 	.word	0xbfa2b444
 8106cf0:	52defd9a 	.word	0x52defd9a
 8106cf4:	3fadde2d 	.word	0x3fadde2d
 8106cf8:	af749a6d 	.word	0xaf749a6d
 8106cfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8106d00:	fe231671 	.word	0xfe231671
 8106d04:	3fbc71c6 	.word	0x3fbc71c6
 8106d08:	9998ebc4 	.word	0x9998ebc4
 8106d0c:	3fc99999 	.word	0x3fc99999
 8106d10:	54442d18 	.word	0x54442d18
 8106d14:	bff921fb 	.word	0xbff921fb
 8106d18:	440fffff 	.word	0x440fffff
 8106d1c:	7ff00000 	.word	0x7ff00000
 8106d20:	3fdbffff 	.word	0x3fdbffff
 8106d24:	3ff00000 	.word	0x3ff00000
 8106d28:	3ff2ffff 	.word	0x3ff2ffff
 8106d2c:	40038000 	.word	0x40038000
 8106d30:	3ff80000 	.word	0x3ff80000
 8106d34:	bff00000 	.word	0xbff00000
 8106d38:	08107470 	.word	0x08107470
 8106d3c:	08107490 	.word	0x08107490

08106d40 <__ieee754_powf>:
 8106d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106d44:	ee10 4a90 	vmov	r4, s1
 8106d48:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8106d4c:	ed2d 8b02 	vpush	{d8}
 8106d50:	ee10 6a10 	vmov	r6, s0
 8106d54:	eeb0 8a40 	vmov.f32	s16, s0
 8106d58:	eef0 8a60 	vmov.f32	s17, s1
 8106d5c:	d10c      	bne.n	8106d78 <__ieee754_powf+0x38>
 8106d5e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8106d62:	0076      	lsls	r6, r6, #1
 8106d64:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8106d68:	f240 829c 	bls.w	81072a4 <__ieee754_powf+0x564>
 8106d6c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8106d70:	ecbd 8b02 	vpop	{d8}
 8106d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106d78:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8106d7c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8106d80:	d802      	bhi.n	8106d88 <__ieee754_powf+0x48>
 8106d82:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8106d86:	d908      	bls.n	8106d9a <__ieee754_powf+0x5a>
 8106d88:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8106d8c:	d1ee      	bne.n	8106d6c <__ieee754_powf+0x2c>
 8106d8e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8106d92:	0064      	lsls	r4, r4, #1
 8106d94:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8106d98:	e7e6      	b.n	8106d68 <__ieee754_powf+0x28>
 8106d9a:	2e00      	cmp	r6, #0
 8106d9c:	da1e      	bge.n	8106ddc <__ieee754_powf+0x9c>
 8106d9e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8106da2:	d22b      	bcs.n	8106dfc <__ieee754_powf+0xbc>
 8106da4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8106da8:	d332      	bcc.n	8106e10 <__ieee754_powf+0xd0>
 8106daa:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8106dae:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8106db2:	fa49 f503 	asr.w	r5, r9, r3
 8106db6:	fa05 f303 	lsl.w	r3, r5, r3
 8106dba:	454b      	cmp	r3, r9
 8106dbc:	d126      	bne.n	8106e0c <__ieee754_powf+0xcc>
 8106dbe:	f005 0501 	and.w	r5, r5, #1
 8106dc2:	f1c5 0502 	rsb	r5, r5, #2
 8106dc6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8106dca:	d122      	bne.n	8106e12 <__ieee754_powf+0xd2>
 8106dcc:	2c00      	cmp	r4, #0
 8106dce:	f280 826f 	bge.w	81072b0 <__ieee754_powf+0x570>
 8106dd2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8106dd6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8106dda:	e7c9      	b.n	8106d70 <__ieee754_powf+0x30>
 8106ddc:	2500      	movs	r5, #0
 8106dde:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8106de2:	d1f0      	bne.n	8106dc6 <__ieee754_powf+0x86>
 8106de4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8106de8:	f000 825c 	beq.w	81072a4 <__ieee754_powf+0x564>
 8106dec:	d908      	bls.n	8106e00 <__ieee754_powf+0xc0>
 8106dee:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8107150 <__ieee754_powf+0x410>
 8106df2:	2c00      	cmp	r4, #0
 8106df4:	bfa8      	it	ge
 8106df6:	eeb0 0a68 	vmovge.f32	s0, s17
 8106dfa:	e7b9      	b.n	8106d70 <__ieee754_powf+0x30>
 8106dfc:	2502      	movs	r5, #2
 8106dfe:	e7ee      	b.n	8106dde <__ieee754_powf+0x9e>
 8106e00:	2c00      	cmp	r4, #0
 8106e02:	f280 8252 	bge.w	81072aa <__ieee754_powf+0x56a>
 8106e06:	eeb1 0a68 	vneg.f32	s0, s17
 8106e0a:	e7b1      	b.n	8106d70 <__ieee754_powf+0x30>
 8106e0c:	2500      	movs	r5, #0
 8106e0e:	e7da      	b.n	8106dc6 <__ieee754_powf+0x86>
 8106e10:	2500      	movs	r5, #0
 8106e12:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8106e16:	d102      	bne.n	8106e1e <__ieee754_powf+0xde>
 8106e18:	ee28 0a08 	vmul.f32	s0, s16, s16
 8106e1c:	e7a8      	b.n	8106d70 <__ieee754_powf+0x30>
 8106e1e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8106e22:	d109      	bne.n	8106e38 <__ieee754_powf+0xf8>
 8106e24:	2e00      	cmp	r6, #0
 8106e26:	db07      	blt.n	8106e38 <__ieee754_powf+0xf8>
 8106e28:	eeb0 0a48 	vmov.f32	s0, s16
 8106e2c:	ecbd 8b02 	vpop	{d8}
 8106e30:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106e34:	f000 bae8 	b.w	8107408 <__ieee754_sqrtf>
 8106e38:	eeb0 0a48 	vmov.f32	s0, s16
 8106e3c:	f000 fa50 	bl	81072e0 <fabsf>
 8106e40:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8106e44:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8106e48:	4647      	mov	r7, r8
 8106e4a:	d002      	beq.n	8106e52 <__ieee754_powf+0x112>
 8106e4c:	f1b8 0f00 	cmp.w	r8, #0
 8106e50:	d117      	bne.n	8106e82 <__ieee754_powf+0x142>
 8106e52:	2c00      	cmp	r4, #0
 8106e54:	bfbc      	itt	lt
 8106e56:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8106e5a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8106e5e:	2e00      	cmp	r6, #0
 8106e60:	da86      	bge.n	8106d70 <__ieee754_powf+0x30>
 8106e62:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8106e66:	ea58 0805 	orrs.w	r8, r8, r5
 8106e6a:	d104      	bne.n	8106e76 <__ieee754_powf+0x136>
 8106e6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8106e70:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8106e74:	e77c      	b.n	8106d70 <__ieee754_powf+0x30>
 8106e76:	2d01      	cmp	r5, #1
 8106e78:	f47f af7a 	bne.w	8106d70 <__ieee754_powf+0x30>
 8106e7c:	eeb1 0a40 	vneg.f32	s0, s0
 8106e80:	e776      	b.n	8106d70 <__ieee754_powf+0x30>
 8106e82:	0ff0      	lsrs	r0, r6, #31
 8106e84:	3801      	subs	r0, #1
 8106e86:	ea55 0300 	orrs.w	r3, r5, r0
 8106e8a:	d104      	bne.n	8106e96 <__ieee754_powf+0x156>
 8106e8c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8106e90:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8106e94:	e76c      	b.n	8106d70 <__ieee754_powf+0x30>
 8106e96:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8106e9a:	d973      	bls.n	8106f84 <__ieee754_powf+0x244>
 8106e9c:	4bad      	ldr	r3, [pc, #692]	@ (8107154 <__ieee754_powf+0x414>)
 8106e9e:	4598      	cmp	r8, r3
 8106ea0:	d808      	bhi.n	8106eb4 <__ieee754_powf+0x174>
 8106ea2:	2c00      	cmp	r4, #0
 8106ea4:	da0b      	bge.n	8106ebe <__ieee754_powf+0x17e>
 8106ea6:	2000      	movs	r0, #0
 8106ea8:	ecbd 8b02 	vpop	{d8}
 8106eac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106eb0:	f000 baa4 	b.w	81073fc <__math_oflowf>
 8106eb4:	4ba8      	ldr	r3, [pc, #672]	@ (8107158 <__ieee754_powf+0x418>)
 8106eb6:	4598      	cmp	r8, r3
 8106eb8:	d908      	bls.n	8106ecc <__ieee754_powf+0x18c>
 8106eba:	2c00      	cmp	r4, #0
 8106ebc:	dcf3      	bgt.n	8106ea6 <__ieee754_powf+0x166>
 8106ebe:	2000      	movs	r0, #0
 8106ec0:	ecbd 8b02 	vpop	{d8}
 8106ec4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106ec8:	f000 ba92 	b.w	81073f0 <__math_uflowf>
 8106ecc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8106ed0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8106ed4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 810715c <__ieee754_powf+0x41c>
 8106ed8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8106edc:	eee0 6a67 	vfms.f32	s13, s0, s15
 8106ee0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8106ee4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8106ee8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8106eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8106ef0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8107160 <__ieee754_powf+0x420>
 8106ef4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8106ef8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8107164 <__ieee754_powf+0x424>
 8106efc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8106f00:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8107168 <__ieee754_powf+0x428>
 8106f04:	eef0 6a67 	vmov.f32	s13, s15
 8106f08:	eee0 6a07 	vfma.f32	s13, s0, s14
 8106f0c:	ee16 3a90 	vmov	r3, s13
 8106f10:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8106f14:	f023 030f 	bic.w	r3, r3, #15
 8106f18:	ee06 3a90 	vmov	s13, r3
 8106f1c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8106f20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8106f24:	3d01      	subs	r5, #1
 8106f26:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8106f2a:	4305      	orrs	r5, r0
 8106f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106f30:	f024 040f 	bic.w	r4, r4, #15
 8106f34:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8106f38:	bf18      	it	ne
 8106f3a:	eeb0 8a47 	vmovne.f32	s16, s14
 8106f3e:	ee07 4a10 	vmov	s14, r4
 8106f42:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8106f46:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8106f4a:	ee07 3a90 	vmov	s15, r3
 8106f4e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8106f52:	ee07 4a10 	vmov	s14, r4
 8106f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8106f5a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8106f5e:	ee17 1a10 	vmov	r1, s14
 8106f62:	2900      	cmp	r1, #0
 8106f64:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8106f68:	f340 80dd 	ble.w	8107126 <__ieee754_powf+0x3e6>
 8106f6c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8106f70:	f240 80ca 	bls.w	8107108 <__ieee754_powf+0x3c8>
 8106f74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8106f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106f7c:	bf4c      	ite	mi
 8106f7e:	2001      	movmi	r0, #1
 8106f80:	2000      	movpl	r0, #0
 8106f82:	e791      	b.n	8106ea8 <__ieee754_powf+0x168>
 8106f84:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8106f88:	bf01      	itttt	eq
 8106f8a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 810716c <__ieee754_powf+0x42c>
 8106f8e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8106f92:	f06f 0317 	mvneq.w	r3, #23
 8106f96:	ee17 7a90 	vmoveq	r7, s15
 8106f9a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8106f9e:	bf18      	it	ne
 8106fa0:	2300      	movne	r3, #0
 8106fa2:	3a7f      	subs	r2, #127	@ 0x7f
 8106fa4:	441a      	add	r2, r3
 8106fa6:	4b72      	ldr	r3, [pc, #456]	@ (8107170 <__ieee754_powf+0x430>)
 8106fa8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8106fac:	429f      	cmp	r7, r3
 8106fae:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8106fb2:	dd06      	ble.n	8106fc2 <__ieee754_powf+0x282>
 8106fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8107174 <__ieee754_powf+0x434>)
 8106fb6:	429f      	cmp	r7, r3
 8106fb8:	f340 80a4 	ble.w	8107104 <__ieee754_powf+0x3c4>
 8106fbc:	3201      	adds	r2, #1
 8106fbe:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8106fc2:	2600      	movs	r6, #0
 8106fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8107178 <__ieee754_powf+0x438>)
 8106fc6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8106fca:	ee07 1a10 	vmov	s14, r1
 8106fce:	edd3 5a00 	vldr	s11, [r3]
 8106fd2:	4b6a      	ldr	r3, [pc, #424]	@ (810717c <__ieee754_powf+0x43c>)
 8106fd4:	ee75 7a87 	vadd.f32	s15, s11, s14
 8106fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106fdc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8106fe0:	1049      	asrs	r1, r1, #1
 8106fe2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8106fe6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8106fea:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8106fee:	ee37 6a65 	vsub.f32	s12, s14, s11
 8106ff2:	ee07 1a90 	vmov	s15, r1
 8106ff6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8106ffa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8106ffe:	ee15 7a10 	vmov	r7, s10
 8107002:	401f      	ands	r7, r3
 8107004:	ee06 7a90 	vmov	s13, r7
 8107008:	eea6 6ae7 	vfms.f32	s12, s13, s15
 810700c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8107010:	ee65 7a05 	vmul.f32	s15, s10, s10
 8107014:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8107018:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8107180 <__ieee754_powf+0x440>
 810701c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8107184 <__ieee754_powf+0x444>
 8107020:	eee7 5a87 	vfma.f32	s11, s15, s14
 8107024:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8107188 <__ieee754_powf+0x448>
 8107028:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810702c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 810715c <__ieee754_powf+0x41c>
 8107030:	eee7 5a27 	vfma.f32	s11, s14, s15
 8107034:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 810718c <__ieee754_powf+0x44c>
 8107038:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810703c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8107190 <__ieee754_powf+0x450>
 8107040:	ee26 6a24 	vmul.f32	s12, s12, s9
 8107044:	eee7 5a27 	vfma.f32	s11, s14, s15
 8107048:	ee35 7a26 	vadd.f32	s14, s10, s13
 810704c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8107050:	ee27 7a06 	vmul.f32	s14, s14, s12
 8107054:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8107058:	eea4 7aa5 	vfma.f32	s14, s9, s11
 810705c:	eef0 5a67 	vmov.f32	s11, s15
 8107060:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8107064:	ee75 5a87 	vadd.f32	s11, s11, s14
 8107068:	ee15 1a90 	vmov	r1, s11
 810706c:	4019      	ands	r1, r3
 810706e:	ee05 1a90 	vmov	s11, r1
 8107072:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8107076:	eee6 7ae6 	vfms.f32	s15, s13, s13
 810707a:	ee77 7a67 	vsub.f32	s15, s14, s15
 810707e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8107082:	eee6 7a25 	vfma.f32	s15, s12, s11
 8107086:	eeb0 6a67 	vmov.f32	s12, s15
 810708a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 810708e:	ee16 1a10 	vmov	r1, s12
 8107092:	4019      	ands	r1, r3
 8107094:	ee06 1a10 	vmov	s12, r1
 8107098:	eeb0 7a46 	vmov.f32	s14, s12
 810709c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 81070a0:	493c      	ldr	r1, [pc, #240]	@ (8107194 <__ieee754_powf+0x454>)
 81070a2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 81070a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81070aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8107198 <__ieee754_powf+0x458>
 81070ae:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 810719c <__ieee754_powf+0x45c>
 81070b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 81070b6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 81071a0 <__ieee754_powf+0x460>
 81070ba:	eee6 7a07 	vfma.f32	s15, s12, s14
 81070be:	ed91 7a00 	vldr	s14, [r1]
 81070c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 81070c6:	ee07 2a10 	vmov	s14, r2
 81070ca:	eef0 6a67 	vmov.f32	s13, s15
 81070ce:	4a35      	ldr	r2, [pc, #212]	@ (81071a4 <__ieee754_powf+0x464>)
 81070d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 81070d4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 81070d8:	ed92 5a00 	vldr	s10, [r2]
 81070dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81070e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 81070e4:	ee76 6a87 	vadd.f32	s13, s13, s14
 81070e8:	ee16 2a90 	vmov	r2, s13
 81070ec:	4013      	ands	r3, r2
 81070ee:	ee06 3a90 	vmov	s13, r3
 81070f2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 81070f6:	ee37 7a45 	vsub.f32	s14, s14, s10
 81070fa:	eea6 7a65 	vfms.f32	s14, s12, s11
 81070fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8107102:	e70f      	b.n	8106f24 <__ieee754_powf+0x1e4>
 8107104:	2601      	movs	r6, #1
 8107106:	e75d      	b.n	8106fc4 <__ieee754_powf+0x284>
 8107108:	d152      	bne.n	81071b0 <__ieee754_powf+0x470>
 810710a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 81071a8 <__ieee754_powf+0x468>
 810710e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107112:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8107116:	eef4 6ac7 	vcmpe.f32	s13, s14
 810711a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810711e:	f73f af29 	bgt.w	8106f74 <__ieee754_powf+0x234>
 8107122:	2386      	movs	r3, #134	@ 0x86
 8107124:	e048      	b.n	81071b8 <__ieee754_powf+0x478>
 8107126:	4a21      	ldr	r2, [pc, #132]	@ (81071ac <__ieee754_powf+0x46c>)
 8107128:	4293      	cmp	r3, r2
 810712a:	d907      	bls.n	810713c <__ieee754_powf+0x3fc>
 810712c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8107130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107134:	bf4c      	ite	mi
 8107136:	2001      	movmi	r0, #1
 8107138:	2000      	movpl	r0, #0
 810713a:	e6c1      	b.n	8106ec0 <__ieee754_powf+0x180>
 810713c:	d138      	bne.n	81071b0 <__ieee754_powf+0x470>
 810713e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107142:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8107146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810714a:	dbea      	blt.n	8107122 <__ieee754_powf+0x3e2>
 810714c:	e7ee      	b.n	810712c <__ieee754_powf+0x3ec>
 810714e:	bf00      	nop
 8107150:	00000000 	.word	0x00000000
 8107154:	3f7ffff3 	.word	0x3f7ffff3
 8107158:	3f800007 	.word	0x3f800007
 810715c:	3eaaaaab 	.word	0x3eaaaaab
 8107160:	3fb8aa3b 	.word	0x3fb8aa3b
 8107164:	36eca570 	.word	0x36eca570
 8107168:	3fb8aa00 	.word	0x3fb8aa00
 810716c:	4b800000 	.word	0x4b800000
 8107170:	001cc471 	.word	0x001cc471
 8107174:	005db3d6 	.word	0x005db3d6
 8107178:	081074c0 	.word	0x081074c0
 810717c:	fffff000 	.word	0xfffff000
 8107180:	3e6c3255 	.word	0x3e6c3255
 8107184:	3e53f142 	.word	0x3e53f142
 8107188:	3e8ba305 	.word	0x3e8ba305
 810718c:	3edb6db7 	.word	0x3edb6db7
 8107190:	3f19999a 	.word	0x3f19999a
 8107194:	081074b0 	.word	0x081074b0
 8107198:	3f76384f 	.word	0x3f76384f
 810719c:	3f763800 	.word	0x3f763800
 81071a0:	369dc3a0 	.word	0x369dc3a0
 81071a4:	081074b8 	.word	0x081074b8
 81071a8:	3338aa3c 	.word	0x3338aa3c
 81071ac:	43160000 	.word	0x43160000
 81071b0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 81071b4:	d971      	bls.n	810729a <__ieee754_powf+0x55a>
 81071b6:	15db      	asrs	r3, r3, #23
 81071b8:	3b7e      	subs	r3, #126	@ 0x7e
 81071ba:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 81071be:	4118      	asrs	r0, r3
 81071c0:	4408      	add	r0, r1
 81071c2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 81071c6:	4a3c      	ldr	r2, [pc, #240]	@ (81072b8 <__ieee754_powf+0x578>)
 81071c8:	3b7f      	subs	r3, #127	@ 0x7f
 81071ca:	411a      	asrs	r2, r3
 81071cc:	4002      	ands	r2, r0
 81071ce:	ee07 2a10 	vmov	s14, r2
 81071d2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 81071d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 81071da:	f1c3 0317 	rsb	r3, r3, #23
 81071de:	4118      	asrs	r0, r3
 81071e0:	2900      	cmp	r1, #0
 81071e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81071e6:	bfb8      	it	lt
 81071e8:	4240      	neglt	r0, r0
 81071ea:	ee37 7aa0 	vadd.f32	s14, s15, s1
 81071ee:	eddf 6a33 	vldr	s13, [pc, #204]	@ 81072bc <__ieee754_powf+0x57c>
 81071f2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 81072c0 <__ieee754_powf+0x580>
 81071f6:	ee17 3a10 	vmov	r3, s14
 81071fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 81071fe:	f023 030f 	bic.w	r3, r3, #15
 8107202:	ee07 3a10 	vmov	s14, r3
 8107206:	ee77 7a67 	vsub.f32	s15, s14, s15
 810720a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 810720e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8107212:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 81072c4 <__ieee754_powf+0x584>
 8107216:	ee67 7a27 	vmul.f32	s15, s14, s15
 810721a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 810721e:	eef0 6a67 	vmov.f32	s13, s15
 8107222:	eee7 6a06 	vfma.f32	s13, s14, s12
 8107226:	eef0 5a66 	vmov.f32	s11, s13
 810722a:	eee7 5a46 	vfms.f32	s11, s14, s12
 810722e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8107232:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8107236:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 81072c8 <__ieee754_powf+0x588>
 810723a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 81072cc <__ieee754_powf+0x58c>
 810723e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8107242:	eddf 5a23 	vldr	s11, [pc, #140]	@ 81072d0 <__ieee754_powf+0x590>
 8107246:	eee6 5a07 	vfma.f32	s11, s12, s14
 810724a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 81072d4 <__ieee754_powf+0x594>
 810724e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8107252:	eddf 5a21 	vldr	s11, [pc, #132]	@ 81072d8 <__ieee754_powf+0x598>
 8107256:	eee6 5a07 	vfma.f32	s11, s12, s14
 810725a:	eeb0 6a66 	vmov.f32	s12, s13
 810725e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8107262:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8107266:	ee66 5a86 	vmul.f32	s11, s13, s12
 810726a:	ee36 6a47 	vsub.f32	s12, s12, s14
 810726e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8107272:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8107276:	ee77 7a67 	vsub.f32	s15, s14, s15
 810727a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810727e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8107282:	ee10 3a10 	vmov	r3, s0
 8107286:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 810728a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810728e:	da06      	bge.n	810729e <__ieee754_powf+0x55e>
 8107290:	f000 f82e 	bl	81072f0 <scalbnf>
 8107294:	ee20 0a08 	vmul.f32	s0, s0, s16
 8107298:	e56a      	b.n	8106d70 <__ieee754_powf+0x30>
 810729a:	2000      	movs	r0, #0
 810729c:	e7a5      	b.n	81071ea <__ieee754_powf+0x4aa>
 810729e:	ee00 3a10 	vmov	s0, r3
 81072a2:	e7f7      	b.n	8107294 <__ieee754_powf+0x554>
 81072a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 81072a8:	e562      	b.n	8106d70 <__ieee754_powf+0x30>
 81072aa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 81072dc <__ieee754_powf+0x59c>
 81072ae:	e55f      	b.n	8106d70 <__ieee754_powf+0x30>
 81072b0:	eeb0 0a48 	vmov.f32	s0, s16
 81072b4:	e55c      	b.n	8106d70 <__ieee754_powf+0x30>
 81072b6:	bf00      	nop
 81072b8:	ff800000 	.word	0xff800000
 81072bc:	3f317218 	.word	0x3f317218
 81072c0:	3f317200 	.word	0x3f317200
 81072c4:	35bfbe8c 	.word	0x35bfbe8c
 81072c8:	b5ddea0e 	.word	0xb5ddea0e
 81072cc:	3331bb4c 	.word	0x3331bb4c
 81072d0:	388ab355 	.word	0x388ab355
 81072d4:	bb360b61 	.word	0xbb360b61
 81072d8:	3e2aaaab 	.word	0x3e2aaaab
 81072dc:	00000000 	.word	0x00000000

081072e0 <fabsf>:
 81072e0:	ee10 3a10 	vmov	r3, s0
 81072e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81072e8:	ee00 3a10 	vmov	s0, r3
 81072ec:	4770      	bx	lr
	...

081072f0 <scalbnf>:
 81072f0:	ee10 3a10 	vmov	r3, s0
 81072f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 81072f8:	d02b      	beq.n	8107352 <scalbnf+0x62>
 81072fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 81072fe:	d302      	bcc.n	8107306 <scalbnf+0x16>
 8107300:	ee30 0a00 	vadd.f32	s0, s0, s0
 8107304:	4770      	bx	lr
 8107306:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 810730a:	d123      	bne.n	8107354 <scalbnf+0x64>
 810730c:	4b24      	ldr	r3, [pc, #144]	@ (81073a0 <scalbnf+0xb0>)
 810730e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 81073a4 <scalbnf+0xb4>
 8107312:	4298      	cmp	r0, r3
 8107314:	ee20 0a27 	vmul.f32	s0, s0, s15
 8107318:	db17      	blt.n	810734a <scalbnf+0x5a>
 810731a:	ee10 3a10 	vmov	r3, s0
 810731e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8107322:	3a19      	subs	r2, #25
 8107324:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8107328:	4288      	cmp	r0, r1
 810732a:	dd15      	ble.n	8107358 <scalbnf+0x68>
 810732c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 81073a8 <scalbnf+0xb8>
 8107330:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 81073ac <scalbnf+0xbc>
 8107334:	ee10 3a10 	vmov	r3, s0
 8107338:	eeb0 7a67 	vmov.f32	s14, s15
 810733c:	2b00      	cmp	r3, #0
 810733e:	bfb8      	it	lt
 8107340:	eef0 7a66 	vmovlt.f32	s15, s13
 8107344:	ee27 0a87 	vmul.f32	s0, s15, s14
 8107348:	4770      	bx	lr
 810734a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 81073b0 <scalbnf+0xc0>
 810734e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8107352:	4770      	bx	lr
 8107354:	0dd2      	lsrs	r2, r2, #23
 8107356:	e7e5      	b.n	8107324 <scalbnf+0x34>
 8107358:	4410      	add	r0, r2
 810735a:	28fe      	cmp	r0, #254	@ 0xfe
 810735c:	dce6      	bgt.n	810732c <scalbnf+0x3c>
 810735e:	2800      	cmp	r0, #0
 8107360:	dd06      	ble.n	8107370 <scalbnf+0x80>
 8107362:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8107366:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810736a:	ee00 3a10 	vmov	s0, r3
 810736e:	4770      	bx	lr
 8107370:	f110 0f16 	cmn.w	r0, #22
 8107374:	da09      	bge.n	810738a <scalbnf+0x9a>
 8107376:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 81073b0 <scalbnf+0xc0>
 810737a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 81073b4 <scalbnf+0xc4>
 810737e:	ee10 3a10 	vmov	r3, s0
 8107382:	eeb0 7a67 	vmov.f32	s14, s15
 8107386:	2b00      	cmp	r3, #0
 8107388:	e7d9      	b.n	810733e <scalbnf+0x4e>
 810738a:	3019      	adds	r0, #25
 810738c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8107390:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8107394:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 81073b8 <scalbnf+0xc8>
 8107398:	ee07 3a90 	vmov	s15, r3
 810739c:	e7d7      	b.n	810734e <scalbnf+0x5e>
 810739e:	bf00      	nop
 81073a0:	ffff3cb0 	.word	0xffff3cb0
 81073a4:	4c000000 	.word	0x4c000000
 81073a8:	7149f2ca 	.word	0x7149f2ca
 81073ac:	f149f2ca 	.word	0xf149f2ca
 81073b0:	0da24260 	.word	0x0da24260
 81073b4:	8da24260 	.word	0x8da24260
 81073b8:	33000000 	.word	0x33000000

081073bc <with_errnof>:
 81073bc:	b510      	push	{r4, lr}
 81073be:	ed2d 8b02 	vpush	{d8}
 81073c2:	eeb0 8a40 	vmov.f32	s16, s0
 81073c6:	4604      	mov	r4, r0
 81073c8:	f7fe fe7e 	bl	81060c8 <__errno>
 81073cc:	eeb0 0a48 	vmov.f32	s0, s16
 81073d0:	ecbd 8b02 	vpop	{d8}
 81073d4:	6004      	str	r4, [r0, #0]
 81073d6:	bd10      	pop	{r4, pc}

081073d8 <xflowf>:
 81073d8:	b130      	cbz	r0, 81073e8 <xflowf+0x10>
 81073da:	eef1 7a40 	vneg.f32	s15, s0
 81073de:	ee27 0a80 	vmul.f32	s0, s15, s0
 81073e2:	2022      	movs	r0, #34	@ 0x22
 81073e4:	f7ff bfea 	b.w	81073bc <with_errnof>
 81073e8:	eef0 7a40 	vmov.f32	s15, s0
 81073ec:	e7f7      	b.n	81073de <xflowf+0x6>
	...

081073f0 <__math_uflowf>:
 81073f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 81073f8 <__math_uflowf+0x8>
 81073f4:	f7ff bff0 	b.w	81073d8 <xflowf>
 81073f8:	10000000 	.word	0x10000000

081073fc <__math_oflowf>:
 81073fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8107404 <__math_oflowf+0x8>
 8107400:	f7ff bfea 	b.w	81073d8 <xflowf>
 8107404:	70000000 	.word	0x70000000

08107408 <__ieee754_sqrtf>:
 8107408:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810740c:	4770      	bx	lr
	...

08107410 <_init>:
 8107410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107412:	bf00      	nop
 8107414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107416:	bc08      	pop	{r3}
 8107418:	469e      	mov	lr, r3
 810741a:	4770      	bx	lr

0810741c <_fini>:
 810741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810741e:	bf00      	nop
 8107420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107422:	bc08      	pop	{r3}
 8107424:	469e      	mov	lr, r3
 8107426:	4770      	bx	lr
