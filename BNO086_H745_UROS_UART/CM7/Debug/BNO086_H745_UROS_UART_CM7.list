
BNO086_H745_UROS_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da04  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001198  0801dca8  0801dca8  0001eca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee40  0801ee40  0002079c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ee40  0801ee40  0001fe40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ee48  0801ee48  0002079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ee48  0801ee48  0001fe48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ee54  0801ee54  0001fe54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006dc  24000000  0801ee58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240006dc  0801f534  000206dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400073c  0801f594  0002073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00013320  240007a0  0801f5f4  000207a0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24013ac0  0801f5f4  00020ac0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f3b8  00000000  00000000  000207ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000060d1  00000000  00000000  0004fb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021a8  00000000  00000000  00055c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019e2  00000000  00000000  00057e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043c89  00000000  00000000  000597e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002fce3  00000000  00000000  0009d46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a45ee  00000000  00000000  000cd14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000076  00000000  00000000  0027173c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009b08  00000000  00000000  002717b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0027b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007a0 	.word	0x240007a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dc8c 	.word	0x0801dc8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007a4 	.word	0x240007a4
 80002dc:	0801dc8c 	.word	0x0801dc8c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <READIMU_HSEM>:
		  HAL_HSEM_Release(HSEM_ID_0,0);
		}
}
#else

void READIMU_HSEM(BNO086_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 8000748:	2000      	movs	r0, #0
 800074a:	f005 fbfb 	bl	8005f44 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	f040 80af 	bne.w	80008b4 <READIMU_HSEM+0x174>
    	bno->quaternion.i = SRAM4->Data[0];
 8000756:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800075a:	ed93 7b02 	vldr	d7, [r3, #8]
 800075e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4->Data[1];
 8000768:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800076c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000770:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4->Data[2];
 800077a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800077e:	ed93 7b06 	vldr	d7, [r3, #24]
 8000782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4->Data[3];
 800078c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000790:	ed93 7b08 	vldr	d7, [r3, #32]
 8000794:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4->Data[4];
 800079e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007a2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80007a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4->Data[5];
 80007b0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007b4:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80007b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4->Data[6];
 80007c2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007c6:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80007ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4->Data[7];
 80007d4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007d8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80007dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4->Data[8];
 80007e6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007ea:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80007ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4->Data[9];
 80007f8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007fc:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000800:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4->Data[10];
 800080a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800080e:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8000812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4->Data[11];
 800081c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000820:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4->Data[12];
 800082e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000832:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8000836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4->Data[13];
 8000840:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000844:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4->Data[14];
 8000852:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000856:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4->Data[15];
 8000864:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000868:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800086c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4->Data[16];
 8000876:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800087a:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 800087e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4->Data[17];
 8000888:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800088c:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8000890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4->Data[18];
 800089a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800089e:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80008a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f005 fb62 	bl	8005f78 <HAL_HSEM_Release>
    }
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c0:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <SystemInit+0xfc>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a3c      	ldr	r2, [pc, #240]	@ (80009b8 <SystemInit+0xfc>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80008d0:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <SystemInit+0xfc>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a38      	ldr	r2, [pc, #224]	@ (80009b8 <SystemInit+0xfc>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008dc:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <SystemInit+0x100>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d807      	bhi.n	80008f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <SystemInit+0x100>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 030f 	bic.w	r3, r3, #15
 80008f0:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <SystemInit+0x100>)
 80008f2:	f043 0307 	orr.w	r3, r3, #7
 80008f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f8:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <SystemInit+0x104>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a30      	ldr	r2, [pc, #192]	@ (80009c0 <SystemInit+0x104>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <SystemInit+0x104>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <SystemInit+0x104>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	492c      	ldr	r1, [pc, #176]	@ (80009c0 <SystemInit+0x104>)
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <SystemInit+0x108>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000916:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <SystemInit+0x100>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000922:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <SystemInit+0x100>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	4a24      	ldr	r2, [pc, #144]	@ (80009bc <SystemInit+0x100>)
 800092c:	f043 0307 	orr.w	r3, r3, #7
 8000930:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <SystemInit+0x104>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <SystemInit+0x104>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <SystemInit+0x104>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <SystemInit+0x104>)
 8000946:	4a20      	ldr	r2, [pc, #128]	@ (80009c8 <SystemInit+0x10c>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <SystemInit+0x104>)
 800094c:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <SystemInit+0x110>)
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <SystemInit+0x104>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <SystemInit+0x114>)
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <SystemInit+0x104>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <SystemInit+0x104>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <SystemInit+0x114>)
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <SystemInit+0x104>)
 8000964:	2200      	movs	r2, #0
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <SystemInit+0x104>)
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <SystemInit+0x114>)
 800096c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <SystemInit+0x104>)
 8000970:	2200      	movs	r2, #0
 8000972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <SystemInit+0x104>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <SystemInit+0x104>)
 800097a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <SystemInit+0x104>)
 8000982:	2200      	movs	r2, #0
 8000984:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <SystemInit+0x118>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <SystemInit+0x118>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <SystemInit+0x11c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <SystemInit+0x120>)
 8000998:	4013      	ands	r3, r2
 800099a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800099e:	d202      	bcs.n	80009a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <SystemInit+0x124>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <SystemInit+0x128>)
 80009a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009ac:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	52002000 	.word	0x52002000
 80009c0:	58024400 	.word	0x58024400
 80009c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009c8:	02020200 	.word	0x02020200
 80009cc:	01ff0000 	.word	0x01ff0000
 80009d0:	01010280 	.word	0x01010280
 80009d4:	580000c0 	.word	0x580000c0
 80009d8:	5c001000 	.word	0x5c001000
 80009dc:	ffff0000 	.word	0xffff0000
 80009e0:	51008108 	.word	0x51008108
 80009e4:	52004000 	.word	0x52004000

080009e8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009f4:	f00c fff8 	bl	800d9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b64 <pvPortMallocMicroROS+0x17c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000a00:	f000 f986 	bl	8000d10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a04:	4b58      	ldr	r3, [pc, #352]	@ (8000b68 <pvPortMallocMicroROS+0x180>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f040 8090 	bne.w	8000b32 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d01e      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a18:	2208      	movs	r2, #8
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d015      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f023 0307 	bic.w	r3, r3, #7
 8000a30:	3308      	adds	r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00b      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	e7fd      	b.n	8000a52 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d06a      	beq.n	8000b32 <pvPortMallocMicroROS+0x14a>
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d865      	bhi.n	8000b32 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a66:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <pvPortMallocMicroROS+0x188>)
 8000a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a6a:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <pvPortMallocMicroROS+0x188>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a70:	e004      	b.n	8000a7c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d903      	bls.n	8000a8e <pvPortMallocMicroROS+0xa6>
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1f1      	bne.n	8000a72 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <pvPortMallocMicroROS+0x17c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d04c      	beq.n	8000b32 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	4413      	add	r3, r2
 8000aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d920      	bls.n	8000afc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00b      	beq.n	8000ae4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ad0:	f383 8811 	msr	BASEPRI, r3
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	f3bf 8f4f 	dsb	sy
 8000adc:	613b      	str	r3, [r7, #16]
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000af6:	69b8      	ldr	r0, [r7, #24]
 8000af8:	f000 f96c 	bl	8000dd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <pvPortMallocMicroROS+0x18c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d203      	bcs.n	8000b1e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <pvPortMallocMicroROS+0x18c>)
 8000b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <pvPortMallocMicroROS+0x180>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b32:	f00c ff67 	bl	800da04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00b      	beq.n	8000b58 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60fb      	str	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b58:	69fb      	ldr	r3, [r7, #28]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	240043c4 	.word	0x240043c4
 8000b68:	240043d0 	.word	0x240043d0
 8000b6c:	240043c8 	.word	0x240043c8
 8000b70:	240043bc 	.word	0x240043bc
 8000b74:	240043cc 	.word	0x240043cc

08000b78 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d04a      	beq.n	8000c20 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10b      	bne.n	8000bbe <vPortFreeMicroROS+0x46>
	__asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	f3bf 8f6f 	isb	sy
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	60fb      	str	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bca:	f383 8811 	msr	BASEPRI, r3
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f3bf 8f4f 	dsb	sy
 8000bd6:	60bb      	str	r3, [r7, #8]
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	e7fd      	b.n	8000bda <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d019      	beq.n	8000c20 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d115      	bne.n	8000c20 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c04:	f00c fef0 	bl	800d9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <vPortFreeMicroROS+0xb4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <vPortFreeMicroROS+0xb4>)
 8000c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c16:	6938      	ldr	r0, [r7, #16]
 8000c18:	f000 f8dc 	bl	8000dd4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c1c:	f00c fef2 	bl	800da04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240043d0 	.word	0x240043d0
 8000c2c:	240043c8 	.word	0x240043c8

08000c30 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	425b      	negs	r3, r3
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <getBlockSize+0x38>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

	return count;
 8000c58:	68fb      	ldr	r3, [r7, #12]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	240043d0 	.word	0x240043d0

08000c6c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c76:	f00c feb7 	bl	800d9e8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c7a:	6838      	ldr	r0, [r7, #0]
 8000c7c:	f7ff feb4 	bl	80009e8 <pvPortMallocMicroROS>
 8000c80:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d017      	beq.n	8000cb8 <pvPortReallocMicroROS+0x4c>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d014      	beq.n	8000cb8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffce 	bl	8000c30 <getBlockSize>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2208      	movs	r2, #8
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d201      	bcs.n	8000ca8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	68b8      	ldr	r0, [r7, #8]
 8000cae:	f01c f9ac 	bl	801d00a <memcpy>

		vPortFreeMicroROS(pv);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff60 	bl	8000b78 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cb8:	f00c fea4 	bl	800da04 <xTaskResumeAll>

	return newmem;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000cd0:	f00c fe8a 	bl	800d9e8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff fe82 	bl	80009e8 <pvPortMallocMicroROS>
 8000ce4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cea:	e004      	b.n	8000cf6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	613a      	str	r2, [r7, #16]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	617a      	str	r2, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f5      	bne.n	8000cec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d00:	f00c fe80 	bl	800da04 <xTaskResumeAll>
  	return mem;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <prvHeapInit+0xac>)
 8000d1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00c      	beq.n	8000d44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3307      	adds	r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 0307 	bic.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <prvHeapInit+0xac>)
 8000d40:	4413      	add	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d48:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <prvHeapInit+0xb0>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <prvHeapInit+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <prvHeapInit+0xb8>)
 8000d9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <prvHeapInit+0xbc>)
 8000da6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <prvHeapInit+0xc0>)
 8000daa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	240007bc 	.word	0x240007bc
 8000dc0:	240043bc 	.word	0x240043bc
 8000dc4:	240043c4 	.word	0x240043c4
 8000dc8:	240043cc 	.word	0x240043cc
 8000dcc:	240043c8 	.word	0x240043c8
 8000dd0:	240043d0 	.word	0x240043d0

08000dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <prvInsertBlockIntoFreeList+0xac>)
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e002      	b.n	8000de8 <prvInsertBlockIntoFreeList+0x14>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8f7      	bhi.n	8000de2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d108      	bne.n	8000e16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	441a      	add	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d118      	bne.n	8000e5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <prvInsertBlockIntoFreeList+0xb0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d00d      	beq.n	8000e52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	441a      	add	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e008      	b.n	8000e64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <prvInsertBlockIntoFreeList+0xb0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e003      	b.n	8000e64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d002      	beq.n	8000e72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	240043bc 	.word	0x240043bc
 8000e84:	240043c4 	.word	0x240043c4

08000e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	200b      	movs	r0, #11
 8000eb2:	f001 fbf3 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f001 fc0a 	bl	80026d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	200c      	movs	r0, #12
 8000ec2:	f001 fbeb 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f001 fc02 	bl	80026d0 <HAL_NVIC_EnableIRQ>

}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ee6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ee8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eec:	4904      	ldr	r1, [pc, #16]	@ (8000f00 <cubemx_transport_open+0x28>)
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f008 fcd8 	bl	80098a4 <HAL_UART_Receive_DMA>
    return true;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240043d4 	.word	0x240043d4

08000f04 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f12:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f008 fd11 	bl	800993c <HAL_UART_DMAStop>
    return true;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f38:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d11b      	bne.n	8000f7c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	6978      	ldr	r0, [r7, #20]
 8000f4e:	f008 fc29 	bl	80097a4 <HAL_UART_Transmit_DMA>
 8000f52:	4603      	mov	r3, r0
 8000f54:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f56:	e002      	b.n	8000f5e <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f00b f8c3 	bl	800c0e4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <cubemx_transport_write+0x4a>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	2b20      	cmp	r3, #32
 8000f6c:	d1f4      	bne.n	8000f58 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f6e:	7cfb      	ldrb	r3, [r7, #19]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <cubemx_transport_write+0x54>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	e002      	b.n	8000f7e <cubemx_transport_write+0x5a>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e000      	b.n	8000f7e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f7c:	2300      	movs	r3, #0
    }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f9c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5a      	ldr	r2, [pc, #360]	@ (8001118 <cubemx_transport_read+0x190>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d068      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	@ (800111c <cubemx_transport_read+0x194>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d061      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a55      	ldr	r2, [pc, #340]	@ (8001120 <cubemx_transport_read+0x198>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05a      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a52      	ldr	r2, [pc, #328]	@ (8001124 <cubemx_transport_read+0x19c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d053      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <cubemx_transport_read+0x1a0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <cubemx_transport_read+0x1a4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d045      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a4b      	ldr	r2, [pc, #300]	@ (8001130 <cubemx_transport_read+0x1a8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d03e      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <cubemx_transport_read+0x1ac>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d037      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <cubemx_transport_read+0x1b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d030      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a43      	ldr	r2, [pc, #268]	@ (800113c <cubemx_transport_read+0x1b4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d029      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a41      	ldr	r2, [pc, #260]	@ (8001140 <cubemx_transport_read+0x1b8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d022      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3e      	ldr	r2, [pc, #248]	@ (8001144 <cubemx_transport_read+0x1bc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01b      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <cubemx_transport_read+0x1c0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d014      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a39      	ldr	r2, [pc, #228]	@ (800114c <cubemx_transport_read+0x1c4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a37      	ldr	r2, [pc, #220]	@ (8001150 <cubemx_transport_read+0x1c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d006      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <cubemx_transport_read+0x1cc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d107      	bne.n	8001096 <cubemx_transport_read+0x10e>
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001094:	e006      	b.n	80010a4 <cubemx_transport_read+0x11c>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010a8:	b662      	cpsie	i
}
 80010aa:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f00b f816 	bl	800c0e4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d104      	bne.n	80010ce <cubemx_transport_read+0x146>
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f6ff af6a 	blt.w	8000fa2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d2:	e011      	b.n	80010f8 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	440b      	add	r3, r1
 80010de:	4920      	ldr	r1, [pc, #128]	@ (8001160 <cubemx_transport_read+0x1d8>)
 80010e0:	5c8a      	ldrb	r2, [r1, r2]
 80010e2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ee:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010f0:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d003      	beq.n	800110c <cubemx_transport_read+0x184>
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3e3      	bcc.n	80010d4 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 800110c:	69bb      	ldr	r3, [r7, #24]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020010 	.word	0x40020010
 800111c:	40020028 	.word	0x40020028
 8001120:	40020040 	.word	0x40020040
 8001124:	40020058 	.word	0x40020058
 8001128:	40020070 	.word	0x40020070
 800112c:	40020088 	.word	0x40020088
 8001130:	400200a0 	.word	0x400200a0
 8001134:	400200b8 	.word	0x400200b8
 8001138:	40020410 	.word	0x40020410
 800113c:	40020428 	.word	0x40020428
 8001140:	40020440 	.word	0x40020440
 8001144:	40020458 	.word	0x40020458
 8001148:	40020470 	.word	0x40020470
 800114c:	40020488 	.word	0x40020488
 8001150:	400204a0 	.word	0x400204a0
 8001154:	400204b8 	.word	0x400204b8
 8001158:	24004bd8 	.word	0x24004bd8
 800115c:	24004bd4 	.word	0x24004bd4
 8001160:	240043d4 	.word	0x240043d4

08001164 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ETH_Init+0x80>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <MX_ETH_Init+0x84>)
 800116c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_ETH_Init+0x88>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_ETH_Init+0x88>)
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_ETH_Init+0x88>)
 800117c:	22e1      	movs	r2, #225	@ 0xe1
 800117e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_ETH_Init+0x88>)
 8001182:	2200      	movs	r2, #0
 8001184:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_ETH_Init+0x88>)
 8001188:	2200      	movs	r2, #0
 800118a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_ETH_Init+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ETH_Init+0x80>)
 8001194:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <MX_ETH_Init+0x88>)
 8001196:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_ETH_Init+0x80>)
 800119a:	2201      	movs	r2, #1
 800119c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_ETH_Init+0x8c>)
 80011a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <MX_ETH_Init+0x90>)
 80011a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011ac:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80011b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011b4:	f004 f8e2 	bl	800537c <HAL_ETH_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011be:	f000 fc03 	bl	80019c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011c2:	2238      	movs	r2, #56	@ 0x38
 80011c4:	2100      	movs	r1, #0
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011c8:	f01b fe56 	bl	801ce78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011ce:	2221      	movs	r2, #33	@ 0x21
 80011d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24004c14 	.word	0x24004c14
 80011e8:	40028000 	.word	0x40028000
 80011ec:	24004cc4 	.word	0x24004cc4
 80011f0:	2400073c 	.word	0x2400073c
 80011f4:	240006dc 	.word	0x240006dc
 80011f8:	24004bdc 	.word	0x24004bdc

080011fc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	@ 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a59      	ldr	r2, [pc, #356]	@ (8001380 <HAL_ETH_MspInit+0x184>)
 800121a:	4293      	cmp	r3, r2
 800121c:	f040 80ab 	bne.w	8001376 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001220:	4b58      	ldr	r3, [pc, #352]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001226:	4a57      	ldr	r2, [pc, #348]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001230:	4b54      	ldr	r3, [pc, #336]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800123e:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001244:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800124e:	4b4d      	ldr	r3, [pc, #308]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800125c:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001262:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800126c:	4b45      	ldr	r3, [pc, #276]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	4a40      	ldr	r2, [pc, #256]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128a:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a39      	ldr	r2, [pc, #228]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a31      	ldr	r2, [pc, #196]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012f2:	2332      	movs	r3, #50	@ 0x32
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001302:	230b      	movs	r3, #11
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	@ (8001388 <HAL_ETH_MspInit+0x18c>)
 800130e:	f004 fc69 	bl	8005be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001312:	2386      	movs	r3, #134	@ 0x86
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4817      	ldr	r0, [pc, #92]	@ (800138c <HAL_ETH_MspInit+0x190>)
 800132e:	f004 fc59 	bl	8005be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <HAL_ETH_MspInit+0x194>)
 8001350:	f004 fc48 	bl	8005be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001354:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <HAL_ETH_MspInit+0x198>)
 8001372:	f004 fc37 	bl	8005be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	@ 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40028000 	.word	0x40028000
 8001384:	58024400 	.word	0x58024400
 8001388:	58020800 	.word	0x58020800
 800138c:	58020000 	.word	0x58020000
 8001390:	58020400 	.word	0x58020400
 8001394:	58021800 	.word	0x58021800

08001398 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <MX_FREERTOS_Init+0x18>)
 800139e:	2100      	movs	r1, #0
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_FREERTOS_Init+0x1c>)
 80013a2:	f00a fe0d 	bl	800bfc0 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a03      	ldr	r2, [pc, #12]	@ (80013b8 <MX_FREERTOS_Init+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	0801dd68 	.word	0x0801dd68
 80013b4:	080017a9 	.word	0x080017a9
 80013b8:	24004ccc 	.word	0x24004ccc

080013bc <MX_GPIO_Init>:
/** Configure pins
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
*/
void MX_GPIO_Init(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d2:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

}
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	58024400 	.word	0x58024400

08001468 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_IWDG1_Init+0x34>)
 800146e:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <MX_IWDG1_Init+0x38>)
 8001470:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_IWDG1_Init+0x34>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_IWDG1_Init+0x34>)
 800147a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800147e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_IWDG1_Init+0x34>)
 8001482:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001486:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_IWDG1_Init+0x34>)
 800148a:	f004 fdb5 	bl	8005ff8 <HAL_IWDG_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001494:	f000 fa98 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24009b4c 	.word	0x24009b4c
 80014a0:	58004800 	.word	0x58004800

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80014aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80014b0:	bf00      	nop
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <main+0xb8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <main+0x24>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dcf4      	bgt.n	80014b2 <main+0xe>
  if ( timeout < 0 )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da01      	bge.n	80014d2 <main+0x2e>
  {
  Error_Handler();
 80014ce:	f000 fa7b 	bl	80019c8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 ff8b 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f843 	bl	8001560 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <main+0xb8>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <main+0xb8>)
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <main+0xb8>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 80014f8:	2001      	movs	r0, #1
 80014fa:	f004 fd51 	bl	8005fa0 <HAL_HSEM_ActivateNotification>

/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f004 fd20 	bl	8005f44 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001504:	2100      	movs	r1, #0
 8001506:	2000      	movs	r0, #0
 8001508:	f004 fd36 	bl	8005f78 <HAL_HSEM_Release>

/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800150c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001510:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001512:	bf00      	nop
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <main+0xb8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d104      	bne.n	800152a <main+0x86>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dcf4      	bgt.n	8001514 <main+0x70>
if ( timeout < 0 )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da01      	bge.n	8001534 <main+0x90>
{
Error_Handler();
 8001530:	f000 fa4a 	bl	80019c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001534:	f7ff ff42 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001538:	f7ff fca6 	bl	8000e88 <MX_DMA_Init>
  MX_ETH_Init();
 800153c:	f7ff fe12 	bl	8001164 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001540:	f000 fe6c 	bl	800221c <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8001544:	f000 fd44 	bl	8001fd0 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8001548:	f7ff ff8e 	bl	8001468 <MX_IWDG1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800154c:	f00a fcee 	bl	800bf2c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001550:	f7ff ff22 	bl	8001398 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001554:	f00a fd0e 	bl	800bf74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <main+0xb4>
 800155c:	58024400 	.word	0x58024400

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09c      	sub	sp, #112	@ 0x70
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	224c      	movs	r2, #76	@ 0x4c
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f01b fc82 	bl	801ce78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2220      	movs	r2, #32
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f01b fc7c 	bl	801ce78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001580:	2004      	movs	r0, #4
 8001582:	f004 fec9 	bl	8006318 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <SystemClock_Config+0x104>)
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	4a35      	ldr	r2, [pc, #212]	@ (8001664 <SystemClock_Config+0x104>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001596:	4b33      	ldr	r3, [pc, #204]	@ (8001664 <SystemClock_Config+0x104>)
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <SystemClock_Config+0x108>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <SystemClock_Config+0x108>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <SystemClock_Config+0x108>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015bc:	bf00      	nop
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <SystemClock_Config+0x108>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ca:	d1f8      	bne.n	80015be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015cc:	2309      	movs	r3, #9
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	2302      	movs	r3, #2
 80015e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80015e6:	232a      	movs	r3, #42	@ 0x2a
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015f6:	230c      	movs	r3, #12
 80015f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	4618      	mov	r0, r3
 800160a:	f004 feef 	bl	80063ec <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001614:	f000 f9d8 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	233f      	movs	r3, #63	@ 0x3f
 800161a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2303      	movs	r3, #3
 800161e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800162c:	2350      	movs	r3, #80	@ 0x50
 800162e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001636:	2340      	movs	r3, #64	@ 0x40
 8001638:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2103      	movs	r1, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f005 fb2e 	bl	8006ca0 <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800164a:	f000 f9bd 	bl	80019c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800164e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001652:	2100      	movs	r1, #0
 8001654:	2001      	movs	r0, #1
 8001656:	f005 fcd9 	bl	800700c <HAL_RCC_MCOConfig>
}
 800165a:	bf00      	nop
 800165c:	3770      	adds	r7, #112	@ 0x70
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58000400 	.word	0x58000400
 8001668:	58024800 	.word	0x58024800

0800166c <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <timer_callback+0x38>

			if(HSEM_FLAG == 1){
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <timer_callback+0x40>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <timer_callback+0x26>
				HSEM_FLAG = 0;
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <timer_callback+0x40>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				READIMU_HSEM(&imu);
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <timer_callback+0x44>)
 800168e:	f7ff f857 	bl	8000740 <READIMU_HSEM>
			}
			SensorsPublished();
 8001692:	f000 f811 	bl	80016b8 <SensorsPublished>

			// Synchronize time with the agent
			rmw_uros_sync_session(1000);
 8001696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169a:	f00f fa2f 	bl	8010afc <rmw_uros_sync_session>
			HAL_IWDG_Refresh(&hiwdg1);
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <timer_callback+0x48>)
 80016a0:	f004 fcf9 	bl	8006096 <HAL_IWDG_Refresh>
		}

}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24009e4c 	.word	0x24009e4c
 80016b0:	24009e00 	.word	0x24009e00
 80016b4:	24009b4c 	.word	0x24009b4c

080016b8 <SensorsPublished>:

void SensorsPublished(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	imu_msg.orientation.x = imu.quaternion.i;
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <SensorsPublished+0xdc>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <SensorsPublished+0xe0>)
 80016c8:	ed83 7b06 	vstr	d7, [r3, #24]
	imu_msg.orientation.x = imu.quaternion.i;
 80016cc:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <SensorsPublished+0xdc>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d6:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <SensorsPublished+0xe0>)
 80016d8:	ed83 7b06 	vstr	d7, [r3, #24]
	imu_msg.orientation.x = imu.quaternion.i;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <SensorsPublished+0xdc>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <SensorsPublished+0xe0>)
 80016e8:	ed83 7b06 	vstr	d7, [r3, #24]

	/*imu.acceleration.x;
	 * imu.acceleration.y;
	 * imu.acceleration.x; For Acceleration data (g)*/

	imu_msg.linear_acceleration.x = imu.linear_acceleration.x;
 80016ec:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <SensorsPublished+0xdc>)
 80016ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <SensorsPublished+0xe0>)
 80016f8:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	imu_msg.linear_acceleration.y = imu.linear_acceleration.y;
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <SensorsPublished+0xdc>)
 80016fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <SensorsPublished+0xe0>)
 8001708:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	imu_msg.linear_acceleration.z = imu.linear_acceleration.z;
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <SensorsPublished+0xdc>)
 800170e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <SensorsPublished+0xe0>)
 8001718:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	imu_msg.angular_velocity.x = imu.angular_velocity.x;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <SensorsPublished+0xdc>)
 800171e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001722:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <SensorsPublished+0xe0>)
 8001728:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	imu_msg.angular_velocity.y = imu.angular_velocity.y;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <SensorsPublished+0xdc>)
 800172e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <SensorsPublished+0xe0>)
 8001738:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	imu_msg.angular_velocity.z = imu.angular_velocity.z;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <SensorsPublished+0xdc>)
 800173e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <SensorsPublished+0xe0>)
 8001748:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90

	magnetic_field_msg.magnetic_field.x = imu.magnetometer.x;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <SensorsPublished+0xdc>)
 800174e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <SensorsPublished+0xe4>)
 8001758:	ed83 7b06 	vstr	d7, [r3, #24]
	magnetic_field_msg.magnetic_field.y = imu.magnetometer.y;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <SensorsPublished+0xdc>)
 800175e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <SensorsPublished+0xe4>)
 8001768:	ed83 7b08 	vstr	d7, [r3, #32]
	magnetic_field_msg.magnetic_field.z = imu.magnetometer.z;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <SensorsPublished+0xdc>)
 800176e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <SensorsPublished+0xe4>)
 8001778:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

	/*imu.euler_angle.roll;
	 * imu.euler_angle.pitch;
	 * imu.euler_angle.yaw; For Euler Angle data (degree)*/

	RCCHECK(rcl_publish(&imu_pub, &imu_msg, NULL));
 800177c:	2200      	movs	r2, #0
 800177e:	4906      	ldr	r1, [pc, #24]	@ (8001798 <SensorsPublished+0xe0>)
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <SensorsPublished+0xe8>)
 8001782:	f00d fb75 	bl	800ee70 <rcl_publish>
	RCCHECK(rcl_publish(&magnetic_field_pub, &magnetic_field_msg, NULL));
 8001786:	2200      	movs	r2, #0
 8001788:	4904      	ldr	r1, [pc, #16]	@ (800179c <SensorsPublished+0xe4>)
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <SensorsPublished+0xec>)
 800178c:	f00d fb70 	bl	800ee70 <rcl_publish>



}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	24009e00 	.word	0x24009e00
 8001798:	24009c40 	.word	0x24009c40
 800179c:	24009d88 	.word	0x24009d88
 80017a0:	24009c3c 	.word	0x24009c3c
 80017a4:	24009d80 	.word	0x24009d80

080017a8 <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b0b2      	sub	sp, #200	@ 0xc8
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 80017b2:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <StartDefaultTask+0x16c>)
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <StartDefaultTask+0x170>)
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4b58      	ldr	r3, [pc, #352]	@ (800191c <StartDefaultTask+0x174>)
 80017bc:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <StartDefaultTask+0x178>)
 80017be:	4959      	ldr	r1, [pc, #356]	@ (8001924 <StartDefaultTask+0x17c>)
 80017c0:	2001      	movs	r0, #1
 80017c2:	f00e fb8d 	bl	800fee0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00e faaa 	bl	800fd24 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <StartDefaultTask+0x180>)
 80017d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 80017d6:	4b55      	ldr	r3, [pc, #340]	@ (800192c <StartDefaultTask+0x184>)
 80017d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 80017dc:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <StartDefaultTask+0x188>)
 80017de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017e2:	4b54      	ldr	r3, [pc, #336]	@ (8001934 <StartDefaultTask+0x18c>)
 80017e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00e faa7 	bl	800fd40 <rcutils_set_default_allocator>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f083 0301 	eor.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 80017fe:	f240 1155 	movw	r1, #341	@ 0x155
 8001802:	484d      	ldr	r0, [pc, #308]	@ (8001938 <StartDefaultTask+0x190>)
 8001804:	f01b f9b8 	bl	801cb78 <iprintf>

  // micro-ROS app



  allocator = rcl_get_default_allocator();
 8001808:	4c4c      	ldr	r4, [pc, #304]	@ (800193c <StartDefaultTask+0x194>)
 800180a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800180e:	4618      	mov	r0, r3
 8001810:	f00e fab4 	bl	800fd7c <rcutils_get_default_allocator>
 8001814:	4625      	mov	r5, r4
 8001816:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	602b      	str	r3, [r5, #0]

  //create init_options
    init_options = rcl_get_zero_initialized_init_options();
 8001822:	f00d f94f 	bl	800eac4 <rcl_get_zero_initialized_init_options>
 8001826:	4603      	mov	r3, r0
 8001828:	4a45      	ldr	r2, [pc, #276]	@ (8001940 <StartDefaultTask+0x198>)
 800182a:	6013      	str	r3, [r2, #0]
    RCCHECK(rcl_init_options_init(&init_options, allocator));
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <StartDefaultTask+0x194>)
 800182e:	466c      	mov	r4, sp
 8001830:	f103 020c 	add.w	r2, r3, #12
 8001834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001838:	e884 0003 	stmia.w	r4, {r0, r1}
 800183c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183e:	4840      	ldr	r0, [pc, #256]	@ (8001940 <StartDefaultTask+0x198>)
 8001840:	f00d f942 	bl	800eac8 <rcl_init_options_init>
    RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8001844:	2158      	movs	r1, #88	@ 0x58
 8001846:	483e      	ldr	r0, [pc, #248]	@ (8001940 <StartDefaultTask+0x198>)
 8001848:	f00d fa3c 	bl	800ecc4 <rcl_init_options_set_domain_id>

  //  rclc_support_init(&support, 0, NULL, &allocator);
   rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800184c:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <StartDefaultTask+0x194>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <StartDefaultTask+0x198>)
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	483b      	ldr	r0, [pc, #236]	@ (8001944 <StartDefaultTask+0x19c>)
 8001858:	f00e f97a 	bl	800fb50 <rclc_support_init_with_options>

   rclc_node_init_default(&node, "BNO086_node", "", &support);
 800185c:	4b39      	ldr	r3, [pc, #228]	@ (8001944 <StartDefaultTask+0x19c>)
 800185e:	4a3a      	ldr	r2, [pc, #232]	@ (8001948 <StartDefaultTask+0x1a0>)
 8001860:	493a      	ldr	r1, [pc, #232]	@ (800194c <StartDefaultTask+0x1a4>)
 8001862:	483b      	ldr	r0, [pc, #236]	@ (8001950 <StartDefaultTask+0x1a8>)
 8001864:	f00e f9aa 	bl	800fbbc <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_best_effort(
 8001868:	f00f fcd0 	bl	801120c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800186c:	4602      	mov	r2, r0
 800186e:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <StartDefaultTask+0x1ac>)
 8001870:	4937      	ldr	r1, [pc, #220]	@ (8001950 <StartDefaultTask+0x1a8>)
 8001872:	4839      	ldr	r0, [pc, #228]	@ (8001958 <StartDefaultTask+0x1b0>)
 8001874:	f00e f9e4 	bl	800fc40 <rclc_publisher_init_best_effort>
    &imu_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
    "imu");

  rclc_publisher_init_best_effort(
 8001878:	f00f fce0 	bl	801123c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>
 800187c:	4602      	mov	r2, r0
 800187e:	4b37      	ldr	r3, [pc, #220]	@ (800195c <StartDefaultTask+0x1b4>)
 8001880:	4933      	ldr	r1, [pc, #204]	@ (8001950 <StartDefaultTask+0x1a8>)
 8001882:	4837      	ldr	r0, [pc, #220]	@ (8001960 <StartDefaultTask+0x1b8>)
 8001884:	f00e f9dc 	bl	800fc40 <rclc_publisher_init_best_effort>
      &magnetic_field_pub,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, MagneticField),
      "magnetic_field");

  imu_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001888:	4c36      	ldr	r4, [pc, #216]	@ (8001964 <StartDefaultTask+0x1bc>)
 800188a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800188e:	4936      	ldr	r1, [pc, #216]	@ (8001968 <StartDefaultTask+0x1c0>)
 8001890:	4618      	mov	r0, r3
 8001892:	f00d f8f3 	bl	800ea7c <micro_ros_string_utilities_init>
 8001896:	f104 0308 	add.w	r3, r4, #8
 800189a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800189e:	ca07      	ldmia	r2, {r0, r1, r2}
 80018a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  magnetic_field_msg.header.frame_id = micro_ros_string_utilities_init("magnetic_field_frame");
 80018a4:	4c31      	ldr	r4, [pc, #196]	@ (800196c <StartDefaultTask+0x1c4>)
 80018a6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80018aa:	4931      	ldr	r1, [pc, #196]	@ (8001970 <StartDefaultTask+0x1c8>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00d f8e5 	bl	800ea7c <micro_ros_string_utilities_init>
 80018b2:	f104 0308 	add.w	r3, r4, #8
 80018b6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80018ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80018bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // create timer
  rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(10), timer_callback);
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <StartDefaultTask+0x1cc>)
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001978 <StartDefaultTask+0x1d0>)
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	491e      	ldr	r1, [pc, #120]	@ (8001944 <StartDefaultTask+0x19c>)
 80018cc:	482b      	ldr	r0, [pc, #172]	@ (800197c <StartDefaultTask+0x1d4>)
 80018ce:	f00e f9f1 	bl	800fcb4 <rclc_timer_init_default>

  rmw_uros_sync_session(1000);
 80018d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d6:	f00f f911 	bl	8010afc <rmw_uros_sync_session>


  executor = rclc_executor_get_zero_initialized_executor();
 80018da:	4c29      	ldr	r4, [pc, #164]	@ (8001980 <StartDefaultTask+0x1d8>)
 80018dc:	463b      	mov	r3, r7
 80018de:	4618      	mov	r0, r3
 80018e0:	f00d fe54 	bl	800f58c <rclc_executor_get_zero_initialized_executor>
 80018e4:	4620      	mov	r0, r4
 80018e6:	463b      	mov	r3, r7
 80018e8:	2288      	movs	r2, #136	@ 0x88
 80018ea:	4619      	mov	r1, r3
 80018ec:	f01b fb8d 	bl	801d00a <memcpy>
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <StartDefaultTask+0x194>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <StartDefaultTask+0x19c>)
 80018f6:	4822      	ldr	r0, [pc, #136]	@ (8001980 <StartDefaultTask+0x1d8>)
 80018f8:	f00d fe52 	bl	800f5a0 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer_); // add timer
 80018fc:	491f      	ldr	r1, [pc, #124]	@ (800197c <StartDefaultTask+0x1d4>)
 80018fe:	4820      	ldr	r0, [pc, #128]	@ (8001980 <StartDefaultTask+0x1d8>)
 8001900:	f00d feca 	bl	800f698 <rclc_executor_add_timer>
  rclc_executor_spin(&executor);
 8001904:	481e      	ldr	r0, [pc, #120]	@ (8001980 <StartDefaultTask+0x1d8>)
 8001906:	f00e f8e1 	bl	800facc <rclc_executor_spin>

  for(;;)
  {
    osDelay(10);
 800190a:	200a      	movs	r0, #10
 800190c:	f00a fbea 	bl	800c0e4 <osDelay>
 8001910:	e7fb      	b.n	800190a <StartDefaultTask+0x162>
 8001912:	bf00      	nop
 8001914:	08000f89 	.word	0x08000f89
 8001918:	08000f25 	.word	0x08000f25
 800191c:	08000f05 	.word	0x08000f05
 8001920:	08000ed9 	.word	0x08000ed9
 8001924:	24009eac 	.word	0x24009eac
 8001928:	080019d5 	.word	0x080019d5
 800192c:	08001a19 	.word	0x08001a19
 8001930:	08001a51 	.word	0x08001a51
 8001934:	08001abd 	.word	0x08001abd
 8001938:	0801dcb4 	.word	0x0801dcb4
 800193c:	24009b90 	.word	0x24009b90
 8001940:	24009bac 	.word	0x24009bac
 8001944:	24009b5c 	.word	0x24009b5c
 8001948:	0801dcdc 	.word	0x0801dcdc
 800194c:	0801dce0 	.word	0x0801dce0
 8001950:	24009ba4 	.word	0x24009ba4
 8001954:	0801dcec 	.word	0x0801dcec
 8001958:	24009c3c 	.word	0x24009c3c
 800195c:	0801dcf0 	.word	0x0801dcf0
 8001960:	24009d80 	.word	0x24009d80
 8001964:	24009c40 	.word	0x24009c40
 8001968:	0801dd00 	.word	0x0801dd00
 800196c:	24009d88 	.word	0x24009d88
 8001970:	0801dd0c 	.word	0x0801dd0c
 8001974:	0800166d 	.word	0x0800166d
 8001978:	00989680 	.word	0x00989680
 800197c:	24009c38 	.word	0x24009c38
 8001980:	24009bb0 	.word	0x24009bb0

08001984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001996:	f000 fd65 	bl	8002464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_HSEM_FreeCallback>:
void HAL_HSEM_FreeCallback(uint32_t SemMask){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	HSEM_FLAG = 1;
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_HSEM_FreeCallback+0x1c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 80019b6:	2001      	movs	r0, #1
 80019b8:	f004 faf2 	bl	8005fa0 <HAL_HSEM_ActivateNotification>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	24009e4c 	.word	0x24009e4c

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <microros_allocate+0x3c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <microros_allocate+0x3c>)
 80019ec:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <microros_allocate+0x40>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <microros_allocate+0x40>)
 80019fc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fff2 	bl	80009e8 <pvPortMallocMicroROS>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	24009e50 	.word	0x24009e50
 8001a14:	24009e54 	.word	0x24009e54

08001a18 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00c      	beq.n	8001a42 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff f901 	bl	8000c30 <getBlockSize>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a06      	ldr	r2, [pc, #24]	@ (8001a4c <microros_deallocate+0x34>)
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <microros_deallocate+0x34>)
 8001a3a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff f89b 	bl	8000b78 <vPortFreeMicroROS>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	24009e54 	.word	0x24009e54

08001a50 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <microros_reallocate+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <microros_reallocate+0x64>)
 8001a6a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <microros_reallocate+0x68>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4413      	add	r3, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <microros_reallocate+0x68>)
 8001a7a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001a82:	68b8      	ldr	r0, [r7, #8]
 8001a84:	f7fe ffb0 	bl	80009e8 <pvPortMallocMicroROS>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	e00e      	b.n	8001aaa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff f8cf 	bl	8000c30 <getBlockSize>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <microros_reallocate+0x68>)
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <microros_reallocate+0x68>)
 8001a9e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff f8e2 	bl	8000c6c <pvPortReallocMicroROS>
 8001aa8:	4603      	mov	r3, r0
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	24009e50 	.word	0x24009e50
 8001ab8:	24009e54 	.word	0x24009e54

08001abc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8001b04 <microros_zero_allocate+0x48>)
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <microros_zero_allocate+0x48>)
 8001ada:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <microros_zero_allocate+0x4c>)
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <microros_zero_allocate+0x4c>)
 8001aee:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff f8e7 	bl	8000cc6 <pvPortCallocMicroROS>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	24009e50 	.word	0x24009e50
 8001b08:	24009e54 	.word	0x24009e54
 8001b0c:	00000000 	.word	0x00000000

08001b10 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b26:	a320      	add	r3, pc, #128	@ (adr r3, 8001ba8 <UTILS_NanosecondsToTimespec+0x98>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fc40 	bl	80003b0 <__aeabi_ldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b3e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ba8 <UTILS_NanosecondsToTimespec+0x98>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fc34 	bl	80003b0 <__aeabi_ldivmod>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da20      	bge.n	8001b96 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a11      	ldr	r2, [pc, #68]	@ (8001ba0 <UTILS_NanosecondsToTimespec+0x90>)
 8001b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5e:	1712      	asrs	r2, r2, #28
 8001b60:	17db      	asrs	r3, r3, #31
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	6979      	ldr	r1, [r7, #20]
 8001b70:	17c8      	asrs	r0, r1, #31
 8001b72:	460c      	mov	r4, r1
 8001b74:	4605      	mov	r5, r0
 8001b76:	ebb2 0804 	subs.w	r8, r2, r4
 8001b7a:	eb63 0905 	sbc.w	r9, r3, r5
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4906      	ldr	r1, [pc, #24]	@ (8001ba4 <UTILS_NanosecondsToTimespec+0x94>)
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
    }
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ba0:	44b82fa1 	.word	0x44b82fa1
 8001ba4:	3b9aca00 	.word	0x3b9aca00
 8001ba8:	3b9aca00 	.word	0x3b9aca00
 8001bac:	00000000 	.word	0x00000000

08001bb0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb4:	b08e      	sub	sp, #56	@ 0x38
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bba:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001bbc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00c f990 	bl	800defc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	17da      	asrs	r2, r3, #31
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	61fa      	str	r2, [r7, #28]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	000b      	movs	r3, r1
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	4615      	mov	r5, r2
 8001bfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c02:	1911      	adds	r1, r2, r4
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	416b      	adcs	r3, r5
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c0e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001c12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	f04f 0400 	mov.w	r4, #0
 8001c1e:	f04f 0500 	mov.w	r5, #0
 8001c22:	015d      	lsls	r5, r3, #5
 8001c24:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c28:	0154      	lsls	r4, r2, #5
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	ebb2 0800 	subs.w	r8, r2, r0
 8001c32:	eb63 0901 	sbc.w	r9, r3, r1
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c42:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c46:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	eb18 0a00 	adds.w	sl, r8, r0
 8001c52:	eb49 0b01 	adc.w	fp, r9, r1
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c62:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c66:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c6a:	ebb2 040a 	subs.w	r4, r2, sl
 8001c6e:	603c      	str	r4, [r7, #0]
 8001c70:	eb63 030b 	sbc.w	r3, r3, fp
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4623      	mov	r3, r4
 8001c7c:	181b      	adds	r3, r3, r0
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	462b      	mov	r3, r5
 8001c82:	eb41 0303 	adc.w	r3, r1, r3
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c8e:	f7ff ff3f 	bl	8001b10 <UTILS_NanosecondsToTimespec>

    return 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	3738      	adds	r7, #56	@ 0x38
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_MspInit+0x48>)
 8001ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce8 <HAL_MspInit+0x48>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <HAL_MspInit+0x48>)
 8001cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f06f 0001 	mvn.w	r0, #1
 8001ccc:	f000 fce6 	bl	800269c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	207d      	movs	r0, #125	@ 0x7d
 8001cd6:	f000 fce1 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001cda:	207d      	movs	r0, #125	@ 0x7d
 8001cdc:	f000 fcf8 	bl	80026d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	58024400 	.word	0x58024400

08001cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	@ 0x38
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	d844      	bhi.n	8001d84 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	2019      	movs	r0, #25
 8001d00:	f000 fccc 	bl	800269c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d04:	2019      	movs	r0, #25
 8001d06:	f000 fce3 	bl	80026d0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001d0a:	4a24      	ldr	r2, [pc, #144]	@ (8001d9c <HAL_InitTick+0xb0>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d10:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <HAL_InitTick+0xb4>)
 8001d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d16:	4a22      	ldr	r2, [pc, #136]	@ (8001da0 <HAL_InitTick+0xb4>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <HAL_InitTick+0xb4>)
 8001d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2e:	f107 020c 	add.w	r2, r7, #12
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fba7 	bl	800748c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d3e:	f005 fb8f 	bl	8007460 <HAL_RCC_GetPCLK2Freq>
 8001d42:	4603      	mov	r3, r0
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4a:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <HAL_InitTick+0xb8>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9b      	lsrs	r3, r3, #18
 8001d52:	3b01      	subs	r3, #1
 8001d54:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d56:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <HAL_InitTick+0xc0>)
 8001d5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d64:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d76:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d78:	f007 f9f6 	bl	8009168 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_InitTick+0xa6>
 8001d82:	e001      	b.n	8001d88 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e005      	b.n	8001d94 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d88:	4807      	ldr	r0, [pc, #28]	@ (8001da8 <HAL_InitTick+0xbc>)
 8001d8a:	f007 fa4f 	bl	800922c <HAL_TIM_Base_Start_IT>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3738      	adds	r7, #56	@ 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2400000c 	.word	0x2400000c
 8001da0:	58024400 	.word	0x58024400
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	24009e58 	.word	0x24009e58
 8001dac:	40010000 	.word	0x40010000

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <NMI_Handler+0x4>

08001db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <DMA1_Stream0_IRQHandler+0x10>)
 8001dee:	f001 ffa7 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24009f40 	.word	0x24009f40

08001dfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <DMA1_Stream1_IRQHandler+0x10>)
 8001e02:	f001 ff9d 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24009fb8 	.word	0x24009fb8

08001e10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <TIM1_UP_IRQHandler+0x10>)
 8001e16:	f007 fa81 	bl	800931c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	24009e58 	.word	0x24009e58

08001e24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <USART3_IRQHandler+0x10>)
 8001e2a:	f007 fe1d 	bl	8009a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	24009eac 	.word	0x24009eac

08001e38 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e3c:	f004 f8c2 	bl	8005fc4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5e:	f01b f89f 	bl	801cfa0 <__errno>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2216      	movs	r2, #22
 8001e66:	601a      	str	r2, [r3, #0]
  return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <_exit+0x12>

08001e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e00a      	b.n	8001eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf0      	blt.n	8001e9c <_read+0x12>
  }

  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e009      	b.n	8001eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbf1      	blt.n	8001ed6 <_write+0x12>
  }
  return len;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_close>:

int _close(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f24:	605a      	str	r2, [r3, #4]
  return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_isatty>:

int _isatty(int file)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f01b f804 	bl	801cfa0 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	24080000 	.word	0x24080000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	24009ea8 	.word	0x24009ea8
 8001fcc:	24013ac0 	.word	0x24013ac0

08001fd0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fd4:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001fd6:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <MX_USART3_UART_Init+0x94>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001fda:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001fdc:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <MX_USART3_UART_Init+0x98>)
 8001fde:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fec:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001ff4:	220c      	movs	r2, #12
 8001ff6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002004:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002016:	4812      	ldr	r0, [pc, #72]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 8002018:	f007 fb74 	bl	8009704 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002022:	f7ff fcd1 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002026:	2100      	movs	r1, #0
 8002028:	480d      	ldr	r0, [pc, #52]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 800202a:	f009 fb69 	bl	800b700 <HAL_UARTEx_SetTxFifoThreshold>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002034:	f7ff fcc8 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	4809      	ldr	r0, [pc, #36]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 800203c:	f009 fb9e 	bl	800b77c <HAL_UARTEx_SetRxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002046:	f7ff fcbf 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <MX_USART3_UART_Init+0x90>)
 800204c:	f009 fb1f 	bl	800b68e <HAL_UARTEx_DisableFifoMode>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002056:	f7ff fcb7 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	24009eac 	.word	0x24009eac
 8002064:	40004800 	.word	0x40004800
 8002068:	001e8480 	.word	0x001e8480

0800206c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0ba      	sub	sp, #232	@ 0xe8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	22c0      	movs	r2, #192	@ 0xc0
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f01a fef3 	bl	801ce78 <memset>
  if(uartHandle->Instance==USART3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5a      	ldr	r2, [pc, #360]	@ (8002200 <HAL_UART_MspInit+0x194>)
 8002098:	4293      	cmp	r3, r2
 800209a:	f040 80ad 	bne.w	80021f8 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800209e:	f04f 0202 	mov.w	r2, #2
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 fa2b 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80020c0:	f7ff fc82 	bl	80019c8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002204 <HAL_UART_MspInit+0x198>)
 80020c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <HAL_UART_MspInit+0x198>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002204 <HAL_UART_MspInit+0x198>)
 80020d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b48      	ldr	r3, [pc, #288]	@ (8002204 <HAL_UART_MspInit+0x198>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	4a46      	ldr	r2, [pc, #280]	@ (8002204 <HAL_UART_MspInit+0x198>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f2:	4b44      	ldr	r3, [pc, #272]	@ (8002204 <HAL_UART_MspInit+0x198>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002100:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211a:	2307      	movs	r3, #7
 800211c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002120:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002124:	4619      	mov	r1, r3
 8002126:	4838      	ldr	r0, [pc, #224]	@ (8002208 <HAL_UART_MspInit+0x19c>)
 8002128:	f003 fd5c 	bl	8005be4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800212c:	4b37      	ldr	r3, [pc, #220]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 800212e:	4a38      	ldr	r2, [pc, #224]	@ (8002210 <HAL_UART_MspInit+0x1a4>)
 8002130:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002132:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002134:	222d      	movs	r2, #45	@ 0x2d
 8002136:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002138:	4b34      	ldr	r3, [pc, #208]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213e:	4b33      	ldr	r3, [pc, #204]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002144:	4b31      	ldr	r3, [pc, #196]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800214a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214c:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002152:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 800215a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800215e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002160:	4b2a      	ldr	r3, [pc, #168]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002162:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002166:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002168:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800216e:	4827      	ldr	r0, [pc, #156]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002170:	f000 fabc 	bl	80026ec <HAL_DMA_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800217a:	f7ff fc25 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002186:	4a21      	ldr	r2, [pc, #132]	@ (800220c <HAL_UART_MspInit+0x1a0>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800218c:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 800218e:	4a22      	ldr	r2, [pc, #136]	@ (8002218 <HAL_UART_MspInit+0x1ac>)
 8002190:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 8002194:	222e      	movs	r2, #46	@ 0x2e
 8002196:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002198:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 800219a:	2240      	movs	r2, #64	@ 0x40
 800219c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80021b8:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021c4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021cc:	4811      	ldr	r0, [pc, #68]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021ce:	f000 fa8d 	bl	80026ec <HAL_DMA_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80021d8:	f7ff fbf6 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021e0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <HAL_UART_MspInit+0x1a8>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2105      	movs	r1, #5
 80021ec:	2027      	movs	r0, #39	@ 0x27
 80021ee:	f000 fa55 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021f2:	2027      	movs	r0, #39	@ 0x27
 80021f4:	f000 fa6c 	bl	80026d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021f8:	bf00      	nop
 80021fa:	37e8      	adds	r7, #232	@ 0xe8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40004800 	.word	0x40004800
 8002204:	58024400 	.word	0x58024400
 8002208:	58020c00 	.word	0x58020c00
 800220c:	24009f40 	.word	0x24009f40
 8002210:	40020010 	.word	0x40020010
 8002214:	24009fb8 	.word	0x24009fb8
 8002218:	40020028 	.word	0x40020028

0800221c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002220:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002224:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002228:	2209      	movs	r2, #9
 800222a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800222e:	2202      	movs	r2, #2
 8002230:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002234:	2200      	movs	r2, #0
 8002236:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002238:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800223a:	2202      	movs	r2, #2
 800223c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002240:	2201      	movs	r2, #1
 8002242:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002246:	2200      	movs	r2, #0
 8002248:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800224c:	2200      	movs	r2, #0
 800224e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002250:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002252:	2201      	movs	r2, #1
 8002254:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002256:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002258:	2201      	movs	r2, #1
 800225a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800225e:	2200      	movs	r2, #0
 8002260:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	@ (8002278 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002264:	f003 ff27 	bl	80060b6 <HAL_PCD_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800226e:	f7ff fbab 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2400a030 	.word	0x2400a030
 800227c:	40080000 	.word	0x40080000

08002280 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0ba      	sub	sp, #232	@ 0xe8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	22c0      	movs	r2, #192	@ 0xc0
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f01a fde9 	bl	801ce78 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a38      	ldr	r2, [pc, #224]	@ (800238c <HAL_PCD_MspInit+0x10c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d168      	bne.n	8002382 <HAL_PCD_MspInit+0x102>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80022bc:	2301      	movs	r3, #1
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 80022c0:	2313      	movs	r3, #19
 80022c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80022c8:	2303      	movs	r3, #3
 80022ca:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80022cc:	2302      	movs	r3, #2
 80022ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80022d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80022da:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 f912 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 80022f2:	f7ff fb69 	bl	80019c8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80022f6:	f004 f869 	bl	80063cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_PCD_MspInit+0x110>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002300:	4a23      	ldr	r2, [pc, #140]	@ (8002390 <HAL_PCD_MspInit+0x110>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <HAL_PCD_MspInit+0x110>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002318:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800231c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002332:	230a      	movs	r3, #10
 8002334:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800233c:	4619      	mov	r1, r3
 800233e:	4815      	ldr	r0, [pc, #84]	@ (8002394 <HAL_PCD_MspInit+0x114>)
 8002340:	f003 fc50 	bl	8005be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	@ (8002394 <HAL_PCD_MspInit+0x114>)
 8002360:	f003 fc40 	bl	8005be4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002364:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_PCD_MspInit+0x110>)
 8002366:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800236a:	4a09      	ldr	r2, [pc, #36]	@ (8002390 <HAL_PCD_MspInit+0x110>)
 800236c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002370:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_PCD_MspInit+0x110>)
 8002376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800237a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	37e8      	adds	r7, #232	@ 0xe8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40080000 	.word	0x40080000
 8002390:	58024400 	.word	0x58024400
 8002394:	58020000 	.word	0x58020000

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800239c:	f7fe fa8e 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	@ (80023d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	@ (80023e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c6:	f01a fdf1 	bl	801cfac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7ff f86b 	bl	80014a4 <main>
  bx  lr
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023d8:	240006dc 	.word	0x240006dc
  ldr r2, =_sidata
 80023dc:	0801ee58 	.word	0x0801ee58
  ldr r2, =_sbss
 80023e0:	240007a0 	.word	0x240007a0
  ldr r4, =_ebss
 80023e4:	24013ac0 	.word	0x24013ac0

080023e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC3_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f2:	2003      	movs	r0, #3
 80023f4:	f000 f947 	bl	8002686 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f8:	f004 fe72 	bl	80070e0 <HAL_RCC_GetSysClockFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_Init+0x68>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	4913      	ldr	r1, [pc, #76]	@ (8002458 <HAL_Init+0x6c>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_Init+0x68>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <HAL_Init+0x6c>)
 8002420:	5cd3      	ldrb	r3, [r2, r3]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_Init+0x70>)
 800242e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002430:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <HAL_Init+0x74>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002436:	200f      	movs	r0, #15
 8002438:	f7ff fc58 	bl	8001cec <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e002      	b.n	800244c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002446:	f7ff fc2b 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58024400 	.word	0x58024400
 8002458:	0801dd58 	.word	0x0801dd58
 800245c:	24000004 	.word	0x24000004
 8002460:	24000000 	.word	0x24000000

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	24000010 	.word	0x24000010
 8002488:	2400a514 	.word	0x2400a514

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	2400a514 	.word	0x2400a514

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	24000010 	.word	0x24000010

080024ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <HAL_GetREVID+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0c1b      	lsrs	r3, r3, #16
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	5c001000 	.word	0x5c001000

08002504 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002514:	4904      	ldr	r1, [pc, #16]	@ (8002528 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	58000400 	.word	0x58000400

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <__NVIC_SetPriorityGrouping+0x40>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	4313      	orrs	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x40>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00
 8002570:	05fa0000 	.word	0x05fa0000

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	@ (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	@ (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	@ (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	@ 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff4c 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026aa:	f7ff ff63 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	6978      	ldr	r0, [r7, #20]
 80026b6:	f7ff ffb3 	bl	8002620 <NVIC_EncodePriority>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff82 	bl	80025cc <__NVIC_SetPriority>
}
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff56 	bl	8002590 <__NVIC_EnableIRQ>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff feca 	bl	800248c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e316      	b.n	8002d32 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a66      	ldr	r2, [pc, #408]	@ (80028a4 <HAL_DMA_Init+0x1b8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d04a      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a65      	ldr	r2, [pc, #404]	@ (80028a8 <HAL_DMA_Init+0x1bc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d045      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <HAL_DMA_Init+0x1c0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d040      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a62      	ldr	r2, [pc, #392]	@ (80028b0 <HAL_DMA_Init+0x1c4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d03b      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a60      	ldr	r2, [pc, #384]	@ (80028b4 <HAL_DMA_Init+0x1c8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d036      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5f      	ldr	r2, [pc, #380]	@ (80028b8 <HAL_DMA_Init+0x1cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d031      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5d      	ldr	r2, [pc, #372]	@ (80028bc <HAL_DMA_Init+0x1d0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02c      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a5c      	ldr	r2, [pc, #368]	@ (80028c0 <HAL_DMA_Init+0x1d4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d027      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5a      	ldr	r2, [pc, #360]	@ (80028c4 <HAL_DMA_Init+0x1d8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d022      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a59      	ldr	r2, [pc, #356]	@ (80028c8 <HAL_DMA_Init+0x1dc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d01d      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a57      	ldr	r2, [pc, #348]	@ (80028cc <HAL_DMA_Init+0x1e0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <HAL_DMA_Init+0x1e4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a54      	ldr	r2, [pc, #336]	@ (80028d4 <HAL_DMA_Init+0x1e8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00e      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a53      	ldr	r2, [pc, #332]	@ (80028d8 <HAL_DMA_Init+0x1ec>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a51      	ldr	r2, [pc, #324]	@ (80028dc <HAL_DMA_Init+0x1f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a50      	ldr	r2, [pc, #320]	@ (80028e0 <HAL_DMA_Init+0x1f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Init+0xbc>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_DMA_Init+0xbe>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 813b 	beq.w	8002a26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a37      	ldr	r2, [pc, #220]	@ (80028a4 <HAL_DMA_Init+0x1b8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a36      	ldr	r2, [pc, #216]	@ (80028a8 <HAL_DMA_Init+0x1bc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a34      	ldr	r2, [pc, #208]	@ (80028ac <HAL_DMA_Init+0x1c0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a33      	ldr	r2, [pc, #204]	@ (80028b0 <HAL_DMA_Init+0x1c4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a31      	ldr	r2, [pc, #196]	@ (80028b4 <HAL_DMA_Init+0x1c8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a30      	ldr	r2, [pc, #192]	@ (80028b8 <HAL_DMA_Init+0x1cc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Init+0x174>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2e      	ldr	r2, [pc, #184]	@ (80028bc <HAL_DMA_Init+0x1d0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2d      	ldr	r2, [pc, #180]	@ (80028c0 <HAL_DMA_Init+0x1d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2b      	ldr	r2, [pc, #172]	@ (80028c4 <HAL_DMA_Init+0x1d8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_DMA_Init+0x1dc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_DMA_Init+0x1e0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_DMA_Init+0x1e4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a25      	ldr	r2, [pc, #148]	@ (80028d4 <HAL_DMA_Init+0x1e8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <HAL_DMA_Init+0x1ec>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a22      	ldr	r2, [pc, #136]	@ (80028dc <HAL_DMA_Init+0x1f0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <HAL_DMA_Init+0x1f4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <HAL_DMA_Init+0x186>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e007      	b.n	8002882 <HAL_DMA_Init+0x196>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002882:	e02f      	b.n	80028e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002884:	f7ff fe02 	bl	800248c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d928      	bls.n	80028e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e246      	b.n	8002d32 <HAL_DMA_Init+0x646>
 80028a4:	40020010 	.word	0x40020010
 80028a8:	40020028 	.word	0x40020028
 80028ac:	40020040 	.word	0x40020040
 80028b0:	40020058 	.word	0x40020058
 80028b4:	40020070 	.word	0x40020070
 80028b8:	40020088 	.word	0x40020088
 80028bc:	400200a0 	.word	0x400200a0
 80028c0:	400200b8 	.word	0x400200b8
 80028c4:	40020410 	.word	0x40020410
 80028c8:	40020428 	.word	0x40020428
 80028cc:	40020440 	.word	0x40020440
 80028d0:	40020458 	.word	0x40020458
 80028d4:	40020470 	.word	0x40020470
 80028d8:	40020488 	.word	0x40020488
 80028dc:	400204a0 	.word	0x400204a0
 80028e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1c8      	bne.n	8002884 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4b83      	ldr	r3, [pc, #524]	@ (8002b0c <HAL_DMA_Init+0x420>)
 80028fe:	4013      	ands	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800290a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002948:	4b71      	ldr	r3, [pc, #452]	@ (8002b10 <HAL_DMA_Init+0x424>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b71      	ldr	r3, [pc, #452]	@ (8002b14 <HAL_DMA_Init+0x428>)
 800294e:	4013      	ands	r3, r2
 8002950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002954:	d328      	bcc.n	80029a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b28      	cmp	r3, #40	@ 0x28
 800295c:	d903      	bls.n	8002966 <HAL_DMA_Init+0x27a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b2e      	cmp	r3, #46	@ 0x2e
 8002964:	d917      	bls.n	8002996 <HAL_DMA_Init+0x2aa>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b3e      	cmp	r3, #62	@ 0x3e
 800296c:	d903      	bls.n	8002976 <HAL_DMA_Init+0x28a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b42      	cmp	r3, #66	@ 0x42
 8002974:	d90f      	bls.n	8002996 <HAL_DMA_Init+0x2aa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b46      	cmp	r3, #70	@ 0x46
 800297c:	d903      	bls.n	8002986 <HAL_DMA_Init+0x29a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b48      	cmp	r3, #72	@ 0x48
 8002984:	d907      	bls.n	8002996 <HAL_DMA_Init+0x2aa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b4e      	cmp	r3, #78	@ 0x4e
 800298c:	d905      	bls.n	800299a <HAL_DMA_Init+0x2ae>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b52      	cmp	r3, #82	@ 0x52
 8002994:	d801      	bhi.n	800299a <HAL_DMA_Init+0x2ae>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_DMA_Init+0x2b0>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0307 	bic.w	r3, r3, #7
 80029be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d117      	bne.n	8002a02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f002 fb3f 	bl	8005068 <DMA_CheckFifoParam>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e197      	b.n	8002d32 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f002 fa7a 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 8002a10:	4603      	mov	r3, r0
 8002a12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	223f      	movs	r2, #63	@ 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e0cd      	b.n	8002bc2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_DMA_Init+0x42c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a39      	ldr	r2, [pc, #228]	@ (8002b1c <HAL_DMA_Init+0x430>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01d      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a38      	ldr	r2, [pc, #224]	@ (8002b20 <HAL_DMA_Init+0x434>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a36      	ldr	r2, [pc, #216]	@ (8002b24 <HAL_DMA_Init+0x438>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a35      	ldr	r2, [pc, #212]	@ (8002b28 <HAL_DMA_Init+0x43c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00e      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	@ (8002b2c <HAL_DMA_Init+0x440>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d009      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a32      	ldr	r2, [pc, #200]	@ (8002b30 <HAL_DMA_Init+0x444>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_DMA_Init+0x38a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <HAL_DMA_Init+0x448>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_Init+0x38e>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Init+0x390>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8097 	beq.w	8002bb0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a24      	ldr	r2, [pc, #144]	@ (8002b18 <HAL_DMA_Init+0x42c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d021      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a22      	ldr	r2, [pc, #136]	@ (8002b1c <HAL_DMA_Init+0x430>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01c      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <HAL_DMA_Init+0x434>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d017      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <HAL_DMA_Init+0x438>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d012      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <HAL_DMA_Init+0x43c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <HAL_DMA_Init+0x440>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d008      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b30 <HAL_DMA_Init+0x444>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <HAL_DMA_Init+0x3e4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <HAL_DMA_Init+0x448>)
 8002ace:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_DMA_Init+0x44c>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b40      	cmp	r3, #64	@ 0x40
 8002af6:	d021      	beq.n	8002b3c <HAL_DMA_Init+0x450>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b80      	cmp	r3, #128	@ 0x80
 8002afe:	d102      	bne.n	8002b06 <HAL_DMA_Init+0x41a>
 8002b00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b04:	e01b      	b.n	8002b3e <HAL_DMA_Init+0x452>
 8002b06:	2300      	movs	r3, #0
 8002b08:	e019      	b.n	8002b3e <HAL_DMA_Init+0x452>
 8002b0a:	bf00      	nop
 8002b0c:	fe10803f 	.word	0xfe10803f
 8002b10:	5c001000 	.word	0x5c001000
 8002b14:	ffff0000 	.word	0xffff0000
 8002b18:	58025408 	.word	0x58025408
 8002b1c:	5802541c 	.word	0x5802541c
 8002b20:	58025430 	.word	0x58025430
 8002b24:	58025444 	.word	0x58025444
 8002b28:	58025458 	.word	0x58025458
 8002b2c:	5802546c 	.word	0x5802546c
 8002b30:	58025480 	.word	0x58025480
 8002b34:	58025494 	.word	0x58025494
 8002b38:	fffe000f 	.word	0xfffe000f
 8002b3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <HAL_DMA_Init+0x650>)
 8002b84:	4413      	add	r3, r2
 8002b86:	4a6e      	ldr	r2, [pc, #440]	@ (8002d40 <HAL_DMA_Init+0x654>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f002 f9b5 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e008      	b.n	8002bc2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2240      	movs	r2, #64	@ 0x40
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0b7      	b.n	8002d32 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d44 <HAL_DMA_Init+0x658>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d072      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d48 <HAL_DMA_Init+0x65c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d06d      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5c      	ldr	r2, [pc, #368]	@ (8002d4c <HAL_DMA_Init+0x660>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d068      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d50 <HAL_DMA_Init+0x664>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d063      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a59      	ldr	r2, [pc, #356]	@ (8002d54 <HAL_DMA_Init+0x668>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d05e      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a57      	ldr	r2, [pc, #348]	@ (8002d58 <HAL_DMA_Init+0x66c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d059      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a56      	ldr	r2, [pc, #344]	@ (8002d5c <HAL_DMA_Init+0x670>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d054      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	@ (8002d60 <HAL_DMA_Init+0x674>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d04f      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a53      	ldr	r2, [pc, #332]	@ (8002d64 <HAL_DMA_Init+0x678>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a51      	ldr	r2, [pc, #324]	@ (8002d68 <HAL_DMA_Init+0x67c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a50      	ldr	r2, [pc, #320]	@ (8002d6c <HAL_DMA_Init+0x680>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a4e      	ldr	r2, [pc, #312]	@ (8002d70 <HAL_DMA_Init+0x684>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d74 <HAL_DMA_Init+0x688>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	@ (8002d78 <HAL_DMA_Init+0x68c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4a      	ldr	r2, [pc, #296]	@ (8002d7c <HAL_DMA_Init+0x690>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a48      	ldr	r2, [pc, #288]	@ (8002d80 <HAL_DMA_Init+0x694>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a47      	ldr	r2, [pc, #284]	@ (8002d84 <HAL_DMA_Init+0x698>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a45      	ldr	r2, [pc, #276]	@ (8002d88 <HAL_DMA_Init+0x69c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a44      	ldr	r2, [pc, #272]	@ (8002d8c <HAL_DMA_Init+0x6a0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a42      	ldr	r2, [pc, #264]	@ (8002d90 <HAL_DMA_Init+0x6a4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a41      	ldr	r2, [pc, #260]	@ (8002d94 <HAL_DMA_Init+0x6a8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3f      	ldr	r2, [pc, #252]	@ (8002d98 <HAL_DMA_Init+0x6ac>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8002d9c <HAL_DMA_Init+0x6b0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3c      	ldr	r2, [pc, #240]	@ (8002da0 <HAL_DMA_Init+0x6b4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_DMA_Init+0x5ca>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_Init+0x5cc>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d032      	beq.n	8002d22 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f002 fa4f 	bl	8005160 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d102      	bne.n	8002cd0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_DMA_Init+0x624>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d80c      	bhi.n	8002d10 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f002 facc 	bl	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	e008      	b.n	8002d22 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	a7fdabf8 	.word	0xa7fdabf8
 8002d40:	cccccccd 	.word	0xcccccccd
 8002d44:	40020010 	.word	0x40020010
 8002d48:	40020028 	.word	0x40020028
 8002d4c:	40020040 	.word	0x40020040
 8002d50:	40020058 	.word	0x40020058
 8002d54:	40020070 	.word	0x40020070
 8002d58:	40020088 	.word	0x40020088
 8002d5c:	400200a0 	.word	0x400200a0
 8002d60:	400200b8 	.word	0x400200b8
 8002d64:	40020410 	.word	0x40020410
 8002d68:	40020428 	.word	0x40020428
 8002d6c:	40020440 	.word	0x40020440
 8002d70:	40020458 	.word	0x40020458
 8002d74:	40020470 	.word	0x40020470
 8002d78:	40020488 	.word	0x40020488
 8002d7c:	400204a0 	.word	0x400204a0
 8002d80:	400204b8 	.word	0x400204b8
 8002d84:	58025408 	.word	0x58025408
 8002d88:	5802541c 	.word	0x5802541c
 8002d8c:	58025430 	.word	0x58025430
 8002d90:	58025444 	.word	0x58025444
 8002d94:	58025458 	.word	0x58025458
 8002d98:	5802546c 	.word	0x5802546c
 8002d9c:	58025480 	.word	0x58025480
 8002da0:	58025494 	.word	0x58025494

08002da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e226      	b.n	800320e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA_Start_IT+0x2a>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e21f      	b.n	800320e <HAL_DMA_Start_IT+0x46a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 820a 	bne.w	80031f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a68      	ldr	r2, [pc, #416]	@ (8002f98 <HAL_DMA_Start_IT+0x1f4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d04a      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a66      	ldr	r2, [pc, #408]	@ (8002f9c <HAL_DMA_Start_IT+0x1f8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d045      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_DMA_Start_IT+0x1fc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d040      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a63      	ldr	r2, [pc, #396]	@ (8002fa4 <HAL_DMA_Start_IT+0x200>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d03b      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a62      	ldr	r2, [pc, #392]	@ (8002fa8 <HAL_DMA_Start_IT+0x204>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d036      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a60      	ldr	r2, [pc, #384]	@ (8002fac <HAL_DMA_Start_IT+0x208>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb0 <HAL_DMA_Start_IT+0x20c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02c      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb4 <HAL_DMA_Start_IT+0x210>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d027      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_DMA_Start_IT+0x214>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5a      	ldr	r2, [pc, #360]	@ (8002fbc <HAL_DMA_Start_IT+0x218>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01d      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a59      	ldr	r2, [pc, #356]	@ (8002fc0 <HAL_DMA_Start_IT+0x21c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a57      	ldr	r2, [pc, #348]	@ (8002fc4 <HAL_DMA_Start_IT+0x220>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	@ (8002fc8 <HAL_DMA_Start_IT+0x224>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a54      	ldr	r2, [pc, #336]	@ (8002fcc <HAL_DMA_Start_IT+0x228>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a53      	ldr	r2, [pc, #332]	@ (8002fd0 <HAL_DMA_Start_IT+0x22c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_DMA_Start_IT+0xee>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	@ (8002fd4 <HAL_DMA_Start_IT+0x230>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_Start_IT+0x100>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e007      	b.n	8002eb4 <HAL_DMA_Start_IT+0x110>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f001 fe76 	bl	8004bac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_DMA_Start_IT+0x1f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d04a      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a33      	ldr	r2, [pc, #204]	@ (8002f9c <HAL_DMA_Start_IT+0x1f8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d045      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a31      	ldr	r2, [pc, #196]	@ (8002fa0 <HAL_DMA_Start_IT+0x1fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d040      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a30      	ldr	r2, [pc, #192]	@ (8002fa4 <HAL_DMA_Start_IT+0x200>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d03b      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa8 <HAL_DMA_Start_IT+0x204>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d036      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <HAL_DMA_Start_IT+0x208>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d031      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb0 <HAL_DMA_Start_IT+0x20c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02c      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb4 <HAL_DMA_Start_IT+0x210>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <HAL_DMA_Start_IT+0x214>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <HAL_DMA_Start_IT+0x218>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a25      	ldr	r2, [pc, #148]	@ (8002fc0 <HAL_DMA_Start_IT+0x21c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a24      	ldr	r2, [pc, #144]	@ (8002fc4 <HAL_DMA_Start_IT+0x220>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	@ (8002fc8 <HAL_DMA_Start_IT+0x224>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <HAL_DMA_Start_IT+0x228>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd0 <HAL_DMA_Start_IT+0x22c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_Start_IT+0x1bc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd4 <HAL_DMA_Start_IT+0x230>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Start_IT+0x1c0>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_Start_IT+0x1c2>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d036      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 021e 	bic.w	r2, r3, #30
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0216 	orr.w	r2, r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d03e      	beq.n	8003004 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0208 	orr.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e035      	b.n	8003004 <HAL_DMA_Start_IT+0x260>
 8002f98:	40020010 	.word	0x40020010
 8002f9c:	40020028 	.word	0x40020028
 8002fa0:	40020040 	.word	0x40020040
 8002fa4:	40020058 	.word	0x40020058
 8002fa8:	40020070 	.word	0x40020070
 8002fac:	40020088 	.word	0x40020088
 8002fb0:	400200a0 	.word	0x400200a0
 8002fb4:	400200b8 	.word	0x400200b8
 8002fb8:	40020410 	.word	0x40020410
 8002fbc:	40020428 	.word	0x40020428
 8002fc0:	40020440 	.word	0x40020440
 8002fc4:	40020458 	.word	0x40020458
 8002fc8:	40020470 	.word	0x40020470
 8002fcc:	40020488 	.word	0x40020488
 8002fd0:	400204a0 	.word	0x400204a0
 8002fd4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 020e 	bic.w	r2, r3, #14
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 020a 	orr.w	r2, r2, #10
 8002fea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0204 	orr.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a83      	ldr	r2, [pc, #524]	@ (8003218 <HAL_DMA_Start_IT+0x474>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d072      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a82      	ldr	r2, [pc, #520]	@ (800321c <HAL_DMA_Start_IT+0x478>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d06d      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a80      	ldr	r2, [pc, #512]	@ (8003220 <HAL_DMA_Start_IT+0x47c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d068      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7f      	ldr	r2, [pc, #508]	@ (8003224 <HAL_DMA_Start_IT+0x480>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d063      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7d      	ldr	r2, [pc, #500]	@ (8003228 <HAL_DMA_Start_IT+0x484>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d05e      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7c      	ldr	r2, [pc, #496]	@ (800322c <HAL_DMA_Start_IT+0x488>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d059      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a7a      	ldr	r2, [pc, #488]	@ (8003230 <HAL_DMA_Start_IT+0x48c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d054      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a79      	ldr	r2, [pc, #484]	@ (8003234 <HAL_DMA_Start_IT+0x490>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04f      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a77      	ldr	r2, [pc, #476]	@ (8003238 <HAL_DMA_Start_IT+0x494>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d04a      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a76      	ldr	r2, [pc, #472]	@ (800323c <HAL_DMA_Start_IT+0x498>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d045      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a74      	ldr	r2, [pc, #464]	@ (8003240 <HAL_DMA_Start_IT+0x49c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d040      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a73      	ldr	r2, [pc, #460]	@ (8003244 <HAL_DMA_Start_IT+0x4a0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d03b      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a71      	ldr	r2, [pc, #452]	@ (8003248 <HAL_DMA_Start_IT+0x4a4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d036      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a70      	ldr	r2, [pc, #448]	@ (800324c <HAL_DMA_Start_IT+0x4a8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d031      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6e      	ldr	r2, [pc, #440]	@ (8003250 <HAL_DMA_Start_IT+0x4ac>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02c      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6d      	ldr	r2, [pc, #436]	@ (8003254 <HAL_DMA_Start_IT+0x4b0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d027      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003258 <HAL_DMA_Start_IT+0x4b4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d022      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6a      	ldr	r2, [pc, #424]	@ (800325c <HAL_DMA_Start_IT+0x4b8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d01d      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a68      	ldr	r2, [pc, #416]	@ (8003260 <HAL_DMA_Start_IT+0x4bc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d018      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a67      	ldr	r2, [pc, #412]	@ (8003264 <HAL_DMA_Start_IT+0x4c0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a65      	ldr	r2, [pc, #404]	@ (8003268 <HAL_DMA_Start_IT+0x4c4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a64      	ldr	r2, [pc, #400]	@ (800326c <HAL_DMA_Start_IT+0x4c8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a62      	ldr	r2, [pc, #392]	@ (8003270 <HAL_DMA_Start_IT+0x4cc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_DMA_Start_IT+0x350>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a61      	ldr	r2, [pc, #388]	@ (8003274 <HAL_DMA_Start_IT+0x4d0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Start_IT+0x354>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_DMA_Start_IT+0x356>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01a      	beq.n	8003134 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003132:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a37      	ldr	r2, [pc, #220]	@ (8003218 <HAL_DMA_Start_IT+0x474>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a36      	ldr	r2, [pc, #216]	@ (800321c <HAL_DMA_Start_IT+0x478>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a34      	ldr	r2, [pc, #208]	@ (8003220 <HAL_DMA_Start_IT+0x47c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a33      	ldr	r2, [pc, #204]	@ (8003224 <HAL_DMA_Start_IT+0x480>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a31      	ldr	r2, [pc, #196]	@ (8003228 <HAL_DMA_Start_IT+0x484>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a30      	ldr	r2, [pc, #192]	@ (800322c <HAL_DMA_Start_IT+0x488>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <HAL_DMA_Start_IT+0x48c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2d      	ldr	r2, [pc, #180]	@ (8003234 <HAL_DMA_Start_IT+0x490>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <HAL_DMA_Start_IT+0x494>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2a      	ldr	r2, [pc, #168]	@ (800323c <HAL_DMA_Start_IT+0x498>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a28      	ldr	r2, [pc, #160]	@ (8003240 <HAL_DMA_Start_IT+0x49c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_DMA_Start_IT+0x4a0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a25      	ldr	r2, [pc, #148]	@ (8003248 <HAL_DMA_Start_IT+0x4a4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a24      	ldr	r2, [pc, #144]	@ (800324c <HAL_DMA_Start_IT+0x4a8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_DMA_Start_IT+0x4ac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Start_IT+0x430>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <HAL_DMA_Start_IT+0x4b0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <HAL_DMA_Start_IT+0x442>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e012      	b.n	800320c <HAL_DMA_Start_IT+0x468>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e009      	b.n	800320c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40020010 	.word	0x40020010
 800321c:	40020028 	.word	0x40020028
 8003220:	40020040 	.word	0x40020040
 8003224:	40020058 	.word	0x40020058
 8003228:	40020070 	.word	0x40020070
 800322c:	40020088 	.word	0x40020088
 8003230:	400200a0 	.word	0x400200a0
 8003234:	400200b8 	.word	0x400200b8
 8003238:	40020410 	.word	0x40020410
 800323c:	40020428 	.word	0x40020428
 8003240:	40020440 	.word	0x40020440
 8003244:	40020458 	.word	0x40020458
 8003248:	40020470 	.word	0x40020470
 800324c:	40020488 	.word	0x40020488
 8003250:	400204a0 	.word	0x400204a0
 8003254:	400204b8 	.word	0x400204b8
 8003258:	58025408 	.word	0x58025408
 800325c:	5802541c 	.word	0x5802541c
 8003260:	58025430 	.word	0x58025430
 8003264:	58025444 	.word	0x58025444
 8003268:	58025458 	.word	0x58025458
 800326c:	5802546c 	.word	0x5802546c
 8003270:	58025480 	.word	0x58025480
 8003274:	58025494 	.word	0x58025494

08003278 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff f904 	bl	800248c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e2dc      	b.n	800384a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d008      	beq.n	80032ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	@ 0x80
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e2cd      	b.n	800384a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a76      	ldr	r2, [pc, #472]	@ (800348c <HAL_DMA_Abort+0x214>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d04a      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a74      	ldr	r2, [pc, #464]	@ (8003490 <HAL_DMA_Abort+0x218>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d045      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a73      	ldr	r2, [pc, #460]	@ (8003494 <HAL_DMA_Abort+0x21c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d040      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a71      	ldr	r2, [pc, #452]	@ (8003498 <HAL_DMA_Abort+0x220>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d03b      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a70      	ldr	r2, [pc, #448]	@ (800349c <HAL_DMA_Abort+0x224>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d036      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_DMA_Abort+0x228>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d031      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6d      	ldr	r2, [pc, #436]	@ (80034a4 <HAL_DMA_Abort+0x22c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d02c      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6b      	ldr	r2, [pc, #428]	@ (80034a8 <HAL_DMA_Abort+0x230>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d027      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6a      	ldr	r2, [pc, #424]	@ (80034ac <HAL_DMA_Abort+0x234>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a68      	ldr	r2, [pc, #416]	@ (80034b0 <HAL_DMA_Abort+0x238>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01d      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a67      	ldr	r2, [pc, #412]	@ (80034b4 <HAL_DMA_Abort+0x23c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d018      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a65      	ldr	r2, [pc, #404]	@ (80034b8 <HAL_DMA_Abort+0x240>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a64      	ldr	r2, [pc, #400]	@ (80034bc <HAL_DMA_Abort+0x244>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a62      	ldr	r2, [pc, #392]	@ (80034c0 <HAL_DMA_Abort+0x248>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a61      	ldr	r2, [pc, #388]	@ (80034c4 <HAL_DMA_Abort+0x24c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_DMA_Abort+0xd6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5f      	ldr	r2, [pc, #380]	@ (80034c8 <HAL_DMA_Abort+0x250>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_DMA_Abort+0xda>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_DMA_Abort+0xdc>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 021e 	bic.w	r2, r2, #30
 8003366:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003376:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e00a      	b.n	8003396 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020e 	bic.w	r2, r2, #14
 800338e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3c      	ldr	r2, [pc, #240]	@ (800348c <HAL_DMA_Abort+0x214>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d072      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003490 <HAL_DMA_Abort+0x218>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d06d      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a39      	ldr	r2, [pc, #228]	@ (8003494 <HAL_DMA_Abort+0x21c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d068      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a37      	ldr	r2, [pc, #220]	@ (8003498 <HAL_DMA_Abort+0x220>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d063      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a36      	ldr	r2, [pc, #216]	@ (800349c <HAL_DMA_Abort+0x224>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d05e      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a34      	ldr	r2, [pc, #208]	@ (80034a0 <HAL_DMA_Abort+0x228>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d059      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a33      	ldr	r2, [pc, #204]	@ (80034a4 <HAL_DMA_Abort+0x22c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d054      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <HAL_DMA_Abort+0x230>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04f      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a30      	ldr	r2, [pc, #192]	@ (80034ac <HAL_DMA_Abort+0x234>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2e      	ldr	r2, [pc, #184]	@ (80034b0 <HAL_DMA_Abort+0x238>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2d      	ldr	r2, [pc, #180]	@ (80034b4 <HAL_DMA_Abort+0x23c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2b      	ldr	r2, [pc, #172]	@ (80034b8 <HAL_DMA_Abort+0x240>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2a      	ldr	r2, [pc, #168]	@ (80034bc <HAL_DMA_Abort+0x244>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a28      	ldr	r2, [pc, #160]	@ (80034c0 <HAL_DMA_Abort+0x248>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a27      	ldr	r2, [pc, #156]	@ (80034c4 <HAL_DMA_Abort+0x24c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	@ (80034c8 <HAL_DMA_Abort+0x250>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a24      	ldr	r2, [pc, #144]	@ (80034cc <HAL_DMA_Abort+0x254>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	@ (80034d0 <HAL_DMA_Abort+0x258>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_DMA_Abort+0x25c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	@ (80034d8 <HAL_DMA_Abort+0x260>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	@ (80034dc <HAL_DMA_Abort+0x264>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	@ (80034e0 <HAL_DMA_Abort+0x268>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	@ (80034e4 <HAL_DMA_Abort+0x26c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_Abort+0x20e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	@ (80034e8 <HAL_DMA_Abort+0x270>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d132      	bne.n	80034ec <HAL_DMA_Abort+0x274>
 8003486:	2301      	movs	r3, #1
 8003488:	e031      	b.n	80034ee <HAL_DMA_Abort+0x276>
 800348a:	bf00      	nop
 800348c:	40020010 	.word	0x40020010
 8003490:	40020028 	.word	0x40020028
 8003494:	40020040 	.word	0x40020040
 8003498:	40020058 	.word	0x40020058
 800349c:	40020070 	.word	0x40020070
 80034a0:	40020088 	.word	0x40020088
 80034a4:	400200a0 	.word	0x400200a0
 80034a8:	400200b8 	.word	0x400200b8
 80034ac:	40020410 	.word	0x40020410
 80034b0:	40020428 	.word	0x40020428
 80034b4:	40020440 	.word	0x40020440
 80034b8:	40020458 	.word	0x40020458
 80034bc:	40020470 	.word	0x40020470
 80034c0:	40020488 	.word	0x40020488
 80034c4:	400204a0 	.word	0x400204a0
 80034c8:	400204b8 	.word	0x400204b8
 80034cc:	58025408 	.word	0x58025408
 80034d0:	5802541c 	.word	0x5802541c
 80034d4:	58025430 	.word	0x58025430
 80034d8:	58025444 	.word	0x58025444
 80034dc:	58025458 	.word	0x58025458
 80034e0:	5802546c 	.word	0x5802546c
 80034e4:	58025480 	.word	0x58025480
 80034e8:	58025494 	.word	0x58025494
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003500:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6d      	ldr	r2, [pc, #436]	@ (80036bc <HAL_DMA_Abort+0x444>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04a      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6b      	ldr	r2, [pc, #428]	@ (80036c0 <HAL_DMA_Abort+0x448>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6a      	ldr	r2, [pc, #424]	@ (80036c4 <HAL_DMA_Abort+0x44c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d040      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a68      	ldr	r2, [pc, #416]	@ (80036c8 <HAL_DMA_Abort+0x450>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03b      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a67      	ldr	r2, [pc, #412]	@ (80036cc <HAL_DMA_Abort+0x454>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d036      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a65      	ldr	r2, [pc, #404]	@ (80036d0 <HAL_DMA_Abort+0x458>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a64      	ldr	r2, [pc, #400]	@ (80036d4 <HAL_DMA_Abort+0x45c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02c      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a62      	ldr	r2, [pc, #392]	@ (80036d8 <HAL_DMA_Abort+0x460>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d027      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a61      	ldr	r2, [pc, #388]	@ (80036dc <HAL_DMA_Abort+0x464>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5f      	ldr	r2, [pc, #380]	@ (80036e0 <HAL_DMA_Abort+0x468>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5e      	ldr	r2, [pc, #376]	@ (80036e4 <HAL_DMA_Abort+0x46c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5c      	ldr	r2, [pc, #368]	@ (80036e8 <HAL_DMA_Abort+0x470>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a5b      	ldr	r2, [pc, #364]	@ (80036ec <HAL_DMA_Abort+0x474>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a59      	ldr	r2, [pc, #356]	@ (80036f0 <HAL_DMA_Abort+0x478>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_DMA_Abort+0x47c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_Abort+0x32a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a56      	ldr	r2, [pc, #344]	@ (80036f8 <HAL_DMA_Abort+0x480>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <HAL_DMA_Abort+0x33c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e007      	b.n	80035c4 <HAL_DMA_Abort+0x34c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035c4:	e013      	b.n	80035ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c6:	f7fe ff61 	bl	800248c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d90c      	bls.n	80035ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e12d      	b.n	800384a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	@ (80036bc <HAL_DMA_Abort+0x444>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2d      	ldr	r2, [pc, #180]	@ (80036c0 <HAL_DMA_Abort+0x448>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <HAL_DMA_Abort+0x422>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2c      	ldr	r2, [pc, #176]	@ (80036c4 <HAL_DMA_Abort+0x44c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2a      	ldr	r2, [pc, #168]	@ (80036c8 <HAL_DMA_Abort+0x450>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a29      	ldr	r2, [pc, #164]	@ (80036cc <HAL_DMA_Abort+0x454>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <HAL_DMA_Abort+0x422>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <HAL_DMA_Abort+0x458>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <HAL_DMA_Abort+0x45c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <HAL_DMA_Abort+0x460>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <HAL_DMA_Abort+0x422>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_DMA_Abort+0x464>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <HAL_DMA_Abort+0x468>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_Abort+0x422>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a20      	ldr	r2, [pc, #128]	@ (80036e4 <HAL_DMA_Abort+0x46c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_DMA_Abort+0x470>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_DMA_Abort+0x474>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_Abort+0x422>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_DMA_Abort+0x478>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_DMA_Abort+0x47c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_Abort+0x422>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_DMA_Abort+0x480>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_DMA_Abort+0x426>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_DMA_Abort+0x428>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02b      	beq.n	80036fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	223f      	movs	r2, #63	@ 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e02a      	b.n	8003712 <HAL_DMA_Abort+0x49a>
 80036bc:	40020010 	.word	0x40020010
 80036c0:	40020028 	.word	0x40020028
 80036c4:	40020040 	.word	0x40020040
 80036c8:	40020058 	.word	0x40020058
 80036cc:	40020070 	.word	0x40020070
 80036d0:	40020088 	.word	0x40020088
 80036d4:	400200a0 	.word	0x400200a0
 80036d8:	400200b8 	.word	0x400200b8
 80036dc:	40020410 	.word	0x40020410
 80036e0:	40020428 	.word	0x40020428
 80036e4:	40020440 	.word	0x40020440
 80036e8:	40020458 	.word	0x40020458
 80036ec:	40020470 	.word	0x40020470
 80036f0:	40020488 	.word	0x40020488
 80036f4:	400204a0 	.word	0x400204a0
 80036f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2201      	movs	r2, #1
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4f      	ldr	r2, [pc, #316]	@ (8003854 <HAL_DMA_Abort+0x5dc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d072      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a4d      	ldr	r2, [pc, #308]	@ (8003858 <HAL_DMA_Abort+0x5e0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d06d      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4c      	ldr	r2, [pc, #304]	@ (800385c <HAL_DMA_Abort+0x5e4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d068      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a4a      	ldr	r2, [pc, #296]	@ (8003860 <HAL_DMA_Abort+0x5e8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d063      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a49      	ldr	r2, [pc, #292]	@ (8003864 <HAL_DMA_Abort+0x5ec>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d05e      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a47      	ldr	r2, [pc, #284]	@ (8003868 <HAL_DMA_Abort+0x5f0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d059      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a46      	ldr	r2, [pc, #280]	@ (800386c <HAL_DMA_Abort+0x5f4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d054      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a44      	ldr	r2, [pc, #272]	@ (8003870 <HAL_DMA_Abort+0x5f8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d04f      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a43      	ldr	r2, [pc, #268]	@ (8003874 <HAL_DMA_Abort+0x5fc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d04a      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a41      	ldr	r2, [pc, #260]	@ (8003878 <HAL_DMA_Abort+0x600>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d045      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a40      	ldr	r2, [pc, #256]	@ (800387c <HAL_DMA_Abort+0x604>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d040      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3e      	ldr	r2, [pc, #248]	@ (8003880 <HAL_DMA_Abort+0x608>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d03b      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3d      	ldr	r2, [pc, #244]	@ (8003884 <HAL_DMA_Abort+0x60c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d036      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a3b      	ldr	r2, [pc, #236]	@ (8003888 <HAL_DMA_Abort+0x610>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d031      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3a      	ldr	r2, [pc, #232]	@ (800388c <HAL_DMA_Abort+0x614>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d02c      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a38      	ldr	r2, [pc, #224]	@ (8003890 <HAL_DMA_Abort+0x618>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d027      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a37      	ldr	r2, [pc, #220]	@ (8003894 <HAL_DMA_Abort+0x61c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a35      	ldr	r2, [pc, #212]	@ (8003898 <HAL_DMA_Abort+0x620>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01d      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a34      	ldr	r2, [pc, #208]	@ (800389c <HAL_DMA_Abort+0x624>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <HAL_DMA_Abort+0x628>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a31      	ldr	r2, [pc, #196]	@ (80038a4 <HAL_DMA_Abort+0x62c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2f      	ldr	r2, [pc, #188]	@ (80038a8 <HAL_DMA_Abort+0x630>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2e      	ldr	r2, [pc, #184]	@ (80038ac <HAL_DMA_Abort+0x634>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_DMA_Abort+0x58a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <HAL_DMA_Abort+0x638>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Abort+0x58e>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_DMA_Abort+0x590>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003814:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800382c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003836:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8
 8003894:	58025408 	.word	0x58025408
 8003898:	5802541c 	.word	0x5802541c
 800389c:	58025430 	.word	0x58025430
 80038a0:	58025444 	.word	0x58025444
 80038a4:	58025458 	.word	0x58025458
 80038a8:	5802546c 	.word	0x5802546c
 80038ac:	58025480 	.word	0x58025480
 80038b0:	58025494 	.word	0x58025494

080038b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e237      	b.n	8003d36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2280      	movs	r2, #128	@ 0x80
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e22c      	b.n	8003d36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003a54 <HAL_DMA_Abort_IT+0x1a0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d04a      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003a58 <HAL_DMA_Abort_IT+0x1a4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d045      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a59      	ldr	r2, [pc, #356]	@ (8003a5c <HAL_DMA_Abort_IT+0x1a8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d040      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a58      	ldr	r2, [pc, #352]	@ (8003a60 <HAL_DMA_Abort_IT+0x1ac>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d03b      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a56      	ldr	r2, [pc, #344]	@ (8003a64 <HAL_DMA_Abort_IT+0x1b0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d036      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a55      	ldr	r2, [pc, #340]	@ (8003a68 <HAL_DMA_Abort_IT+0x1b4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d031      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a53      	ldr	r2, [pc, #332]	@ (8003a6c <HAL_DMA_Abort_IT+0x1b8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02c      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a52      	ldr	r2, [pc, #328]	@ (8003a70 <HAL_DMA_Abort_IT+0x1bc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d027      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a50      	ldr	r2, [pc, #320]	@ (8003a74 <HAL_DMA_Abort_IT+0x1c0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d022      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a4f      	ldr	r2, [pc, #316]	@ (8003a78 <HAL_DMA_Abort_IT+0x1c4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d01d      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a4d      	ldr	r2, [pc, #308]	@ (8003a7c <HAL_DMA_Abort_IT+0x1c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d018      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a80 <HAL_DMA_Abort_IT+0x1cc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a4a      	ldr	r2, [pc, #296]	@ (8003a84 <HAL_DMA_Abort_IT+0x1d0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00e      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a49      	ldr	r2, [pc, #292]	@ (8003a88 <HAL_DMA_Abort_IT+0x1d4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d009      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a47      	ldr	r2, [pc, #284]	@ (8003a8c <HAL_DMA_Abort_IT+0x1d8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_DMA_Abort_IT+0xc8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a46      	ldr	r2, [pc, #280]	@ (8003a90 <HAL_DMA_Abort_IT+0x1dc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Abort_IT+0xcc>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_DMA_Abort_IT+0xce>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8086 	beq.w	8003a94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2204      	movs	r2, #4
 800398c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <HAL_DMA_Abort_IT+0x1a0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d04a      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a58 <HAL_DMA_Abort_IT+0x1a4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d045      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a5c <HAL_DMA_Abort_IT+0x1a8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d040      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <HAL_DMA_Abort_IT+0x1ac>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d03b      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a29      	ldr	r2, [pc, #164]	@ (8003a64 <HAL_DMA_Abort_IT+0x1b0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d036      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <HAL_DMA_Abort_IT+0x1b4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d031      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <HAL_DMA_Abort_IT+0x1b8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02c      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <HAL_DMA_Abort_IT+0x1bc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d027      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a23      	ldr	r2, [pc, #140]	@ (8003a74 <HAL_DMA_Abort_IT+0x1c0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d022      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a22      	ldr	r2, [pc, #136]	@ (8003a78 <HAL_DMA_Abort_IT+0x1c4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01d      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a20      	ldr	r2, [pc, #128]	@ (8003a7c <HAL_DMA_Abort_IT+0x1c8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d018      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <HAL_DMA_Abort_IT+0x1cc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_DMA_Abort_IT+0x1d0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <HAL_DMA_Abort_IT+0x1d4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d009      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <HAL_DMA_Abort_IT+0x1d8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x17c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <HAL_DMA_Abort_IT+0x1dc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <HAL_DMA_Abort_IT+0x18e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e178      	b.n	8003d34 <HAL_DMA_Abort_IT+0x480>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e16f      	b.n	8003d34 <HAL_DMA_Abort_IT+0x480>
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020e 	bic.w	r2, r2, #14
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c5c <HAL_DMA_Abort_IT+0x3a8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d04a      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8003c60 <HAL_DMA_Abort_IT+0x3ac>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d045      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a69      	ldr	r2, [pc, #420]	@ (8003c64 <HAL_DMA_Abort_IT+0x3b0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d040      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a68      	ldr	r2, [pc, #416]	@ (8003c68 <HAL_DMA_Abort_IT+0x3b4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d03b      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a66      	ldr	r2, [pc, #408]	@ (8003c6c <HAL_DMA_Abort_IT+0x3b8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d036      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a65      	ldr	r2, [pc, #404]	@ (8003c70 <HAL_DMA_Abort_IT+0x3bc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d031      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a63      	ldr	r2, [pc, #396]	@ (8003c74 <HAL_DMA_Abort_IT+0x3c0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02c      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a62      	ldr	r2, [pc, #392]	@ (8003c78 <HAL_DMA_Abort_IT+0x3c4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d027      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a60      	ldr	r2, [pc, #384]	@ (8003c7c <HAL_DMA_Abort_IT+0x3c8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d022      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5f      	ldr	r2, [pc, #380]	@ (8003c80 <HAL_DMA_Abort_IT+0x3cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d01d      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c84 <HAL_DMA_Abort_IT+0x3d0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	@ (8003c88 <HAL_DMA_Abort_IT+0x3d4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5a      	ldr	r2, [pc, #360]	@ (8003c8c <HAL_DMA_Abort_IT+0x3d8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a59      	ldr	r2, [pc, #356]	@ (8003c90 <HAL_DMA_Abort_IT+0x3dc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a57      	ldr	r2, [pc, #348]	@ (8003c94 <HAL_DMA_Abort_IT+0x3e0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x290>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a56      	ldr	r2, [pc, #344]	@ (8003c98 <HAL_DMA_Abort_IT+0x3e4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d108      	bne.n	8003b56 <HAL_DMA_Abort_IT+0x2a2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e007      	b.n	8003b66 <HAL_DMA_Abort_IT+0x2b2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c5c <HAL_DMA_Abort_IT+0x3a8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d072      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3a      	ldr	r2, [pc, #232]	@ (8003c60 <HAL_DMA_Abort_IT+0x3ac>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d06d      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a39      	ldr	r2, [pc, #228]	@ (8003c64 <HAL_DMA_Abort_IT+0x3b0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d068      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a37      	ldr	r2, [pc, #220]	@ (8003c68 <HAL_DMA_Abort_IT+0x3b4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d063      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a36      	ldr	r2, [pc, #216]	@ (8003c6c <HAL_DMA_Abort_IT+0x3b8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d05e      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a34      	ldr	r2, [pc, #208]	@ (8003c70 <HAL_DMA_Abort_IT+0x3bc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d059      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a33      	ldr	r2, [pc, #204]	@ (8003c74 <HAL_DMA_Abort_IT+0x3c0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d054      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a31      	ldr	r2, [pc, #196]	@ (8003c78 <HAL_DMA_Abort_IT+0x3c4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d04f      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a30      	ldr	r2, [pc, #192]	@ (8003c7c <HAL_DMA_Abort_IT+0x3c8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04a      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c80 <HAL_DMA_Abort_IT+0x3cc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d045      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2d      	ldr	r2, [pc, #180]	@ (8003c84 <HAL_DMA_Abort_IT+0x3d0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d040      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003c88 <HAL_DMA_Abort_IT+0x3d4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d03b      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c8c <HAL_DMA_Abort_IT+0x3d8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d036      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a28      	ldr	r2, [pc, #160]	@ (8003c90 <HAL_DMA_Abort_IT+0x3dc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a27      	ldr	r2, [pc, #156]	@ (8003c94 <HAL_DMA_Abort_IT+0x3e0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d02c      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a25      	ldr	r2, [pc, #148]	@ (8003c98 <HAL_DMA_Abort_IT+0x3e4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d027      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <HAL_DMA_Abort_IT+0x3e8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a22      	ldr	r2, [pc, #136]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3ec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3f0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3f4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1e      	ldr	r2, [pc, #120]	@ (8003cac <HAL_DMA_Abort_IT+0x3f8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3fc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb4 <HAL_DMA_Abort_IT+0x400>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x3a2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a19      	ldr	r2, [pc, #100]	@ (8003cb8 <HAL_DMA_Abort_IT+0x404>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d132      	bne.n	8003cbc <HAL_DMA_Abort_IT+0x408>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e031      	b.n	8003cbe <HAL_DMA_Abort_IT+0x40a>
 8003c5a:	bf00      	nop
 8003c5c:	40020010 	.word	0x40020010
 8003c60:	40020028 	.word	0x40020028
 8003c64:	40020040 	.word	0x40020040
 8003c68:	40020058 	.word	0x40020058
 8003c6c:	40020070 	.word	0x40020070
 8003c70:	40020088 	.word	0x40020088
 8003c74:	400200a0 	.word	0x400200a0
 8003c78:	400200b8 	.word	0x400200b8
 8003c7c:	40020410 	.word	0x40020410
 8003c80:	40020428 	.word	0x40020428
 8003c84:	40020440 	.word	0x40020440
 8003c88:	40020458 	.word	0x40020458
 8003c8c:	40020470 	.word	0x40020470
 8003c90:	40020488 	.word	0x40020488
 8003c94:	400204a0 	.word	0x400204a0
 8003c98:	400204b8 	.word	0x400204b8
 8003c9c:	58025408 	.word	0x58025408
 8003ca0:	5802541c 	.word	0x5802541c
 8003ca4:	58025430 	.word	0x58025430
 8003ca8:	58025444 	.word	0x58025444
 8003cac:	58025458 	.word	0x58025458
 8003cb0:	5802546c 	.word	0x5802546c
 8003cb4:	58025480 	.word	0x58025480
 8003cb8:	58025494 	.word	0x58025494
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d028      	beq.n	8003d14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cf0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop

08003d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	@ 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d4c:	4b67      	ldr	r3, [pc, #412]	@ (8003eec <HAL_DMA_IRQHandler+0x1ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a67      	ldr	r2, [pc, #412]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1b0>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5f      	ldr	r2, [pc, #380]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003efc <HAL_DMA_IRQHandler+0x1bc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5a      	ldr	r2, [pc, #360]	@ (8003f00 <HAL_DMA_IRQHandler+0x1c0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	@ (8003f04 <HAL_DMA_IRQHandler+0x1c4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	@ (8003f08 <HAL_DMA_IRQHandler+0x1c8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a56      	ldr	r2, [pc, #344]	@ (8003f0c <HAL_DMA_IRQHandler+0x1cc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	@ (8003f10 <HAL_DMA_IRQHandler+0x1d0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a53      	ldr	r2, [pc, #332]	@ (8003f14 <HAL_DMA_IRQHandler+0x1d4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	@ (8003f18 <HAL_DMA_IRQHandler+0x1d8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a50      	ldr	r2, [pc, #320]	@ (8003f1c <HAL_DMA_IRQHandler+0x1dc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a4e      	ldr	r2, [pc, #312]	@ (8003f20 <HAL_DMA_IRQHandler+0x1e0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4d      	ldr	r2, [pc, #308]	@ (8003f24 <HAL_DMA_IRQHandler+0x1e4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f28 <HAL_DMA_IRQHandler+0x1e8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4a      	ldr	r2, [pc, #296]	@ (8003f2c <HAL_DMA_IRQHandler+0x1ec>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xd2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a48      	ldr	r2, [pc, #288]	@ (8003f30 <HAL_DMA_IRQHandler+0x1f0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_IRQHandler+0xd6>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 842b 	beq.w	8004674 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2208      	movs	r2, #8
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80a2 	beq.w	8003f78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d04a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d045      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003efc <HAL_DMA_IRQHandler+0x1bc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d040      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2a      	ldr	r2, [pc, #168]	@ (8003f00 <HAL_DMA_IRQHandler+0x1c0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d03b      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a28      	ldr	r2, [pc, #160]	@ (8003f04 <HAL_DMA_IRQHandler+0x1c4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d036      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a27      	ldr	r2, [pc, #156]	@ (8003f08 <HAL_DMA_IRQHandler+0x1c8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	@ (8003f0c <HAL_DMA_IRQHandler+0x1cc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02c      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	@ (8003f10 <HAL_DMA_IRQHandler+0x1d0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d027      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a22      	ldr	r2, [pc, #136]	@ (8003f14 <HAL_DMA_IRQHandler+0x1d4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <HAL_DMA_IRQHandler+0x1d8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01d      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f1c <HAL_DMA_IRQHandler+0x1dc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <HAL_DMA_IRQHandler+0x1e0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <HAL_DMA_IRQHandler+0x1e4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <HAL_DMA_IRQHandler+0x1e8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <HAL_DMA_IRQHandler+0x1ec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x194>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <HAL_DMA_IRQHandler+0x1f0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d12f      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x1f4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e02e      	b.n	8003f48 <HAL_DMA_IRQHandler+0x208>
 8003eea:	bf00      	nop
 8003eec:	24000000 	.word	0x24000000
 8003ef0:	1b4e81b5 	.word	0x1b4e81b5
 8003ef4:	40020010 	.word	0x40020010
 8003ef8:	40020028 	.word	0x40020028
 8003efc:	40020040 	.word	0x40020040
 8003f00:	40020058 	.word	0x40020058
 8003f04:	40020070 	.word	0x40020070
 8003f08:	40020088 	.word	0x40020088
 8003f0c:	400200a0 	.word	0x400200a0
 8003f10:	400200b8 	.word	0x400200b8
 8003f14:	40020410 	.word	0x40020410
 8003f18:	40020428 	.word	0x40020428
 8003f1c:	40020440 	.word	0x40020440
 8003f20:	40020458 	.word	0x40020458
 8003f24:	40020470 	.word	0x40020470
 8003f28:	40020488 	.word	0x40020488
 8003f2c:	400204a0 	.word	0x400204a0
 8003f30:	400204b8 	.word	0x400204b8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0204 	bic.w	r2, r2, #4
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2208      	movs	r2, #8
 8003f66:	409a      	lsls	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06e      	beq.n	800406c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a69      	ldr	r2, [pc, #420]	@ (8004138 <HAL_DMA_IRQHandler+0x3f8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04a      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a67      	ldr	r2, [pc, #412]	@ (800413c <HAL_DMA_IRQHandler+0x3fc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d045      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a66      	ldr	r2, [pc, #408]	@ (8004140 <HAL_DMA_IRQHandler+0x400>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d040      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a64      	ldr	r2, [pc, #400]	@ (8004144 <HAL_DMA_IRQHandler+0x404>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d03b      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a63      	ldr	r2, [pc, #396]	@ (8004148 <HAL_DMA_IRQHandler+0x408>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d036      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a61      	ldr	r2, [pc, #388]	@ (800414c <HAL_DMA_IRQHandler+0x40c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a60      	ldr	r2, [pc, #384]	@ (8004150 <HAL_DMA_IRQHandler+0x410>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02c      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8004154 <HAL_DMA_IRQHandler+0x414>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d027      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8004158 <HAL_DMA_IRQHandler+0x418>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5b      	ldr	r2, [pc, #364]	@ (800415c <HAL_DMA_IRQHandler+0x41c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8004160 <HAL_DMA_IRQHandler+0x420>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a58      	ldr	r2, [pc, #352]	@ (8004164 <HAL_DMA_IRQHandler+0x424>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a57      	ldr	r2, [pc, #348]	@ (8004168 <HAL_DMA_IRQHandler+0x428>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a55      	ldr	r2, [pc, #340]	@ (800416c <HAL_DMA_IRQHandler+0x42c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a54      	ldr	r2, [pc, #336]	@ (8004170 <HAL_DMA_IRQHandler+0x430>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_DMA_IRQHandler+0x2ee>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a52      	ldr	r2, [pc, #328]	@ (8004174 <HAL_DMA_IRQHandler+0x434>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10a      	bne.n	8004044 <HAL_DMA_IRQHandler+0x304>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e003      	b.n	800404c <HAL_DMA_IRQHandler+0x30c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	f043 0202 	orr.w	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2204      	movs	r2, #4
 8004076:	409a      	lsls	r2, r3
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 808f 	beq.w	80041a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2c      	ldr	r2, [pc, #176]	@ (8004138 <HAL_DMA_IRQHandler+0x3f8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d04a      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2a      	ldr	r2, [pc, #168]	@ (800413c <HAL_DMA_IRQHandler+0x3fc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d045      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a29      	ldr	r2, [pc, #164]	@ (8004140 <HAL_DMA_IRQHandler+0x400>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d040      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <HAL_DMA_IRQHandler+0x404>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d03b      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a26      	ldr	r2, [pc, #152]	@ (8004148 <HAL_DMA_IRQHandler+0x408>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d036      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a24      	ldr	r2, [pc, #144]	@ (800414c <HAL_DMA_IRQHandler+0x40c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a23      	ldr	r2, [pc, #140]	@ (8004150 <HAL_DMA_IRQHandler+0x410>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d02c      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a21      	ldr	r2, [pc, #132]	@ (8004154 <HAL_DMA_IRQHandler+0x414>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d027      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a20      	ldr	r2, [pc, #128]	@ (8004158 <HAL_DMA_IRQHandler+0x418>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d022      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_DMA_IRQHandler+0x41c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01d      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004160 <HAL_DMA_IRQHandler+0x420>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004164 <HAL_DMA_IRQHandler+0x424>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_DMA_IRQHandler+0x428>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a18      	ldr	r2, [pc, #96]	@ (800416c <HAL_DMA_IRQHandler+0x42c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <HAL_DMA_IRQHandler+0x430>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_DMA_IRQHandler+0x3e2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <HAL_DMA_IRQHandler+0x434>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d12a      	bne.n	8004178 <HAL_DMA_IRQHandler+0x438>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e023      	b.n	8004180 <HAL_DMA_IRQHandler+0x440>
 8004138:	40020010 	.word	0x40020010
 800413c:	40020028 	.word	0x40020028
 8004140:	40020040 	.word	0x40020040
 8004144:	40020058 	.word	0x40020058
 8004148:	40020070 	.word	0x40020070
 800414c:	40020088 	.word	0x40020088
 8004150:	400200a0 	.word	0x400200a0
 8004154:	400200b8 	.word	0x400200b8
 8004158:	40020410 	.word	0x40020410
 800415c:	40020428 	.word	0x40020428
 8004160:	40020440 	.word	0x40020440
 8004164:	40020458 	.word	0x40020458
 8004168:	40020470 	.word	0x40020470
 800416c:	40020488 	.word	0x40020488
 8004170:	400204a0 	.word	0x400204a0
 8004174:	400204b8 	.word	0x400204b8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2204      	movs	r2, #4
 800418e:	409a      	lsls	r2, r3
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2210      	movs	r2, #16
 80041aa:	409a      	lsls	r2, r3
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a6 	beq.w	8004302 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a85      	ldr	r2, [pc, #532]	@ (80043d0 <HAL_DMA_IRQHandler+0x690>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04a      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a83      	ldr	r2, [pc, #524]	@ (80043d4 <HAL_DMA_IRQHandler+0x694>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d045      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a82      	ldr	r2, [pc, #520]	@ (80043d8 <HAL_DMA_IRQHandler+0x698>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d040      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a80      	ldr	r2, [pc, #512]	@ (80043dc <HAL_DMA_IRQHandler+0x69c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7f      	ldr	r2, [pc, #508]	@ (80043e0 <HAL_DMA_IRQHandler+0x6a0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a7d      	ldr	r2, [pc, #500]	@ (80043e4 <HAL_DMA_IRQHandler+0x6a4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7c      	ldr	r2, [pc, #496]	@ (80043e8 <HAL_DMA_IRQHandler+0x6a8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d02c      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a7a      	ldr	r2, [pc, #488]	@ (80043ec <HAL_DMA_IRQHandler+0x6ac>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a79      	ldr	r2, [pc, #484]	@ (80043f0 <HAL_DMA_IRQHandler+0x6b0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a77      	ldr	r2, [pc, #476]	@ (80043f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a76      	ldr	r2, [pc, #472]	@ (80043f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a74      	ldr	r2, [pc, #464]	@ (80043fc <HAL_DMA_IRQHandler+0x6bc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a73      	ldr	r2, [pc, #460]	@ (8004400 <HAL_DMA_IRQHandler+0x6c0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a71      	ldr	r2, [pc, #452]	@ (8004404 <HAL_DMA_IRQHandler+0x6c4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a70      	ldr	r2, [pc, #448]	@ (8004408 <HAL_DMA_IRQHandler+0x6c8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_DMA_IRQHandler+0x516>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6e      	ldr	r2, [pc, #440]	@ (800440c <HAL_DMA_IRQHandler+0x6cc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10a      	bne.n	800426c <HAL_DMA_IRQHandler+0x52c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e009      	b.n	8004280 <HAL_DMA_IRQHandler+0x540>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf14      	ite	ne
 800427a:	2301      	movne	r3, #1
 800427c:	2300      	moveq	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03e      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2210      	movs	r2, #16
 800428e:	409a      	lsls	r2, r3
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d018      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d108      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d024      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
 80042c0:	e01f      	b.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01b      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
 80042d2:	e016      	b.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d107      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0208 	bic.w	r2, r2, #8
 80042f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2220      	movs	r2, #32
 800430c:	409a      	lsls	r2, r3
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8110 	beq.w	8004538 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2c      	ldr	r2, [pc, #176]	@ (80043d0 <HAL_DMA_IRQHandler+0x690>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04a      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2b      	ldr	r2, [pc, #172]	@ (80043d4 <HAL_DMA_IRQHandler+0x694>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d045      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a29      	ldr	r2, [pc, #164]	@ (80043d8 <HAL_DMA_IRQHandler+0x698>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d040      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a28      	ldr	r2, [pc, #160]	@ (80043dc <HAL_DMA_IRQHandler+0x69c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d03b      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <HAL_DMA_IRQHandler+0x6a0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d036      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a25      	ldr	r2, [pc, #148]	@ (80043e4 <HAL_DMA_IRQHandler+0x6a4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d031      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a23      	ldr	r2, [pc, #140]	@ (80043e8 <HAL_DMA_IRQHandler+0x6a8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02c      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a22      	ldr	r2, [pc, #136]	@ (80043ec <HAL_DMA_IRQHandler+0x6ac>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d027      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a20      	ldr	r2, [pc, #128]	@ (80043f0 <HAL_DMA_IRQHandler+0x6b0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1f      	ldr	r2, [pc, #124]	@ (80043f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1d      	ldr	r2, [pc, #116]	@ (80043f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_DMA_IRQHandler+0x6bc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1a      	ldr	r2, [pc, #104]	@ (8004400 <HAL_DMA_IRQHandler+0x6c0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a19      	ldr	r2, [pc, #100]	@ (8004404 <HAL_DMA_IRQHandler+0x6c4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a17      	ldr	r2, [pc, #92]	@ (8004408 <HAL_DMA_IRQHandler+0x6c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x678>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a16      	ldr	r2, [pc, #88]	@ (800440c <HAL_DMA_IRQHandler+0x6cc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12b      	bne.n	8004410 <HAL_DMA_IRQHandler+0x6d0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf14      	ite	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	2300      	moveq	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	e02a      	b.n	8004424 <HAL_DMA_IRQHandler+0x6e4>
 80043ce:	bf00      	nop
 80043d0:	40020010 	.word	0x40020010
 80043d4:	40020028 	.word	0x40020028
 80043d8:	40020040 	.word	0x40020040
 80043dc:	40020058 	.word	0x40020058
 80043e0:	40020070 	.word	0x40020070
 80043e4:	40020088 	.word	0x40020088
 80043e8:	400200a0 	.word	0x400200a0
 80043ec:	400200b8 	.word	0x400200b8
 80043f0:	40020410 	.word	0x40020410
 80043f4:	40020428 	.word	0x40020428
 80043f8:	40020440 	.word	0x40020440
 80043fc:	40020458 	.word	0x40020458
 8004400:	40020470 	.word	0x40020470
 8004404:	40020488 	.word	0x40020488
 8004408:	400204a0 	.word	0x400204a0
 800440c:	400204b8 	.word	0x400204b8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8087 	beq.w	8004538 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b04      	cmp	r3, #4
 8004444:	d139      	bne.n	80044ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0216 	bic.w	r2, r2, #22
 8004454:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004464:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <HAL_DMA_IRQHandler+0x736>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0208 	bic.w	r2, r2, #8
 8004484:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	223f      	movs	r2, #63	@ 0x3f
 8004490:	409a      	lsls	r2, r3
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 834a 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
          }
          return;
 80044b8:	e344      	b.n	8004b44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d018      	beq.n	80044fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d108      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02c      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
 80044e6:	e027      	b.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d023      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
 80044f8:	e01e      	b.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8306 	beq.w	8004b4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8088 	beq.w	8004660 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2204      	movs	r2, #4
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a7a      	ldr	r2, [pc, #488]	@ (8004748 <HAL_DMA_IRQHandler+0xa08>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04a      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a79      	ldr	r2, [pc, #484]	@ (800474c <HAL_DMA_IRQHandler+0xa0c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d045      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a77      	ldr	r2, [pc, #476]	@ (8004750 <HAL_DMA_IRQHandler+0xa10>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d040      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a76      	ldr	r2, [pc, #472]	@ (8004754 <HAL_DMA_IRQHandler+0xa14>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d03b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a74      	ldr	r2, [pc, #464]	@ (8004758 <HAL_DMA_IRQHandler+0xa18>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d036      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a73      	ldr	r2, [pc, #460]	@ (800475c <HAL_DMA_IRQHandler+0xa1c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d031      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a71      	ldr	r2, [pc, #452]	@ (8004760 <HAL_DMA_IRQHandler+0xa20>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02c      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a70      	ldr	r2, [pc, #448]	@ (8004764 <HAL_DMA_IRQHandler+0xa24>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d027      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004768 <HAL_DMA_IRQHandler+0xa28>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6d      	ldr	r2, [pc, #436]	@ (800476c <HAL_DMA_IRQHandler+0xa2c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d01d      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004770 <HAL_DMA_IRQHandler+0xa30>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004774 <HAL_DMA_IRQHandler+0xa34>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a68      	ldr	r2, [pc, #416]	@ (8004778 <HAL_DMA_IRQHandler+0xa38>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a67      	ldr	r2, [pc, #412]	@ (800477c <HAL_DMA_IRQHandler+0xa3c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a65      	ldr	r2, [pc, #404]	@ (8004780 <HAL_DMA_IRQHandler+0xa40>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x8b8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a64      	ldr	r2, [pc, #400]	@ (8004784 <HAL_DMA_IRQHandler+0xa44>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <HAL_DMA_IRQHandler+0x8ca>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e007      	b.n	800461a <HAL_DMA_IRQHandler+0x8da>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d307      	bcc.n	8004636 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f2      	bne.n	800461a <HAL_DMA_IRQHandler+0x8da>
 8004634:	e000      	b.n	8004638 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004636:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800464e:	e003      	b.n	8004658 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8272 	beq.w	8004b4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
 8004672:	e26c      	b.n	8004b4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a43      	ldr	r2, [pc, #268]	@ (8004788 <HAL_DMA_IRQHandler+0xa48>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d022      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a42      	ldr	r2, [pc, #264]	@ (800478c <HAL_DMA_IRQHandler+0xa4c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d01d      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <HAL_DMA_IRQHandler+0xa50>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d018      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <HAL_DMA_IRQHandler+0xa54>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004798 <HAL_DMA_IRQHandler+0xa58>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00e      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3c      	ldr	r2, [pc, #240]	@ (800479c <HAL_DMA_IRQHandler+0xa5c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3a      	ldr	r2, [pc, #232]	@ (80047a0 <HAL_DMA_IRQHandler+0xa60>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x984>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a39      	ldr	r2, [pc, #228]	@ (80047a4 <HAL_DMA_IRQHandler+0xa64>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d101      	bne.n	80046c8 <HAL_DMA_IRQHandler+0x988>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_DMA_IRQHandler+0x98a>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 823f 	beq.w	8004b4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80cd 	beq.w	8004888 <HAL_DMA_IRQHandler+0xb48>
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80c7 	beq.w	8004888 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2204      	movs	r2, #4
 8004704:	409a      	lsls	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d049      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8210 	beq.w	8004b48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004730:	e20a      	b.n	8004b48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8206 	beq.w	8004b48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004744:	e200      	b.n	8004b48 <HAL_DMA_IRQHandler+0xe08>
 8004746:	bf00      	nop
 8004748:	40020010 	.word	0x40020010
 800474c:	40020028 	.word	0x40020028
 8004750:	40020040 	.word	0x40020040
 8004754:	40020058 	.word	0x40020058
 8004758:	40020070 	.word	0x40020070
 800475c:	40020088 	.word	0x40020088
 8004760:	400200a0 	.word	0x400200a0
 8004764:	400200b8 	.word	0x400200b8
 8004768:	40020410 	.word	0x40020410
 800476c:	40020428 	.word	0x40020428
 8004770:	40020440 	.word	0x40020440
 8004774:	40020458 	.word	0x40020458
 8004778:	40020470 	.word	0x40020470
 800477c:	40020488 	.word	0x40020488
 8004780:	400204a0 	.word	0x400204a0
 8004784:	400204b8 	.word	0x400204b8
 8004788:	58025408 	.word	0x58025408
 800478c:	5802541c 	.word	0x5802541c
 8004790:	58025430 	.word	0x58025430
 8004794:	58025444 	.word	0x58025444
 8004798:	58025458 	.word	0x58025458
 800479c:	5802546c 	.word	0x5802546c
 80047a0:	58025480 	.word	0x58025480
 80047a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d160      	bne.n	8004874 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7f      	ldr	r2, [pc, #508]	@ (80049b4 <HAL_DMA_IRQHandler+0xc74>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d04a      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a7d      	ldr	r2, [pc, #500]	@ (80049b8 <HAL_DMA_IRQHandler+0xc78>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d045      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7c      	ldr	r2, [pc, #496]	@ (80049bc <HAL_DMA_IRQHandler+0xc7c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d040      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7a      	ldr	r2, [pc, #488]	@ (80049c0 <HAL_DMA_IRQHandler+0xc80>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03b      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a79      	ldr	r2, [pc, #484]	@ (80049c4 <HAL_DMA_IRQHandler+0xc84>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a77      	ldr	r2, [pc, #476]	@ (80049c8 <HAL_DMA_IRQHandler+0xc88>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a76      	ldr	r2, [pc, #472]	@ (80049cc <HAL_DMA_IRQHandler+0xc8c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d02c      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a74      	ldr	r2, [pc, #464]	@ (80049d0 <HAL_DMA_IRQHandler+0xc90>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d027      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a73      	ldr	r2, [pc, #460]	@ (80049d4 <HAL_DMA_IRQHandler+0xc94>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a71      	ldr	r2, [pc, #452]	@ (80049d8 <HAL_DMA_IRQHandler+0xc98>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a70      	ldr	r2, [pc, #448]	@ (80049dc <HAL_DMA_IRQHandler+0xc9c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_DMA_IRQHandler+0xca0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6d      	ldr	r2, [pc, #436]	@ (80049e4 <HAL_DMA_IRQHandler+0xca4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a6b      	ldr	r2, [pc, #428]	@ (80049e8 <HAL_DMA_IRQHandler+0xca8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6a      	ldr	r2, [pc, #424]	@ (80049ec <HAL_DMA_IRQHandler+0xcac>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_DMA_IRQHandler+0xb12>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a68      	ldr	r2, [pc, #416]	@ (80049f0 <HAL_DMA_IRQHandler+0xcb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <HAL_DMA_IRQHandler+0xb24>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0208 	bic.w	r2, r2, #8
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e007      	b.n	8004874 <HAL_DMA_IRQHandler+0xb34>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8165 	beq.w	8004b48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004886:	e15f      	b.n	8004b48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2202      	movs	r2, #2
 8004892:	409a      	lsls	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80c5 	beq.w	8004a28 <HAL_DMA_IRQHandler+0xce8>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80bf 	beq.w	8004a28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2202      	movs	r2, #2
 80048b4:	409a      	lsls	r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d018      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 813a 	beq.w	8004b4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e0:	e134      	b.n	8004b4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8130 	beq.w	8004b4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f4:	e12a      	b.n	8004b4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 8089 	bne.w	8004a14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <HAL_DMA_IRQHandler+0xc74>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d04a      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a29      	ldr	r2, [pc, #164]	@ (80049b8 <HAL_DMA_IRQHandler+0xc78>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d045      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a28      	ldr	r2, [pc, #160]	@ (80049bc <HAL_DMA_IRQHandler+0xc7c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d040      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a26      	ldr	r2, [pc, #152]	@ (80049c0 <HAL_DMA_IRQHandler+0xc80>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d03b      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a25      	ldr	r2, [pc, #148]	@ (80049c4 <HAL_DMA_IRQHandler+0xc84>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d036      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a23      	ldr	r2, [pc, #140]	@ (80049c8 <HAL_DMA_IRQHandler+0xc88>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <HAL_DMA_IRQHandler+0xc8c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d02c      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a20      	ldr	r2, [pc, #128]	@ (80049d0 <HAL_DMA_IRQHandler+0xc90>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d027      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_DMA_IRQHandler+0xc94>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1d      	ldr	r2, [pc, #116]	@ (80049d8 <HAL_DMA_IRQHandler+0xc98>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_DMA_IRQHandler+0xc9c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1a      	ldr	r2, [pc, #104]	@ (80049e0 <HAL_DMA_IRQHandler+0xca0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a19      	ldr	r2, [pc, #100]	@ (80049e4 <HAL_DMA_IRQHandler+0xca4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <HAL_DMA_IRQHandler+0xca8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <HAL_DMA_IRQHandler+0xcac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xc62>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a14      	ldr	r2, [pc, #80]	@ (80049f0 <HAL_DMA_IRQHandler+0xcb0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d128      	bne.n	80049f4 <HAL_DMA_IRQHandler+0xcb4>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0214 	bic.w	r2, r2, #20
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e027      	b.n	8004a04 <HAL_DMA_IRQHandler+0xcc4>
 80049b4:	40020010 	.word	0x40020010
 80049b8:	40020028 	.word	0x40020028
 80049bc:	40020040 	.word	0x40020040
 80049c0:	40020058 	.word	0x40020058
 80049c4:	40020070 	.word	0x40020070
 80049c8:	40020088 	.word	0x40020088
 80049cc:	400200a0 	.word	0x400200a0
 80049d0:	400200b8 	.word	0x400200b8
 80049d4:	40020410 	.word	0x40020410
 80049d8:	40020428 	.word	0x40020428
 80049dc:	40020440 	.word	0x40020440
 80049e0:	40020458 	.word	0x40020458
 80049e4:	40020470 	.word	0x40020470
 80049e8:	40020488 	.word	0x40020488
 80049ec:	400204a0 	.word	0x400204a0
 80049f0:	400204b8 	.word	0x400204b8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 020a 	bic.w	r2, r2, #10
 8004a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8097 	beq.w	8004b4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a26:	e091      	b.n	8004b4c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2208      	movs	r2, #8
 8004a32:	409a      	lsls	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8088 	beq.w	8004b4e <HAL_DMA_IRQHandler+0xe0e>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8082 	beq.w	8004b4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a41      	ldr	r2, [pc, #260]	@ (8004b54 <HAL_DMA_IRQHandler+0xe14>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04a      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a3f      	ldr	r2, [pc, #252]	@ (8004b58 <HAL_DMA_IRQHandler+0xe18>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d045      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a3e      	ldr	r2, [pc, #248]	@ (8004b5c <HAL_DMA_IRQHandler+0xe1c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d040      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b60 <HAL_DMA_IRQHandler+0xe20>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d03b      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3b      	ldr	r2, [pc, #236]	@ (8004b64 <HAL_DMA_IRQHandler+0xe24>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a39      	ldr	r2, [pc, #228]	@ (8004b68 <HAL_DMA_IRQHandler+0xe28>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	@ (8004b6c <HAL_DMA_IRQHandler+0xe2c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d02c      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a36      	ldr	r2, [pc, #216]	@ (8004b70 <HAL_DMA_IRQHandler+0xe30>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a35      	ldr	r2, [pc, #212]	@ (8004b74 <HAL_DMA_IRQHandler+0xe34>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	@ (8004b78 <HAL_DMA_IRQHandler+0xe38>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a32      	ldr	r2, [pc, #200]	@ (8004b7c <HAL_DMA_IRQHandler+0xe3c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	@ (8004b80 <HAL_DMA_IRQHandler+0xe40>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b84 <HAL_DMA_IRQHandler+0xe44>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <HAL_DMA_IRQHandler+0xe48>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <HAL_DMA_IRQHandler+0xe4c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_DMA_IRQHandler+0xdaa>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b90 <HAL_DMA_IRQHandler+0xe50>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <HAL_DMA_IRQHandler+0xdbc>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 021c 	bic.w	r2, r2, #28
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e007      	b.n	8004b0c <HAL_DMA_IRQHandler+0xdcc>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 020e 	bic.w	r2, r2, #14
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	2201      	movs	r2, #1
 8004b16:	409a      	lsls	r2, r3
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
 8004b42:	e004      	b.n	8004b4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b44:	bf00      	nop
 8004b46:	e002      	b.n	8004b4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b48:	bf00      	nop
 8004b4a:	e000      	b.n	8004b4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b4e:	3728      	adds	r7, #40	@ 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40020010 	.word	0x40020010
 8004b58:	40020028 	.word	0x40020028
 8004b5c:	40020040 	.word	0x40020040
 8004b60:	40020058 	.word	0x40020058
 8004b64:	40020070 	.word	0x40020070
 8004b68:	40020088 	.word	0x40020088
 8004b6c:	400200a0 	.word	0x400200a0
 8004b70:	400200b8 	.word	0x400200b8
 8004b74:	40020410 	.word	0x40020410
 8004b78:	40020428 	.word	0x40020428
 8004b7c:	40020440 	.word	0x40020440
 8004b80:	40020458 	.word	0x40020458
 8004b84:	40020470 	.word	0x40020470
 8004b88:	40020488 	.word	0x40020488
 8004b8c:	400204a0 	.word	0x400204a0
 8004b90:	400204b8 	.word	0x400204b8

08004b94 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7f      	ldr	r2, [pc, #508]	@ (8004dc8 <DMA_SetConfig+0x21c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d072      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a7d      	ldr	r2, [pc, #500]	@ (8004dcc <DMA_SetConfig+0x220>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d06d      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a7c      	ldr	r2, [pc, #496]	@ (8004dd0 <DMA_SetConfig+0x224>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d068      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a7a      	ldr	r2, [pc, #488]	@ (8004dd4 <DMA_SetConfig+0x228>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d063      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a79      	ldr	r2, [pc, #484]	@ (8004dd8 <DMA_SetConfig+0x22c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d05e      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a77      	ldr	r2, [pc, #476]	@ (8004ddc <DMA_SetConfig+0x230>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d059      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a76      	ldr	r2, [pc, #472]	@ (8004de0 <DMA_SetConfig+0x234>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d054      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a74      	ldr	r2, [pc, #464]	@ (8004de4 <DMA_SetConfig+0x238>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d04f      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a73      	ldr	r2, [pc, #460]	@ (8004de8 <DMA_SetConfig+0x23c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d04a      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a71      	ldr	r2, [pc, #452]	@ (8004dec <DMA_SetConfig+0x240>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d045      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a70      	ldr	r2, [pc, #448]	@ (8004df0 <DMA_SetConfig+0x244>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d040      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a6e      	ldr	r2, [pc, #440]	@ (8004df4 <DMA_SetConfig+0x248>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d03b      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a6d      	ldr	r2, [pc, #436]	@ (8004df8 <DMA_SetConfig+0x24c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d036      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004dfc <DMA_SetConfig+0x250>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d031      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6a      	ldr	r2, [pc, #424]	@ (8004e00 <DMA_SetConfig+0x254>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d02c      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a68      	ldr	r2, [pc, #416]	@ (8004e04 <DMA_SetConfig+0x258>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d027      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a67      	ldr	r2, [pc, #412]	@ (8004e08 <DMA_SetConfig+0x25c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d022      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a65      	ldr	r2, [pc, #404]	@ (8004e0c <DMA_SetConfig+0x260>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a64      	ldr	r2, [pc, #400]	@ (8004e10 <DMA_SetConfig+0x264>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d018      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a62      	ldr	r2, [pc, #392]	@ (8004e14 <DMA_SetConfig+0x268>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a61      	ldr	r2, [pc, #388]	@ (8004e18 <DMA_SetConfig+0x26c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5f      	ldr	r2, [pc, #380]	@ (8004e1c <DMA_SetConfig+0x270>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e20 <DMA_SetConfig+0x274>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <DMA_SetConfig+0x10a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5c      	ldr	r2, [pc, #368]	@ (8004e24 <DMA_SetConfig+0x278>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <DMA_SetConfig+0x10e>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <DMA_SetConfig+0x110>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00d      	beq.n	8004cdc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cda:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a39      	ldr	r2, [pc, #228]	@ (8004dc8 <DMA_SetConfig+0x21c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04a      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a38      	ldr	r2, [pc, #224]	@ (8004dcc <DMA_SetConfig+0x220>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d045      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a36      	ldr	r2, [pc, #216]	@ (8004dd0 <DMA_SetConfig+0x224>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d040      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a35      	ldr	r2, [pc, #212]	@ (8004dd4 <DMA_SetConfig+0x228>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d03b      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a33      	ldr	r2, [pc, #204]	@ (8004dd8 <DMA_SetConfig+0x22c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d036      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a32      	ldr	r2, [pc, #200]	@ (8004ddc <DMA_SetConfig+0x230>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d031      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <DMA_SetConfig+0x234>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02c      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <DMA_SetConfig+0x238>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d027      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <DMA_SetConfig+0x23c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d022      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dec <DMA_SetConfig+0x240>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d01d      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2a      	ldr	r2, [pc, #168]	@ (8004df0 <DMA_SetConfig+0x244>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d018      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a29      	ldr	r2, [pc, #164]	@ (8004df4 <DMA_SetConfig+0x248>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a27      	ldr	r2, [pc, #156]	@ (8004df8 <DMA_SetConfig+0x24c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a26      	ldr	r2, [pc, #152]	@ (8004dfc <DMA_SetConfig+0x250>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <DMA_SetConfig+0x254>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <DMA_SetConfig+0x1d0>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a23      	ldr	r2, [pc, #140]	@ (8004e04 <DMA_SetConfig+0x258>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d101      	bne.n	8004d80 <DMA_SetConfig+0x1d4>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <DMA_SetConfig+0x1d6>
 8004d80:	2300      	movs	r3, #0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d059      	beq.n	8004e3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	223f      	movs	r2, #63	@ 0x3f
 8004d90:	409a      	lsls	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004da4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d138      	bne.n	8004e28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dc6:	e086      	b.n	8004ed6 <DMA_SetConfig+0x32a>
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8
 8004e08:	58025408 	.word	0x58025408
 8004e0c:	5802541c 	.word	0x5802541c
 8004e10:	58025430 	.word	0x58025430
 8004e14:	58025444 	.word	0x58025444
 8004e18:	58025458 	.word	0x58025458
 8004e1c:	5802546c 	.word	0x5802546c
 8004e20:	58025480 	.word	0x58025480
 8004e24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
}
 8004e38:	e04d      	b.n	8004ed6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a29      	ldr	r2, [pc, #164]	@ (8004ee4 <DMA_SetConfig+0x338>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a27      	ldr	r2, [pc, #156]	@ (8004ee8 <DMA_SetConfig+0x33c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a26      	ldr	r2, [pc, #152]	@ (8004eec <DMA_SetConfig+0x340>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ef0 <DMA_SetConfig+0x344>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a23      	ldr	r2, [pc, #140]	@ (8004ef4 <DMA_SetConfig+0x348>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <DMA_SetConfig+0x34c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a20      	ldr	r2, [pc, #128]	@ (8004efc <DMA_SetConfig+0x350>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <DMA_SetConfig+0x2de>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <DMA_SetConfig+0x354>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <DMA_SetConfig+0x2e2>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <DMA_SetConfig+0x2e4>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d020      	beq.n	8004ed6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d108      	bne.n	8004ec6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	60da      	str	r2, [r3, #12]
}
 8004ec4:	e007      	b.n	8004ed6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	58025408 	.word	0x58025408
 8004ee8:	5802541c 	.word	0x5802541c
 8004eec:	58025430 	.word	0x58025430
 8004ef0:	58025444 	.word	0x58025444
 8004ef4:	58025458 	.word	0x58025458
 8004ef8:	5802546c 	.word	0x5802546c
 8004efc:	58025480 	.word	0x58025480
 8004f00:	58025494 	.word	0x58025494

08004f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a42      	ldr	r2, [pc, #264]	@ (800501c <DMA_CalcBaseAndBitshift+0x118>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d04a      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a41      	ldr	r2, [pc, #260]	@ (8005020 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d045      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3f      	ldr	r2, [pc, #252]	@ (8005024 <DMA_CalcBaseAndBitshift+0x120>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d040      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005028 <DMA_CalcBaseAndBitshift+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d03b      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3c      	ldr	r2, [pc, #240]	@ (800502c <DMA_CalcBaseAndBitshift+0x128>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d036      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a3b      	ldr	r2, [pc, #236]	@ (8005030 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d031      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a39      	ldr	r2, [pc, #228]	@ (8005034 <DMA_CalcBaseAndBitshift+0x130>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02c      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a38      	ldr	r2, [pc, #224]	@ (8005038 <DMA_CalcBaseAndBitshift+0x134>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d027      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a36      	ldr	r2, [pc, #216]	@ (800503c <DMA_CalcBaseAndBitshift+0x138>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a35      	ldr	r2, [pc, #212]	@ (8005040 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01d      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <DMA_CalcBaseAndBitshift+0x140>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a32      	ldr	r2, [pc, #200]	@ (8005048 <DMA_CalcBaseAndBitshift+0x144>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a30      	ldr	r2, [pc, #192]	@ (800504c <DMA_CalcBaseAndBitshift+0x148>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2f      	ldr	r2, [pc, #188]	@ (8005050 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <DMA_CalcBaseAndBitshift+0x150>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8005058 <DMA_CalcBaseAndBitshift+0x154>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <DMA_CalcBaseAndBitshift+0xac>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <DMA_CalcBaseAndBitshift+0xae>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d024      	beq.n	8005000 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3b10      	subs	r3, #16
 8004fbe:	4a27      	ldr	r2, [pc, #156]	@ (800505c <DMA_CalcBaseAndBitshift+0x158>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	4a24      	ldr	r2, [pc, #144]	@ (8005060 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fd0:	5cd3      	ldrb	r3, [r2, r3]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d908      	bls.n	8004ff0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <DMA_CalcBaseAndBitshift+0x160>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	1d1a      	adds	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fee:	e00d      	b.n	800500c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <DMA_CalcBaseAndBitshift+0x160>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ffe:	e005      	b.n	800500c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
 800505c:	aaaaaaab 	.word	0xaaaaaaab
 8005060:	0801dd8c 	.word	0x0801dd8c
 8005064:	fffffc00 	.word	0xfffffc00

08005068 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d120      	bne.n	80050be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	2b03      	cmp	r3, #3
 8005082:	d858      	bhi.n	8005136 <DMA_CheckFifoParam+0xce>
 8005084:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <DMA_CheckFifoParam+0x24>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050af 	.word	0x080050af
 8005094:	0800509d 	.word	0x0800509d
 8005098:	08005137 	.word	0x08005137
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d048      	beq.n	800513a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ac:	e045      	b.n	800513a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050b6:	d142      	bne.n	800513e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050bc:	e03f      	b.n	800513e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c6:	d123      	bne.n	8005110 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d838      	bhi.n	8005142 <DMA_CheckFifoParam+0xda>
 80050d0:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <DMA_CheckFifoParam+0x70>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050ef 	.word	0x080050ef
 80050e0:	080050e9 	.word	0x080050e9
 80050e4:	08005101 	.word	0x08005101
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
        break;
 80050ec:	e030      	b.n	8005150 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d025      	beq.n	8005146 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050fe:	e022      	b.n	8005146 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005108:	d11f      	bne.n	800514a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800510e:	e01c      	b.n	800514a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	2b02      	cmp	r3, #2
 8005116:	d902      	bls.n	800511e <DMA_CheckFifoParam+0xb6>
 8005118:	2b03      	cmp	r3, #3
 800511a:	d003      	beq.n	8005124 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800511c:	e018      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
        break;
 8005122:	e015      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
    break;
 8005134:	e00b      	b.n	800514e <DMA_CheckFifoParam+0xe6>
        break;
 8005136:	bf00      	nop
 8005138:	e00a      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 800513a:	bf00      	nop
 800513c:	e008      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 800513e:	bf00      	nop
 8005140:	e006      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e004      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
    break;
 800514e:	bf00      	nop
    }
  }

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop

08005160 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a38      	ldr	r2, [pc, #224]	@ (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a36      	ldr	r2, [pc, #216]	@ (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a35      	ldr	r2, [pc, #212]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a33      	ldr	r2, [pc, #204]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a32      	ldr	r2, [pc, #200]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a30      	ldr	r2, [pc, #192]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2f      	ldr	r2, [pc, #188]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3b08      	subs	r3, #8
 80051d0:	4a28      	ldr	r2, [pc, #160]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4b26      	ldr	r3, [pc, #152]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a24      	ldr	r2, [pc, #144]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051fc:	e024      	b.n	8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	3b10      	subs	r3, #16
 8005206:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a1c      	ldr	r2, [pc, #112]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d806      	bhi.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d902      	bls.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3308      	adds	r3, #8
 8005224:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4b18      	ldr	r3, [pc, #96]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005238:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2201      	movs	r2, #1
 8005242:	409a      	lsls	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	58025408 	.word	0x58025408
 8005258:	5802541c 	.word	0x5802541c
 800525c:	58025430 	.word	0x58025430
 8005260:	58025444 	.word	0x58025444
 8005264:	58025458 	.word	0x58025458
 8005268:	5802546c 	.word	0x5802546c
 800526c:	58025480 	.word	0x58025480
 8005270:	58025494 	.word	0x58025494
 8005274:	cccccccd 	.word	0xcccccccd
 8005278:	16009600 	.word	0x16009600
 800527c:	58025880 	.word	0x58025880
 8005280:	aaaaaaab 	.word	0xaaaaaaab
 8005284:	400204b8 	.word	0x400204b8
 8005288:	4002040f 	.word	0x4002040f
 800528c:	10008200 	.word	0x10008200
 8005290:	40020880 	.word	0x40020880

08005294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04a      	beq.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d847      	bhi.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a25      	ldr	r2, [pc, #148]	@ (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a24      	ldr	r2, [pc, #144]	@ (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a22      	ldr	r2, [pc, #136]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a21      	ldr	r2, [pc, #132]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4b17      	ldr	r3, [pc, #92]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800531c:	671a      	str	r2, [r3, #112]	@ 0x70
 800531e:	e009      	b.n	8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4b14      	ldr	r3, [pc, #80]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a11      	ldr	r2, [pc, #68]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005332:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b01      	subs	r3, #1
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	58025408 	.word	0x58025408
 8005350:	5802541c 	.word	0x5802541c
 8005354:	58025430 	.word	0x58025430
 8005358:	58025444 	.word	0x58025444
 800535c:	58025458 	.word	0x58025458
 8005360:	5802546c 	.word	0x5802546c
 8005364:	58025480 	.word	0x58025480
 8005368:	58025494 	.word	0x58025494
 800536c:	1600963f 	.word	0x1600963f
 8005370:	58025940 	.word	0x58025940
 8005374:	1000823f 	.word	0x1000823f
 8005378:	40020940 	.word	0x40020940

0800537c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0e3      	b.n	8005556 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2223      	movs	r2, #35	@ 0x23
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fb ff2b 	bl	80011fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005560 <HAL_ETH_Init+0x1e4>)
 80053a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053ac:	4a6c      	ldr	r2, [pc, #432]	@ (8005560 <HAL_ETH_Init+0x1e4>)
 80053ae:	f043 0302 	orr.w	r3, r3, #2
 80053b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005560 <HAL_ETH_Init+0x1e4>)
 80053b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7a1b      	ldrb	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d103      	bne.n	80053d4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053cc:	2000      	movs	r0, #0
 80053ce:	f7fd f899 	bl	8002504 <HAL_SYSCFG_ETHInterfaceSelect>
 80053d2:	e003      	b.n	80053dc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053d4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80053d8:	f7fd f894 	bl	8002504 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80053dc:	4b61      	ldr	r3, [pc, #388]	@ (8005564 <HAL_ETH_Init+0x1e8>)
 80053de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053f8:	f7fd f848 	bl	800248c <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053fe:	e011      	b.n	8005424 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005400:	f7fd f844 	bl	800248c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800540e:	d909      	bls.n	8005424 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2204      	movs	r2, #4
 8005414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	22e0      	movs	r2, #224	@ 0xe0
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e098      	b.n	8005556 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e4      	bne.n	8005400 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f89e 	bl	8005578 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800543c:	f001 ffca 	bl	80073d4 <HAL_RCC_GetHCLKFreq>
 8005440:	4603      	mov	r3, r0
 8005442:	4a49      	ldr	r2, [pc, #292]	@ (8005568 <HAL_ETH_Init+0x1ec>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	0c9a      	lsrs	r2, r3, #18
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3a01      	subs	r2, #1
 8005450:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fa81 	bl	800595c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005462:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005466:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005472:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005476:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	22e0      	movs	r2, #224	@ 0xe0
 8005492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e05d      	b.n	8005556 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054a6:	4b31      	ldr	r3, [pc, #196]	@ (800556c <HAL_ETH_Init+0x1f0>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6952      	ldr	r2, [r2, #20]
 80054ae:	0051      	lsls	r1, r2, #1
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054ba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fae9 	bl	8005a96 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb2f 	bl	8005b28 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	3305      	adds	r3, #5
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	4619      	mov	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	3303      	adds	r3, #3
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	061a      	lsls	r2, r3, #24
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	3302      	adds	r3, #2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	3301      	adds	r3, #1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005508:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005516:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005518:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <HAL_ETH_Init+0x1f4>)
 800552a:	430b      	orrs	r3, r1
 800552c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <HAL_ETH_Init+0x1f8>)
 800553e:	430b      	orrs	r3, r1
 8005540:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2210      	movs	r2, #16
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	58024400 	.word	0x58024400
 8005564:	58000400 	.word	0x58000400
 8005568:	431bde83 	.word	0x431bde83
 800556c:	ffff8001 	.word	0xffff8001
 8005570:	0c020060 	.word	0x0c020060
 8005574:	0c20c000 	.word	0x0c20c000

08005578 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005588:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005590:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005592:	f001 ff1f 	bl	80073d4 <HAL_RCC_GetHCLKFreq>
 8005596:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d804      	bhi.n	80055aa <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e022      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <HAL_ETH_SetMDIOClockRange+0x90>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d204      	bcs.n	80055bc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e019      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a13      	ldr	r2, [pc, #76]	@ (800560c <HAL_ETH_SetMDIOClockRange+0x94>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d915      	bls.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a12      	ldr	r2, [pc, #72]	@ (8005610 <HAL_ETH_SetMDIOClockRange+0x98>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d804      	bhi.n	80055d6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e00c      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005614 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d804      	bhi.n	80055e8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e003      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	02160ebf 	.word	0x02160ebf
 8005608:	03938700 	.word	0x03938700
 800560c:	05f5e0ff 	.word	0x05f5e0ff
 8005610:	08f0d17f 	.word	0x08f0d17f
 8005614:	0ee6b27f 	.word	0x0ee6b27f

08005618 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800562a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005632:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	7b1b      	ldrb	r3, [r3, #12]
 8005638:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800563a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	7b5b      	ldrb	r3, [r3, #13]
 8005640:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	7b9b      	ldrb	r3, [r3, #14]
 8005648:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800564a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	7bdb      	ldrb	r3, [r3, #15]
 8005650:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005652:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	7c12      	ldrb	r2, [r2, #16]
 8005658:	2a00      	cmp	r2, #0
 800565a:	d102      	bne.n	8005662 <ETH_SetMACConfig+0x4a>
 800565c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005660:	e000      	b.n	8005664 <ETH_SetMACConfig+0x4c>
 8005662:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005664:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	7c52      	ldrb	r2, [r2, #17]
 800566a:	2a00      	cmp	r2, #0
 800566c:	d102      	bne.n	8005674 <ETH_SetMACConfig+0x5c>
 800566e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005672:	e000      	b.n	8005676 <ETH_SetMACConfig+0x5e>
 8005674:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	7c9b      	ldrb	r3, [r3, #18]
 800567c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800567e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005684:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800568a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	7f1b      	ldrb	r3, [r3, #28]
 8005690:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	7f5b      	ldrb	r3, [r3, #29]
 8005698:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800569a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	7f92      	ldrb	r2, [r2, #30]
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	d102      	bne.n	80056aa <ETH_SetMACConfig+0x92>
 80056a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056a8:	e000      	b.n	80056ac <ETH_SetMACConfig+0x94>
 80056aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	7fdb      	ldrb	r3, [r3, #31]
 80056b2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80056bc:	2a00      	cmp	r2, #0
 80056be:	d102      	bne.n	80056c6 <ETH_SetMACConfig+0xae>
 80056c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056c4:	e000      	b.n	80056c8 <ETH_SetMACConfig+0xb0>
 80056c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056c8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80056d8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b56      	ldr	r3, [pc, #344]	@ (8005844 <ETH_SetMACConfig+0x22c>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	68f9      	ldr	r1, [r7, #12]
 80056f2:	430b      	orrs	r3, r1
 80056f4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005702:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005704:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800570c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800570e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005716:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005718:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005720:	2a00      	cmp	r2, #0
 8005722:	d102      	bne.n	800572a <ETH_SetMACConfig+0x112>
 8005724:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005728:	e000      	b.n	800572c <ETH_SetMACConfig+0x114>
 800572a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800572c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b42      	ldr	r3, [pc, #264]	@ (8005848 <ETH_SetMACConfig+0x230>)
 800573e:	4013      	ands	r3, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	430b      	orrs	r3, r1
 8005748:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005750:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	4b3a      	ldr	r3, [pc, #232]	@ (800584c <ETH_SetMACConfig+0x234>)
 8005762:	4013      	ands	r3, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	68f9      	ldr	r1, [r7, #12]
 800576a:	430b      	orrs	r3, r1
 800576c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005774:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800577a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005782:	2a00      	cmp	r2, #0
 8005784:	d101      	bne.n	800578a <ETH_SetMACConfig+0x172>
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	e000      	b.n	800578c <ETH_SetMACConfig+0x174>
 800578a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800578c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005792:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800579e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80057a2:	4013      	ands	r3, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80057b4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80057bc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ca:	f023 0103 	bic.w	r1, r3, #3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80057e2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80057fe:	2a00      	cmp	r2, #0
 8005800:	d101      	bne.n	8005806 <ETH_SetMACConfig+0x1ee>
 8005802:	2240      	movs	r2, #64	@ 0x40
 8005804:	e000      	b.n	8005808 <ETH_SetMACConfig+0x1f0>
 8005806:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005808:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005810:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005812:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800581a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005828:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	430a      	orrs	r2, r1
 8005834:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	00048083 	.word	0x00048083
 8005848:	c0f88000 	.word	0xc0f88000
 800584c:	fffffef0 	.word	0xfffffef0

08005850 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b38      	ldr	r3, [pc, #224]	@ (8005948 <ETH_SetDMAConfig+0xf8>)
 8005866:	4013      	ands	r3, r2
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	6811      	ldr	r1, [r2, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	430b      	orrs	r3, r1
 8005872:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005876:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005882:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	7b1b      	ldrb	r3, [r3, #12]
 8005888:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	4b2c      	ldr	r3, [pc, #176]	@ (800594c <ETH_SetDMAConfig+0xfc>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	430b      	orrs	r3, r1
 80058a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058a8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	7b5b      	ldrb	r3, [r3, #13]
 80058ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80058c4:	4b22      	ldr	r3, [pc, #136]	@ (8005950 <ETH_SetDMAConfig+0x100>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	430b      	orrs	r3, r1
 80058d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058d4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	7d1b      	ldrb	r3, [r3, #20]
 80058e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80058e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	7f5b      	ldrb	r3, [r3, #29]
 80058e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80058fa:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <ETH_SetDMAConfig+0x104>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	430b      	orrs	r3, r1
 8005906:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800590a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	7f1b      	ldrb	r3, [r3, #28]
 8005912:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005924:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <ETH_SetDMAConfig+0x108>)
 800592a:	4013      	ands	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	430b      	orrs	r3, r1
 8005934:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005938:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	ffff87fd 	.word	0xffff87fd
 800594c:	ffff2ffe 	.word	0xffff2ffe
 8005950:	fffec000 	.word	0xfffec000
 8005954:	ffc0efef 	.word	0xffc0efef
 8005958:	7fc0ffff 	.word	0x7fc0ffff

0800595c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b0a4      	sub	sp, #144	@ 0x90
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800596a:	2300      	movs	r3, #0
 800596c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005974:	2300      	movs	r3, #0
 8005976:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800599c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80059b4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80059b8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80059c0:	2300      	movs	r3, #0
 80059c2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80059d6:	2300      	movs	r3, #0
 80059d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80059de:	2300      	movs	r3, #0
 80059e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80059f4:	2320      	movs	r3, #32
 80059f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a06:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a36:	2300      	movs	r3, #0
 8005a38:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff fde6 	bl	8005618 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a50:	2301      	movs	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a66:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005a7c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005a80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005a82:	f107 0308 	add.w	r3, r7, #8
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fee1 	bl	8005850 <ETH_SetDMAConfig>
}
 8005a8e:	bf00      	nop
 8005a90:	3790      	adds	r7, #144	@ 0x90
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e01d      	b.n	8005ae0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68d9      	ldr	r1, [r3, #12]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	3206      	adds	r2, #6
 8005ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d9de      	bls.n	8005aa4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af4:	461a      	mov	r2, r3
 8005af6:	2303      	movs	r3, #3
 8005af8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b08:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b18:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e023      	b.n	8005b7e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6919      	ldr	r1, [r3, #16]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2200      	movs	r2, #0
 8005b64:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	3212      	adds	r2, #18
 8005b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d9d8      	bls.n	8005b36 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005baa:	461a      	mov	r2, r3
 8005bac:	2303      	movs	r3, #3
 8005bae:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bbe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	@ 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bf2:	4b89      	ldr	r3, [pc, #548]	@ (8005e18 <HAL_GPIO_Init+0x234>)
 8005bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bf6:	e194      	b.n	8005f22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	4013      	ands	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8186 	beq.w	8005f1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d005      	beq.n	8005c28 <HAL_GPIO_Init+0x44>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d130      	bne.n	8005c8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	2203      	movs	r2, #3
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c5e:	2201      	movs	r2, #1
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	f003 0201 	and.w	r2, r3, #1
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d017      	beq.n	8005cc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d123      	bne.n	8005d1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	08da      	lsrs	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3208      	adds	r2, #8
 8005cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	220f      	movs	r2, #15
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	2203      	movs	r2, #3
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0203 	and.w	r2, r3, #3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 80e0 	beq.w	8005f1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e1c <HAL_GPIO_Init+0x238>)
 8005d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d62:	4a2e      	ldr	r2, [pc, #184]	@ (8005e1c <HAL_GPIO_Init+0x238>)
 8005d64:	f043 0302 	orr.w	r3, r3, #2
 8005d68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e1c <HAL_GPIO_Init+0x238>)
 8005d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d7a:	4a29      	ldr	r2, [pc, #164]	@ (8005e20 <HAL_GPIO_Init+0x23c>)
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	089b      	lsrs	r3, r3, #2
 8005d80:	3302      	adds	r3, #2
 8005d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	220f      	movs	r2, #15
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43db      	mvns	r3, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a20      	ldr	r2, [pc, #128]	@ (8005e24 <HAL_GPIO_Init+0x240>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d052      	beq.n	8005e4c <HAL_GPIO_Init+0x268>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e28 <HAL_GPIO_Init+0x244>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d031      	beq.n	8005e12 <HAL_GPIO_Init+0x22e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e2c <HAL_GPIO_Init+0x248>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d02b      	beq.n	8005e0e <HAL_GPIO_Init+0x22a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e30 <HAL_GPIO_Init+0x24c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d025      	beq.n	8005e0a <HAL_GPIO_Init+0x226>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <HAL_GPIO_Init+0x250>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01f      	beq.n	8005e06 <HAL_GPIO_Init+0x222>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <HAL_GPIO_Init+0x254>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d019      	beq.n	8005e02 <HAL_GPIO_Init+0x21e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e3c <HAL_GPIO_Init+0x258>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <HAL_GPIO_Init+0x21a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	@ (8005e40 <HAL_GPIO_Init+0x25c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00d      	beq.n	8005dfa <HAL_GPIO_Init+0x216>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <HAL_GPIO_Init+0x260>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <HAL_GPIO_Init+0x212>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a17      	ldr	r2, [pc, #92]	@ (8005e48 <HAL_GPIO_Init+0x264>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d101      	bne.n	8005df2 <HAL_GPIO_Init+0x20e>
 8005dee:	2309      	movs	r3, #9
 8005df0:	e02d      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005df2:	230a      	movs	r3, #10
 8005df4:	e02b      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005df6:	2308      	movs	r3, #8
 8005df8:	e029      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005dfa:	2307      	movs	r3, #7
 8005dfc:	e027      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005dfe:	2306      	movs	r3, #6
 8005e00:	e025      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005e02:	2305      	movs	r3, #5
 8005e04:	e023      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005e06:	2304      	movs	r3, #4
 8005e08:	e021      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e01f      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e01d      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e01b      	b.n	8005e4e <HAL_GPIO_Init+0x26a>
 8005e16:	bf00      	nop
 8005e18:	58000080 	.word	0x58000080
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	58000400 	.word	0x58000400
 8005e24:	58020000 	.word	0x58020000
 8005e28:	58020400 	.word	0x58020400
 8005e2c:	58020800 	.word	0x58020800
 8005e30:	58020c00 	.word	0x58020c00
 8005e34:	58021000 	.word	0x58021000
 8005e38:	58021400 	.word	0x58021400
 8005e3c:	58021800 	.word	0x58021800
 8005e40:	58021c00 	.word	0x58021c00
 8005e44:	58022000 	.word	0x58022000
 8005e48:	58022400 	.word	0x58022400
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	f002 0203 	and.w	r2, r2, #3
 8005e54:	0092      	lsls	r2, r2, #2
 8005e56:	4093      	lsls	r3, r2
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e5e:	4938      	ldr	r1, [pc, #224]	@ (8005f40 <HAL_GPIO_Init+0x35c>)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	3302      	adds	r3, #2
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ec0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f ae63 	bne.w	8005bf8 <HAL_GPIO_Init+0x14>
  }
}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	3724      	adds	r7, #36	@ 0x24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	58000400 	.word	0x58000400

08005f44 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f4c:	4a08      	ldr	r2, [pc, #32]	@ (8005f70 <HAL_HSEM_FastTake+0x2c>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3320      	adds	r3, #32
 8005f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f56:	4a07      	ldr	r2, [pc, #28]	@ (8005f74 <HAL_HSEM_FastTake+0x30>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d101      	bne.n	8005f60 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	58026400 	.word	0x58026400
 8005f74:	80000300 	.word	0x80000300

08005f78 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f82:	4906      	ldr	r1, [pc, #24]	@ (8005f9c <HAL_HSEM_Release+0x24>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	58026400 	.word	0x58026400

08005fa0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_HSEM_ActivateNotification+0x20>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4904      	ldr	r1, [pc, #16]	@ (8005fc0 <HAL_HSEM_ActivateNotification+0x20>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
#endif
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58026500 	.word	0x58026500

08005fc4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005fca:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <HAL_HSEM_IRQHandler+0x30>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005fd0:	4b08      	ldr	r3, [pc, #32]	@ (8005ff4 <HAL_HSEM_IRQHandler+0x30>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	4906      	ldr	r1, [pc, #24]	@ (8005ff4 <HAL_HSEM_IRQHandler+0x30>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005fde:	4a05      	ldr	r2, [pc, #20]	@ (8005ff4 <HAL_HSEM_IRQHandler+0x30>)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fb fcdf 	bl	80019a8 <HAL_HSEM_FreeCallback>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	58026500 	.word	0x58026500

08005ff8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e041      	b.n	800608e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006012:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f245 5255 	movw	r2, #21845	@ 0x5555
 800601c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6852      	ldr	r2, [r2, #4]
 8006026:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6892      	ldr	r2, [r2, #8]
 8006030:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006032:	f7fc fa2b 	bl	800248c <HAL_GetTick>
 8006036:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006038:	e00f      	b.n	800605a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800603a:	f7fc fa27 	bl	800248c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b31      	cmp	r3, #49	@ 0x31
 8006046:	d908      	bls.n	800605a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e019      	b.n	800608e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e8      	bne.n	800603a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	429a      	cmp	r2, r3
 8006074:	d005      	beq.n	8006082 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68d2      	ldr	r2, [r2, #12]
 800607e:	611a      	str	r2, [r3, #16]
 8006080:	e004      	b.n	800608c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800608a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80060a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af02      	add	r7, sp, #8
 80060bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0fe      	b.n	80062c6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fc f8cf 	bl	8002280 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2203      	movs	r2, #3
 80060e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f005 fc42 	bl	800b978 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	7c1a      	ldrb	r2, [r3, #16]
 80060fc:	f88d 2000 	strb.w	r2, [sp]
 8006100:	3304      	adds	r3, #4
 8006102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006104:	f005 fbc6 	bl	800b894 <USB_CoreInit>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0d5      	b.n	80062c6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f005 fc3a 	bl	800b99a <USB_SetCurrentMode>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e0c6      	b.n	80062c6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006138:	2300      	movs	r3, #0
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e04a      	b.n	80061d4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	3315      	adds	r3, #21
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006152:	7bfa      	ldrb	r2, [r7, #15]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3314      	adds	r3, #20
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	b298      	uxth	r0, r3
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	332e      	adds	r3, #46	@ 0x2e
 800617a:	4602      	mov	r2, r0
 800617c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800617e:	7bfa      	ldrb	r2, [r7, #15]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3318      	adds	r3, #24
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	331c      	adds	r3, #28
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	3320      	adds	r3, #32
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	3324      	adds	r3, #36	@ 0x24
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	3301      	adds	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	791b      	ldrb	r3, [r3, #4]
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d3af      	bcc.n	800613e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e044      	b.n	800626e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800620c:	7bfa      	ldrb	r2, [r7, #15]
 800620e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006226:	7bfa      	ldrb	r2, [r7, #15]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	3301      	adds	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	791b      	ldrb	r3, [r3, #4]
 8006272:	7bfa      	ldrb	r2, [r7, #15]
 8006274:	429a      	cmp	r2, r3
 8006276:	d3b5      	bcc.n	80061e4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	7c1a      	ldrb	r2, [r3, #16]
 8006280:	f88d 2000 	strb.w	r2, [sp]
 8006284:	3304      	adds	r3, #4
 8006286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006288:	f005 fbd4 	bl	800ba34 <USB_DevInit>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e013      	b.n	80062c6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7b1b      	ldrb	r3, [r3, #12]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d102      	bne.n	80062ba <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f80b 	bl	80062d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f005 fd8f 	bl	800bde2 <USB_DevDisconnect>

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062fe:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_PCDEx_ActivateLPM+0x44>)
 8006300:	4313      	orrs	r3, r2
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	10000003 	.word	0x10000003

08006318 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006320:	4b29      	ldr	r3, [pc, #164]	@ (80063c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	2b06      	cmp	r3, #6
 800632a:	d00a      	beq.n	8006342 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800632c:	4b26      	ldr	r3, [pc, #152]	@ (80063c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d001      	beq.n	800633e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e040      	b.n	80063c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e03e      	b.n	80063c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006342:	4b21      	ldr	r3, [pc, #132]	@ (80063c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800634a:	491f      	ldr	r1, [pc, #124]	@ (80063c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4313      	orrs	r3, r2
 8006350:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006352:	f7fc f89b 	bl	800248c <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006358:	e009      	b.n	800636e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800635a:	f7fc f897 	bl	800248c <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006368:	d901      	bls.n	800636e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e028      	b.n	80063c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800636e:	4b16      	ldr	r3, [pc, #88]	@ (80063c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800637a:	d1ee      	bne.n	800635a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b1e      	cmp	r3, #30
 8006380:	d008      	beq.n	8006394 <HAL_PWREx_ConfigSupply+0x7c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b2e      	cmp	r3, #46	@ 0x2e
 8006386:	d005      	beq.n	8006394 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b1d      	cmp	r3, #29
 800638c:	d002      	beq.n	8006394 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b2d      	cmp	r3, #45	@ 0x2d
 8006392:	d114      	bne.n	80063be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006394:	f7fc f87a 	bl	800248c <HAL_GetTick>
 8006398:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800639a:	e009      	b.n	80063b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800639c:	f7fc f876 	bl	800248c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063aa:	d901      	bls.n	80063b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e007      	b.n	80063c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063b0:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d1ee      	bne.n	800639c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	58024800 	.word	0x58024800

080063cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a04      	ldr	r2, [pc, #16]	@ (80063e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063da:	60d3      	str	r3, [r2, #12]
}
 80063dc:	bf00      	nop
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	58024800 	.word	0x58024800

080063ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08c      	sub	sp, #48	@ 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f000 bc48 	b.w	8006c90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8088 	beq.w	800651e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640e:	4b99      	ldr	r3, [pc, #612]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006418:	4b96      	ldr	r3, [pc, #600]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	2b10      	cmp	r3, #16
 8006422:	d007      	beq.n	8006434 <HAL_RCC_OscConfig+0x48>
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	2b18      	cmp	r3, #24
 8006428:	d111      	bne.n	800644e <HAL_RCC_OscConfig+0x62>
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d10c      	bne.n	800644e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006434:	4b8f      	ldr	r3, [pc, #572]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d06d      	beq.n	800651c <HAL_RCC_OscConfig+0x130>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d169      	bne.n	800651c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f000 bc21 	b.w	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x7a>
 8006458:	4b86      	ldr	r3, [pc, #536]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a85      	ldr	r2, [pc, #532]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800645e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e02e      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x9c>
 800646e:	4b81      	ldr	r3, [pc, #516]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a80      	ldr	r2, [pc, #512]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b7e      	ldr	r3, [pc, #504]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a7d      	ldr	r2, [pc, #500]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e01d      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0xc0>
 8006492:	4b78      	ldr	r3, [pc, #480]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a77      	ldr	r2, [pc, #476]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b75      	ldr	r3, [pc, #468]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a74      	ldr	r2, [pc, #464]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0xd8>
 80064ac:	4b71      	ldr	r3, [pc, #452]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a70      	ldr	r2, [pc, #448]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b6e      	ldr	r3, [pc, #440]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6d      	ldr	r2, [pc, #436]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fb ffde 	bl	800248c <HAL_GetTick>
 80064d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fb ffda 	bl	800248c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	@ 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e3d4      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064e6:	4b63      	ldr	r3, [pc, #396]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0xe8>
 80064f2:	e014      	b.n	800651e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fb ffca 	bl	800248c <HAL_GetTick>
 80064f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fb ffc6 	bl	800248c <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	@ 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e3c0      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800650e:	4b59      	ldr	r3, [pc, #356]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x110>
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80ca 	beq.w	80066c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800652c:	4b51      	ldr	r3, [pc, #324]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006536:	4b4f      	ldr	r3, [pc, #316]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_RCC_OscConfig+0x166>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b18      	cmp	r3, #24
 8006546:	d156      	bne.n	80065f6 <HAL_RCC_OscConfig+0x20a>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d151      	bne.n	80065f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006552:	4b48      	ldr	r3, [pc, #288]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x17e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e392      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800656a:	4b42      	ldr	r3, [pc, #264]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 0219 	bic.w	r2, r3, #25
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	493f      	ldr	r1, [pc, #252]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fb ff86 	bl	800248c <HAL_GetTick>
 8006580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006584:	f7fb ff82 	bl	800248c <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e37c      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006596:	4b37      	ldr	r3, [pc, #220]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a2:	f7fb ffa3 	bl	80024ec <HAL_GetREVID>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d817      	bhi.n	80065e0 <HAL_RCC_OscConfig+0x1f4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	d108      	bne.n	80065ca <HAL_RCC_OscConfig+0x1de>
 80065b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065c8:	e07a      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	031b      	lsls	r3, r3, #12
 80065d8:	4926      	ldr	r1, [pc, #152]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065de:	e06f      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e0:	4b24      	ldr	r3, [pc, #144]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	4921      	ldr	r1, [pc, #132]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f4:	e064      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d047      	beq.n	800668e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 0219 	bic.w	r2, r3, #25
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	491a      	ldr	r1, [pc, #104]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fb ff3c 	bl	800248c <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006618:	f7fb ff38 	bl	800248c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e332      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800662a:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006636:	f7fb ff59 	bl	80024ec <HAL_GetREVID>
 800663a:	4603      	mov	r3, r0
 800663c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006640:	4293      	cmp	r3, r2
 8006642:	d819      	bhi.n	8006678 <HAL_RCC_OscConfig+0x28c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b40      	cmp	r3, #64	@ 0x40
 800664a:	d108      	bne.n	800665e <HAL_RCC_OscConfig+0x272>
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006654:	4a07      	ldr	r2, [pc, #28]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665a:	6053      	str	r3, [r2, #4]
 800665c:	e030      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	4901      	ldr	r1, [pc, #4]	@ (8006674 <HAL_RCC_OscConfig+0x288>)
 800666e:	4313      	orrs	r3, r2
 8006670:	604b      	str	r3, [r1, #4]
 8006672:	e025      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
 8006674:	58024400 	.word	0x58024400
 8006678:	4b9a      	ldr	r3, [pc, #616]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	4997      	ldr	r1, [pc, #604]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
 800668c:	e018      	b.n	80066c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668e:	4b95      	ldr	r3, [pc, #596]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a94      	ldr	r2, [pc, #592]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fb fef7 	bl	800248c <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a2:	f7fb fef3 	bl	800248c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e2ed      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066b4:	4b8b      	ldr	r3, [pc, #556]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80a9 	beq.w	8006820 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ce:	4b85      	ldr	r3, [pc, #532]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066d8:	4b82      	ldr	r3, [pc, #520]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d007      	beq.n	80066f4 <HAL_RCC_OscConfig+0x308>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b18      	cmp	r3, #24
 80066e8:	d13a      	bne.n	8006760 <HAL_RCC_OscConfig+0x374>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d135      	bne.n	8006760 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066f4:	4b7b      	ldr	r3, [pc, #492]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_RCC_OscConfig+0x320>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2b80      	cmp	r3, #128	@ 0x80
 8006706:	d001      	beq.n	800670c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e2c1      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800670c:	f7fb feee 	bl	80024ec <HAL_GetREVID>
 8006710:	4603      	mov	r3, r0
 8006712:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006716:	4293      	cmp	r3, r2
 8006718:	d817      	bhi.n	800674a <HAL_RCC_OscConfig+0x35e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	2b20      	cmp	r3, #32
 8006720:	d108      	bne.n	8006734 <HAL_RCC_OscConfig+0x348>
 8006722:	4b70      	ldr	r3, [pc, #448]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800672a:	4a6e      	ldr	r2, [pc, #440]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800672c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006730:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006732:	e075      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006734:	4b6b      	ldr	r3, [pc, #428]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	069b      	lsls	r3, r3, #26
 8006742:	4968      	ldr	r1, [pc, #416]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006748:	e06a      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800674a:	4b66      	ldr	r3, [pc, #408]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	4962      	ldr	r1, [pc, #392]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800675e:	e05f      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d042      	beq.n	80067ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006768:	4b5e      	ldr	r3, [pc, #376]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5d      	ldr	r2, [pc, #372]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fb fe8a 	bl	800248c <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800677c:	f7fb fe86 	bl	800248c <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e280      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800678e:	4b55      	ldr	r3, [pc, #340]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800679a:	f7fb fea7 	bl	80024ec <HAL_GetREVID>
 800679e:	4603      	mov	r3, r0
 80067a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d817      	bhi.n	80067d8 <HAL_RCC_OscConfig+0x3ec>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d108      	bne.n	80067c2 <HAL_RCC_OscConfig+0x3d6>
 80067b0:	4b4c      	ldr	r3, [pc, #304]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067b8:	4a4a      	ldr	r2, [pc, #296]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067be:	6053      	str	r3, [r2, #4]
 80067c0:	e02e      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
 80067c2:	4b48      	ldr	r3, [pc, #288]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	069b      	lsls	r3, r3, #26
 80067d0:	4944      	ldr	r1, [pc, #272]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	604b      	str	r3, [r1, #4]
 80067d6:	e023      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
 80067d8:	4b42      	ldr	r3, [pc, #264]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	493f      	ldr	r1, [pc, #252]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60cb      	str	r3, [r1, #12]
 80067ec:	e018      	b.n	8006820 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067ee:	4b3d      	ldr	r3, [pc, #244]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a3c      	ldr	r2, [pc, #240]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80067f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fb fe47 	bl	800248c <HAL_GetTick>
 80067fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006802:	f7fb fe43 	bl	800248c <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e23d      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006814:	4b33      	ldr	r3, [pc, #204]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d036      	beq.n	800689a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d019      	beq.n	8006868 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006834:	4b2b      	ldr	r3, [pc, #172]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006838:	4a2a      	ldr	r2, [pc, #168]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006840:	f7fb fe24 	bl	800248c <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006848:	f7fb fe20 	bl	800248c <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e21a      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800685a:	4b22      	ldr	r3, [pc, #136]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800685c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x45c>
 8006866:	e018      	b.n	800689a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006868:	4b1e      	ldr	r3, [pc, #120]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800686a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fb fe0a 	bl	800248c <HAL_GetTick>
 8006878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687c:	f7fb fe06 	bl	800248c <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e200      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800688e:	4b15      	ldr	r3, [pc, #84]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 8006890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d039      	beq.n	800691a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01c      	beq.n	80068e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068ae:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a0c      	ldr	r2, [pc, #48]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80068b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068ba:	f7fb fde7 	bl	800248c <HAL_GetTick>
 80068be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c2:	f7fb fde3 	bl	800248c <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e1dd      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068d4:	4b03      	ldr	r3, [pc, #12]	@ (80068e4 <HAL_RCC_OscConfig+0x4f8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x4d6>
 80068e0:	e01b      	b.n	800691a <HAL_RCC_OscConfig+0x52e>
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80068ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068f4:	f7fb fdca 	bl	800248c <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068fc:	f7fb fdc6 	bl	800248c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e1c0      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800690e:	4b92      	ldr	r3, [pc, #584]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8081 	beq.w	8006a2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006928:	4b8c      	ldr	r3, [pc, #560]	@ (8006b5c <HAL_RCC_OscConfig+0x770>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a8b      	ldr	r2, [pc, #556]	@ (8006b5c <HAL_RCC_OscConfig+0x770>)
 800692e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006934:	f7fb fdaa 	bl	800248c <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800693c:	f7fb fda6 	bl	800248c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b64      	cmp	r3, #100	@ 0x64
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e1a0      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694e:	4b83      	ldr	r3, [pc, #524]	@ (8006b5c <HAL_RCC_OscConfig+0x770>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0f0      	beq.n	800693c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d106      	bne.n	8006970 <HAL_RCC_OscConfig+0x584>
 8006962:	4b7d      	ldr	r3, [pc, #500]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	4a7c      	ldr	r2, [pc, #496]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6713      	str	r3, [r2, #112]	@ 0x70
 800696e:	e02d      	b.n	80069cc <HAL_RCC_OscConfig+0x5e0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10c      	bne.n	8006992 <HAL_RCC_OscConfig+0x5a6>
 8006978:	4b77      	ldr	r3, [pc, #476]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	4a76      	ldr	r2, [pc, #472]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	6713      	str	r3, [r2, #112]	@ 0x70
 8006984:	4b74      	ldr	r3, [pc, #464]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	4a73      	ldr	r2, [pc, #460]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800698a:	f023 0304 	bic.w	r3, r3, #4
 800698e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006990:	e01c      	b.n	80069cc <HAL_RCC_OscConfig+0x5e0>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b05      	cmp	r3, #5
 8006998:	d10c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x5c8>
 800699a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a6e      	ldr	r2, [pc, #440]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b2:	e00b      	b.n	80069cc <HAL_RCC_OscConfig+0x5e0>
 80069b4:	4b68      	ldr	r3, [pc, #416]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b8:	4a67      	ldr	r2, [pc, #412]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c0:	4b65      	ldr	r3, [pc, #404]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c4:	4a64      	ldr	r2, [pc, #400]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d015      	beq.n	8006a00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fb fd5a 	bl	800248c <HAL_GetTick>
 80069d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fb fd56 	bl	800248c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e14e      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069f2:	4b59      	ldr	r3, [pc, #356]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ee      	beq.n	80069dc <HAL_RCC_OscConfig+0x5f0>
 80069fe:	e014      	b.n	8006a2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fb fd44 	bl	800248c <HAL_GetTick>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a08:	f7fb fd40 	bl	800248c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e138      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1ee      	bne.n	8006a08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 812d 	beq.w	8006c8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a34:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a3c:	2b18      	cmp	r3, #24
 8006a3e:	f000 80bd 	beq.w	8006bbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	f040 809e 	bne.w	8006b88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4c:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a41      	ldr	r2, [pc, #260]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fb fd18 	bl	800248c <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a60:	f7fb fd14 	bl	800248c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e10e      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a72:	4b39      	ldr	r3, [pc, #228]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a7e:	4b36      	ldr	r3, [pc, #216]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a82:	4b37      	ldr	r3, [pc, #220]	@ (8006b60 <HAL_RCC_OscConfig+0x774>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a8e:	0112      	lsls	r2, r2, #4
 8006a90:	430a      	orrs	r2, r1
 8006a92:	4931      	ldr	r1, [pc, #196]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	025b      	lsls	r3, r3, #9
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	041b      	lsls	r3, r3, #16
 8006ab6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ac8:	4923      	ldr	r1, [pc, #140]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ace:	4b22      	ldr	r3, [pc, #136]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	4a21      	ldr	r2, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ada:	4b1f      	ldr	r3, [pc, #124]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ade:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <HAL_RCC_OscConfig+0x778>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ae6:	00d2      	lsls	r2, r2, #3
 8006ae8:	491b      	ldr	r1, [pc, #108]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006aee:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	f023 020c 	bic.w	r2, r3, #12
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	4917      	ldr	r1, [pc, #92]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b00:	4b15      	ldr	r3, [pc, #84]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	f023 0202 	bic.w	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0c:	4912      	ldr	r1, [pc, #72]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b12:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	4a10      	ldr	r2, [pc, #64]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a0d      	ldr	r2, [pc, #52]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b36:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a07      	ldr	r2, [pc, #28]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b42:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a04      	ldr	r2, [pc, #16]	@ (8006b58 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4e:	f7fb fc9d 	bl	800248c <HAL_GetTick>
 8006b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b54:	e011      	b.n	8006b7a <HAL_RCC_OscConfig+0x78e>
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	58024800 	.word	0x58024800
 8006b60:	fffffc0c 	.word	0xfffffc0c
 8006b64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b68:	f7fb fc90 	bl	800248c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e08a      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b7a:	4b47      	ldr	r3, [pc, #284]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0x77c>
 8006b86:	e082      	b.n	8006c8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b88:	4b43      	ldr	r3, [pc, #268]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a42      	ldr	r2, [pc, #264]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b94:	f7fb fc7a 	bl	800248c <HAL_GetTick>
 8006b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fb fc76 	bl	800248c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e070      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bae:	4b3a      	ldr	r3, [pc, #232]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x7b0>
 8006bba:	e068      	b.n	8006c8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bbc:	4b36      	ldr	r3, [pc, #216]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bc2:	4b35      	ldr	r3, [pc, #212]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d031      	beq.n	8006c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f003 0203 	and.w	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d12a      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d122      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d11a      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	0a5b      	lsrs	r3, r3, #9
 8006c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d111      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d108      	bne.n	8006c34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e02b      	b.n	8006c90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c38:	4b17      	ldr	r3, [pc, #92]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d01f      	beq.n	8006c8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c4e:	4b12      	ldr	r3, [pc, #72]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	4a11      	ldr	r2, [pc, #68]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c5a:	f7fb fc17 	bl	800248c <HAL_GetTick>
 8006c5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c60:	bf00      	nop
 8006c62:	f7fb fc13 	bl	800248c <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d0f9      	beq.n	8006c62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c72:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <HAL_RCC_OscConfig+0x8b0>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c7a:	00d2      	lsls	r2, r2, #3
 8006c7c:	4906      	ldr	r1, [pc, #24]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c82:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	4a04      	ldr	r2, [pc, #16]	@ (8006c98 <HAL_RCC_OscConfig+0x8ac>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	@ 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	ffff0007 	.word	0xffff0007

08006ca0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e19c      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d910      	bls.n	8006ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc2:	4b87      	ldr	r3, [pc, #540]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f023 020f 	bic.w	r2, r3, #15
 8006cca:	4985      	ldr	r1, [pc, #532]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd2:	4b83      	ldr	r3, [pc, #524]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e184      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d010      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d908      	bls.n	8006d12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d00:	4b78      	ldr	r3, [pc, #480]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	4975      	ldr	r1, [pc, #468]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d010      	beq.n	8006d40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	4b70      	ldr	r3, [pc, #448]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d908      	bls.n	8006d40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	496a      	ldr	r1, [pc, #424]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	4b64      	ldr	r3, [pc, #400]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d908      	bls.n	8006d6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d5c:	4b61      	ldr	r3, [pc, #388]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	495e      	ldr	r1, [pc, #376]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	4b59      	ldr	r3, [pc, #356]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d908      	bls.n	8006d9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d8a:	4b56      	ldr	r3, [pc, #344]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4953      	ldr	r1, [pc, #332]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	4b4d      	ldr	r3, [pc, #308]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d908      	bls.n	8006dca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db8:	4b4a      	ldr	r3, [pc, #296]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f023 020f 	bic.w	r2, r3, #15
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4947      	ldr	r1, [pc, #284]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d055      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dd6:	4b43      	ldr	r3, [pc, #268]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4940      	ldr	r1, [pc, #256]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006df0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d121      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0f6      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e08:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d115      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0ea      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e20:	4b30      	ldr	r3, [pc, #192]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d109      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0de      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e30:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0d6      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e40:	4b28      	ldr	r3, [pc, #160]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f023 0207 	bic.w	r2, r3, #7
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4925      	ldr	r1, [pc, #148]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e52:	f7fb fb1b 	bl	800248c <HAL_GetTick>
 8006e56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e58:	e00a      	b.n	8006e70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e5a:	f7fb fb17 	bl	800248c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0be      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e70:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d1eb      	bne.n	8006e5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d208      	bcs.n	8006eb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f023 020f 	bic.w	r2, r3, #15
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	490e      	ldr	r1, [pc, #56]	@ (8006ee4 <HAL_RCC_ClockConfig+0x244>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d214      	bcs.n	8006ee8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b08      	ldr	r3, [pc, #32]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 020f 	bic.w	r2, r3, #15
 8006ec6:	4906      	ldr	r1, [pc, #24]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ece:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <HAL_RCC_ClockConfig+0x240>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e086      	b.n	8006fee <HAL_RCC_ClockConfig+0x34e>
 8006ee0:	52002000 	.word	0x52002000
 8006ee4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d010      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d208      	bcs.n	8006f16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f04:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	4939      	ldr	r1, [pc, #228]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	4b34      	ldr	r3, [pc, #208]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d208      	bcs.n	8006f44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f32:	4b31      	ldr	r3, [pc, #196]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	492e      	ldr	r1, [pc, #184]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d208      	bcs.n	8006f72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f60:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4922      	ldr	r1, [pc, #136]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d010      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d208      	bcs.n	8006fa0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	4917      	ldr	r1, [pc, #92]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fa0:	f000 f89e 	bl	80070e0 <HAL_RCC_GetSysClockFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b14      	ldr	r3, [pc, #80]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	4912      	ldr	r1, [pc, #72]	@ (8006ffc <HAL_RCC_ClockConfig+0x35c>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006ffc <HAL_RCC_ClockConfig+0x35c>)
 8006fc8:	5cd3      	ldrb	r3, [r2, r3]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007000 <HAL_RCC_ClockConfig+0x360>)
 8006fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8007004 <HAL_RCC_ClockConfig+0x364>)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006fde:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <HAL_RCC_ClockConfig+0x368>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fa fe82 	bl	8001cec <HAL_InitTick>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	0801dd58 	.word	0x0801dd58
 8007000:	24000004 	.word	0x24000004
 8007004:	24000000 	.word	0x24000000
 8007008:	2400000c 	.word	0x2400000c

0800700c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	@ 0x30
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d12a      	bne.n	8007074 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800701e:	4b2d      	ldr	r3, [pc, #180]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 8007020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007024:	4a2b      	ldr	r2, [pc, #172]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800702e:	4b29      	ldr	r3, [pc, #164]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 8007030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800703c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007042:	2302      	movs	r3, #2
 8007044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007046:	2303      	movs	r3, #3
 8007048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704a:	2300      	movs	r3, #0
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800704e:	2300      	movs	r3, #0
 8007050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007052:	f107 031c 	add.w	r3, r7, #28
 8007056:	4619      	mov	r1, r3
 8007058:	481f      	ldr	r0, [pc, #124]	@ (80070d8 <HAL_RCC_MCOConfig+0xcc>)
 800705a:	f7fe fdc3 	bl	8005be4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800705e:	4b1d      	ldr	r3, [pc, #116]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	430b      	orrs	r3, r1
 800706c:	4919      	ldr	r1, [pc, #100]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 800706e:	4313      	orrs	r3, r2
 8007070:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007072:	e02a      	b.n	80070ca <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007074:	4b17      	ldr	r3, [pc, #92]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 8007076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800707a:	4a16      	ldr	r2, [pc, #88]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 800707c:	f043 0304 	orr.w	r3, r3, #4
 8007080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007084:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 8007086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007092:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007098:	2302      	movs	r3, #2
 800709a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800709c:	2303      	movs	r3, #3
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80070a4:	2300      	movs	r3, #0
 80070a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80070a8:	f107 031c 	add.w	r3, r7, #28
 80070ac:	4619      	mov	r1, r3
 80070ae:	480b      	ldr	r0, [pc, #44]	@ (80070dc <HAL_RCC_MCOConfig+0xd0>)
 80070b0:	f7fe fd98 	bl	8005be4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80070b4:	4b07      	ldr	r3, [pc, #28]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	01d9      	lsls	r1, r3, #7
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	430b      	orrs	r3, r1
 80070c4:	4903      	ldr	r1, [pc, #12]	@ (80070d4 <HAL_RCC_MCOConfig+0xc8>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	610b      	str	r3, [r1, #16]
}
 80070ca:	bf00      	nop
 80070cc:	3730      	adds	r7, #48	@ 0x30
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
 80070d8:	58020000 	.word	0x58020000
 80070dc:	58020800 	.word	0x58020800

080070e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b089      	sub	sp, #36	@ 0x24
 80070e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070e6:	4bb3      	ldr	r3, [pc, #716]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ee:	2b18      	cmp	r3, #24
 80070f0:	f200 8155 	bhi.w	800739e <HAL_RCC_GetSysClockFreq+0x2be>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007161 	.word	0x08007161
 8007100:	0800739f 	.word	0x0800739f
 8007104:	0800739f 	.word	0x0800739f
 8007108:	0800739f 	.word	0x0800739f
 800710c:	0800739f 	.word	0x0800739f
 8007110:	0800739f 	.word	0x0800739f
 8007114:	0800739f 	.word	0x0800739f
 8007118:	0800739f 	.word	0x0800739f
 800711c:	08007187 	.word	0x08007187
 8007120:	0800739f 	.word	0x0800739f
 8007124:	0800739f 	.word	0x0800739f
 8007128:	0800739f 	.word	0x0800739f
 800712c:	0800739f 	.word	0x0800739f
 8007130:	0800739f 	.word	0x0800739f
 8007134:	0800739f 	.word	0x0800739f
 8007138:	0800739f 	.word	0x0800739f
 800713c:	0800718d 	.word	0x0800718d
 8007140:	0800739f 	.word	0x0800739f
 8007144:	0800739f 	.word	0x0800739f
 8007148:	0800739f 	.word	0x0800739f
 800714c:	0800739f 	.word	0x0800739f
 8007150:	0800739f 	.word	0x0800739f
 8007154:	0800739f 	.word	0x0800739f
 8007158:	0800739f 	.word	0x0800739f
 800715c:	08007193 	.word	0x08007193
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007160:	4b94      	ldr	r3, [pc, #592]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800716c:	4b91      	ldr	r3, [pc, #580]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	08db      	lsrs	r3, r3, #3
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	4a90      	ldr	r2, [pc, #576]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800717e:	e111      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007180:	4b8d      	ldr	r3, [pc, #564]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007182:	61bb      	str	r3, [r7, #24]
      break;
 8007184:	e10e      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007186:	4b8d      	ldr	r3, [pc, #564]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007188:	61bb      	str	r3, [r7, #24]
      break;
 800718a:	e10b      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800718c:	4b8c      	ldr	r3, [pc, #560]	@ (80073c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800718e:	61bb      	str	r3, [r7, #24]
      break;
 8007190:	e108      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007192:	4b88      	ldr	r3, [pc, #544]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800719c:	4b85      	ldr	r3, [pc, #532]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	091b      	lsrs	r3, r3, #4
 80071a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071a8:	4b82      	ldr	r3, [pc, #520]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80071b2:	4b80      	ldr	r3, [pc, #512]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b6:	08db      	lsrs	r3, r3, #3
 80071b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80e1 	beq.w	8007398 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	f000 8083 	beq.w	80072e4 <HAL_RCC_GetSysClockFreq+0x204>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	f200 80a1 	bhi.w	8007328 <HAL_RCC_GetSysClockFreq+0x248>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCC_GetSysClockFreq+0x114>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d056      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80071f2:	e099      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f4:	4b6f      	ldr	r3, [pc, #444]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02d      	beq.n	800725c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007200:	4b6c      	ldr	r3, [pc, #432]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	08db      	lsrs	r3, r3, #3
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	4a6b      	ldr	r2, [pc, #428]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
 8007210:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b62      	ldr	r3, [pc, #392]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a02 	vldr	s12, [r7, #8]
 800723e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80073c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800725a:	e087      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80073c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b51      	ldr	r3, [pc, #324]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007282:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80073c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800729e:	e065      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80073cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b40      	ldr	r3, [pc, #256]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80073c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072e2:	e043      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b2f      	ldr	r3, [pc, #188]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a02 	vldr	s12, [r7, #8]
 800730a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80073c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007326:	e021      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80073cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b1e      	ldr	r3, [pc, #120]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a02 	vldr	s12, [r7, #8]
 800734e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80073c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800736a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800736c:	4b11      	ldr	r3, [pc, #68]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800736e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007370:	0a5b      	lsrs	r3, r3, #9
 8007372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007376:	3301      	adds	r3, #1
 8007378:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007384:	edd7 6a07 	vldr	s13, [r7, #28]
 8007388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007390:	ee17 3a90 	vmov	r3, s15
 8007394:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007396:	e005      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	61bb      	str	r3, [r7, #24]
      break;
 800739c:	e002      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800739e:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073a0:	61bb      	str	r3, [r7, #24]
      break;
 80073a2:	bf00      	nop
  }

  return sysclockfreq;
 80073a4:	69bb      	ldr	r3, [r7, #24]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3724      	adds	r7, #36	@ 0x24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
 80073b8:	03d09000 	.word	0x03d09000
 80073bc:	003d0900 	.word	0x003d0900
 80073c0:	007a1200 	.word	0x007a1200
 80073c4:	46000000 	.word	0x46000000
 80073c8:	4c742400 	.word	0x4c742400
 80073cc:	4a742400 	.word	0x4a742400
 80073d0:	4af42400 	.word	0x4af42400

080073d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073da:	f7ff fe81 	bl	80070e0 <HAL_RCC_GetSysClockFreq>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <HAL_RCC_GetHCLKFreq+0x50>)
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	490f      	ldr	r1, [pc, #60]	@ (8007428 <HAL_RCC_GetHCLKFreq+0x54>)
 80073ec:	5ccb      	ldrb	r3, [r1, r3]
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	fa22 f303 	lsr.w	r3, r2, r3
 80073f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <HAL_RCC_GetHCLKFreq+0x50>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	4a09      	ldr	r2, [pc, #36]	@ (8007428 <HAL_RCC_GetHCLKFreq+0x54>)
 8007402:	5cd3      	ldrb	r3, [r2, r3]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	4a07      	ldr	r2, [pc, #28]	@ (800742c <HAL_RCC_GetHCLKFreq+0x58>)
 8007410:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007412:	4a07      	ldr	r2, [pc, #28]	@ (8007430 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007418:	4b04      	ldr	r3, [pc, #16]	@ (800742c <HAL_RCC_GetHCLKFreq+0x58>)
 800741a:	681b      	ldr	r3, [r3, #0]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	58024400 	.word	0x58024400
 8007428:	0801dd58 	.word	0x0801dd58
 800742c:	24000004 	.word	0x24000004
 8007430:	24000000 	.word	0x24000000

08007434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007438:	f7ff ffcc 	bl	80073d4 <HAL_RCC_GetHCLKFreq>
 800743c:	4602      	mov	r2, r0
 800743e:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	091b      	lsrs	r3, r3, #4
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	4904      	ldr	r1, [pc, #16]	@ (800745c <HAL_RCC_GetPCLK1Freq+0x28>)
 800744a:	5ccb      	ldrb	r3, [r1, r3]
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007454:	4618      	mov	r0, r3
 8007456:	bd80      	pop	{r7, pc}
 8007458:	58024400 	.word	0x58024400
 800745c:	0801dd58 	.word	0x0801dd58

08007460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007464:	f7ff ffb6 	bl	80073d4 <HAL_RCC_GetHCLKFreq>
 8007468:	4602      	mov	r2, r0
 800746a:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	0a1b      	lsrs	r3, r3, #8
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	4904      	ldr	r1, [pc, #16]	@ (8007488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007476:	5ccb      	ldrb	r3, [r1, r3]
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007480:	4618      	mov	r0, r3
 8007482:	bd80      	pop	{r7, pc}
 8007484:	58024400 	.word	0x58024400
 8007488:	0801dd58 	.word	0x0801dd58

0800748c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	223f      	movs	r2, #63	@ 0x3f
 800749a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800749c:	4b1a      	ldr	r3, [pc, #104]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0207 	and.w	r2, r3, #7
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80074a8:	4b17      	ldr	r3, [pc, #92]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80074b4:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	f003 020f 	and.w	r2, r3, #15
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80074c0:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80074cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80074d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80074e4:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <HAL_RCC_GetClockConfig+0x7c>)
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074f0:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCC_GetClockConfig+0x80>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 020f 	and.w	r2, r3, #15
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	601a      	str	r2, [r3, #0]
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	58024400 	.word	0x58024400
 800750c:	52002000 	.word	0x52002000

08007510 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007514:	b0ca      	sub	sp, #296	@ 0x128
 8007516:	af00      	add	r7, sp, #0
 8007518:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007522:	2300      	movs	r3, #0
 8007524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007534:	2500      	movs	r5, #0
 8007536:	ea54 0305 	orrs.w	r3, r4, r5
 800753a:	d049      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007542:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007546:	d02f      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007548:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800754c:	d828      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800754e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007552:	d01a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007558:	d822      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007562:	d007      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007564:	e01c      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007566:	4bb8      	ldr	r3, [pc, #736]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	4ab7      	ldr	r2, [pc, #732]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800756c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007572:	e01a      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	3308      	adds	r3, #8
 800757a:	2102      	movs	r1, #2
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fc8f 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007588:	e00f      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	3328      	adds	r3, #40	@ 0x28
 8007590:	2102      	movs	r1, #2
 8007592:	4618      	mov	r0, r3
 8007594:	f001 fd36 	bl	8009004 <RCCEx_PLL3_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800759e:	e004      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075b2:	4ba5      	ldr	r3, [pc, #660]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075c0:	4aa1      	ldr	r2, [pc, #644]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075c2:	430b      	orrs	r3, r1
 80075c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80075c6:	e003      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	ea58 0309 	orrs.w	r3, r8, r9
 80075e4:	d047      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d82a      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075f0:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800760d 	.word	0x0800760d
 80075fc:	0800761b 	.word	0x0800761b
 8007600:	08007631 	.word	0x08007631
 8007604:	0800764f 	.word	0x0800764f
 8007608:	0800764f 	.word	0x0800764f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760c:	4b8e      	ldr	r3, [pc, #568]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	4a8d      	ldr	r2, [pc, #564]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007618:	e01a      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	3308      	adds	r3, #8
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f001 fc3c 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800762e:	e00f      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007634:	3328      	adds	r3, #40	@ 0x28
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fce3 	bl	8009004 <RCCEx_PLL3_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007644:	e004      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800764c:	e000      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800764e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007658:	4b7b      	ldr	r3, [pc, #492]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800765a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800765c:	f023 0107 	bic.w	r1, r3, #7
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007666:	4a78      	ldr	r2, [pc, #480]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007668:	430b      	orrs	r3, r1
 800766a:	6513      	str	r3, [r2, #80]	@ 0x50
 800766c:	e003      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007682:	f04f 0b00 	mov.w	fp, #0
 8007686:	ea5a 030b 	orrs.w	r3, sl, fp
 800768a:	d04c      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007696:	d030      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769c:	d829      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800769e:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a0:	d02d      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80076a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a4:	d825      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076a6:	2b80      	cmp	r3, #128	@ 0x80
 80076a8:	d018      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80076aa:	2b80      	cmp	r3, #128	@ 0x80
 80076ac:	d821      	bhi.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d007      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076b6:	e01c      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b8:	4b63      	ldr	r3, [pc, #396]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a62      	ldr	r2, [pc, #392]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076c4:	e01c      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ca:	3308      	adds	r3, #8
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fbe6 	bl	8008ea0 <RCCEx_PLL2_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076da:	e011      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e0:	3328      	adds	r3, #40	@ 0x28
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 fc8d 	bl	8009004 <RCCEx_PLL3_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076f0:	e006      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076f8:	e002      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007708:	4b4f      	ldr	r3, [pc, #316]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007716:	4a4c      	ldr	r2, [pc, #304]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007718:	430b      	orrs	r3, r1
 800771a:	6513      	str	r3, [r2, #80]	@ 0x50
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007732:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800773c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007740:	460b      	mov	r3, r1
 8007742:	4313      	orrs	r3, r2
 8007744:	d053      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800774e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007752:	d035      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007758:	d82e      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800775a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800775e:	d031      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007760:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007764:	d828      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800776a:	d01a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800776c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007770:	d822      	bhi.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800777a:	d007      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800777c:	e01c      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777e:	4b32      	ldr	r3, [pc, #200]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	4a31      	ldr	r2, [pc, #196]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007788:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800778a:	e01c      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	3308      	adds	r3, #8
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fb83 	bl	8008ea0 <RCCEx_PLL2_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077a0:	e011      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	3328      	adds	r3, #40	@ 0x28
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fc2a 	bl	8009004 <RCCEx_PLL3_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077b6:	e006      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077be:	e002      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077de:	4a1a      	ldr	r2, [pc, #104]	@ (8007848 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007804:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d056      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007816:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781a:	d038      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800781c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007820:	d831      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007822:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007826:	d034      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007828:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800782c:	d82b      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800782e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007832:	d01d      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007834:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007838:	d825      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d006      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800783e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007842:	d00a      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007844:	e01f      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007846:	bf00      	nop
 8007848:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784c:	4ba2      	ldr	r3, [pc, #648]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007850:	4aa1      	ldr	r2, [pc, #644]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007858:	e01c      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785e:	3308      	adds	r3, #8
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fb1c 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007874:	3328      	adds	r3, #40	@ 0x28
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fbc3 	bl	8009004 <RCCEx_PLL3_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007884:	e006      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800788c:	e002      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800789c:	4b8e      	ldr	r3, [pc, #568]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800789e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078ac:	4a8a      	ldr	r2, [pc, #552]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d03a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e2:	2b30      	cmp	r3, #48	@ 0x30
 80078e4:	d01f      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078e6:	2b30      	cmp	r3, #48	@ 0x30
 80078e8:	d819      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d00c      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d815      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d019      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d111      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fa:	4b77      	ldr	r3, [pc, #476]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	4a76      	ldr	r2, [pc, #472]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007906:	e011      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790c:	3308      	adds	r3, #8
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fac5 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800791c:	e006      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007924:	e002      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800792a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007934:	4b68      	ldr	r3, [pc, #416]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007938:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007942:	4a65      	ldr	r2, [pc, #404]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007944:	430b      	orrs	r3, r1
 8007946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007948:	e003      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800795e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007962:	2300      	movs	r3, #0
 8007964:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007968:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d051      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800797c:	d035      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800797e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007982:	d82e      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007984:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007988:	d031      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800798a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800798e:	d828      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007994:	d01a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800799a:	d822      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a4:	d007      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80079a6:	e01c      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a8:	4b4b      	ldr	r3, [pc, #300]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	4a4a      	ldr	r2, [pc, #296]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079b4:	e01c      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	3308      	adds	r3, #8
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fa6e 	bl	8008ea0 <RCCEx_PLL2_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079ca:	e011      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	3328      	adds	r3, #40	@ 0x28
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fb15 	bl	8009004 <RCCEx_PLL3_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079e0:	e006      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079e8:	e002      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079ea:	bf00      	nop
 80079ec:	e000      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079f8:	4b37      	ldr	r3, [pc, #220]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a06:	4a34      	ldr	r2, [pc, #208]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a0c:	e003      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a30:	460b      	mov	r3, r1
 8007a32:	4313      	orrs	r3, r2
 8007a34:	d056      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a40:	d033      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a46:	d82c      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a4c:	d02f      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a52:	d826      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a58:	d02b      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a5e:	d820      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a64:	d012      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a6a:	d81a      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d022      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a74:	d115      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f001 fa0e 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a8a:	e015      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	3328      	adds	r3, #40	@ 0x28
 8007a92:	2101      	movs	r1, #1
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 fab5 	bl	8009004 <RCCEx_PLL3_Config>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007aa0:	e00a      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aa8:	e006      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e004      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10d      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ac0:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ace:	4a02      	ldr	r2, [pc, #8]	@ (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ad4:	e006      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ad6:	bf00      	nop
 8007ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007af0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007afa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d055      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b10:	d033      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b16:	d82c      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1c:	d02f      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b22:	d826      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b28:	d02b      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b2e:	d820      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b34:	d012      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b3a:	d81a      	bhi.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d022      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b44:	d115      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f9a6 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b5a:	e015      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b60:	3328      	adds	r3, #40	@ 0x28
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 fa4d 	bl	8009004 <RCCEx_PLL3_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b70:	e00a      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b78:	e006      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b7a:	bf00      	nop
 8007b7c:	e004      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b7e:	bf00      	nop
 8007b80:	e002      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b82:	bf00      	nop
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b90:	4ba3      	ldr	r3, [pc, #652]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ba0:	4a9f      	ldr	r2, [pc, #636]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ba6:	e003      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	d037      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bda:	d00e      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be0:	d816      	bhi.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d018      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bea:	d111      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bec:	4b8c      	ldr	r3, [pc, #560]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf0:	4a8b      	ldr	r2, [pc, #556]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bf8:	e00f      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	3308      	adds	r3, #8
 8007c00:	2101      	movs	r1, #1
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 f94c 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c0e:	e004      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c16:	e000      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c22:	4b7f      	ldr	r3, [pc, #508]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c30:	4a7b      	ldr	r2, [pc, #492]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c32:	430b      	orrs	r3, r1
 8007c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c36:	e003      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	d039      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d81c      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007cad 	.word	0x08007cad
 8007c74:	08007c81 	.word	0x08007c81
 8007c78:	08007c8f 	.word	0x08007c8f
 8007c7c:	08007cad 	.word	0x08007cad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c80:	4b67      	ldr	r3, [pc, #412]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	4a66      	ldr	r2, [pc, #408]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c8c:	e00f      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	3308      	adds	r3, #8
 8007c94:	2102      	movs	r1, #2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f001 f902 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ca2:	e004      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007caa:	e000      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cba:	f023 0103 	bic.w	r1, r3, #3
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc4:	4a56      	ldr	r2, [pc, #344]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f000 809f 	beq.w	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d02:	f7fa fbc3 	bl	800248c <HAL_GetTick>
 8007d06:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0a:	e00b      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d0c:	f7fa fbbe 	bl	800248c <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b64      	cmp	r3, #100	@ 0x64
 8007d1a:	d903      	bls.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d22:	e005      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d24:	4b3f      	ldr	r3, [pc, #252]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0ed      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d179      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d38:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d44:	4053      	eors	r3, r2
 8007d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d015      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d4e:	4b34      	ldr	r3, [pc, #208]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d5a:	4b31      	ldr	r3, [pc, #196]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	4a30      	ldr	r2, [pc, #192]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d66:	4b2e      	ldr	r3, [pc, #184]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d72:	4a2b      	ldr	r2, [pc, #172]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d86:	d118      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7fa fb80 	bl	800248c <HAL_GetTick>
 8007d8c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d90:	e00d      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d92:	f7fa fb7b 	bl	800248c <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007dac:	e005      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dae:	4b1c      	ldr	r3, [pc, #112]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0eb      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d129      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dd2:	d10e      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007dd4:	4b12      	ldr	r3, [pc, #72]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007de4:	091a      	lsrs	r2, r3, #4
 8007de6:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	4a0d      	ldr	r2, [pc, #52]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6113      	str	r3, [r2, #16]
 8007df0:	e005      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007df2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	4a0a      	ldr	r2, [pc, #40]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007dfc:	6113      	str	r3, [r2, #16]
 8007dfe:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e0e:	4a04      	ldr	r2, [pc, #16]	@ (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e14:	e00e      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e1e:	e009      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e20:	58024400 	.word	0x58024400
 8007e24:	58024800 	.word	0x58024800
 8007e28:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f002 0301 	and.w	r3, r2, #1
 8007e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f000 8089 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e5c:	2b28      	cmp	r3, #40	@ 0x28
 8007e5e:	d86b      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e60:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007f41 	.word	0x08007f41
 8007e6c:	08007f39 	.word	0x08007f39
 8007e70:	08007f39 	.word	0x08007f39
 8007e74:	08007f39 	.word	0x08007f39
 8007e78:	08007f39 	.word	0x08007f39
 8007e7c:	08007f39 	.word	0x08007f39
 8007e80:	08007f39 	.word	0x08007f39
 8007e84:	08007f39 	.word	0x08007f39
 8007e88:	08007f0d 	.word	0x08007f0d
 8007e8c:	08007f39 	.word	0x08007f39
 8007e90:	08007f39 	.word	0x08007f39
 8007e94:	08007f39 	.word	0x08007f39
 8007e98:	08007f39 	.word	0x08007f39
 8007e9c:	08007f39 	.word	0x08007f39
 8007ea0:	08007f39 	.word	0x08007f39
 8007ea4:	08007f39 	.word	0x08007f39
 8007ea8:	08007f23 	.word	0x08007f23
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f39 	.word	0x08007f39
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f39 	.word	0x08007f39
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007f39 	.word	0x08007f39
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	08007f39 	.word	0x08007f39
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f39 	.word	0x08007f39
 8007ef8:	08007f39 	.word	0x08007f39
 8007efc:	08007f39 	.word	0x08007f39
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	08007f41 	.word	0x08007f41
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f10:	3308      	adds	r3, #8
 8007f12:	2101      	movs	r1, #1
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ffc3 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f20:	e00f      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	3328      	adds	r3, #40	@ 0x28
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f86a 	bl	8009004 <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f36:	e004      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f4a:	4bbf      	ldr	r3, [pc, #764]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f58:	4abb      	ldr	r2, [pc, #748]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f5e:	e003      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f002 0302 	and.w	r3, r2, #2
 8007f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d041      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d824      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f92:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fe5 	.word	0x08007fe5
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fc7 	.word	0x08007fc7
 8007fa4:	08007fe5 	.word	0x08007fe5
 8007fa8:	08007fe5 	.word	0x08007fe5
 8007fac:	08007fe5 	.word	0x08007fe5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 ff71 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fc4:	e00f      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fca:	3328      	adds	r3, #40	@ 0x28
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 f818 	bl	8009004 <RCCEx_PLL3_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fda:	e004      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fe2:	e000      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fee:	4b96      	ldr	r3, [pc, #600]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff2:	f023 0107 	bic.w	r1, r3, #7
 8007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ffc:	4a92      	ldr	r2, [pc, #584]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ffe:	430b      	orrs	r3, r1
 8008000:	6553      	str	r3, [r2, #84]	@ 0x54
 8008002:	e003      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 0304 	and.w	r3, r2, #4
 8008018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008022:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d044      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008034:	2b05      	cmp	r3, #5
 8008036:	d825      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008038:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	0800808d 	.word	0x0800808d
 8008044:	08008059 	.word	0x08008059
 8008048:	0800806f 	.word	0x0800806f
 800804c:	0800808d 	.word	0x0800808d
 8008050:	0800808d 	.word	0x0800808d
 8008054:	0800808d 	.word	0x0800808d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805c:	3308      	adds	r3, #8
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f000 ff1d 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800806c:	e00f      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	3328      	adds	r3, #40	@ 0x28
 8008074:	2101      	movs	r1, #1
 8008076:	4618      	mov	r0, r3
 8008078:	f000 ffc4 	bl	8009004 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008082:	e004      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800808a:	e000      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800808c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008096:	4b6c      	ldr	r3, [pc, #432]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809a:	f023 0107 	bic.w	r1, r3, #7
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080a6:	4a68      	ldr	r2, [pc, #416]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ac:	e003      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f002 0320 	and.w	r3, r2, #32
 80080c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d055      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080e2:	d033      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080e8:	d82c      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ee:	d02f      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80080f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f4:	d826      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080fa:	d02b      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80080fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008100:	d820      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008106:	d012      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800810c:	d81a      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d022      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008116:	d115      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811c:	3308      	adds	r3, #8
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f000 febd 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800812c:	e015      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	3328      	adds	r3, #40	@ 0x28
 8008134:	2102      	movs	r1, #2
 8008136:	4618      	mov	r0, r3
 8008138:	f000 ff64 	bl	8009004 <RCCEx_PLL3_Config>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008142:	e00a      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800814a:	e006      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800814c:	bf00      	nop
 800814e:	e004      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008150:	bf00      	nop
 8008152:	e002      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008154:	bf00      	nop
 8008156:	e000      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800815a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008162:	4b39      	ldr	r3, [pc, #228]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008166:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008172:	4a35      	ldr	r2, [pc, #212]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008174:	430b      	orrs	r3, r1
 8008176:	6553      	str	r3, [r2, #84]	@ 0x54
 8008178:	e003      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800817e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800818e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008192:	2300      	movs	r3, #0
 8008194:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008198:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800819c:	460b      	mov	r3, r1
 800819e:	4313      	orrs	r3, r2
 80081a0:	d058      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081ae:	d033      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80081b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081b4:	d82c      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ba:	d02f      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c0:	d826      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081c6:	d02b      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081cc:	d820      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d2:	d012      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081d8:	d81a      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d022      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e2:	d115      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	3308      	adds	r3, #8
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fe57 	bl	8008ea0 <RCCEx_PLL2_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081f8:	e015      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	3328      	adds	r3, #40	@ 0x28
 8008200:	2102      	movs	r1, #2
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fefe 	bl	8009004 <RCCEx_PLL3_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800820e:	e00a      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008216:	e006      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008218:	bf00      	nop
 800821a:	e004      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800821c:	bf00      	nop
 800821e:	e002      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008220:	bf00      	nop
 8008222:	e000      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10e      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800822e:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008232:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800823e:	4a02      	ldr	r2, [pc, #8]	@ (8008248 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008240:	430b      	orrs	r3, r1
 8008242:	6593      	str	r3, [r2, #88]	@ 0x58
 8008244:	e006      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800826a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	d055      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800827c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008280:	d033      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008282:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008286:	d82c      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800828c:	d02f      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008292:	d826      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008294:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008298:	d02b      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800829a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800829e:	d820      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082a4:	d012      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80082a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082aa:	d81a      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d022      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80082b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b4:	d115      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ba:	3308      	adds	r3, #8
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fdee 	bl	8008ea0 <RCCEx_PLL2_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082ca:	e015      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d0:	3328      	adds	r3, #40	@ 0x28
 80082d2:	2102      	movs	r1, #2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fe95 	bl	8009004 <RCCEx_PLL3_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082e0:	e00a      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082e8:	e006      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082ea:	bf00      	nop
 80082ec:	e004      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082ee:	bf00      	nop
 80082f0:	e002      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10b      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008300:	4ba1      	ldr	r3, [pc, #644]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008304:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008310:	4a9d      	ldr	r2, [pc, #628]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008312:	430b      	orrs	r3, r1
 8008314:	6593      	str	r3, [r2, #88]	@ 0x58
 8008316:	e003      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f002 0308 	and.w	r3, r2, #8
 800832c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008330:	2300      	movs	r3, #0
 8008332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008336:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800833a:	460b      	mov	r3, r1
 800833c:	4313      	orrs	r3, r2
 800833e:	d01e      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834c:	d10c      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	3328      	adds	r3, #40	@ 0x28
 8008354:	2102      	movs	r1, #2
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fe54 	bl	8009004 <RCCEx_PLL3_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008368:	4b87      	ldr	r3, [pc, #540]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008378:	4a83      	ldr	r2, [pc, #524]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800837a:	430b      	orrs	r3, r1
 800837c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f002 0310 	and.w	r3, r2, #16
 800838a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800838e:	2300      	movs	r3, #0
 8008390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008394:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008398:	460b      	mov	r3, r1
 800839a:	4313      	orrs	r3, r2
 800839c:	d01e      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083aa:	d10c      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b0:	3328      	adds	r3, #40	@ 0x28
 80083b2:	2102      	movs	r1, #2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fe25 	bl	8009004 <RCCEx_PLL3_Config>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083c6:	4b70      	ldr	r3, [pc, #448]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083d6:	4a6c      	ldr	r2, [pc, #432]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083d8:	430b      	orrs	r3, r1
 80083da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083f6:	460b      	mov	r3, r1
 80083f8:	4313      	orrs	r3, r2
 80083fa:	d03e      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008408:	d022      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800840a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840e:	d81b      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008418:	d00b      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800841a:	e015      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	3308      	adds	r3, #8
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fd3b 	bl	8008ea0 <RCCEx_PLL2_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008430:	e00f      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	3328      	adds	r3, #40	@ 0x28
 8008438:	2102      	movs	r1, #2
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fde2 	bl	8009004 <RCCEx_PLL3_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008446:	e004      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800845a:	4b4b      	ldr	r3, [pc, #300]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800845c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800846a:	4a47      	ldr	r2, [pc, #284]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800846c:	430b      	orrs	r3, r1
 800846e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008470:	e003      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008486:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008488:	2300      	movs	r3, #0
 800848a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800848c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008490:	460b      	mov	r3, r1
 8008492:	4313      	orrs	r3, r2
 8008494:	d03b      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084a2:	d01f      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80084a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084a8:	d818      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80084aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ae:	d003      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80084b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084b4:	d007      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084b6:	e011      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b8:	4b33      	ldr	r3, [pc, #204]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	4a32      	ldr	r2, [pc, #200]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084c4:	e00f      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ca:	3328      	adds	r3, #40	@ 0x28
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fd98 	bl	8009004 <RCCEx_PLL3_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084da:	e004      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084e2:	e000      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10b      	bne.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084ee:	4b26      	ldr	r3, [pc, #152]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084fe:	4a22      	ldr	r2, [pc, #136]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008500:	430b      	orrs	r3, r1
 8008502:	6553      	str	r3, [r2, #84]	@ 0x54
 8008504:	e003      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800851a:	673b      	str	r3, [r7, #112]	@ 0x70
 800851c:	2300      	movs	r3, #0
 800851e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008520:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008524:	460b      	mov	r3, r1
 8008526:	4313      	orrs	r3, r2
 8008528:	d034      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800852a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008538:	d007      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800853a:	e011      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800853c:	4b12      	ldr	r3, [pc, #72]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800853e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008540:	4a11      	ldr	r2, [pc, #68]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008548:	e00e      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	3308      	adds	r3, #8
 8008550:	2102      	movs	r1, #2
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fca4 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800855e:	e003      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10d      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008574:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857e:	4a02      	ldr	r2, [pc, #8]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008580:	430b      	orrs	r3, r1
 8008582:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008584:	e006      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085a2:	2300      	movs	r3, #0
 80085a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085aa:	460b      	mov	r3, r1
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d00c      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	3328      	adds	r3, #40	@ 0x28
 80085b6:	2102      	movs	r1, #2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fd23 	bl	8009004 <RCCEx_PLL3_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80085d8:	2300      	movs	r3, #0
 80085da:	667b      	str	r3, [r7, #100]	@ 0x64
 80085dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d038      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f2:	d018      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80085f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f8:	d811      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085fe:	d014      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008604:	d80b      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d011      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800860a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800860e:	d106      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008610:	4bc3      	ldr	r3, [pc, #780]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008614:	4ac2      	ldr	r2, [pc, #776]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800861c:	e008      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008624:	e004      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008626:	bf00      	nop
 8008628:	e002      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800862a:	bf00      	nop
 800862c:	e000      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800862e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10b      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008638:	4bb9      	ldr	r3, [pc, #740]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008648:	4ab5      	ldr	r2, [pc, #724]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800864a:	430b      	orrs	r3, r1
 800864c:	6553      	str	r3, [r2, #84]	@ 0x54
 800864e:	e003      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008666:	2300      	movs	r3, #0
 8008668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800866a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800866e:	460b      	mov	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008674:	4baa      	ldr	r3, [pc, #680]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008682:	4aa7      	ldr	r2, [pc, #668]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008684:	430b      	orrs	r3, r1
 8008686:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008694:	653b      	str	r3, [r7, #80]	@ 0x50
 8008696:	2300      	movs	r3, #0
 8008698:	657b      	str	r3, [r7, #84]	@ 0x54
 800869a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800869e:	460b      	mov	r3, r1
 80086a0:	4313      	orrs	r3, r2
 80086a2:	d00a      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086b4:	4a9a      	ldr	r2, [pc, #616]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086c8:	2300      	movs	r3, #0
 80086ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086d0:	460b      	mov	r3, r1
 80086d2:	4313      	orrs	r3, r2
 80086d4:	d009      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086d6:	4b92      	ldr	r3, [pc, #584]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086e6:	430b      	orrs	r3, r1
 80086e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f8:	2300      	movs	r3, #0
 80086fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80086fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008700:	460b      	mov	r3, r1
 8008702:	4313      	orrs	r3, r2
 8008704:	d00e      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008706:	4b86      	ldr	r3, [pc, #536]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	4a85      	ldr	r2, [pc, #532]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800870c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008710:	6113      	str	r3, [r2, #16]
 8008712:	4b83      	ldr	r3, [pc, #524]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008714:	6919      	ldr	r1, [r3, #16]
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800871e:	4a80      	ldr	r2, [pc, #512]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008720:	430b      	orrs	r3, r1
 8008722:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008736:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800873a:	460b      	mov	r3, r1
 800873c:	4313      	orrs	r3, r2
 800873e:	d009      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008740:	4b77      	ldr	r3, [pc, #476]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008744:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874e:	4a74      	ldr	r2, [pc, #464]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008750:	430b      	orrs	r3, r1
 8008752:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008760:	633b      	str	r3, [r7, #48]	@ 0x30
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
 8008766:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d00a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008770:	4b6b      	ldr	r3, [pc, #428]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008774:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008780:	4a67      	ldr	r2, [pc, #412]	@ (8008920 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008782:	430b      	orrs	r3, r1
 8008784:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	2100      	movs	r1, #0
 8008790:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008798:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800879c:	460b      	mov	r3, r1
 800879e:	4313      	orrs	r3, r2
 80087a0:	d011      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a6:	3308      	adds	r3, #8
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fb78 	bl	8008ea0 <RCCEx_PLL2_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	2100      	movs	r1, #0
 80087d0:	6239      	str	r1, [r7, #32]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087dc:	460b      	mov	r3, r1
 80087de:	4313      	orrs	r3, r2
 80087e0:	d011      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e6:	3308      	adds	r3, #8
 80087e8:	2101      	movs	r1, #1
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fb58 	bl	8008ea0 <RCCEx_PLL2_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	2100      	movs	r1, #0
 8008810:	61b9      	str	r1, [r7, #24]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800881c:	460b      	mov	r3, r1
 800881e:	4313      	orrs	r3, r2
 8008820:	d011      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008826:	3308      	adds	r3, #8
 8008828:	2102      	movs	r1, #2
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fb38 	bl	8008ea0 <RCCEx_PLL2_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	2100      	movs	r1, #0
 8008850:	6139      	str	r1, [r7, #16]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800885c:	460b      	mov	r3, r1
 800885e:	4313      	orrs	r3, r2
 8008860:	d011      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fbca 	bl	8009004 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	2100      	movs	r1, #0
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	f003 0310 	and.w	r3, r3, #16
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800889c:	460b      	mov	r3, r1
 800889e:	4313      	orrs	r3, r2
 80088a0:	d011      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a6:	3328      	adds	r3, #40	@ 0x28
 80088a8:	2101      	movs	r1, #1
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fbaa 	bl	8009004 <RCCEx_PLL3_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	2100      	movs	r1, #0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088dc:	460b      	mov	r3, r1
 80088de:	4313      	orrs	r3, r2
 80088e0:	d011      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	3328      	adds	r3, #40	@ 0x28
 80088e8:	2102      	movs	r1, #2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fb8a 	bl	8009004 <RCCEx_PLL3_Config>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008906:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	e000      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
}
 8008914:	4618      	mov	r0, r3
 8008916:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800891a:	46bd      	mov	sp, r7
 800891c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008920:	58024400 	.word	0x58024400

08008924 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008928:	f7fe fd54 	bl	80073d4 <HAL_RCC_GetHCLKFreq>
 800892c:	4602      	mov	r2, r0
 800892e:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	4904      	ldr	r1, [pc, #16]	@ (800894c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800893a:	5ccb      	ldrb	r3, [r1, r3]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd80      	pop	{r7, pc}
 8008948:	58024400 	.word	0x58024400
 800894c:	0801dd58 	.word	0x0801dd58

08008950 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008950:	b480      	push	{r7}
 8008952:	b089      	sub	sp, #36	@ 0x24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008958:	4ba1      	ldr	r3, [pc, #644]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008962:	4b9f      	ldr	r3, [pc, #636]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	0b1b      	lsrs	r3, r3, #12
 8008968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800896c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800896e:	4b9c      	ldr	r3, [pc, #624]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800897a:	4b99      	ldr	r3, [pc, #612]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897e:	08db      	lsrs	r3, r3, #3
 8008980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8111 	beq.w	8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	f000 8083 	beq.w	8008aac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	f200 80a1 	bhi.w	8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d056      	beq.n	8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089ba:	e099      	b.n	8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089bc:	4b88      	ldr	r3, [pc, #544]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02d      	beq.n	8008a24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089c8:	4b85      	ldr	r3, [pc, #532]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	4a84      	ldr	r2, [pc, #528]	@ (8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089d4:	fa22 f303 	lsr.w	r3, r2, r3
 80089d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f2:	4b7b      	ldr	r3, [pc, #492]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a22:	e087      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008bec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a36:	4b6a      	ldr	r3, [pc, #424]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a66:	e065      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a7a:	4b59      	ldr	r3, [pc, #356]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aaa:	e043      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008abe:	4b48      	ldr	r3, [pc, #288]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aee:	e021      	b.n	8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b02:	4b37      	ldr	r3, [pc, #220]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b34:	4b2a      	ldr	r3, [pc, #168]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b38:	0a5b      	lsrs	r3, r3, #9
 8008b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5a:	ee17 2a90 	vmov	r2, s15
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b62:	4b1f      	ldr	r3, [pc, #124]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b88:	ee17 2a90 	vmov	r2, s15
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b90:	4b13      	ldr	r3, [pc, #76]	@ (8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b94:	0e1b      	lsrs	r3, r3, #24
 8008b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb6:	ee17 2a90 	vmov	r2, s15
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	609a      	str	r2, [r3, #8]
}
 8008bd2:	bf00      	nop
 8008bd4:	3724      	adds	r7, #36	@ 0x24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	58024400 	.word	0x58024400
 8008be4:	03d09000 	.word	0x03d09000
 8008be8:	46000000 	.word	0x46000000
 8008bec:	4c742400 	.word	0x4c742400
 8008bf0:	4a742400 	.word	0x4a742400
 8008bf4:	4af42400 	.word	0x4af42400

08008bf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	@ 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c00:	4ba1      	ldr	r3, [pc, #644]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c0a:	4b9f      	ldr	r3, [pc, #636]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0e:	0d1b      	lsrs	r3, r3, #20
 8008c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c16:	4b9c      	ldr	r3, [pc, #624]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c22:	4b99      	ldr	r3, [pc, #612]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	08db      	lsrs	r3, r3, #3
 8008c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	fb02 f303 	mul.w	r3, r2, r3
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 8111 	beq.w	8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	f000 8083 	beq.w	8008d54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	f200 80a1 	bhi.w	8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d056      	beq.n	8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c62:	e099      	b.n	8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c64:	4b88      	ldr	r3, [pc, #544]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d02d      	beq.n	8008ccc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c70:	4b85      	ldr	r3, [pc, #532]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	4a84      	ldr	r2, [pc, #528]	@ (8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cca:	e087      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b6a      	ldr	r3, [pc, #424]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0e:	e065      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d22:	4b59      	ldr	r3, [pc, #356]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d52:	e043      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b48      	ldr	r3, [pc, #288]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d96:	e021      	b.n	8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008daa:	4b37      	ldr	r3, [pc, #220]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de0:	0a5b      	lsrs	r3, r3, #9
 8008de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e02:	ee17 2a90 	vmov	r2, s15
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e14:	ee07 3a90 	vmov	s15, r3
 8008e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e30:	ee17 2a90 	vmov	r2, s15
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e38:	4b13      	ldr	r3, [pc, #76]	@ (8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3c:	0e1b      	lsrs	r3, r3, #24
 8008e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e5e:	ee17 2a90 	vmov	r2, s15
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e66:	e008      	b.n	8008e7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	609a      	str	r2, [r3, #8]
}
 8008e7a:	bf00      	nop
 8008e7c:	3724      	adds	r7, #36	@ 0x24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	03d09000 	.word	0x03d09000
 8008e90:	46000000 	.word	0x46000000
 8008e94:	4c742400 	.word	0x4c742400
 8008e98:	4a742400 	.word	0x4a742400
 8008e9c:	4af42400 	.word	0x4af42400

08008ea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eae:	4b53      	ldr	r3, [pc, #332]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d101      	bne.n	8008ebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e099      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eca:	f7f9 fadf 	bl	800248c <HAL_GetTick>
 8008ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed0:	e008      	b.n	8008ee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ed2:	f7f9 fadb 	bl	800248c <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d901      	bls.n	8008ee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e086      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ee4:	4b45      	ldr	r3, [pc, #276]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f0      	bne.n	8008ed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ef0:	4b42      	ldr	r3, [pc, #264]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	031b      	lsls	r3, r3, #12
 8008efe:	493f      	ldr	r1, [pc, #252]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	025b      	lsls	r3, r3, #9
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	061b      	lsls	r3, r3, #24
 8008f30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f34:	4931      	ldr	r1, [pc, #196]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f3a:	4b30      	ldr	r3, [pc, #192]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	492d      	ldr	r1, [pc, #180]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	f023 0220 	bic.w	r2, r3, #32
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	4928      	ldr	r1, [pc, #160]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f5e:	4b27      	ldr	r3, [pc, #156]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	4a26      	ldr	r2, [pc, #152]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f64:	f023 0310 	bic.w	r3, r3, #16
 8008f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f6a:	4b24      	ldr	r3, [pc, #144]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f6e:	4b24      	ldr	r3, [pc, #144]	@ (8009000 <RCCEx_PLL2_Config+0x160>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	69d2      	ldr	r2, [r2, #28]
 8008f76:	00d2      	lsls	r2, r2, #3
 8008f78:	4920      	ldr	r1, [pc, #128]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f82:	4a1e      	ldr	r2, [pc, #120]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f84:	f043 0310 	orr.w	r3, r3, #16
 8008f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f90:	4b1a      	ldr	r3, [pc, #104]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	4a19      	ldr	r2, [pc, #100]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f9c:	e00f      	b.n	8008fbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d106      	bne.n	8008fb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fa4:	4b15      	ldr	r3, [pc, #84]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	4a14      	ldr	r2, [pc, #80]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fb0:	e005      	b.n	8008fbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fb2:	4b12      	ldr	r3, [pc, #72]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	4a11      	ldr	r2, [pc, #68]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fca:	f7f9 fa5f 	bl	800248c <HAL_GetTick>
 8008fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd0:	e008      	b.n	8008fe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fd2:	f7f9 fa5b 	bl	800248c <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d901      	bls.n	8008fe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e006      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
 8009000:	ffff0007 	.word	0xffff0007

08009004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009012:	4b53      	ldr	r3, [pc, #332]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d101      	bne.n	8009022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e099      	b.n	8009156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009022:	4b4f      	ldr	r3, [pc, #316]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a4e      	ldr	r2, [pc, #312]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800902c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902e:	f7f9 fa2d 	bl	800248c <HAL_GetTick>
 8009032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009034:	e008      	b.n	8009048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009036:	f7f9 fa29 	bl	800248c <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e086      	b.n	8009156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009048:	4b45      	ldr	r3, [pc, #276]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009054:	4b42      	ldr	r3, [pc, #264]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	051b      	lsls	r3, r3, #20
 8009062:	493f      	ldr	r1, [pc, #252]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009064:	4313      	orrs	r3, r2
 8009066:	628b      	str	r3, [r1, #40]	@ 0x28
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	3b01      	subs	r3, #1
 800906e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	025b      	lsls	r3, r3, #9
 800907a:	b29b      	uxth	r3, r3
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	3b01      	subs	r3, #1
 8009084:	041b      	lsls	r3, r3, #16
 8009086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	3b01      	subs	r3, #1
 8009092:	061b      	lsls	r3, r3, #24
 8009094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009098:	4931      	ldr	r1, [pc, #196]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800909e:	4b30      	ldr	r3, [pc, #192]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	492d      	ldr	r1, [pc, #180]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090b0:	4b2b      	ldr	r3, [pc, #172]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	4928      	ldr	r1, [pc, #160]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090c2:	4b27      	ldr	r3, [pc, #156]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	4a26      	ldr	r2, [pc, #152]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090ce:	4b24      	ldr	r3, [pc, #144]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090d2:	4b24      	ldr	r3, [pc, #144]	@ (8009164 <RCCEx_PLL3_Config+0x160>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	69d2      	ldr	r2, [r2, #28]
 80090da:	00d2      	lsls	r2, r2, #3
 80090dc:	4920      	ldr	r1, [pc, #128]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009100:	e00f      	b.n	8009122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d106      	bne.n	8009116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009108:	4b15      	ldr	r3, [pc, #84]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	4a14      	ldr	r2, [pc, #80]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800910e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009114:	e005      	b.n	8009122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	4a11      	ldr	r2, [pc, #68]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800911c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009122:	4b0f      	ldr	r3, [pc, #60]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a0e      	ldr	r2, [pc, #56]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800912c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800912e:	f7f9 f9ad 	bl	800248c <HAL_GetTick>
 8009132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009134:	e008      	b.n	8009148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009136:	f7f9 f9a9 	bl	800248c <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e006      	b.n	8009156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <RCCEx_PLL3_Config+0x15c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	58024400 	.word	0x58024400
 8009164:	ffff0007 	.word	0xffff0007

08009168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e049      	b.n	800920e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f841 	bl	8009216 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f000 f9e8 	bl	800957c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b01      	cmp	r3, #1
 800923e:	d001      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e054      	b.n	80092ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a26      	ldr	r2, [pc, #152]	@ (80092fc <HAL_TIM_Base_Start_IT+0xd0>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d022      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800926e:	d01d      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a22      	ldr	r2, [pc, #136]	@ (8009300 <HAL_TIM_Base_Start_IT+0xd4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d018      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a21      	ldr	r2, [pc, #132]	@ (8009304 <HAL_TIM_Base_Start_IT+0xd8>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d013      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1f      	ldr	r2, [pc, #124]	@ (8009308 <HAL_TIM_Base_Start_IT+0xdc>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00e      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1e      	ldr	r2, [pc, #120]	@ (800930c <HAL_TIM_Base_Start_IT+0xe0>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d009      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1c      	ldr	r2, [pc, #112]	@ (8009310 <HAL_TIM_Base_Start_IT+0xe4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d004      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1b      	ldr	r2, [pc, #108]	@ (8009314 <HAL_TIM_Base_Start_IT+0xe8>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d115      	bne.n	80092d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	4b19      	ldr	r3, [pc, #100]	@ (8009318 <HAL_TIM_Base_Start_IT+0xec>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b06      	cmp	r3, #6
 80092bc:	d015      	beq.n	80092ea <HAL_TIM_Base_Start_IT+0xbe>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092c4:	d011      	beq.n	80092ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d6:	e008      	b.n	80092ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0201 	orr.w	r2, r2, #1
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	e000      	b.n	80092ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40010000 	.word	0x40010000
 8009300:	40000400 	.word	0x40000400
 8009304:	40000800 	.word	0x40000800
 8009308:	40000c00 	.word	0x40000c00
 800930c:	40010400 	.word	0x40010400
 8009310:	40001800 	.word	0x40001800
 8009314:	40014000 	.word	0x40014000
 8009318:	00010007 	.word	0x00010007

0800931c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d020      	beq.n	8009380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01b      	beq.n	8009380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0202 	mvn.w	r2, #2
 8009350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8e9 	bl	800953e <HAL_TIM_IC_CaptureCallback>
 800936c:	e005      	b.n	800937a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f8db 	bl	800952a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f8ec 	bl	8009552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	d020      	beq.n	80093cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01b      	beq.n	80093cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f06f 0204 	mvn.w	r2, #4
 800939c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8c3 	bl	800953e <HAL_TIM_IC_CaptureCallback>
 80093b8:	e005      	b.n	80093c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8b5 	bl	800952a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f8c6 	bl	8009552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 0308 	and.w	r3, r3, #8
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d020      	beq.n	8009418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01b      	beq.n	8009418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0208 	mvn.w	r2, #8
 80093e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2204      	movs	r2, #4
 80093ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f89d 	bl	800953e <HAL_TIM_IC_CaptureCallback>
 8009404:	e005      	b.n	8009412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f88f 	bl	800952a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f8a0 	bl	8009552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b00      	cmp	r3, #0
 8009420:	d020      	beq.n	8009464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01b      	beq.n	8009464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0210 	mvn.w	r2, #16
 8009434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2208      	movs	r2, #8
 800943a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f877 	bl	800953e <HAL_TIM_IC_CaptureCallback>
 8009450:	e005      	b.n	800945e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f869 	bl	800952a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f87a 	bl	8009552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00c      	beq.n	8009488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d007      	beq.n	8009488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0201 	mvn.w	r2, #1
 8009480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7f8 fa7e 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800948e:	2b00      	cmp	r3, #0
 8009490:	d104      	bne.n	800949c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d007      	beq.n	80094b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f913 	bl	80096dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00c      	beq.n	80094da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d007      	beq.n	80094da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f90b 	bl	80096f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00c      	beq.n	80094fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d007      	beq.n	80094fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f834 	bl	8009566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00c      	beq.n	8009522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d007      	beq.n	8009522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f06f 0220 	mvn.w	r2, #32
 800951a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f8d3 	bl	80096c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a46      	ldr	r2, [pc, #280]	@ (80096a8 <TIM_Base_SetConfig+0x12c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d013      	beq.n	80095bc <TIM_Base_SetConfig+0x40>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959a:	d00f      	beq.n	80095bc <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a43      	ldr	r2, [pc, #268]	@ (80096ac <TIM_Base_SetConfig+0x130>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d00b      	beq.n	80095bc <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a42      	ldr	r2, [pc, #264]	@ (80096b0 <TIM_Base_SetConfig+0x134>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d007      	beq.n	80095bc <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a41      	ldr	r2, [pc, #260]	@ (80096b4 <TIM_Base_SetConfig+0x138>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d003      	beq.n	80095bc <TIM_Base_SetConfig+0x40>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a40      	ldr	r2, [pc, #256]	@ (80096b8 <TIM_Base_SetConfig+0x13c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d108      	bne.n	80095ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a35      	ldr	r2, [pc, #212]	@ (80096a8 <TIM_Base_SetConfig+0x12c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d01f      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095dc:	d01b      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a32      	ldr	r2, [pc, #200]	@ (80096ac <TIM_Base_SetConfig+0x130>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d017      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a31      	ldr	r2, [pc, #196]	@ (80096b0 <TIM_Base_SetConfig+0x134>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d013      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a30      	ldr	r2, [pc, #192]	@ (80096b4 <TIM_Base_SetConfig+0x138>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d00f      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a2f      	ldr	r2, [pc, #188]	@ (80096b8 <TIM_Base_SetConfig+0x13c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d00b      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a2e      	ldr	r2, [pc, #184]	@ (80096bc <TIM_Base_SetConfig+0x140>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d007      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a2d      	ldr	r2, [pc, #180]	@ (80096c0 <TIM_Base_SetConfig+0x144>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d003      	beq.n	8009616 <TIM_Base_SetConfig+0x9a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a2c      	ldr	r2, [pc, #176]	@ (80096c4 <TIM_Base_SetConfig+0x148>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d108      	bne.n	8009628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800961c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	4313      	orrs	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a16      	ldr	r2, [pc, #88]	@ (80096a8 <TIM_Base_SetConfig+0x12c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00f      	beq.n	8009674 <TIM_Base_SetConfig+0xf8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a18      	ldr	r2, [pc, #96]	@ (80096b8 <TIM_Base_SetConfig+0x13c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00b      	beq.n	8009674 <TIM_Base_SetConfig+0xf8>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a17      	ldr	r2, [pc, #92]	@ (80096bc <TIM_Base_SetConfig+0x140>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d007      	beq.n	8009674 <TIM_Base_SetConfig+0xf8>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a16      	ldr	r2, [pc, #88]	@ (80096c0 <TIM_Base_SetConfig+0x144>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_Base_SetConfig+0xf8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a15      	ldr	r2, [pc, #84]	@ (80096c4 <TIM_Base_SetConfig+0x148>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d103      	bne.n	800967c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b01      	cmp	r3, #1
 800968c:	d105      	bne.n	800969a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f023 0201 	bic.w	r2, r3, #1
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	611a      	str	r2, [r3, #16]
  }
}
 800969a:	bf00      	nop
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40010000 	.word	0x40010000
 80096ac:	40000400 	.word	0x40000400
 80096b0:	40000800 	.word	0x40000800
 80096b4:	40000c00 	.word	0x40000c00
 80096b8:	40010400 	.word	0x40010400
 80096bc:	40014000 	.word	0x40014000
 80096c0:	40014400 	.word	0x40014400
 80096c4:	40014800 	.word	0x40014800

080096c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e042      	b.n	800979c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800971c:	2b00      	cmp	r3, #0
 800971e:	d106      	bne.n	800972e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7f8 fc9f 	bl	800206c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2224      	movs	r2, #36	@ 0x24
 8009732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0201 	bic.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 faea 	bl	800ad28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fd7f 	bl	800a258 <UART_SetConfig>
 800975a:	4603      	mov	r3, r0
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e01b      	b.n	800979c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689a      	ldr	r2, [r3, #8]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 fb69 	bl	800ae6c <UART_CheckIdleState>
 800979a:	4603      	mov	r3, r0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08a      	sub	sp, #40	@ 0x28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b8:	2b20      	cmp	r3, #32
 80097ba:	d167      	bne.n	800988c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <HAL_UART_Transmit_DMA+0x24>
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e060      	b.n	800988e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	88fa      	ldrh	r2, [r7, #6]
 80097d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2221      	movs	r2, #33	@ 0x21
 80097ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d028      	beq.n	800984c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097fe:	4a26      	ldr	r2, [pc, #152]	@ (8009898 <HAL_UART_Transmit_DMA+0xf4>)
 8009800:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009806:	4a25      	ldr	r2, [pc, #148]	@ (800989c <HAL_UART_Transmit_DMA+0xf8>)
 8009808:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800980e:	4a24      	ldr	r2, [pc, #144]	@ (80098a0 <HAL_UART_Transmit_DMA+0xfc>)
 8009810:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009816:	2200      	movs	r2, #0
 8009818:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009822:	4619      	mov	r1, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3328      	adds	r3, #40	@ 0x28
 800982a:	461a      	mov	r2, r3
 800982c:	88fb      	ldrh	r3, [r7, #6]
 800982e:	f7f9 fab9 	bl	8002da4 <HAL_DMA_Start_IT>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d009      	beq.n	800984c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2210      	movs	r2, #16
 800983c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e020      	b.n	800988e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2240      	movs	r2, #64	@ 0x40
 8009852:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3308      	adds	r3, #8
 800985a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	613b      	str	r3, [r7, #16]
   return(result);
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800986a:	627b      	str	r3, [r7, #36]	@ 0x24
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3308      	adds	r3, #8
 8009872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009874:	623a      	str	r2, [r7, #32]
 8009876:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	69f9      	ldr	r1, [r7, #28]
 800987a:	6a3a      	ldr	r2, [r7, #32]
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	61bb      	str	r3, [r7, #24]
   return(result);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e5      	bne.n	8009854 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	e000      	b.n	800988e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800988c:	2302      	movs	r3, #2
  }
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	@ 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	0800b339 	.word	0x0800b339
 800989c:	0800b3cf 	.word	0x0800b3cf
 80098a0:	0800b551 	.word	0x0800b551

080098a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08a      	sub	sp, #40	@ 0x28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d137      	bne.n	800992c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <HAL_UART_Receive_DMA+0x24>
 80098c2:	88fb      	ldrh	r3, [r7, #6]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e030      	b.n	800992e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a18      	ldr	r2, [pc, #96]	@ (8009938 <HAL_UART_Receive_DMA+0x94>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d01f      	beq.n	800991c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d018      	beq.n	800991c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	613b      	str	r3, [r7, #16]
   return(result);
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	623b      	str	r3, [r7, #32]
 800990a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	69f9      	ldr	r1, [r7, #28]
 800990e:	6a3a      	ldr	r2, [r7, #32]
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	61bb      	str	r3, [r7, #24]
   return(result);
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e6      	bne.n	80098ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	461a      	mov	r2, r3
 8009920:	68b9      	ldr	r1, [r7, #8]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f001 fbba 	bl	800b09c <UART_Start_Receive_DMA>
 8009928:	4603      	mov	r3, r0
 800992a:	e000      	b.n	800992e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800992c:	2302      	movs	r3, #2
  }
}
 800992e:	4618      	mov	r0, r3
 8009930:	3728      	adds	r7, #40	@ 0x28
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	58000c00 	.word	0x58000c00

0800993c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b090      	sub	sp, #64	@ 0x40
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009952:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800995e:	2b80      	cmp	r3, #128	@ 0x80
 8009960:	d139      	bne.n	80099d6 <HAL_UART_DMAStop+0x9a>
 8009962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009964:	2b21      	cmp	r3, #33	@ 0x21
 8009966:	d136      	bne.n	80099d6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	61fb      	str	r3, [r7, #28]
   return(result);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800997e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009988:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800998a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800998e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e5      	bne.n	8009968 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d015      	beq.n	80099d0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f9 fc65 	bl	8003278 <HAL_DMA_Abort>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00d      	beq.n	80099d0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fb f8eb 	bl	8004b94 <HAL_DMA_GetError>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b20      	cmp	r3, #32
 80099c2:	d105      	bne.n	80099d0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2210      	movs	r2, #16
 80099c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e047      	b.n	8009a60 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 fc09 	bl	800b1e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e0:	2b40      	cmp	r3, #64	@ 0x40
 80099e2:	d13c      	bne.n	8009a5e <HAL_UART_DMAStop+0x122>
 80099e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e6:	2b22      	cmp	r3, #34	@ 0x22
 80099e8:	d139      	bne.n	8009a5e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a0a:	61ba      	str	r2, [r7, #24]
 8009a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6979      	ldr	r1, [r7, #20]
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	613b      	str	r3, [r7, #16]
   return(result);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e5      	bne.n	80099ea <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d017      	beq.n	8009a58 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7f9 fc22 	bl	8003278 <HAL_DMA_Abort>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00e      	beq.n	8009a58 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fb f8a7 	bl	8004b94 <HAL_DMA_GetError>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	d105      	bne.n	8009a58 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2210      	movs	r2, #16
 8009a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e003      	b.n	8009a60 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 fc07 	bl	800b26c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3740      	adds	r7, #64	@ 0x40
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b0ba      	sub	sp, #232	@ 0xe8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a96:	4013      	ands	r3, r2
 8009a98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d11b      	bne.n	8009adc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d015      	beq.n	8009adc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d105      	bne.n	8009ac8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d009      	beq.n	8009adc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 8377 	beq.w	800a1c0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
      }
      return;
 8009ada:	e371      	b.n	800a1c0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 8123 	beq.w	8009d2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ae6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009aea:	4b8d      	ldr	r3, [pc, #564]	@ (8009d20 <HAL_UART_IRQHandler+0x2b8>)
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009af2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009af6:	4b8b      	ldr	r3, [pc, #556]	@ (8009d24 <HAL_UART_IRQHandler+0x2bc>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 8116 	beq.w	8009d2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d011      	beq.n	8009b30 <HAL_UART_IRQHandler+0xc8>
 8009b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b26:	f043 0201 	orr.w	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d011      	beq.n	8009b60 <HAL_UART_IRQHandler+0xf8>
 8009b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b56:	f043 0204 	orr.w	r2, r3, #4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d011      	beq.n	8009b90 <HAL_UART_IRQHandler+0x128>
 8009b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b86:	f043 0202 	orr.w	r2, r3, #2
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d017      	beq.n	8009bcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ba8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bac:	4b5c      	ldr	r3, [pc, #368]	@ (8009d20 <HAL_UART_IRQHandler+0x2b8>)
 8009bae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2208      	movs	r2, #8
 8009bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc2:	f043 0208 	orr.w	r2, r3, #8
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d012      	beq.n	8009bfe <HAL_UART_IRQHandler+0x196>
 8009bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00c      	beq.n	8009bfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf4:	f043 0220 	orr.w	r2, r3, #32
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 82dd 	beq.w	800a1c4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d013      	beq.n	8009c3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d007      	beq.n	8009c3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c52:	2b40      	cmp	r3, #64	@ 0x40
 8009c54:	d005      	beq.n	8009c62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d054      	beq.n	8009d0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 fb02 	bl	800b26c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c72:	2b40      	cmp	r3, #64	@ 0x40
 8009c74:	d146      	bne.n	8009d04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cb2:	e841 2300 	strex	r3, r2, [r1]
 8009cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1d9      	bne.n	8009c76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d017      	beq.n	8009cfc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cd2:	4a15      	ldr	r2, [pc, #84]	@ (8009d28 <HAL_UART_IRQHandler+0x2c0>)
 8009cd4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7f9 fde9 	bl	80038b4 <HAL_DMA_Abort_IT>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d019      	beq.n	8009d1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfa:	e00f      	b.n	8009d1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fa95 	bl	800a22c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d02:	e00b      	b.n	8009d1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fa91 	bl	800a22c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d0a:	e007      	b.n	8009d1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fa8d 	bl	800a22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d1a:	e253      	b.n	800a1c4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1c:	bf00      	nop
    return;
 8009d1e:	e251      	b.n	800a1c4 <HAL_UART_IRQHandler+0x75c>
 8009d20:	10000001 	.word	0x10000001
 8009d24:	04000120 	.word	0x04000120
 8009d28:	0800b5d1 	.word	0x0800b5d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	f040 81e7 	bne.w	800a104 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d3a:	f003 0310 	and.w	r3, r3, #16
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 81e0 	beq.w	800a104 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d48:	f003 0310 	and.w	r3, r3, #16
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 81d9 	beq.w	800a104 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2210      	movs	r2, #16
 8009d58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d64:	2b40      	cmp	r3, #64	@ 0x40
 8009d66:	f040 8151 	bne.w	800a00c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a96      	ldr	r2, [pc, #600]	@ (8009fcc <HAL_UART_IRQHandler+0x564>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d068      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a93      	ldr	r2, [pc, #588]	@ (8009fd0 <HAL_UART_IRQHandler+0x568>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d061      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a91      	ldr	r2, [pc, #580]	@ (8009fd4 <HAL_UART_IRQHandler+0x56c>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d05a      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8009fd8 <HAL_UART_IRQHandler+0x570>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d053      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a8c      	ldr	r2, [pc, #560]	@ (8009fdc <HAL_UART_IRQHandler+0x574>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d04c      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a89      	ldr	r2, [pc, #548]	@ (8009fe0 <HAL_UART_IRQHandler+0x578>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d045      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a87      	ldr	r2, [pc, #540]	@ (8009fe4 <HAL_UART_IRQHandler+0x57c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d03e      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a84      	ldr	r2, [pc, #528]	@ (8009fe8 <HAL_UART_IRQHandler+0x580>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d037      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a82      	ldr	r2, [pc, #520]	@ (8009fec <HAL_UART_IRQHandler+0x584>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d030      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a7f      	ldr	r2, [pc, #508]	@ (8009ff0 <HAL_UART_IRQHandler+0x588>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d029      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a7d      	ldr	r2, [pc, #500]	@ (8009ff4 <HAL_UART_IRQHandler+0x58c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d022      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a7a      	ldr	r2, [pc, #488]	@ (8009ff8 <HAL_UART_IRQHandler+0x590>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d01b      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a78      	ldr	r2, [pc, #480]	@ (8009ffc <HAL_UART_IRQHandler+0x594>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d014      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a75      	ldr	r2, [pc, #468]	@ (800a000 <HAL_UART_IRQHandler+0x598>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d00d      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a73      	ldr	r2, [pc, #460]	@ (800a004 <HAL_UART_IRQHandler+0x59c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d006      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3e2>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a70      	ldr	r2, [pc, #448]	@ (800a008 <HAL_UART_IRQHandler+0x5a0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d106      	bne.n	8009e58 <HAL_UART_IRQHandler+0x3f0>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	e005      	b.n	8009e64 <HAL_UART_IRQHandler+0x3fc>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 81ab 	beq.w	800a1c8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	f080 81a3 	bcs.w	800a1c8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e98:	f000 8087 	beq.w	8009faa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009eca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1da      	bne.n	8009e9c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3308      	adds	r3, #8
 8009eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3308      	adds	r3, #8
 8009f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f16:	e841 2300 	strex	r3, r2, [r1]
 8009f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1e1      	bne.n	8009ee6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3308      	adds	r3, #8
 8009f28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3308      	adds	r3, #8
 8009f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e3      	bne.n	8009f22 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f78:	f023 0310 	bic.w	r3, r3, #16
 8009f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e4      	bne.n	8009f68 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7f9 f967 	bl	8003278 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2202      	movs	r2, #2
 8009fae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f93b 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fca:	e0fd      	b.n	800a1c8 <HAL_UART_IRQHandler+0x760>
 8009fcc:	40020010 	.word	0x40020010
 8009fd0:	40020028 	.word	0x40020028
 8009fd4:	40020040 	.word	0x40020040
 8009fd8:	40020058 	.word	0x40020058
 8009fdc:	40020070 	.word	0x40020070
 8009fe0:	40020088 	.word	0x40020088
 8009fe4:	400200a0 	.word	0x400200a0
 8009fe8:	400200b8 	.word	0x400200b8
 8009fec:	40020410 	.word	0x40020410
 8009ff0:	40020428 	.word	0x40020428
 8009ff4:	40020440 	.word	0x40020440
 8009ff8:	40020458 	.word	0x40020458
 8009ffc:	40020470 	.word	0x40020470
 800a000:	40020488 	.word	0x40020488
 800a004:	400204a0 	.word	0x400204a0
 800a008:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a018:	b29b      	uxth	r3, r3
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a026:	b29b      	uxth	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 80cf 	beq.w	800a1cc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a02e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 80ca 	beq.w	800a1cc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a04c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a05a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a05c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e4      	bne.n	800a038 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	623b      	str	r3, [r7, #32]
   return(result);
 800a07e:	6a3a      	ldr	r2, [r7, #32]
 800a080:	4b55      	ldr	r3, [pc, #340]	@ (800a1d8 <HAL_UART_IRQHandler+0x770>)
 800a082:	4013      	ands	r3, r2
 800a084:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3308      	adds	r3, #8
 800a08e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a092:	633a      	str	r2, [r7, #48]	@ 0x30
 800a094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e3      	bne.n	800a06e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f023 0310 	bic.w	r3, r3, #16
 800a0ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	69b9      	ldr	r1, [r7, #24]
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e4      	bne.n	800a0ba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f89f 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a102:	e063      	b.n	800a1cc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00e      	beq.n	800a12e <HAL_UART_IRQHandler+0x6c6>
 800a110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d008      	beq.n	800a12e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a124:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 fa93 	bl	800b652 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a12c:	e051      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a136:	2b00      	cmp	r3, #0
 800a138:	d014      	beq.n	800a164 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a14a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d008      	beq.n	800a164 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a156:	2b00      	cmp	r3, #0
 800a158:	d03a      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
    }
    return;
 800a162:	e035      	b.n	800a1d0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d009      	beq.n	800a184 <HAL_UART_IRQHandler+0x71c>
 800a170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 fa3d 	bl	800b5fc <UART_EndTransmit_IT>
    return;
 800a182:	e026      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x73c>
 800a190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a194:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 fa6c 	bl	800b67a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1a2:	e016      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d010      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
 800a1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da0c      	bge.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 fa54 	bl	800b666 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1be:	e008      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a1c0:	bf00      	nop
 800a1c2:	e006      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800a1c4:	bf00      	nop
 800a1c6:	e004      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a1c8:	bf00      	nop
 800a1ca:	e002      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a1cc:	bf00      	nop
 800a1ce:	e000      	b.n	800a1d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800a1d0:	bf00      	nop
  }
}
 800a1d2:	37e8      	adds	r7, #232	@ 0xe8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	effffffe 	.word	0xeffffffe

0800a1dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a25c:	b092      	sub	sp, #72	@ 0x48
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	431a      	orrs	r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	431a      	orrs	r2, r3
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4bbe      	ldr	r3, [pc, #760]	@ (800a580 <UART_SetConfig+0x328>)
 800a288:	4013      	ands	r3, r2
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	6812      	ldr	r2, [r2, #0]
 800a28e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a290:	430b      	orrs	r3, r1
 800a292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4ab3      	ldr	r2, [pc, #716]	@ (800a584 <UART_SetConfig+0x32c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d004      	beq.n	800a2c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	4baf      	ldr	r3, [pc, #700]	@ (800a588 <UART_SetConfig+0x330>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	6812      	ldr	r2, [r2, #0]
 800a2d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2de:	f023 010f 	bic.w	r1, r3, #15
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4aa6      	ldr	r2, [pc, #664]	@ (800a58c <UART_SetConfig+0x334>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d177      	bne.n	800a3e8 <UART_SetConfig+0x190>
 800a2f8:	4ba5      	ldr	r3, [pc, #660]	@ (800a590 <UART_SetConfig+0x338>)
 800a2fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a300:	2b28      	cmp	r3, #40	@ 0x28
 800a302:	d86d      	bhi.n	800a3e0 <UART_SetConfig+0x188>
 800a304:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <UART_SetConfig+0xb4>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a3b1 	.word	0x0800a3b1
 800a310:	0800a3e1 	.word	0x0800a3e1
 800a314:	0800a3e1 	.word	0x0800a3e1
 800a318:	0800a3e1 	.word	0x0800a3e1
 800a31c:	0800a3e1 	.word	0x0800a3e1
 800a320:	0800a3e1 	.word	0x0800a3e1
 800a324:	0800a3e1 	.word	0x0800a3e1
 800a328:	0800a3e1 	.word	0x0800a3e1
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3e1 	.word	0x0800a3e1
 800a334:	0800a3e1 	.word	0x0800a3e1
 800a338:	0800a3e1 	.word	0x0800a3e1
 800a33c:	0800a3e1 	.word	0x0800a3e1
 800a340:	0800a3e1 	.word	0x0800a3e1
 800a344:	0800a3e1 	.word	0x0800a3e1
 800a348:	0800a3e1 	.word	0x0800a3e1
 800a34c:	0800a3c1 	.word	0x0800a3c1
 800a350:	0800a3e1 	.word	0x0800a3e1
 800a354:	0800a3e1 	.word	0x0800a3e1
 800a358:	0800a3e1 	.word	0x0800a3e1
 800a35c:	0800a3e1 	.word	0x0800a3e1
 800a360:	0800a3e1 	.word	0x0800a3e1
 800a364:	0800a3e1 	.word	0x0800a3e1
 800a368:	0800a3e1 	.word	0x0800a3e1
 800a36c:	0800a3c9 	.word	0x0800a3c9
 800a370:	0800a3e1 	.word	0x0800a3e1
 800a374:	0800a3e1 	.word	0x0800a3e1
 800a378:	0800a3e1 	.word	0x0800a3e1
 800a37c:	0800a3e1 	.word	0x0800a3e1
 800a380:	0800a3e1 	.word	0x0800a3e1
 800a384:	0800a3e1 	.word	0x0800a3e1
 800a388:	0800a3e1 	.word	0x0800a3e1
 800a38c:	0800a3d1 	.word	0x0800a3d1
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a3e1 	.word	0x0800a3e1
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a3e1 	.word	0x0800a3e1
 800a3a0:	0800a3e1 	.word	0x0800a3e1
 800a3a4:	0800a3e1 	.word	0x0800a3e1
 800a3a8:	0800a3e1 	.word	0x0800a3e1
 800a3ac:	0800a3d9 	.word	0x0800a3d9
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e222      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e21e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e21a      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e216      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e212      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3d8:	2340      	movs	r3, #64	@ 0x40
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e20e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3e0:	2380      	movs	r3, #128	@ 0x80
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e20a      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a69      	ldr	r2, [pc, #420]	@ (800a594 <UART_SetConfig+0x33c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d130      	bne.n	800a454 <UART_SetConfig+0x1fc>
 800a3f2:	4b67      	ldr	r3, [pc, #412]	@ (800a590 <UART_SetConfig+0x338>)
 800a3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	d826      	bhi.n	800a44c <UART_SetConfig+0x1f4>
 800a3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a404 <UART_SetConfig+0x1ac>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a41d 	.word	0x0800a41d
 800a408:	0800a425 	.word	0x0800a425
 800a40c:	0800a42d 	.word	0x0800a42d
 800a410:	0800a435 	.word	0x0800a435
 800a414:	0800a43d 	.word	0x0800a43d
 800a418:	0800a445 	.word	0x0800a445
 800a41c:	2300      	movs	r3, #0
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e1ec      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a424:	2304      	movs	r3, #4
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e1e8      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a42c:	2308      	movs	r3, #8
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e1e4      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a434:	2310      	movs	r3, #16
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e1e0      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a43c:	2320      	movs	r3, #32
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e1dc      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a444:	2340      	movs	r3, #64	@ 0x40
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e1d8      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a44c:	2380      	movs	r3, #128	@ 0x80
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e1d4      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a4f      	ldr	r2, [pc, #316]	@ (800a598 <UART_SetConfig+0x340>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d130      	bne.n	800a4c0 <UART_SetConfig+0x268>
 800a45e:	4b4c      	ldr	r3, [pc, #304]	@ (800a590 <UART_SetConfig+0x338>)
 800a460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a462:	f003 0307 	and.w	r3, r3, #7
 800a466:	2b05      	cmp	r3, #5
 800a468:	d826      	bhi.n	800a4b8 <UART_SetConfig+0x260>
 800a46a:	a201      	add	r2, pc, #4	@ (adr r2, 800a470 <UART_SetConfig+0x218>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a489 	.word	0x0800a489
 800a474:	0800a491 	.word	0x0800a491
 800a478:	0800a499 	.word	0x0800a499
 800a47c:	0800a4a1 	.word	0x0800a4a1
 800a480:	0800a4a9 	.word	0x0800a4a9
 800a484:	0800a4b1 	.word	0x0800a4b1
 800a488:	2300      	movs	r3, #0
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48e:	e1b6      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e1b2      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e1ae      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e1aa      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e1a6      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a4b0:	2340      	movs	r3, #64	@ 0x40
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e1a2      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a4b8:	2380      	movs	r3, #128	@ 0x80
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e19e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a35      	ldr	r2, [pc, #212]	@ (800a59c <UART_SetConfig+0x344>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d130      	bne.n	800a52c <UART_SetConfig+0x2d4>
 800a4ca:	4b31      	ldr	r3, [pc, #196]	@ (800a590 <UART_SetConfig+0x338>)
 800a4cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d826      	bhi.n	800a524 <UART_SetConfig+0x2cc>
 800a4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4dc <UART_SetConfig+0x284>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4f5 	.word	0x0800a4f5
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	0800a505 	.word	0x0800a505
 800a4e8:	0800a50d 	.word	0x0800a50d
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a51d 	.word	0x0800a51d
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fa:	e180      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e17c      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a504:	2308      	movs	r3, #8
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e178      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a50c:	2310      	movs	r3, #16
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e174      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a514:	2320      	movs	r3, #32
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e170      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a51c:	2340      	movs	r3, #64	@ 0x40
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e16c      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a524:	2380      	movs	r3, #128	@ 0x80
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e168      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a0 <UART_SetConfig+0x348>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d142      	bne.n	800a5bc <UART_SetConfig+0x364>
 800a536:	4b16      	ldr	r3, [pc, #88]	@ (800a590 <UART_SetConfig+0x338>)
 800a538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d838      	bhi.n	800a5b4 <UART_SetConfig+0x35c>
 800a542:	a201      	add	r2, pc, #4	@ (adr r2, 800a548 <UART_SetConfig+0x2f0>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a569 	.word	0x0800a569
 800a550:	0800a571 	.word	0x0800a571
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a5a5 	.word	0x0800a5a5
 800a55c:	0800a5ad 	.word	0x0800a5ad
 800a560:	2300      	movs	r3, #0
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a566:	e14a      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e146      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e142      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e13e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a580:	cfff69f3 	.word	0xcfff69f3
 800a584:	58000c00 	.word	0x58000c00
 800a588:	11fff4ff 	.word	0x11fff4ff
 800a58c:	40011000 	.word	0x40011000
 800a590:	58024400 	.word	0x58024400
 800a594:	40004400 	.word	0x40004400
 800a598:	40004800 	.word	0x40004800
 800a59c:	40004c00 	.word	0x40004c00
 800a5a0:	40005000 	.word	0x40005000
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e128      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a5ac:	2340      	movs	r3, #64	@ 0x40
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e124      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a5b4:	2380      	movs	r3, #128	@ 0x80
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e120      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4acb      	ldr	r2, [pc, #812]	@ (800a8f0 <UART_SetConfig+0x698>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d176      	bne.n	800a6b4 <UART_SetConfig+0x45c>
 800a5c6:	4bcb      	ldr	r3, [pc, #812]	@ (800a8f4 <UART_SetConfig+0x69c>)
 800a5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ce:	2b28      	cmp	r3, #40	@ 0x28
 800a5d0:	d86c      	bhi.n	800a6ac <UART_SetConfig+0x454>
 800a5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <UART_SetConfig+0x380>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a6ad 	.word	0x0800a6ad
 800a5e0:	0800a6ad 	.word	0x0800a6ad
 800a5e4:	0800a6ad 	.word	0x0800a6ad
 800a5e8:	0800a6ad 	.word	0x0800a6ad
 800a5ec:	0800a6ad 	.word	0x0800a6ad
 800a5f0:	0800a6ad 	.word	0x0800a6ad
 800a5f4:	0800a6ad 	.word	0x0800a6ad
 800a5f8:	0800a685 	.word	0x0800a685
 800a5fc:	0800a6ad 	.word	0x0800a6ad
 800a600:	0800a6ad 	.word	0x0800a6ad
 800a604:	0800a6ad 	.word	0x0800a6ad
 800a608:	0800a6ad 	.word	0x0800a6ad
 800a60c:	0800a6ad 	.word	0x0800a6ad
 800a610:	0800a6ad 	.word	0x0800a6ad
 800a614:	0800a6ad 	.word	0x0800a6ad
 800a618:	0800a68d 	.word	0x0800a68d
 800a61c:	0800a6ad 	.word	0x0800a6ad
 800a620:	0800a6ad 	.word	0x0800a6ad
 800a624:	0800a6ad 	.word	0x0800a6ad
 800a628:	0800a6ad 	.word	0x0800a6ad
 800a62c:	0800a6ad 	.word	0x0800a6ad
 800a630:	0800a6ad 	.word	0x0800a6ad
 800a634:	0800a6ad 	.word	0x0800a6ad
 800a638:	0800a695 	.word	0x0800a695
 800a63c:	0800a6ad 	.word	0x0800a6ad
 800a640:	0800a6ad 	.word	0x0800a6ad
 800a644:	0800a6ad 	.word	0x0800a6ad
 800a648:	0800a6ad 	.word	0x0800a6ad
 800a64c:	0800a6ad 	.word	0x0800a6ad
 800a650:	0800a6ad 	.word	0x0800a6ad
 800a654:	0800a6ad 	.word	0x0800a6ad
 800a658:	0800a69d 	.word	0x0800a69d
 800a65c:	0800a6ad 	.word	0x0800a6ad
 800a660:	0800a6ad 	.word	0x0800a6ad
 800a664:	0800a6ad 	.word	0x0800a6ad
 800a668:	0800a6ad 	.word	0x0800a6ad
 800a66c:	0800a6ad 	.word	0x0800a6ad
 800a670:	0800a6ad 	.word	0x0800a6ad
 800a674:	0800a6ad 	.word	0x0800a6ad
 800a678:	0800a6a5 	.word	0x0800a6a5
 800a67c:	2301      	movs	r3, #1
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e0bc      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a684:	2304      	movs	r3, #4
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e0b8      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a68c:	2308      	movs	r3, #8
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e0b4      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a694:	2310      	movs	r3, #16
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e0b0      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a69c:	2320      	movs	r3, #32
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e0ac      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a6a4:	2340      	movs	r3, #64	@ 0x40
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e0a8      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a6ac:	2380      	movs	r3, #128	@ 0x80
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e0a4      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a8f      	ldr	r2, [pc, #572]	@ (800a8f8 <UART_SetConfig+0x6a0>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d130      	bne.n	800a720 <UART_SetConfig+0x4c8>
 800a6be:	4b8d      	ldr	r3, [pc, #564]	@ (800a8f4 <UART_SetConfig+0x69c>)
 800a6c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d826      	bhi.n	800a718 <UART_SetConfig+0x4c0>
 800a6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d0 <UART_SetConfig+0x478>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a6e9 	.word	0x0800a6e9
 800a6d4:	0800a6f1 	.word	0x0800a6f1
 800a6d8:	0800a6f9 	.word	0x0800a6f9
 800a6dc:	0800a701 	.word	0x0800a701
 800a6e0:	0800a709 	.word	0x0800a709
 800a6e4:	0800a711 	.word	0x0800a711
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e086      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a6f0:	2304      	movs	r3, #4
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e082      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a6f8:	2308      	movs	r3, #8
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e07e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a700:	2310      	movs	r3, #16
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e07a      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a708:	2320      	movs	r3, #32
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e076      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a710:	2340      	movs	r3, #64	@ 0x40
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e072      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a718:	2380      	movs	r3, #128	@ 0x80
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e06e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a75      	ldr	r2, [pc, #468]	@ (800a8fc <UART_SetConfig+0x6a4>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d130      	bne.n	800a78c <UART_SetConfig+0x534>
 800a72a:	4b72      	ldr	r3, [pc, #456]	@ (800a8f4 <UART_SetConfig+0x69c>)
 800a72c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	2b05      	cmp	r3, #5
 800a734:	d826      	bhi.n	800a784 <UART_SetConfig+0x52c>
 800a736:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <UART_SetConfig+0x4e4>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a755 	.word	0x0800a755
 800a740:	0800a75d 	.word	0x0800a75d
 800a744:	0800a765 	.word	0x0800a765
 800a748:	0800a76d 	.word	0x0800a76d
 800a74c:	0800a775 	.word	0x0800a775
 800a750:	0800a77d 	.word	0x0800a77d
 800a754:	2300      	movs	r3, #0
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75a:	e050      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a75c:	2304      	movs	r3, #4
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e04c      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a764:	2308      	movs	r3, #8
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e048      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a76c:	2310      	movs	r3, #16
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e044      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a774:	2320      	movs	r3, #32
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e040      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a77c:	2340      	movs	r3, #64	@ 0x40
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e03c      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a784:	2380      	movs	r3, #128	@ 0x80
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e038      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a5b      	ldr	r2, [pc, #364]	@ (800a900 <UART_SetConfig+0x6a8>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d130      	bne.n	800a7f8 <UART_SetConfig+0x5a0>
 800a796:	4b57      	ldr	r3, [pc, #348]	@ (800a8f4 <UART_SetConfig+0x69c>)
 800a798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79a:	f003 0307 	and.w	r3, r3, #7
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d826      	bhi.n	800a7f0 <UART_SetConfig+0x598>
 800a7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a8 <UART_SetConfig+0x550>)
 800a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a8:	0800a7c1 	.word	0x0800a7c1
 800a7ac:	0800a7c9 	.word	0x0800a7c9
 800a7b0:	0800a7d1 	.word	0x0800a7d1
 800a7b4:	0800a7d9 	.word	0x0800a7d9
 800a7b8:	0800a7e1 	.word	0x0800a7e1
 800a7bc:	0800a7e9 	.word	0x0800a7e9
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c6:	e01a      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7c8:	2304      	movs	r3, #4
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e016      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e012      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7d8:	2310      	movs	r3, #16
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e00e      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7e0:	2320      	movs	r3, #32
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e00a      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7e8:	2340      	movs	r3, #64	@ 0x40
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e006      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7f0:	2380      	movs	r3, #128	@ 0x80
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e002      	b.n	800a7fe <UART_SetConfig+0x5a6>
 800a7f8:	2380      	movs	r3, #128	@ 0x80
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a3f      	ldr	r2, [pc, #252]	@ (800a900 <UART_SetConfig+0x6a8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	f040 80f8 	bne.w	800a9fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a80a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a80e:	2b20      	cmp	r3, #32
 800a810:	dc46      	bgt.n	800a8a0 <UART_SetConfig+0x648>
 800a812:	2b02      	cmp	r3, #2
 800a814:	f2c0 8082 	blt.w	800a91c <UART_SetConfig+0x6c4>
 800a818:	3b02      	subs	r3, #2
 800a81a:	2b1e      	cmp	r3, #30
 800a81c:	d87e      	bhi.n	800a91c <UART_SetConfig+0x6c4>
 800a81e:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <UART_SetConfig+0x5cc>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a8a7 	.word	0x0800a8a7
 800a828:	0800a91d 	.word	0x0800a91d
 800a82c:	0800a8af 	.word	0x0800a8af
 800a830:	0800a91d 	.word	0x0800a91d
 800a834:	0800a91d 	.word	0x0800a91d
 800a838:	0800a91d 	.word	0x0800a91d
 800a83c:	0800a8bf 	.word	0x0800a8bf
 800a840:	0800a91d 	.word	0x0800a91d
 800a844:	0800a91d 	.word	0x0800a91d
 800a848:	0800a91d 	.word	0x0800a91d
 800a84c:	0800a91d 	.word	0x0800a91d
 800a850:	0800a91d 	.word	0x0800a91d
 800a854:	0800a91d 	.word	0x0800a91d
 800a858:	0800a91d 	.word	0x0800a91d
 800a85c:	0800a8cf 	.word	0x0800a8cf
 800a860:	0800a91d 	.word	0x0800a91d
 800a864:	0800a91d 	.word	0x0800a91d
 800a868:	0800a91d 	.word	0x0800a91d
 800a86c:	0800a91d 	.word	0x0800a91d
 800a870:	0800a91d 	.word	0x0800a91d
 800a874:	0800a91d 	.word	0x0800a91d
 800a878:	0800a91d 	.word	0x0800a91d
 800a87c:	0800a91d 	.word	0x0800a91d
 800a880:	0800a91d 	.word	0x0800a91d
 800a884:	0800a91d 	.word	0x0800a91d
 800a888:	0800a91d 	.word	0x0800a91d
 800a88c:	0800a91d 	.word	0x0800a91d
 800a890:	0800a91d 	.word	0x0800a91d
 800a894:	0800a91d 	.word	0x0800a91d
 800a898:	0800a91d 	.word	0x0800a91d
 800a89c:	0800a90f 	.word	0x0800a90f
 800a8a0:	2b40      	cmp	r3, #64	@ 0x40
 800a8a2:	d037      	beq.n	800a914 <UART_SetConfig+0x6bc>
 800a8a4:	e03a      	b.n	800a91c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8a6:	f7fe f83d 	bl	8008924 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8ac:	e03c      	b.n	800a928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe f84c 	bl	8008950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8bc:	e034      	b.n	800a928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8be:	f107 0318 	add.w	r3, r7, #24
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe f998 	bl	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e02c      	b.n	800a928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ce:	4b09      	ldr	r3, [pc, #36]	@ (800a8f4 <UART_SetConfig+0x69c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0320 	and.w	r3, r3, #32
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d016      	beq.n	800a908 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8da:	4b06      	ldr	r3, [pc, #24]	@ (800a8f4 <UART_SetConfig+0x69c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	08db      	lsrs	r3, r3, #3
 800a8e0:	f003 0303 	and.w	r3, r3, #3
 800a8e4:	4a07      	ldr	r2, [pc, #28]	@ (800a904 <UART_SetConfig+0x6ac>)
 800a8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8ec:	e01c      	b.n	800a928 <UART_SetConfig+0x6d0>
 800a8ee:	bf00      	nop
 800a8f0:	40011400 	.word	0x40011400
 800a8f4:	58024400 	.word	0x58024400
 800a8f8:	40007800 	.word	0x40007800
 800a8fc:	40007c00 	.word	0x40007c00
 800a900:	58000c00 	.word	0x58000c00
 800a904:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a908:	4b9d      	ldr	r3, [pc, #628]	@ (800ab80 <UART_SetConfig+0x928>)
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90c:	e00c      	b.n	800a928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a90e:	4b9d      	ldr	r3, [pc, #628]	@ (800ab84 <UART_SetConfig+0x92c>)
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a912:	e009      	b.n	800a928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91a:	e005      	b.n	800a928 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a926:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 81de 	beq.w	800acec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a934:	4a94      	ldr	r2, [pc, #592]	@ (800ab88 <UART_SetConfig+0x930>)
 800a936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a93a:	461a      	mov	r2, r3
 800a93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a93e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a942:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	4613      	mov	r3, r2
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	4413      	add	r3, r2
 800a94e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a950:	429a      	cmp	r2, r3
 800a952:	d305      	bcc.n	800a960 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d903      	bls.n	800a968 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a966:	e1c1      	b.n	800acec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a96a:	2200      	movs	r2, #0
 800a96c:	60bb      	str	r3, [r7, #8]
 800a96e:	60fa      	str	r2, [r7, #12]
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	4a84      	ldr	r2, [pc, #528]	@ (800ab88 <UART_SetConfig+0x930>)
 800a976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	2200      	movs	r2, #0
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a98a:	f7f5 fd61 	bl	8000450 <__aeabi_uldivmod>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4610      	mov	r0, r2
 800a994:	4619      	mov	r1, r3
 800a996:	f04f 0200 	mov.w	r2, #0
 800a99a:	f04f 0300 	mov.w	r3, #0
 800a99e:	020b      	lsls	r3, r1, #8
 800a9a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9a4:	0202      	lsls	r2, r0, #8
 800a9a6:	6979      	ldr	r1, [r7, #20]
 800a9a8:	6849      	ldr	r1, [r1, #4]
 800a9aa:	0849      	lsrs	r1, r1, #1
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	eb12 0804 	adds.w	r8, r2, r4
 800a9b6:	eb43 0905 	adc.w	r9, r3, r5
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	469a      	mov	sl, r3
 800a9c2:	4693      	mov	fp, r2
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	465b      	mov	r3, fp
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7f5 fd40 	bl	8000450 <__aeabi_uldivmod>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9de:	d308      	bcc.n	800a9f2 <UART_SetConfig+0x79a>
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9e6:	d204      	bcs.n	800a9f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ee:	60da      	str	r2, [r3, #12]
 800a9f0:	e17c      	b.n	800acec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9f8:	e178      	b.n	800acec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa02:	f040 80c5 	bne.w	800ab90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa0a:	2b20      	cmp	r3, #32
 800aa0c:	dc48      	bgt.n	800aaa0 <UART_SetConfig+0x848>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	db7b      	blt.n	800ab0a <UART_SetConfig+0x8b2>
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	d879      	bhi.n	800ab0a <UART_SetConfig+0x8b2>
 800aa16:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <UART_SetConfig+0x7c4>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaaf 	.word	0x0800aaaf
 800aa24:	0800ab0b 	.word	0x0800ab0b
 800aa28:	0800ab0b 	.word	0x0800ab0b
 800aa2c:	0800aab7 	.word	0x0800aab7
 800aa30:	0800ab0b 	.word	0x0800ab0b
 800aa34:	0800ab0b 	.word	0x0800ab0b
 800aa38:	0800ab0b 	.word	0x0800ab0b
 800aa3c:	0800aac7 	.word	0x0800aac7
 800aa40:	0800ab0b 	.word	0x0800ab0b
 800aa44:	0800ab0b 	.word	0x0800ab0b
 800aa48:	0800ab0b 	.word	0x0800ab0b
 800aa4c:	0800ab0b 	.word	0x0800ab0b
 800aa50:	0800ab0b 	.word	0x0800ab0b
 800aa54:	0800ab0b 	.word	0x0800ab0b
 800aa58:	0800ab0b 	.word	0x0800ab0b
 800aa5c:	0800aad7 	.word	0x0800aad7
 800aa60:	0800ab0b 	.word	0x0800ab0b
 800aa64:	0800ab0b 	.word	0x0800ab0b
 800aa68:	0800ab0b 	.word	0x0800ab0b
 800aa6c:	0800ab0b 	.word	0x0800ab0b
 800aa70:	0800ab0b 	.word	0x0800ab0b
 800aa74:	0800ab0b 	.word	0x0800ab0b
 800aa78:	0800ab0b 	.word	0x0800ab0b
 800aa7c:	0800ab0b 	.word	0x0800ab0b
 800aa80:	0800ab0b 	.word	0x0800ab0b
 800aa84:	0800ab0b 	.word	0x0800ab0b
 800aa88:	0800ab0b 	.word	0x0800ab0b
 800aa8c:	0800ab0b 	.word	0x0800ab0b
 800aa90:	0800ab0b 	.word	0x0800ab0b
 800aa94:	0800ab0b 	.word	0x0800ab0b
 800aa98:	0800ab0b 	.word	0x0800ab0b
 800aa9c:	0800aafd 	.word	0x0800aafd
 800aaa0:	2b40      	cmp	r3, #64	@ 0x40
 800aaa2:	d02e      	beq.n	800ab02 <UART_SetConfig+0x8aa>
 800aaa4:	e031      	b.n	800ab0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaa6:	f7fc fcc5 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 800aaaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaac:	e033      	b.n	800ab16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaae:	f7fc fcd7 	bl	8007460 <HAL_RCC_GetPCLK2Freq>
 800aab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aab4:	e02f      	b.n	800ab16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fd ff48 	bl	8008950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac4:	e027      	b.n	800ab16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac6:	f107 0318 	add.w	r3, r7, #24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe f894 	bl	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad4:	e01f      	b.n	800ab16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aad6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab8c <UART_SetConfig+0x934>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0320 	and.w	r3, r3, #32
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aae2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab8c <UART_SetConfig+0x934>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	08db      	lsrs	r3, r3, #3
 800aae8:	f003 0303 	and.w	r3, r3, #3
 800aaec:	4a24      	ldr	r2, [pc, #144]	@ (800ab80 <UART_SetConfig+0x928>)
 800aaee:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaf4:	e00f      	b.n	800ab16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aaf6:	4b22      	ldr	r3, [pc, #136]	@ (800ab80 <UART_SetConfig+0x928>)
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafa:	e00c      	b.n	800ab16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aafc:	4b21      	ldr	r3, [pc, #132]	@ (800ab84 <UART_SetConfig+0x92c>)
 800aafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab00:	e009      	b.n	800ab16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e005      	b.n	800ab16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 80e7 	beq.w	800acec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab22:	4a19      	ldr	r2, [pc, #100]	@ (800ab88 <UART_SetConfig+0x930>)
 800ab24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab30:	005a      	lsls	r2, r3, #1
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	441a      	add	r2, r3
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab46:	2b0f      	cmp	r3, #15
 800ab48:	d916      	bls.n	800ab78 <UART_SetConfig+0x920>
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab50:	d212      	bcs.n	800ab78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	f023 030f 	bic.w	r3, r3, #15
 800ab5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5e:	085b      	lsrs	r3, r3, #1
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ab74:	60da      	str	r2, [r3, #12]
 800ab76:	e0b9      	b.n	800acec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab7e:	e0b5      	b.n	800acec <UART_SetConfig+0xa94>
 800ab80:	03d09000 	.word	0x03d09000
 800ab84:	003d0900 	.word	0x003d0900
 800ab88:	0801dd94 	.word	0x0801dd94
 800ab8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	dc49      	bgt.n	800ac2c <UART_SetConfig+0x9d4>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db7c      	blt.n	800ac96 <UART_SetConfig+0xa3e>
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d87a      	bhi.n	800ac96 <UART_SetConfig+0xa3e>
 800aba0:	a201      	add	r2, pc, #4	@ (adr r2, 800aba8 <UART_SetConfig+0x950>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800ac33 	.word	0x0800ac33
 800abac:	0800ac3b 	.word	0x0800ac3b
 800abb0:	0800ac97 	.word	0x0800ac97
 800abb4:	0800ac97 	.word	0x0800ac97
 800abb8:	0800ac43 	.word	0x0800ac43
 800abbc:	0800ac97 	.word	0x0800ac97
 800abc0:	0800ac97 	.word	0x0800ac97
 800abc4:	0800ac97 	.word	0x0800ac97
 800abc8:	0800ac53 	.word	0x0800ac53
 800abcc:	0800ac97 	.word	0x0800ac97
 800abd0:	0800ac97 	.word	0x0800ac97
 800abd4:	0800ac97 	.word	0x0800ac97
 800abd8:	0800ac97 	.word	0x0800ac97
 800abdc:	0800ac97 	.word	0x0800ac97
 800abe0:	0800ac97 	.word	0x0800ac97
 800abe4:	0800ac97 	.word	0x0800ac97
 800abe8:	0800ac63 	.word	0x0800ac63
 800abec:	0800ac97 	.word	0x0800ac97
 800abf0:	0800ac97 	.word	0x0800ac97
 800abf4:	0800ac97 	.word	0x0800ac97
 800abf8:	0800ac97 	.word	0x0800ac97
 800abfc:	0800ac97 	.word	0x0800ac97
 800ac00:	0800ac97 	.word	0x0800ac97
 800ac04:	0800ac97 	.word	0x0800ac97
 800ac08:	0800ac97 	.word	0x0800ac97
 800ac0c:	0800ac97 	.word	0x0800ac97
 800ac10:	0800ac97 	.word	0x0800ac97
 800ac14:	0800ac97 	.word	0x0800ac97
 800ac18:	0800ac97 	.word	0x0800ac97
 800ac1c:	0800ac97 	.word	0x0800ac97
 800ac20:	0800ac97 	.word	0x0800ac97
 800ac24:	0800ac97 	.word	0x0800ac97
 800ac28:	0800ac89 	.word	0x0800ac89
 800ac2c:	2b40      	cmp	r3, #64	@ 0x40
 800ac2e:	d02e      	beq.n	800ac8e <UART_SetConfig+0xa36>
 800ac30:	e031      	b.n	800ac96 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac32:	f7fc fbff 	bl	8007434 <HAL_RCC_GetPCLK1Freq>
 800ac36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac38:	e033      	b.n	800aca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac3a:	f7fc fc11 	bl	8007460 <HAL_RCC_GetPCLK2Freq>
 800ac3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac40:	e02f      	b.n	800aca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fd fe82 	bl	8008950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac50:	e027      	b.n	800aca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac52:	f107 0318 	add.w	r3, r7, #24
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fd ffce 	bl	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac60:	e01f      	b.n	800aca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac62:	4b2d      	ldr	r3, [pc, #180]	@ (800ad18 <UART_SetConfig+0xac0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ad18 <UART_SetConfig+0xac0>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	08db      	lsrs	r3, r3, #3
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	4a28      	ldr	r2, [pc, #160]	@ (800ad1c <UART_SetConfig+0xac4>)
 800ac7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac80:	e00f      	b.n	800aca2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac82:	4b26      	ldr	r3, [pc, #152]	@ (800ad1c <UART_SetConfig+0xac4>)
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac86:	e00c      	b.n	800aca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac88:	4b25      	ldr	r3, [pc, #148]	@ (800ad20 <UART_SetConfig+0xac8>)
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e009      	b.n	800aca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac94:	e005      	b.n	800aca2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aca0:	bf00      	nop
    }

    if (pclk != 0U)
 800aca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d021      	beq.n	800acec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acac:	4a1d      	ldr	r2, [pc, #116]	@ (800ad24 <UART_SetConfig+0xacc>)
 800acae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acb2:	461a      	mov	r2, r3
 800acb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	085b      	lsrs	r3, r3, #1
 800acc0:	441a      	add	r2, r3
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	2b0f      	cmp	r3, #15
 800acd0:	d909      	bls.n	800ace6 <UART_SetConfig+0xa8e>
 800acd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acd8:	d205      	bcs.n	800ace6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	b29a      	uxth	r2, r3
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	60da      	str	r2, [r3, #12]
 800ace4:	e002      	b.n	800acec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2201      	movs	r2, #1
 800acf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2200      	movs	r2, #0
 800ad00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2200      	movs	r2, #0
 800ad06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad08:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3748      	adds	r7, #72	@ 0x48
 800ad10:	46bd      	mov	sp, r7
 800ad12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad16:	bf00      	nop
 800ad18:	58024400 	.word	0x58024400
 800ad1c:	03d09000 	.word	0x03d09000
 800ad20:	003d0900 	.word	0x003d0900
 800ad24:	0801dd94 	.word	0x0801dd94

0800ad28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad34:	f003 0308 	and.w	r3, r3, #8
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00a      	beq.n	800ad52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00a      	beq.n	800ad74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00a      	beq.n	800ad96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00a      	beq.n	800adb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbc:	f003 0310 	and.w	r3, r3, #16
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00a      	beq.n	800adda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	f003 0320 	and.w	r3, r3, #32
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d01a      	beq.n	800ae3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae26:	d10a      	bne.n	800ae3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	605a      	str	r2, [r3, #4]
  }
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b098      	sub	sp, #96	@ 0x60
 800ae70:	af02      	add	r7, sp, #8
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae7c:	f7f7 fb06 	bl	800248c <HAL_GetTick>
 800ae80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0308 	and.w	r3, r3, #8
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d12f      	bne.n	800aef0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f88e 	bl	800afc0 <UART_WaitOnFlagUntilTimeout>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d022      	beq.n	800aef0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb2:	e853 3f00 	ldrex	r3, [r3]
 800aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aebe:	653b      	str	r3, [r7, #80]	@ 0x50
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aec8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aed0:	e841 2300 	strex	r3, r2, [r1]
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1e6      	bne.n	800aeaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2220      	movs	r2, #32
 800aee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e063      	b.n	800afb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d149      	bne.n	800af92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aefe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af06:	2200      	movs	r2, #0
 800af08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f857 	bl	800afc0 <UART_WaitOnFlagUntilTimeout>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d03c      	beq.n	800af92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af20:	e853 3f00 	ldrex	r3, [r3]
 800af24:	623b      	str	r3, [r7, #32]
   return(result);
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af36:	633b      	str	r3, [r7, #48]	@ 0x30
 800af38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e6      	bne.n	800af18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	60fb      	str	r3, [r7, #12]
   return(result);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f023 0301 	bic.w	r3, r3, #1
 800af60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af6a:	61fa      	str	r2, [r7, #28]
 800af6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	69b9      	ldr	r1, [r7, #24]
 800af70:	69fa      	ldr	r2, [r7, #28]
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	617b      	str	r3, [r7, #20]
   return(result);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e5      	bne.n	800af4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2220      	movs	r2, #32
 800af82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e012      	b.n	800afb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2220      	movs	r2, #32
 800af9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3758      	adds	r7, #88	@ 0x58
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afd0:	e04f      	b.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afd8:	d04b      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afda:	f7f7 fa57 	bl	800248c <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d302      	bcc.n	800aff0 <UART_WaitOnFlagUntilTimeout+0x30>
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e04e      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	d037      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b80      	cmp	r3, #128	@ 0x80
 800b006:	d034      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b40      	cmp	r3, #64	@ 0x40
 800b00c:	d031      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	f003 0308 	and.w	r3, r3, #8
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d110      	bne.n	800b03e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2208      	movs	r2, #8
 800b022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 f921 	bl	800b26c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2208      	movs	r2, #8
 800b02e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e029      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b04c:	d111      	bne.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 f907 	bl	800b26c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2220      	movs	r2, #32
 800b062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e00f      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4013      	ands	r3, r2
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	429a      	cmp	r2, r3
 800b080:	bf0c      	ite	eq
 800b082:	2301      	moveq	r3, #1
 800b084:	2300      	movne	r3, #0
 800b086:	b2db      	uxtb	r3, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d0a0      	beq.n	800afd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b096      	sub	sp, #88	@ 0x58
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2222      	movs	r2, #34	@ 0x22
 800b0c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d02d      	beq.n	800b12e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0d8:	4a40      	ldr	r2, [pc, #256]	@ (800b1dc <UART_Start_Receive_DMA+0x140>)
 800b0da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1e0 <UART_Start_Receive_DMA+0x144>)
 800b0e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ec:	4a3d      	ldr	r2, [pc, #244]	@ (800b1e4 <UART_Start_Receive_DMA+0x148>)
 800b0ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3324      	adds	r3, #36	@ 0x24
 800b106:	4619      	mov	r1, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b10c:	461a      	mov	r2, r3
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	f7f7 fe48 	bl	8002da4 <HAL_DMA_Start_IT>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d009      	beq.n	800b12e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2210      	movs	r2, #16
 800b11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e051      	b.n	800b1d2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d018      	beq.n	800b168 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	e853 3f00 	ldrex	r3, [r3]
 800b142:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b14a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b154:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b156:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b158:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b15a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b15c:	e841 2300 	strex	r3, r2, [r1]
 800b160:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1e6      	bne.n	800b136 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3308      	adds	r3, #8
 800b16e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b172:	e853 3f00 	ldrex	r3, [r3]
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b188:	637a      	str	r2, [r7, #52]	@ 0x34
 800b18a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b18e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b190:	e841 2300 	strex	r3, r2, [r1]
 800b194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e5      	bne.n	800b168 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1bc:	623a      	str	r2, [r7, #32]
 800b1be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	69f9      	ldr	r1, [r7, #28]
 800b1c2:	6a3a      	ldr	r2, [r7, #32]
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e5      	bne.n	800b19c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3758      	adds	r7, #88	@ 0x58
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800b3eb 	.word	0x0800b3eb
 800b1e0:	0800b513 	.word	0x0800b513
 800b1e4:	0800b551 	.word	0x0800b551

0800b1e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b08f      	sub	sp, #60	@ 0x3c
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b204:	637b      	str	r3, [r7, #52]	@ 0x34
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b210:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b216:	e841 2300 	strex	r3, r2, [r1]
 800b21a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1e6      	bne.n	800b1f0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3308      	adds	r3, #8
 800b228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	60bb      	str	r3, [r7, #8]
   return(result);
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b238:	633b      	str	r3, [r7, #48]	@ 0x30
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3308      	adds	r3, #8
 800b240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b242:	61ba      	str	r2, [r7, #24]
 800b244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6979      	ldr	r1, [r7, #20]
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	613b      	str	r3, [r7, #16]
   return(result);
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e5      	bne.n	800b222 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2220      	movs	r2, #32
 800b25a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b25e:	bf00      	nop
 800b260:	373c      	adds	r7, #60	@ 0x3c
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
	...

0800b26c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b095      	sub	sp, #84	@ 0x54
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27c:	e853 3f00 	ldrex	r3, [r3]
 800b280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b292:	643b      	str	r3, [r7, #64]	@ 0x40
 800b294:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e6      	bne.n	800b274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	4b1e      	ldr	r3, [pc, #120]	@ (800b334 <UART_EndRxTransfer+0xc8>)
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e5      	bne.n	800b2a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d118      	bne.n	800b314 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f023 0310 	bic.w	r3, r3, #16
 800b2f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	6979      	ldr	r1, [r7, #20]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	613b      	str	r3, [r7, #16]
   return(result);
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e6      	bne.n	800b2e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2220      	movs	r2, #32
 800b318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b328:	bf00      	nop
 800b32a:	3754      	adds	r7, #84	@ 0x54
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	effffffe 	.word	0xeffffffe

0800b338 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b090      	sub	sp, #64	@ 0x40
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b344:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b34e:	d037      	beq.n	800b3c0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b352:	2200      	movs	r2, #0
 800b354:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3308      	adds	r3, #8
 800b35e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	e853 3f00 	ldrex	r3, [r3]
 800b366:	623b      	str	r3, [r7, #32]
   return(result);
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b36e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3308      	adds	r3, #8
 800b376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b378:	633a      	str	r2, [r7, #48]	@ 0x30
 800b37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b37e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e5      	bne.n	800b358 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	60fb      	str	r3, [r7, #12]
   return(result);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	69b9      	ldr	r1, [r7, #24]
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	617b      	str	r3, [r7, #20]
   return(result);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e6      	bne.n	800b38c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3be:	e002      	b.n	800b3c6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b3c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b3c2:	f7fe ff0b 	bl	800a1dc <HAL_UART_TxCpltCallback>
}
 800b3c6:	bf00      	nop
 800b3c8:	3740      	adds	r7, #64	@ 0x40
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7fe ff07 	bl	800a1f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b09c      	sub	sp, #112	@ 0x70
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b400:	d071      	beq.n	800b4e6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b404:	2200      	movs	r2, #0
 800b406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b40a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b412:	e853 3f00 	ldrex	r3, [r3]
 800b416:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b41a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b41e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	461a      	mov	r2, r3
 800b426:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b428:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b42a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b42e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b430:	e841 2300 	strex	r3, r2, [r1]
 800b434:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e6      	bne.n	800b40a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b43c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3308      	adds	r3, #8
 800b442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b446:	e853 3f00 	ldrex	r3, [r3]
 800b44a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44e:	f023 0301 	bic.w	r3, r3, #1
 800b452:	667b      	str	r3, [r7, #100]	@ 0x64
 800b454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3308      	adds	r3, #8
 800b45a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b45c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b45e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b464:	e841 2300 	strex	r3, r2, [r1]
 800b468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1e5      	bne.n	800b43c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3308      	adds	r3, #8
 800b476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	623b      	str	r3, [r7, #32]
   return(result);
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b486:	663b      	str	r3, [r7, #96]	@ 0x60
 800b488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3308      	adds	r3, #8
 800b48e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b490:	633a      	str	r2, [r7, #48]	@ 0x30
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b498:	e841 2300 	strex	r3, r2, [r1]
 800b49c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e5      	bne.n	800b470 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d118      	bne.n	800b4e6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f023 0310 	bic.w	r3, r3, #16
 800b4c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4d2:	61fb      	str	r3, [r7, #28]
 800b4d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d6:	69b9      	ldr	r1, [r7, #24]
 800b4d8:	69fa      	ldr	r2, [r7, #28]
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	617b      	str	r3, [r7, #20]
   return(result);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e6      	bne.n	800b4b4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d107      	bne.n	800b504 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4fe:	f7fe fe9f 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b502:	e002      	b.n	800b50a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b504:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b506:	f7fe fe7d 	bl	800a204 <HAL_UART_RxCpltCallback>
}
 800b50a:	bf00      	nop
 800b50c:	3770      	adds	r7, #112	@ 0x70
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d109      	bne.n	800b542 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	b29b      	uxth	r3, r3
 800b538:	4619      	mov	r1, r3
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7fe fe80 	bl	800a240 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b540:	e002      	b.n	800b548 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7fe fe68 	bl	800a218 <HAL_UART_RxHalfCpltCallback>
}
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b55c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b564:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b56c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b578:	2b80      	cmp	r3, #128	@ 0x80
 800b57a:	d109      	bne.n	800b590 <UART_DMAError+0x40>
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2b21      	cmp	r3, #33	@ 0x21
 800b580:	d106      	bne.n	800b590 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2200      	movs	r2, #0
 800b586:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b58a:	6978      	ldr	r0, [r7, #20]
 800b58c:	f7ff fe2c 	bl	800b1e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b59a:	2b40      	cmp	r3, #64	@ 0x40
 800b59c:	d109      	bne.n	800b5b2 <UART_DMAError+0x62>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b22      	cmp	r3, #34	@ 0x22
 800b5a2:	d106      	bne.n	800b5b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b5ac:	6978      	ldr	r0, [r7, #20]
 800b5ae:	f7ff fe5d 	bl	800b26c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b8:	f043 0210 	orr.w	r2, r3, #16
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5c2:	6978      	ldr	r0, [r7, #20]
 800b5c4:	f7fe fe32 	bl	800a22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5c8:	bf00      	nop
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7fe fe1c 	bl	800a22c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5f4:	bf00      	nop
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	60bb      	str	r3, [r7, #8]
   return(result);
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b618:	61fb      	str	r3, [r7, #28]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	61bb      	str	r3, [r7, #24]
 800b624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	613b      	str	r3, [r7, #16]
   return(result);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e6      	bne.n	800b604 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2220      	movs	r2, #32
 800b63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7fe fdc9 	bl	800a1dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b64a:	bf00      	nop
 800b64c:	3720      	adds	r7, #32
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b66e:	bf00      	nop
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b682:	bf00      	nop
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b68e:	b480      	push	{r7}
 800b690:	b085      	sub	sp, #20
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d101      	bne.n	800b6a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e027      	b.n	800b6f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2224      	movs	r2, #36	@ 0x24
 800b6b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 0201 	bic.w	r2, r2, #1
 800b6ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b6d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b710:	2b01      	cmp	r3, #1
 800b712:	d101      	bne.n	800b718 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b714:	2302      	movs	r3, #2
 800b716:	e02d      	b.n	800b774 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2224      	movs	r2, #36	@ 0x24
 800b724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f022 0201 	bic.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	430a      	orrs	r2, r1
 800b752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f84f 	bl	800b7f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2220      	movs	r2, #32
 800b766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b790:	2302      	movs	r3, #2
 800b792:	e02d      	b.n	800b7f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2224      	movs	r2, #36	@ 0x24
 800b7a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f022 0201 	bic.w	r2, r2, #1
 800b7ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f811 	bl	800b7f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b804:	2b00      	cmp	r3, #0
 800b806:	d108      	bne.n	800b81a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b818:	e031      	b.n	800b87e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b81a:	2310      	movs	r3, #16
 800b81c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b81e:	2310      	movs	r3, #16
 800b820:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	0e5b      	lsrs	r3, r3, #25
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	0f5b      	lsrs	r3, r3, #29
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	f003 0307 	and.w	r3, r3, #7
 800b840:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b842:	7bbb      	ldrb	r3, [r7, #14]
 800b844:	7b3a      	ldrb	r2, [r7, #12]
 800b846:	4911      	ldr	r1, [pc, #68]	@ (800b88c <UARTEx_SetNbDataToProcess+0x94>)
 800b848:	5c8a      	ldrb	r2, [r1, r2]
 800b84a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b84e:	7b3a      	ldrb	r2, [r7, #12]
 800b850:	490f      	ldr	r1, [pc, #60]	@ (800b890 <UARTEx_SetNbDataToProcess+0x98>)
 800b852:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b854:	fb93 f3f2 	sdiv	r3, r3, r2
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	7b7a      	ldrb	r2, [r7, #13]
 800b864:	4909      	ldr	r1, [pc, #36]	@ (800b88c <UARTEx_SetNbDataToProcess+0x94>)
 800b866:	5c8a      	ldrb	r2, [r1, r2]
 800b868:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b86c:	7b7a      	ldrb	r2, [r7, #13]
 800b86e:	4908      	ldr	r1, [pc, #32]	@ (800b890 <UARTEx_SetNbDataToProcess+0x98>)
 800b870:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b872:	fb93 f3f2 	sdiv	r3, r3, r2
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b87e:	bf00      	nop
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	0801ddac 	.word	0x0801ddac
 800b890:	0801ddb4 	.word	0x0801ddb4

0800b894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b894:	b084      	sub	sp, #16
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	f107 001c 	add.w	r0, r7, #28
 800b8a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d121      	bne.n	800b8f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	4b2c      	ldr	r3, [pc, #176]	@ (800b970 <USB_CoreInit+0xdc>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d105      	bne.n	800b8e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 faaa 	bl	800be40 <USB_CoreReset>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
 800b8f0:	e01b      	b.n	800b92a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa9e 	bl	800be40 <USB_CoreReset>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b908:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d106      	bne.n	800b91e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b914:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b91c:	e005      	b.n	800b92a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b922:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b92a:	7fbb      	ldrb	r3, [r7, #30]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d116      	bne.n	800b95e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b934:	b29a      	uxth	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b93e:	4b0d      	ldr	r3, [pc, #52]	@ (800b974 <USB_CoreInit+0xe0>)
 800b940:	4313      	orrs	r3, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f043 0206 	orr.w	r2, r3, #6
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f043 0220 	orr.w	r2, r3, #32
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b96a:	b004      	add	sp, #16
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	ffbdffbf 	.word	0xffbdffbf
 800b974:	03ee0000 	.word	0x03ee0000

0800b978 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f023 0201 	bic.w	r2, r3, #1
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9b6:	78fb      	ldrb	r3, [r7, #3]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d115      	bne.n	800b9e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b9c8:	200a      	movs	r0, #10
 800b9ca:	f7f6 fd6b 	bl	80024a4 <HAL_Delay>
      ms += 10U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	330a      	adds	r3, #10
 800b9d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fa25 	bl	800be24 <USB_GetMode>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d01e      	beq.n	800ba1e <USB_SetCurrentMode+0x84>
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2bc7      	cmp	r3, #199	@ 0xc7
 800b9e4:	d9f0      	bls.n	800b9c8 <USB_SetCurrentMode+0x2e>
 800b9e6:	e01a      	b.n	800ba1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d115      	bne.n	800ba1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b9fa:	200a      	movs	r0, #10
 800b9fc:	f7f6 fd52 	bl	80024a4 <HAL_Delay>
      ms += 10U;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	330a      	adds	r3, #10
 800ba04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fa0c 	bl	800be24 <USB_GetMode>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <USB_SetCurrentMode+0x84>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba16:	d9f0      	bls.n	800b9fa <USB_SetCurrentMode+0x60>
 800ba18:	e001      	b.n	800ba1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e005      	b.n	800ba2a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba22:	d101      	bne.n	800ba28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e000      	b.n	800ba2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba34:	b084      	sub	sp, #16
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba4e:	2300      	movs	r3, #0
 800ba50:	613b      	str	r3, [r7, #16]
 800ba52:	e009      	b.n	800ba68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3340      	adds	r3, #64	@ 0x40
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	3301      	adds	r3, #1
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2b0e      	cmp	r3, #14
 800ba6c:	d9f2      	bls.n	800ba54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d11c      	bne.n	800bab0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba84:	f043 0302 	orr.w	r3, r3, #2
 800ba88:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	e005      	b.n	800babc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bac2:	461a      	mov	r2, r3
 800bac4:	2300      	movs	r3, #0
 800bac6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bac8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d10d      	bne.n	800baec <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d104      	bne.n	800bae2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bad8:	2100      	movs	r1, #0
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f968 	bl	800bdb0 <USB_SetDevSpeed>
 800bae0:	e008      	b.n	800baf4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bae2:	2101      	movs	r1, #1
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f963 	bl	800bdb0 <USB_SetDevSpeed>
 800baea:	e003      	b.n	800baf4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800baec:	2103      	movs	r1, #3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f95e 	bl	800bdb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800baf4:	2110      	movs	r1, #16
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f8fa 	bl	800bcf0 <USB_FlushTxFifo>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f924 	bl	800bd54 <USB_FlushRxFifo>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	2300      	movs	r3, #0
 800bb20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb28:	461a      	mov	r2, r3
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb34:	461a      	mov	r2, r3
 800bb36:	2300      	movs	r3, #0
 800bb38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	613b      	str	r3, [r7, #16]
 800bb3e:	e043      	b.n	800bbc8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb56:	d118      	bne.n	800bb8a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	015a      	lsls	r2, r3, #5
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	4413      	add	r3, r2
 800bb66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	e013      	b.n	800bb9c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb80:	461a      	mov	r2, r3
 800bb82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	e008      	b.n	800bb9c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb96:	461a      	mov	r2, r3
 800bb98:	2300      	movs	r3, #0
 800bb9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bba8:	461a      	mov	r2, r3
 800bbaa:	2300      	movs	r3, #0
 800bbac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbba:	461a      	mov	r2, r3
 800bbbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bbc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	613b      	str	r3, [r7, #16]
 800bbc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bbcc:	461a      	mov	r2, r3
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d3b5      	bcc.n	800bb40 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	613b      	str	r3, [r7, #16]
 800bbd8:	e043      	b.n	800bc62 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbf0:	d118      	bne.n	800bc24 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10a      	bne.n	800bc0e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc04:	461a      	mov	r2, r3
 800bc06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	e013      	b.n	800bc36 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	015a      	lsls	r2, r3, #5
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4413      	add	r3, r2
 800bc16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	e008      	b.n	800bc36 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	015a      	lsls	r2, r3, #5
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc30:	461a      	mov	r2, r3
 800bc32:	2300      	movs	r3, #0
 800bc34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc42:	461a      	mov	r2, r3
 800bc44:	2300      	movs	r3, #0
 800bc46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc54:	461a      	mov	r2, r3
 800bc56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	613b      	str	r3, [r7, #16]
 800bc62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc66:	461a      	mov	r2, r3
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d3b5      	bcc.n	800bbda <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bc8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d105      	bne.n	800bca4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	f043 0210 	orr.w	r2, r3, #16
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	699a      	ldr	r2, [r3, #24]
 800bca8:	4b0f      	ldr	r3, [pc, #60]	@ (800bce8 <USB_DevInit+0x2b4>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bcb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d005      	beq.n	800bcc4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	f043 0208 	orr.w	r2, r3, #8
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bcc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d105      	bne.n	800bcd8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	699a      	ldr	r2, [r3, #24]
 800bcd0:	4b06      	ldr	r3, [pc, #24]	@ (800bcec <USB_DevInit+0x2b8>)
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bce4:	b004      	add	sp, #16
 800bce6:	4770      	bx	lr
 800bce8:	803c3800 	.word	0x803c3800
 800bcec:	40000004 	.word	0x40000004

0800bcf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd0a:	d901      	bls.n	800bd10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	e01b      	b.n	800bd48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	daf2      	bge.n	800bcfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	019b      	lsls	r3, r3, #6
 800bd20:	f043 0220 	orr.w	r2, r3, #32
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd34:	d901      	bls.n	800bd3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e006      	b.n	800bd48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	f003 0320 	and.w	r3, r3, #32
 800bd42:	2b20      	cmp	r3, #32
 800bd44:	d0f0      	beq.n	800bd28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3301      	adds	r3, #1
 800bd64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd6c:	d901      	bls.n	800bd72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e018      	b.n	800bda4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	daf2      	bge.n	800bd60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2210      	movs	r2, #16
 800bd82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3301      	adds	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd90:	d901      	bls.n	800bd96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd92:	2303      	movs	r3, #3
 800bd94:	e006      	b.n	800bda4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	f003 0310 	and.w	r3, r3, #16
 800bd9e:	2b10      	cmp	r3, #16
 800bda0:	d0f0      	beq.n	800bd84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	68f9      	ldr	r1, [r7, #12]
 800bdcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b085      	sub	sp, #20
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be10:	f043 0302 	orr.w	r3, r3, #2
 800be14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	f003 0301 	and.w	r3, r3, #1
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be48:	2300      	movs	r3, #0
 800be4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be58:	d901      	bls.n	800be5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e01b      	b.n	800be96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	daf2      	bge.n	800be4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	f043 0201 	orr.w	r2, r3, #1
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3301      	adds	r3, #1
 800be7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be82:	d901      	bls.n	800be88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e006      	b.n	800be96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b01      	cmp	r3, #1
 800be92:	d0f0      	beq.n	800be76 <USB_CoreReset+0x36>

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
	...

0800bea4 <__NVIC_SetPriority>:
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	6039      	str	r1, [r7, #0]
 800beae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800beb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	db0a      	blt.n	800bece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	490c      	ldr	r1, [pc, #48]	@ (800bef0 <__NVIC_SetPriority+0x4c>)
 800bebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bec2:	0112      	lsls	r2, r2, #4
 800bec4:	b2d2      	uxtb	r2, r2
 800bec6:	440b      	add	r3, r1
 800bec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800becc:	e00a      	b.n	800bee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	4908      	ldr	r1, [pc, #32]	@ (800bef4 <__NVIC_SetPriority+0x50>)
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	f003 030f 	and.w	r3, r3, #15
 800beda:	3b04      	subs	r3, #4
 800bedc:	0112      	lsls	r2, r2, #4
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	440b      	add	r3, r1
 800bee2:	761a      	strb	r2, [r3, #24]
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	e000e100 	.word	0xe000e100
 800bef4:	e000ed00 	.word	0xe000ed00

0800bef8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800befc:	4b05      	ldr	r3, [pc, #20]	@ (800bf14 <SysTick_Handler+0x1c>)
 800befe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf00:	f002 f980 	bl	800e204 <xTaskGetSchedulerState>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d001      	beq.n	800bf0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf0a:	f000 fd9d 	bl	800ca48 <xPortSysTickHandler>
  }
}
 800bf0e:	bf00      	nop
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	e000e010 	.word	0xe000e010

0800bf18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	f06f 0004 	mvn.w	r0, #4
 800bf22:	f7ff ffbf 	bl	800bea4 <__NVIC_SetPriority>
#endif
}
 800bf26:	bf00      	nop
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf32:	f3ef 8305 	mrs	r3, IPSR
 800bf36:	603b      	str	r3, [r7, #0]
  return(result);
 800bf38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bf3e:	f06f 0305 	mvn.w	r3, #5
 800bf42:	607b      	str	r3, [r7, #4]
 800bf44:	e00c      	b.n	800bf60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bf46:	4b0a      	ldr	r3, [pc, #40]	@ (800bf70 <osKernelInitialize+0x44>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d105      	bne.n	800bf5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf4e:	4b08      	ldr	r3, [pc, #32]	@ (800bf70 <osKernelInitialize+0x44>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	e002      	b.n	800bf60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf60:	687b      	ldr	r3, [r7, #4]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	2400a518 	.word	0x2400a518

0800bf74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf7a:	f3ef 8305 	mrs	r3, IPSR
 800bf7e:	603b      	str	r3, [r7, #0]
  return(result);
 800bf80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d003      	beq.n	800bf8e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf86:	f06f 0305 	mvn.w	r3, #5
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	e010      	b.n	800bfb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfbc <osKernelStart+0x48>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d109      	bne.n	800bfaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf96:	f7ff ffbf 	bl	800bf18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf9a:	4b08      	ldr	r3, [pc, #32]	@ (800bfbc <osKernelStart+0x48>)
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bfa0:	f001 fcba 	bl	800d918 <vTaskStartScheduler>
      stat = osOK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	607b      	str	r3, [r7, #4]
 800bfa8:	e002      	b.n	800bfb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfb0:	687b      	ldr	r3, [r7, #4]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	2400a518 	.word	0x2400a518

0800bfc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08e      	sub	sp, #56	@ 0x38
 800bfc4:	af04      	add	r7, sp, #16
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfd0:	f3ef 8305 	mrs	r3, IPSR
 800bfd4:	617b      	str	r3, [r7, #20]
  return(result);
 800bfd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d17e      	bne.n	800c0da <osThreadNew+0x11a>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d07b      	beq.n	800c0da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bfe2:	2380      	movs	r3, #128	@ 0x80
 800bfe4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bfe6:	2318      	movs	r3, #24
 800bfe8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bfee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bff2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d045      	beq.n	800c086 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <osThreadNew+0x48>
        name = attr->name;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d002      	beq.n	800c016 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d008      	beq.n	800c02e <osThreadNew+0x6e>
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	2b38      	cmp	r3, #56	@ 0x38
 800c020:	d805      	bhi.n	800c02e <osThreadNew+0x6e>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <osThreadNew+0x72>
        return (NULL);
 800c02e:	2300      	movs	r3, #0
 800c030:	e054      	b.n	800c0dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	089b      	lsrs	r3, r3, #2
 800c040:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00e      	beq.n	800c068 <osThreadNew+0xa8>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	2b5b      	cmp	r3, #91	@ 0x5b
 800c050:	d90a      	bls.n	800c068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c056:	2b00      	cmp	r3, #0
 800c058:	d006      	beq.n	800c068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <osThreadNew+0xa8>
        mem = 1;
 800c062:	2301      	movs	r3, #1
 800c064:	61bb      	str	r3, [r7, #24]
 800c066:	e010      	b.n	800c08a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10c      	bne.n	800c08a <osThreadNew+0xca>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d108      	bne.n	800c08a <osThreadNew+0xca>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <osThreadNew+0xca>
          mem = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	e001      	b.n	800c08a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d110      	bne.n	800c0b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c098:	9202      	str	r2, [sp, #8]
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	6a3a      	ldr	r2, [r7, #32]
 800c0a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f001 fa5a 	bl	800d560 <xTaskCreateStatic>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	613b      	str	r3, [r7, #16]
 800c0b0:	e013      	b.n	800c0da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d110      	bne.n	800c0da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	f107 0310 	add.w	r3, r7, #16
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f001 faa8 	bl	800d620 <xTaskCreate>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d001      	beq.n	800c0da <osThreadNew+0x11a>
            hTask = NULL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c0da:	693b      	ldr	r3, [r7, #16]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3728      	adds	r7, #40	@ 0x28
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ec:	f3ef 8305 	mrs	r3, IPSR
 800c0f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <osDelay+0x1c>
    stat = osErrorISR;
 800c0f8:	f06f 0305 	mvn.w	r3, #5
 800c0fc:	60fb      	str	r3, [r7, #12]
 800c0fe:	e007      	b.n	800c110 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c100:	2300      	movs	r3, #0
 800c102:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 fbce 	bl	800d8ac <vTaskDelay>
    }
  }

  return (stat);
 800c110:	68fb      	ldr	r3, [r7, #12]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	4a07      	ldr	r2, [pc, #28]	@ (800c148 <vApplicationGetIdleTaskMemory+0x2c>)
 800c12c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	4a06      	ldr	r2, [pc, #24]	@ (800c14c <vApplicationGetIdleTaskMemory+0x30>)
 800c132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2280      	movs	r2, #128	@ 0x80
 800c138:	601a      	str	r2, [r3, #0]
}
 800c13a:	bf00      	nop
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	2400a51c 	.word	0x2400a51c
 800c14c:	2400a578 	.word	0x2400a578

0800c150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4a07      	ldr	r2, [pc, #28]	@ (800c17c <vApplicationGetTimerTaskMemory+0x2c>)
 800c160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	4a06      	ldr	r2, [pc, #24]	@ (800c180 <vApplicationGetTimerTaskMemory+0x30>)
 800c166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c16e:	601a      	str	r2, [r3, #0]
}
 800c170:	bf00      	nop
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	2400a778 	.word	0x2400a778
 800c180:	2400a7d4 	.word	0x2400a7d4

0800c184 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08a      	sub	sp, #40	@ 0x28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c18c:	2300      	movs	r3, #0
 800c18e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c190:	f001 fc2a 	bl	800d9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c194:	4b5c      	ldr	r3, [pc, #368]	@ (800c308 <pvPortMalloc+0x184>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c19c:	f000 f924 	bl	800c3e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1a0:	4b5a      	ldr	r3, [pc, #360]	@ (800c30c <pvPortMalloc+0x188>)
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f040 8095 	bne.w	800c2d8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d01e      	beq.n	800c1f2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c1b4:	2208      	movs	r2, #8
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d015      	beq.n	800c1f2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f023 0307 	bic.w	r3, r3, #7
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00b      	beq.n	800c1f2 <pvPortMalloc+0x6e>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	617b      	str	r3, [r7, #20]
}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	e7fd      	b.n	800c1ee <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d06f      	beq.n	800c2d8 <pvPortMalloc+0x154>
 800c1f8:	4b45      	ldr	r3, [pc, #276]	@ (800c310 <pvPortMalloc+0x18c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d86a      	bhi.n	800c2d8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c202:	4b44      	ldr	r3, [pc, #272]	@ (800c314 <pvPortMalloc+0x190>)
 800c204:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c206:	4b43      	ldr	r3, [pc, #268]	@ (800c314 <pvPortMalloc+0x190>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c20c:	e004      	b.n	800c218 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c210:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d903      	bls.n	800c22a <pvPortMalloc+0xa6>
 800c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1f1      	bne.n	800c20e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c22a:	4b37      	ldr	r3, [pc, #220]	@ (800c308 <pvPortMalloc+0x184>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c230:	429a      	cmp	r2, r3
 800c232:	d051      	beq.n	800c2d8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2208      	movs	r2, #8
 800c23a:	4413      	add	r3, r2
 800c23c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	1ad2      	subs	r2, r2, r3
 800c24e:	2308      	movs	r3, #8
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	429a      	cmp	r2, r3
 800c254:	d920      	bls.n	800c298 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4413      	add	r3, r2
 800c25c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	f003 0307 	and.w	r3, r3, #7
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <pvPortMalloc+0xfc>
	__asm volatile
 800c268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26c:	f383 8811 	msr	BASEPRI, r3
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	613b      	str	r3, [r7, #16]
}
 800c27a:	bf00      	nop
 800c27c:	bf00      	nop
 800c27e:	e7fd      	b.n	800c27c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	1ad2      	subs	r2, r2, r3
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c292:	69b8      	ldr	r0, [r7, #24]
 800c294:	f000 f90a 	bl	800c4ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c298:	4b1d      	ldr	r3, [pc, #116]	@ (800c310 <pvPortMalloc+0x18c>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c310 <pvPortMalloc+0x18c>)
 800c2a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2a6:	4b1a      	ldr	r3, [pc, #104]	@ (800c310 <pvPortMalloc+0x18c>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c318 <pvPortMalloc+0x194>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d203      	bcs.n	800c2ba <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2b2:	4b17      	ldr	r3, [pc, #92]	@ (800c310 <pvPortMalloc+0x18c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a18      	ldr	r2, [pc, #96]	@ (800c318 <pvPortMalloc+0x194>)
 800c2b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	4b13      	ldr	r3, [pc, #76]	@ (800c30c <pvPortMalloc+0x188>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2ce:	4b13      	ldr	r3, [pc, #76]	@ (800c31c <pvPortMalloc+0x198>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	4a11      	ldr	r2, [pc, #68]	@ (800c31c <pvPortMalloc+0x198>)
 800c2d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2d8:	f001 fb94 	bl	800da04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <pvPortMalloc+0x17a>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	60fb      	str	r3, [r7, #12]
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	e7fd      	b.n	800c2fa <pvPortMalloc+0x176>
	return pvReturn;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3728      	adds	r7, #40	@ 0x28
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	2400e7dc 	.word	0x2400e7dc
 800c30c:	2400e7f0 	.word	0x2400e7f0
 800c310:	2400e7e0 	.word	0x2400e7e0
 800c314:	2400e7d4 	.word	0x2400e7d4
 800c318:	2400e7e4 	.word	0x2400e7e4
 800c31c:	2400e7e8 	.word	0x2400e7e8

0800c320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d04f      	beq.n	800c3d2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c332:	2308      	movs	r3, #8
 800c334:	425b      	negs	r3, r3
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	4413      	add	r3, r2
 800c33a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	4b25      	ldr	r3, [pc, #148]	@ (800c3dc <vPortFree+0xbc>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4013      	ands	r3, r2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10b      	bne.n	800c366 <vPortFree+0x46>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	60fb      	str	r3, [r7, #12]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00b      	beq.n	800c386 <vPortFree+0x66>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60bb      	str	r3, [r7, #8]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	4b14      	ldr	r3, [pc, #80]	@ (800c3dc <vPortFree+0xbc>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4013      	ands	r3, r2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d01e      	beq.n	800c3d2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d11a      	bne.n	800c3d2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800c3dc <vPortFree+0xbc>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3ac:	f001 fb1c 	bl	800d9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e0 <vPortFree+0xc0>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	4a09      	ldr	r2, [pc, #36]	@ (800c3e0 <vPortFree+0xc0>)
 800c3bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3be:	6938      	ldr	r0, [r7, #16]
 800c3c0:	f000 f874 	bl	800c4ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3c4:	4b07      	ldr	r3, [pc, #28]	@ (800c3e4 <vPortFree+0xc4>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	4a06      	ldr	r2, [pc, #24]	@ (800c3e4 <vPortFree+0xc4>)
 800c3cc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3ce:	f001 fb19 	bl	800da04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3d2:	bf00      	nop
 800c3d4:	3718      	adds	r7, #24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	2400e7f0 	.word	0x2400e7f0
 800c3e0:	2400e7e0 	.word	0x2400e7e0
 800c3e4:	2400e7ec 	.word	0x2400e7ec

0800c3e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3ee:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c3f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3f4:	4b27      	ldr	r3, [pc, #156]	@ (800c494 <prvHeapInit+0xac>)
 800c3f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f003 0307 	and.w	r3, r3, #7
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00c      	beq.n	800c41c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3307      	adds	r3, #7
 800c406:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f023 0307 	bic.w	r3, r3, #7
 800c40e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	4a1f      	ldr	r2, [pc, #124]	@ (800c494 <prvHeapInit+0xac>)
 800c418:	4413      	add	r3, r2
 800c41a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c420:	4a1d      	ldr	r2, [pc, #116]	@ (800c498 <prvHeapInit+0xb0>)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c426:	4b1c      	ldr	r3, [pc, #112]	@ (800c498 <prvHeapInit+0xb0>)
 800c428:	2200      	movs	r2, #0
 800c42a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c434:	2208      	movs	r2, #8
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	1a9b      	subs	r3, r3, r2
 800c43a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f023 0307 	bic.w	r3, r3, #7
 800c442:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	4a15      	ldr	r2, [pc, #84]	@ (800c49c <prvHeapInit+0xb4>)
 800c448:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c44a:	4b14      	ldr	r3, [pc, #80]	@ (800c49c <prvHeapInit+0xb4>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2200      	movs	r2, #0
 800c450:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c452:	4b12      	ldr	r3, [pc, #72]	@ (800c49c <prvHeapInit+0xb4>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	1ad2      	subs	r2, r2, r3
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c468:	4b0c      	ldr	r3, [pc, #48]	@ (800c49c <prvHeapInit+0xb4>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	4a0a      	ldr	r2, [pc, #40]	@ (800c4a0 <prvHeapInit+0xb8>)
 800c476:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	4a09      	ldr	r2, [pc, #36]	@ (800c4a4 <prvHeapInit+0xbc>)
 800c47e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c480:	4b09      	ldr	r3, [pc, #36]	@ (800c4a8 <prvHeapInit+0xc0>)
 800c482:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c486:	601a      	str	r2, [r3, #0]
}
 800c488:	bf00      	nop
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	2400abd4 	.word	0x2400abd4
 800c498:	2400e7d4 	.word	0x2400e7d4
 800c49c:	2400e7dc 	.word	0x2400e7dc
 800c4a0:	2400e7e4 	.word	0x2400e7e4
 800c4a4:	2400e7e0 	.word	0x2400e7e0
 800c4a8:	2400e7f0 	.word	0x2400e7f0

0800c4ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4b4:	4b28      	ldr	r3, [pc, #160]	@ (800c558 <prvInsertBlockIntoFreeList+0xac>)
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e002      	b.n	800c4c0 <prvInsertBlockIntoFreeList+0x14>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	60fb      	str	r3, [r7, #12]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d8f7      	bhi.n	800c4ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d108      	bne.n	800c4ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	441a      	add	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	441a      	add	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d118      	bne.n	800c534 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	4b15      	ldr	r3, [pc, #84]	@ (800c55c <prvInsertBlockIntoFreeList+0xb0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d00d      	beq.n	800c52a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	441a      	add	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	e008      	b.n	800c53c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c52a:	4b0c      	ldr	r3, [pc, #48]	@ (800c55c <prvInsertBlockIntoFreeList+0xb0>)
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	e003      	b.n	800c53c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d002      	beq.n	800c54a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	2400e7d4 	.word	0x2400e7d4
 800c55c:	2400e7dc 	.word	0x2400e7dc

0800c560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f103 0208 	add.w	r2, r3, #8
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f103 0208 	add.w	r2, r3, #8
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f103 0208 	add.w	r2, r3, #8
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c594:	bf00      	nop
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5ae:	bf00      	nop
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	601a      	str	r2, [r3, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c602:	b480      	push	{r7}
 800c604:	b085      	sub	sp, #20
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c618:	d103      	bne.n	800c622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	60fb      	str	r3, [r7, #12]
 800c620:	e00c      	b.n	800c63c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3308      	adds	r3, #8
 800c626:	60fb      	str	r3, [r7, #12]
 800c628:	e002      	b.n	800c630 <vListInsert+0x2e>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d2f6      	bcs.n	800c62a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	601a      	str	r2, [r3, #0]
}
 800c668:	bf00      	nop
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	6892      	ldr	r2, [r2, #8]
 800c68a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	6852      	ldr	r2, [r2, #4]
 800c694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d103      	bne.n	800c6a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	1e5a      	subs	r2, r3, #1
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	3b04      	subs	r3, #4
 800c6d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3b04      	subs	r3, #4
 800c6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	f023 0201 	bic.w	r2, r3, #1
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3b04      	subs	r3, #4
 800c6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6f8:	4a0c      	ldr	r2, [pc, #48]	@ (800c72c <pxPortInitialiseStack+0x64>)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3b14      	subs	r3, #20
 800c702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3b04      	subs	r3, #4
 800c70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f06f 0202 	mvn.w	r2, #2
 800c716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3b20      	subs	r3, #32
 800c71c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c71e:	68fb      	ldr	r3, [r7, #12]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	0800c731 	.word	0x0800c731

0800c730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c73a:	4b13      	ldr	r3, [pc, #76]	@ (800c788 <prvTaskExitError+0x58>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c742:	d00b      	beq.n	800c75c <prvTaskExitError+0x2c>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	60fb      	str	r3, [r7, #12]
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	e7fd      	b.n	800c758 <prvTaskExitError+0x28>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	60bb      	str	r3, [r7, #8]
}
 800c76e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c770:	bf00      	nop
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d0fc      	beq.n	800c772 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	24000014 	.word	0x24000014
 800c78c:	00000000 	.word	0x00000000

0800c790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c790:	4b07      	ldr	r3, [pc, #28]	@ (800c7b0 <pxCurrentTCBConst2>)
 800c792:	6819      	ldr	r1, [r3, #0]
 800c794:	6808      	ldr	r0, [r1, #0]
 800c796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79a:	f380 8809 	msr	PSP, r0
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f04f 0000 	mov.w	r0, #0
 800c7a6:	f380 8811 	msr	BASEPRI, r0
 800c7aa:	4770      	bx	lr
 800c7ac:	f3af 8000 	nop.w

0800c7b0 <pxCurrentTCBConst2>:
 800c7b0:	2400e83c 	.word	0x2400e83c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop

0800c7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7b8:	4808      	ldr	r0, [pc, #32]	@ (800c7dc <prvPortStartFirstTask+0x24>)
 800c7ba:	6800      	ldr	r0, [r0, #0]
 800c7bc:	6800      	ldr	r0, [r0, #0]
 800c7be:	f380 8808 	msr	MSP, r0
 800c7c2:	f04f 0000 	mov.w	r0, #0
 800c7c6:	f380 8814 	msr	CONTROL, r0
 800c7ca:	b662      	cpsie	i
 800c7cc:	b661      	cpsie	f
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	df00      	svc	0
 800c7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7da:	bf00      	nop
 800c7dc:	e000ed08 	.word	0xe000ed08

0800c7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7e6:	4b47      	ldr	r3, [pc, #284]	@ (800c904 <xPortStartScheduler+0x124>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a47      	ldr	r2, [pc, #284]	@ (800c908 <xPortStartScheduler+0x128>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d10b      	bne.n	800c808 <xPortStartScheduler+0x28>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	613b      	str	r3, [r7, #16]
}
 800c802:	bf00      	nop
 800c804:	bf00      	nop
 800c806:	e7fd      	b.n	800c804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c808:	4b3e      	ldr	r3, [pc, #248]	@ (800c904 <xPortStartScheduler+0x124>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a3f      	ldr	r2, [pc, #252]	@ (800c90c <xPortStartScheduler+0x12c>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d10b      	bne.n	800c82a <xPortStartScheduler+0x4a>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	60fb      	str	r3, [r7, #12]
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
 800c828:	e7fd      	b.n	800c826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c82a:	4b39      	ldr	r3, [pc, #228]	@ (800c910 <xPortStartScheduler+0x130>)
 800c82c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	22ff      	movs	r2, #255	@ 0xff
 800c83a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	4b31      	ldr	r3, [pc, #196]	@ (800c914 <xPortStartScheduler+0x134>)
 800c850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c852:	4b31      	ldr	r3, [pc, #196]	@ (800c918 <xPortStartScheduler+0x138>)
 800c854:	2207      	movs	r2, #7
 800c856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c858:	e009      	b.n	800c86e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c85a:	4b2f      	ldr	r3, [pc, #188]	@ (800c918 <xPortStartScheduler+0x138>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3b01      	subs	r3, #1
 800c860:	4a2d      	ldr	r2, [pc, #180]	@ (800c918 <xPortStartScheduler+0x138>)
 800c862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	b2db      	uxtb	r3, r3
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c86e:	78fb      	ldrb	r3, [r7, #3]
 800c870:	b2db      	uxtb	r3, r3
 800c872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c876:	2b80      	cmp	r3, #128	@ 0x80
 800c878:	d0ef      	beq.n	800c85a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c87a:	4b27      	ldr	r3, [pc, #156]	@ (800c918 <xPortStartScheduler+0x138>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f1c3 0307 	rsb	r3, r3, #7
 800c882:	2b04      	cmp	r3, #4
 800c884:	d00b      	beq.n	800c89e <xPortStartScheduler+0xbe>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60bb      	str	r3, [r7, #8]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c89e:	4b1e      	ldr	r3, [pc, #120]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	021b      	lsls	r3, r3, #8
 800c8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c8b0:	4a19      	ldr	r2, [pc, #100]	@ (800c918 <xPortStartScheduler+0x138>)
 800c8b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8bc:	4b17      	ldr	r3, [pc, #92]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a16      	ldr	r2, [pc, #88]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8c8:	4b14      	ldr	r3, [pc, #80]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a13      	ldr	r2, [pc, #76]	@ (800c91c <xPortStartScheduler+0x13c>)
 800c8ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8d4:	f000 f8da 	bl	800ca8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8d8:	4b11      	ldr	r3, [pc, #68]	@ (800c920 <xPortStartScheduler+0x140>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8de:	f000 f8f9 	bl	800cad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8e2:	4b10      	ldr	r3, [pc, #64]	@ (800c924 <xPortStartScheduler+0x144>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c924 <xPortStartScheduler+0x144>)
 800c8e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8ee:	f7ff ff63 	bl	800c7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8f2:	f001 f9ef 	bl	800dcd4 <vTaskSwitchContext>
	prvTaskExitError();
 800c8f6:	f7ff ff1b 	bl	800c730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	e000ed00 	.word	0xe000ed00
 800c908:	410fc271 	.word	0x410fc271
 800c90c:	410fc270 	.word	0x410fc270
 800c910:	e000e400 	.word	0xe000e400
 800c914:	2400e7f4 	.word	0x2400e7f4
 800c918:	2400e7f8 	.word	0x2400e7f8
 800c91c:	e000ed20 	.word	0xe000ed20
 800c920:	24000014 	.word	0x24000014
 800c924:	e000ef34 	.word	0xe000ef34

0800c928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	607b      	str	r3, [r7, #4]
}
 800c940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c942:	4b10      	ldr	r3, [pc, #64]	@ (800c984 <vPortEnterCritical+0x5c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3301      	adds	r3, #1
 800c948:	4a0e      	ldr	r2, [pc, #56]	@ (800c984 <vPortEnterCritical+0x5c>)
 800c94a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c94c:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <vPortEnterCritical+0x5c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d110      	bne.n	800c976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c954:	4b0c      	ldr	r3, [pc, #48]	@ (800c988 <vPortEnterCritical+0x60>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <vPortEnterCritical+0x4e>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	603b      	str	r3, [r7, #0]
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	e7fd      	b.n	800c972 <vPortEnterCritical+0x4a>
	}
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	24000014 	.word	0x24000014
 800c988:	e000ed04 	.word	0xe000ed04

0800c98c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c992:	4b12      	ldr	r3, [pc, #72]	@ (800c9dc <vPortExitCritical+0x50>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10b      	bne.n	800c9b2 <vPortExitCritical+0x26>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	607b      	str	r3, [r7, #4]
}
 800c9ac:	bf00      	nop
 800c9ae:	bf00      	nop
 800c9b0:	e7fd      	b.n	800c9ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <vPortExitCritical+0x50>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	4a08      	ldr	r2, [pc, #32]	@ (800c9dc <vPortExitCritical+0x50>)
 800c9ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9bc:	4b07      	ldr	r3, [pc, #28]	@ (800c9dc <vPortExitCritical+0x50>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d105      	bne.n	800c9d0 <vPortExitCritical+0x44>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	24000014 	.word	0x24000014

0800c9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9e0:	f3ef 8009 	mrs	r0, PSP
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	4b15      	ldr	r3, [pc, #84]	@ (800ca40 <pxCurrentTCBConst>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	f01e 0f10 	tst.w	lr, #16
 800c9f0:	bf08      	it	eq
 800c9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fa:	6010      	str	r0, [r2, #0]
 800c9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca04:	f380 8811 	msr	BASEPRI, r0
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f001 f960 	bl	800dcd4 <vTaskSwitchContext>
 800ca14:	f04f 0000 	mov.w	r0, #0
 800ca18:	f380 8811 	msr	BASEPRI, r0
 800ca1c:	bc09      	pop	{r0, r3}
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	6808      	ldr	r0, [r1, #0]
 800ca22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca26:	f01e 0f10 	tst.w	lr, #16
 800ca2a:	bf08      	it	eq
 800ca2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca30:	f380 8809 	msr	PSP, r0
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w

0800ca40 <pxCurrentTCBConst>:
 800ca40:	2400e83c 	.word	0x2400e83c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop

0800ca48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	607b      	str	r3, [r7, #4]
}
 800ca60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca62:	f001 f87d 	bl	800db60 <xTaskIncrementTick>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca6c:	4b06      	ldr	r3, [pc, #24]	@ (800ca88 <xPortSysTickHandler+0x40>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	2300      	movs	r3, #0
 800ca76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	f383 8811 	msr	BASEPRI, r3
}
 800ca7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca80:	bf00      	nop
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca90:	4b0b      	ldr	r3, [pc, #44]	@ (800cac0 <vPortSetupTimerInterrupt+0x34>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca96:	4b0b      	ldr	r3, [pc, #44]	@ (800cac4 <vPortSetupTimerInterrupt+0x38>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cac8 <vPortSetupTimerInterrupt+0x3c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a0a      	ldr	r2, [pc, #40]	@ (800cacc <vPortSetupTimerInterrupt+0x40>)
 800caa2:	fba2 2303 	umull	r2, r3, r2, r3
 800caa6:	099b      	lsrs	r3, r3, #6
 800caa8:	4a09      	ldr	r2, [pc, #36]	@ (800cad0 <vPortSetupTimerInterrupt+0x44>)
 800caaa:	3b01      	subs	r3, #1
 800caac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800caae:	4b04      	ldr	r3, [pc, #16]	@ (800cac0 <vPortSetupTimerInterrupt+0x34>)
 800cab0:	2207      	movs	r2, #7
 800cab2:	601a      	str	r2, [r3, #0]
}
 800cab4:	bf00      	nop
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	e000e010 	.word	0xe000e010
 800cac4:	e000e018 	.word	0xe000e018
 800cac8:	24000000 	.word	0x24000000
 800cacc:	10624dd3 	.word	0x10624dd3
 800cad0:	e000e014 	.word	0xe000e014

0800cad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cae4 <vPortEnableVFP+0x10>
 800cad8:	6801      	ldr	r1, [r0, #0]
 800cada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cade:	6001      	str	r1, [r0, #0]
 800cae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cae2:	bf00      	nop
 800cae4:	e000ed88 	.word	0xe000ed88

0800cae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800caee:	f3ef 8305 	mrs	r3, IPSR
 800caf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b0f      	cmp	r3, #15
 800caf8:	d915      	bls.n	800cb26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cafa:	4a18      	ldr	r2, [pc, #96]	@ (800cb5c <vPortValidateInterruptPriority+0x74>)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	4413      	add	r3, r2
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb04:	4b16      	ldr	r3, [pc, #88]	@ (800cb60 <vPortValidateInterruptPriority+0x78>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	7afa      	ldrb	r2, [r7, #11]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d20b      	bcs.n	800cb26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	607b      	str	r3, [r7, #4]
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	e7fd      	b.n	800cb22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb26:	4b0f      	ldr	r3, [pc, #60]	@ (800cb64 <vPortValidateInterruptPriority+0x7c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb68 <vPortValidateInterruptPriority+0x80>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d90b      	bls.n	800cb4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	603b      	str	r3, [r7, #0]
}
 800cb48:	bf00      	nop
 800cb4a:	bf00      	nop
 800cb4c:	e7fd      	b.n	800cb4a <vPortValidateInterruptPriority+0x62>
	}
 800cb4e:	bf00      	nop
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	e000e3f0 	.word	0xe000e3f0
 800cb60:	2400e7f4 	.word	0x2400e7f4
 800cb64:	e000ed0c 	.word	0xe000ed0c
 800cb68:	2400e7f8 	.word	0x2400e7f8

0800cb6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10b      	bne.n	800cb98 <xQueueGenericReset+0x2c>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	60bb      	str	r3, [r7, #8]
}
 800cb92:	bf00      	nop
 800cb94:	bf00      	nop
 800cb96:	e7fd      	b.n	800cb94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb98:	f7ff fec6 	bl	800c928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cba8:	fb01 f303 	mul.w	r3, r1, r3
 800cbac:	441a      	add	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	68f9      	ldr	r1, [r7, #12]
 800cbcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbce:	fb01 f303 	mul.w	r3, r1, r3
 800cbd2:	441a      	add	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	22ff      	movs	r2, #255	@ 0xff
 800cbdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	22ff      	movs	r2, #255	@ 0xff
 800cbe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d114      	bne.n	800cc18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d01a      	beq.n	800cc2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3310      	adds	r3, #16
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f001 f91a 	bl	800de34 <xTaskRemoveFromEventList>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d012      	beq.n	800cc2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc06:	4b0d      	ldr	r3, [pc, #52]	@ (800cc3c <xQueueGenericReset+0xd0>)
 800cc08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	e009      	b.n	800cc2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3310      	adds	r3, #16
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fc9f 	bl	800c560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3324      	adds	r3, #36	@ 0x24
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff fc9a 	bl	800c560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc2c:	f7ff feae 	bl	800c98c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc30:	2301      	movs	r3, #1
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b08e      	sub	sp, #56	@ 0x38
 800cc44:	af02      	add	r7, sp, #8
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10b      	bne.n	800cc6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc66:	bf00      	nop
 800cc68:	bf00      	nop
 800cc6a:	e7fd      	b.n	800cc68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10b      	bne.n	800cc8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop
 800cc88:	e7fd      	b.n	800cc86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <xQueueGenericCreateStatic+0x56>
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d001      	beq.n	800cc9a <xQueueGenericCreateStatic+0x5a>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <xQueueGenericCreateStatic+0x5c>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10b      	bne.n	800ccb8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	623b      	str	r3, [r7, #32]
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	e7fd      	b.n	800ccb4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d102      	bne.n	800ccc4 <xQueueGenericCreateStatic+0x84>
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <xQueueGenericCreateStatic+0x88>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e000      	b.n	800ccca <xQueueGenericCreateStatic+0x8a>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10b      	bne.n	800cce6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	61fb      	str	r3, [r7, #28]
}
 800cce0:	bf00      	nop
 800cce2:	bf00      	nop
 800cce4:	e7fd      	b.n	800cce2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cce6:	2350      	movs	r3, #80	@ 0x50
 800cce8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2b50      	cmp	r3, #80	@ 0x50
 800ccee:	d00b      	beq.n	800cd08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	61bb      	str	r3, [r7, #24]
}
 800cd02:	bf00      	nop
 800cd04:	bf00      	nop
 800cd06:	e7fd      	b.n	800cd04 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00d      	beq.n	800cd30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd1c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	4613      	mov	r3, r2
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	68b9      	ldr	r1, [r7, #8]
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f000 f805 	bl	800cd3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3730      	adds	r7, #48	@ 0x30
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	60f8      	str	r0, [r7, #12]
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	607a      	str	r2, [r7, #4]
 800cd46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d103      	bne.n	800cd56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	69ba      	ldr	r2, [r7, #24]
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	e002      	b.n	800cd5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd68:	2101      	movs	r1, #1
 800cd6a:	69b8      	ldr	r0, [r7, #24]
 800cd6c:	f7ff fefe 	bl	800cb6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	78fa      	ldrb	r2, [r7, #3]
 800cd74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08e      	sub	sp, #56	@ 0x38
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <xQueueGenericSend+0x34>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cdae:	bf00      	nop
 800cdb0:	bf00      	nop
 800cdb2:	e7fd      	b.n	800cdb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d103      	bne.n	800cdc2 <xQueueGenericSend+0x42>
 800cdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <xQueueGenericSend+0x46>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e000      	b.n	800cdc8 <xQueueGenericSend+0x48>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10b      	bne.n	800cde4 <xQueueGenericSend+0x64>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cdde:	bf00      	nop
 800cde0:	bf00      	nop
 800cde2:	e7fd      	b.n	800cde0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d103      	bne.n	800cdf2 <xQueueGenericSend+0x72>
 800cdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d101      	bne.n	800cdf6 <xQueueGenericSend+0x76>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <xQueueGenericSend+0x78>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10b      	bne.n	800ce14 <xQueueGenericSend+0x94>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	623b      	str	r3, [r7, #32]
}
 800ce0e:	bf00      	nop
 800ce10:	bf00      	nop
 800ce12:	e7fd      	b.n	800ce10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce14:	f001 f9f6 	bl	800e204 <xTaskGetSchedulerState>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d102      	bne.n	800ce24 <xQueueGenericSend+0xa4>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d101      	bne.n	800ce28 <xQueueGenericSend+0xa8>
 800ce24:	2301      	movs	r3, #1
 800ce26:	e000      	b.n	800ce2a <xQueueGenericSend+0xaa>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10b      	bne.n	800ce46 <xQueueGenericSend+0xc6>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	61fb      	str	r3, [r7, #28]
}
 800ce40:	bf00      	nop
 800ce42:	bf00      	nop
 800ce44:	e7fd      	b.n	800ce42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce46:	f7ff fd6f 	bl	800c928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d302      	bcc.n	800ce5c <xQueueGenericSend+0xdc>
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d129      	bne.n	800ceb0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce62:	f000 fa0f 	bl	800d284 <prvCopyDataToQueue>
 800ce66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d010      	beq.n	800ce92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce72:	3324      	adds	r3, #36	@ 0x24
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 ffdd 	bl	800de34 <xTaskRemoveFromEventList>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d013      	beq.n	800cea8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce80:	4b3f      	ldr	r3, [pc, #252]	@ (800cf80 <xQueueGenericSend+0x200>)
 800ce82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	e00a      	b.n	800cea8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce98:	4b39      	ldr	r3, [pc, #228]	@ (800cf80 <xQueueGenericSend+0x200>)
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cea8:	f7ff fd70 	bl	800c98c <vPortExitCritical>
				return pdPASS;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e063      	b.n	800cf78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d103      	bne.n	800cebe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ceb6:	f7ff fd69 	bl	800c98c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e05c      	b.n	800cf78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d106      	bne.n	800ced2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cec4:	f107 0314 	add.w	r3, r7, #20
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 f83f 	bl	800df4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cece:	2301      	movs	r3, #1
 800ced0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ced2:	f7ff fd5b 	bl	800c98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ced6:	f000 fd87 	bl	800d9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ceda:	f7ff fd25 	bl	800c928 <vPortEnterCritical>
 800cede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cee4:	b25b      	sxtb	r3, r3
 800cee6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ceea:	d103      	bne.n	800cef4 <xQueueGenericSend+0x174>
 800ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cefa:	b25b      	sxtb	r3, r3
 800cefc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf00:	d103      	bne.n	800cf0a <xQueueGenericSend+0x18a>
 800cf02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf0a:	f7ff fd3f 	bl	800c98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf0e:	1d3a      	adds	r2, r7, #4
 800cf10:	f107 0314 	add.w	r3, r7, #20
 800cf14:	4611      	mov	r1, r2
 800cf16:	4618      	mov	r0, r3
 800cf18:	f001 f82e 	bl	800df78 <xTaskCheckForTimeOut>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d124      	bne.n	800cf6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf24:	f000 faa6 	bl	800d474 <prvIsQueueFull>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d018      	beq.n	800cf60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf30:	3310      	adds	r3, #16
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4611      	mov	r1, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 ff2a 	bl	800dd90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf3e:	f000 fa31 	bl	800d3a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf42:	f000 fd5f 	bl	800da04 <xTaskResumeAll>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f af7c 	bne.w	800ce46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf80 <xQueueGenericSend+0x200>)
 800cf50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	e772      	b.n	800ce46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf62:	f000 fa1f 	bl	800d3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf66:	f000 fd4d 	bl	800da04 <xTaskResumeAll>
 800cf6a:	e76c      	b.n	800ce46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf6e:	f000 fa19 	bl	800d3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf72:	f000 fd47 	bl	800da04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3738      	adds	r7, #56	@ 0x38
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	e000ed04 	.word	0xe000ed04

0800cf84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b090      	sub	sp, #64	@ 0x40
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cf96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10b      	bne.n	800cfb4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cfae:	bf00      	nop
 800cfb0:	bf00      	nop
 800cfb2:	e7fd      	b.n	800cfb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d103      	bne.n	800cfc2 <xQueueGenericSendFromISR+0x3e>
 800cfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <xQueueGenericSendFromISR+0x42>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e000      	b.n	800cfc8 <xQueueGenericSendFromISR+0x44>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10b      	bne.n	800cfe4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cfcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfde:	bf00      	nop
 800cfe0:	bf00      	nop
 800cfe2:	e7fd      	b.n	800cfe0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d103      	bne.n	800cff2 <xQueueGenericSendFromISR+0x6e>
 800cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d101      	bne.n	800cff6 <xQueueGenericSendFromISR+0x72>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <xQueueGenericSendFromISR+0x74>
 800cff6:	2300      	movs	r3, #0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10b      	bne.n	800d014 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	623b      	str	r3, [r7, #32]
}
 800d00e:	bf00      	nop
 800d010:	bf00      	nop
 800d012:	e7fd      	b.n	800d010 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d014:	f7ff fd68 	bl	800cae8 <vPortValidateInterruptPriority>
	__asm volatile
 800d018:	f3ef 8211 	mrs	r2, BASEPRI
 800d01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	61fa      	str	r2, [r7, #28]
 800d02e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d030:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d032:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d302      	bcc.n	800d046 <xQueueGenericSendFromISR+0xc2>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2b02      	cmp	r3, #2
 800d044:	d12f      	bne.n	800d0a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d04c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d054:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d05c:	f000 f912 	bl	800d284 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d060:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d068:	d112      	bne.n	800d090 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d016      	beq.n	800d0a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d074:	3324      	adds	r3, #36	@ 0x24
 800d076:	4618      	mov	r0, r3
 800d078:	f000 fedc 	bl	800de34 <xTaskRemoveFromEventList>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00e      	beq.n	800d0a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00b      	beq.n	800d0a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	e007      	b.n	800d0a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d090:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d094:	3301      	adds	r3, #1
 800d096:	b2db      	uxtb	r3, r3
 800d098:	b25a      	sxtb	r2, r3
 800d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d0a4:	e001      	b.n	800d0aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	f383 8811 	msr	BASEPRI, r3
}
 800d0b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3740      	adds	r7, #64	@ 0x40
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08c      	sub	sp, #48	@ 0x30
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10b      	bne.n	800d0f2 <xQueueReceive+0x32>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	623b      	str	r3, [r7, #32]
}
 800d0ec:	bf00      	nop
 800d0ee:	bf00      	nop
 800d0f0:	e7fd      	b.n	800d0ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d103      	bne.n	800d100 <xQueueReceive+0x40>
 800d0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <xQueueReceive+0x44>
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <xQueueReceive+0x46>
 800d104:	2300      	movs	r3, #0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10b      	bne.n	800d122 <xQueueReceive+0x62>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	61fb      	str	r3, [r7, #28]
}
 800d11c:	bf00      	nop
 800d11e:	bf00      	nop
 800d120:	e7fd      	b.n	800d11e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d122:	f001 f86f 	bl	800e204 <xTaskGetSchedulerState>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <xQueueReceive+0x72>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <xQueueReceive+0x76>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <xQueueReceive+0x78>
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10b      	bne.n	800d154 <xQueueReceive+0x94>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	61bb      	str	r3, [r7, #24]
}
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	e7fd      	b.n	800d150 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d154:	f7ff fbe8 	bl	800c928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d15c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d160:	2b00      	cmp	r3, #0
 800d162:	d01f      	beq.n	800d1a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d164:	68b9      	ldr	r1, [r7, #8]
 800d166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d168:	f000 f8f6 	bl	800d358 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16e:	1e5a      	subs	r2, r3, #1
 800d170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d172:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00f      	beq.n	800d19c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17e:	3310      	adds	r3, #16
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fe57 	bl	800de34 <xTaskRemoveFromEventList>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d007      	beq.n	800d19c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d18c:	4b3c      	ldr	r3, [pc, #240]	@ (800d280 <xQueueReceive+0x1c0>)
 800d18e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d19c:	f7ff fbf6 	bl	800c98c <vPortExitCritical>
				return pdPASS;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e069      	b.n	800d278 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d103      	bne.n	800d1b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1aa:	f7ff fbef 	bl	800c98c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e062      	b.n	800d278 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1b8:	f107 0310 	add.w	r3, r7, #16
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f000 fec5 	bl	800df4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1c6:	f7ff fbe1 	bl	800c98c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1ca:	f000 fc0d 	bl	800d9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1ce:	f7ff fbab 	bl	800c928 <vPortEnterCritical>
 800d1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1d8:	b25b      	sxtb	r3, r3
 800d1da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1de:	d103      	bne.n	800d1e8 <xQueueReceive+0x128>
 800d1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1ee:	b25b      	sxtb	r3, r3
 800d1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1f4:	d103      	bne.n	800d1fe <xQueueReceive+0x13e>
 800d1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1fe:	f7ff fbc5 	bl	800c98c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d202:	1d3a      	adds	r2, r7, #4
 800d204:	f107 0310 	add.w	r3, r7, #16
 800d208:	4611      	mov	r1, r2
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 feb4 	bl	800df78 <xTaskCheckForTimeOut>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d123      	bne.n	800d25e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d218:	f000 f916 	bl	800d448 <prvIsQueueEmpty>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d017      	beq.n	800d252 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d224:	3324      	adds	r3, #36	@ 0x24
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f000 fdb0 	bl	800dd90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d232:	f000 f8b7 	bl	800d3a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d236:	f000 fbe5 	bl	800da04 <xTaskResumeAll>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d189      	bne.n	800d154 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d240:	4b0f      	ldr	r3, [pc, #60]	@ (800d280 <xQueueReceive+0x1c0>)
 800d242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	e780      	b.n	800d154 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d254:	f000 f8a6 	bl	800d3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d258:	f000 fbd4 	bl	800da04 <xTaskResumeAll>
 800d25c:	e77a      	b.n	800d154 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d25e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d260:	f000 f8a0 	bl	800d3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d264:	f000 fbce 	bl	800da04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d26a:	f000 f8ed 	bl	800d448 <prvIsQueueEmpty>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	f43f af6f 	beq.w	800d154 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d276:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3730      	adds	r7, #48	@ 0x30
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	e000ed04 	.word	0xe000ed04

0800d284 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d290:	2300      	movs	r3, #0
 800d292:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d298:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10d      	bne.n	800d2be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d14d      	bne.n	800d346 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 ffc6 	bl	800e240 <xTaskPriorityDisinherit>
 800d2b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	609a      	str	r2, [r3, #8]
 800d2bc:	e043      	b.n	800d346 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d119      	bne.n	800d2f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6858      	ldr	r0, [r3, #4]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	68b9      	ldr	r1, [r7, #8]
 800d2d0:	f00f fe9b 	bl	801d00a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2dc:	441a      	add	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	685a      	ldr	r2, [r3, #4]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d32b      	bcc.n	800d346 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	605a      	str	r2, [r3, #4]
 800d2f6:	e026      	b.n	800d346 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	68d8      	ldr	r0, [r3, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d300:	461a      	mov	r2, r3
 800d302:	68b9      	ldr	r1, [r7, #8]
 800d304:	f00f fe81 	bl	801d00a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	68da      	ldr	r2, [r3, #12]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d310:	425b      	negs	r3, r3
 800d312:	441a      	add	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68da      	ldr	r2, [r3, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d207      	bcs.n	800d334 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	689a      	ldr	r2, [r3, #8]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32c:	425b      	negs	r3, r3
 800d32e:	441a      	add	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b02      	cmp	r3, #2
 800d338:	d105      	bne.n	800d346 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d002      	beq.n	800d346 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	3b01      	subs	r3, #1
 800d344:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	1c5a      	adds	r2, r3, #1
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d34e:	697b      	ldr	r3, [r7, #20]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d366:	2b00      	cmp	r3, #0
 800d368:	d018      	beq.n	800d39c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68da      	ldr	r2, [r3, #12]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d372:	441a      	add	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68da      	ldr	r2, [r3, #12]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	429a      	cmp	r2, r3
 800d382:	d303      	bcc.n	800d38c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68d9      	ldr	r1, [r3, #12]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d394:	461a      	mov	r2, r3
 800d396:	6838      	ldr	r0, [r7, #0]
 800d398:	f00f fe37 	bl	801d00a <memcpy>
	}
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3ac:	f7ff fabc 	bl	800c928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3b8:	e011      	b.n	800d3de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d012      	beq.n	800d3e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3324      	adds	r3, #36	@ 0x24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fd34 	bl	800de34 <xTaskRemoveFromEventList>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3d2:	f000 fe35 	bl	800e040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dce9      	bgt.n	800d3ba <prvUnlockQueue+0x16>
 800d3e6:	e000      	b.n	800d3ea <prvUnlockQueue+0x46>
					break;
 800d3e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	22ff      	movs	r2, #255	@ 0xff
 800d3ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d3f2:	f7ff facb 	bl	800c98c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3f6:	f7ff fa97 	bl	800c928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d400:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d402:	e011      	b.n	800d428 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d012      	beq.n	800d432 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	3310      	adds	r3, #16
 800d410:	4618      	mov	r0, r3
 800d412:	f000 fd0f 	bl	800de34 <xTaskRemoveFromEventList>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d41c:	f000 fe10 	bl	800e040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	3b01      	subs	r3, #1
 800d424:	b2db      	uxtb	r3, r3
 800d426:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	dce9      	bgt.n	800d404 <prvUnlockQueue+0x60>
 800d430:	e000      	b.n	800d434 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d432:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	22ff      	movs	r2, #255	@ 0xff
 800d438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d43c:	f7ff faa6 	bl	800c98c <vPortExitCritical>
}
 800d440:	bf00      	nop
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d450:	f7ff fa6a 	bl	800c928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d45c:	2301      	movs	r3, #1
 800d45e:	60fb      	str	r3, [r7, #12]
 800d460:	e001      	b.n	800d466 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d466:	f7ff fa91 	bl	800c98c <vPortExitCritical>

	return xReturn;
 800d46a:	68fb      	ldr	r3, [r7, #12]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d47c:	f7ff fa54 	bl	800c928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d488:	429a      	cmp	r2, r3
 800d48a:	d102      	bne.n	800d492 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d48c:	2301      	movs	r3, #1
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	e001      	b.n	800d496 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d492:	2300      	movs	r3, #0
 800d494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d496:	f7ff fa79 	bl	800c98c <vPortExitCritical>

	return xReturn;
 800d49a:	68fb      	ldr	r3, [r7, #12]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	e014      	b.n	800d4de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d4f4 <vQueueAddToRegistry+0x50>)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10b      	bne.n	800d4d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4c0:	490c      	ldr	r1, [pc, #48]	@ (800d4f4 <vQueueAddToRegistry+0x50>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d4f4 <vQueueAddToRegistry+0x50>)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	00db      	lsls	r3, r3, #3
 800d4d0:	4413      	add	r3, r2
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4d6:	e006      	b.n	800d4e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	60fb      	str	r3, [r7, #12]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2b07      	cmp	r3, #7
 800d4e2:	d9e7      	bls.n	800d4b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d4e4:	bf00      	nop
 800d4e6:	bf00      	nop
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	2400e7fc 	.word	0x2400e7fc

0800d4f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d508:	f7ff fa0e 	bl	800c928 <vPortEnterCritical>
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d512:	b25b      	sxtb	r3, r3
 800d514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d518:	d103      	bne.n	800d522 <vQueueWaitForMessageRestricted+0x2a>
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d528:	b25b      	sxtb	r3, r3
 800d52a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d52e:	d103      	bne.n	800d538 <vQueueWaitForMessageRestricted+0x40>
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2200      	movs	r2, #0
 800d534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d538:	f7ff fa28 	bl	800c98c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d540:	2b00      	cmp	r3, #0
 800d542:	d106      	bne.n	800d552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	3324      	adds	r3, #36	@ 0x24
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	68b9      	ldr	r1, [r7, #8]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fc45 	bl	800dddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d552:	6978      	ldr	r0, [r7, #20]
 800d554:	f7ff ff26 	bl	800d3a4 <prvUnlockQueue>
	}
 800d558:	bf00      	nop
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08e      	sub	sp, #56	@ 0x38
 800d564:	af04      	add	r7, sp, #16
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10b      	bne.n	800d58c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	623b      	str	r3, [r7, #32]
}
 800d586:	bf00      	nop
 800d588:	bf00      	nop
 800d58a:	e7fd      	b.n	800d588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10b      	bne.n	800d5aa <xTaskCreateStatic+0x4a>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	61fb      	str	r3, [r7, #28]
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop
 800d5a8:	e7fd      	b.n	800d5a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5aa:	235c      	movs	r3, #92	@ 0x5c
 800d5ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5b2:	d00b      	beq.n	800d5cc <xTaskCreateStatic+0x6c>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	61bb      	str	r3, [r7, #24]
}
 800d5c6:	bf00      	nop
 800d5c8:	bf00      	nop
 800d5ca:	e7fd      	b.n	800d5c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d01e      	beq.n	800d612 <xTaskCreateStatic+0xb2>
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d01b      	beq.n	800d612 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	9303      	str	r3, [sp, #12]
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	9302      	str	r3, [sp, #8]
 800d5f4:	f107 0314 	add.w	r3, r7, #20
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 f850 	bl	800d6aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d60a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d60c:	f000 f8de 	bl	800d7cc <prvAddNewTaskToReadyList>
 800d610:	e001      	b.n	800d616 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d616:	697b      	ldr	r3, [r7, #20]
	}
 800d618:	4618      	mov	r0, r3
 800d61a:	3728      	adds	r7, #40	@ 0x28
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08c      	sub	sp, #48	@ 0x30
 800d624:	af04      	add	r7, sp, #16
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	603b      	str	r3, [r7, #0]
 800d62c:	4613      	mov	r3, r2
 800d62e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4618      	mov	r0, r3
 800d636:	f7fe fda5 	bl	800c184 <pvPortMalloc>
 800d63a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00e      	beq.n	800d660 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d642:	205c      	movs	r0, #92	@ 0x5c
 800d644:	f7fe fd9e 	bl	800c184 <pvPortMalloc>
 800d648:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d003      	beq.n	800d658 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	631a      	str	r2, [r3, #48]	@ 0x30
 800d656:	e005      	b.n	800d664 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d658:	6978      	ldr	r0, [r7, #20]
 800d65a:	f7fe fe61 	bl	800c320 <vPortFree>
 800d65e:	e001      	b.n	800d664 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d660:	2300      	movs	r3, #0
 800d662:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d017      	beq.n	800d69a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d672:	88fa      	ldrh	r2, [r7, #6]
 800d674:	2300      	movs	r3, #0
 800d676:	9303      	str	r3, [sp, #12]
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	9302      	str	r3, [sp, #8]
 800d67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67e:	9301      	str	r3, [sp, #4]
 800d680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	68b9      	ldr	r1, [r7, #8]
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f000 f80e 	bl	800d6aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d68e:	69f8      	ldr	r0, [r7, #28]
 800d690:	f000 f89c 	bl	800d7cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d694:	2301      	movs	r3, #1
 800d696:	61bb      	str	r3, [r7, #24]
 800d698:	e002      	b.n	800d6a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d69a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d69e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
	}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3720      	adds	r7, #32
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b088      	sub	sp, #32
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	607a      	str	r2, [r7, #4]
 800d6b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	21a5      	movs	r1, #165	@ 0xa5
 800d6c4:	f00f fbd8 	bl	801ce78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d6d2:	440b      	add	r3, r1
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	f023 0307 	bic.w	r3, r3, #7
 800d6e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	f003 0307 	and.w	r3, r3, #7
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00b      	beq.n	800d704 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	617b      	str	r3, [r7, #20]
}
 800d6fe:	bf00      	nop
 800d700:	bf00      	nop
 800d702:	e7fd      	b.n	800d700 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d01f      	beq.n	800d74a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d70a:	2300      	movs	r3, #0
 800d70c:	61fb      	str	r3, [r7, #28]
 800d70e:	e012      	b.n	800d736 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	4413      	add	r3, r2
 800d716:	7819      	ldrb	r1, [r3, #0]
 800d718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	4413      	add	r3, r2
 800d71e:	3334      	adds	r3, #52	@ 0x34
 800d720:	460a      	mov	r2, r1
 800d722:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	4413      	add	r3, r2
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	3301      	adds	r3, #1
 800d734:	61fb      	str	r3, [r7, #28]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	2b0f      	cmp	r3, #15
 800d73a:	d9e9      	bls.n	800d710 <prvInitialiseNewTask+0x66>
 800d73c:	e000      	b.n	800d740 <prvInitialiseNewTask+0x96>
			{
				break;
 800d73e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d748:	e003      	b.n	800d752 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d754:	2b37      	cmp	r3, #55	@ 0x37
 800d756:	d901      	bls.n	800d75c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d758:	2337      	movs	r3, #55	@ 0x37
 800d75a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d760:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d766:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	2200      	movs	r2, #0
 800d76c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d770:	3304      	adds	r3, #4
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe ff14 	bl	800c5a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77a:	3318      	adds	r3, #24
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe ff0f 	bl	800c5a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d786:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d796:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79a:	2200      	movs	r2, #0
 800d79c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	68f9      	ldr	r1, [r7, #12]
 800d7aa:	69b8      	ldr	r0, [r7, #24]
 800d7ac:	f7fe ff8c 	bl	800c6c8 <pxPortInitialiseStack>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7c2:	bf00      	nop
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
	...

0800d7cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7d4:	f7ff f8a8 	bl	800c928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7d8:	4b2d      	ldr	r3, [pc, #180]	@ (800d890 <prvAddNewTaskToReadyList+0xc4>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	4a2c      	ldr	r2, [pc, #176]	@ (800d890 <prvAddNewTaskToReadyList+0xc4>)
 800d7e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d894 <prvAddNewTaskToReadyList+0xc8>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d109      	bne.n	800d7fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7ea:	4a2a      	ldr	r2, [pc, #168]	@ (800d894 <prvAddNewTaskToReadyList+0xc8>)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7f0:	4b27      	ldr	r3, [pc, #156]	@ (800d890 <prvAddNewTaskToReadyList+0xc4>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d110      	bne.n	800d81a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7f8:	f000 fc46 	bl	800e088 <prvInitialiseTaskLists>
 800d7fc:	e00d      	b.n	800d81a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7fe:	4b26      	ldr	r3, [pc, #152]	@ (800d898 <prvAddNewTaskToReadyList+0xcc>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d109      	bne.n	800d81a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d806:	4b23      	ldr	r3, [pc, #140]	@ (800d894 <prvAddNewTaskToReadyList+0xc8>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d810:	429a      	cmp	r2, r3
 800d812:	d802      	bhi.n	800d81a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d814:	4a1f      	ldr	r2, [pc, #124]	@ (800d894 <prvAddNewTaskToReadyList+0xc8>)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d81a:	4b20      	ldr	r3, [pc, #128]	@ (800d89c <prvAddNewTaskToReadyList+0xd0>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3301      	adds	r3, #1
 800d820:	4a1e      	ldr	r2, [pc, #120]	@ (800d89c <prvAddNewTaskToReadyList+0xd0>)
 800d822:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d824:	4b1d      	ldr	r3, [pc, #116]	@ (800d89c <prvAddNewTaskToReadyList+0xd0>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d830:	4b1b      	ldr	r3, [pc, #108]	@ (800d8a0 <prvAddNewTaskToReadyList+0xd4>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	d903      	bls.n	800d840 <prvAddNewTaskToReadyList+0x74>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83c:	4a18      	ldr	r2, [pc, #96]	@ (800d8a0 <prvAddNewTaskToReadyList+0xd4>)
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d844:	4613      	mov	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4a15      	ldr	r2, [pc, #84]	@ (800d8a4 <prvAddNewTaskToReadyList+0xd8>)
 800d84e:	441a      	add	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3304      	adds	r3, #4
 800d854:	4619      	mov	r1, r3
 800d856:	4610      	mov	r0, r2
 800d858:	f7fe feaf 	bl	800c5ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d85c:	f7ff f896 	bl	800c98c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d860:	4b0d      	ldr	r3, [pc, #52]	@ (800d898 <prvAddNewTaskToReadyList+0xcc>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00e      	beq.n	800d886 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d868:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <prvAddNewTaskToReadyList+0xc8>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d872:	429a      	cmp	r2, r3
 800d874:	d207      	bcs.n	800d886 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d876:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a8 <prvAddNewTaskToReadyList+0xdc>)
 800d878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	2400ed10 	.word	0x2400ed10
 800d894:	2400e83c 	.word	0x2400e83c
 800d898:	2400ed1c 	.word	0x2400ed1c
 800d89c:	2400ed2c 	.word	0x2400ed2c
 800d8a0:	2400ed18 	.word	0x2400ed18
 800d8a4:	2400e840 	.word	0x2400e840
 800d8a8:	e000ed04 	.word	0xe000ed04

0800d8ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d018      	beq.n	800d8f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8be:	4b14      	ldr	r3, [pc, #80]	@ (800d910 <vTaskDelay+0x64>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00b      	beq.n	800d8de <vTaskDelay+0x32>
	__asm volatile
 800d8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	60bb      	str	r3, [r7, #8]
}
 800d8d8:	bf00      	nop
 800d8da:	bf00      	nop
 800d8dc:	e7fd      	b.n	800d8da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8de:	f000 f883 	bl	800d9e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fd1b 	bl	800e320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8ea:	f000 f88b 	bl	800da04 <xTaskResumeAll>
 800d8ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d107      	bne.n	800d906 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d8f6:	4b07      	ldr	r3, [pc, #28]	@ (800d914 <vTaskDelay+0x68>)
 800d8f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d906:	bf00      	nop
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	2400ed38 	.word	0x2400ed38
 800d914:	e000ed04 	.word	0xe000ed04

0800d918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08a      	sub	sp, #40	@ 0x28
 800d91c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d926:	463a      	mov	r2, r7
 800d928:	1d39      	adds	r1, r7, #4
 800d92a:	f107 0308 	add.w	r3, r7, #8
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fe fbf4 	bl	800c11c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	9202      	str	r2, [sp, #8]
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	2300      	movs	r3, #0
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	2300      	movs	r3, #0
 800d944:	460a      	mov	r2, r1
 800d946:	4922      	ldr	r1, [pc, #136]	@ (800d9d0 <vTaskStartScheduler+0xb8>)
 800d948:	4822      	ldr	r0, [pc, #136]	@ (800d9d4 <vTaskStartScheduler+0xbc>)
 800d94a:	f7ff fe09 	bl	800d560 <xTaskCreateStatic>
 800d94e:	4603      	mov	r3, r0
 800d950:	4a21      	ldr	r2, [pc, #132]	@ (800d9d8 <vTaskStartScheduler+0xc0>)
 800d952:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d954:	4b20      	ldr	r3, [pc, #128]	@ (800d9d8 <vTaskStartScheduler+0xc0>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d95c:	2301      	movs	r3, #1
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	e001      	b.n	800d966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d102      	bne.n	800d972 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d96c:	f000 fd2c 	bl	800e3c8 <xTimerCreateTimerTask>
 800d970:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d116      	bne.n	800d9a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	613b      	str	r3, [r7, #16]
}
 800d98a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d98c:	4b13      	ldr	r3, [pc, #76]	@ (800d9dc <vTaskStartScheduler+0xc4>)
 800d98e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d992:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d994:	4b12      	ldr	r3, [pc, #72]	@ (800d9e0 <vTaskStartScheduler+0xc8>)
 800d996:	2201      	movs	r2, #1
 800d998:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d99a:	4b12      	ldr	r3, [pc, #72]	@ (800d9e4 <vTaskStartScheduler+0xcc>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9a0:	f7fe ff1e 	bl	800c7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9a4:	e00f      	b.n	800d9c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9ac:	d10b      	bne.n	800d9c6 <vTaskStartScheduler+0xae>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	60fb      	str	r3, [r7, #12]
}
 800d9c0:	bf00      	nop
 800d9c2:	bf00      	nop
 800d9c4:	e7fd      	b.n	800d9c2 <vTaskStartScheduler+0xaa>
}
 800d9c6:	bf00      	nop
 800d9c8:	3718      	adds	r7, #24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	0801dd24 	.word	0x0801dd24
 800d9d4:	0800e059 	.word	0x0800e059
 800d9d8:	2400ed34 	.word	0x2400ed34
 800d9dc:	2400ed30 	.word	0x2400ed30
 800d9e0:	2400ed1c 	.word	0x2400ed1c
 800d9e4:	2400ed14 	.word	0x2400ed14

0800d9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9ec:	4b04      	ldr	r3, [pc, #16]	@ (800da00 <vTaskSuspendAll+0x18>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	4a03      	ldr	r2, [pc, #12]	@ (800da00 <vTaskSuspendAll+0x18>)
 800d9f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d9f6:	bf00      	nop
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	2400ed38 	.word	0x2400ed38

0800da04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da0a:	2300      	movs	r3, #0
 800da0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da0e:	2300      	movs	r3, #0
 800da10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da12:	4b42      	ldr	r3, [pc, #264]	@ (800db1c <xTaskResumeAll+0x118>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10b      	bne.n	800da32 <xTaskResumeAll+0x2e>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	603b      	str	r3, [r7, #0]
}
 800da2c:	bf00      	nop
 800da2e:	bf00      	nop
 800da30:	e7fd      	b.n	800da2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da32:	f7fe ff79 	bl	800c928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da36:	4b39      	ldr	r3, [pc, #228]	@ (800db1c <xTaskResumeAll+0x118>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	4a37      	ldr	r2, [pc, #220]	@ (800db1c <xTaskResumeAll+0x118>)
 800da3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da40:	4b36      	ldr	r3, [pc, #216]	@ (800db1c <xTaskResumeAll+0x118>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d162      	bne.n	800db0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da48:	4b35      	ldr	r3, [pc, #212]	@ (800db20 <xTaskResumeAll+0x11c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d05e      	beq.n	800db0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da50:	e02f      	b.n	800dab2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da52:	4b34      	ldr	r3, [pc, #208]	@ (800db24 <xTaskResumeAll+0x120>)
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3318      	adds	r3, #24
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe fe08 	bl	800c674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3304      	adds	r3, #4
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fe03 	bl	800c674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da72:	4b2d      	ldr	r3, [pc, #180]	@ (800db28 <xTaskResumeAll+0x124>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	429a      	cmp	r2, r3
 800da78:	d903      	bls.n	800da82 <xTaskResumeAll+0x7e>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7e:	4a2a      	ldr	r2, [pc, #168]	@ (800db28 <xTaskResumeAll+0x124>)
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da86:	4613      	mov	r3, r2
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	4413      	add	r3, r2
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4a27      	ldr	r2, [pc, #156]	@ (800db2c <xTaskResumeAll+0x128>)
 800da90:	441a      	add	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	3304      	adds	r3, #4
 800da96:	4619      	mov	r1, r3
 800da98:	4610      	mov	r0, r2
 800da9a:	f7fe fd8e 	bl	800c5ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daa2:	4b23      	ldr	r3, [pc, #140]	@ (800db30 <xTaskResumeAll+0x12c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d302      	bcc.n	800dab2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800daac:	4b21      	ldr	r3, [pc, #132]	@ (800db34 <xTaskResumeAll+0x130>)
 800daae:	2201      	movs	r2, #1
 800dab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dab2:	4b1c      	ldr	r3, [pc, #112]	@ (800db24 <xTaskResumeAll+0x120>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1cb      	bne.n	800da52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dac0:	f000 fb80 	bl	800e1c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dac4:	4b1c      	ldr	r3, [pc, #112]	@ (800db38 <xTaskResumeAll+0x134>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d010      	beq.n	800daf2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dad0:	f000 f846 	bl	800db60 <xTaskIncrementTick>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dada:	4b16      	ldr	r3, [pc, #88]	@ (800db34 <xTaskResumeAll+0x130>)
 800dadc:	2201      	movs	r2, #1
 800dade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3b01      	subs	r3, #1
 800dae4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1f1      	bne.n	800dad0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800daec:	4b12      	ldr	r3, [pc, #72]	@ (800db38 <xTaskResumeAll+0x134>)
 800daee:	2200      	movs	r2, #0
 800daf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800daf2:	4b10      	ldr	r3, [pc, #64]	@ (800db34 <xTaskResumeAll+0x130>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d009      	beq.n	800db0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dafa:	2301      	movs	r3, #1
 800dafc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dafe:	4b0f      	ldr	r3, [pc, #60]	@ (800db3c <xTaskResumeAll+0x138>)
 800db00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db0e:	f7fe ff3d 	bl	800c98c <vPortExitCritical>

	return xAlreadyYielded;
 800db12:	68bb      	ldr	r3, [r7, #8]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	2400ed38 	.word	0x2400ed38
 800db20:	2400ed10 	.word	0x2400ed10
 800db24:	2400ecd0 	.word	0x2400ecd0
 800db28:	2400ed18 	.word	0x2400ed18
 800db2c:	2400e840 	.word	0x2400e840
 800db30:	2400e83c 	.word	0x2400e83c
 800db34:	2400ed24 	.word	0x2400ed24
 800db38:	2400ed20 	.word	0x2400ed20
 800db3c:	e000ed04 	.word	0xe000ed04

0800db40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db46:	4b05      	ldr	r3, [pc, #20]	@ (800db5c <xTaskGetTickCount+0x1c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db4c:	687b      	ldr	r3, [r7, #4]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	2400ed14 	.word	0x2400ed14

0800db60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db6a:	4b4f      	ldr	r3, [pc, #316]	@ (800dca8 <xTaskIncrementTick+0x148>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f040 8090 	bne.w	800dc94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db74:	4b4d      	ldr	r3, [pc, #308]	@ (800dcac <xTaskIncrementTick+0x14c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3301      	adds	r3, #1
 800db7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db7c:	4a4b      	ldr	r2, [pc, #300]	@ (800dcac <xTaskIncrementTick+0x14c>)
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d121      	bne.n	800dbcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800db88:	4b49      	ldr	r3, [pc, #292]	@ (800dcb0 <xTaskIncrementTick+0x150>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00b      	beq.n	800dbaa <xTaskIncrementTick+0x4a>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db96:	f383 8811 	msr	BASEPRI, r3
 800db9a:	f3bf 8f6f 	isb	sy
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	603b      	str	r3, [r7, #0]
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop
 800dba8:	e7fd      	b.n	800dba6 <xTaskIncrementTick+0x46>
 800dbaa:	4b41      	ldr	r3, [pc, #260]	@ (800dcb0 <xTaskIncrementTick+0x150>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	4b40      	ldr	r3, [pc, #256]	@ (800dcb4 <xTaskIncrementTick+0x154>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a3e      	ldr	r2, [pc, #248]	@ (800dcb0 <xTaskIncrementTick+0x150>)
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	4a3e      	ldr	r2, [pc, #248]	@ (800dcb4 <xTaskIncrementTick+0x154>)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	4b3e      	ldr	r3, [pc, #248]	@ (800dcb8 <xTaskIncrementTick+0x158>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	4a3c      	ldr	r2, [pc, #240]	@ (800dcb8 <xTaskIncrementTick+0x158>)
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	f000 fafc 	bl	800e1c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbcc:	4b3b      	ldr	r3, [pc, #236]	@ (800dcbc <xTaskIncrementTick+0x15c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d349      	bcc.n	800dc6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbd6:	4b36      	ldr	r3, [pc, #216]	@ (800dcb0 <xTaskIncrementTick+0x150>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d104      	bne.n	800dbea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbe0:	4b36      	ldr	r3, [pc, #216]	@ (800dcbc <xTaskIncrementTick+0x15c>)
 800dbe2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbe6:	601a      	str	r2, [r3, #0]
					break;
 800dbe8:	e03f      	b.n	800dc6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbea:	4b31      	ldr	r3, [pc, #196]	@ (800dcb0 <xTaskIncrementTick+0x150>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d203      	bcs.n	800dc0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc02:	4a2e      	ldr	r2, [pc, #184]	@ (800dcbc <xTaskIncrementTick+0x15c>)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc08:	e02f      	b.n	800dc6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fe fd30 	bl	800c674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d004      	beq.n	800dc26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	3318      	adds	r3, #24
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fe fd27 	bl	800c674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2a:	4b25      	ldr	r3, [pc, #148]	@ (800dcc0 <xTaskIncrementTick+0x160>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d903      	bls.n	800dc3a <xTaskIncrementTick+0xda>
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc36:	4a22      	ldr	r2, [pc, #136]	@ (800dcc0 <xTaskIncrementTick+0x160>)
 800dc38:	6013      	str	r3, [r2, #0]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc3e:	4613      	mov	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4a1f      	ldr	r2, [pc, #124]	@ (800dcc4 <xTaskIncrementTick+0x164>)
 800dc48:	441a      	add	r2, r3
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7fe fcb2 	bl	800c5ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc5a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc8 <xTaskIncrementTick+0x168>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d3b8      	bcc.n	800dbd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc68:	e7b5      	b.n	800dbd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc6a:	4b17      	ldr	r3, [pc, #92]	@ (800dcc8 <xTaskIncrementTick+0x168>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc70:	4914      	ldr	r1, [pc, #80]	@ (800dcc4 <xTaskIncrementTick+0x164>)
 800dc72:	4613      	mov	r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	440b      	add	r3, r1
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d901      	bls.n	800dc86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dc82:	2301      	movs	r3, #1
 800dc84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc86:	4b11      	ldr	r3, [pc, #68]	@ (800dccc <xTaskIncrementTick+0x16c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d007      	beq.n	800dc9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	617b      	str	r3, [r7, #20]
 800dc92:	e004      	b.n	800dc9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc94:	4b0e      	ldr	r3, [pc, #56]	@ (800dcd0 <xTaskIncrementTick+0x170>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	4a0d      	ldr	r2, [pc, #52]	@ (800dcd0 <xTaskIncrementTick+0x170>)
 800dc9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc9e:	697b      	ldr	r3, [r7, #20]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3718      	adds	r7, #24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	2400ed38 	.word	0x2400ed38
 800dcac:	2400ed14 	.word	0x2400ed14
 800dcb0:	2400ecc8 	.word	0x2400ecc8
 800dcb4:	2400eccc 	.word	0x2400eccc
 800dcb8:	2400ed28 	.word	0x2400ed28
 800dcbc:	2400ed30 	.word	0x2400ed30
 800dcc0:	2400ed18 	.word	0x2400ed18
 800dcc4:	2400e840 	.word	0x2400e840
 800dcc8:	2400e83c 	.word	0x2400e83c
 800dccc:	2400ed24 	.word	0x2400ed24
 800dcd0:	2400ed20 	.word	0x2400ed20

0800dcd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcda:	4b28      	ldr	r3, [pc, #160]	@ (800dd7c <vTaskSwitchContext+0xa8>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dce2:	4b27      	ldr	r3, [pc, #156]	@ (800dd80 <vTaskSwitchContext+0xac>)
 800dce4:	2201      	movs	r2, #1
 800dce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dce8:	e042      	b.n	800dd70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dcea:	4b25      	ldr	r3, [pc, #148]	@ (800dd80 <vTaskSwitchContext+0xac>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcf0:	4b24      	ldr	r3, [pc, #144]	@ (800dd84 <vTaskSwitchContext+0xb0>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	60fb      	str	r3, [r7, #12]
 800dcf6:	e011      	b.n	800dd1c <vTaskSwitchContext+0x48>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10b      	bne.n	800dd16 <vTaskSwitchContext+0x42>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	607b      	str	r3, [r7, #4]
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	e7fd      	b.n	800dd12 <vTaskSwitchContext+0x3e>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	60fb      	str	r3, [r7, #12]
 800dd1c:	491a      	ldr	r1, [pc, #104]	@ (800dd88 <vTaskSwitchContext+0xb4>)
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	440b      	add	r3, r1
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0e3      	beq.n	800dcf8 <vTaskSwitchContext+0x24>
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	4613      	mov	r3, r2
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	4413      	add	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4a13      	ldr	r2, [pc, #76]	@ (800dd88 <vTaskSwitchContext+0xb4>)
 800dd3c:	4413      	add	r3, r2
 800dd3e:	60bb      	str	r3, [r7, #8]
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	605a      	str	r2, [r3, #4]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	3308      	adds	r3, #8
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d104      	bne.n	800dd60 <vTaskSwitchContext+0x8c>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	605a      	str	r2, [r3, #4]
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	4a09      	ldr	r2, [pc, #36]	@ (800dd8c <vTaskSwitchContext+0xb8>)
 800dd68:	6013      	str	r3, [r2, #0]
 800dd6a:	4a06      	ldr	r2, [pc, #24]	@ (800dd84 <vTaskSwitchContext+0xb0>)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6013      	str	r3, [r2, #0]
}
 800dd70:	bf00      	nop
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	2400ed38 	.word	0x2400ed38
 800dd80:	2400ed24 	.word	0x2400ed24
 800dd84:	2400ed18 	.word	0x2400ed18
 800dd88:	2400e840 	.word	0x2400e840
 800dd8c:	2400e83c 	.word	0x2400e83c

0800dd90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10b      	bne.n	800ddb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	60fb      	str	r3, [r7, #12]
}
 800ddb2:	bf00      	nop
 800ddb4:	bf00      	nop
 800ddb6:	e7fd      	b.n	800ddb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddb8:	4b07      	ldr	r3, [pc, #28]	@ (800ddd8 <vTaskPlaceOnEventList+0x48>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3318      	adds	r3, #24
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7fe fc1e 	bl	800c602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddc6:	2101      	movs	r1, #1
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	f000 faa9 	bl	800e320 <prvAddCurrentTaskToDelayedList>
}
 800ddce:	bf00      	nop
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	2400e83c 	.word	0x2400e83c

0800dddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10b      	bne.n	800de06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	617b      	str	r3, [r7, #20]
}
 800de00:	bf00      	nop
 800de02:	bf00      	nop
 800de04:	e7fd      	b.n	800de02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de06:	4b0a      	ldr	r3, [pc, #40]	@ (800de30 <vTaskPlaceOnEventListRestricted+0x54>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3318      	adds	r3, #24
 800de0c:	4619      	mov	r1, r3
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7fe fbd3 	bl	800c5ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800de1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de20:	6879      	ldr	r1, [r7, #4]
 800de22:	68b8      	ldr	r0, [r7, #8]
 800de24:	f000 fa7c 	bl	800e320 <prvAddCurrentTaskToDelayedList>
	}
 800de28:	bf00      	nop
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	2400e83c 	.word	0x2400e83c

0800de34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	60fb      	str	r3, [r7, #12]
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	e7fd      	b.n	800de5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	3318      	adds	r3, #24
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe fc04 	bl	800c674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dee4 <xTaskRemoveFromEventList+0xb0>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d11d      	bne.n	800deb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	3304      	adds	r3, #4
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe fbfb 	bl	800c674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de82:	4b19      	ldr	r3, [pc, #100]	@ (800dee8 <xTaskRemoveFromEventList+0xb4>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	429a      	cmp	r2, r3
 800de88:	d903      	bls.n	800de92 <xTaskRemoveFromEventList+0x5e>
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8e:	4a16      	ldr	r2, [pc, #88]	@ (800dee8 <xTaskRemoveFromEventList+0xb4>)
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de96:	4613      	mov	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4a13      	ldr	r2, [pc, #76]	@ (800deec <xTaskRemoveFromEventList+0xb8>)
 800dea0:	441a      	add	r2, r3
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4619      	mov	r1, r3
 800dea8:	4610      	mov	r0, r2
 800deaa:	f7fe fb86 	bl	800c5ba <vListInsertEnd>
 800deae:	e005      	b.n	800debc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	3318      	adds	r3, #24
 800deb4:	4619      	mov	r1, r3
 800deb6:	480e      	ldr	r0, [pc, #56]	@ (800def0 <xTaskRemoveFromEventList+0xbc>)
 800deb8:	f7fe fb7f 	bl	800c5ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dec0:	4b0c      	ldr	r3, [pc, #48]	@ (800def4 <xTaskRemoveFromEventList+0xc0>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d905      	bls.n	800ded6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800deca:	2301      	movs	r3, #1
 800decc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dece:	4b0a      	ldr	r3, [pc, #40]	@ (800def8 <xTaskRemoveFromEventList+0xc4>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	e001      	b.n	800deda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800deda:	697b      	ldr	r3, [r7, #20]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	2400ed38 	.word	0x2400ed38
 800dee8:	2400ed18 	.word	0x2400ed18
 800deec:	2400e840 	.word	0x2400e840
 800def0:	2400ecd0 	.word	0x2400ecd0
 800def4:	2400e83c 	.word	0x2400e83c
 800def8:	2400ed24 	.word	0x2400ed24

0800defc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10b      	bne.n	800df22 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	60fb      	str	r3, [r7, #12]
}
 800df1c:	bf00      	nop
 800df1e:	bf00      	nop
 800df20:	e7fd      	b.n	800df1e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800df22:	f7fe fd01 	bl	800c928 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df26:	4b07      	ldr	r3, [pc, #28]	@ (800df44 <vTaskSetTimeOutState+0x48>)
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800df2e:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <vTaskSetTimeOutState+0x4c>)
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800df36:	f7fe fd29 	bl	800c98c <vPortExitCritical>
}
 800df3a:	bf00      	nop
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	2400ed28 	.word	0x2400ed28
 800df48:	2400ed14 	.word	0x2400ed14

0800df4c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df54:	4b06      	ldr	r3, [pc, #24]	@ (800df70 <vTaskInternalSetTimeOutState+0x24>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df5c:	4b05      	ldr	r3, [pc, #20]	@ (800df74 <vTaskInternalSetTimeOutState+0x28>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	605a      	str	r2, [r3, #4]
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	2400ed28 	.word	0x2400ed28
 800df74:	2400ed14 	.word	0x2400ed14

0800df78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10b      	bne.n	800dfa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800df88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	613b      	str	r3, [r7, #16]
}
 800df9a:	bf00      	nop
 800df9c:	bf00      	nop
 800df9e:	e7fd      	b.n	800df9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10b      	bne.n	800dfbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	60fb      	str	r3, [r7, #12]
}
 800dfb8:	bf00      	nop
 800dfba:	bf00      	nop
 800dfbc:	e7fd      	b.n	800dfba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dfbe:	f7fe fcb3 	bl	800c928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfc2:	4b1d      	ldr	r3, [pc, #116]	@ (800e038 <xTaskCheckForTimeOut+0xc0>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	69ba      	ldr	r2, [r7, #24]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfda:	d102      	bne.n	800dfe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	61fb      	str	r3, [r7, #28]
 800dfe0:	e023      	b.n	800e02a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	4b15      	ldr	r3, [pc, #84]	@ (800e03c <xTaskCheckForTimeOut+0xc4>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d007      	beq.n	800dffe <xTaskCheckForTimeOut+0x86>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	69ba      	ldr	r2, [r7, #24]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d302      	bcc.n	800dffe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	61fb      	str	r3, [r7, #28]
 800dffc:	e015      	b.n	800e02a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	429a      	cmp	r2, r3
 800e006:	d20b      	bcs.n	800e020 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	1ad2      	subs	r2, r2, r3
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff ff99 	bl	800df4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	61fb      	str	r3, [r7, #28]
 800e01e:	e004      	b.n	800e02a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2200      	movs	r2, #0
 800e024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e026:	2301      	movs	r3, #1
 800e028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e02a:	f7fe fcaf 	bl	800c98c <vPortExitCritical>

	return xReturn;
 800e02e:	69fb      	ldr	r3, [r7, #28]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3720      	adds	r7, #32
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	2400ed14 	.word	0x2400ed14
 800e03c:	2400ed28 	.word	0x2400ed28

0800e040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e040:	b480      	push	{r7}
 800e042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e044:	4b03      	ldr	r3, [pc, #12]	@ (800e054 <vTaskMissedYield+0x14>)
 800e046:	2201      	movs	r2, #1
 800e048:	601a      	str	r2, [r3, #0]
}
 800e04a:	bf00      	nop
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	2400ed24 	.word	0x2400ed24

0800e058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e060:	f000 f852 	bl	800e108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e064:	4b06      	ldr	r3, [pc, #24]	@ (800e080 <prvIdleTask+0x28>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d9f9      	bls.n	800e060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e06c:	4b05      	ldr	r3, [pc, #20]	@ (800e084 <prvIdleTask+0x2c>)
 800e06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e07c:	e7f0      	b.n	800e060 <prvIdleTask+0x8>
 800e07e:	bf00      	nop
 800e080:	2400e840 	.word	0x2400e840
 800e084:	e000ed04 	.word	0xe000ed04

0800e088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e08e:	2300      	movs	r3, #0
 800e090:	607b      	str	r3, [r7, #4]
 800e092:	e00c      	b.n	800e0ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4a12      	ldr	r2, [pc, #72]	@ (800e0e8 <prvInitialiseTaskLists+0x60>)
 800e0a0:	4413      	add	r3, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe fa5c 	bl	800c560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	607b      	str	r3, [r7, #4]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b37      	cmp	r3, #55	@ 0x37
 800e0b2:	d9ef      	bls.n	800e094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0b4:	480d      	ldr	r0, [pc, #52]	@ (800e0ec <prvInitialiseTaskLists+0x64>)
 800e0b6:	f7fe fa53 	bl	800c560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0ba:	480d      	ldr	r0, [pc, #52]	@ (800e0f0 <prvInitialiseTaskLists+0x68>)
 800e0bc:	f7fe fa50 	bl	800c560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0c0:	480c      	ldr	r0, [pc, #48]	@ (800e0f4 <prvInitialiseTaskLists+0x6c>)
 800e0c2:	f7fe fa4d 	bl	800c560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0c6:	480c      	ldr	r0, [pc, #48]	@ (800e0f8 <prvInitialiseTaskLists+0x70>)
 800e0c8:	f7fe fa4a 	bl	800c560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0cc:	480b      	ldr	r0, [pc, #44]	@ (800e0fc <prvInitialiseTaskLists+0x74>)
 800e0ce:	f7fe fa47 	bl	800c560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e100 <prvInitialiseTaskLists+0x78>)
 800e0d4:	4a05      	ldr	r2, [pc, #20]	@ (800e0ec <prvInitialiseTaskLists+0x64>)
 800e0d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <prvInitialiseTaskLists+0x7c>)
 800e0da:	4a05      	ldr	r2, [pc, #20]	@ (800e0f0 <prvInitialiseTaskLists+0x68>)
 800e0dc:	601a      	str	r2, [r3, #0]
}
 800e0de:	bf00      	nop
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	2400e840 	.word	0x2400e840
 800e0ec:	2400eca0 	.word	0x2400eca0
 800e0f0:	2400ecb4 	.word	0x2400ecb4
 800e0f4:	2400ecd0 	.word	0x2400ecd0
 800e0f8:	2400ece4 	.word	0x2400ece4
 800e0fc:	2400ecfc 	.word	0x2400ecfc
 800e100:	2400ecc8 	.word	0x2400ecc8
 800e104:	2400eccc 	.word	0x2400eccc

0800e108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e10e:	e019      	b.n	800e144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e110:	f7fe fc0a 	bl	800c928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e114:	4b10      	ldr	r3, [pc, #64]	@ (800e158 <prvCheckTasksWaitingTermination+0x50>)
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3304      	adds	r3, #4
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe faa7 	bl	800c674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e126:	4b0d      	ldr	r3, [pc, #52]	@ (800e15c <prvCheckTasksWaitingTermination+0x54>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	4a0b      	ldr	r2, [pc, #44]	@ (800e15c <prvCheckTasksWaitingTermination+0x54>)
 800e12e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e130:	4b0b      	ldr	r3, [pc, #44]	@ (800e160 <prvCheckTasksWaitingTermination+0x58>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	3b01      	subs	r3, #1
 800e136:	4a0a      	ldr	r2, [pc, #40]	@ (800e160 <prvCheckTasksWaitingTermination+0x58>)
 800e138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e13a:	f7fe fc27 	bl	800c98c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f810 	bl	800e164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e144:	4b06      	ldr	r3, [pc, #24]	@ (800e160 <prvCheckTasksWaitingTermination+0x58>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1e1      	bne.n	800e110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	2400ece4 	.word	0x2400ece4
 800e15c:	2400ed10 	.word	0x2400ed10
 800e160:	2400ecf8 	.word	0x2400ecf8

0800e164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e172:	2b00      	cmp	r3, #0
 800e174:	d108      	bne.n	800e188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe f8d0 	bl	800c320 <vPortFree>
				vPortFree( pxTCB );
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7fe f8cd 	bl	800c320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e186:	e019      	b.n	800e1bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d103      	bne.n	800e19a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7fe f8c4 	bl	800c320 <vPortFree>
	}
 800e198:	e010      	b.n	800e1bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d00b      	beq.n	800e1bc <prvDeleteTCB+0x58>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	60fb      	str	r3, [r7, #12]
}
 800e1b6:	bf00      	nop
 800e1b8:	bf00      	nop
 800e1ba:	e7fd      	b.n	800e1b8 <prvDeleteTCB+0x54>
	}
 800e1bc:	bf00      	nop
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e1fc <prvResetNextTaskUnblockTime+0x38>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d104      	bne.n	800e1de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e200 <prvResetNextTaskUnblockTime+0x3c>)
 800e1d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1dc:	e008      	b.n	800e1f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1de:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <prvResetNextTaskUnblockTime+0x38>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	4a04      	ldr	r2, [pc, #16]	@ (800e200 <prvResetNextTaskUnblockTime+0x3c>)
 800e1ee:	6013      	str	r3, [r2, #0]
}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	2400ecc8 	.word	0x2400ecc8
 800e200:	2400ed30 	.word	0x2400ed30

0800e204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e20a:	4b0b      	ldr	r3, [pc, #44]	@ (800e238 <xTaskGetSchedulerState+0x34>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d102      	bne.n	800e218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e212:	2301      	movs	r3, #1
 800e214:	607b      	str	r3, [r7, #4]
 800e216:	e008      	b.n	800e22a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e218:	4b08      	ldr	r3, [pc, #32]	@ (800e23c <xTaskGetSchedulerState+0x38>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e220:	2302      	movs	r3, #2
 800e222:	607b      	str	r3, [r7, #4]
 800e224:	e001      	b.n	800e22a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e226:	2300      	movs	r3, #0
 800e228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e22a:	687b      	ldr	r3, [r7, #4]
	}
 800e22c:	4618      	mov	r0, r3
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	2400ed1c 	.word	0x2400ed1c
 800e23c:	2400ed38 	.word	0x2400ed38

0800e240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e24c:	2300      	movs	r3, #0
 800e24e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d058      	beq.n	800e308 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e256:	4b2f      	ldr	r3, [pc, #188]	@ (800e314 <xTaskPriorityDisinherit+0xd4>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	693a      	ldr	r2, [r7, #16]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d00b      	beq.n	800e278 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	60fb      	str	r3, [r7, #12]
}
 800e272:	bf00      	nop
 800e274:	bf00      	nop
 800e276:	e7fd      	b.n	800e274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10b      	bne.n	800e298 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	60bb      	str	r3, [r7, #8]
}
 800e292:	bf00      	nop
 800e294:	bf00      	nop
 800e296:	e7fd      	b.n	800e294 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e29c:	1e5a      	subs	r2, r3, #1
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d02c      	beq.n	800e308 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d128      	bne.n	800e308 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe f9da 	bl	800c674 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e318 <xTaskPriorityDisinherit+0xd8>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d903      	bls.n	800e2e8 <xTaskPriorityDisinherit+0xa8>
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e4:	4a0c      	ldr	r2, [pc, #48]	@ (800e318 <xTaskPriorityDisinherit+0xd8>)
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4a09      	ldr	r2, [pc, #36]	@ (800e31c <xTaskPriorityDisinherit+0xdc>)
 800e2f6:	441a      	add	r2, r3
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4610      	mov	r0, r2
 800e300:	f7fe f95b 	bl	800c5ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e304:	2301      	movs	r3, #1
 800e306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e308:	697b      	ldr	r3, [r7, #20]
	}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	2400e83c 	.word	0x2400e83c
 800e318:	2400ed18 	.word	0x2400ed18
 800e31c:	2400e840 	.word	0x2400e840

0800e320 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e32a:	4b21      	ldr	r3, [pc, #132]	@ (800e3b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e330:	4b20      	ldr	r3, [pc, #128]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3304      	adds	r3, #4
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe f99c 	bl	800c674 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e342:	d10a      	bne.n	800e35a <prvAddCurrentTaskToDelayedList+0x3a>
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d007      	beq.n	800e35a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e34a:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	3304      	adds	r3, #4
 800e350:	4619      	mov	r1, r3
 800e352:	4819      	ldr	r0, [pc, #100]	@ (800e3b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e354:	f7fe f931 	bl	800c5ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e358:	e026      	b.n	800e3a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4413      	add	r3, r2
 800e360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e362:	4b14      	ldr	r3, [pc, #80]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d209      	bcs.n	800e386 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e372:	4b12      	ldr	r3, [pc, #72]	@ (800e3bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	4b0f      	ldr	r3, [pc, #60]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4619      	mov	r1, r3
 800e37e:	4610      	mov	r0, r2
 800e380:	f7fe f93f 	bl	800c602 <vListInsert>
}
 800e384:	e010      	b.n	800e3a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e386:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3304      	adds	r3, #4
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	f7fe f935 	bl	800c602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e398:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d202      	bcs.n	800e3a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e3a2:	4a08      	ldr	r2, [pc, #32]	@ (800e3c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	6013      	str	r3, [r2, #0]
}
 800e3a8:	bf00      	nop
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	2400ed14 	.word	0x2400ed14
 800e3b4:	2400e83c 	.word	0x2400e83c
 800e3b8:	2400ecfc 	.word	0x2400ecfc
 800e3bc:	2400eccc 	.word	0x2400eccc
 800e3c0:	2400ecc8 	.word	0x2400ecc8
 800e3c4:	2400ed30 	.word	0x2400ed30

0800e3c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08a      	sub	sp, #40	@ 0x28
 800e3cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3d2:	f000 fb13 	bl	800e9fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e44c <xTimerCreateTimerTask+0x84>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d021      	beq.n	800e422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3e6:	1d3a      	adds	r2, r7, #4
 800e3e8:	f107 0108 	add.w	r1, r7, #8
 800e3ec:	f107 030c 	add.w	r3, r7, #12
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fd fead 	bl	800c150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	9202      	str	r2, [sp, #8]
 800e3fe:	9301      	str	r3, [sp, #4]
 800e400:	2302      	movs	r3, #2
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	2300      	movs	r3, #0
 800e406:	460a      	mov	r2, r1
 800e408:	4911      	ldr	r1, [pc, #68]	@ (800e450 <xTimerCreateTimerTask+0x88>)
 800e40a:	4812      	ldr	r0, [pc, #72]	@ (800e454 <xTimerCreateTimerTask+0x8c>)
 800e40c:	f7ff f8a8 	bl	800d560 <xTaskCreateStatic>
 800e410:	4603      	mov	r3, r0
 800e412:	4a11      	ldr	r2, [pc, #68]	@ (800e458 <xTimerCreateTimerTask+0x90>)
 800e414:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e416:	4b10      	ldr	r3, [pc, #64]	@ (800e458 <xTimerCreateTimerTask+0x90>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e41e:	2301      	movs	r3, #1
 800e420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10b      	bne.n	800e440 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	613b      	str	r3, [r7, #16]
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	e7fd      	b.n	800e43c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e440:	697b      	ldr	r3, [r7, #20]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	2400ed6c 	.word	0x2400ed6c
 800e450:	0801dd2c 	.word	0x0801dd2c
 800e454:	0800e595 	.word	0x0800e595
 800e458:	2400ed70 	.word	0x2400ed70

0800e45c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08a      	sub	sp, #40	@ 0x28
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
 800e468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10b      	bne.n	800e48c <xTimerGenericCommand+0x30>
	__asm volatile
 800e474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	623b      	str	r3, [r7, #32]
}
 800e486:	bf00      	nop
 800e488:	bf00      	nop
 800e48a:	e7fd      	b.n	800e488 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e48c:	4b19      	ldr	r3, [pc, #100]	@ (800e4f4 <xTimerGenericCommand+0x98>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d02a      	beq.n	800e4ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	dc18      	bgt.n	800e4d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4a6:	f7ff fead 	bl	800e204 <xTaskGetSchedulerState>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d109      	bne.n	800e4c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4b0:	4b10      	ldr	r3, [pc, #64]	@ (800e4f4 <xTimerGenericCommand+0x98>)
 800e4b2:	6818      	ldr	r0, [r3, #0]
 800e4b4:	f107 0110 	add.w	r1, r7, #16
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4bc:	f7fe fc60 	bl	800cd80 <xQueueGenericSend>
 800e4c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e4c2:	e012      	b.n	800e4ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e4f4 <xTimerGenericCommand+0x98>)
 800e4c6:	6818      	ldr	r0, [r3, #0]
 800e4c8:	f107 0110 	add.w	r1, r7, #16
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f7fe fc56 	bl	800cd80 <xQueueGenericSend>
 800e4d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e4d6:	e008      	b.n	800e4ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4d8:	4b06      	ldr	r3, [pc, #24]	@ (800e4f4 <xTimerGenericCommand+0x98>)
 800e4da:	6818      	ldr	r0, [r3, #0]
 800e4dc:	f107 0110 	add.w	r1, r7, #16
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	f7fe fd4e 	bl	800cf84 <xQueueGenericSendFromISR>
 800e4e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3728      	adds	r7, #40	@ 0x28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	2400ed6c 	.word	0x2400ed6c

0800e4f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af02      	add	r7, sp, #8
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e502:	4b23      	ldr	r3, [pc, #140]	@ (800e590 <prvProcessExpiredTimer+0x98>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	3304      	adds	r3, #4
 800e510:	4618      	mov	r0, r3
 800e512:	f7fe f8af 	bl	800c674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d023      	beq.n	800e56c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	699a      	ldr	r2, [r3, #24]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	18d1      	adds	r1, r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	6978      	ldr	r0, [r7, #20]
 800e532:	f000 f8d5 	bl	800e6e0 <prvInsertTimerInActiveList>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d020      	beq.n	800e57e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e53c:	2300      	movs	r3, #0
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	2300      	movs	r3, #0
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	2100      	movs	r1, #0
 800e546:	6978      	ldr	r0, [r7, #20]
 800e548:	f7ff ff88 	bl	800e45c <xTimerGenericCommand>
 800e54c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d114      	bne.n	800e57e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	60fb      	str	r3, [r7, #12]
}
 800e566:	bf00      	nop
 800e568:	bf00      	nop
 800e56a:	e7fd      	b.n	800e568 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e572:	f023 0301 	bic.w	r3, r3, #1
 800e576:	b2da      	uxtb	r2, r3
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	6978      	ldr	r0, [r7, #20]
 800e584:	4798      	blx	r3
}
 800e586:	bf00      	nop
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	2400ed64 	.word	0x2400ed64

0800e594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e59c:	f107 0308 	add.w	r3, r7, #8
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f000 f859 	bl	800e658 <prvGetNextExpireTime>
 800e5a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f000 f805 	bl	800e5bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5b2:	f000 f8d7 	bl	800e764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5b6:	bf00      	nop
 800e5b8:	e7f0      	b.n	800e59c <prvTimerTask+0x8>
	...

0800e5bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5c6:	f7ff fa0f 	bl	800d9e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5ca:	f107 0308 	add.w	r3, r7, #8
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 f866 	bl	800e6a0 <prvSampleTimeNow>
 800e5d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d130      	bne.n	800e63e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10a      	bne.n	800e5f8 <prvProcessTimerOrBlockTask+0x3c>
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d806      	bhi.n	800e5f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5ea:	f7ff fa0b 	bl	800da04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5ee:	68f9      	ldr	r1, [r7, #12]
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff ff81 	bl	800e4f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5f6:	e024      	b.n	800e642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d008      	beq.n	800e610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5fe:	4b13      	ldr	r3, [pc, #76]	@ (800e64c <prvProcessTimerOrBlockTask+0x90>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <prvProcessTimerOrBlockTask+0x50>
 800e608:	2301      	movs	r3, #1
 800e60a:	e000      	b.n	800e60e <prvProcessTimerOrBlockTask+0x52>
 800e60c:	2300      	movs	r3, #0
 800e60e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e610:	4b0f      	ldr	r3, [pc, #60]	@ (800e650 <prvProcessTimerOrBlockTask+0x94>)
 800e612:	6818      	ldr	r0, [r3, #0]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	4619      	mov	r1, r3
 800e61e:	f7fe ff6b 	bl	800d4f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e622:	f7ff f9ef 	bl	800da04 <xTaskResumeAll>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10a      	bne.n	800e642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e62c:	4b09      	ldr	r3, [pc, #36]	@ (800e654 <prvProcessTimerOrBlockTask+0x98>)
 800e62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e632:	601a      	str	r2, [r3, #0]
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	f3bf 8f6f 	isb	sy
}
 800e63c:	e001      	b.n	800e642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e63e:	f7ff f9e1 	bl	800da04 <xTaskResumeAll>
}
 800e642:	bf00      	nop
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	2400ed68 	.word	0x2400ed68
 800e650:	2400ed6c 	.word	0x2400ed6c
 800e654:	e000ed04 	.word	0xe000ed04

0800e658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e660:	4b0e      	ldr	r3, [pc, #56]	@ (800e69c <prvGetNextExpireTime+0x44>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <prvGetNextExpireTime+0x16>
 800e66a:	2201      	movs	r2, #1
 800e66c:	e000      	b.n	800e670 <prvGetNextExpireTime+0x18>
 800e66e:	2200      	movs	r2, #0
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d105      	bne.n	800e688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e67c:	4b07      	ldr	r3, [pc, #28]	@ (800e69c <prvGetNextExpireTime+0x44>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	e001      	b.n	800e68c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e688:	2300      	movs	r3, #0
 800e68a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e68c:	68fb      	ldr	r3, [r7, #12]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	2400ed64 	.word	0x2400ed64

0800e6a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6a8:	f7ff fa4a 	bl	800db40 <xTaskGetTickCount>
 800e6ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e6dc <prvSampleTimeNow+0x3c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d205      	bcs.n	800e6c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6b8:	f000 f93a 	bl	800e930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	e002      	b.n	800e6ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6ca:	4a04      	ldr	r2, [pc, #16]	@ (800e6dc <prvSampleTimeNow+0x3c>)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2400ed74 	.word	0x2400ed74

0800e6e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	429a      	cmp	r2, r3
 800e704:	d812      	bhi.n	800e72c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	1ad2      	subs	r2, r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	429a      	cmp	r2, r3
 800e712:	d302      	bcc.n	800e71a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e714:	2301      	movs	r3, #1
 800e716:	617b      	str	r3, [r7, #20]
 800e718:	e01b      	b.n	800e752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e71a:	4b10      	ldr	r3, [pc, #64]	@ (800e75c <prvInsertTimerInActiveList+0x7c>)
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3304      	adds	r3, #4
 800e722:	4619      	mov	r1, r3
 800e724:	4610      	mov	r0, r2
 800e726:	f7fd ff6c 	bl	800c602 <vListInsert>
 800e72a:	e012      	b.n	800e752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d206      	bcs.n	800e742 <prvInsertTimerInActiveList+0x62>
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d302      	bcc.n	800e742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e73c:	2301      	movs	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	e007      	b.n	800e752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e742:	4b07      	ldr	r3, [pc, #28]	@ (800e760 <prvInsertTimerInActiveList+0x80>)
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3304      	adds	r3, #4
 800e74a:	4619      	mov	r1, r3
 800e74c:	4610      	mov	r0, r2
 800e74e:	f7fd ff58 	bl	800c602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e752:	697b      	ldr	r3, [r7, #20]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	2400ed68 	.word	0x2400ed68
 800e760:	2400ed64 	.word	0x2400ed64

0800e764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b08e      	sub	sp, #56	@ 0x38
 800e768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e76a:	e0ce      	b.n	800e90a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	da19      	bge.n	800e7a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e772:	1d3b      	adds	r3, r7, #4
 800e774:	3304      	adds	r3, #4
 800e776:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10b      	bne.n	800e796 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	61fb      	str	r3, [r7, #28]
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	e7fd      	b.n	800e792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e79c:	6850      	ldr	r0, [r2, #4]
 800e79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7a0:	6892      	ldr	r2, [r2, #8]
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f2c0 80ae 	blt.w	800e90a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b4:	695b      	ldr	r3, [r3, #20]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fd ff58 	bl	800c674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7c4:	463b      	mov	r3, r7
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7ff ff6a 	bl	800e6a0 <prvSampleTimeNow>
 800e7cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2b09      	cmp	r3, #9
 800e7d2:	f200 8097 	bhi.w	800e904 <prvProcessReceivedCommands+0x1a0>
 800e7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7dc <prvProcessReceivedCommands+0x78>)
 800e7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7dc:	0800e805 	.word	0x0800e805
 800e7e0:	0800e805 	.word	0x0800e805
 800e7e4:	0800e805 	.word	0x0800e805
 800e7e8:	0800e87b 	.word	0x0800e87b
 800e7ec:	0800e88f 	.word	0x0800e88f
 800e7f0:	0800e8db 	.word	0x0800e8db
 800e7f4:	0800e805 	.word	0x0800e805
 800e7f8:	0800e805 	.word	0x0800e805
 800e7fc:	0800e87b 	.word	0x0800e87b
 800e800:	0800e88f 	.word	0x0800e88f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e80a:	f043 0301 	orr.w	r3, r3, #1
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	18d1      	adds	r1, r2, r3
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e824:	f7ff ff5c 	bl	800e6e0 <prvInsertTimerInActiveList>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d06c      	beq.n	800e908 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e83c:	f003 0304 	and.w	r3, r3, #4
 800e840:	2b00      	cmp	r3, #0
 800e842:	d061      	beq.n	800e908 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	441a      	add	r2, r3
 800e84c:	2300      	movs	r3, #0
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	2300      	movs	r3, #0
 800e852:	2100      	movs	r1, #0
 800e854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e856:	f7ff fe01 	bl	800e45c <xTimerGenericCommand>
 800e85a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d152      	bne.n	800e908 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e866:	f383 8811 	msr	BASEPRI, r3
 800e86a:	f3bf 8f6f 	isb	sy
 800e86e:	f3bf 8f4f 	dsb	sy
 800e872:	61bb      	str	r3, [r7, #24]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e880:	f023 0301 	bic.w	r3, r3, #1
 800e884:	b2da      	uxtb	r2, r3
 800e886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e88c:	e03d      	b.n	800e90a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e894:	f043 0301 	orr.w	r3, r3, #1
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e89c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10b      	bne.n	800e8c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	617b      	str	r3, [r7, #20]
}
 800e8c0:	bf00      	nop
 800e8c2:	bf00      	nop
 800e8c4:	e7fd      	b.n	800e8c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c8:	699a      	ldr	r2, [r3, #24]
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	18d1      	adds	r1, r2, r3
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8d4:	f7ff ff04 	bl	800e6e0 <prvInsertTimerInActiveList>
					break;
 800e8d8:	e017      	b.n	800e90a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8e0:	f003 0302 	and.w	r3, r3, #2
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d103      	bne.n	800e8f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e8e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8ea:	f7fd fd19 	bl	800c320 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8ee:	e00c      	b.n	800e90a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8f6:	f023 0301 	bic.w	r3, r3, #1
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e902:	e002      	b.n	800e90a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e904:	bf00      	nop
 800e906:	e000      	b.n	800e90a <prvProcessReceivedCommands+0x1a6>
					break;
 800e908:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e90a:	4b08      	ldr	r3, [pc, #32]	@ (800e92c <prvProcessReceivedCommands+0x1c8>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	1d39      	adds	r1, r7, #4
 800e910:	2200      	movs	r2, #0
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe fbd4 	bl	800d0c0 <xQueueReceive>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f47f af26 	bne.w	800e76c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	3730      	adds	r7, #48	@ 0x30
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	2400ed6c 	.word	0x2400ed6c

0800e930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e936:	e049      	b.n	800e9cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e938:	4b2e      	ldr	r3, [pc, #184]	@ (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e942:	4b2c      	ldr	r3, [pc, #176]	@ (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3304      	adds	r3, #4
 800e950:	4618      	mov	r0, r3
 800e952:	f7fd fe8f 	bl	800c674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e964:	f003 0304 	and.w	r3, r3, #4
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d02f      	beq.n	800e9cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	4413      	add	r3, r2
 800e974:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e976:	68ba      	ldr	r2, [r7, #8]
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d90e      	bls.n	800e99c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e98a:	4b1a      	ldr	r3, [pc, #104]	@ (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3304      	adds	r3, #4
 800e992:	4619      	mov	r1, r3
 800e994:	4610      	mov	r0, r2
 800e996:	f7fd fe34 	bl	800c602 <vListInsert>
 800e99a:	e017      	b.n	800e9cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e99c:	2300      	movs	r3, #0
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff fd58 	bl	800e45c <xTimerGenericCommand>
 800e9ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10b      	bne.n	800e9cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	603b      	str	r3, [r7, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	bf00      	nop
 800e9ca:	e7fd      	b.n	800e9c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9cc:	4b09      	ldr	r3, [pc, #36]	@ (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1b0      	bne.n	800e938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9d6:	4b07      	ldr	r3, [pc, #28]	@ (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9dc:	4b06      	ldr	r3, [pc, #24]	@ (800e9f8 <prvSwitchTimerLists+0xc8>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a04      	ldr	r2, [pc, #16]	@ (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e9e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9e4:	4a04      	ldr	r2, [pc, #16]	@ (800e9f8 <prvSwitchTimerLists+0xc8>)
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	6013      	str	r3, [r2, #0]
}
 800e9ea:	bf00      	nop
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	2400ed64 	.word	0x2400ed64
 800e9f8:	2400ed68 	.word	0x2400ed68

0800e9fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea02:	f7fd ff91 	bl	800c928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea06:	4b15      	ldr	r3, [pc, #84]	@ (800ea5c <prvCheckForValidListAndQueue+0x60>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d120      	bne.n	800ea50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea0e:	4814      	ldr	r0, [pc, #80]	@ (800ea60 <prvCheckForValidListAndQueue+0x64>)
 800ea10:	f7fd fda6 	bl	800c560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea14:	4813      	ldr	r0, [pc, #76]	@ (800ea64 <prvCheckForValidListAndQueue+0x68>)
 800ea16:	f7fd fda3 	bl	800c560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea1a:	4b13      	ldr	r3, [pc, #76]	@ (800ea68 <prvCheckForValidListAndQueue+0x6c>)
 800ea1c:	4a10      	ldr	r2, [pc, #64]	@ (800ea60 <prvCheckForValidListAndQueue+0x64>)
 800ea1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea20:	4b12      	ldr	r3, [pc, #72]	@ (800ea6c <prvCheckForValidListAndQueue+0x70>)
 800ea22:	4a10      	ldr	r2, [pc, #64]	@ (800ea64 <prvCheckForValidListAndQueue+0x68>)
 800ea24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea26:	2300      	movs	r3, #0
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	4b11      	ldr	r3, [pc, #68]	@ (800ea70 <prvCheckForValidListAndQueue+0x74>)
 800ea2c:	4a11      	ldr	r2, [pc, #68]	@ (800ea74 <prvCheckForValidListAndQueue+0x78>)
 800ea2e:	2110      	movs	r1, #16
 800ea30:	200a      	movs	r0, #10
 800ea32:	f7fe f905 	bl	800cc40 <xQueueGenericCreateStatic>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4a08      	ldr	r2, [pc, #32]	@ (800ea5c <prvCheckForValidListAndQueue+0x60>)
 800ea3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea3c:	4b07      	ldr	r3, [pc, #28]	@ (800ea5c <prvCheckForValidListAndQueue+0x60>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d005      	beq.n	800ea50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea44:	4b05      	ldr	r3, [pc, #20]	@ (800ea5c <prvCheckForValidListAndQueue+0x60>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	490b      	ldr	r1, [pc, #44]	@ (800ea78 <prvCheckForValidListAndQueue+0x7c>)
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe fd2a 	bl	800d4a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea50:	f7fd ff9c 	bl	800c98c <vPortExitCritical>
}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	2400ed6c 	.word	0x2400ed6c
 800ea60:	2400ed3c 	.word	0x2400ed3c
 800ea64:	2400ed50 	.word	0x2400ed50
 800ea68:	2400ed64 	.word	0x2400ed64
 800ea6c:	2400ed68 	.word	0x2400ed68
 800ea70:	2400ee18 	.word	0x2400ee18
 800ea74:	2400ed78 	.word	0x2400ed78
 800ea78:	0801dd34 	.word	0x0801dd34

0800ea7c <micro_ros_string_utilities_init>:
 800ea7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea80:	b086      	sub	sp, #24
 800ea82:	460f      	mov	r7, r1
 800ea84:	4604      	mov	r4, r0
 800ea86:	a801      	add	r0, sp, #4
 800ea88:	f001 f978 	bl	800fd7c <rcutils_get_default_allocator>
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	f7f1 fc31 	bl	80002f4 <strlen>
 800ea92:	f100 0801 	add.w	r8, r0, #1
 800ea96:	9b01      	ldr	r3, [sp, #4]
 800ea98:	4605      	mov	r5, r0
 800ea9a:	9905      	ldr	r1, [sp, #20]
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	4798      	blx	r3
 800eaa0:	4606      	mov	r6, r0
 800eaa2:	4642      	mov	r2, r8
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	f00e f9e7 	bl	801ce78 <memset>
 800eaaa:	462a      	mov	r2, r5
 800eaac:	4639      	mov	r1, r7
 800eaae:	4630      	mov	r0, r6
 800eab0:	f00e faab 	bl	801d00a <memcpy>
 800eab4:	4620      	mov	r0, r4
 800eab6:	f8c4 8008 	str.w	r8, [r4, #8]
 800eaba:	e9c4 6500 	strd	r6, r5, [r4]
 800eabe:	b006      	add	sp, #24
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eac4 <rcl_get_zero_initialized_init_options>:
 800eac4:	2000      	movs	r0, #0
 800eac6:	4770      	bx	lr

0800eac8 <rcl_init_options_init>:
 800eac8:	b084      	sub	sp, #16
 800eaca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eacc:	b097      	sub	sp, #92	@ 0x5c
 800eace:	ae1d      	add	r6, sp, #116	@ 0x74
 800ead0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d058      	beq.n	800eb8a <rcl_init_options_init+0xc2>
 800ead8:	6803      	ldr	r3, [r0, #0]
 800eada:	4605      	mov	r5, r0
 800eadc:	b133      	cbz	r3, 800eaec <rcl_init_options_init+0x24>
 800eade:	2464      	movs	r4, #100	@ 0x64
 800eae0:	4620      	mov	r0, r4
 800eae2:	b017      	add	sp, #92	@ 0x5c
 800eae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eae8:	b004      	add	sp, #16
 800eaea:	4770      	bx	lr
 800eaec:	4630      	mov	r0, r6
 800eaee:	f001 f953 	bl	800fd98 <rcutils_allocator_is_valid>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d049      	beq.n	800eb8a <rcl_init_options_init+0xc2>
 800eaf6:	46b4      	mov	ip, r6
 800eaf8:	ac11      	add	r4, sp, #68	@ 0x44
 800eafa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eafe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb00:	f8dc 3000 	ldr.w	r3, [ip]
 800eb04:	2050      	movs	r0, #80	@ 0x50
 800eb06:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb0c:	4798      	blx	r3
 800eb0e:	4604      	mov	r4, r0
 800eb10:	6028      	str	r0, [r5, #0]
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d03b      	beq.n	800eb8e <rcl_init_options_init+0xc6>
 800eb16:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800eb1a:	4686      	mov	lr, r0
 800eb1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb24:	f8dc 3000 	ldr.w	r3, [ip]
 800eb28:	a802      	add	r0, sp, #8
 800eb2a:	f8ce 3000 	str.w	r3, [lr]
 800eb2e:	f001 f9bf 	bl	800feb0 <rmw_get_zero_initialized_init_options>
 800eb32:	f10d 0e08 	add.w	lr, sp, #8
 800eb36:	f104 0c18 	add.w	ip, r4, #24
 800eb3a:	682f      	ldr	r7, [r5, #0]
 800eb3c:	ac20      	add	r4, sp, #128	@ 0x80
 800eb3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb56:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eb5a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eb5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb62:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb66:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800eb6a:	f107 0018 	add.w	r0, r7, #24
 800eb6e:	f001 f9cd 	bl	800ff0c <rmw_init_options_init>
 800eb72:	4604      	mov	r4, r0
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d0b3      	beq.n	800eae0 <rcl_init_options_init+0x18>
 800eb78:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eb7a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eb7c:	6828      	ldr	r0, [r5, #0]
 800eb7e:	4798      	blx	r3
 800eb80:	4620      	mov	r0, r4
 800eb82:	f008 f9ff 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 800eb86:	4604      	mov	r4, r0
 800eb88:	e7aa      	b.n	800eae0 <rcl_init_options_init+0x18>
 800eb8a:	240b      	movs	r4, #11
 800eb8c:	e7a8      	b.n	800eae0 <rcl_init_options_init+0x18>
 800eb8e:	240a      	movs	r4, #10
 800eb90:	e7a6      	b.n	800eae0 <rcl_init_options_init+0x18>
 800eb92:	bf00      	nop

0800eb94 <rcl_init_options_fini>:
 800eb94:	b530      	push	{r4, r5, lr}
 800eb96:	b087      	sub	sp, #28
 800eb98:	b1f0      	cbz	r0, 800ebd8 <rcl_init_options_fini+0x44>
 800eb9a:	6803      	ldr	r3, [r0, #0]
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	b1db      	cbz	r3, 800ebd8 <rcl_init_options_fini+0x44>
 800eba0:	469c      	mov	ip, r3
 800eba2:	f10d 0e04 	add.w	lr, sp, #4
 800eba6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ebaa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ebae:	f8dc 3000 	ldr.w	r3, [ip]
 800ebb2:	a801      	add	r0, sp, #4
 800ebb4:	f8ce 3000 	str.w	r3, [lr]
 800ebb8:	f001 f8ee 	bl	800fd98 <rcutils_allocator_is_valid>
 800ebbc:	b160      	cbz	r0, 800ebd8 <rcl_init_options_fini+0x44>
 800ebbe:	6820      	ldr	r0, [r4, #0]
 800ebc0:	3018      	adds	r0, #24
 800ebc2:	f001 fa5d 	bl	8010080 <rmw_init_options_fini>
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	b950      	cbnz	r0, 800ebe0 <rcl_init_options_fini+0x4c>
 800ebca:	6820      	ldr	r0, [r4, #0]
 800ebcc:	9b02      	ldr	r3, [sp, #8]
 800ebce:	9905      	ldr	r1, [sp, #20]
 800ebd0:	4798      	blx	r3
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	b007      	add	sp, #28
 800ebd6:	bd30      	pop	{r4, r5, pc}
 800ebd8:	250b      	movs	r5, #11
 800ebda:	4628      	mov	r0, r5
 800ebdc:	b007      	add	sp, #28
 800ebde:	bd30      	pop	{r4, r5, pc}
 800ebe0:	f008 f9d0 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	e7f8      	b.n	800ebda <rcl_init_options_fini+0x46>

0800ebe8 <rcl_init_options_copy>:
 800ebe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebec:	b094      	sub	sp, #80	@ 0x50
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d05b      	beq.n	800ecaa <rcl_init_options_copy+0xc2>
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	6800      	ldr	r0, [r0, #0]
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d057      	beq.n	800ecaa <rcl_init_options_copy+0xc2>
 800ebfa:	460e      	mov	r6, r1
 800ebfc:	f001 f8cc 	bl	800fd98 <rcutils_allocator_is_valid>
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	d052      	beq.n	800ecaa <rcl_init_options_copy+0xc2>
 800ec04:	f080 0001 	eor.w	r0, r0, #1
 800ec08:	b2c0      	uxtb	r0, r0
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d14d      	bne.n	800ecaa <rcl_init_options_copy+0xc2>
 800ec0e:	6833      	ldr	r3, [r6, #0]
 800ec10:	b123      	cbz	r3, 800ec1c <rcl_init_options_copy+0x34>
 800ec12:	2464      	movs	r4, #100	@ 0x64
 800ec14:	4620      	mov	r0, r4
 800ec16:	b014      	add	sp, #80	@ 0x50
 800ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec1c:	6827      	ldr	r7, [r4, #0]
 800ec1e:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ec20:	46bc      	mov	ip, r7
 800ec22:	f8d7 8000 	ldr.w	r8, [r7]
 800ec26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec2c:	f8dc 3000 	ldr.w	r3, [ip]
 800ec30:	2050      	movs	r0, #80	@ 0x50
 800ec32:	4619      	mov	r1, r3
 800ec34:	602b      	str	r3, [r5, #0]
 800ec36:	47c0      	blx	r8
 800ec38:	4605      	mov	r5, r0
 800ec3a:	6030      	str	r0, [r6, #0]
 800ec3c:	b3d0      	cbz	r0, 800ecb4 <rcl_init_options_copy+0xcc>
 800ec3e:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ec42:	4686      	mov	lr, r0
 800ec44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec4c:	f8dc 3000 	ldr.w	r3, [ip]
 800ec50:	4668      	mov	r0, sp
 800ec52:	f8ce 3000 	str.w	r3, [lr]
 800ec56:	f001 f92b 	bl	800feb0 <rmw_get_zero_initialized_init_options>
 800ec5a:	46ee      	mov	lr, sp
 800ec5c:	f105 0c18 	add.w	ip, r5, #24
 800ec60:	6824      	ldr	r4, [r4, #0]
 800ec62:	6835      	ldr	r5, [r6, #0]
 800ec64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ec80:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ec84:	f104 0018 	add.w	r0, r4, #24
 800ec88:	f105 0118 	add.w	r1, r5, #24
 800ec8c:	f001 f9a6 	bl	800ffdc <rmw_init_options_copy>
 800ec90:	4604      	mov	r4, r0
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d0be      	beq.n	800ec14 <rcl_init_options_copy+0x2c>
 800ec96:	f001 f88d 	bl	800fdb4 <rcutils_get_error_string>
 800ec9a:	f001 f8a1 	bl	800fde0 <rcutils_reset_error>
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f7ff ff78 	bl	800eb94 <rcl_init_options_fini>
 800eca4:	b140      	cbz	r0, 800ecb8 <rcl_init_options_copy+0xd0>
 800eca6:	4604      	mov	r4, r0
 800eca8:	e7b4      	b.n	800ec14 <rcl_init_options_copy+0x2c>
 800ecaa:	240b      	movs	r4, #11
 800ecac:	4620      	mov	r0, r4
 800ecae:	b014      	add	sp, #80	@ 0x50
 800ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb4:	240a      	movs	r4, #10
 800ecb6:	e7ad      	b.n	800ec14 <rcl_init_options_copy+0x2c>
 800ecb8:	4620      	mov	r0, r4
 800ecba:	b014      	add	sp, #80	@ 0x50
 800ecbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc0:	f008 b960 	b.w	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>

0800ecc4 <rcl_init_options_set_domain_id>:
 800ecc4:	b120      	cbz	r0, 800ecd0 <rcl_init_options_set_domain_id+0xc>
 800ecc6:	6803      	ldr	r3, [r0, #0]
 800ecc8:	b113      	cbz	r3, 800ecd0 <rcl_init_options_set_domain_id+0xc>
 800ecca:	2000      	movs	r0, #0
 800eccc:	6259      	str	r1, [r3, #36]	@ 0x24
 800ecce:	4770      	bx	lr
 800ecd0:	200b      	movs	r0, #11
 800ecd2:	4770      	bx	lr

0800ecd4 <rcl_get_zero_initialized_publisher>:
 800ecd4:	4b01      	ldr	r3, [pc, #4]	@ (800ecdc <rcl_get_zero_initialized_publisher+0x8>)
 800ecd6:	6818      	ldr	r0, [r3, #0]
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	0801ddbc 	.word	0x0801ddbc

0800ece0 <rcl_publisher_init>:
 800ece0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece4:	b088      	sub	sp, #32
 800ece6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ece8:	2e00      	cmp	r6, #0
 800ecea:	d06b      	beq.n	800edc4 <rcl_publisher_init+0xe4>
 800ecec:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	4690      	mov	r8, r2
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	4699      	mov	r9, r3
 800ecfa:	f001 f84d 	bl	800fd98 <rcutils_allocator_is_valid>
 800ecfe:	f080 0401 	eor.w	r4, r0, #1
 800ed02:	b2e4      	uxtb	r4, r4
 800ed04:	2c00      	cmp	r4, #0
 800ed06:	d15d      	bne.n	800edc4 <rcl_publisher_init+0xe4>
 800ed08:	2d00      	cmp	r5, #0
 800ed0a:	d05b      	beq.n	800edc4 <rcl_publisher_init+0xe4>
 800ed0c:	682b      	ldr	r3, [r5, #0]
 800ed0e:	b123      	cbz	r3, 800ed1a <rcl_publisher_init+0x3a>
 800ed10:	2464      	movs	r4, #100	@ 0x64
 800ed12:	4620      	mov	r0, r4
 800ed14:	b008      	add	sp, #32
 800ed16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	f008 fc30 	bl	8017580 <rcl_node_is_valid>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d054      	beq.n	800edce <rcl_publisher_init+0xee>
 800ed24:	f1b8 0f00 	cmp.w	r8, #0
 800ed28:	d04c      	beq.n	800edc4 <rcl_publisher_init+0xe4>
 800ed2a:	fab9 f389 	clz	r3, r9
 800ed2e:	095b      	lsrs	r3, r3, #5
 800ed30:	f1b9 0f00 	cmp.w	r9, #0
 800ed34:	d046      	beq.n	800edc4 <rcl_publisher_init+0xe4>
 800ed36:	aa07      	add	r2, sp, #28
 800ed38:	9307      	str	r3, [sp, #28]
 800ed3a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ed3e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ed42:	9205      	str	r2, [sp, #20]
 800ed44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ed4c:	4649      	mov	r1, r9
 800ed4e:	4638      	mov	r0, r7
 800ed50:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ed54:	f008 fc6c 	bl	8017630 <rcl_node_resolve_name>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d14f      	bne.n	800edfc <rcl_publisher_init+0x11c>
 800ed5c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ed5e:	20c8      	movs	r0, #200	@ 0xc8
 800ed60:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ed62:	4798      	blx	r3
 800ed64:	6028      	str	r0, [r5, #0]
 800ed66:	2800      	cmp	r0, #0
 800ed68:	d050      	beq.n	800ee0c <rcl_publisher_init+0x12c>
 800ed6a:	4638      	mov	r0, r7
 800ed6c:	f008 fc2a 	bl	80175c4 <rcl_node_get_rmw_handle>
 800ed70:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ed74:	4641      	mov	r1, r8
 800ed76:	9a07      	ldr	r2, [sp, #28]
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	4633      	mov	r3, r6
 800ed7c:	682c      	ldr	r4, [r5, #0]
 800ed7e:	f001 fca5 	bl	80106cc <rmw_create_publisher>
 800ed82:	682b      	ldr	r3, [r5, #0]
 800ed84:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800ed88:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ed8c:	b370      	cbz	r0, 800edec <rcl_publisher_init+0x10c>
 800ed8e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ed92:	f001 fd7f 	bl	8010894 <rmw_publisher_get_actual_qos>
 800ed96:	682b      	ldr	r3, [r5, #0]
 800ed98:	4604      	mov	r4, r0
 800ed9a:	b9d0      	cbnz	r0, 800edd2 <rcl_publisher_init+0xf2>
 800ed9c:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800eda0:	4631      	mov	r1, r6
 800eda2:	4618      	mov	r0, r3
 800eda4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800eda8:	2270      	movs	r2, #112	@ 0x70
 800edaa:	f00e f92e 	bl	801d00a <memcpy>
 800edae:	683a      	ldr	r2, [r7, #0]
 800edb0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800edb4:	9807      	ldr	r0, [sp, #28]
 800edb6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800edb8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800edba:	4798      	blx	r3
 800edbc:	4620      	mov	r0, r4
 800edbe:	b008      	add	sp, #32
 800edc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc4:	240b      	movs	r4, #11
 800edc6:	4620      	mov	r0, r4
 800edc8:	b008      	add	sp, #32
 800edca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edce:	24c8      	movs	r4, #200	@ 0xc8
 800edd0:	e79f      	b.n	800ed12 <rcl_publisher_init+0x32>
 800edd2:	b1cb      	cbz	r3, 800ee08 <rcl_publisher_init+0x128>
 800edd4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800edd8:	b142      	cbz	r2, 800edec <rcl_publisher_init+0x10c>
 800edda:	4638      	mov	r0, r7
 800eddc:	f008 fbf2 	bl	80175c4 <rcl_node_get_rmw_handle>
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ede6:	f001 fd69 	bl	80108bc <rmw_destroy_publisher>
 800edea:	682b      	ldr	r3, [r5, #0]
 800edec:	4618      	mov	r0, r3
 800edee:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800edf0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800edf2:	2401      	movs	r4, #1
 800edf4:	4790      	blx	r2
 800edf6:	2300      	movs	r3, #0
 800edf8:	602b      	str	r3, [r5, #0]
 800edfa:	e7db      	b.n	800edb4 <rcl_publisher_init+0xd4>
 800edfc:	2867      	cmp	r0, #103	@ 0x67
 800edfe:	d007      	beq.n	800ee10 <rcl_publisher_init+0x130>
 800ee00:	2869      	cmp	r0, #105	@ 0x69
 800ee02:	d005      	beq.n	800ee10 <rcl_publisher_init+0x130>
 800ee04:	280a      	cmp	r0, #10
 800ee06:	d001      	beq.n	800ee0c <rcl_publisher_init+0x12c>
 800ee08:	2401      	movs	r4, #1
 800ee0a:	e7d3      	b.n	800edb4 <rcl_publisher_init+0xd4>
 800ee0c:	240a      	movs	r4, #10
 800ee0e:	e7d1      	b.n	800edb4 <rcl_publisher_init+0xd4>
 800ee10:	2467      	movs	r4, #103	@ 0x67
 800ee12:	e7cf      	b.n	800edb4 <rcl_publisher_init+0xd4>

0800ee14 <rcl_publisher_get_default_options>:
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	4d14      	ldr	r5, [pc, #80]	@ (800ee68 <rcl_publisher_get_default_options+0x54>)
 800ee18:	b088      	sub	sp, #32
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	2250      	movs	r2, #80	@ 0x50
 800ee1e:	4913      	ldr	r1, [pc, #76]	@ (800ee6c <rcl_publisher_get_default_options+0x58>)
 800ee20:	4628      	mov	r0, r5
 800ee22:	f00e f8f2 	bl	801d00a <memcpy>
 800ee26:	a802      	add	r0, sp, #8
 800ee28:	f000 ffa8 	bl	800fd7c <rcutils_get_default_allocator>
 800ee2c:	f10d 0c08 	add.w	ip, sp, #8
 800ee30:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ee34:	466e      	mov	r6, sp
 800ee36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ee42:	4630      	mov	r0, r6
 800ee44:	f8ce 3000 	str.w	r3, [lr]
 800ee48:	f001 f842 	bl	800fed0 <rmw_get_default_publisher_options>
 800ee4c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ee50:	2270      	movs	r2, #112	@ 0x70
 800ee52:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ee56:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f00e f8d4 	bl	801d00a <memcpy>
 800ee62:	4620      	mov	r0, r4
 800ee64:	b008      	add	sp, #32
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	2400ee68 	.word	0x2400ee68
 800ee6c:	0801ddc0 	.word	0x0801ddc0

0800ee70 <rcl_publish>:
 800ee70:	b1f8      	cbz	r0, 800eeb2 <rcl_publish+0x42>
 800ee72:	6803      	ldr	r3, [r0, #0]
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	4604      	mov	r4, r0
 800ee78:	b1b3      	cbz	r3, 800eea8 <rcl_publish+0x38>
 800ee7a:	4616      	mov	r6, r2
 800ee7c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ee80:	b192      	cbz	r2, 800eea8 <rcl_publish+0x38>
 800ee82:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ee86:	460d      	mov	r5, r1
 800ee88:	f008 f89a 	bl	8016fc0 <rcl_context_is_valid>
 800ee8c:	b160      	cbz	r0, 800eea8 <rcl_publish+0x38>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ee94:	b140      	cbz	r0, 800eea8 <rcl_publish+0x38>
 800ee96:	b155      	cbz	r5, 800eeae <rcl_publish+0x3e>
 800ee98:	4632      	mov	r2, r6
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	f001 fbb6 	bl	801060c <rmw_publish>
 800eea0:	3800      	subs	r0, #0
 800eea2:	bf18      	it	ne
 800eea4:	2001      	movne	r0, #1
 800eea6:	bd70      	pop	{r4, r5, r6, pc}
 800eea8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
 800eeae:	200b      	movs	r0, #11
 800eeb0:	bd70      	pop	{r4, r5, r6, pc}
 800eeb2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eeb6:	4770      	bx	lr

0800eeb8 <rcl_publisher_is_valid>:
 800eeb8:	b1a0      	cbz	r0, 800eee4 <rcl_publisher_is_valid+0x2c>
 800eeba:	6803      	ldr	r3, [r0, #0]
 800eebc:	b510      	push	{r4, lr}
 800eebe:	4604      	mov	r4, r0
 800eec0:	b173      	cbz	r3, 800eee0 <rcl_publisher_is_valid+0x28>
 800eec2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eec6:	b15a      	cbz	r2, 800eee0 <rcl_publisher_is_valid+0x28>
 800eec8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eecc:	f008 f878 	bl	8016fc0 <rcl_context_is_valid>
 800eed0:	b130      	cbz	r0, 800eee0 <rcl_publisher_is_valid+0x28>
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eed8:	3800      	subs	r0, #0
 800eeda:	bf18      	it	ne
 800eedc:	2001      	movne	r0, #1
 800eede:	bd10      	pop	{r4, pc}
 800eee0:	2000      	movs	r0, #0
 800eee2:	bd10      	pop	{r4, pc}
 800eee4:	2000      	movs	r0, #0
 800eee6:	4770      	bx	lr

0800eee8 <rcl_publisher_is_valid_except_context>:
 800eee8:	b130      	cbz	r0, 800eef8 <rcl_publisher_is_valid_except_context+0x10>
 800eeea:	6800      	ldr	r0, [r0, #0]
 800eeec:	b120      	cbz	r0, 800eef8 <rcl_publisher_is_valid_except_context+0x10>
 800eeee:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800eef2:	3800      	subs	r0, #0
 800eef4:	bf18      	it	ne
 800eef6:	2001      	movne	r0, #1
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop

0800eefc <_rclc_check_for_new_data>:
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d046      	beq.n	800ef8e <_rclc_check_for_new_data+0x92>
 800ef00:	4603      	mov	r3, r0
 800ef02:	b530      	push	{r4, r5, lr}
 800ef04:	7802      	ldrb	r2, [r0, #0]
 800ef06:	b085      	sub	sp, #20
 800ef08:	2a0a      	cmp	r2, #10
 800ef0a:	d842      	bhi.n	800ef92 <_rclc_check_for_new_data+0x96>
 800ef0c:	e8df f002 	tbb	[pc, r2]
 800ef10:	14181212 	.word	0x14181212
 800ef14:	06060614 	.word	0x06060614
 800ef18:	2e1a      	.short	0x2e1a
 800ef1a:	16          	.byte	0x16
 800ef1b:	00          	.byte	0x00
 800ef1c:	6a0a      	ldr	r2, [r1, #32]
 800ef1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ef20:	2000      	movs	r0, #0
 800ef22:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ef26:	1a12      	subs	r2, r2, r0
 800ef28:	bf18      	it	ne
 800ef2a:	2201      	movne	r2, #1
 800ef2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef30:	b005      	add	sp, #20
 800ef32:	bd30      	pop	{r4, r5, pc}
 800ef34:	680a      	ldr	r2, [r1, #0]
 800ef36:	e7f2      	b.n	800ef1e <_rclc_check_for_new_data+0x22>
 800ef38:	698a      	ldr	r2, [r1, #24]
 800ef3a:	e7f0      	b.n	800ef1e <_rclc_check_for_new_data+0x22>
 800ef3c:	688a      	ldr	r2, [r1, #8]
 800ef3e:	e7ee      	b.n	800ef1e <_rclc_check_for_new_data+0x22>
 800ef40:	690a      	ldr	r2, [r1, #16]
 800ef42:	e7ec      	b.n	800ef1e <_rclc_check_for_new_data+0x22>
 800ef44:	685c      	ldr	r4, [r3, #4]
 800ef46:	4608      	mov	r0, r1
 800ef48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef50:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800ef54:	f104 0110 	add.w	r1, r4, #16
 800ef58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ef5c:	9500      	str	r5, [sp, #0]
 800ef5e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ef62:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ef66:	f00a f9bf 	bl	80192e8 <rcl_action_client_wait_set_get_entities_ready>
 800ef6a:	e7e1      	b.n	800ef30 <_rclc_check_for_new_data+0x34>
 800ef6c:	685c      	ldr	r4, [r3, #4]
 800ef6e:	4608      	mov	r0, r1
 800ef70:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800ef74:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800ef78:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ef7c:	e9cd 2100 	strd	r2, r1, [sp]
 800ef80:	f104 0220 	add.w	r2, r4, #32
 800ef84:	f104 0110 	add.w	r1, r4, #16
 800ef88:	f00a fbc8 	bl	801971c <rcl_action_server_wait_set_get_entities_ready>
 800ef8c:	e7d0      	b.n	800ef30 <_rclc_check_for_new_data+0x34>
 800ef8e:	200b      	movs	r0, #11
 800ef90:	4770      	bx	lr
 800ef92:	2001      	movs	r0, #1
 800ef94:	e7cc      	b.n	800ef30 <_rclc_check_for_new_data+0x34>
 800ef96:	bf00      	nop

0800ef98 <_rclc_take_new_data>:
 800ef98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef9a:	b09b      	sub	sp, #108	@ 0x6c
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	f000 8088 	beq.w	800f0b2 <_rclc_take_new_data+0x11a>
 800efa2:	7803      	ldrb	r3, [r0, #0]
 800efa4:	4604      	mov	r4, r0
 800efa6:	2b0a      	cmp	r3, #10
 800efa8:	f200 8167 	bhi.w	800f27a <_rclc_take_new_data+0x2e2>
 800efac:	e8df f003 	tbb	[pc, r3]
 800efb0:	44152d2d 	.word	0x44152d2d
 800efb4:	19191944 	.word	0x19191944
 800efb8:	065a      	.short	0x065a
 800efba:	15          	.byte	0x15
 800efbb:	00          	.byte	0x00
 800efbc:	6840      	ldr	r0, [r0, #4]
 800efbe:	f890 3020 	ldrb.w	r3, [r0, #32]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f040 80b2 	bne.w	800f12c <_rclc_take_new_data+0x194>
 800efc8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f040 80e4 	bne.w	800f19a <_rclc_take_new_data+0x202>
 800efd2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d16f      	bne.n	800f0ba <_rclc_take_new_data+0x122>
 800efda:	2500      	movs	r5, #0
 800efdc:	4628      	mov	r0, r5
 800efde:	b01b      	add	sp, #108	@ 0x6c
 800efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efe2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800efe4:	6a0b      	ldr	r3, [r1, #32]
 800efe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d0f5      	beq.n	800efda <_rclc_take_new_data+0x42>
 800efee:	6882      	ldr	r2, [r0, #8]
 800eff0:	f100 0110 	add.w	r1, r0, #16
 800eff4:	6840      	ldr	r0, [r0, #4]
 800eff6:	f008 fcf5 	bl	80179e4 <rcl_take_request>
 800effa:	4605      	mov	r5, r0
 800effc:	2800      	cmp	r0, #0
 800effe:	d0ec      	beq.n	800efda <_rclc_take_new_data+0x42>
 800f000:	f240 2359 	movw	r3, #601	@ 0x259
 800f004:	4298      	cmp	r0, r3
 800f006:	d013      	beq.n	800f030 <_rclc_take_new_data+0x98>
 800f008:	e029      	b.n	800f05e <_rclc_take_new_data+0xc6>
 800f00a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f00c:	680b      	ldr	r3, [r1, #0]
 800f00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d0e1      	beq.n	800efda <_rclc_take_new_data+0x42>
 800f016:	2300      	movs	r3, #0
 800f018:	aa0a      	add	r2, sp, #40	@ 0x28
 800f01a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f01e:	f008 fd43 	bl	8017aa8 <rcl_take>
 800f022:	4605      	mov	r5, r0
 800f024:	2800      	cmp	r0, #0
 800f026:	d0d9      	beq.n	800efdc <_rclc_take_new_data+0x44>
 800f028:	f240 1391 	movw	r3, #401	@ 0x191
 800f02c:	4298      	cmp	r0, r3
 800f02e:	d116      	bne.n	800f05e <_rclc_take_new_data+0xc6>
 800f030:	2300      	movs	r3, #0
 800f032:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f036:	e7d1      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f038:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f03a:	698b      	ldr	r3, [r1, #24]
 800f03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d0ca      	beq.n	800efda <_rclc_take_new_data+0x42>
 800f044:	6882      	ldr	r2, [r0, #8]
 800f046:	f100 0110 	add.w	r1, r0, #16
 800f04a:	6840      	ldr	r0, [r0, #4]
 800f04c:	f007 ff48 	bl	8016ee0 <rcl_take_response>
 800f050:	4605      	mov	r5, r0
 800f052:	2800      	cmp	r0, #0
 800f054:	d0c1      	beq.n	800efda <_rclc_take_new_data+0x42>
 800f056:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f05a:	4298      	cmp	r0, r3
 800f05c:	d0be      	beq.n	800efdc <_rclc_take_new_data+0x44>
 800f05e:	f000 febf 	bl	800fde0 <rcutils_reset_error>
 800f062:	e7bb      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f064:	6840      	ldr	r0, [r0, #4]
 800f066:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d17d      	bne.n	800f16a <_rclc_take_new_data+0x1d2>
 800f06e:	69c3      	ldr	r3, [r0, #28]
 800f070:	b11b      	cbz	r3, 800f07a <_rclc_take_new_data+0xe2>
 800f072:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f076:	2b00      	cmp	r3, #0
 800f078:	d144      	bne.n	800f104 <_rclc_take_new_data+0x16c>
 800f07a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f040 80ac 	bne.w	800f1dc <_rclc_take_new_data+0x244>
 800f084:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d0a6      	beq.n	800efda <_rclc_take_new_data+0x42>
 800f08c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f08e:	a90a      	add	r1, sp, #40	@ 0x28
 800f090:	3010      	adds	r0, #16
 800f092:	f00a f801 	bl	8019098 <rcl_action_take_result_response>
 800f096:	4605      	mov	r5, r0
 800f098:	2800      	cmp	r0, #0
 800f09a:	d1e0      	bne.n	800f05e <_rclc_take_new_data+0xc6>
 800f09c:	6860      	ldr	r0, [r4, #4]
 800f09e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0a2:	f00a fc6b 	bl	801997c <rclc_action_find_handle_by_result_request_sequence_number>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d098      	beq.n	800efdc <_rclc_take_new_data+0x44>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f0b0:	e794      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f0b2:	250b      	movs	r5, #11
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	b01b      	add	sp, #108	@ 0x6c
 800f0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ba:	ae04      	add	r6, sp, #16
 800f0bc:	3010      	adds	r0, #16
 800f0be:	aa0a      	add	r2, sp, #40	@ 0x28
 800f0c0:	4631      	mov	r1, r6
 800f0c2:	f00a fa5f 	bl	8019584 <rcl_action_take_cancel_request>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d1c8      	bne.n	800f05e <_rclc_take_new_data+0xc6>
 800f0cc:	a90a      	add	r1, sp, #40	@ 0x28
 800f0ce:	6860      	ldr	r0, [r4, #4]
 800f0d0:	f00a fc14 	bl	80198fc <rclc_action_find_goal_handle_by_uuid>
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	f000 80bb 	beq.w	800f252 <_rclc_take_new_data+0x2ba>
 800f0dc:	2101      	movs	r1, #1
 800f0de:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f0e2:	f00a fb95 	bl	8019810 <rcl_action_transition_goal_state>
 800f0e6:	2803      	cmp	r0, #3
 800f0e8:	4684      	mov	ip, r0
 800f0ea:	f040 80a7 	bne.w	800f23c <_rclc_take_new_data+0x2a4>
 800f0ee:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f0f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f0f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f0fa:	e884 0003 	stmia.w	r4, {r0, r1}
 800f0fe:	f887 c008 	strb.w	ip, [r7, #8]
 800f102:	e76b      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f104:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f106:	3010      	adds	r0, #16
 800f108:	f00a f846 	bl	8019198 <rcl_action_take_feedback>
 800f10c:	4605      	mov	r5, r0
 800f10e:	2800      	cmp	r0, #0
 800f110:	d1a5      	bne.n	800f05e <_rclc_take_new_data+0xc6>
 800f112:	6860      	ldr	r0, [r4, #4]
 800f114:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f116:	f00a fbf1 	bl	80198fc <rclc_action_find_goal_handle_by_uuid>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2800      	cmp	r0, #0
 800f11e:	f000 80a3 	beq.w	800f268 <_rclc_take_new_data+0x2d0>
 800f122:	2201      	movs	r2, #1
 800f124:	6860      	ldr	r0, [r4, #4]
 800f126:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f12a:	e7a6      	b.n	800f07a <_rclc_take_new_data+0xe2>
 800f12c:	f00a fbc0 	bl	80198b0 <rclc_action_take_goal_handle>
 800f130:	4606      	mov	r6, r0
 800f132:	6860      	ldr	r0, [r4, #4]
 800f134:	2e00      	cmp	r6, #0
 800f136:	f43f af47 	beq.w	800efc8 <_rclc_take_new_data+0x30>
 800f13a:	6070      	str	r0, [r6, #4]
 800f13c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800f140:	69f2      	ldr	r2, [r6, #28]
 800f142:	3010      	adds	r0, #16
 800f144:	f00a f966 	bl	8019414 <rcl_action_take_goal_request>
 800f148:	4605      	mov	r5, r0
 800f14a:	2800      	cmp	r0, #0
 800f14c:	f040 808e 	bne.w	800f26c <_rclc_take_new_data+0x2d4>
 800f150:	69f7      	ldr	r7, [r6, #28]
 800f152:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f154:	7235      	strb	r5, [r6, #8]
 800f156:	f8c6 0009 	str.w	r0, [r6, #9]
 800f15a:	f8c6 100d 	str.w	r1, [r6, #13]
 800f15e:	6860      	ldr	r0, [r4, #4]
 800f160:	f8c6 2011 	str.w	r2, [r6, #17]
 800f164:	f8c6 3015 	str.w	r3, [r6, #21]
 800f168:	e72e      	b.n	800efc8 <_rclc_take_new_data+0x30>
 800f16a:	aa04      	add	r2, sp, #16
 800f16c:	a90a      	add	r1, sp, #40	@ 0x28
 800f16e:	3010      	adds	r0, #16
 800f170:	f009 ff1a 	bl	8018fa8 <rcl_action_take_goal_response>
 800f174:	4605      	mov	r5, r0
 800f176:	2800      	cmp	r0, #0
 800f178:	f47f af71 	bne.w	800f05e <_rclc_take_new_data+0xc6>
 800f17c:	6860      	ldr	r0, [r4, #4]
 800f17e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f182:	f00a fbe9 	bl	8019958 <rclc_action_find_handle_by_goal_request_sequence_number>
 800f186:	b130      	cbz	r0, 800f196 <_rclc_take_new_data+0x1fe>
 800f188:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f18c:	2201      	movs	r2, #1
 800f18e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f192:	f880 2020 	strb.w	r2, [r0, #32]
 800f196:	6860      	ldr	r0, [r4, #4]
 800f198:	e769      	b.n	800f06e <_rclc_take_new_data+0xd6>
 800f19a:	3010      	adds	r0, #16
 800f19c:	aa04      	add	r2, sp, #16
 800f19e:	a90a      	add	r1, sp, #40	@ 0x28
 800f1a0:	f00a f9b0 	bl	8019504 <rcl_action_take_result_request>
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	f47f af59 	bne.w	800f05e <_rclc_take_new_data+0xc6>
 800f1ac:	a904      	add	r1, sp, #16
 800f1ae:	6860      	ldr	r0, [r4, #4]
 800f1b0:	f00a fba4 	bl	80198fc <rclc_action_find_goal_handle_by_uuid>
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	b160      	cbz	r0, 800f1d2 <_rclc_take_new_data+0x23a>
 800f1b8:	ad0a      	add	r5, sp, #40	@ 0x28
 800f1ba:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800f1be:	f04f 0c02 	mov.w	ip, #2
 800f1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1ca:	e886 0003 	stmia.w	r6, {r0, r1}
 800f1ce:	f887 c008 	strb.w	ip, [r7, #8]
 800f1d2:	6860      	ldr	r0, [r4, #4]
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800f1da:	e6fa      	b.n	800efd2 <_rclc_take_new_data+0x3a>
 800f1dc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800f1e0:	a90a      	add	r1, sp, #40	@ 0x28
 800f1e2:	3010      	adds	r0, #16
 800f1e4:	f009 ff98 	bl	8019118 <rcl_action_take_cancel_response>
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	f47f af37 	bne.w	800f05e <_rclc_take_new_data+0xc6>
 800f1f0:	6860      	ldr	r0, [r4, #4]
 800f1f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f1f6:	f00a fbd3 	bl	80199a0 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	6860      	ldr	r0, [r4, #4]
 800f1fe:	2e00      	cmp	r6, #0
 800f200:	f43f af40 	beq.w	800f084 <_rclc_take_new_data+0xec>
 800f204:	2701      	movs	r7, #1
 800f206:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f208:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f43f af3a 	beq.w	800f084 <_rclc_take_new_data+0xec>
 800f210:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f212:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800f216:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f21a:	f00a fb6f 	bl	80198fc <rclc_action_find_goal_handle_by_uuid>
 800f21e:	b138      	cbz	r0, 800f230 <_rclc_take_new_data+0x298>
 800f220:	6860      	ldr	r0, [r4, #4]
 800f222:	3501      	adds	r5, #1
 800f224:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800f228:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f22a:	42ab      	cmp	r3, r5
 800f22c:	d8f0      	bhi.n	800f210 <_rclc_take_new_data+0x278>
 800f22e:	e729      	b.n	800f084 <_rclc_take_new_data+0xec>
 800f230:	6860      	ldr	r0, [r4, #4]
 800f232:	3501      	adds	r5, #1
 800f234:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f236:	42ab      	cmp	r3, r5
 800f238:	d8ea      	bhi.n	800f210 <_rclc_take_new_data+0x278>
 800f23a:	e723      	b.n	800f084 <_rclc_take_new_data+0xec>
 800f23c:	ab06      	add	r3, sp, #24
 800f23e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f240:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f244:	2103      	movs	r1, #3
 800f246:	6860      	ldr	r0, [r4, #4]
 800f248:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f24c:	f00a fc1c 	bl	8019a88 <rclc_action_server_goal_cancel_reject>
 800f250:	e6c4      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f252:	ab06      	add	r3, sp, #24
 800f254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f256:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f25a:	2102      	movs	r1, #2
 800f25c:	6860      	ldr	r0, [r4, #4]
 800f25e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f262:	f00a fc11 	bl	8019a88 <rclc_action_server_goal_cancel_reject>
 800f266:	e6b9      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f268:	6860      	ldr	r0, [r4, #4]
 800f26a:	e706      	b.n	800f07a <_rclc_take_new_data+0xe2>
 800f26c:	4631      	mov	r1, r6
 800f26e:	6860      	ldr	r0, [r4, #4]
 800f270:	f00a fb2e 	bl	80198d0 <rclc_action_remove_used_goal_handle>
 800f274:	f000 fdb4 	bl	800fde0 <rcutils_reset_error>
 800f278:	e6b0      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f27a:	2501      	movs	r5, #1
 800f27c:	e6ae      	b.n	800efdc <_rclc_take_new_data+0x44>
 800f27e:	bf00      	nop

0800f280 <_rclc_execute.part.0>:
 800f280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f282:	7803      	ldrb	r3, [r0, #0]
 800f284:	b085      	sub	sp, #20
 800f286:	4604      	mov	r4, r0
 800f288:	2b0a      	cmp	r3, #10
 800f28a:	f200 8139 	bhi.w	800f500 <_rclc_execute.part.0+0x280>
 800f28e:	e8df f003 	tbb	[pc, r3]
 800f292:	4268      	.short	0x4268
 800f294:	06a75b4d 	.word	0x06a75b4d
 800f298:	721d0606 	.word	0x721d0606
 800f29c:	62          	.byte	0x62
 800f29d:	00          	.byte	0x00
 800f29e:	2b06      	cmp	r3, #6
 800f2a0:	f000 8126 	beq.w	800f4f0 <_rclc_execute.part.0+0x270>
 800f2a4:	2b07      	cmp	r3, #7
 800f2a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f2a8:	f040 811c 	bne.w	800f4e4 <_rclc_execute.part.0+0x264>
 800f2ac:	f104 0510 	add.w	r5, r4, #16
 800f2b0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f2b4:	6880      	ldr	r0, [r0, #8]
 800f2b6:	4798      	blx	r3
 800f2b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	6860      	ldr	r0, [r4, #4]
 800f2be:	f008 fbd1 	bl	8017a64 <rcl_send_response>
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	b378      	cbz	r0, 800f326 <_rclc_execute.part.0+0xa6>
 800f2c6:	f000 fd8b 	bl	800fde0 <rcutils_reset_error>
 800f2ca:	e02c      	b.n	800f326 <_rclc_execute.part.0+0xa6>
 800f2cc:	6840      	ldr	r0, [r0, #4]
 800f2ce:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f000 808e 	beq.w	800f3f4 <_rclc_execute.part.0+0x174>
 800f2d8:	2600      	movs	r6, #0
 800f2da:	2701      	movs	r7, #1
 800f2dc:	e004      	b.n	800f2e8 <_rclc_execute.part.0+0x68>
 800f2de:	f00a fac1 	bl	8019864 <rclc_action_send_result_request>
 800f2e2:	b998      	cbnz	r0, 800f30c <_rclc_execute.part.0+0x8c>
 800f2e4:	722f      	strb	r7, [r5, #8]
 800f2e6:	6860      	ldr	r0, [r4, #4]
 800f2e8:	f00a fb6c 	bl	80199c4 <rclc_action_find_first_handle_with_goal_response>
 800f2ec:	4605      	mov	r5, r0
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d07f      	beq.n	800f3f2 <_rclc_execute.part.0+0x172>
 800f2f2:	6863      	ldr	r3, [r4, #4]
 800f2f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f2fc:	f885 6020 	strb.w	r6, [r5, #32]
 800f300:	4798      	blx	r3
 800f302:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f306:	4628      	mov	r0, r5
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1e8      	bne.n	800f2de <_rclc_execute.part.0+0x5e>
 800f30c:	6860      	ldr	r0, [r4, #4]
 800f30e:	4629      	mov	r1, r5
 800f310:	f00a fade 	bl	80198d0 <rclc_action_remove_used_goal_handle>
 800f314:	e7e7      	b.n	800f2e6 <_rclc_execute.part.0+0x66>
 800f316:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f31a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800f31e:	b100      	cbz	r0, 800f322 <_rclc_execute.part.0+0xa2>
 800f320:	68a0      	ldr	r0, [r4, #8]
 800f322:	2400      	movs	r4, #0
 800f324:	4798      	blx	r3
 800f326:	4620      	mov	r0, r4
 800f328:	b005      	add	sp, #20
 800f32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f32c:	6840      	ldr	r0, [r0, #4]
 800f32e:	f008 fef1 	bl	8018114 <rcl_timer_call>
 800f332:	f240 3321 	movw	r3, #801	@ 0x321
 800f336:	4604      	mov	r4, r0
 800f338:	4298      	cmp	r0, r3
 800f33a:	d001      	beq.n	800f340 <_rclc_execute.part.0+0xc0>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d1c2      	bne.n	800f2c6 <_rclc_execute.part.0+0x46>
 800f340:	2400      	movs	r4, #0
 800f342:	4620      	mov	r0, r4
 800f344:	b005      	add	sp, #20
 800f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f348:	2400      	movs	r4, #0
 800f34a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f34c:	6880      	ldr	r0, [r0, #8]
 800f34e:	4798      	blx	r3
 800f350:	4620      	mov	r0, r4
 800f352:	b005      	add	sp, #20
 800f354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f356:	2400      	movs	r4, #0
 800f358:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f35a:	4798      	blx	r3
 800f35c:	4620      	mov	r0, r4
 800f35e:	b005      	add	sp, #20
 800f360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f362:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f368:	b100      	cbz	r0, 800f36c <_rclc_execute.part.0+0xec>
 800f36a:	68a0      	ldr	r0, [r4, #8]
 800f36c:	2400      	movs	r4, #0
 800f36e:	4798      	blx	r3
 800f370:	4620      	mov	r0, r4
 800f372:	b005      	add	sp, #20
 800f374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f376:	6840      	ldr	r0, [r0, #4]
 800f378:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f37c:	bb3b      	cbnz	r3, 800f3ce <_rclc_execute.part.0+0x14e>
 800f37e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d07d      	beq.n	800f482 <_rclc_execute.part.0+0x202>
 800f386:	f640 0634 	movw	r6, #2100	@ 0x834
 800f38a:	2701      	movs	r7, #1
 800f38c:	e007      	b.n	800f39e <_rclc_execute.part.0+0x11e>
 800f38e:	4628      	mov	r0, r5
 800f390:	f00a fb30 	bl	80199f4 <rclc_action_server_response_goal_request>
 800f394:	4629      	mov	r1, r5
 800f396:	6860      	ldr	r0, [r4, #4]
 800f398:	f00a fa9a 	bl	80198d0 <rclc_action_remove_used_goal_handle>
 800f39c:	6860      	ldr	r0, [r4, #4]
 800f39e:	2100      	movs	r1, #0
 800f3a0:	f00a fac2 	bl	8019928 <rclc_action_find_first_handle_by_status>
 800f3a4:	4605      	mov	r5, r0
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d068      	beq.n	800f47c <_rclc_execute.part.0+0x1fc>
 800f3aa:	6863      	ldr	r3, [r4, #4]
 800f3ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	4798      	blx	r3
 800f3b2:	42b0      	cmp	r0, r6
 800f3b4:	f04f 0100 	mov.w	r1, #0
 800f3b8:	d1e9      	bne.n	800f38e <_rclc_execute.part.0+0x10e>
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	4628      	mov	r0, r5
 800f3be:	f00a fb19 	bl	80199f4 <rclc_action_server_response_goal_request>
 800f3c2:	722f      	strb	r7, [r5, #8]
 800f3c4:	e7ea      	b.n	800f39c <_rclc_execute.part.0+0x11c>
 800f3c6:	6848      	ldr	r0, [r1, #4]
 800f3c8:	f00a fa82 	bl	80198d0 <rclc_action_remove_used_goal_handle>
 800f3cc:	6860      	ldr	r0, [r4, #4]
 800f3ce:	f00a fab7 	bl	8019940 <rclc_action_find_first_terminated_handle>
 800f3d2:	4601      	mov	r1, r0
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d1f6      	bne.n	800f3c6 <_rclc_execute.part.0+0x146>
 800f3d8:	6860      	ldr	r0, [r4, #4]
 800f3da:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f3de:	e7ce      	b.n	800f37e <_rclc_execute.part.0+0xfe>
 800f3e0:	2400      	movs	r4, #0
 800f3e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f3e4:	f100 0110 	add.w	r1, r0, #16
 800f3e8:	6880      	ldr	r0, [r0, #8]
 800f3ea:	4798      	blx	r3
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	b005      	add	sp, #20
 800f3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f2:	6860      	ldr	r0, [r4, #4]
 800f3f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f3f8:	b18b      	cbz	r3, 800f41e <_rclc_execute.part.0+0x19e>
 800f3fa:	68c5      	ldr	r5, [r0, #12]
 800f3fc:	b32d      	cbz	r5, 800f44a <_rclc_execute.part.0+0x1ca>
 800f3fe:	2600      	movs	r6, #0
 800f400:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f404:	b143      	cbz	r3, 800f418 <_rclc_execute.part.0+0x198>
 800f406:	69c3      	ldr	r3, [r0, #28]
 800f408:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f40c:	b123      	cbz	r3, 800f418 <_rclc_execute.part.0+0x198>
 800f40e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f410:	4628      	mov	r0, r5
 800f412:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f414:	4798      	blx	r3
 800f416:	6860      	ldr	r0, [r4, #4]
 800f418:	682d      	ldr	r5, [r5, #0]
 800f41a:	2d00      	cmp	r5, #0
 800f41c:	d1f0      	bne.n	800f400 <_rclc_execute.part.0+0x180>
 800f41e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f422:	b193      	cbz	r3, 800f44a <_rclc_execute.part.0+0x1ca>
 800f424:	68c5      	ldr	r5, [r0, #12]
 800f426:	b185      	cbz	r5, 800f44a <_rclc_execute.part.0+0x1ca>
 800f428:	2600      	movs	r6, #0
 800f42a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f42e:	b14b      	cbz	r3, 800f444 <_rclc_execute.part.0+0x1c4>
 800f430:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f432:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f436:	b12b      	cbz	r3, 800f444 <_rclc_execute.part.0+0x1c4>
 800f438:	4628      	mov	r0, r5
 800f43a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f43e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f440:	4798      	blx	r3
 800f442:	6860      	ldr	r0, [r4, #4]
 800f444:	682d      	ldr	r5, [r5, #0]
 800f446:	2d00      	cmp	r5, #0
 800f448:	d1ef      	bne.n	800f42a <_rclc_execute.part.0+0x1aa>
 800f44a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f43f af76 	beq.w	800f340 <_rclc_execute.part.0+0xc0>
 800f454:	2700      	movs	r7, #0
 800f456:	e00b      	b.n	800f470 <_rclc_execute.part.0+0x1f0>
 800f458:	6863      	ldr	r3, [r4, #4]
 800f45a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f45c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f45e:	6a1e      	ldr	r6, [r3, #32]
 800f460:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f464:	47b0      	blx	r6
 800f466:	6860      	ldr	r0, [r4, #4]
 800f468:	4629      	mov	r1, r5
 800f46a:	f00a fa31 	bl	80198d0 <rclc_action_remove_used_goal_handle>
 800f46e:	6860      	ldr	r0, [r4, #4]
 800f470:	f00a fab4 	bl	80199dc <rclc_action_find_first_handle_with_result_response>
 800f474:	4605      	mov	r5, r0
 800f476:	2800      	cmp	r0, #0
 800f478:	d1ee      	bne.n	800f458 <_rclc_execute.part.0+0x1d8>
 800f47a:	e761      	b.n	800f340 <_rclc_execute.part.0+0xc0>
 800f47c:	6860      	ldr	r0, [r4, #4]
 800f47e:	f880 5020 	strb.w	r5, [r0, #32]
 800f482:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f486:	2b00      	cmp	r3, #0
 800f488:	f43f af5a 	beq.w	800f340 <_rclc_execute.part.0+0xc0>
 800f48c:	68c5      	ldr	r5, [r0, #12]
 800f48e:	b1b5      	cbz	r5, 800f4be <_rclc_execute.part.0+0x23e>
 800f490:	2602      	movs	r6, #2
 800f492:	e001      	b.n	800f498 <_rclc_execute.part.0+0x218>
 800f494:	682d      	ldr	r5, [r5, #0]
 800f496:	b195      	cbz	r5, 800f4be <_rclc_execute.part.0+0x23e>
 800f498:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f49c:	2b03      	cmp	r3, #3
 800f49e:	d1f9      	bne.n	800f494 <_rclc_execute.part.0+0x214>
 800f4a0:	69c3      	ldr	r3, [r0, #28]
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f4a6:	4798      	blx	r3
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f4b4:	b143      	cbz	r3, 800f4c8 <_rclc_execute.part.0+0x248>
 800f4b6:	f00a fabb 	bl	8019a30 <rclc_action_server_goal_cancel_accept>
 800f4ba:	6860      	ldr	r0, [r4, #4]
 800f4bc:	e7ea      	b.n	800f494 <_rclc_execute.part.0+0x214>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	461c      	mov	r4, r3
 800f4c2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f4c6:	e72e      	b.n	800f326 <_rclc_execute.part.0+0xa6>
 800f4c8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f4ca:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f4ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f4d2:	2101      	movs	r1, #1
 800f4d4:	6860      	ldr	r0, [r4, #4]
 800f4d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4da:	f00a fad5 	bl	8019a88 <rclc_action_server_goal_cancel_reject>
 800f4de:	722e      	strb	r6, [r5, #8]
 800f4e0:	6860      	ldr	r0, [r4, #4]
 800f4e2:	e7d7      	b.n	800f494 <_rclc_execute.part.0+0x214>
 800f4e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f4e6:	f104 0510 	add.w	r5, r4, #16
 800f4ea:	6880      	ldr	r0, [r0, #8]
 800f4ec:	4798      	blx	r3
 800f4ee:	e6e3      	b.n	800f2b8 <_rclc_execute.part.0+0x38>
 800f4f0:	f100 0510 	add.w	r5, r0, #16
 800f4f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f4f6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	6880      	ldr	r0, [r0, #8]
 800f4fc:	4798      	blx	r3
 800f4fe:	e6db      	b.n	800f2b8 <_rclc_execute.part.0+0x38>
 800f500:	2401      	movs	r4, #1
 800f502:	e710      	b.n	800f326 <_rclc_execute.part.0+0xa6>

0800f504 <rclc_executor_trigger_any>:
 800f504:	2800      	cmp	r0, #0
 800f506:	d03d      	beq.n	800f584 <rclc_executor_trigger_any+0x80>
 800f508:	2900      	cmp	r1, #0
 800f50a:	d03c      	beq.n	800f586 <rclc_executor_trigger_any+0x82>
 800f50c:	4603      	mov	r3, r0
 800f50e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f512:	2200      	movs	r2, #0
 800f514:	2800      	cmp	r0, #0
 800f516:	d035      	beq.n	800f584 <rclc_executor_trigger_any+0x80>
 800f518:	b430      	push	{r4, r5}
 800f51a:	f893 c000 	ldrb.w	ip, [r3]
 800f51e:	f1bc 0f08 	cmp.w	ip, #8
 800f522:	d11d      	bne.n	800f560 <rclc_executor_trigger_any+0x5c>
 800f524:	685c      	ldr	r4, [r3, #4]
 800f526:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f528:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f52c:	d105      	bne.n	800f53a <rclc_executor_trigger_any+0x36>
 800f52e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f532:	b910      	cbnz	r0, 800f53a <rclc_executor_trigger_any+0x36>
 800f534:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f538:	b128      	cbz	r0, 800f546 <rclc_executor_trigger_any+0x42>
 800f53a:	bc30      	pop	{r4, r5}
 800f53c:	4770      	bx	lr
 800f53e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f542:	2800      	cmp	r0, #0
 800f544:	d1f9      	bne.n	800f53a <rclc_executor_trigger_any+0x36>
 800f546:	3201      	adds	r2, #1
 800f548:	3340      	adds	r3, #64	@ 0x40
 800f54a:	4291      	cmp	r1, r2
 800f54c:	d017      	beq.n	800f57e <rclc_executor_trigger_any+0x7a>
 800f54e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f552:	2800      	cmp	r0, #0
 800f554:	d0f1      	beq.n	800f53a <rclc_executor_trigger_any+0x36>
 800f556:	f893 c000 	ldrb.w	ip, [r3]
 800f55a:	f1bc 0f08 	cmp.w	ip, #8
 800f55e:	d0e1      	beq.n	800f524 <rclc_executor_trigger_any+0x20>
 800f560:	f1bc 0f09 	cmp.w	ip, #9
 800f564:	d1eb      	bne.n	800f53e <rclc_executor_trigger_any+0x3a>
 800f566:	685c      	ldr	r4, [r3, #4]
 800f568:	6a25      	ldr	r5, [r4, #32]
 800f56a:	2d00      	cmp	r5, #0
 800f56c:	d1e5      	bne.n	800f53a <rclc_executor_trigger_any+0x36>
 800f56e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f572:	2800      	cmp	r0, #0
 800f574:	d1e1      	bne.n	800f53a <rclc_executor_trigger_any+0x36>
 800f576:	3201      	adds	r2, #1
 800f578:	3340      	adds	r3, #64	@ 0x40
 800f57a:	4291      	cmp	r1, r2
 800f57c:	d1e7      	bne.n	800f54e <rclc_executor_trigger_any+0x4a>
 800f57e:	2000      	movs	r0, #0
 800f580:	bc30      	pop	{r4, r5}
 800f582:	4770      	bx	lr
 800f584:	4770      	bx	lr
 800f586:	4608      	mov	r0, r1
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop

0800f58c <rclc_executor_get_zero_initialized_executor>:
 800f58c:	b510      	push	{r4, lr}
 800f58e:	4604      	mov	r4, r0
 800f590:	2288      	movs	r2, #136	@ 0x88
 800f592:	4902      	ldr	r1, [pc, #8]	@ (800f59c <rclc_executor_get_zero_initialized_executor+0x10>)
 800f594:	f00d fd39 	bl	801d00a <memcpy>
 800f598:	4620      	mov	r0, r4
 800f59a:	bd10      	pop	{r4, pc}
 800f59c:	0801de10 	.word	0x0801de10

0800f5a0 <rclc_executor_init>:
 800f5a0:	2900      	cmp	r1, #0
 800f5a2:	d06a      	beq.n	800f67a <rclc_executor_init+0xda>
 800f5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	b0b0      	sub	sp, #192	@ 0xc0
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d05c      	beq.n	800f66a <rclc_executor_init+0xca>
 800f5b0:	4616      	mov	r6, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	4688      	mov	r8, r1
 800f5b6:	461f      	mov	r7, r3
 800f5b8:	f000 fbee 	bl	800fd98 <rcutils_allocator_is_valid>
 800f5bc:	2e00      	cmp	r6, #0
 800f5be:	d054      	beq.n	800f66a <rclc_executor_init+0xca>
 800f5c0:	f080 0401 	eor.w	r4, r0, #1
 800f5c4:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800f5c8:	d14f      	bne.n	800f66a <rclc_executor_init+0xca>
 800f5ca:	2288      	movs	r2, #136	@ 0x88
 800f5cc:	4930      	ldr	r1, [pc, #192]	@ (800f690 <rclc_executor_init+0xf0>)
 800f5ce:	a80e      	add	r0, sp, #56	@ 0x38
 800f5d0:	f00d fd1b 	bl	801d00a <memcpy>
 800f5d4:	a90e      	add	r1, sp, #56	@ 0x38
 800f5d6:	2288      	movs	r2, #136	@ 0x88
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f00d fd16 	bl	801d00a <memcpy>
 800f5de:	4668      	mov	r0, sp
 800f5e0:	f8c5 8000 	str.w	r8, [r5]
 800f5e4:	60ae      	str	r6, [r5, #8]
 800f5e6:	f008 ff0b 	bl	8018400 <rcl_get_zero_initialized_wait_set>
 800f5ea:	46ec      	mov	ip, sp
 800f5ec:	f105 0e14 	add.w	lr, r5, #20
 800f5f0:	f8d7 8000 	ldr.w	r8, [r7]
 800f5f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f600:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f604:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f608:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800f688 <rclc_executor_init+0xe8>
 800f60c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f610:	f8dc 3000 	ldr.w	r3, [ip]
 800f614:	01b0      	lsls	r0, r6, #6
 800f616:	6939      	ldr	r1, [r7, #16]
 800f618:	f8ce 3000 	str.w	r3, [lr]
 800f61c:	612f      	str	r7, [r5, #16]
 800f61e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f622:	47c0      	blx	r8
 800f624:	6068      	str	r0, [r5, #4]
 800f626:	b908      	cbnz	r0, 800f62c <rclc_executor_init+0x8c>
 800f628:	e029      	b.n	800f67e <rclc_executor_init+0xde>
 800f62a:	6868      	ldr	r0, [r5, #4]
 800f62c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f630:	3401      	adds	r4, #1
 800f632:	4631      	mov	r1, r6
 800f634:	f000 fa74 	bl	800fb20 <rclc_executor_handle_init>
 800f638:	42a6      	cmp	r6, r4
 800f63a:	d8f6      	bhi.n	800f62a <rclc_executor_init+0x8a>
 800f63c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f640:	f000 fa62 	bl	800fb08 <rclc_executor_handle_counters_zero_init>
 800f644:	4a13      	ldr	r2, [pc, #76]	@ (800f694 <rclc_executor_init+0xf4>)
 800f646:	2300      	movs	r3, #0
 800f648:	6868      	ldr	r0, [r5, #4]
 800f64a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800f64e:	b168      	cbz	r0, 800f66c <rclc_executor_init+0xcc>
 800f650:	68ab      	ldr	r3, [r5, #8]
 800f652:	b173      	cbz	r3, 800f672 <rclc_executor_init+0xd2>
 800f654:	692a      	ldr	r2, [r5, #16]
 800f656:	fab2 f382 	clz	r3, r2
 800f65a:	095b      	lsrs	r3, r3, #5
 800f65c:	b14a      	cbz	r2, 800f672 <rclc_executor_init+0xd2>
 800f65e:	4618      	mov	r0, r3
 800f660:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800f664:	b030      	add	sp, #192	@ 0xc0
 800f666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f66a:	200b      	movs	r0, #11
 800f66c:	b030      	add	sp, #192	@ 0xc0
 800f66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f672:	2000      	movs	r0, #0
 800f674:	b030      	add	sp, #192	@ 0xc0
 800f676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67a:	200b      	movs	r0, #11
 800f67c:	4770      	bx	lr
 800f67e:	200a      	movs	r0, #10
 800f680:	e7f4      	b.n	800f66c <rclc_executor_init+0xcc>
 800f682:	bf00      	nop
 800f684:	f3af 8000 	nop.w
 800f688:	3b9aca00 	.word	0x3b9aca00
 800f68c:	00000000 	.word	0x00000000
 800f690:	0801de10 	.word	0x0801de10
 800f694:	0800f505 	.word	0x0800f505

0800f698 <rclc_executor_add_timer>:
 800f698:	b351      	cbz	r1, 800f6f0 <rclc_executor_add_timer+0x58>
 800f69a:	fab0 f280 	clz	r2, r0
 800f69e:	b570      	push	{r4, r5, r6, lr}
 800f6a0:	0952      	lsrs	r2, r2, #5
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	b1e0      	cbz	r0, 800f6e0 <rclc_executor_add_timer+0x48>
 800f6a6:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800f6aa:	4283      	cmp	r3, r0
 800f6ac:	d301      	bcc.n	800f6b2 <rclc_executor_add_timer+0x1a>
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	bd70      	pop	{r4, r5, r6, pc}
 800f6b2:	6860      	ldr	r0, [r4, #4]
 800f6b4:	019d      	lsls	r5, r3, #6
 800f6b6:	1c5e      	adds	r6, r3, #1
 800f6b8:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800f6bc:	6059      	str	r1, [r3, #4]
 800f6be:	2102      	movs	r1, #2
 800f6c0:	5341      	strh	r1, [r0, r5]
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	f104 0514 	add.w	r5, r4, #20
 800f6c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f6ca:	8719      	strh	r1, [r3, #56]	@ 0x38
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	60e6      	str	r6, [r4, #12]
 800f6d0:	f008 feaa 	bl	8018428 <rcl_wait_set_is_valid>
 800f6d4:	b930      	cbnz	r0, 800f6e4 <rclc_executor_add_timer+0x4c>
 800f6d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f6d8:	2000      	movs	r0, #0
 800f6da:	3301      	adds	r3, #1
 800f6dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	200b      	movs	r0, #11
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f008 fea5 	bl	8018434 <rcl_wait_set_fini>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d0f3      	beq.n	800f6d6 <rclc_executor_add_timer+0x3e>
 800f6ee:	bd70      	pop	{r4, r5, r6, pc}
 800f6f0:	200b      	movs	r0, #11
 800f6f2:	4770      	bx	lr

0800f6f4 <rclc_executor_prepare>:
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d044      	beq.n	800f782 <rclc_executor_prepare+0x8e>
 800f6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fa:	f100 0514 	add.w	r5, r0, #20
 800f6fe:	b09b      	sub	sp, #108	@ 0x6c
 800f700:	4604      	mov	r4, r0
 800f702:	4628      	mov	r0, r5
 800f704:	f008 fe90 	bl	8018428 <rcl_wait_set_is_valid>
 800f708:	b110      	cbz	r0, 800f710 <rclc_executor_prepare+0x1c>
 800f70a:	2000      	movs	r0, #0
 800f70c:	b01b      	add	sp, #108	@ 0x6c
 800f70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f710:	4628      	mov	r0, r5
 800f712:	f008 fe8f 	bl	8018434 <rcl_wait_set_fini>
 800f716:	2800      	cmp	r0, #0
 800f718:	d130      	bne.n	800f77c <rclc_executor_prepare+0x88>
 800f71a:	a80c      	add	r0, sp, #48	@ 0x30
 800f71c:	ae04      	add	r6, sp, #16
 800f71e:	f008 fe6f 	bl	8018400 <rcl_get_zero_initialized_wait_set>
 800f722:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f726:	46ae      	mov	lr, r5
 800f728:	6927      	ldr	r7, [r4, #16]
 800f72a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f72e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f736:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f73a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f73e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f742:	f8dc 3000 	ldr.w	r3, [ip]
 800f746:	f8ce 3000 	str.w	r3, [lr]
 800f74a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f74c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	4628      	mov	r0, r5
 800f752:	6822      	ldr	r2, [r4, #0]
 800f754:	6033      	str	r3, [r6, #0]
 800f756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f758:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f75a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f75e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f762:	e9cd 2100 	strd	r2, r1, [sp]
 800f766:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f768:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f76a:	f009 f963 	bl	8018a34 <rcl_wait_set_init>
 800f76e:	2800      	cmp	r0, #0
 800f770:	d0cc      	beq.n	800f70c <rclc_executor_prepare+0x18>
 800f772:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f774:	f000 fb34 	bl	800fde0 <rcutils_reset_error>
 800f778:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f77a:	e7c7      	b.n	800f70c <rclc_executor_prepare+0x18>
 800f77c:	f000 fb30 	bl	800fde0 <rcutils_reset_error>
 800f780:	e7cb      	b.n	800f71a <rclc_executor_prepare+0x26>
 800f782:	200b      	movs	r0, #11
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop

0800f788 <rclc_executor_spin_some.part.0>:
 800f788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	4605      	mov	r5, r0
 800f78e:	4691      	mov	r9, r2
 800f790:	4698      	mov	r8, r3
 800f792:	f7ff ffaf 	bl	800f6f4 <rclc_executor_prepare>
 800f796:	f105 0614 	add.w	r6, r5, #20
 800f79a:	4630      	mov	r0, r6
 800f79c:	f008 ff16 	bl	80185cc <rcl_wait_set_clear>
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	f040 80a8 	bne.w	800f8f8 <rclc_executor_spin_some.part.0+0x170>
 800f7a8:	68ab      	ldr	r3, [r5, #8]
 800f7aa:	b30b      	cbz	r3, 800f7f0 <rclc_executor_spin_some.part.0+0x68>
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	6869      	ldr	r1, [r5, #4]
 800f7b0:	01a2      	lsls	r2, r4, #6
 800f7b2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f7b6:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f7ba:	b1cb      	cbz	r3, 800f7f0 <rclc_executor_spin_some.part.0+0x68>
 800f7bc:	5c8b      	ldrb	r3, [r1, r2]
 800f7be:	2b0a      	cmp	r3, #10
 800f7c0:	f200 80de 	bhi.w	800f980 <rclc_executor_spin_some.part.0+0x1f8>
 800f7c4:	e8df f003 	tbb	[pc, r3]
 800f7c8:	8da99d9d 	.word	0x8da99d9d
 800f7cc:	0606068d 	.word	0x0606068d
 800f7d0:	c1ce      	.short	0xc1ce
 800f7d2:	b5          	.byte	0xb5
 800f7d3:	00          	.byte	0x00
 800f7d4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f7d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f7dc:	4630      	mov	r0, r6
 800f7de:	f009 fa45 	bl	8018c6c <rcl_wait_set_add_service>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	f040 8087 	bne.w	800f8f6 <rclc_executor_spin_some.part.0+0x16e>
 800f7e8:	3401      	adds	r4, #1
 800f7ea:	68ab      	ldr	r3, [r5, #8]
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	d3de      	bcc.n	800f7ae <rclc_executor_spin_some.part.0+0x26>
 800f7f0:	4643      	mov	r3, r8
 800f7f2:	464a      	mov	r2, r9
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f009 fa67 	bl	8018cc8 <rcl_wait>
 800f7fa:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f000 80c6 	beq.w	800f990 <rclc_executor_spin_some.part.0+0x208>
 800f804:	2b01      	cmp	r3, #1
 800f806:	f040 80bb 	bne.w	800f980 <rclc_executor_spin_some.part.0+0x1f8>
 800f80a:	68ab      	ldr	r3, [r5, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 8159 	beq.w	800fac4 <rclc_executor_spin_some.part.0+0x33c>
 800f812:	2400      	movs	r4, #0
 800f814:	f240 1991 	movw	r9, #401	@ 0x191
 800f818:	46a0      	mov	r8, r4
 800f81a:	e00a      	b.n	800f832 <rclc_executor_spin_some.part.0+0xaa>
 800f81c:	f7ff fb6e 	bl	800eefc <_rclc_check_for_new_data>
 800f820:	4604      	mov	r4, r0
 800f822:	b110      	cbz	r0, 800f82a <rclc_executor_spin_some.part.0+0xa2>
 800f824:	4548      	cmp	r0, r9
 800f826:	f040 80b1 	bne.w	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f82a:	68ab      	ldr	r3, [r5, #8]
 800f82c:	4598      	cmp	r8, r3
 800f82e:	f080 8126 	bcs.w	800fa7e <rclc_executor_spin_some.part.0+0x2f6>
 800f832:	686a      	ldr	r2, [r5, #4]
 800f834:	4631      	mov	r1, r6
 800f836:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f83a:	f108 0801 	add.w	r8, r8, #1
 800f83e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f842:	f1bc 0f00 	cmp.w	ip, #0
 800f846:	d1e9      	bne.n	800f81c <rclc_executor_spin_some.part.0+0x94>
 800f848:	4619      	mov	r1, r3
 800f84a:	4610      	mov	r0, r2
 800f84c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f850:	4798      	blx	r3
 800f852:	2800      	cmp	r0, #0
 800f854:	f000 809a 	beq.w	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f858:	68ab      	ldr	r3, [r5, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f000 8096 	beq.w	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f860:	f04f 0800 	mov.w	r8, #0
 800f864:	f240 1991 	movw	r9, #401	@ 0x191
 800f868:	e009      	b.n	800f87e <rclc_executor_spin_some.part.0+0xf6>
 800f86a:	f7ff fb95 	bl	800ef98 <_rclc_take_new_data>
 800f86e:	4604      	mov	r4, r0
 800f870:	b110      	cbz	r0, 800f878 <rclc_executor_spin_some.part.0+0xf0>
 800f872:	4548      	cmp	r0, r9
 800f874:	f040 808a 	bne.w	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f878:	68ab      	ldr	r3, [r5, #8]
 800f87a:	4598      	cmp	r8, r3
 800f87c:	d209      	bcs.n	800f892 <rclc_executor_spin_some.part.0+0x10a>
 800f87e:	6868      	ldr	r0, [r5, #4]
 800f880:	4631      	mov	r1, r6
 800f882:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f886:	f108 0801 	add.w	r8, r8, #1
 800f88a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f88e:	2a00      	cmp	r2, #0
 800f890:	d1eb      	bne.n	800f86a <rclc_executor_spin_some.part.0+0xe2>
 800f892:	2b00      	cmp	r3, #0
 800f894:	d07a      	beq.n	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f896:	2600      	movs	r6, #0
 800f898:	e00e      	b.n	800f8b8 <rclc_executor_spin_some.part.0+0x130>
 800f89a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f89e:	2a08      	cmp	r2, #8
 800f8a0:	f000 80fc 	beq.w	800fa9c <rclc_executor_spin_some.part.0+0x314>
 800f8a4:	2a09      	cmp	r2, #9
 800f8a6:	f000 80ee 	beq.w	800fa86 <rclc_executor_spin_some.part.0+0x2fe>
 800f8aa:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f8ae:	b98a      	cbnz	r2, 800f8d4 <rclc_executor_spin_some.part.0+0x14c>
 800f8b0:	3601      	adds	r6, #1
 800f8b2:	429e      	cmp	r6, r3
 800f8b4:	d267      	bcs.n	800f986 <rclc_executor_spin_some.part.0+0x1fe>
 800f8b6:	2400      	movs	r4, #0
 800f8b8:	686a      	ldr	r2, [r5, #4]
 800f8ba:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f8be:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f8c2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f8c6:	2900      	cmp	r1, #0
 800f8c8:	d060      	beq.n	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f8ca:	7841      	ldrb	r1, [r0, #1]
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	d0e4      	beq.n	800f89a <rclc_executor_spin_some.part.0+0x112>
 800f8d0:	2901      	cmp	r1, #1
 800f8d2:	d1ed      	bne.n	800f8b0 <rclc_executor_spin_some.part.0+0x128>
 800f8d4:	f7ff fcd4 	bl	800f280 <_rclc_execute.part.0>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f040 80b5 	bne.w	800fa48 <rclc_executor_spin_some.part.0+0x2c0>
 800f8de:	68ab      	ldr	r3, [r5, #8]
 800f8e0:	e7e6      	b.n	800f8b0 <rclc_executor_spin_some.part.0+0x128>
 800f8e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8e6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f009 f992 	bl	8018c14 <rcl_wait_set_add_client>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	f43f af79 	beq.w	800f7e8 <rclc_executor_spin_some.part.0+0x60>
 800f8f6:	4607      	mov	r7, r0
 800f8f8:	f000 fa72 	bl	800fde0 <rcutils_reset_error>
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f902:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f906:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f90a:	4630      	mov	r0, r6
 800f90c:	f008 fe32 	bl	8018574 <rcl_wait_set_add_subscription>
 800f910:	2800      	cmp	r0, #0
 800f912:	f43f af69 	beq.w	800f7e8 <rclc_executor_spin_some.part.0+0x60>
 800f916:	4607      	mov	r7, r0
 800f918:	e7ee      	b.n	800f8f8 <rclc_executor_spin_some.part.0+0x170>
 800f91a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f91e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f922:	4630      	mov	r0, r6
 800f924:	f009 f946 	bl	8018bb4 <rcl_wait_set_add_timer>
 800f928:	2800      	cmp	r0, #0
 800f92a:	f43f af5d 	beq.w	800f7e8 <rclc_executor_spin_some.part.0+0x60>
 800f92e:	4607      	mov	r7, r0
 800f930:	e7e2      	b.n	800f8f8 <rclc_executor_spin_some.part.0+0x170>
 800f932:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f936:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f93a:	4630      	mov	r0, r6
 800f93c:	f009 f90e 	bl	8018b5c <rcl_wait_set_add_guard_condition>
 800f940:	2800      	cmp	r0, #0
 800f942:	f43f af51 	beq.w	800f7e8 <rclc_executor_spin_some.part.0+0x60>
 800f946:	4607      	mov	r7, r0
 800f948:	e7d6      	b.n	800f8f8 <rclc_executor_spin_some.part.0+0x170>
 800f94a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f94e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f952:	4630      	mov	r0, r6
 800f954:	3110      	adds	r1, #16
 800f956:	f009 fe8d 	bl	8019674 <rcl_action_wait_set_add_action_server>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	f43f af44 	beq.w	800f7e8 <rclc_executor_spin_some.part.0+0x60>
 800f960:	4607      	mov	r7, r0
 800f962:	e7c9      	b.n	800f8f8 <rclc_executor_spin_some.part.0+0x170>
 800f964:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f968:	2300      	movs	r3, #0
 800f96a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f96e:	4630      	mov	r0, r6
 800f970:	3110      	adds	r1, #16
 800f972:	f009 fc55 	bl	8019220 <rcl_action_wait_set_add_action_client>
 800f976:	2800      	cmp	r0, #0
 800f978:	f43f af36 	beq.w	800f7e8 <rclc_executor_spin_some.part.0+0x60>
 800f97c:	4607      	mov	r7, r0
 800f97e:	e7bb      	b.n	800f8f8 <rclc_executor_spin_some.part.0+0x170>
 800f980:	2701      	movs	r7, #1
 800f982:	f000 fa2d 	bl	800fde0 <rcutils_reset_error>
 800f986:	4638      	mov	r0, r7
 800f988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	4627      	mov	r7, r4
 800f98e:	e7fa      	b.n	800f986 <rclc_executor_spin_some.part.0+0x1fe>
 800f990:	68ab      	ldr	r3, [r5, #8]
 800f992:	2b00      	cmp	r3, #0
 800f994:	f000 8093 	beq.w	800fabe <rclc_executor_spin_some.part.0+0x336>
 800f998:	2400      	movs	r4, #0
 800f99a:	f240 1991 	movw	r9, #401	@ 0x191
 800f99e:	46a0      	mov	r8, r4
 800f9a0:	e008      	b.n	800f9b4 <rclc_executor_spin_some.part.0+0x22c>
 800f9a2:	f7ff faab 	bl	800eefc <_rclc_check_for_new_data>
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	b108      	cbz	r0, 800f9ae <rclc_executor_spin_some.part.0+0x226>
 800f9aa:	4548      	cmp	r0, r9
 800f9ac:	d1ee      	bne.n	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f9ae:	68ab      	ldr	r3, [r5, #8]
 800f9b0:	4598      	cmp	r8, r3
 800f9b2:	d266      	bcs.n	800fa82 <rclc_executor_spin_some.part.0+0x2fa>
 800f9b4:	686a      	ldr	r2, [r5, #4]
 800f9b6:	4631      	mov	r1, r6
 800f9b8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f9bc:	f108 0801 	add.w	r8, r8, #1
 800f9c0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f9c4:	f1bc 0f00 	cmp.w	ip, #0
 800f9c8:	d1eb      	bne.n	800f9a2 <rclc_executor_spin_some.part.0+0x21a>
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f9d2:	4798      	blx	r3
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d0d9      	beq.n	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f9d8:	68ab      	ldr	r3, [r5, #8]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d0d6      	beq.n	800f98c <rclc_executor_spin_some.part.0+0x204>
 800f9de:	f04f 0a00 	mov.w	sl, #0
 800f9e2:	f240 1891 	movw	r8, #401	@ 0x191
 800f9e6:	f240 2959 	movw	r9, #601	@ 0x259
 800f9ea:	e00e      	b.n	800fa0a <rclc_executor_spin_some.part.0+0x282>
 800f9ec:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f9f0:	2b08      	cmp	r3, #8
 800f9f2:	d034      	beq.n	800fa5e <rclc_executor_spin_some.part.0+0x2d6>
 800f9f4:	2b09      	cmp	r3, #9
 800f9f6:	d029      	beq.n	800fa4c <rclc_executor_spin_some.part.0+0x2c4>
 800f9f8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f9fc:	bb03      	cbnz	r3, 800fa40 <rclc_executor_spin_some.part.0+0x2b8>
 800f9fe:	f10a 0a01 	add.w	sl, sl, #1
 800fa02:	68ab      	ldr	r3, [r5, #8]
 800fa04:	459a      	cmp	sl, r3
 800fa06:	d2be      	bcs.n	800f986 <rclc_executor_spin_some.part.0+0x1fe>
 800fa08:	2400      	movs	r4, #0
 800fa0a:	6868      	ldr	r0, [r5, #4]
 800fa0c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800fa10:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800fa14:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d0b7      	beq.n	800f98c <rclc_executor_spin_some.part.0+0x204>
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	f7ff fabb 	bl	800ef98 <_rclc_take_new_data>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	bf18      	it	ne
 800fa26:	4540      	cmpne	r0, r8
 800fa28:	d001      	beq.n	800fa2e <rclc_executor_spin_some.part.0+0x2a6>
 800fa2a:	4548      	cmp	r0, r9
 800fa2c:	d10c      	bne.n	800fa48 <rclc_executor_spin_some.part.0+0x2c0>
 800fa2e:	686b      	ldr	r3, [r5, #4]
 800fa30:	eb13 000b 	adds.w	r0, r3, fp
 800fa34:	d021      	beq.n	800fa7a <rclc_executor_spin_some.part.0+0x2f2>
 800fa36:	7842      	ldrb	r2, [r0, #1]
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	d0d7      	beq.n	800f9ec <rclc_executor_spin_some.part.0+0x264>
 800fa3c:	2a01      	cmp	r2, #1
 800fa3e:	d1de      	bne.n	800f9fe <rclc_executor_spin_some.part.0+0x276>
 800fa40:	f7ff fc1e 	bl	800f280 <_rclc_execute.part.0>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d0da      	beq.n	800f9fe <rclc_executor_spin_some.part.0+0x276>
 800fa48:	4607      	mov	r7, r0
 800fa4a:	e79c      	b.n	800f986 <rclc_executor_spin_some.part.0+0x1fe>
 800fa4c:	6843      	ldr	r3, [r0, #4]
 800fa4e:	6a1a      	ldr	r2, [r3, #32]
 800fa50:	2a00      	cmp	r2, #0
 800fa52:	d1f5      	bne.n	800fa40 <rclc_executor_spin_some.part.0+0x2b8>
 800fa54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0d0      	beq.n	800f9fe <rclc_executor_spin_some.part.0+0x276>
 800fa5c:	e7f0      	b.n	800fa40 <rclc_executor_spin_some.part.0+0x2b8>
 800fa5e:	6843      	ldr	r3, [r0, #4]
 800fa60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa62:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800fa66:	d1eb      	bne.n	800fa40 <rclc_executor_spin_some.part.0+0x2b8>
 800fa68:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fa6c:	2a00      	cmp	r2, #0
 800fa6e:	d1e7      	bne.n	800fa40 <rclc_executor_spin_some.part.0+0x2b8>
 800fa70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0c2      	beq.n	800f9fe <rclc_executor_spin_some.part.0+0x276>
 800fa78:	e7e2      	b.n	800fa40 <rclc_executor_spin_some.part.0+0x2b8>
 800fa7a:	270b      	movs	r7, #11
 800fa7c:	e783      	b.n	800f986 <rclc_executor_spin_some.part.0+0x1fe>
 800fa7e:	686a      	ldr	r2, [r5, #4]
 800fa80:	e6e2      	b.n	800f848 <rclc_executor_spin_some.part.0+0xc0>
 800fa82:	686a      	ldr	r2, [r5, #4]
 800fa84:	e7a1      	b.n	800f9ca <rclc_executor_spin_some.part.0+0x242>
 800fa86:	6842      	ldr	r2, [r0, #4]
 800fa88:	6a11      	ldr	r1, [r2, #32]
 800fa8a:	2900      	cmp	r1, #0
 800fa8c:	f47f af22 	bne.w	800f8d4 <rclc_executor_spin_some.part.0+0x14c>
 800fa90:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	f43f af0b 	beq.w	800f8b0 <rclc_executor_spin_some.part.0+0x128>
 800fa9a:	e71b      	b.n	800f8d4 <rclc_executor_spin_some.part.0+0x14c>
 800fa9c:	6842      	ldr	r2, [r0, #4]
 800fa9e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800faa0:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800faa4:	f47f af16 	bne.w	800f8d4 <rclc_executor_spin_some.part.0+0x14c>
 800faa8:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800faac:	2900      	cmp	r1, #0
 800faae:	f47f af11 	bne.w	800f8d4 <rclc_executor_spin_some.part.0+0x14c>
 800fab2:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800fab6:	2a00      	cmp	r2, #0
 800fab8:	f43f aefa 	beq.w	800f8b0 <rclc_executor_spin_some.part.0+0x128>
 800fabc:	e70a      	b.n	800f8d4 <rclc_executor_spin_some.part.0+0x14c>
 800fabe:	686a      	ldr	r2, [r5, #4]
 800fac0:	461c      	mov	r4, r3
 800fac2:	e782      	b.n	800f9ca <rclc_executor_spin_some.part.0+0x242>
 800fac4:	686a      	ldr	r2, [r5, #4]
 800fac6:	461c      	mov	r4, r3
 800fac8:	e6be      	b.n	800f848 <rclc_executor_spin_some.part.0+0xc0>
 800faca:	bf00      	nop

0800facc <rclc_executor_spin>:
 800facc:	b1d0      	cbz	r0, 800fb04 <rclc_executor_spin+0x38>
 800face:	b510      	push	{r4, lr}
 800fad0:	4604      	mov	r4, r0
 800fad2:	b082      	sub	sp, #8
 800fad4:	e004      	b.n	800fae0 <rclc_executor_spin+0x14>
 800fad6:	f7ff fe57 	bl	800f788 <rclc_executor_spin_some.part.0>
 800fada:	f030 0302 	bics.w	r3, r0, #2
 800fade:	d10f      	bne.n	800fb00 <rclc_executor_spin+0x34>
 800fae0:	6820      	ldr	r0, [r4, #0]
 800fae2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800fae6:	e9cd 2300 	strd	r2, r3, [sp]
 800faea:	f007 fa69 	bl	8016fc0 <rcl_context_is_valid>
 800faee:	4601      	mov	r1, r0
 800faf0:	4620      	mov	r0, r4
 800faf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faf6:	2900      	cmp	r1, #0
 800faf8:	d1ed      	bne.n	800fad6 <rclc_executor_spin+0xa>
 800fafa:	f000 f971 	bl	800fde0 <rcutils_reset_error>
 800fafe:	2001      	movs	r0, #1
 800fb00:	b002      	add	sp, #8
 800fb02:	bd10      	pop	{r4, pc}
 800fb04:	200b      	movs	r0, #11
 800fb06:	4770      	bx	lr

0800fb08 <rclc_executor_handle_counters_zero_init>:
 800fb08:	b130      	cbz	r0, 800fb18 <rclc_executor_handle_counters_zero_init+0x10>
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	b508      	push	{r3, lr}
 800fb10:	f00d f9b2 	bl	801ce78 <memset>
 800fb14:	2000      	movs	r0, #0
 800fb16:	bd08      	pop	{r3, pc}
 800fb18:	200b      	movs	r0, #11
 800fb1a:	4770      	bx	lr
 800fb1c:	0000      	movs	r0, r0
	...

0800fb20 <rclc_executor_handle_init>:
 800fb20:	4603      	mov	r3, r0
 800fb22:	b178      	cbz	r0, 800fb44 <rclc_executor_handle_init+0x24>
 800fb24:	2200      	movs	r2, #0
 800fb26:	f04f 0c0b 	mov.w	ip, #11
 800fb2a:	6341      	str	r1, [r0, #52]	@ 0x34
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	f8a3 c000 	strh.w	ip, [r3]
 800fb32:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb34:	871a      	strh	r2, [r3, #56]	@ 0x38
 800fb36:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800fb48 <rclc_executor_handle_init+0x28>
 800fb3a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800fb3e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800fb42:	4770      	bx	lr
 800fb44:	200b      	movs	r0, #11
 800fb46:	4770      	bx	lr
	...

0800fb50 <rclc_support_init_with_options>:
 800fb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb54:	b083      	sub	sp, #12
 800fb56:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	bf18      	it	ne
 800fb5c:	2f00      	cmpne	r7, #0
 800fb5e:	d027      	beq.n	800fbb0 <rclc_support_init_with_options+0x60>
 800fb60:	4604      	mov	r4, r0
 800fb62:	b328      	cbz	r0, 800fbb0 <rclc_support_init_with_options+0x60>
 800fb64:	46e9      	mov	r9, sp
 800fb66:	461d      	mov	r5, r3
 800fb68:	460e      	mov	r6, r1
 800fb6a:	4690      	mov	r8, r2
 800fb6c:	4648      	mov	r0, r9
 800fb6e:	f007 fa1d 	bl	8016fac <rcl_get_zero_initialized_context>
 800fb72:	462a      	mov	r2, r5
 800fb74:	4623      	mov	r3, r4
 800fb76:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb7e:	4641      	mov	r1, r8
 800fb80:	4630      	mov	r0, r6
 800fb82:	f007 fa83 	bl	801708c <rcl_init>
 800fb86:	4605      	mov	r5, r0
 800fb88:	b960      	cbnz	r0, 800fba4 <rclc_support_init_with_options+0x54>
 800fb8a:	463a      	mov	r2, r7
 800fb8c:	f104 010c 	add.w	r1, r4, #12
 800fb90:	2003      	movs	r0, #3
 800fb92:	60a7      	str	r7, [r4, #8]
 800fb94:	f008 f808 	bl	8017ba8 <rcl_clock_init>
 800fb98:	4605      	mov	r5, r0
 800fb9a:	b918      	cbnz	r0, 800fba4 <rclc_support_init_with_options+0x54>
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	b003      	add	sp, #12
 800fba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fba4:	f000 f91c 	bl	800fde0 <rcutils_reset_error>
 800fba8:	4628      	mov	r0, r5
 800fbaa:	b003      	add	sp, #12
 800fbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbb0:	250b      	movs	r5, #11
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	b003      	add	sp, #12
 800fbb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbba:	bf00      	nop

0800fbbc <rclc_node_init_default>:
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	bf18      	it	ne
 800fbc0:	2a00      	cmpne	r2, #0
 800fbc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbc6:	4616      	mov	r6, r2
 800fbc8:	bf0c      	ite	eq
 800fbca:	2201      	moveq	r2, #1
 800fbcc:	2200      	movne	r2, #0
 800fbce:	b0a1      	sub	sp, #132	@ 0x84
 800fbd0:	2900      	cmp	r1, #0
 800fbd2:	bf08      	it	eq
 800fbd4:	f042 0201 	orreq.w	r2, r2, #1
 800fbd8:	bb22      	cbnz	r2, 800fc24 <rclc_node_init_default+0x68>
 800fbda:	4604      	mov	r4, r0
 800fbdc:	b310      	cbz	r0, 800fc24 <rclc_node_init_default+0x68>
 800fbde:	f10d 0810 	add.w	r8, sp, #16
 800fbe2:	461f      	mov	r7, r3
 800fbe4:	460d      	mov	r5, r1
 800fbe6:	f10d 0918 	add.w	r9, sp, #24
 800fbea:	4640      	mov	r0, r8
 800fbec:	f007 fb76 	bl	80172dc <rcl_get_zero_initialized_node>
 800fbf0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fbf4:	e884 0003 	stmia.w	r4, {r0, r1}
 800fbf8:	4648      	mov	r0, r9
 800fbfa:	f007 fce9 	bl	80175d0 <rcl_node_get_default_options>
 800fbfe:	4640      	mov	r0, r8
 800fc00:	f007 fb6c 	bl	80172dc <rcl_get_zero_initialized_node>
 800fc04:	f8cd 9000 	str.w	r9, [sp]
 800fc08:	463b      	mov	r3, r7
 800fc0a:	4632      	mov	r2, r6
 800fc0c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fc10:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc14:	4629      	mov	r1, r5
 800fc16:	4620      	mov	r0, r4
 800fc18:	f007 fb6a 	bl	80172f0 <rcl_node_init>
 800fc1c:	b930      	cbnz	r0, 800fc2c <rclc_node_init_default+0x70>
 800fc1e:	b021      	add	sp, #132	@ 0x84
 800fc20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc24:	200b      	movs	r0, #11
 800fc26:	b021      	add	sp, #132	@ 0x84
 800fc28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc2c:	9003      	str	r0, [sp, #12]
 800fc2e:	f000 f8d7 	bl	800fde0 <rcutils_reset_error>
 800fc32:	f000 f8d5 	bl	800fde0 <rcutils_reset_error>
 800fc36:	9803      	ldr	r0, [sp, #12]
 800fc38:	b021      	add	sp, #132	@ 0x84
 800fc3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc3e:	bf00      	nop

0800fc40 <rclc_publisher_init_best_effort>:
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bf18      	it	ne
 800fc44:	2a00      	cmpne	r2, #0
 800fc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4a:	4616      	mov	r6, r2
 800fc4c:	bf0c      	ite	eq
 800fc4e:	2201      	moveq	r2, #1
 800fc50:	2200      	movne	r2, #0
 800fc52:	b0a0      	sub	sp, #128	@ 0x80
 800fc54:	2900      	cmp	r1, #0
 800fc56:	bf08      	it	eq
 800fc58:	f042 0201 	orreq.w	r2, r2, #1
 800fc5c:	bb1a      	cbnz	r2, 800fca6 <rclc_publisher_init_best_effort+0x66>
 800fc5e:	4604      	mov	r4, r0
 800fc60:	b308      	cbz	r0, 800fca6 <rclc_publisher_init_best_effort+0x66>
 800fc62:	f10d 0810 	add.w	r8, sp, #16
 800fc66:	461f      	mov	r7, r3
 800fc68:	460d      	mov	r5, r1
 800fc6a:	f7ff f833 	bl	800ecd4 <rcl_get_zero_initialized_publisher>
 800fc6e:	6020      	str	r0, [r4, #0]
 800fc70:	4640      	mov	r0, r8
 800fc72:	f7ff f8cf 	bl	800ee14 <rcl_publisher_get_default_options>
 800fc76:	2250      	movs	r2, #80	@ 0x50
 800fc78:	490d      	ldr	r1, [pc, #52]	@ (800fcb0 <rclc_publisher_init_best_effort+0x70>)
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	f00d f9c5 	bl	801d00a <memcpy>
 800fc80:	463b      	mov	r3, r7
 800fc82:	4632      	mov	r2, r6
 800fc84:	4629      	mov	r1, r5
 800fc86:	4620      	mov	r0, r4
 800fc88:	f8cd 8000 	str.w	r8, [sp]
 800fc8c:	f7ff f828 	bl	800ece0 <rcl_publisher_init>
 800fc90:	b910      	cbnz	r0, 800fc98 <rclc_publisher_init_best_effort+0x58>
 800fc92:	b020      	add	sp, #128	@ 0x80
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	9003      	str	r0, [sp, #12]
 800fc9a:	f000 f8a1 	bl	800fde0 <rcutils_reset_error>
 800fc9e:	9803      	ldr	r0, [sp, #12]
 800fca0:	b020      	add	sp, #128	@ 0x80
 800fca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fca6:	200b      	movs	r0, #11
 800fca8:	b020      	add	sp, #128	@ 0x80
 800fcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcae:	bf00      	nop
 800fcb0:	0801de98 	.word	0x0801de98

0800fcb4 <rclc_timer_init_default>:
 800fcb4:	b361      	cbz	r1, 800fd10 <rclc_timer_init_default+0x5c>
 800fcb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcba:	4606      	mov	r6, r0
 800fcbc:	b08a      	sub	sp, #40	@ 0x28
 800fcbe:	b318      	cbz	r0, 800fd08 <rclc_timer_init_default+0x54>
 800fcc0:	460d      	mov	r5, r1
 800fcc2:	4690      	mov	r8, r2
 800fcc4:	461f      	mov	r7, r3
 800fcc6:	f008 f967 	bl	8017f98 <rcl_get_zero_initialized_timer>
 800fcca:	68ac      	ldr	r4, [r5, #8]
 800fccc:	f10d 0c0c 	add.w	ip, sp, #12
 800fcd0:	6030      	str	r0, [r6, #0]
 800fcd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcd8:	6823      	ldr	r3, [r4, #0]
 800fcda:	462a      	mov	r2, r5
 800fcdc:	f105 010c 	add.w	r1, r5, #12
 800fce0:	4630      	mov	r0, r6
 800fce2:	f8cc 3000 	str.w	r3, [ip]
 800fce6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fce8:	e9cd 8700 	strd	r8, r7, [sp]
 800fcec:	9302      	str	r3, [sp, #8]
 800fcee:	f008 f95b 	bl	8017fa8 <rcl_timer_init>
 800fcf2:	b910      	cbnz	r0, 800fcfa <rclc_timer_init_default+0x46>
 800fcf4:	b00a      	add	sp, #40	@ 0x28
 800fcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcfa:	9009      	str	r0, [sp, #36]	@ 0x24
 800fcfc:	f000 f870 	bl	800fde0 <rcutils_reset_error>
 800fd00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd02:	b00a      	add	sp, #40	@ 0x28
 800fd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd08:	200b      	movs	r0, #11
 800fd0a:	b00a      	add	sp, #40	@ 0x28
 800fd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd10:	200b      	movs	r0, #11
 800fd12:	4770      	bx	lr

0800fd14 <__default_zero_allocate>:
 800fd14:	f00c bbc6 	b.w	801c4a4 <calloc>

0800fd18 <__default_reallocate>:
 800fd18:	f00c bd64 	b.w	801c7e4 <realloc>

0800fd1c <__default_deallocate>:
 800fd1c:	f00c bc40 	b.w	801c5a0 <free>

0800fd20 <__default_allocate>:
 800fd20:	f00c bc36 	b.w	801c590 <malloc>

0800fd24 <rcutils_get_zero_initialized_allocator>:
 800fd24:	b510      	push	{r4, lr}
 800fd26:	4c05      	ldr	r4, [pc, #20]	@ (800fd3c <rcutils_get_zero_initialized_allocator+0x18>)
 800fd28:	4686      	mov	lr, r0
 800fd2a:	4684      	mov	ip, r0
 800fd2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	4670      	mov	r0, lr
 800fd36:	f8cc 3000 	str.w	r3, [ip]
 800fd3a:	bd10      	pop	{r4, pc}
 800fd3c:	0801dee8 	.word	0x0801dee8

0800fd40 <rcutils_set_default_allocator>:
 800fd40:	b1a8      	cbz	r0, 800fd6e <rcutils_set_default_allocator+0x2e>
 800fd42:	6802      	ldr	r2, [r0, #0]
 800fd44:	b1a2      	cbz	r2, 800fd70 <rcutils_set_default_allocator+0x30>
 800fd46:	6841      	ldr	r1, [r0, #4]
 800fd48:	b1a1      	cbz	r1, 800fd74 <rcutils_set_default_allocator+0x34>
 800fd4a:	b410      	push	{r4}
 800fd4c:	68c4      	ldr	r4, [r0, #12]
 800fd4e:	b164      	cbz	r4, 800fd6a <rcutils_set_default_allocator+0x2a>
 800fd50:	6880      	ldr	r0, [r0, #8]
 800fd52:	b138      	cbz	r0, 800fd64 <rcutils_set_default_allocator+0x24>
 800fd54:	4b08      	ldr	r3, [pc, #32]	@ (800fd78 <rcutils_set_default_allocator+0x38>)
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800fd64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	e7fa      	b.n	800fd64 <rcutils_set_default_allocator+0x24>
 800fd6e:	4770      	bx	lr
 800fd70:	4610      	mov	r0, r2
 800fd72:	4770      	bx	lr
 800fd74:	4608      	mov	r0, r1
 800fd76:	4770      	bx	lr
 800fd78:	24000018 	.word	0x24000018

0800fd7c <rcutils_get_default_allocator>:
 800fd7c:	b510      	push	{r4, lr}
 800fd7e:	4c05      	ldr	r4, [pc, #20]	@ (800fd94 <rcutils_get_default_allocator+0x18>)
 800fd80:	4686      	mov	lr, r0
 800fd82:	4684      	mov	ip, r0
 800fd84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	4670      	mov	r0, lr
 800fd8e:	f8cc 3000 	str.w	r3, [ip]
 800fd92:	bd10      	pop	{r4, pc}
 800fd94:	24000018 	.word	0x24000018

0800fd98 <rcutils_allocator_is_valid>:
 800fd98:	b158      	cbz	r0, 800fdb2 <rcutils_allocator_is_valid+0x1a>
 800fd9a:	6803      	ldr	r3, [r0, #0]
 800fd9c:	b143      	cbz	r3, 800fdb0 <rcutils_allocator_is_valid+0x18>
 800fd9e:	6843      	ldr	r3, [r0, #4]
 800fda0:	b133      	cbz	r3, 800fdb0 <rcutils_allocator_is_valid+0x18>
 800fda2:	68c3      	ldr	r3, [r0, #12]
 800fda4:	b123      	cbz	r3, 800fdb0 <rcutils_allocator_is_valid+0x18>
 800fda6:	6880      	ldr	r0, [r0, #8]
 800fda8:	3800      	subs	r0, #0
 800fdaa:	bf18      	it	ne
 800fdac:	2001      	movne	r0, #1
 800fdae:	4770      	bx	lr
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	4770      	bx	lr

0800fdb4 <rcutils_get_error_string>:
 800fdb4:	4b06      	ldr	r3, [pc, #24]	@ (800fdd0 <rcutils_get_error_string+0x1c>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	b13b      	cbz	r3, 800fdca <rcutils_get_error_string+0x16>
 800fdba:	4b06      	ldr	r3, [pc, #24]	@ (800fdd4 <rcutils_get_error_string+0x20>)
 800fdbc:	781a      	ldrb	r2, [r3, #0]
 800fdbe:	b90a      	cbnz	r2, 800fdc4 <rcutils_get_error_string+0x10>
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	4b04      	ldr	r3, [pc, #16]	@ (800fdd8 <rcutils_get_error_string+0x24>)
 800fdc6:	7818      	ldrb	r0, [r3, #0]
 800fdc8:	4770      	bx	lr
 800fdca:	4b04      	ldr	r3, [pc, #16]	@ (800fddc <rcutils_get_error_string+0x28>)
 800fdcc:	7818      	ldrb	r0, [r3, #0]
 800fdce:	4770      	bx	lr
 800fdd0:	2400eed8 	.word	0x2400eed8
 800fdd4:	2400eef1 	.word	0x2400eef1
 800fdd8:	2400eef0 	.word	0x2400eef0
 800fddc:	0801e24c 	.word	0x0801e24c

0800fde0 <rcutils_reset_error>:
 800fde0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800fe00 <rcutils_reset_error+0x20>
 800fde4:	2300      	movs	r3, #0
 800fde6:	4a08      	ldr	r2, [pc, #32]	@ (800fe08 <rcutils_reset_error+0x28>)
 800fde8:	4808      	ldr	r0, [pc, #32]	@ (800fe0c <rcutils_reset_error+0x2c>)
 800fdea:	8013      	strh	r3, [r2, #0]
 800fdec:	4908      	ldr	r1, [pc, #32]	@ (800fe10 <rcutils_reset_error+0x30>)
 800fdee:	7003      	strb	r3, [r0, #0]
 800fdf0:	700b      	strb	r3, [r1, #0]
 800fdf2:	ed82 7b02 	vstr	d7, [r2, #8]
 800fdf6:	4a07      	ldr	r2, [pc, #28]	@ (800fe14 <rcutils_reset_error+0x34>)
 800fdf8:	7013      	strb	r3, [r2, #0]
 800fdfa:	4770      	bx	lr
 800fdfc:	f3af 8000 	nop.w
	...
 800fe08:	2400eee0 	.word	0x2400eee0
 800fe0c:	2400eef1 	.word	0x2400eef1
 800fe10:	2400eef0 	.word	0x2400eef0
 800fe14:	2400eed8 	.word	0x2400eed8

0800fe18 <rcutils_system_time_now>:
 800fe18:	b300      	cbz	r0, 800fe5c <rcutils_system_time_now+0x44>
 800fe1a:	b570      	push	{r4, r5, r6, lr}
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	4604      	mov	r4, r0
 800fe20:	2001      	movs	r0, #1
 800fe22:	4669      	mov	r1, sp
 800fe24:	f7f1 fec4 	bl	8001bb0 <clock_gettime>
 800fe28:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe2c:	2900      	cmp	r1, #0
 800fe2e:	db12      	blt.n	800fe56 <rcutils_system_time_now+0x3e>
 800fe30:	ea53 0201 	orrs.w	r2, r3, r1
 800fe34:	9d02      	ldr	r5, [sp, #8]
 800fe36:	d101      	bne.n	800fe3c <rcutils_system_time_now+0x24>
 800fe38:	2d00      	cmp	r5, #0
 800fe3a:	db0c      	blt.n	800fe56 <rcutils_system_time_now+0x3e>
 800fe3c:	4e08      	ldr	r6, [pc, #32]	@ (800fe60 <rcutils_system_time_now+0x48>)
 800fe3e:	2000      	movs	r0, #0
 800fe40:	fba3 3206 	umull	r3, r2, r3, r6
 800fe44:	195b      	adds	r3, r3, r5
 800fe46:	fb06 2201 	mla	r2, r6, r1, r2
 800fe4a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fe4e:	e9c4 3200 	strd	r3, r2, [r4]
 800fe52:	b004      	add	sp, #16
 800fe54:	bd70      	pop	{r4, r5, r6, pc}
 800fe56:	2002      	movs	r0, #2
 800fe58:	b004      	add	sp, #16
 800fe5a:	bd70      	pop	{r4, r5, r6, pc}
 800fe5c:	200b      	movs	r0, #11
 800fe5e:	4770      	bx	lr
 800fe60:	3b9aca00 	.word	0x3b9aca00

0800fe64 <rcutils_steady_time_now>:
 800fe64:	b300      	cbz	r0, 800fea8 <rcutils_steady_time_now+0x44>
 800fe66:	b570      	push	{r4, r5, r6, lr}
 800fe68:	b084      	sub	sp, #16
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	4669      	mov	r1, sp
 800fe70:	f7f1 fe9e 	bl	8001bb0 <clock_gettime>
 800fe74:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe78:	2900      	cmp	r1, #0
 800fe7a:	db12      	blt.n	800fea2 <rcutils_steady_time_now+0x3e>
 800fe7c:	ea53 0201 	orrs.w	r2, r3, r1
 800fe80:	9d02      	ldr	r5, [sp, #8]
 800fe82:	d101      	bne.n	800fe88 <rcutils_steady_time_now+0x24>
 800fe84:	2d00      	cmp	r5, #0
 800fe86:	db0c      	blt.n	800fea2 <rcutils_steady_time_now+0x3e>
 800fe88:	4e08      	ldr	r6, [pc, #32]	@ (800feac <rcutils_steady_time_now+0x48>)
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	fba3 3206 	umull	r3, r2, r3, r6
 800fe90:	195b      	adds	r3, r3, r5
 800fe92:	fb06 2201 	mla	r2, r6, r1, r2
 800fe96:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fe9a:	e9c4 3200 	strd	r3, r2, [r4]
 800fe9e:	b004      	add	sp, #16
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
 800fea2:	2002      	movs	r0, #2
 800fea4:	b004      	add	sp, #16
 800fea6:	bd70      	pop	{r4, r5, r6, pc}
 800fea8:	200b      	movs	r0, #11
 800feaa:	4770      	bx	lr
 800feac:	3b9aca00 	.word	0x3b9aca00

0800feb0 <rmw_get_zero_initialized_init_options>:
 800feb0:	b510      	push	{r4, lr}
 800feb2:	4604      	mov	r4, r0
 800feb4:	2238      	movs	r2, #56	@ 0x38
 800feb6:	2100      	movs	r1, #0
 800feb8:	f00c ffde 	bl	801ce78 <memset>
 800febc:	f104 0010 	add.w	r0, r4, #16
 800fec0:	f000 f80a 	bl	800fed8 <rmw_get_default_security_options>
 800fec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fec8:	4620      	mov	r0, r4
 800feca:	60e3      	str	r3, [r4, #12]
 800fecc:	bd10      	pop	{r4, pc}
 800fece:	bf00      	nop

0800fed0 <rmw_get_default_publisher_options>:
 800fed0:	2200      	movs	r2, #0
 800fed2:	6002      	str	r2, [r0, #0]
 800fed4:	7102      	strb	r2, [r0, #4]
 800fed6:	4770      	bx	lr

0800fed8 <rmw_get_default_security_options>:
 800fed8:	2200      	movs	r2, #0
 800feda:	7002      	strb	r2, [r0, #0]
 800fedc:	6042      	str	r2, [r0, #4]
 800fede:	4770      	bx	lr

0800fee0 <rmw_uros_set_custom_transport>:
 800fee0:	b470      	push	{r4, r5, r6}
 800fee2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fee6:	b162      	cbz	r2, 800ff02 <rmw_uros_set_custom_transport+0x22>
 800fee8:	b15b      	cbz	r3, 800ff02 <rmw_uros_set_custom_transport+0x22>
 800feea:	b155      	cbz	r5, 800ff02 <rmw_uros_set_custom_transport+0x22>
 800feec:	b14e      	cbz	r6, 800ff02 <rmw_uros_set_custom_transport+0x22>
 800feee:	4c06      	ldr	r4, [pc, #24]	@ (800ff08 <rmw_uros_set_custom_transport+0x28>)
 800fef0:	7020      	strb	r0, [r4, #0]
 800fef2:	2000      	movs	r0, #0
 800fef4:	6166      	str	r6, [r4, #20]
 800fef6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fefa:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fefe:	bc70      	pop	{r4, r5, r6}
 800ff00:	4770      	bx	lr
 800ff02:	200b      	movs	r0, #11
 800ff04:	bc70      	pop	{r4, r5, r6}
 800ff06:	4770      	bx	lr
 800ff08:	2400eef4 	.word	0x2400eef4

0800ff0c <rmw_init_options_init>:
 800ff0c:	b084      	sub	sp, #16
 800ff0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff10:	b083      	sub	sp, #12
 800ff12:	ad09      	add	r5, sp, #36	@ 0x24
 800ff14:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ff18:	b130      	cbz	r0, 800ff28 <rmw_init_options_init+0x1c>
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	f7ff ff3b 	bl	800fd98 <rcutils_allocator_is_valid>
 800ff22:	b108      	cbz	r0, 800ff28 <rmw_init_options_init+0x1c>
 800ff24:	68a6      	ldr	r6, [r4, #8]
 800ff26:	b12e      	cbz	r6, 800ff34 <rmw_init_options_init+0x28>
 800ff28:	200b      	movs	r0, #11
 800ff2a:	b003      	add	sp, #12
 800ff2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff30:	b004      	add	sp, #16
 800ff32:	4770      	bx	lr
 800ff34:	2200      	movs	r2, #0
 800ff36:	2300      	movs	r3, #0
 800ff38:	f104 0c20 	add.w	ip, r4, #32
 800ff3c:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800ffd8 <rmw_init_options_init+0xcc>
 800ff40:	466f      	mov	r7, sp
 800ff42:	e9c4 2300 	strd	r2, r3, [r4]
 800ff46:	4b20      	ldr	r3, [pc, #128]	@ (800ffc8 <rmw_init_options_init+0xbc>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	60a3      	str	r3, [r4, #8]
 800ff4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff52:	682b      	ldr	r3, [r5, #0]
 800ff54:	4638      	mov	r0, r7
 800ff56:	f8cc 3000 	str.w	r3, [ip]
 800ff5a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ff5e:	60e6      	str	r6, [r4, #12]
 800ff60:	f7ff ffba 	bl	800fed8 <rmw_get_default_security_options>
 800ff64:	f104 0310 	add.w	r3, r4, #16
 800ff68:	2203      	movs	r2, #3
 800ff6a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ff6e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff72:	4816      	ldr	r0, [pc, #88]	@ (800ffcc <rmw_init_options_init+0xc0>)
 800ff74:	4916      	ldr	r1, [pc, #88]	@ (800ffd0 <rmw_init_options_init+0xc4>)
 800ff76:	7626      	strb	r6, [r4, #24]
 800ff78:	f000 fed2 	bl	8010d20 <rmw_uxrce_init_init_options_impl_memory>
 800ff7c:	4813      	ldr	r0, [pc, #76]	@ (800ffcc <rmw_init_options_init+0xc0>)
 800ff7e:	f00a fbf1 	bl	801a764 <get_memory>
 800ff82:	b1f0      	cbz	r0, 800ffc2 <rmw_init_options_init+0xb6>
 800ff84:	4a13      	ldr	r2, [pc, #76]	@ (800ffd4 <rmw_init_options_init+0xc8>)
 800ff86:	6883      	ldr	r3, [r0, #8]
 800ff88:	6851      	ldr	r1, [r2, #4]
 800ff8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff8c:	7810      	ldrb	r0, [r2, #0]
 800ff8e:	6159      	str	r1, [r3, #20]
 800ff90:	68d1      	ldr	r1, [r2, #12]
 800ff92:	7418      	strb	r0, [r3, #16]
 800ff94:	61d9      	str	r1, [r3, #28]
 800ff96:	6911      	ldr	r1, [r2, #16]
 800ff98:	6219      	str	r1, [r3, #32]
 800ff9a:	6951      	ldr	r1, [r2, #20]
 800ff9c:	6892      	ldr	r2, [r2, #8]
 800ff9e:	6259      	str	r1, [r3, #36]	@ 0x24
 800ffa0:	619a      	str	r2, [r3, #24]
 800ffa2:	f005 fe15 	bl	8015bd0 <uxr_nanos>
 800ffa6:	f00c fbb1 	bl	801c70c <srand>
 800ffaa:	f00c fbdd 	bl	801c768 <rand>
 800ffae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ffb0:	6298      	str	r0, [r3, #40]	@ 0x28
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d0f9      	beq.n	800ffaa <rmw_init_options_init+0x9e>
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	b003      	add	sp, #12
 800ffba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffbe:	b004      	add	sp, #16
 800ffc0:	4770      	bx	lr
 800ffc2:	2001      	movs	r0, #1
 800ffc4:	e7b1      	b.n	800ff2a <rmw_init_options_init+0x1e>
 800ffc6:	bf00      	nop
 800ffc8:	0801eb14 	.word	0x0801eb14
 800ffcc:	2401380c 	.word	0x2401380c
 800ffd0:	2400f0a8 	.word	0x2400f0a8
 800ffd4:	2400eef4 	.word	0x2400eef4
 800ffd8:	0801defc 	.word	0x0801defc

0800ffdc <rmw_init_options_copy>:
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d047      	beq.n	8010070 <rmw_init_options_copy+0x94>
 800ffe0:	b570      	push	{r4, r5, r6, lr}
 800ffe2:	460d      	mov	r5, r1
 800ffe4:	b149      	cbz	r1, 800fffa <rmw_init_options_copy+0x1e>
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	6880      	ldr	r0, [r0, #8]
 800ffea:	b120      	cbz	r0, 800fff6 <rmw_init_options_copy+0x1a>
 800ffec:	4b22      	ldr	r3, [pc, #136]	@ (8010078 <rmw_init_options_copy+0x9c>)
 800ffee:	6819      	ldr	r1, [r3, #0]
 800fff0:	f7f0 f976 	bl	80002e0 <strcmp>
 800fff4:	bba8      	cbnz	r0, 8010062 <rmw_init_options_copy+0x86>
 800fff6:	68ab      	ldr	r3, [r5, #8]
 800fff8:	b11b      	cbz	r3, 8010002 <rmw_init_options_copy+0x26>
 800fffa:	f04f 0c0b 	mov.w	ip, #11
 800fffe:	4660      	mov	r0, ip
 8010000:	bd70      	pop	{r4, r5, r6, pc}
 8010002:	4623      	mov	r3, r4
 8010004:	462a      	mov	r2, r5
 8010006:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801000a:	f8d3 e000 	ldr.w	lr, [r3]
 801000e:	3310      	adds	r3, #16
 8010010:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8010014:	3210      	adds	r2, #16
 8010016:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801001a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801001e:	42b3      	cmp	r3, r6
 8010020:	f842 ec10 	str.w	lr, [r2, #-16]
 8010024:	f842 cc0c 	str.w	ip, [r2, #-12]
 8010028:	f842 0c08 	str.w	r0, [r2, #-8]
 801002c:	f842 1c04 	str.w	r1, [r2, #-4]
 8010030:	d1eb      	bne.n	801000a <rmw_init_options_copy+0x2e>
 8010032:	6819      	ldr	r1, [r3, #0]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	4811      	ldr	r0, [pc, #68]	@ (801007c <rmw_init_options_copy+0xa0>)
 8010038:	6011      	str	r1, [r2, #0]
 801003a:	6053      	str	r3, [r2, #4]
 801003c:	f00a fb92 	bl	801a764 <get_memory>
 8010040:	b198      	cbz	r0, 801006a <rmw_init_options_copy+0x8e>
 8010042:	6883      	ldr	r3, [r0, #8]
 8010044:	f04f 0c00 	mov.w	ip, #0
 8010048:	636b      	str	r3, [r5, #52]	@ 0x34
 801004a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801004c:	f103 0410 	add.w	r4, r3, #16
 8010050:	3510      	adds	r5, #16
 8010052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801005a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801005e:	4660      	mov	r0, ip
 8010060:	bd70      	pop	{r4, r5, r6, pc}
 8010062:	f04f 0c0c 	mov.w	ip, #12
 8010066:	4660      	mov	r0, ip
 8010068:	bd70      	pop	{r4, r5, r6, pc}
 801006a:	f04f 0c01 	mov.w	ip, #1
 801006e:	e7c6      	b.n	800fffe <rmw_init_options_copy+0x22>
 8010070:	f04f 0c0b 	mov.w	ip, #11
 8010074:	4660      	mov	r0, ip
 8010076:	4770      	bx	lr
 8010078:	0801eb14 	.word	0x0801eb14
 801007c:	2401380c 	.word	0x2401380c

08010080 <rmw_init_options_fini>:
 8010080:	b510      	push	{r4, lr}
 8010082:	b08e      	sub	sp, #56	@ 0x38
 8010084:	b388      	cbz	r0, 80100ea <rmw_init_options_fini+0x6a>
 8010086:	4604      	mov	r4, r0
 8010088:	3020      	adds	r0, #32
 801008a:	f7ff fe85 	bl	800fd98 <rcutils_allocator_is_valid>
 801008e:	b360      	cbz	r0, 80100ea <rmw_init_options_fini+0x6a>
 8010090:	68a0      	ldr	r0, [r4, #8]
 8010092:	b120      	cbz	r0, 801009e <rmw_init_options_fini+0x1e>
 8010094:	4b1a      	ldr	r3, [pc, #104]	@ (8010100 <rmw_init_options_fini+0x80>)
 8010096:	6819      	ldr	r1, [r3, #0]
 8010098:	f7f0 f922 	bl	80002e0 <strcmp>
 801009c:	bb68      	cbnz	r0, 80100fa <rmw_init_options_fini+0x7a>
 801009e:	4b19      	ldr	r3, [pc, #100]	@ (8010104 <rmw_init_options_fini+0x84>)
 80100a0:	6819      	ldr	r1, [r3, #0]
 80100a2:	b331      	cbz	r1, 80100f2 <rmw_init_options_fini+0x72>
 80100a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80100a6:	e001      	b.n	80100ac <rmw_init_options_fini+0x2c>
 80100a8:	6849      	ldr	r1, [r1, #4]
 80100aa:	b311      	cbz	r1, 80100f2 <rmw_init_options_fini+0x72>
 80100ac:	688b      	ldr	r3, [r1, #8]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d1fa      	bne.n	80100a8 <rmw_init_options_fini+0x28>
 80100b2:	4814      	ldr	r0, [pc, #80]	@ (8010104 <rmw_init_options_fini+0x84>)
 80100b4:	f00a fb66 	bl	801a784 <put_memory>
 80100b8:	4668      	mov	r0, sp
 80100ba:	f7ff fef9 	bl	800feb0 <rmw_get_zero_initialized_init_options>
 80100be:	46ee      	mov	lr, sp
 80100c0:	46a4      	mov	ip, r4
 80100c2:	2400      	movs	r4, #0
 80100c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80100e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80100e4:	4620      	mov	r0, r4
 80100e6:	b00e      	add	sp, #56	@ 0x38
 80100e8:	bd10      	pop	{r4, pc}
 80100ea:	240b      	movs	r4, #11
 80100ec:	4620      	mov	r0, r4
 80100ee:	b00e      	add	sp, #56	@ 0x38
 80100f0:	bd10      	pop	{r4, pc}
 80100f2:	2401      	movs	r4, #1
 80100f4:	4620      	mov	r0, r4
 80100f6:	b00e      	add	sp, #56	@ 0x38
 80100f8:	bd10      	pop	{r4, pc}
 80100fa:	240c      	movs	r4, #12
 80100fc:	e7f2      	b.n	80100e4 <rmw_init_options_fini+0x64>
 80100fe:	bf00      	nop
 8010100:	0801eb14 	.word	0x0801eb14
 8010104:	2401380c 	.word	0x2401380c

08010108 <rmw_init>:
 8010108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801010c:	b083      	sub	sp, #12
 801010e:	2800      	cmp	r0, #0
 8010110:	f000 80d3 	beq.w	80102ba <rmw_init+0x1b2>
 8010114:	460e      	mov	r6, r1
 8010116:	2900      	cmp	r1, #0
 8010118:	f000 80cf 	beq.w	80102ba <rmw_init+0x1b2>
 801011c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801011e:	4605      	mov	r5, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 80ca 	beq.w	80102ba <rmw_init+0x1b2>
 8010126:	4b78      	ldr	r3, [pc, #480]	@ (8010308 <rmw_init+0x200>)
 8010128:	6880      	ldr	r0, [r0, #8]
 801012a:	681f      	ldr	r7, [r3, #0]
 801012c:	b128      	cbz	r0, 801013a <rmw_init+0x32>
 801012e:	4639      	mov	r1, r7
 8010130:	f7f0 f8d6 	bl	80002e0 <strcmp>
 8010134:	2800      	cmp	r0, #0
 8010136:	f040 80ca 	bne.w	80102ce <rmw_init+0x1c6>
 801013a:	4c74      	ldr	r4, [pc, #464]	@ (801030c <rmw_init+0x204>)
 801013c:	f04f 0800 	mov.w	r8, #0
 8010140:	4973      	ldr	r1, [pc, #460]	@ (8010310 <rmw_init+0x208>)
 8010142:	4874      	ldr	r0, [pc, #464]	@ (8010314 <rmw_init+0x20c>)
 8010144:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010148:	60b7      	str	r7, [r6, #8]
 801014a:	e9c6 2300 	strd	r2, r3, [r6]
 801014e:	68eb      	ldr	r3, [r5, #12]
 8010150:	2201      	movs	r2, #1
 8010152:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010154:	f000 fd84 	bl	8010c60 <rmw_uxrce_init_session_memory>
 8010158:	4620      	mov	r0, r4
 801015a:	2204      	movs	r2, #4
 801015c:	496e      	ldr	r1, [pc, #440]	@ (8010318 <rmw_init+0x210>)
 801015e:	f000 fdbf 	bl	8010ce0 <rmw_uxrce_init_static_input_buffer_memory>
 8010162:	486c      	ldr	r0, [pc, #432]	@ (8010314 <rmw_init+0x20c>)
 8010164:	f884 800d 	strb.w	r8, [r4, #13]
 8010168:	f00a fafc 	bl	801a764 <get_memory>
 801016c:	2800      	cmp	r0, #0
 801016e:	f000 80a9 	beq.w	80102c4 <rmw_init+0x1bc>
 8010172:	6884      	ldr	r4, [r0, #8]
 8010174:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010176:	f104 0910 	add.w	r9, r4, #16
 801017a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801017c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010180:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010184:	9101      	str	r1, [sp, #4]
 8010186:	4661      	mov	r1, ip
 8010188:	6a00      	ldr	r0, [r0, #32]
 801018a:	9000      	str	r0, [sp, #0]
 801018c:	4648      	mov	r0, r9
 801018e:	f003 fcad 	bl	8013aec <uxr_set_custom_transport_callbacks>
 8010192:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010196:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801019a:	4960      	ldr	r1, [pc, #384]	@ (801031c <rmw_init+0x214>)
 801019c:	4860      	ldr	r0, [pc, #384]	@ (8010320 <rmw_init+0x218>)
 801019e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80101a2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80101a6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80101aa:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80101ae:	2201      	movs	r2, #1
 80101b0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80101b4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80101b8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80101bc:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80101c0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80101c2:	f000 fd2d 	bl	8010c20 <rmw_uxrce_init_node_memory>
 80101c6:	2205      	movs	r2, #5
 80101c8:	4956      	ldr	r1, [pc, #344]	@ (8010324 <rmw_init+0x21c>)
 80101ca:	4857      	ldr	r0, [pc, #348]	@ (8010328 <rmw_init+0x220>)
 80101cc:	f000 fd08 	bl	8010be0 <rmw_uxrce_init_subscription_memory>
 80101d0:	220a      	movs	r2, #10
 80101d2:	4956      	ldr	r1, [pc, #344]	@ (801032c <rmw_init+0x224>)
 80101d4:	4856      	ldr	r0, [pc, #344]	@ (8010330 <rmw_init+0x228>)
 80101d6:	f000 fce3 	bl	8010ba0 <rmw_uxrce_init_publisher_memory>
 80101da:	2201      	movs	r2, #1
 80101dc:	4955      	ldr	r1, [pc, #340]	@ (8010334 <rmw_init+0x22c>)
 80101de:	4856      	ldr	r0, [pc, #344]	@ (8010338 <rmw_init+0x230>)
 80101e0:	f000 fc9e 	bl	8010b20 <rmw_uxrce_init_service_memory>
 80101e4:	2201      	movs	r2, #1
 80101e6:	4955      	ldr	r1, [pc, #340]	@ (801033c <rmw_init+0x234>)
 80101e8:	4855      	ldr	r0, [pc, #340]	@ (8010340 <rmw_init+0x238>)
 80101ea:	f000 fcb9 	bl	8010b60 <rmw_uxrce_init_client_memory>
 80101ee:	220f      	movs	r2, #15
 80101f0:	4954      	ldr	r1, [pc, #336]	@ (8010344 <rmw_init+0x23c>)
 80101f2:	4855      	ldr	r0, [pc, #340]	@ (8010348 <rmw_init+0x240>)
 80101f4:	f000 fd54 	bl	8010ca0 <rmw_uxrce_init_topic_memory>
 80101f8:	2203      	movs	r2, #3
 80101fa:	4954      	ldr	r1, [pc, #336]	@ (801034c <rmw_init+0x244>)
 80101fc:	4854      	ldr	r0, [pc, #336]	@ (8010350 <rmw_init+0x248>)
 80101fe:	f000 fd8f 	bl	8010d20 <rmw_uxrce_init_init_options_impl_memory>
 8010202:	2204      	movs	r2, #4
 8010204:	4953      	ldr	r1, [pc, #332]	@ (8010354 <rmw_init+0x24c>)
 8010206:	4854      	ldr	r0, [pc, #336]	@ (8010358 <rmw_init+0x250>)
 8010208:	f000 fdaa 	bl	8010d60 <rmw_uxrce_init_wait_set_memory>
 801020c:	4953      	ldr	r1, [pc, #332]	@ (801035c <rmw_init+0x254>)
 801020e:	4854      	ldr	r0, [pc, #336]	@ (8010360 <rmw_init+0x258>)
 8010210:	2204      	movs	r2, #4
 8010212:	f000 fdc5 	bl	8010da0 <rmw_uxrce_init_guard_condition_memory>
 8010216:	4642      	mov	r2, r8
 8010218:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801021a:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801021c:	f000 fc48 	bl	8010ab0 <rmw_uxrce_transport_init>
 8010220:	4607      	mov	r7, r0
 8010222:	2800      	cmp	r0, #0
 8010224:	d158      	bne.n	80102d8 <rmw_init+0x1d0>
 8010226:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010228:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801022c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010232:	4628      	mov	r0, r5
 8010234:	f003 fe50 	bl	8013ed8 <uxr_init_session>
 8010238:	4622      	mov	r2, r4
 801023a:	494a      	ldr	r1, [pc, #296]	@ (8010364 <rmw_init+0x25c>)
 801023c:	4628      	mov	r0, r5
 801023e:	f003 fe6f 	bl	8013f20 <uxr_set_topic_callback>
 8010242:	463a      	mov	r2, r7
 8010244:	4948      	ldr	r1, [pc, #288]	@ (8010368 <rmw_init+0x260>)
 8010246:	4628      	mov	r0, r5
 8010248:	f003 fe66 	bl	8013f18 <uxr_set_status_callback>
 801024c:	463a      	mov	r2, r7
 801024e:	4947      	ldr	r1, [pc, #284]	@ (801036c <rmw_init+0x264>)
 8010250:	4628      	mov	r0, r5
 8010252:	f003 fe69 	bl	8013f28 <uxr_set_request_callback>
 8010256:	463a      	mov	r2, r7
 8010258:	4945      	ldr	r1, [pc, #276]	@ (8010370 <rmw_init+0x268>)
 801025a:	4628      	mov	r0, r5
 801025c:	f003 fe68 	bl	8013f30 <uxr_set_reply_callback>
 8010260:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010264:	2304      	movs	r3, #4
 8010266:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801026a:	0092      	lsls	r2, r2, #2
 801026c:	4628      	mov	r0, r5
 801026e:	f003 fe9f 	bl	8013fb0 <uxr_create_input_reliable_stream>
 8010272:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010276:	2304      	movs	r3, #4
 8010278:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801027c:	0092      	lsls	r2, r2, #2
 801027e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010282:	4628      	mov	r0, r5
 8010284:	f003 fe6a 	bl	8013f5c <uxr_create_output_reliable_stream>
 8010288:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801028c:	4628      	mov	r0, r5
 801028e:	f003 fe89 	bl	8013fa4 <uxr_create_input_best_effort_stream>
 8010292:	f241 3194 	movw	r1, #5012	@ 0x1394
 8010296:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801029a:	4628      	mov	r0, r5
 801029c:	4421      	add	r1, r4
 801029e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80102a2:	f003 fe49 	bl	8013f38 <uxr_create_output_best_effort_stream>
 80102a6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80102aa:	4628      	mov	r0, r5
 80102ac:	f004 fc28 	bl	8014b00 <uxr_create_session>
 80102b0:	b1f8      	cbz	r0, 80102f2 <rmw_init+0x1ea>
 80102b2:	4638      	mov	r0, r7
 80102b4:	b003      	add	sp, #12
 80102b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ba:	270b      	movs	r7, #11
 80102bc:	4638      	mov	r0, r7
 80102be:	b003      	add	sp, #12
 80102c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102c4:	2701      	movs	r7, #1
 80102c6:	4638      	mov	r0, r7
 80102c8:	b003      	add	sp, #12
 80102ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ce:	270c      	movs	r7, #12
 80102d0:	4638      	mov	r0, r7
 80102d2:	b003      	add	sp, #12
 80102d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102d8:	4648      	mov	r0, r9
 80102da:	f003 fc45 	bl	8013b68 <uxr_close_custom_transport>
 80102de:	4621      	mov	r1, r4
 80102e0:	480c      	ldr	r0, [pc, #48]	@ (8010314 <rmw_init+0x20c>)
 80102e2:	f00a fa4f 	bl	801a784 <put_memory>
 80102e6:	4638      	mov	r0, r7
 80102e8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80102ec:	b003      	add	sp, #12
 80102ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f2:	4648      	mov	r0, r9
 80102f4:	f003 fc38 	bl	8013b68 <uxr_close_custom_transport>
 80102f8:	4621      	mov	r1, r4
 80102fa:	4806      	ldr	r0, [pc, #24]	@ (8010314 <rmw_init+0x20c>)
 80102fc:	f00a fa42 	bl	801a784 <put_memory>
 8010300:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010302:	2701      	movs	r7, #1
 8010304:	e7d5      	b.n	80102b2 <rmw_init+0x1aa>
 8010306:	bf00      	nop
 8010308:	0801eb14 	.word	0x0801eb14
 801030c:	2401385c 	.word	0x2401385c
 8010310:	2400fb08 	.word	0x2400fb08
 8010314:	2401384c 	.word	0x2401384c
 8010318:	240110b0 	.word	0x240110b0
 801031c:	2400f12c 	.word	0x2400f12c
 8010320:	2401381c 	.word	0x2401381c
 8010324:	240131b0 	.word	0x240131b0
 8010328:	2401386c 	.word	0x2401386c
 801032c:	2400f1d0 	.word	0x2400f1d0
 8010330:	2401382c 	.word	0x2401382c
 8010334:	2400fa40 	.word	0x2400fa40
 8010338:	2401383c 	.word	0x2401383c
 801033c:	2400ef60 	.word	0x2400ef60
 8010340:	2400ef4c 	.word	0x2400ef4c
 8010344:	240135e8 	.word	0x240135e8
 8010348:	2401387c 	.word	0x2401387c
 801034c:	2400f0a8 	.word	0x2400f0a8
 8010350:	2401380c 	.word	0x2401380c
 8010354:	2401378c 	.word	0x2401378c
 8010358:	2401388c 	.word	0x2401388c
 801035c:	2400f028 	.word	0x2400f028
 8010360:	240137fc 	.word	0x240137fc
 8010364:	0801a59d 	.word	0x0801a59d
 8010368:	0801a595 	.word	0x0801a595
 801036c:	0801a635 	.word	0x0801a635
 8010370:	0801a6d1 	.word	0x0801a6d1

08010374 <rmw_context_fini>:
 8010374:	4b17      	ldr	r3, [pc, #92]	@ (80103d4 <rmw_context_fini+0x60>)
 8010376:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010378:	b570      	push	{r4, r5, r6, lr}
 801037a:	681c      	ldr	r4, [r3, #0]
 801037c:	4605      	mov	r5, r0
 801037e:	b334      	cbz	r4, 80103ce <rmw_context_fini+0x5a>
 8010380:	2600      	movs	r6, #0
 8010382:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010386:	6902      	ldr	r2, [r0, #16]
 8010388:	428a      	cmp	r2, r1
 801038a:	d018      	beq.n	80103be <rmw_context_fini+0x4a>
 801038c:	2c00      	cmp	r4, #0
 801038e:	d1f8      	bne.n	8010382 <rmw_context_fini+0xe>
 8010390:	b189      	cbz	r1, 80103b6 <rmw_context_fini+0x42>
 8010392:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8010396:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801039a:	789b      	ldrb	r3, [r3, #2]
 801039c:	2b01      	cmp	r3, #1
 801039e:	bf14      	ite	ne
 80103a0:	210a      	movne	r1, #10
 80103a2:	2100      	moveq	r1, #0
 80103a4:	f004 fb84 	bl	8014ab0 <uxr_delete_session_retries>
 80103a8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80103aa:	f000 fd19 	bl	8010de0 <rmw_uxrce_fini_session_memory>
 80103ae:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80103b0:	3010      	adds	r0, #16
 80103b2:	f003 fbd9 	bl	8013b68 <uxr_close_custom_transport>
 80103b6:	2300      	movs	r3, #0
 80103b8:	4630      	mov	r0, r6
 80103ba:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80103bc:	bd70      	pop	{r4, r5, r6, pc}
 80103be:	3018      	adds	r0, #24
 80103c0:	f000 f89c 	bl	80104fc <rmw_destroy_node>
 80103c4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80103c6:	4606      	mov	r6, r0
 80103c8:	2c00      	cmp	r4, #0
 80103ca:	d1da      	bne.n	8010382 <rmw_context_fini+0xe>
 80103cc:	e7e0      	b.n	8010390 <rmw_context_fini+0x1c>
 80103ce:	4626      	mov	r6, r4
 80103d0:	e7de      	b.n	8010390 <rmw_context_fini+0x1c>
 80103d2:	bf00      	nop
 80103d4:	2401381c 	.word	0x2401381c

080103d8 <create_node>:
 80103d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103dc:	b083      	sub	sp, #12
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d064      	beq.n	80104ac <create_node+0xd4>
 80103e2:	4606      	mov	r6, r0
 80103e4:	4838      	ldr	r0, [pc, #224]	@ (80104c8 <create_node+0xf0>)
 80103e6:	460f      	mov	r7, r1
 80103e8:	4690      	mov	r8, r2
 80103ea:	461d      	mov	r5, r3
 80103ec:	f00a f9ba 	bl	801a764 <get_memory>
 80103f0:	2800      	cmp	r0, #0
 80103f2:	d05b      	beq.n	80104ac <create_node+0xd4>
 80103f4:	6884      	ldr	r4, [r0, #8]
 80103f6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80103f8:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80103fc:	f104 0518 	add.w	r5, r4, #24
 8010400:	6123      	str	r3, [r4, #16]
 8010402:	f00a fa17 	bl	801a834 <rmw_get_implementation_identifier>
 8010406:	f8c4 9020 	str.w	r9, [r4, #32]
 801040a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801040e:	4630      	mov	r0, r6
 8010410:	f7ef ff70 	bl	80002f4 <strlen>
 8010414:	1c42      	adds	r2, r0, #1
 8010416:	2a3c      	cmp	r2, #60	@ 0x3c
 8010418:	d840      	bhi.n	801049c <create_node+0xc4>
 801041a:	4648      	mov	r0, r9
 801041c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8010420:	4631      	mov	r1, r6
 8010422:	f00c fdf2 	bl	801d00a <memcpy>
 8010426:	4638      	mov	r0, r7
 8010428:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801042c:	f7ef ff62 	bl	80002f4 <strlen>
 8010430:	1c42      	adds	r2, r0, #1
 8010432:	2a3c      	cmp	r2, #60	@ 0x3c
 8010434:	d832      	bhi.n	801049c <create_node+0xc4>
 8010436:	4639      	mov	r1, r7
 8010438:	4648      	mov	r0, r9
 801043a:	f00c fde6 	bl	801d00a <memcpy>
 801043e:	6923      	ldr	r3, [r4, #16]
 8010440:	2101      	movs	r1, #1
 8010442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010446:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801044a:	1842      	adds	r2, r0, r1
 801044c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010450:	f003 fb8e 	bl	8013b70 <uxr_object_id>
 8010454:	6160      	str	r0, [r4, #20]
 8010456:	783b      	ldrb	r3, [r7, #0]
 8010458:	2b2f      	cmp	r3, #47	@ 0x2f
 801045a:	d12c      	bne.n	80104b6 <create_node+0xde>
 801045c:	787b      	ldrb	r3, [r7, #1]
 801045e:	bb53      	cbnz	r3, 80104b6 <create_node+0xde>
 8010460:	4633      	mov	r3, r6
 8010462:	4a1a      	ldr	r2, [pc, #104]	@ (80104cc <create_node+0xf4>)
 8010464:	213c      	movs	r1, #60	@ 0x3c
 8010466:	481a      	ldr	r0, [pc, #104]	@ (80104d0 <create_node+0xf8>)
 8010468:	f00c fb98 	bl	801cb9c <sniprintf>
 801046c:	6920      	ldr	r0, [r4, #16]
 801046e:	2106      	movs	r1, #6
 8010470:	fa1f f388 	uxth.w	r3, r8
 8010474:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010478:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801047c:	9101      	str	r1, [sp, #4]
 801047e:	4914      	ldr	r1, [pc, #80]	@ (80104d0 <create_node+0xf8>)
 8010480:	9100      	str	r1, [sp, #0]
 8010482:	6811      	ldr	r1, [r2, #0]
 8010484:	6962      	ldr	r2, [r4, #20]
 8010486:	f003 f9a7 	bl	80137d8 <uxr_buffer_create_participant_bin>
 801048a:	4602      	mov	r2, r0
 801048c:	6920      	ldr	r0, [r4, #16]
 801048e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010492:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010496:	f000 fe25 	bl	80110e4 <run_xrce_session>
 801049a:	b918      	cbnz	r0, 80104a4 <create_node+0xcc>
 801049c:	4628      	mov	r0, r5
 801049e:	2500      	movs	r5, #0
 80104a0:	f000 fca4 	bl	8010dec <rmw_uxrce_fini_node_memory>
 80104a4:	4628      	mov	r0, r5
 80104a6:	b003      	add	sp, #12
 80104a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104ac:	2500      	movs	r5, #0
 80104ae:	4628      	mov	r0, r5
 80104b0:	b003      	add	sp, #12
 80104b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104b6:	463b      	mov	r3, r7
 80104b8:	4a06      	ldr	r2, [pc, #24]	@ (80104d4 <create_node+0xfc>)
 80104ba:	213c      	movs	r1, #60	@ 0x3c
 80104bc:	9600      	str	r6, [sp, #0]
 80104be:	4804      	ldr	r0, [pc, #16]	@ (80104d0 <create_node+0xf8>)
 80104c0:	f00c fb6c 	bl	801cb9c <sniprintf>
 80104c4:	e7d2      	b.n	801046c <create_node+0x94>
 80104c6:	bf00      	nop
 80104c8:	2401381c 	.word	0x2401381c
 80104cc:	0801df3c 	.word	0x0801df3c
 80104d0:	2400ef10 	.word	0x2400ef10
 80104d4:	0801df00 	.word	0x0801df00

080104d8 <rmw_create_node>:
 80104d8:	468c      	mov	ip, r1
 80104da:	4611      	mov	r1, r2
 80104dc:	f1bc 0f00 	cmp.w	ip, #0
 80104e0:	d00a      	beq.n	80104f8 <rmw_create_node+0x20>
 80104e2:	f89c 3000 	ldrb.w	r3, [ip]
 80104e6:	b13b      	cbz	r3, 80104f8 <rmw_create_node+0x20>
 80104e8:	b132      	cbz	r2, 80104f8 <rmw_create_node+0x20>
 80104ea:	7813      	ldrb	r3, [r2, #0]
 80104ec:	b123      	cbz	r3, 80104f8 <rmw_create_node+0x20>
 80104ee:	4603      	mov	r3, r0
 80104f0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80104f2:	4660      	mov	r0, ip
 80104f4:	f7ff bf70 	b.w	80103d8 <create_node>
 80104f8:	2000      	movs	r0, #0
 80104fa:	4770      	bx	lr

080104fc <rmw_destroy_node>:
 80104fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fe:	b328      	cbz	r0, 801054c <rmw_destroy_node+0x50>
 8010500:	4607      	mov	r7, r0
 8010502:	6800      	ldr	r0, [r0, #0]
 8010504:	b120      	cbz	r0, 8010510 <rmw_destroy_node+0x14>
 8010506:	4b37      	ldr	r3, [pc, #220]	@ (80105e4 <rmw_destroy_node+0xe8>)
 8010508:	6819      	ldr	r1, [r3, #0]
 801050a:	f7ef fee9 	bl	80002e0 <strcmp>
 801050e:	b9e8      	cbnz	r0, 801054c <rmw_destroy_node+0x50>
 8010510:	687d      	ldr	r5, [r7, #4]
 8010512:	b1dd      	cbz	r5, 801054c <rmw_destroy_node+0x50>
 8010514:	4b34      	ldr	r3, [pc, #208]	@ (80105e8 <rmw_destroy_node+0xec>)
 8010516:	681c      	ldr	r4, [r3, #0]
 8010518:	2c00      	cmp	r4, #0
 801051a:	d060      	beq.n	80105de <rmw_destroy_node+0xe2>
 801051c:	2600      	movs	r6, #0
 801051e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010522:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8010526:	429d      	cmp	r5, r3
 8010528:	d013      	beq.n	8010552 <rmw_destroy_node+0x56>
 801052a:	2c00      	cmp	r4, #0
 801052c:	d1f7      	bne.n	801051e <rmw_destroy_node+0x22>
 801052e:	4b2f      	ldr	r3, [pc, #188]	@ (80105ec <rmw_destroy_node+0xf0>)
 8010530:	681c      	ldr	r4, [r3, #0]
 8010532:	b1c4      	cbz	r4, 8010566 <rmw_destroy_node+0x6a>
 8010534:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010538:	6a0b      	ldr	r3, [r1, #32]
 801053a:	429d      	cmp	r5, r3
 801053c:	d1f9      	bne.n	8010532 <rmw_destroy_node+0x36>
 801053e:	317c      	adds	r1, #124	@ 0x7c
 8010540:	4638      	mov	r0, r7
 8010542:	f000 fa53 	bl	80109ec <rmw_destroy_subscription>
 8010546:	2801      	cmp	r0, #1
 8010548:	4606      	mov	r6, r0
 801054a:	d1f2      	bne.n	8010532 <rmw_destroy_node+0x36>
 801054c:	2601      	movs	r6, #1
 801054e:	4630      	mov	r0, r6
 8010550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010552:	3184      	adds	r1, #132	@ 0x84
 8010554:	4638      	mov	r0, r7
 8010556:	f000 f9b1 	bl	80108bc <rmw_destroy_publisher>
 801055a:	2801      	cmp	r0, #1
 801055c:	4606      	mov	r6, r0
 801055e:	d0f5      	beq.n	801054c <rmw_destroy_node+0x50>
 8010560:	2c00      	cmp	r4, #0
 8010562:	d1dc      	bne.n	801051e <rmw_destroy_node+0x22>
 8010564:	e7e3      	b.n	801052e <rmw_destroy_node+0x32>
 8010566:	4b22      	ldr	r3, [pc, #136]	@ (80105f0 <rmw_destroy_node+0xf4>)
 8010568:	681c      	ldr	r4, [r3, #0]
 801056a:	b16c      	cbz	r4, 8010588 <rmw_destroy_node+0x8c>
 801056c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010570:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010572:	429d      	cmp	r5, r3
 8010574:	d1f9      	bne.n	801056a <rmw_destroy_node+0x6e>
 8010576:	317c      	adds	r1, #124	@ 0x7c
 8010578:	4638      	mov	r0, r7
 801057a:	f000 f9f3 	bl	8010964 <rmw_destroy_service>
 801057e:	2801      	cmp	r0, #1
 8010580:	4606      	mov	r6, r0
 8010582:	d0e3      	beq.n	801054c <rmw_destroy_node+0x50>
 8010584:	2c00      	cmp	r4, #0
 8010586:	d1f1      	bne.n	801056c <rmw_destroy_node+0x70>
 8010588:	4b1a      	ldr	r3, [pc, #104]	@ (80105f4 <rmw_destroy_node+0xf8>)
 801058a:	681c      	ldr	r4, [r3, #0]
 801058c:	b16c      	cbz	r4, 80105aa <rmw_destroy_node+0xae>
 801058e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010592:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010594:	429d      	cmp	r5, r3
 8010596:	d1f9      	bne.n	801058c <rmw_destroy_node+0x90>
 8010598:	317c      	adds	r1, #124	@ 0x7c
 801059a:	4638      	mov	r0, r7
 801059c:	f00a f906 	bl	801a7ac <rmw_destroy_client>
 80105a0:	2801      	cmp	r0, #1
 80105a2:	4606      	mov	r6, r0
 80105a4:	d0d2      	beq.n	801054c <rmw_destroy_node+0x50>
 80105a6:	2c00      	cmp	r4, #0
 80105a8:	d1f1      	bne.n	801058e <rmw_destroy_node+0x92>
 80105aa:	6928      	ldr	r0, [r5, #16]
 80105ac:	696a      	ldr	r2, [r5, #20]
 80105ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105b6:	6819      	ldr	r1, [r3, #0]
 80105b8:	f003 f8c2 	bl	8013740 <uxr_buffer_delete_entity>
 80105bc:	4602      	mov	r2, r0
 80105be:	6928      	ldr	r0, [r5, #16]
 80105c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105c8:	f000 fd8c 	bl	80110e4 <run_xrce_session>
 80105cc:	4603      	mov	r3, r0
 80105ce:	4638      	mov	r0, r7
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	bf08      	it	eq
 80105d4:	2602      	moveq	r6, #2
 80105d6:	f000 fc09 	bl	8010dec <rmw_uxrce_fini_node_memory>
 80105da:	4630      	mov	r0, r6
 80105dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105de:	4626      	mov	r6, r4
 80105e0:	e7a5      	b.n	801052e <rmw_destroy_node+0x32>
 80105e2:	bf00      	nop
 80105e4:	0801eb14 	.word	0x0801eb14
 80105e8:	2401382c 	.word	0x2401382c
 80105ec:	2401386c 	.word	0x2401386c
 80105f0:	2401383c 	.word	0x2401383c
 80105f4:	2400ef4c 	.word	0x2400ef4c

080105f8 <rmw_node_get_graph_guard_condition>:
 80105f8:	6843      	ldr	r3, [r0, #4]
 80105fa:	6918      	ldr	r0, [r3, #16]
 80105fc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop

08010604 <flush_session>:
 8010604:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8010606:	f004 b8b3 	b.w	8014770 <uxr_run_session_until_confirm_delivery>
 801060a:	bf00      	nop

0801060c <rmw_publish>:
 801060c:	2800      	cmp	r0, #0
 801060e:	d053      	beq.n	80106b8 <rmw_publish+0xac>
 8010610:	b570      	push	{r4, r5, r6, lr}
 8010612:	460d      	mov	r5, r1
 8010614:	b08e      	sub	sp, #56	@ 0x38
 8010616:	2900      	cmp	r1, #0
 8010618:	d04b      	beq.n	80106b2 <rmw_publish+0xa6>
 801061a:	4604      	mov	r4, r0
 801061c:	6800      	ldr	r0, [r0, #0]
 801061e:	f000 fddb 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 8010622:	2800      	cmp	r0, #0
 8010624:	d045      	beq.n	80106b2 <rmw_publish+0xa6>
 8010626:	6866      	ldr	r6, [r4, #4]
 8010628:	2e00      	cmp	r6, #0
 801062a:	d042      	beq.n	80106b2 <rmw_publish+0xa6>
 801062c:	69b4      	ldr	r4, [r6, #24]
 801062e:	4628      	mov	r0, r5
 8010630:	6923      	ldr	r3, [r4, #16]
 8010632:	4798      	blx	r3
 8010634:	69f3      	ldr	r3, [r6, #28]
 8010636:	9005      	str	r0, [sp, #20]
 8010638:	b113      	cbz	r3, 8010640 <rmw_publish+0x34>
 801063a:	a805      	add	r0, sp, #20
 801063c:	4798      	blx	r3
 801063e:	9805      	ldr	r0, [sp, #20]
 8010640:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	9000      	str	r0, [sp, #0]
 8010648:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801064c:	6972      	ldr	r2, [r6, #20]
 801064e:	ab06      	add	r3, sp, #24
 8010650:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010652:	f005 fb5d 	bl	8015d10 <uxr_prepare_output_stream>
 8010656:	b1d8      	cbz	r0, 8010690 <rmw_publish+0x84>
 8010658:	68a3      	ldr	r3, [r4, #8]
 801065a:	a906      	add	r1, sp, #24
 801065c:	4628      	mov	r0, r5
 801065e:	4798      	blx	r3
 8010660:	6a33      	ldr	r3, [r6, #32]
 8010662:	4604      	mov	r4, r0
 8010664:	b10b      	cbz	r3, 801066a <rmw_publish+0x5e>
 8010666:	a806      	add	r0, sp, #24
 8010668:	4798      	blx	r3
 801066a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801066e:	2b01      	cmp	r3, #1
 8010670:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010674:	d022      	beq.n	80106bc <rmw_publish+0xb0>
 8010676:	6918      	ldr	r0, [r3, #16]
 8010678:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801067a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801067e:	f004 f877 	bl	8014770 <uxr_run_session_until_confirm_delivery>
 8010682:	4020      	ands	r0, r4
 8010684:	b2c4      	uxtb	r4, r0
 8010686:	f084 0001 	eor.w	r0, r4, #1
 801068a:	b2c0      	uxtb	r0, r0
 801068c:	b00e      	add	sp, #56	@ 0x38
 801068e:	bd70      	pop	{r4, r5, r6, pc}
 8010690:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010694:	6918      	ldr	r0, [r3, #16]
 8010696:	9b05      	ldr	r3, [sp, #20]
 8010698:	9602      	str	r6, [sp, #8]
 801069a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	4b09      	ldr	r3, [pc, #36]	@ (80106c8 <rmw_publish+0xbc>)
 80106a2:	9301      	str	r3, [sp, #4]
 80106a4:	ab06      	add	r3, sp, #24
 80106a6:	6972      	ldr	r2, [r6, #20]
 80106a8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80106aa:	f005 fb61 	bl	8015d70 <uxr_prepare_output_stream_fragmented>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d1d2      	bne.n	8010658 <rmw_publish+0x4c>
 80106b2:	2001      	movs	r0, #1
 80106b4:	b00e      	add	sp, #56	@ 0x38
 80106b6:	bd70      	pop	{r4, r5, r6, pc}
 80106b8:	2001      	movs	r0, #1
 80106ba:	4770      	bx	lr
 80106bc:	6918      	ldr	r0, [r3, #16]
 80106be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106c2:	f003 fc9b 	bl	8013ffc <uxr_flash_output_streams>
 80106c6:	e7de      	b.n	8010686 <rmw_publish+0x7a>
 80106c8:	08010605 	.word	0x08010605

080106cc <rmw_create_publisher>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	b087      	sub	sp, #28
 80106d2:	2800      	cmp	r0, #0
 80106d4:	f000 80d2 	beq.w	801087c <rmw_create_publisher+0x1b0>
 80106d8:	460e      	mov	r6, r1
 80106da:	2900      	cmp	r1, #0
 80106dc:	f000 80ce 	beq.w	801087c <rmw_create_publisher+0x1b0>
 80106e0:	4604      	mov	r4, r0
 80106e2:	6800      	ldr	r0, [r0, #0]
 80106e4:	4615      	mov	r5, r2
 80106e6:	461f      	mov	r7, r3
 80106e8:	f000 fd76 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 80106ec:	f080 0001 	eor.w	r0, r0, #1
 80106f0:	b2c0      	uxtb	r0, r0
 80106f2:	2800      	cmp	r0, #0
 80106f4:	f040 80c2 	bne.w	801087c <rmw_create_publisher+0x1b0>
 80106f8:	2d00      	cmp	r5, #0
 80106fa:	f000 80bf 	beq.w	801087c <rmw_create_publisher+0x1b0>
 80106fe:	782b      	ldrb	r3, [r5, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	f000 80bb 	beq.w	801087c <rmw_create_publisher+0x1b0>
 8010706:	2f00      	cmp	r7, #0
 8010708:	f000 80b8 	beq.w	801087c <rmw_create_publisher+0x1b0>
 801070c:	485e      	ldr	r0, [pc, #376]	@ (8010888 <rmw_create_publisher+0x1bc>)
 801070e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010712:	f00a f827 	bl	801a764 <get_memory>
 8010716:	2800      	cmp	r0, #0
 8010718:	f000 80b0 	beq.w	801087c <rmw_create_publisher+0x1b0>
 801071c:	6884      	ldr	r4, [r0, #8]
 801071e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8010722:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010726:	f00a f885 	bl	801a834 <rmw_get_implementation_identifier>
 801072a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801072e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010732:	4628      	mov	r0, r5
 8010734:	f7ef fdde 	bl	80002f4 <strlen>
 8010738:	3001      	adds	r0, #1
 801073a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801073e:	283c      	cmp	r0, #60	@ 0x3c
 8010740:	f200 808f 	bhi.w	8010862 <rmw_create_publisher+0x196>
 8010744:	462b      	mov	r3, r5
 8010746:	4a51      	ldr	r2, [pc, #324]	@ (801088c <rmw_create_publisher+0x1c0>)
 8010748:	213c      	movs	r1, #60	@ 0x3c
 801074a:	4650      	mov	r0, sl
 801074c:	f00c fa26 	bl	801cb9c <sniprintf>
 8010750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010754:	4639      	mov	r1, r7
 8010756:	2250      	movs	r2, #80	@ 0x50
 8010758:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801075a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801075e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8010762:	f00c fc52 	bl	801d00a <memcpy>
 8010766:	7a3b      	ldrb	r3, [r7, #8]
 8010768:	4630      	mov	r0, r6
 801076a:	4949      	ldr	r1, [pc, #292]	@ (8010890 <rmw_create_publisher+0x1c4>)
 801076c:	2b02      	cmp	r3, #2
 801076e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010772:	bf0c      	ite	eq
 8010774:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8010778:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801077c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801077e:	2300      	movs	r3, #0
 8010780:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010784:	f000 fd36 	bl	80111f4 <get_message_typesupport_handle>
 8010788:	2800      	cmp	r0, #0
 801078a:	d06a      	beq.n	8010862 <rmw_create_publisher+0x196>
 801078c:	6842      	ldr	r2, [r0, #4]
 801078e:	61a2      	str	r2, [r4, #24]
 8010790:	2a00      	cmp	r2, #0
 8010792:	d066      	beq.n	8010862 <rmw_create_publisher+0x196>
 8010794:	4629      	mov	r1, r5
 8010796:	463b      	mov	r3, r7
 8010798:	4648      	mov	r0, r9
 801079a:	f00a f851 	bl	801a840 <create_topic>
 801079e:	6260      	str	r0, [r4, #36]	@ 0x24
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d062      	beq.n	801086a <rmw_create_publisher+0x19e>
 80107a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107a8:	2103      	movs	r1, #3
 80107aa:	2506      	movs	r5, #6
 80107ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107b0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80107b4:	1c42      	adds	r2, r0, #1
 80107b6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80107ba:	f003 f9d9 	bl	8013b70 <uxr_object_id>
 80107be:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80107c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107c6:	6120      	str	r0, [r4, #16]
 80107c8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80107cc:	6910      	ldr	r0, [r2, #16]
 80107ce:	9500      	str	r5, [sp, #0]
 80107d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80107d4:	6819      	ldr	r1, [r3, #0]
 80107d6:	6922      	ldr	r2, [r4, #16]
 80107d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80107dc:	f003 f864 	bl	80138a8 <uxr_buffer_create_publisher_bin>
 80107e0:	4602      	mov	r2, r0
 80107e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80107e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80107ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80107ee:	f000 fc79 	bl	80110e4 <run_xrce_session>
 80107f2:	b3b0      	cbz	r0, 8010862 <rmw_create_publisher+0x196>
 80107f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107f8:	2105      	movs	r1, #5
 80107fa:	f10d 0a10 	add.w	sl, sp, #16
 80107fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010802:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010806:	1c42      	adds	r2, r0, #1
 8010808:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801080c:	f003 f9b0 	bl	8013b70 <uxr_object_id>
 8010810:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010814:	4639      	mov	r1, r7
 8010816:	6160      	str	r0, [r4, #20]
 8010818:	691e      	ldr	r6, [r3, #16]
 801081a:	4650      	mov	r0, sl
 801081c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010820:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010824:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010828:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801082c:	f000 fc76 	bl	801111c <convert_qos_profile>
 8010830:	9503      	str	r5, [sp, #12]
 8010832:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010836:	9001      	str	r0, [sp, #4]
 8010838:	4630      	mov	r0, r6
 801083a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801083e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	6839      	ldr	r1, [r7, #0]
 8010846:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801084a:	f003 f85d 	bl	8013908 <uxr_buffer_create_datawriter_bin>
 801084e:	4602      	mov	r2, r0
 8010850:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010854:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010858:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801085c:	f000 fc42 	bl	80110e4 <run_xrce_session>
 8010860:	b970      	cbnz	r0, 8010880 <rmw_create_publisher+0x1b4>
 8010862:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010864:	b108      	cbz	r0, 801086a <rmw_create_publisher+0x19e>
 8010866:	f000 fb31 	bl	8010ecc <rmw_uxrce_fini_topic_memory>
 801086a:	4640      	mov	r0, r8
 801086c:	f04f 0800 	mov.w	r8, #0
 8010870:	f000 fad4 	bl	8010e1c <rmw_uxrce_fini_publisher_memory>
 8010874:	4640      	mov	r0, r8
 8010876:	b007      	add	sp, #28
 8010878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087c:	f04f 0800 	mov.w	r8, #0
 8010880:	4640      	mov	r0, r8
 8010882:	b007      	add	sp, #28
 8010884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010888:	2401382c 	.word	0x2401382c
 801088c:	0801df3c 	.word	0x0801df3c
 8010890:	0801df08 	.word	0x0801df08

08010894 <rmw_publisher_get_actual_qos>:
 8010894:	b178      	cbz	r0, 80108b6 <rmw_publisher_get_actual_qos+0x22>
 8010896:	b510      	push	{r4, lr}
 8010898:	fab1 f481 	clz	r4, r1
 801089c:	0964      	lsrs	r4, r4, #5
 801089e:	b141      	cbz	r1, 80108b2 <rmw_publisher_get_actual_qos+0x1e>
 80108a0:	6843      	ldr	r3, [r0, #4]
 80108a2:	2250      	movs	r2, #80	@ 0x50
 80108a4:	4608      	mov	r0, r1
 80108a6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80108aa:	f00c fbae 	bl	801d00a <memcpy>
 80108ae:	4620      	mov	r0, r4
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	200b      	movs	r0, #11
 80108b4:	bd10      	pop	{r4, pc}
 80108b6:	200b      	movs	r0, #11
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop

080108bc <rmw_destroy_publisher>:
 80108bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c0:	b128      	cbz	r0, 80108ce <rmw_destroy_publisher+0x12>
 80108c2:	4604      	mov	r4, r0
 80108c4:	6800      	ldr	r0, [r0, #0]
 80108c6:	460d      	mov	r5, r1
 80108c8:	f000 fc86 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 80108cc:	b918      	cbnz	r0, 80108d6 <rmw_destroy_publisher+0x1a>
 80108ce:	2401      	movs	r4, #1
 80108d0:	4620      	mov	r0, r4
 80108d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d6:	6863      	ldr	r3, [r4, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d0f8      	beq.n	80108ce <rmw_destroy_publisher+0x12>
 80108dc:	fab5 f485 	clz	r4, r5
 80108e0:	0964      	lsrs	r4, r4, #5
 80108e2:	2d00      	cmp	r5, #0
 80108e4:	d0f3      	beq.n	80108ce <rmw_destroy_publisher+0x12>
 80108e6:	6828      	ldr	r0, [r5, #0]
 80108e8:	f000 fc76 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	d0ee      	beq.n	80108ce <rmw_destroy_publisher+0x12>
 80108f0:	686e      	ldr	r6, [r5, #4]
 80108f2:	2e00      	cmp	r6, #0
 80108f4:	d0eb      	beq.n	80108ce <rmw_destroy_publisher+0x12>
 80108f6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80108f8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 80108fc:	f009 fff0 	bl	801a8e0 <destroy_topic>
 8010900:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010904:	6972      	ldr	r2, [r6, #20]
 8010906:	6918      	ldr	r0, [r3, #16]
 8010908:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801090c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010910:	6819      	ldr	r1, [r3, #0]
 8010912:	f002 ff15 	bl	8013740 <uxr_buffer_delete_entity>
 8010916:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801091a:	4680      	mov	r8, r0
 801091c:	6932      	ldr	r2, [r6, #16]
 801091e:	6918      	ldr	r0, [r3, #16]
 8010920:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010924:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010928:	6819      	ldr	r1, [r3, #0]
 801092a:	f002 ff09 	bl	8013740 <uxr_buffer_delete_entity>
 801092e:	4606      	mov	r6, r0
 8010930:	6938      	ldr	r0, [r7, #16]
 8010932:	4642      	mov	r2, r8
 8010934:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010938:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801093c:	f000 fbd2 	bl	80110e4 <run_xrce_session>
 8010940:	693f      	ldr	r7, [r7, #16]
 8010942:	4632      	mov	r2, r6
 8010944:	4606      	mov	r6, r0
 8010946:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801094a:	4638      	mov	r0, r7
 801094c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010950:	f000 fbc8 	bl	80110e4 <run_xrce_session>
 8010954:	b126      	cbz	r6, 8010960 <rmw_destroy_publisher+0xa4>
 8010956:	b118      	cbz	r0, 8010960 <rmw_destroy_publisher+0xa4>
 8010958:	4628      	mov	r0, r5
 801095a:	f000 fa5f 	bl	8010e1c <rmw_uxrce_fini_publisher_memory>
 801095e:	e7b7      	b.n	80108d0 <rmw_destroy_publisher+0x14>
 8010960:	2402      	movs	r4, #2
 8010962:	e7f9      	b.n	8010958 <rmw_destroy_publisher+0x9c>

08010964 <rmw_destroy_service>:
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	b128      	cbz	r0, 8010974 <rmw_destroy_service+0x10>
 8010968:	4604      	mov	r4, r0
 801096a:	6800      	ldr	r0, [r0, #0]
 801096c:	460d      	mov	r5, r1
 801096e:	f000 fc33 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 8010972:	b910      	cbnz	r0, 801097a <rmw_destroy_service+0x16>
 8010974:	2401      	movs	r4, #1
 8010976:	4620      	mov	r0, r4
 8010978:	bd70      	pop	{r4, r5, r6, pc}
 801097a:	6863      	ldr	r3, [r4, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d0f9      	beq.n	8010974 <rmw_destroy_service+0x10>
 8010980:	2d00      	cmp	r5, #0
 8010982:	d0f7      	beq.n	8010974 <rmw_destroy_service+0x10>
 8010984:	6828      	ldr	r0, [r5, #0]
 8010986:	f000 fc27 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 801098a:	2800      	cmp	r0, #0
 801098c:	d0f2      	beq.n	8010974 <rmw_destroy_service+0x10>
 801098e:	686e      	ldr	r6, [r5, #4]
 8010990:	2e00      	cmp	r6, #0
 8010992:	d0ef      	beq.n	8010974 <rmw_destroy_service+0x10>
 8010994:	6864      	ldr	r4, [r4, #4]
 8010996:	6932      	ldr	r2, [r6, #16]
 8010998:	6920      	ldr	r0, [r4, #16]
 801099a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801099e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109a2:	6819      	ldr	r1, [r3, #0]
 80109a4:	f003 f914 	bl	8013bd0 <uxr_buffer_cancel_data>
 80109a8:	4602      	mov	r2, r0
 80109aa:	6920      	ldr	r0, [r4, #16]
 80109ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109b4:	f000 fb96 	bl	80110e4 <run_xrce_session>
 80109b8:	6920      	ldr	r0, [r4, #16]
 80109ba:	6932      	ldr	r2, [r6, #16]
 80109bc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80109c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109c4:	6819      	ldr	r1, [r3, #0]
 80109c6:	f002 febb 	bl	8013740 <uxr_buffer_delete_entity>
 80109ca:	4602      	mov	r2, r0
 80109cc:	6920      	ldr	r0, [r4, #16]
 80109ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109d2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109d6:	f000 fb85 	bl	80110e4 <run_xrce_session>
 80109da:	4603      	mov	r3, r0
 80109dc:	4628      	mov	r0, r5
 80109de:	2b00      	cmp	r3, #0
 80109e0:	bf14      	ite	ne
 80109e2:	2400      	movne	r4, #0
 80109e4:	2402      	moveq	r4, #2
 80109e6:	f000 fa45 	bl	8010e74 <rmw_uxrce_fini_service_memory>
 80109ea:	e7c4      	b.n	8010976 <rmw_destroy_service+0x12>

080109ec <rmw_destroy_subscription>:
 80109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f0:	b128      	cbz	r0, 80109fe <rmw_destroy_subscription+0x12>
 80109f2:	4604      	mov	r4, r0
 80109f4:	6800      	ldr	r0, [r0, #0]
 80109f6:	460d      	mov	r5, r1
 80109f8:	f000 fbee 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 80109fc:	b918      	cbnz	r0, 8010a06 <rmw_destroy_subscription+0x1a>
 80109fe:	2401      	movs	r4, #1
 8010a00:	4620      	mov	r0, r4
 8010a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a06:	6863      	ldr	r3, [r4, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d0f8      	beq.n	80109fe <rmw_destroy_subscription+0x12>
 8010a0c:	fab5 f485 	clz	r4, r5
 8010a10:	0964      	lsrs	r4, r4, #5
 8010a12:	2d00      	cmp	r5, #0
 8010a14:	d0f3      	beq.n	80109fe <rmw_destroy_subscription+0x12>
 8010a16:	6828      	ldr	r0, [r5, #0]
 8010a18:	f000 fbde 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d0ee      	beq.n	80109fe <rmw_destroy_subscription+0x12>
 8010a20:	686e      	ldr	r6, [r5, #4]
 8010a22:	2e00      	cmp	r6, #0
 8010a24:	d0eb      	beq.n	80109fe <rmw_destroy_subscription+0x12>
 8010a26:	6a37      	ldr	r7, [r6, #32]
 8010a28:	6972      	ldr	r2, [r6, #20]
 8010a2a:	6938      	ldr	r0, [r7, #16]
 8010a2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a34:	6819      	ldr	r1, [r3, #0]
 8010a36:	f003 f8cb 	bl	8013bd0 <uxr_buffer_cancel_data>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	6938      	ldr	r0, [r7, #16]
 8010a3e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010a42:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010a46:	f000 fb4d 	bl	80110e4 <run_xrce_session>
 8010a4a:	69f0      	ldr	r0, [r6, #28]
 8010a4c:	f009 ff48 	bl	801a8e0 <destroy_topic>
 8010a50:	6a33      	ldr	r3, [r6, #32]
 8010a52:	6972      	ldr	r2, [r6, #20]
 8010a54:	6918      	ldr	r0, [r3, #16]
 8010a56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a5e:	6819      	ldr	r1, [r3, #0]
 8010a60:	f002 fe6e 	bl	8013740 <uxr_buffer_delete_entity>
 8010a64:	6a33      	ldr	r3, [r6, #32]
 8010a66:	4680      	mov	r8, r0
 8010a68:	6932      	ldr	r2, [r6, #16]
 8010a6a:	6918      	ldr	r0, [r3, #16]
 8010a6c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a74:	6819      	ldr	r1, [r3, #0]
 8010a76:	f002 fe63 	bl	8013740 <uxr_buffer_delete_entity>
 8010a7a:	4606      	mov	r6, r0
 8010a7c:	6938      	ldr	r0, [r7, #16]
 8010a7e:	4642      	mov	r2, r8
 8010a80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010a84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010a88:	f000 fb2c 	bl	80110e4 <run_xrce_session>
 8010a8c:	693f      	ldr	r7, [r7, #16]
 8010a8e:	4632      	mov	r2, r6
 8010a90:	4606      	mov	r6, r0
 8010a92:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010a96:	4638      	mov	r0, r7
 8010a98:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010a9c:	f000 fb22 	bl	80110e4 <run_xrce_session>
 8010aa0:	b126      	cbz	r6, 8010aac <rmw_destroy_subscription+0xc0>
 8010aa2:	b118      	cbz	r0, 8010aac <rmw_destroy_subscription+0xc0>
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	f000 f9cf 	bl	8010e48 <rmw_uxrce_fini_subscription_memory>
 8010aaa:	e7a9      	b.n	8010a00 <rmw_destroy_subscription+0x14>
 8010aac:	2402      	movs	r4, #2
 8010aae:	e7f9      	b.n	8010aa4 <rmw_destroy_subscription+0xb8>

08010ab0 <rmw_uxrce_transport_init>:
 8010ab0:	b508      	push	{r3, lr}
 8010ab2:	b108      	cbz	r0, 8010ab8 <rmw_uxrce_transport_init+0x8>
 8010ab4:	f100 0210 	add.w	r2, r0, #16
 8010ab8:	b139      	cbz	r1, 8010aca <rmw_uxrce_transport_init+0x1a>
 8010aba:	6949      	ldr	r1, [r1, #20]
 8010abc:	4610      	mov	r0, r2
 8010abe:	f003 f81f 	bl	8013b00 <uxr_init_custom_transport>
 8010ac2:	f080 0001 	eor.w	r0, r0, #1
 8010ac6:	b2c0      	uxtb	r0, r0
 8010ac8:	bd08      	pop	{r3, pc}
 8010aca:	4b04      	ldr	r3, [pc, #16]	@ (8010adc <rmw_uxrce_transport_init+0x2c>)
 8010acc:	4610      	mov	r0, r2
 8010ace:	6859      	ldr	r1, [r3, #4]
 8010ad0:	f003 f816 	bl	8013b00 <uxr_init_custom_transport>
 8010ad4:	f080 0001 	eor.w	r0, r0, #1
 8010ad8:	b2c0      	uxtb	r0, r0
 8010ada:	bd08      	pop	{r3, pc}
 8010adc:	2400eef4 	.word	0x2400eef4

08010ae0 <rmw_uros_epoch_nanos>:
 8010ae0:	4b05      	ldr	r3, [pc, #20]	@ (8010af8 <rmw_uros_epoch_nanos+0x18>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	b123      	cbz	r3, 8010af0 <rmw_uros_epoch_nanos+0x10>
 8010ae6:	6898      	ldr	r0, [r3, #8]
 8010ae8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010aec:	f003 ba7c 	b.w	8013fe8 <uxr_epoch_nanos>
 8010af0:	2000      	movs	r0, #0
 8010af2:	2100      	movs	r1, #0
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	2401384c 	.word	0x2401384c

08010afc <rmw_uros_sync_session>:
 8010afc:	b508      	push	{r3, lr}
 8010afe:	4b07      	ldr	r3, [pc, #28]	@ (8010b1c <rmw_uros_sync_session+0x20>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	b14b      	cbz	r3, 8010b18 <rmw_uros_sync_session+0x1c>
 8010b04:	4601      	mov	r1, r0
 8010b06:	6898      	ldr	r0, [r3, #8]
 8010b08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b0c:	f003 feac 	bl	8014868 <uxr_sync_session>
 8010b10:	f080 0001 	eor.w	r0, r0, #1
 8010b14:	b2c0      	uxtb	r0, r0
 8010b16:	bd08      	pop	{r3, pc}
 8010b18:	2001      	movs	r0, #1
 8010b1a:	bd08      	pop	{r3, pc}
 8010b1c:	2401384c 	.word	0x2401384c

08010b20 <rmw_uxrce_init_service_memory>:
 8010b20:	b1e2      	cbz	r2, 8010b5c <rmw_uxrce_init_service_memory+0x3c>
 8010b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b26:	7b05      	ldrb	r5, [r0, #12]
 8010b28:	4606      	mov	r6, r0
 8010b2a:	b9ad      	cbnz	r5, 8010b58 <rmw_uxrce_init_service_memory+0x38>
 8010b2c:	23c8      	movs	r3, #200	@ 0xc8
 8010b2e:	4617      	mov	r7, r2
 8010b30:	460c      	mov	r4, r1
 8010b32:	46a8      	mov	r8, r5
 8010b34:	6083      	str	r3, [r0, #8]
 8010b36:	f240 1301 	movw	r3, #257	@ 0x101
 8010b3a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b3e:	8183      	strh	r3, [r0, #12]
 8010b40:	3501      	adds	r5, #1
 8010b42:	4621      	mov	r1, r4
 8010b44:	4630      	mov	r0, r6
 8010b46:	f009 fe1d 	bl	801a784 <put_memory>
 8010b4a:	42af      	cmp	r7, r5
 8010b4c:	60a4      	str	r4, [r4, #8]
 8010b4e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010b52:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8010b56:	d1f3      	bne.n	8010b40 <rmw_uxrce_init_service_memory+0x20>
 8010b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop

08010b60 <rmw_uxrce_init_client_memory>:
 8010b60:	b1e2      	cbz	r2, 8010b9c <rmw_uxrce_init_client_memory+0x3c>
 8010b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b66:	7b05      	ldrb	r5, [r0, #12]
 8010b68:	4606      	mov	r6, r0
 8010b6a:	b9ad      	cbnz	r5, 8010b98 <rmw_uxrce_init_client_memory+0x38>
 8010b6c:	23c8      	movs	r3, #200	@ 0xc8
 8010b6e:	4617      	mov	r7, r2
 8010b70:	460c      	mov	r4, r1
 8010b72:	46a8      	mov	r8, r5
 8010b74:	6083      	str	r3, [r0, #8]
 8010b76:	f240 1301 	movw	r3, #257	@ 0x101
 8010b7a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b7e:	8183      	strh	r3, [r0, #12]
 8010b80:	3501      	adds	r5, #1
 8010b82:	4621      	mov	r1, r4
 8010b84:	4630      	mov	r0, r6
 8010b86:	f009 fdfd 	bl	801a784 <put_memory>
 8010b8a:	42af      	cmp	r7, r5
 8010b8c:	60a4      	str	r4, [r4, #8]
 8010b8e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010b92:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8010b96:	d1f3      	bne.n	8010b80 <rmw_uxrce_init_client_memory+0x20>
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop

08010ba0 <rmw_uxrce_init_publisher_memory>:
 8010ba0:	b1e2      	cbz	r2, 8010bdc <rmw_uxrce_init_publisher_memory+0x3c>
 8010ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba6:	7b05      	ldrb	r5, [r0, #12]
 8010ba8:	4606      	mov	r6, r0
 8010baa:	b9ad      	cbnz	r5, 8010bd8 <rmw_uxrce_init_publisher_memory+0x38>
 8010bac:	23d8      	movs	r3, #216	@ 0xd8
 8010bae:	4617      	mov	r7, r2
 8010bb0:	460c      	mov	r4, r1
 8010bb2:	46a8      	mov	r8, r5
 8010bb4:	6083      	str	r3, [r0, #8]
 8010bb6:	f240 1301 	movw	r3, #257	@ 0x101
 8010bba:	e9c0 5500 	strd	r5, r5, [r0]
 8010bbe:	8183      	strh	r3, [r0, #12]
 8010bc0:	3501      	adds	r5, #1
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	f009 fddd 	bl	801a784 <put_memory>
 8010bca:	42af      	cmp	r7, r5
 8010bcc:	60a4      	str	r4, [r4, #8]
 8010bce:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010bd2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8010bd6:	d1f3      	bne.n	8010bc0 <rmw_uxrce_init_publisher_memory+0x20>
 8010bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop

08010be0 <rmw_uxrce_init_subscription_memory>:
 8010be0:	b1e2      	cbz	r2, 8010c1c <rmw_uxrce_init_subscription_memory+0x3c>
 8010be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010be6:	7b05      	ldrb	r5, [r0, #12]
 8010be8:	4606      	mov	r6, r0
 8010bea:	b9ad      	cbnz	r5, 8010c18 <rmw_uxrce_init_subscription_memory+0x38>
 8010bec:	23d8      	movs	r3, #216	@ 0xd8
 8010bee:	4617      	mov	r7, r2
 8010bf0:	460c      	mov	r4, r1
 8010bf2:	46a8      	mov	r8, r5
 8010bf4:	6083      	str	r3, [r0, #8]
 8010bf6:	f240 1301 	movw	r3, #257	@ 0x101
 8010bfa:	e9c0 5500 	strd	r5, r5, [r0]
 8010bfe:	8183      	strh	r3, [r0, #12]
 8010c00:	3501      	adds	r5, #1
 8010c02:	4621      	mov	r1, r4
 8010c04:	4630      	mov	r0, r6
 8010c06:	f009 fdbd 	bl	801a784 <put_memory>
 8010c0a:	42af      	cmp	r7, r5
 8010c0c:	60a4      	str	r4, [r4, #8]
 8010c0e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010c12:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8010c16:	d1f3      	bne.n	8010c00 <rmw_uxrce_init_subscription_memory+0x20>
 8010c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop

08010c20 <rmw_uxrce_init_node_memory>:
 8010c20:	b1e2      	cbz	r2, 8010c5c <rmw_uxrce_init_node_memory+0x3c>
 8010c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c26:	7b05      	ldrb	r5, [r0, #12]
 8010c28:	4606      	mov	r6, r0
 8010c2a:	b9ad      	cbnz	r5, 8010c58 <rmw_uxrce_init_node_memory+0x38>
 8010c2c:	23a4      	movs	r3, #164	@ 0xa4
 8010c2e:	4617      	mov	r7, r2
 8010c30:	460c      	mov	r4, r1
 8010c32:	46a8      	mov	r8, r5
 8010c34:	6083      	str	r3, [r0, #8]
 8010c36:	f240 1301 	movw	r3, #257	@ 0x101
 8010c3a:	e9c0 5500 	strd	r5, r5, [r0]
 8010c3e:	8183      	strh	r3, [r0, #12]
 8010c40:	3501      	adds	r5, #1
 8010c42:	4621      	mov	r1, r4
 8010c44:	4630      	mov	r0, r6
 8010c46:	f009 fd9d 	bl	801a784 <put_memory>
 8010c4a:	42af      	cmp	r7, r5
 8010c4c:	60a4      	str	r4, [r4, #8]
 8010c4e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010c52:	f804 8c98 	strb.w	r8, [r4, #-152]
 8010c56:	d1f3      	bne.n	8010c40 <rmw_uxrce_init_node_memory+0x20>
 8010c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop

08010c60 <rmw_uxrce_init_session_memory>:
 8010c60:	b1ea      	cbz	r2, 8010c9e <rmw_uxrce_init_session_memory+0x3e>
 8010c62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c66:	7b05      	ldrb	r5, [r0, #12]
 8010c68:	4606      	mov	r6, r0
 8010c6a:	b9b5      	cbnz	r5, 8010c9a <rmw_uxrce_init_session_memory+0x3a>
 8010c6c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010c70:	f240 1301 	movw	r3, #257	@ 0x101
 8010c74:	4617      	mov	r7, r2
 8010c76:	460c      	mov	r4, r1
 8010c78:	46a9      	mov	r9, r5
 8010c7a:	f8c0 8008 	str.w	r8, [r0, #8]
 8010c7e:	8183      	strh	r3, [r0, #12]
 8010c80:	e9c0 5500 	strd	r5, r5, [r0]
 8010c84:	3501      	adds	r5, #1
 8010c86:	4621      	mov	r1, r4
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f009 fd7b 	bl	801a784 <put_memory>
 8010c8e:	42af      	cmp	r7, r5
 8010c90:	60a4      	str	r4, [r4, #8]
 8010c92:	f884 900c 	strb.w	r9, [r4, #12]
 8010c96:	4444      	add	r4, r8
 8010c98:	d1f4      	bne.n	8010c84 <rmw_uxrce_init_session_memory+0x24>
 8010c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c9e:	4770      	bx	lr

08010ca0 <rmw_uxrce_init_topic_memory>:
 8010ca0:	b1e2      	cbz	r2, 8010cdc <rmw_uxrce_init_topic_memory+0x3c>
 8010ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca6:	7b05      	ldrb	r5, [r0, #12]
 8010ca8:	4606      	mov	r6, r0
 8010caa:	b9ad      	cbnz	r5, 8010cd8 <rmw_uxrce_init_topic_memory+0x38>
 8010cac:	231c      	movs	r3, #28
 8010cae:	4617      	mov	r7, r2
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	46a8      	mov	r8, r5
 8010cb4:	6083      	str	r3, [r0, #8]
 8010cb6:	f240 1301 	movw	r3, #257	@ 0x101
 8010cba:	e9c0 5500 	strd	r5, r5, [r0]
 8010cbe:	8183      	strh	r3, [r0, #12]
 8010cc0:	3501      	adds	r5, #1
 8010cc2:	4621      	mov	r1, r4
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f009 fd5d 	bl	801a784 <put_memory>
 8010cca:	42af      	cmp	r7, r5
 8010ccc:	60a4      	str	r4, [r4, #8]
 8010cce:	f104 041c 	add.w	r4, r4, #28
 8010cd2:	f804 8c10 	strb.w	r8, [r4, #-16]
 8010cd6:	d1f3      	bne.n	8010cc0 <rmw_uxrce_init_topic_memory+0x20>
 8010cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop

08010ce0 <rmw_uxrce_init_static_input_buffer_memory>:
 8010ce0:	b1ea      	cbz	r2, 8010d1e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce6:	7b05      	ldrb	r5, [r0, #12]
 8010ce8:	4606      	mov	r6, r0
 8010cea:	b9b5      	cbnz	r5, 8010d1a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010cec:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010cf0:	4617      	mov	r7, r2
 8010cf2:	460c      	mov	r4, r1
 8010cf4:	46a8      	mov	r8, r5
 8010cf6:	6083      	str	r3, [r0, #8]
 8010cf8:	f240 1301 	movw	r3, #257	@ 0x101
 8010cfc:	e9c0 5500 	strd	r5, r5, [r0]
 8010d00:	8183      	strh	r3, [r0, #12]
 8010d02:	3501      	adds	r5, #1
 8010d04:	4621      	mov	r1, r4
 8010d06:	4630      	mov	r0, r6
 8010d08:	f009 fd3c 	bl	801a784 <put_memory>
 8010d0c:	42af      	cmp	r7, r5
 8010d0e:	60a4      	str	r4, [r4, #8]
 8010d10:	f884 800c 	strb.w	r8, [r4, #12]
 8010d14:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010d18:	d1f3      	bne.n	8010d02 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d1e:	4770      	bx	lr

08010d20 <rmw_uxrce_init_init_options_impl_memory>:
 8010d20:	b1e2      	cbz	r2, 8010d5c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d26:	7b05      	ldrb	r5, [r0, #12]
 8010d28:	4606      	mov	r6, r0
 8010d2a:	b9ad      	cbnz	r5, 8010d58 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010d2c:	232c      	movs	r3, #44	@ 0x2c
 8010d2e:	4617      	mov	r7, r2
 8010d30:	460c      	mov	r4, r1
 8010d32:	46a8      	mov	r8, r5
 8010d34:	6083      	str	r3, [r0, #8]
 8010d36:	f240 1301 	movw	r3, #257	@ 0x101
 8010d3a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d3e:	8183      	strh	r3, [r0, #12]
 8010d40:	3501      	adds	r5, #1
 8010d42:	4621      	mov	r1, r4
 8010d44:	4630      	mov	r0, r6
 8010d46:	f009 fd1d 	bl	801a784 <put_memory>
 8010d4a:	42af      	cmp	r7, r5
 8010d4c:	60a4      	str	r4, [r4, #8]
 8010d4e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010d52:	f804 8c20 	strb.w	r8, [r4, #-32]
 8010d56:	d1f3      	bne.n	8010d40 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop

08010d60 <rmw_uxrce_init_wait_set_memory>:
 8010d60:	b1e2      	cbz	r2, 8010d9c <rmw_uxrce_init_wait_set_memory+0x3c>
 8010d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d66:	7b05      	ldrb	r5, [r0, #12]
 8010d68:	4606      	mov	r6, r0
 8010d6a:	b9ad      	cbnz	r5, 8010d98 <rmw_uxrce_init_wait_set_memory+0x38>
 8010d6c:	231c      	movs	r3, #28
 8010d6e:	4617      	mov	r7, r2
 8010d70:	460c      	mov	r4, r1
 8010d72:	46a8      	mov	r8, r5
 8010d74:	6083      	str	r3, [r0, #8]
 8010d76:	f240 1301 	movw	r3, #257	@ 0x101
 8010d7a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d7e:	8183      	strh	r3, [r0, #12]
 8010d80:	3501      	adds	r5, #1
 8010d82:	4621      	mov	r1, r4
 8010d84:	4630      	mov	r0, r6
 8010d86:	f009 fcfd 	bl	801a784 <put_memory>
 8010d8a:	42af      	cmp	r7, r5
 8010d8c:	60a4      	str	r4, [r4, #8]
 8010d8e:	f104 041c 	add.w	r4, r4, #28
 8010d92:	f804 8c10 	strb.w	r8, [r4, #-16]
 8010d96:	d1f3      	bne.n	8010d80 <rmw_uxrce_init_wait_set_memory+0x20>
 8010d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop

08010da0 <rmw_uxrce_init_guard_condition_memory>:
 8010da0:	b1e2      	cbz	r2, 8010ddc <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da6:	7b05      	ldrb	r5, [r0, #12]
 8010da8:	4606      	mov	r6, r0
 8010daa:	b9ad      	cbnz	r5, 8010dd8 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010dac:	2320      	movs	r3, #32
 8010dae:	4617      	mov	r7, r2
 8010db0:	460c      	mov	r4, r1
 8010db2:	46a8      	mov	r8, r5
 8010db4:	6083      	str	r3, [r0, #8]
 8010db6:	f240 1301 	movw	r3, #257	@ 0x101
 8010dba:	e9c0 5500 	strd	r5, r5, [r0]
 8010dbe:	8183      	strh	r3, [r0, #12]
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	f009 fcdd 	bl	801a784 <put_memory>
 8010dca:	42af      	cmp	r7, r5
 8010dcc:	60a4      	str	r4, [r4, #8]
 8010dce:	f104 0420 	add.w	r4, r4, #32
 8010dd2:	f804 8c14 	strb.w	r8, [r4, #-20]
 8010dd6:	d1f3      	bne.n	8010dc0 <rmw_uxrce_init_guard_condition_memory+0x20>
 8010dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop

08010de0 <rmw_uxrce_fini_session_memory>:
 8010de0:	4601      	mov	r1, r0
 8010de2:	4801      	ldr	r0, [pc, #4]	@ (8010de8 <rmw_uxrce_fini_session_memory+0x8>)
 8010de4:	f009 bcce 	b.w	801a784 <put_memory>
 8010de8:	2401384c 	.word	0x2401384c

08010dec <rmw_uxrce_fini_node_memory>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	4604      	mov	r4, r0
 8010df0:	6800      	ldr	r0, [r0, #0]
 8010df2:	b128      	cbz	r0, 8010e00 <rmw_uxrce_fini_node_memory+0x14>
 8010df4:	4b07      	ldr	r3, [pc, #28]	@ (8010e14 <rmw_uxrce_fini_node_memory+0x28>)
 8010df6:	6819      	ldr	r1, [r3, #0]
 8010df8:	f7ef fa72 	bl	80002e0 <strcmp>
 8010dfc:	b940      	cbnz	r0, 8010e10 <rmw_uxrce_fini_node_memory+0x24>
 8010dfe:	6020      	str	r0, [r4, #0]
 8010e00:	6861      	ldr	r1, [r4, #4]
 8010e02:	b129      	cbz	r1, 8010e10 <rmw_uxrce_fini_node_memory+0x24>
 8010e04:	2500      	movs	r5, #0
 8010e06:	4804      	ldr	r0, [pc, #16]	@ (8010e18 <rmw_uxrce_fini_node_memory+0x2c>)
 8010e08:	610d      	str	r5, [r1, #16]
 8010e0a:	f009 fcbb 	bl	801a784 <put_memory>
 8010e0e:	6065      	str	r5, [r4, #4]
 8010e10:	bd38      	pop	{r3, r4, r5, pc}
 8010e12:	bf00      	nop
 8010e14:	0801eb14 	.word	0x0801eb14
 8010e18:	2401381c 	.word	0x2401381c

08010e1c <rmw_uxrce_fini_publisher_memory>:
 8010e1c:	b510      	push	{r4, lr}
 8010e1e:	4604      	mov	r4, r0
 8010e20:	6800      	ldr	r0, [r0, #0]
 8010e22:	b128      	cbz	r0, 8010e30 <rmw_uxrce_fini_publisher_memory+0x14>
 8010e24:	4b06      	ldr	r3, [pc, #24]	@ (8010e40 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010e26:	6819      	ldr	r1, [r3, #0]
 8010e28:	f7ef fa5a 	bl	80002e0 <strcmp>
 8010e2c:	b938      	cbnz	r0, 8010e3e <rmw_uxrce_fini_publisher_memory+0x22>
 8010e2e:	6020      	str	r0, [r4, #0]
 8010e30:	6861      	ldr	r1, [r4, #4]
 8010e32:	b121      	cbz	r1, 8010e3e <rmw_uxrce_fini_publisher_memory+0x22>
 8010e34:	4803      	ldr	r0, [pc, #12]	@ (8010e44 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010e36:	f009 fca5 	bl	801a784 <put_memory>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	6063      	str	r3, [r4, #4]
 8010e3e:	bd10      	pop	{r4, pc}
 8010e40:	0801eb14 	.word	0x0801eb14
 8010e44:	2401382c 	.word	0x2401382c

08010e48 <rmw_uxrce_fini_subscription_memory>:
 8010e48:	b510      	push	{r4, lr}
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	6800      	ldr	r0, [r0, #0]
 8010e4e:	b128      	cbz	r0, 8010e5c <rmw_uxrce_fini_subscription_memory+0x14>
 8010e50:	4b06      	ldr	r3, [pc, #24]	@ (8010e6c <rmw_uxrce_fini_subscription_memory+0x24>)
 8010e52:	6819      	ldr	r1, [r3, #0]
 8010e54:	f7ef fa44 	bl	80002e0 <strcmp>
 8010e58:	b938      	cbnz	r0, 8010e6a <rmw_uxrce_fini_subscription_memory+0x22>
 8010e5a:	6020      	str	r0, [r4, #0]
 8010e5c:	6861      	ldr	r1, [r4, #4]
 8010e5e:	b121      	cbz	r1, 8010e6a <rmw_uxrce_fini_subscription_memory+0x22>
 8010e60:	4803      	ldr	r0, [pc, #12]	@ (8010e70 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010e62:	f009 fc8f 	bl	801a784 <put_memory>
 8010e66:	2300      	movs	r3, #0
 8010e68:	6063      	str	r3, [r4, #4]
 8010e6a:	bd10      	pop	{r4, pc}
 8010e6c:	0801eb14 	.word	0x0801eb14
 8010e70:	2401386c 	.word	0x2401386c

08010e74 <rmw_uxrce_fini_service_memory>:
 8010e74:	b510      	push	{r4, lr}
 8010e76:	4604      	mov	r4, r0
 8010e78:	6800      	ldr	r0, [r0, #0]
 8010e7a:	b128      	cbz	r0, 8010e88 <rmw_uxrce_fini_service_memory+0x14>
 8010e7c:	4b06      	ldr	r3, [pc, #24]	@ (8010e98 <rmw_uxrce_fini_service_memory+0x24>)
 8010e7e:	6819      	ldr	r1, [r3, #0]
 8010e80:	f7ef fa2e 	bl	80002e0 <strcmp>
 8010e84:	b938      	cbnz	r0, 8010e96 <rmw_uxrce_fini_service_memory+0x22>
 8010e86:	6020      	str	r0, [r4, #0]
 8010e88:	6861      	ldr	r1, [r4, #4]
 8010e8a:	b121      	cbz	r1, 8010e96 <rmw_uxrce_fini_service_memory+0x22>
 8010e8c:	4803      	ldr	r0, [pc, #12]	@ (8010e9c <rmw_uxrce_fini_service_memory+0x28>)
 8010e8e:	f009 fc79 	bl	801a784 <put_memory>
 8010e92:	2300      	movs	r3, #0
 8010e94:	6063      	str	r3, [r4, #4]
 8010e96:	bd10      	pop	{r4, pc}
 8010e98:	0801eb14 	.word	0x0801eb14
 8010e9c:	2401383c 	.word	0x2401383c

08010ea0 <rmw_uxrce_fini_client_memory>:
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	6800      	ldr	r0, [r0, #0]
 8010ea6:	b128      	cbz	r0, 8010eb4 <rmw_uxrce_fini_client_memory+0x14>
 8010ea8:	4b06      	ldr	r3, [pc, #24]	@ (8010ec4 <rmw_uxrce_fini_client_memory+0x24>)
 8010eaa:	6819      	ldr	r1, [r3, #0]
 8010eac:	f7ef fa18 	bl	80002e0 <strcmp>
 8010eb0:	b938      	cbnz	r0, 8010ec2 <rmw_uxrce_fini_client_memory+0x22>
 8010eb2:	6020      	str	r0, [r4, #0]
 8010eb4:	6861      	ldr	r1, [r4, #4]
 8010eb6:	b121      	cbz	r1, 8010ec2 <rmw_uxrce_fini_client_memory+0x22>
 8010eb8:	4803      	ldr	r0, [pc, #12]	@ (8010ec8 <rmw_uxrce_fini_client_memory+0x28>)
 8010eba:	f009 fc63 	bl	801a784 <put_memory>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	6063      	str	r3, [r4, #4]
 8010ec2:	bd10      	pop	{r4, pc}
 8010ec4:	0801eb14 	.word	0x0801eb14
 8010ec8:	2400ef4c 	.word	0x2400ef4c

08010ecc <rmw_uxrce_fini_topic_memory>:
 8010ecc:	b510      	push	{r4, lr}
 8010ece:	4604      	mov	r4, r0
 8010ed0:	4803      	ldr	r0, [pc, #12]	@ (8010ee0 <rmw_uxrce_fini_topic_memory+0x14>)
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	f009 fc56 	bl	801a784 <put_memory>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	61a3      	str	r3, [r4, #24]
 8010edc:	bd10      	pop	{r4, pc}
 8010ede:	bf00      	nop
 8010ee0:	2401387c 	.word	0x2401387c

08010ee4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010ee4:	b082      	sub	sp, #8
 8010ee6:	492b      	ldr	r1, [pc, #172]	@ (8010f94 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010ee8:	b530      	push	{r4, r5, lr}
 8010eea:	680d      	ldr	r5, [r1, #0]
 8010eec:	ac03      	add	r4, sp, #12
 8010eee:	e884 000c 	stmia.w	r4, {r2, r3}
 8010ef2:	461c      	mov	r4, r3
 8010ef4:	2d00      	cmp	r5, #0
 8010ef6:	d04b      	beq.n	8010f90 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8010ef8:	462b      	mov	r3, r5
 8010efa:	2100      	movs	r1, #0
 8010efc:	689a      	ldr	r2, [r3, #8]
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010f04:	4290      	cmp	r0, r2
 8010f06:	bf08      	it	eq
 8010f08:	3101      	addeq	r1, #1
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1f6      	bne.n	8010efc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010f0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d029      	beq.n	8010f6a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010f16:	d820      	bhi.n	8010f5a <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8010f18:	428c      	cmp	r4, r1
 8010f1a:	d828      	bhi.n	8010f6e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010f1c:	fab4 f284 	clz	r2, r4
 8010f20:	0952      	lsrs	r2, r2, #5
 8010f22:	b324      	cbz	r4, 8010f6e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010f24:	b1dd      	cbz	r5, 8010f5e <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8010f26:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010f2a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010f2e:	e001      	b.n	8010f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010f30:	686d      	ldr	r5, [r5, #4]
 8010f32:	b1ad      	cbz	r5, 8010f60 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010f34:	68ab      	ldr	r3, [r5, #8]
 8010f36:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8010f3a:	4288      	cmp	r0, r1
 8010f3c:	d1f8      	bne.n	8010f30 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f3e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8010f42:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010f46:	4561      	cmp	r1, ip
 8010f48:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f4c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010f50:	daee      	bge.n	8010f30 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f52:	468c      	mov	ip, r1
 8010f54:	461c      	mov	r4, r3
 8010f56:	462a      	mov	r2, r5
 8010f58:	e7ea      	b.n	8010f30 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f5a:	2b03      	cmp	r3, #3
 8010f5c:	d0dc      	beq.n	8010f18 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8010f5e:	2200      	movs	r2, #0
 8010f60:	4610      	mov	r0, r2
 8010f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f66:	b002      	add	sp, #8
 8010f68:	4770      	bx	lr
 8010f6a:	428c      	cmp	r4, r1
 8010f6c:	d905      	bls.n	8010f7a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8010f6e:	4809      	ldr	r0, [pc, #36]	@ (8010f94 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f74:	b002      	add	sp, #8
 8010f76:	f009 bbf5 	b.w	801a764 <get_memory>
 8010f7a:	fab4 f284 	clz	r2, r4
 8010f7e:	0952      	lsrs	r2, r2, #5
 8010f80:	2c00      	cmp	r4, #0
 8010f82:	d1ed      	bne.n	8010f60 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010f84:	4803      	ldr	r0, [pc, #12]	@ (8010f94 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010f86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f8a:	b002      	add	sp, #8
 8010f8c:	f009 bbea 	b.w	801a764 <get_memory>
 8010f90:	4629      	mov	r1, r5
 8010f92:	e7bc      	b.n	8010f0e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010f94:	2401385c 	.word	0x2401385c

08010f98 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010f98:	4b12      	ldr	r3, [pc, #72]	@ (8010fe4 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	b530      	push	{r4, r5, lr}
 8010f9e:	b1f3      	cbz	r3, 8010fde <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010fa0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010fa4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010fa8:	2400      	movs	r4, #0
 8010faa:	e001      	b.n	8010fb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	b1a3      	cbz	r3, 8010fda <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010fb0:	689a      	ldr	r2, [r3, #8]
 8010fb2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010fb6:	4288      	cmp	r0, r1
 8010fb8:	d1f8      	bne.n	8010fac <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010fba:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010fbe:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8010fc2:	4571      	cmp	r1, lr
 8010fc4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010fc8:	eb72 050c 	sbcs.w	r5, r2, ip
 8010fcc:	daee      	bge.n	8010fac <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010fce:	461c      	mov	r4, r3
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	468e      	mov	lr, r1
 8010fd4:	4694      	mov	ip, r2
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d1ea      	bne.n	8010fb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010fda:	4620      	mov	r0, r4
 8010fdc:	bd30      	pop	{r4, r5, pc}
 8010fde:	461c      	mov	r4, r3
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	bd30      	pop	{r4, r5, pc}
 8010fe4:	2401385c 	.word	0x2401385c

08010fe8 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80110e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fee:	681f      	ldr	r7, [r3, #0]
 8010ff0:	ed2d 8b06 	vpush	{d8-d10}
 8010ff4:	b08d      	sub	sp, #52	@ 0x34
 8010ff6:	f7ff fd73 	bl	8010ae0 <rmw_uros_epoch_nanos>
 8010ffa:	2f00      	cmp	r7, #0
 8010ffc:	d05d      	beq.n	80110ba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010ffe:	46b8      	mov	r8, r7
 8011000:	4681      	mov	r9, r0
 8011002:	468a      	mov	sl, r1
 8011004:	ac04      	add	r4, sp, #16
 8011006:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801100a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801100e:	2b04      	cmp	r3, #4
 8011010:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80110c8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011014:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80110d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011018:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80110d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801101c:	d03f      	beq.n	801109e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801101e:	2b05      	cmp	r3, #5
 8011020:	d044      	beq.n	80110ac <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011022:	2b03      	cmp	r3, #3
 8011024:	d03b      	beq.n	801109e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011026:	ed8d 8b04 	vstr	d8, [sp, #16]
 801102a:	ed8d ab06 	vstr	d10, [sp, #24]
 801102e:	ab08      	add	r3, sp, #32
 8011030:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011034:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801103a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801103e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011042:	f009 f8c9 	bl	801a1d8 <rmw_time_equal>
 8011046:	b118      	cbz	r0, 8011050 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011048:	ed8d 9b04 	vstr	d9, [sp, #16]
 801104c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011050:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011054:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011058:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801105c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011060:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011064:	f009 f90e 	bl	801a284 <rmw_time_total_nsec>
 8011068:	1830      	adds	r0, r6, r0
 801106a:	eb47 0101 	adc.w	r1, r7, r1
 801106e:	4548      	cmp	r0, r9
 8011070:	eb71 030a 	sbcs.w	r3, r1, sl
 8011074:	db05      	blt.n	8011082 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011076:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801107a:	4591      	cmp	r9, r2
 801107c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011080:	da03      	bge.n	801108a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8011082:	4641      	mov	r1, r8
 8011084:	4816      	ldr	r0, [pc, #88]	@ (80110e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011086:	f009 fb7d 	bl	801a784 <put_memory>
 801108a:	f1bb 0f00 	cmp.w	fp, #0
 801108e:	d014      	beq.n	80110ba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011090:	46d8      	mov	r8, fp
 8011092:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011096:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801109a:	2b04      	cmp	r3, #4
 801109c:	d1bf      	bne.n	801101e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801109e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80110a2:	3340      	adds	r3, #64	@ 0x40
 80110a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80110aa:	e7c0      	b.n	801102e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80110ac:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80110b0:	3348      	adds	r3, #72	@ 0x48
 80110b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80110b8:	e7b9      	b.n	801102e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80110ba:	b00d      	add	sp, #52	@ 0x34
 80110bc:	ecbd 8b06 	vpop	{d8-d10}
 80110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c4:	f3af 8000 	nop.w
	...
 80110d0:	00000001 	.word	0x00000001
 80110d4:	00000000 	.word	0x00000000
 80110d8:	0000001e 	.word	0x0000001e
 80110dc:	00000000 	.word	0x00000000
 80110e0:	2401385c 	.word	0x2401385c

080110e4 <run_xrce_session>:
 80110e4:	b510      	push	{r4, lr}
 80110e6:	788c      	ldrb	r4, [r1, #2]
 80110e8:	b086      	sub	sp, #24
 80110ea:	2c01      	cmp	r4, #1
 80110ec:	f8ad 200e 	strh.w	r2, [sp, #14]
 80110f0:	d00c      	beq.n	801110c <run_xrce_session+0x28>
 80110f2:	2401      	movs	r4, #1
 80110f4:	4619      	mov	r1, r3
 80110f6:	f10d 020e 	add.w	r2, sp, #14
 80110fa:	f10d 0317 	add.w	r3, sp, #23
 80110fe:	9400      	str	r4, [sp, #0]
 8011100:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011104:	f003 fb58 	bl	80147b8 <uxr_run_session_until_all_status>
 8011108:	b006      	add	sp, #24
 801110a:	bd10      	pop	{r4, pc}
 801110c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011110:	f002 ff74 	bl	8013ffc <uxr_flash_output_streams>
 8011114:	4620      	mov	r0, r4
 8011116:	b006      	add	sp, #24
 8011118:	bd10      	pop	{r4, pc}
 801111a:	bf00      	nop

0801111c <convert_qos_profile>:
 801111c:	7a4a      	ldrb	r2, [r1, #9]
 801111e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011122:	2a02      	cmp	r2, #2
 8011124:	bf18      	it	ne
 8011126:	2200      	movne	r2, #0
 8011128:	7002      	strb	r2, [r0, #0]
 801112a:	f1ac 0202 	sub.w	r2, ip, #2
 801112e:	fab2 f282 	clz	r2, r2
 8011132:	0952      	lsrs	r2, r2, #5
 8011134:	7042      	strb	r2, [r0, #1]
 8011136:	780a      	ldrb	r2, [r1, #0]
 8011138:	8889      	ldrh	r1, [r1, #4]
 801113a:	f1a2 0202 	sub.w	r2, r2, #2
 801113e:	8081      	strh	r1, [r0, #4]
 8011140:	fab2 f282 	clz	r2, r2
 8011144:	0952      	lsrs	r2, r2, #5
 8011146:	7082      	strb	r2, [r0, #2]
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop

0801114c <generate_type_name>:
 801114c:	2300      	movs	r3, #0
 801114e:	b530      	push	{r4, r5, lr}
 8011150:	700b      	strb	r3, [r1, #0]
 8011152:	b087      	sub	sp, #28
 8011154:	6803      	ldr	r3, [r0, #0]
 8011156:	4614      	mov	r4, r2
 8011158:	b1bb      	cbz	r3, 801118a <generate_type_name+0x3e>
 801115a:	4a0e      	ldr	r2, [pc, #56]	@ (8011194 <generate_type_name+0x48>)
 801115c:	4615      	mov	r5, r2
 801115e:	9500      	str	r5, [sp, #0]
 8011160:	9203      	str	r2, [sp, #12]
 8011162:	4d0d      	ldr	r5, [pc, #52]	@ (8011198 <generate_type_name+0x4c>)
 8011164:	6842      	ldr	r2, [r0, #4]
 8011166:	4608      	mov	r0, r1
 8011168:	490c      	ldr	r1, [pc, #48]	@ (801119c <generate_type_name+0x50>)
 801116a:	9204      	str	r2, [sp, #16]
 801116c:	9105      	str	r1, [sp, #20]
 801116e:	9102      	str	r1, [sp, #8]
 8011170:	4621      	mov	r1, r4
 8011172:	4a0b      	ldr	r2, [pc, #44]	@ (80111a0 <generate_type_name+0x54>)
 8011174:	9501      	str	r5, [sp, #4]
 8011176:	f00b fd11 	bl	801cb9c <sniprintf>
 801117a:	2800      	cmp	r0, #0
 801117c:	bfa8      	it	ge
 801117e:	4284      	cmpge	r4, r0
 8011180:	bfcc      	ite	gt
 8011182:	2001      	movgt	r0, #1
 8011184:	2000      	movle	r0, #0
 8011186:	b007      	add	sp, #28
 8011188:	bd30      	pop	{r4, r5, pc}
 801118a:	4b06      	ldr	r3, [pc, #24]	@ (80111a4 <generate_type_name+0x58>)
 801118c:	4a01      	ldr	r2, [pc, #4]	@ (8011194 <generate_type_name+0x48>)
 801118e:	461d      	mov	r5, r3
 8011190:	e7e5      	b.n	801115e <generate_type_name+0x12>
 8011192:	bf00      	nop
 8011194:	0801df2c 	.word	0x0801df2c
 8011198:	0801df44 	.word	0x0801df44
 801119c:	0801df40 	.word	0x0801df40
 80111a0:	0801df30 	.word	0x0801df30
 80111a4:	0801ebb8 	.word	0x0801ebb8

080111a8 <generate_topic_name>:
 80111a8:	b530      	push	{r4, r5, lr}
 80111aa:	4614      	mov	r4, r2
 80111ac:	b083      	sub	sp, #12
 80111ae:	4605      	mov	r5, r0
 80111b0:	4b07      	ldr	r3, [pc, #28]	@ (80111d0 <generate_topic_name+0x28>)
 80111b2:	4a08      	ldr	r2, [pc, #32]	@ (80111d4 <generate_topic_name+0x2c>)
 80111b4:	4608      	mov	r0, r1
 80111b6:	9500      	str	r5, [sp, #0]
 80111b8:	4621      	mov	r1, r4
 80111ba:	f00b fcef 	bl	801cb9c <sniprintf>
 80111be:	2800      	cmp	r0, #0
 80111c0:	bfa8      	it	ge
 80111c2:	4284      	cmpge	r4, r0
 80111c4:	bfcc      	ite	gt
 80111c6:	2001      	movgt	r0, #1
 80111c8:	2000      	movle	r0, #0
 80111ca:	b003      	add	sp, #12
 80111cc:	bd30      	pop	{r4, r5, pc}
 80111ce:	bf00      	nop
 80111d0:	0801df50 	.word	0x0801df50
 80111d4:	0801df48 	.word	0x0801df48

080111d8 <is_uxrce_rmw_identifier_valid>:
 80111d8:	b510      	push	{r4, lr}
 80111da:	4604      	mov	r4, r0
 80111dc:	b140      	cbz	r0, 80111f0 <is_uxrce_rmw_identifier_valid+0x18>
 80111de:	f009 fb29 	bl	801a834 <rmw_get_implementation_identifier>
 80111e2:	4601      	mov	r1, r0
 80111e4:	4620      	mov	r0, r4
 80111e6:	f7ef f87b 	bl	80002e0 <strcmp>
 80111ea:	fab0 f080 	clz	r0, r0
 80111ee:	0940      	lsrs	r0, r0, #5
 80111f0:	bd10      	pop	{r4, pc}
 80111f2:	bf00      	nop

080111f4 <get_message_typesupport_handle>:
 80111f4:	6883      	ldr	r3, [r0, #8]
 80111f6:	4718      	bx	r3

080111f8 <get_message_typesupport_handle_function>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	4604      	mov	r4, r0
 80111fc:	6800      	ldr	r0, [r0, #0]
 80111fe:	f7ef f86f 	bl	80002e0 <strcmp>
 8011202:	2800      	cmp	r0, #0
 8011204:	bf0c      	ite	eq
 8011206:	4620      	moveq	r0, r4
 8011208:	2000      	movne	r0, #0
 801120a:	bd10      	pop	{r4, pc}

0801120c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801120c:	4b04      	ldr	r3, [pc, #16]	@ (8011220 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	b10a      	cbz	r2, 8011216 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8011212:	4803      	ldr	r0, [pc, #12]	@ (8011220 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011214:	4770      	bx	lr
 8011216:	4a03      	ldr	r2, [pc, #12]	@ (8011224 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8011218:	4801      	ldr	r0, [pc, #4]	@ (8011220 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801121a:	6812      	ldr	r2, [r2, #0]
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	4770      	bx	lr
 8011220:	24000034 	.word	0x24000034
 8011224:	24000678 	.word	0x24000678

08011228 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011228:	4a02      	ldr	r2, [pc, #8]	@ (8011234 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 801122a:	4b03      	ldr	r3, [pc, #12]	@ (8011238 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 801122c:	6812      	ldr	r2, [r2, #0]
 801122e:	601a      	str	r2, [r3, #0]
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop
 8011234:	24000678 	.word	0x24000678
 8011238:	24000034 	.word	0x24000034

0801123c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 801123c:	4b04      	ldr	r3, [pc, #16]	@ (8011250 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	b10a      	cbz	r2, 8011246 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xa>
 8011242:	4803      	ldr	r0, [pc, #12]	@ (8011250 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 8011244:	4770      	bx	lr
 8011246:	4a03      	ldr	r2, [pc, #12]	@ (8011254 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x18>)
 8011248:	4801      	ldr	r0, [pc, #4]	@ (8011250 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801124a:	6812      	ldr	r2, [r2, #0]
 801124c:	601a      	str	r2, [r3, #0]
 801124e:	4770      	bx	lr
 8011250:	24000048 	.word	0x24000048
 8011254:	24000678 	.word	0x24000678

08011258 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 8011258:	4a02      	ldr	r2, [pc, #8]	@ (8011264 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xc>)
 801125a:	4b03      	ldr	r3, [pc, #12]	@ (8011268 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x10>)
 801125c:	6812      	ldr	r2, [r2, #0]
 801125e:	601a      	str	r2, [r3, #0]
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	24000678 	.word	0x24000678
 8011268:	24000048 	.word	0x24000048

0801126c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 801126c:	2009      	movs	r0, #9
 801126e:	4770      	bx	lr

08011270 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8011270:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop

08011278 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8011278:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801127c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011280:	e9c2 0100 	strd	r0, r1, [r2]
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop

08011288 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8011288:	e9d2 2300 	ldrd	r2, r3, [r2]
 801128c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011290:	e9c1 2300 	strd	r2, r3, [r1]
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop

08011298 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8011298:	f009 be98 	b.w	801afcc <sensor_msgs__msg__Imu__init>

0801129c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 801129c:	f009 beec 	b.w	801b078 <sensor_msgs__msg__Imu__fini>

080112a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 80112a0:	2009      	movs	r0, #9
 80112a2:	4770      	bx	lr

080112a4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 80112a4:	2009      	movs	r0, #9
 80112a6:	4770      	bx	lr

080112a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 80112a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop

080112b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80112b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop

080112b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80112b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112bc:	4770      	bx	lr
 80112be:	bf00      	nop

080112c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80112c0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop

080112c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80112c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop

080112d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80112d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112d8:	e9c2 0100 	strd	r0, r1, [r2]
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop

080112e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 80112e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80112e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112e8:	e9c1 2300 	strd	r2, r3, [r1]
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 80112f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112f8:	e9c2 0100 	strd	r0, r1, [r2]
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop

08011300 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8011300:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011304:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011308:	e9c1 2300 	strd	r2, r3, [r1]
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop

08011310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011310:	b510      	push	{r4, lr}
 8011312:	4c0c      	ldr	r4, [pc, #48]	@ (8011344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8011314:	f000 f9d8 	bl	80116c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011318:	60e0      	str	r0, [r4, #12]
 801131a:	f000 faff 	bl	801191c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801131e:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011320:	f000 fb0e 	bl	8011940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011324:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011328:	f000 fb0a 	bl	8011940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801132c:	4b06      	ldr	r3, [pc, #24]	@ (8011348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801132e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	b10a      	cbz	r2, 801133a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8011336:	4804      	ldr	r0, [pc, #16]	@ (8011348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011338:	bd10      	pop	{r4, pc}
 801133a:	4a04      	ldr	r2, [pc, #16]	@ (801134c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 801133c:	4802      	ldr	r0, [pc, #8]	@ (8011348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801133e:	6812      	ldr	r2, [r2, #0]
 8011340:	601a      	str	r2, [r3, #0]
 8011342:	bd10      	pop	{r4, pc}
 8011344:	24000054 	.word	0x24000054
 8011348:	240001f8 	.word	0x240001f8
 801134c:	2400067c 	.word	0x2400067c

08011350 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__size_function__MagneticField__magnetic_field_covariance>:
 8011350:	2009      	movs	r0, #9
 8011352:	4770      	bx	lr

08011354 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_const_function__MagneticField__magnetic_field_covariance>:
 8011354:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop

0801135c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__fetch_function__MagneticField__magnetic_field_covariance>:
 801135c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011364:	e9c2 0100 	strd	r0, r1, [r2]
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop

0801136c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__assign_function__MagneticField__magnetic_field_covariance>:
 801136c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011370:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011374:	e9c1 2300 	strd	r2, r3, [r1]
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop

0801137c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_init_function>:
 801137c:	f009 be90 	b.w	801b0a0 <sensor_msgs__msg__MagneticField__init>

08011380 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_fini_function>:
 8011380:	f009 beb2 	b.w	801b0e8 <sensor_msgs__msg__MagneticField__fini>

08011384 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_function__MagneticField__magnetic_field_covariance>:
 8011384:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop

0801138c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 801138c:	b510      	push	{r4, lr}
 801138e:	4c08      	ldr	r4, [pc, #32]	@ (80113b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x24>)
 8011390:	f000 f99a 	bl	80116c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011394:	60e0      	str	r0, [r4, #12]
 8011396:	f000 fad3 	bl	8011940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801139a:	4b06      	ldr	r3, [pc, #24]	@ (80113b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 801139c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	b10a      	cbz	r2, 80113a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x1a>
 80113a2:	4804      	ldr	r0, [pc, #16]	@ (80113b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80113a4:	bd10      	pop	{r4, pc}
 80113a6:	4a04      	ldr	r2, [pc, #16]	@ (80113b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x2c>)
 80113a8:	4802      	ldr	r0, [pc, #8]	@ (80113b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	bd10      	pop	{r4, pc}
 80113b0:	24000204 	.word	0x24000204
 80113b4:	240002b8 	.word	0x240002b8
 80113b8:	2400067c 	.word	0x2400067c

080113bc <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 80113bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c0:	4680      	mov	r8, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	f000 f9a4 	bl	8011710 <get_serialized_size_std_msgs__msg__Header>
 80113c8:	4604      	mov	r4, r0
 80113ca:	f108 0018 	add.w	r0, r8, #24
 80113ce:	443c      	add	r4, r7
 80113d0:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 80113d4:	4621      	mov	r1, r4
 80113d6:	f000 fac1 	bl	801195c <get_serialized_size_geometry_msgs__msg__Quaternion>
 80113da:	4404      	add	r4, r0
 80113dc:	2108      	movs	r1, #8
 80113de:	4620      	mov	r0, r4
 80113e0:	f002 f8e6 	bl	80135b0 <ucdr_alignment>
 80113e4:	4606      	mov	r6, r0
 80113e6:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 80113ea:	3648      	adds	r6, #72	@ 0x48
 80113ec:	4426      	add	r6, r4
 80113ee:	4631      	mov	r1, r6
 80113f0:	f000 fb64 	bl	8011abc <get_serialized_size_geometry_msgs__msg__Vector3>
 80113f4:	1835      	adds	r5, r6, r0
 80113f6:	2108      	movs	r1, #8
 80113f8:	4628      	mov	r0, r5
 80113fa:	f002 f8d9 	bl	80135b0 <ucdr_alignment>
 80113fe:	4604      	mov	r4, r0
 8011400:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8011404:	3448      	adds	r4, #72	@ 0x48
 8011406:	4425      	add	r5, r4
 8011408:	4629      	mov	r1, r5
 801140a:	f000 fb57 	bl	8011abc <get_serialized_size_geometry_msgs__msg__Vector3>
 801140e:	4405      	add	r5, r0
 8011410:	2108      	movs	r1, #8
 8011412:	4628      	mov	r0, r5
 8011414:	f002 f8cc 	bl	80135b0 <ucdr_alignment>
 8011418:	4438      	add	r0, r7
 801141a:	4428      	add	r0, r5
 801141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011420 <get_serialized_size_sensor_msgs__msg__Imu>:
 8011420:	b108      	cbz	r0, 8011426 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8011422:	f7ff bfcb 	b.w	80113bc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011426:	4770      	bx	lr

08011428 <_Imu__get_serialized_size>:
 8011428:	b110      	cbz	r0, 8011430 <_Imu__get_serialized_size+0x8>
 801142a:	2100      	movs	r1, #0
 801142c:	f7ff bfc6 	b.w	80113bc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop

08011434 <_Imu__cdr_deserialize>:
 8011434:	b538      	push	{r3, r4, r5, lr}
 8011436:	460c      	mov	r4, r1
 8011438:	2900      	cmp	r1, #0
 801143a:	d037      	beq.n	80114ac <_Imu__cdr_deserialize+0x78>
 801143c:	4605      	mov	r5, r0
 801143e:	f000 f9eb 	bl	8011818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011442:	4603      	mov	r3, r0
 8011444:	4621      	mov	r1, r4
 8011446:	4628      	mov	r0, r5
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	4798      	blx	r3
 801144e:	f000 fb31 	bl	8011ab4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011452:	4603      	mov	r3, r0
 8011454:	f104 0118 	add.w	r1, r4, #24
 8011458:	4628      	mov	r0, r5
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	4798      	blx	r3
 8011460:	2209      	movs	r2, #9
 8011462:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011466:	4628      	mov	r0, r5
 8011468:	f000 fd3a 	bl	8011ee0 <ucdr_deserialize_array_double>
 801146c:	f000 fbae 	bl	8011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011470:	4603      	mov	r3, r0
 8011472:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8011476:	4628      	mov	r0, r5
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	4798      	blx	r3
 801147e:	2209      	movs	r2, #9
 8011480:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011484:	4628      	mov	r0, r5
 8011486:	f000 fd2b 	bl	8011ee0 <ucdr_deserialize_array_double>
 801148a:	f000 fb9f 	bl	8011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801148e:	4603      	mov	r3, r0
 8011490:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8011494:	4628      	mov	r0, r5
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	4798      	blx	r3
 801149c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80114a0:	4628      	mov	r0, r5
 80114a2:	2209      	movs	r2, #9
 80114a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114a8:	f000 bd1a 	b.w	8011ee0 <ucdr_deserialize_array_double>
 80114ac:	4608      	mov	r0, r1
 80114ae:	bd38      	pop	{r3, r4, r5, pc}

080114b0 <_Imu__cdr_serialize>:
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d039      	beq.n	8011528 <_Imu__cdr_serialize+0x78>
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	4604      	mov	r4, r0
 80114b8:	460d      	mov	r5, r1
 80114ba:	f000 f9ad 	bl	8011818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80114be:	4603      	mov	r3, r0
 80114c0:	4629      	mov	r1, r5
 80114c2:	4620      	mov	r0, r4
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	4798      	blx	r3
 80114ca:	f000 faf3 	bl	8011ab4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80114ce:	4603      	mov	r3, r0
 80114d0:	4629      	mov	r1, r5
 80114d2:	f104 0018 	add.w	r0, r4, #24
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	4798      	blx	r3
 80114dc:	2209      	movs	r2, #9
 80114de:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80114e2:	4628      	mov	r0, r5
 80114e4:	f000 fca8 	bl	8011e38 <ucdr_serialize_array_double>
 80114e8:	f000 fb70 	bl	8011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80114ec:	4603      	mov	r3, r0
 80114ee:	4629      	mov	r1, r5
 80114f0:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	4798      	blx	r3
 80114fa:	2209      	movs	r2, #9
 80114fc:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011500:	4628      	mov	r0, r5
 8011502:	f000 fc99 	bl	8011e38 <ucdr_serialize_array_double>
 8011506:	f000 fb61 	bl	8011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801150a:	4603      	mov	r3, r0
 801150c:	4629      	mov	r1, r5
 801150e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	689b      	ldr	r3, [r3, #8]
 8011516:	4798      	blx	r3
 8011518:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 801151c:	4628      	mov	r0, r5
 801151e:	2209      	movs	r2, #9
 8011520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011524:	f000 bc88 	b.w	8011e38 <ucdr_serialize_array_double>
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop

0801152c <max_serialized_size_sensor_msgs__msg__Imu>:
 801152c:	2301      	movs	r3, #1
 801152e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011532:	7003      	strb	r3, [r0, #0]
 8011534:	4680      	mov	r8, r0
 8011536:	460f      	mov	r7, r1
 8011538:	f000 f964 	bl	8011804 <max_serialized_size_std_msgs__msg__Header>
 801153c:	4604      	mov	r4, r0
 801153e:	4640      	mov	r0, r8
 8011540:	443c      	add	r4, r7
 8011542:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8011546:	4621      	mov	r1, r4
 8011548:	f000 fa94 	bl	8011a74 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801154c:	4404      	add	r4, r0
 801154e:	2108      	movs	r1, #8
 8011550:	4620      	mov	r0, r4
 8011552:	f002 f82d 	bl	80135b0 <ucdr_alignment>
 8011556:	4606      	mov	r6, r0
 8011558:	4640      	mov	r0, r8
 801155a:	3648      	adds	r6, #72	@ 0x48
 801155c:	4426      	add	r6, r4
 801155e:	4631      	mov	r1, r6
 8011560:	f000 fb1a 	bl	8011b98 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011564:	1835      	adds	r5, r6, r0
 8011566:	2108      	movs	r1, #8
 8011568:	4628      	mov	r0, r5
 801156a:	f002 f821 	bl	80135b0 <ucdr_alignment>
 801156e:	4604      	mov	r4, r0
 8011570:	4640      	mov	r0, r8
 8011572:	3448      	adds	r4, #72	@ 0x48
 8011574:	4425      	add	r5, r4
 8011576:	4629      	mov	r1, r5
 8011578:	f000 fb0e 	bl	8011b98 <max_serialized_size_geometry_msgs__msg__Vector3>
 801157c:	4405      	add	r5, r0
 801157e:	2108      	movs	r1, #8
 8011580:	4628      	mov	r0, r5
 8011582:	f002 f815 	bl	80135b0 <ucdr_alignment>
 8011586:	4438      	add	r0, r7
 8011588:	4428      	add	r0, r5
 801158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158e:	bf00      	nop

08011590 <_Imu__max_serialized_size>:
 8011590:	b500      	push	{lr}
 8011592:	b083      	sub	sp, #12
 8011594:	2100      	movs	r1, #0
 8011596:	f10d 0007 	add.w	r0, sp, #7
 801159a:	f7ff ffc7 	bl	801152c <max_serialized_size_sensor_msgs__msg__Imu>
 801159e:	b003      	add	sp, #12
 80115a0:	f85d fb04 	ldr.w	pc, [sp], #4

080115a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80115a4:	4800      	ldr	r0, [pc, #0]	@ (80115a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 80115a6:	4770      	bx	lr
 80115a8:	240002c4 	.word	0x240002c4

080115ac <get_serialized_size_sensor_msgs__msg__MagneticField>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	4605      	mov	r5, r0
 80115b0:	b190      	cbz	r0, 80115d8 <get_serialized_size_sensor_msgs__msg__MagneticField+0x2c>
 80115b2:	460c      	mov	r4, r1
 80115b4:	f000 f8ac 	bl	8011710 <get_serialized_size_std_msgs__msg__Header>
 80115b8:	4606      	mov	r6, r0
 80115ba:	f105 0018 	add.w	r0, r5, #24
 80115be:	4426      	add	r6, r4
 80115c0:	f1c4 0448 	rsb	r4, r4, #72	@ 0x48
 80115c4:	4631      	mov	r1, r6
 80115c6:	f000 fa79 	bl	8011abc <get_serialized_size_geometry_msgs__msg__Vector3>
 80115ca:	4406      	add	r6, r0
 80115cc:	2108      	movs	r1, #8
 80115ce:	4630      	mov	r0, r6
 80115d0:	f001 ffee 	bl	80135b0 <ucdr_alignment>
 80115d4:	4404      	add	r4, r0
 80115d6:	19a0      	adds	r0, r4, r6
 80115d8:	bd70      	pop	{r4, r5, r6, pc}
 80115da:	bf00      	nop

080115dc <_MagneticField__cdr_deserialize>:
 80115dc:	b538      	push	{r3, r4, r5, lr}
 80115de:	460c      	mov	r4, r1
 80115e0:	b1c9      	cbz	r1, 8011616 <_MagneticField__cdr_deserialize+0x3a>
 80115e2:	4605      	mov	r5, r0
 80115e4:	f000 f918 	bl	8011818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80115e8:	4603      	mov	r3, r0
 80115ea:	4621      	mov	r1, r4
 80115ec:	4628      	mov	r0, r5
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	4798      	blx	r3
 80115f4:	f000 faea 	bl	8011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80115f8:	4603      	mov	r3, r0
 80115fa:	f104 0118 	add.w	r1, r4, #24
 80115fe:	4628      	mov	r0, r5
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	4798      	blx	r3
 8011606:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801160a:	4628      	mov	r0, r5
 801160c:	2209      	movs	r2, #9
 801160e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011612:	f000 bc65 	b.w	8011ee0 <ucdr_deserialize_array_double>
 8011616:	4608      	mov	r0, r1
 8011618:	bd38      	pop	{r3, r4, r5, pc}
 801161a:	bf00      	nop

0801161c <_MagneticField__cdr_serialize>:
 801161c:	b1d8      	cbz	r0, 8011656 <_MagneticField__cdr_serialize+0x3a>
 801161e:	b538      	push	{r3, r4, r5, lr}
 8011620:	4604      	mov	r4, r0
 8011622:	460d      	mov	r5, r1
 8011624:	f000 f8f8 	bl	8011818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011628:	4603      	mov	r3, r0
 801162a:	4629      	mov	r1, r5
 801162c:	4620      	mov	r0, r4
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	4798      	blx	r3
 8011634:	f000 faca 	bl	8011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011638:	4603      	mov	r3, r0
 801163a:	4629      	mov	r1, r5
 801163c:	f104 0018 	add.w	r0, r4, #24
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	4798      	blx	r3
 8011646:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801164a:	4628      	mov	r0, r5
 801164c:	2209      	movs	r2, #9
 801164e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011652:	f000 bbf1 	b.w	8011e38 <ucdr_serialize_array_double>
 8011656:	4770      	bx	lr

08011658 <_MagneticField__get_serialized_size>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	4604      	mov	r4, r0
 801165c:	b180      	cbz	r0, 8011680 <_MagneticField__get_serialized_size+0x28>
 801165e:	2100      	movs	r1, #0
 8011660:	f000 f856 	bl	8011710 <get_serialized_size_std_msgs__msg__Header>
 8011664:	4605      	mov	r5, r0
 8011666:	f104 0018 	add.w	r0, r4, #24
 801166a:	4629      	mov	r1, r5
 801166c:	f000 fa26 	bl	8011abc <get_serialized_size_geometry_msgs__msg__Vector3>
 8011670:	4405      	add	r5, r0
 8011672:	2108      	movs	r1, #8
 8011674:	4628      	mov	r0, r5
 8011676:	f001 ff9b 	bl	80135b0 <ucdr_alignment>
 801167a:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 801167e:	1960      	adds	r0, r4, r5
 8011680:	bd38      	pop	{r3, r4, r5, pc}
 8011682:	bf00      	nop

08011684 <_MagneticField__max_serialized_size>:
 8011684:	b510      	push	{r4, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	2301      	movs	r3, #1
 801168a:	2100      	movs	r1, #0
 801168c:	f10d 0007 	add.w	r0, sp, #7
 8011690:	f88d 3007 	strb.w	r3, [sp, #7]
 8011694:	f000 f8b6 	bl	8011804 <max_serialized_size_std_msgs__msg__Header>
 8011698:	4604      	mov	r4, r0
 801169a:	f10d 0007 	add.w	r0, sp, #7
 801169e:	4621      	mov	r1, r4
 80116a0:	f000 fa7a 	bl	8011b98 <max_serialized_size_geometry_msgs__msg__Vector3>
 80116a4:	4404      	add	r4, r0
 80116a6:	2108      	movs	r1, #8
 80116a8:	4620      	mov	r0, r4
 80116aa:	f001 ff81 	bl	80135b0 <ucdr_alignment>
 80116ae:	3048      	adds	r0, #72	@ 0x48
 80116b0:	4420      	add	r0, r4
 80116b2:	b002      	add	sp, #8
 80116b4:	bd10      	pop	{r4, pc}
 80116b6:	bf00      	nop

080116b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 80116b8:	4800      	ldr	r0, [pc, #0]	@ (80116bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x4>)
 80116ba:	4770      	bx	lr
 80116bc:	240002ec 	.word	0x240002ec

080116c0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80116c0:	f009 bd1e 	b.w	801b100 <std_msgs__msg__Header__init>

080116c4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80116c4:	f009 bd40 	b.w	801b148 <std_msgs__msg__Header__fini>

080116c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80116c8:	b508      	push	{r3, lr}
 80116ca:	f000 f8ad 	bl	8011828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80116ce:	4b06      	ldr	r3, [pc, #24]	@ (80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116d0:	4906      	ldr	r1, [pc, #24]	@ (80116ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	60c8      	str	r0, [r1, #12]
 80116d6:	b10a      	cbz	r2, 80116dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80116d8:	4803      	ldr	r0, [pc, #12]	@ (80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116da:	bd08      	pop	{r3, pc}
 80116dc:	4a04      	ldr	r2, [pc, #16]	@ (80116f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80116de:	4802      	ldr	r0, [pc, #8]	@ (80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116e0:	6812      	ldr	r2, [r2, #0]
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	bd08      	pop	{r3, pc}
 80116e6:	bf00      	nop
 80116e8:	2400038c 	.word	0x2400038c
 80116ec:	24000314 	.word	0x24000314
 80116f0:	2400067c 	.word	0x2400067c

080116f4 <_Header__max_serialized_size>:
 80116f4:	b500      	push	{lr}
 80116f6:	b083      	sub	sp, #12
 80116f8:	2301      	movs	r3, #1
 80116fa:	2100      	movs	r1, #0
 80116fc:	f10d 0007 	add.w	r0, sp, #7
 8011700:	f88d 3007 	strb.w	r3, [sp, #7]
 8011704:	f000 f8ee 	bl	80118e4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011708:	b003      	add	sp, #12
 801170a:	f85d fb04 	ldr.w	pc, [sp], #4
 801170e:	bf00      	nop

08011710 <get_serialized_size_std_msgs__msg__Header>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	4605      	mov	r5, r0
 8011714:	b168      	cbz	r0, 8011732 <get_serialized_size_std_msgs__msg__Header+0x22>
 8011716:	460c      	mov	r4, r1
 8011718:	f000 f894 	bl	8011844 <get_serialized_size_builtin_interfaces__msg__Time>
 801171c:	2104      	movs	r1, #4
 801171e:	1826      	adds	r6, r4, r0
 8011720:	f1c4 0405 	rsb	r4, r4, #5
 8011724:	4630      	mov	r0, r6
 8011726:	f001 ff43 	bl	80135b0 <ucdr_alignment>
 801172a:	68e9      	ldr	r1, [r5, #12]
 801172c:	440c      	add	r4, r1
 801172e:	4404      	add	r4, r0
 8011730:	19a0      	adds	r0, r4, r6
 8011732:	bd70      	pop	{r4, r5, r6, pc}

08011734 <_Header__cdr_deserialize>:
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	460c      	mov	r4, r1
 8011738:	b083      	sub	sp, #12
 801173a:	b1e9      	cbz	r1, 8011778 <_Header__cdr_deserialize+0x44>
 801173c:	4606      	mov	r6, r0
 801173e:	f000 f8e5 	bl	801190c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011742:	4603      	mov	r3, r0
 8011744:	4621      	mov	r1, r4
 8011746:	4630      	mov	r0, r6
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	4798      	blx	r3
 801174e:	6927      	ldr	r7, [r4, #16]
 8011750:	ab01      	add	r3, sp, #4
 8011752:	68a1      	ldr	r1, [r4, #8]
 8011754:	463a      	mov	r2, r7
 8011756:	4630      	mov	r0, r6
 8011758:	f001 ffac 	bl	80136b4 <ucdr_deserialize_sequence_char>
 801175c:	9b01      	ldr	r3, [sp, #4]
 801175e:	4605      	mov	r5, r0
 8011760:	b920      	cbnz	r0, 801176c <_Header__cdr_deserialize+0x38>
 8011762:	429f      	cmp	r7, r3
 8011764:	d30c      	bcc.n	8011780 <_Header__cdr_deserialize+0x4c>
 8011766:	4628      	mov	r0, r5
 8011768:	b003      	add	sp, #12
 801176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801176c:	b103      	cbz	r3, 8011770 <_Header__cdr_deserialize+0x3c>
 801176e:	3b01      	subs	r3, #1
 8011770:	4628      	mov	r0, r5
 8011772:	60e3      	str	r3, [r4, #12]
 8011774:	b003      	add	sp, #12
 8011776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011778:	460d      	mov	r5, r1
 801177a:	4628      	mov	r0, r5
 801177c:	b003      	add	sp, #12
 801177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011780:	2101      	movs	r1, #1
 8011782:	4630      	mov	r0, r6
 8011784:	75b5      	strb	r5, [r6, #22]
 8011786:	7571      	strb	r1, [r6, #21]
 8011788:	60e5      	str	r5, [r4, #12]
 801178a:	f001 ff29 	bl	80135e0 <ucdr_align_to>
 801178e:	4630      	mov	r0, r6
 8011790:	9901      	ldr	r1, [sp, #4]
 8011792:	f001 ff5d 	bl	8013650 <ucdr_advance_buffer>
 8011796:	4628      	mov	r0, r5
 8011798:	b003      	add	sp, #12
 801179a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801179c <_Header__cdr_serialize>:
 801179c:	b308      	cbz	r0, 80117e2 <_Header__cdr_serialize+0x46>
 801179e:	b570      	push	{r4, r5, r6, lr}
 80117a0:	4604      	mov	r4, r0
 80117a2:	460d      	mov	r5, r1
 80117a4:	f000 f8b2 	bl	801190c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80117a8:	4603      	mov	r3, r0
 80117aa:	4629      	mov	r1, r5
 80117ac:	4620      	mov	r0, r4
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	4798      	blx	r3
 80117b4:	68a6      	ldr	r6, [r4, #8]
 80117b6:	b15e      	cbz	r6, 80117d0 <_Header__cdr_serialize+0x34>
 80117b8:	4630      	mov	r0, r6
 80117ba:	f7ee fd9b 	bl	80002f4 <strlen>
 80117be:	4603      	mov	r3, r0
 80117c0:	1c42      	adds	r2, r0, #1
 80117c2:	4631      	mov	r1, r6
 80117c4:	4628      	mov	r0, r5
 80117c6:	60e3      	str	r3, [r4, #12]
 80117c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117cc:	f001 bf60 	b.w	8013690 <ucdr_serialize_sequence_char>
 80117d0:	4633      	mov	r3, r6
 80117d2:	4632      	mov	r2, r6
 80117d4:	4631      	mov	r1, r6
 80117d6:	4628      	mov	r0, r5
 80117d8:	60e3      	str	r3, [r4, #12]
 80117da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117de:	f001 bf57 	b.w	8013690 <ucdr_serialize_sequence_char>
 80117e2:	4770      	bx	lr

080117e4 <_Header__get_serialized_size>:
 80117e4:	b538      	push	{r3, r4, r5, lr}
 80117e6:	4604      	mov	r4, r0
 80117e8:	b150      	cbz	r0, 8011800 <_Header__get_serialized_size+0x1c>
 80117ea:	2100      	movs	r1, #0
 80117ec:	f000 f82a 	bl	8011844 <get_serialized_size_builtin_interfaces__msg__Time>
 80117f0:	2104      	movs	r1, #4
 80117f2:	4605      	mov	r5, r0
 80117f4:	f001 fedc 	bl	80135b0 <ucdr_alignment>
 80117f8:	68e2      	ldr	r2, [r4, #12]
 80117fa:	3205      	adds	r2, #5
 80117fc:	1953      	adds	r3, r2, r5
 80117fe:	4418      	add	r0, r3
 8011800:	bd38      	pop	{r3, r4, r5, pc}
 8011802:	bf00      	nop

08011804 <max_serialized_size_std_msgs__msg__Header>:
 8011804:	2301      	movs	r3, #1
 8011806:	b510      	push	{r4, lr}
 8011808:	7003      	strb	r3, [r0, #0]
 801180a:	4604      	mov	r4, r0
 801180c:	f000 f86a 	bl	80118e4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011810:	2300      	movs	r3, #0
 8011812:	7023      	strb	r3, [r4, #0]
 8011814:	bd10      	pop	{r4, pc}
 8011816:	bf00      	nop

08011818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011818:	4800      	ldr	r0, [pc, #0]	@ (801181c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801181a:	4770      	bx	lr
 801181c:	24000398 	.word	0x24000398

08011820 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011820:	f009 bc9e 	b.w	801b160 <builtin_interfaces__msg__Time__init>

08011824 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011824:	f009 bca0 	b.w	801b168 <builtin_interfaces__msg__Time__fini>

08011828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011828:	4b04      	ldr	r3, [pc, #16]	@ (801183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	b10a      	cbz	r2, 8011832 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801182e:	4803      	ldr	r0, [pc, #12]	@ (801183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011830:	4770      	bx	lr
 8011832:	4a03      	ldr	r2, [pc, #12]	@ (8011840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011834:	4801      	ldr	r0, [pc, #4]	@ (801183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011836:	6812      	ldr	r2, [r2, #0]
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	4770      	bx	lr
 801183c:	24000438 	.word	0x24000438
 8011840:	2400067c 	.word	0x2400067c

08011844 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011844:	b180      	cbz	r0, 8011868 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011846:	b538      	push	{r3, r4, r5, lr}
 8011848:	460d      	mov	r5, r1
 801184a:	2104      	movs	r1, #4
 801184c:	4628      	mov	r0, r5
 801184e:	f001 feaf 	bl	80135b0 <ucdr_alignment>
 8011852:	1d2b      	adds	r3, r5, #4
 8011854:	f1c5 0504 	rsb	r5, r5, #4
 8011858:	2104      	movs	r1, #4
 801185a:	181c      	adds	r4, r3, r0
 801185c:	4620      	mov	r0, r4
 801185e:	f001 fea7 	bl	80135b0 <ucdr_alignment>
 8011862:	4428      	add	r0, r5
 8011864:	4420      	add	r0, r4
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop

0801186c <_Time__cdr_deserialize>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	460c      	mov	r4, r1
 8011870:	b141      	cbz	r1, 8011884 <_Time__cdr_deserialize+0x18>
 8011872:	4605      	mov	r5, r0
 8011874:	f001 fa7e 	bl	8012d74 <ucdr_deserialize_int32_t>
 8011878:	1d21      	adds	r1, r4, #4
 801187a:	4628      	mov	r0, r5
 801187c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011880:	f000 bef6 	b.w	8012670 <ucdr_deserialize_uint32_t>
 8011884:	4608      	mov	r0, r1
 8011886:	bd38      	pop	{r3, r4, r5, pc}

08011888 <_Time__cdr_serialize>:
 8011888:	b160      	cbz	r0, 80118a4 <_Time__cdr_serialize+0x1c>
 801188a:	b538      	push	{r3, r4, r5, lr}
 801188c:	460d      	mov	r5, r1
 801188e:	4604      	mov	r4, r0
 8011890:	6801      	ldr	r1, [r0, #0]
 8011892:	4628      	mov	r0, r5
 8011894:	f001 f9d6 	bl	8012c44 <ucdr_serialize_int32_t>
 8011898:	6861      	ldr	r1, [r4, #4]
 801189a:	4628      	mov	r0, r5
 801189c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118a0:	f000 bdb6 	b.w	8012410 <ucdr_serialize_uint32_t>
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop

080118a8 <_Time__get_serialized_size>:
 80118a8:	b160      	cbz	r0, 80118c4 <_Time__get_serialized_size+0x1c>
 80118aa:	2104      	movs	r1, #4
 80118ac:	2000      	movs	r0, #0
 80118ae:	b510      	push	{r4, lr}
 80118b0:	f001 fe7e 	bl	80135b0 <ucdr_alignment>
 80118b4:	2104      	movs	r1, #4
 80118b6:	1844      	adds	r4, r0, r1
 80118b8:	4620      	mov	r0, r4
 80118ba:	f001 fe79 	bl	80135b0 <ucdr_alignment>
 80118be:	3004      	adds	r0, #4
 80118c0:	4420      	add	r0, r4
 80118c2:	bd10      	pop	{r4, pc}
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop

080118c8 <_Time__max_serialized_size>:
 80118c8:	b510      	push	{r4, lr}
 80118ca:	2104      	movs	r1, #4
 80118cc:	2000      	movs	r0, #0
 80118ce:	f001 fe6f 	bl	80135b0 <ucdr_alignment>
 80118d2:	2104      	movs	r1, #4
 80118d4:	1844      	adds	r4, r0, r1
 80118d6:	4620      	mov	r0, r4
 80118d8:	f001 fe6a 	bl	80135b0 <ucdr_alignment>
 80118dc:	3004      	adds	r0, #4
 80118de:	4420      	add	r0, r4
 80118e0:	bd10      	pop	{r4, pc}
 80118e2:	bf00      	nop

080118e4 <max_serialized_size_builtin_interfaces__msg__Time>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	460c      	mov	r4, r1
 80118e8:	2301      	movs	r3, #1
 80118ea:	2104      	movs	r1, #4
 80118ec:	1d25      	adds	r5, r4, #4
 80118ee:	7003      	strb	r3, [r0, #0]
 80118f0:	4620      	mov	r0, r4
 80118f2:	f1c4 0404 	rsb	r4, r4, #4
 80118f6:	f001 fe5b 	bl	80135b0 <ucdr_alignment>
 80118fa:	4405      	add	r5, r0
 80118fc:	2104      	movs	r1, #4
 80118fe:	4628      	mov	r0, r5
 8011900:	f001 fe56 	bl	80135b0 <ucdr_alignment>
 8011904:	4420      	add	r0, r4
 8011906:	4428      	add	r0, r5
 8011908:	bd38      	pop	{r3, r4, r5, pc}
 801190a:	bf00      	nop

0801190c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801190c:	4800      	ldr	r0, [pc, #0]	@ (8011910 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801190e:	4770      	bx	lr
 8011910:	24000444 	.word	0x24000444

08011914 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8011914:	f009 bc2a 	b.w	801b16c <geometry_msgs__msg__Quaternion__init>

08011918 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8011918:	f009 bc38 	b.w	801b18c <geometry_msgs__msg__Quaternion__fini>

0801191c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801191c:	4b04      	ldr	r3, [pc, #16]	@ (8011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	b10a      	cbz	r2, 8011926 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8011922:	4803      	ldr	r0, [pc, #12]	@ (8011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011924:	4770      	bx	lr
 8011926:	4a03      	ldr	r2, [pc, #12]	@ (8011934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8011928:	4801      	ldr	r0, [pc, #4]	@ (8011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801192a:	6812      	ldr	r2, [r2, #0]
 801192c:	601a      	str	r2, [r3, #0]
 801192e:	4770      	bx	lr
 8011930:	2400055c 	.word	0x2400055c
 8011934:	2400067c 	.word	0x2400067c

08011938 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8011938:	f009 bc2a 	b.w	801b190 <geometry_msgs__msg__Vector3__init>

0801193c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 801193c:	f009 bc2c 	b.w	801b198 <geometry_msgs__msg__Vector3__fini>

08011940 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8011940:	4b04      	ldr	r3, [pc, #16]	@ (8011954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	b10a      	cbz	r2, 801194a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8011946:	4803      	ldr	r0, [pc, #12]	@ (8011954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8011948:	4770      	bx	lr
 801194a:	4a03      	ldr	r2, [pc, #12]	@ (8011958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 801194c:	4801      	ldr	r0, [pc, #4]	@ (8011954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801194e:	6812      	ldr	r2, [r2, #0]
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	4770      	bx	lr
 8011954:	2400061c 	.word	0x2400061c
 8011958:	2400067c 	.word	0x2400067c

0801195c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 801195c:	b1e8      	cbz	r0, 801199a <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 801195e:	b570      	push	{r4, r5, r6, lr}
 8011960:	460d      	mov	r5, r1
 8011962:	2108      	movs	r1, #8
 8011964:	4628      	mov	r0, r5
 8011966:	f001 fe23 	bl	80135b0 <ucdr_alignment>
 801196a:	f105 0308 	add.w	r3, r5, #8
 801196e:	2108      	movs	r1, #8
 8011970:	f1c5 0508 	rsb	r5, r5, #8
 8011974:	181e      	adds	r6, r3, r0
 8011976:	4630      	mov	r0, r6
 8011978:	f001 fe1a 	bl	80135b0 <ucdr_alignment>
 801197c:	2108      	movs	r1, #8
 801197e:	1844      	adds	r4, r0, r1
 8011980:	4434      	add	r4, r6
 8011982:	4620      	mov	r0, r4
 8011984:	f001 fe14 	bl	80135b0 <ucdr_alignment>
 8011988:	2108      	movs	r1, #8
 801198a:	4408      	add	r0, r1
 801198c:	4404      	add	r4, r0
 801198e:	4620      	mov	r0, r4
 8011990:	f001 fe0e 	bl	80135b0 <ucdr_alignment>
 8011994:	4428      	add	r0, r5
 8011996:	4420      	add	r0, r4
 8011998:	bd70      	pop	{r4, r5, r6, pc}
 801199a:	4770      	bx	lr

0801199c <_Quaternion__cdr_deserialize>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	460c      	mov	r4, r1
 80119a0:	b199      	cbz	r1, 80119ca <_Quaternion__cdr_deserialize+0x2e>
 80119a2:	4605      	mov	r5, r0
 80119a4:	f001 fc18 	bl	80131d8 <ucdr_deserialize_double>
 80119a8:	f104 0108 	add.w	r1, r4, #8
 80119ac:	4628      	mov	r0, r5
 80119ae:	f001 fc13 	bl	80131d8 <ucdr_deserialize_double>
 80119b2:	f104 0110 	add.w	r1, r4, #16
 80119b6:	4628      	mov	r0, r5
 80119b8:	f001 fc0e 	bl	80131d8 <ucdr_deserialize_double>
 80119bc:	f104 0118 	add.w	r1, r4, #24
 80119c0:	4628      	mov	r0, r5
 80119c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119c6:	f001 bc07 	b.w	80131d8 <ucdr_deserialize_double>
 80119ca:	4608      	mov	r0, r1
 80119cc:	bd38      	pop	{r3, r4, r5, pc}
 80119ce:	bf00      	nop

080119d0 <_Quaternion__cdr_serialize>:
 80119d0:	b1c0      	cbz	r0, 8011a04 <_Quaternion__cdr_serialize+0x34>
 80119d2:	b538      	push	{r3, r4, r5, lr}
 80119d4:	460d      	mov	r5, r1
 80119d6:	4604      	mov	r4, r0
 80119d8:	ed90 0b00 	vldr	d0, [r0]
 80119dc:	4608      	mov	r0, r1
 80119de:	f001 fa59 	bl	8012e94 <ucdr_serialize_double>
 80119e2:	4628      	mov	r0, r5
 80119e4:	ed94 0b02 	vldr	d0, [r4, #8]
 80119e8:	f001 fa54 	bl	8012e94 <ucdr_serialize_double>
 80119ec:	4628      	mov	r0, r5
 80119ee:	ed94 0b04 	vldr	d0, [r4, #16]
 80119f2:	f001 fa4f 	bl	8012e94 <ucdr_serialize_double>
 80119f6:	4628      	mov	r0, r5
 80119f8:	ed94 0b06 	vldr	d0, [r4, #24]
 80119fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a00:	f001 ba48 	b.w	8012e94 <ucdr_serialize_double>
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop

08011a08 <_Quaternion__get_serialized_size>:
 8011a08:	b1c0      	cbz	r0, 8011a3c <_Quaternion__get_serialized_size+0x34>
 8011a0a:	2108      	movs	r1, #8
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	b538      	push	{r3, r4, r5, lr}
 8011a10:	f001 fdce 	bl	80135b0 <ucdr_alignment>
 8011a14:	2108      	movs	r1, #8
 8011a16:	1845      	adds	r5, r0, r1
 8011a18:	4628      	mov	r0, r5
 8011a1a:	f001 fdc9 	bl	80135b0 <ucdr_alignment>
 8011a1e:	2108      	movs	r1, #8
 8011a20:	1844      	adds	r4, r0, r1
 8011a22:	442c      	add	r4, r5
 8011a24:	4620      	mov	r0, r4
 8011a26:	f001 fdc3 	bl	80135b0 <ucdr_alignment>
 8011a2a:	2108      	movs	r1, #8
 8011a2c:	4408      	add	r0, r1
 8011a2e:	4404      	add	r4, r0
 8011a30:	4620      	mov	r0, r4
 8011a32:	f001 fdbd 	bl	80135b0 <ucdr_alignment>
 8011a36:	3008      	adds	r0, #8
 8011a38:	4420      	add	r0, r4
 8011a3a:	bd38      	pop	{r3, r4, r5, pc}
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop

08011a40 <_Quaternion__max_serialized_size>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	2108      	movs	r1, #8
 8011a44:	2000      	movs	r0, #0
 8011a46:	f001 fdb3 	bl	80135b0 <ucdr_alignment>
 8011a4a:	2108      	movs	r1, #8
 8011a4c:	1845      	adds	r5, r0, r1
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f001 fdae 	bl	80135b0 <ucdr_alignment>
 8011a54:	2108      	movs	r1, #8
 8011a56:	1844      	adds	r4, r0, r1
 8011a58:	442c      	add	r4, r5
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f001 fda8 	bl	80135b0 <ucdr_alignment>
 8011a60:	2108      	movs	r1, #8
 8011a62:	4408      	add	r0, r1
 8011a64:	4404      	add	r4, r0
 8011a66:	4620      	mov	r0, r4
 8011a68:	f001 fda2 	bl	80135b0 <ucdr_alignment>
 8011a6c:	3008      	adds	r0, #8
 8011a6e:	4420      	add	r0, r4
 8011a70:	bd38      	pop	{r3, r4, r5, pc}
 8011a72:	bf00      	nop

08011a74 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011a74:	b570      	push	{r4, r5, r6, lr}
 8011a76:	460c      	mov	r4, r1
 8011a78:	2301      	movs	r3, #1
 8011a7a:	2108      	movs	r1, #8
 8011a7c:	f104 0508 	add.w	r5, r4, #8
 8011a80:	7003      	strb	r3, [r0, #0]
 8011a82:	4620      	mov	r0, r4
 8011a84:	f1c4 0408 	rsb	r4, r4, #8
 8011a88:	f001 fd92 	bl	80135b0 <ucdr_alignment>
 8011a8c:	1946      	adds	r6, r0, r5
 8011a8e:	2108      	movs	r1, #8
 8011a90:	4630      	mov	r0, r6
 8011a92:	f001 fd8d 	bl	80135b0 <ucdr_alignment>
 8011a96:	2108      	movs	r1, #8
 8011a98:	1845      	adds	r5, r0, r1
 8011a9a:	4435      	add	r5, r6
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	f001 fd87 	bl	80135b0 <ucdr_alignment>
 8011aa2:	2108      	movs	r1, #8
 8011aa4:	4408      	add	r0, r1
 8011aa6:	4405      	add	r5, r0
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f001 fd81 	bl	80135b0 <ucdr_alignment>
 8011aae:	4420      	add	r0, r4
 8011ab0:	4428      	add	r0, r5
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}

08011ab4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011ab4:	4800      	ldr	r0, [pc, #0]	@ (8011ab8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011ab6:	4770      	bx	lr
 8011ab8:	24000628 	.word	0x24000628

08011abc <get_serialized_size_geometry_msgs__msg__Vector3>:
 8011abc:	b1b8      	cbz	r0, 8011aee <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8011abe:	b538      	push	{r3, r4, r5, lr}
 8011ac0:	460d      	mov	r5, r1
 8011ac2:	2108      	movs	r1, #8
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f001 fd73 	bl	80135b0 <ucdr_alignment>
 8011aca:	f105 0308 	add.w	r3, r5, #8
 8011ace:	2108      	movs	r1, #8
 8011ad0:	f1c5 0508 	rsb	r5, r5, #8
 8011ad4:	181c      	adds	r4, r3, r0
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	f001 fd6a 	bl	80135b0 <ucdr_alignment>
 8011adc:	2108      	movs	r1, #8
 8011ade:	4408      	add	r0, r1
 8011ae0:	4404      	add	r4, r0
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f001 fd64 	bl	80135b0 <ucdr_alignment>
 8011ae8:	4428      	add	r0, r5
 8011aea:	4420      	add	r0, r4
 8011aec:	bd38      	pop	{r3, r4, r5, pc}
 8011aee:	4770      	bx	lr

08011af0 <_Vector3__cdr_deserialize>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	460c      	mov	r4, r1
 8011af4:	b171      	cbz	r1, 8011b14 <_Vector3__cdr_deserialize+0x24>
 8011af6:	4605      	mov	r5, r0
 8011af8:	f001 fb6e 	bl	80131d8 <ucdr_deserialize_double>
 8011afc:	f104 0108 	add.w	r1, r4, #8
 8011b00:	4628      	mov	r0, r5
 8011b02:	f001 fb69 	bl	80131d8 <ucdr_deserialize_double>
 8011b06:	f104 0110 	add.w	r1, r4, #16
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b10:	f001 bb62 	b.w	80131d8 <ucdr_deserialize_double>
 8011b14:	4608      	mov	r0, r1
 8011b16:	bd38      	pop	{r3, r4, r5, pc}

08011b18 <_Vector3__cdr_serialize>:
 8011b18:	b198      	cbz	r0, 8011b42 <_Vector3__cdr_serialize+0x2a>
 8011b1a:	b538      	push	{r3, r4, r5, lr}
 8011b1c:	460d      	mov	r5, r1
 8011b1e:	4604      	mov	r4, r0
 8011b20:	ed90 0b00 	vldr	d0, [r0]
 8011b24:	4608      	mov	r0, r1
 8011b26:	f001 f9b5 	bl	8012e94 <ucdr_serialize_double>
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	ed94 0b02 	vldr	d0, [r4, #8]
 8011b30:	f001 f9b0 	bl	8012e94 <ucdr_serialize_double>
 8011b34:	4628      	mov	r0, r5
 8011b36:	ed94 0b04 	vldr	d0, [r4, #16]
 8011b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b3e:	f001 b9a9 	b.w	8012e94 <ucdr_serialize_double>
 8011b42:	4770      	bx	lr

08011b44 <_Vector3__get_serialized_size>:
 8011b44:	b190      	cbz	r0, 8011b6c <_Vector3__get_serialized_size+0x28>
 8011b46:	2108      	movs	r1, #8
 8011b48:	2000      	movs	r0, #0
 8011b4a:	b510      	push	{r4, lr}
 8011b4c:	f001 fd30 	bl	80135b0 <ucdr_alignment>
 8011b50:	2108      	movs	r1, #8
 8011b52:	1844      	adds	r4, r0, r1
 8011b54:	4620      	mov	r0, r4
 8011b56:	f001 fd2b 	bl	80135b0 <ucdr_alignment>
 8011b5a:	2108      	movs	r1, #8
 8011b5c:	4408      	add	r0, r1
 8011b5e:	4404      	add	r4, r0
 8011b60:	4620      	mov	r0, r4
 8011b62:	f001 fd25 	bl	80135b0 <ucdr_alignment>
 8011b66:	3008      	adds	r0, #8
 8011b68:	4420      	add	r0, r4
 8011b6a:	bd10      	pop	{r4, pc}
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop

08011b70 <_Vector3__max_serialized_size>:
 8011b70:	b538      	push	{r3, r4, r5, lr}
 8011b72:	2108      	movs	r1, #8
 8011b74:	2000      	movs	r0, #0
 8011b76:	f001 fd1b 	bl	80135b0 <ucdr_alignment>
 8011b7a:	2108      	movs	r1, #8
 8011b7c:	1845      	adds	r5, r0, r1
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f001 fd16 	bl	80135b0 <ucdr_alignment>
 8011b84:	2108      	movs	r1, #8
 8011b86:	1844      	adds	r4, r0, r1
 8011b88:	442c      	add	r4, r5
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	f001 fd10 	bl	80135b0 <ucdr_alignment>
 8011b90:	3008      	adds	r0, #8
 8011b92:	4420      	add	r0, r4
 8011b94:	bd38      	pop	{r3, r4, r5, pc}
 8011b96:	bf00      	nop

08011b98 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8011b98:	b570      	push	{r4, r5, r6, lr}
 8011b9a:	460c      	mov	r4, r1
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	2108      	movs	r1, #8
 8011ba0:	f104 0508 	add.w	r5, r4, #8
 8011ba4:	7003      	strb	r3, [r0, #0]
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f1c4 0408 	rsb	r4, r4, #8
 8011bac:	f001 fd00 	bl	80135b0 <ucdr_alignment>
 8011bb0:	1946      	adds	r6, r0, r5
 8011bb2:	2108      	movs	r1, #8
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	f001 fcfb 	bl	80135b0 <ucdr_alignment>
 8011bba:	2108      	movs	r1, #8
 8011bbc:	1845      	adds	r5, r0, r1
 8011bbe:	4435      	add	r5, r6
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	f001 fcf5 	bl	80135b0 <ucdr_alignment>
 8011bc6:	4420      	add	r0, r4
 8011bc8:	4428      	add	r0, r5
 8011bca:	bd70      	pop	{r4, r5, r6, pc}

08011bcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8011bcc:	4800      	ldr	r0, [pc, #0]	@ (8011bd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8011bce:	4770      	bx	lr
 8011bd0:	24000650 	.word	0x24000650

08011bd4 <ucdr_serialize_endian_array_char>:
 8011bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd8:	4619      	mov	r1, r3
 8011bda:	461f      	mov	r7, r3
 8011bdc:	4605      	mov	r5, r0
 8011bde:	4690      	mov	r8, r2
 8011be0:	f001 fc8e 	bl	8013500 <ucdr_check_buffer_available_for>
 8011be4:	b9e0      	cbnz	r0, 8011c20 <ucdr_serialize_endian_array_char+0x4c>
 8011be6:	463e      	mov	r6, r7
 8011be8:	e00b      	b.n	8011c02 <ucdr_serialize_endian_array_char+0x2e>
 8011bea:	4441      	add	r1, r8
 8011bec:	68a8      	ldr	r0, [r5, #8]
 8011bee:	4622      	mov	r2, r4
 8011bf0:	1b36      	subs	r6, r6, r4
 8011bf2:	f00b fa0a 	bl	801d00a <memcpy>
 8011bf6:	68ab      	ldr	r3, [r5, #8]
 8011bf8:	6928      	ldr	r0, [r5, #16]
 8011bfa:	4423      	add	r3, r4
 8011bfc:	4420      	add	r0, r4
 8011bfe:	60ab      	str	r3, [r5, #8]
 8011c00:	6128      	str	r0, [r5, #16]
 8011c02:	4631      	mov	r1, r6
 8011c04:	2201      	movs	r2, #1
 8011c06:	4628      	mov	r0, r5
 8011c08:	f001 fd04 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011c0c:	1bb9      	subs	r1, r7, r6
 8011c0e:	4604      	mov	r4, r0
 8011c10:	2800      	cmp	r0, #0
 8011c12:	d1ea      	bne.n	8011bea <ucdr_serialize_endian_array_char+0x16>
 8011c14:	2301      	movs	r3, #1
 8011c16:	7da8      	ldrb	r0, [r5, #22]
 8011c18:	756b      	strb	r3, [r5, #21]
 8011c1a:	4058      	eors	r0, r3
 8011c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c20:	463a      	mov	r2, r7
 8011c22:	4641      	mov	r1, r8
 8011c24:	68a8      	ldr	r0, [r5, #8]
 8011c26:	f00b f9f0 	bl	801d00a <memcpy>
 8011c2a:	68aa      	ldr	r2, [r5, #8]
 8011c2c:	692b      	ldr	r3, [r5, #16]
 8011c2e:	443a      	add	r2, r7
 8011c30:	443b      	add	r3, r7
 8011c32:	60aa      	str	r2, [r5, #8]
 8011c34:	612b      	str	r3, [r5, #16]
 8011c36:	e7ed      	b.n	8011c14 <ucdr_serialize_endian_array_char+0x40>

08011c38 <ucdr_deserialize_endian_array_char>:
 8011c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	461f      	mov	r7, r3
 8011c40:	4605      	mov	r5, r0
 8011c42:	4690      	mov	r8, r2
 8011c44:	f001 fc5c 	bl	8013500 <ucdr_check_buffer_available_for>
 8011c48:	b9e8      	cbnz	r0, 8011c86 <ucdr_deserialize_endian_array_char+0x4e>
 8011c4a:	463e      	mov	r6, r7
 8011c4c:	e00c      	b.n	8011c68 <ucdr_deserialize_endian_array_char+0x30>
 8011c4e:	eb08 0003 	add.w	r0, r8, r3
 8011c52:	68a9      	ldr	r1, [r5, #8]
 8011c54:	4622      	mov	r2, r4
 8011c56:	1b36      	subs	r6, r6, r4
 8011c58:	f00b f9d7 	bl	801d00a <memcpy>
 8011c5c:	68ab      	ldr	r3, [r5, #8]
 8011c5e:	6928      	ldr	r0, [r5, #16]
 8011c60:	4423      	add	r3, r4
 8011c62:	4420      	add	r0, r4
 8011c64:	60ab      	str	r3, [r5, #8]
 8011c66:	6128      	str	r0, [r5, #16]
 8011c68:	4631      	mov	r1, r6
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	f001 fcd1 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011c72:	1bbb      	subs	r3, r7, r6
 8011c74:	4604      	mov	r4, r0
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d1e9      	bne.n	8011c4e <ucdr_deserialize_endian_array_char+0x16>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	7da8      	ldrb	r0, [r5, #22]
 8011c7e:	756b      	strb	r3, [r5, #21]
 8011c80:	4058      	eors	r0, r3
 8011c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c86:	463a      	mov	r2, r7
 8011c88:	68a9      	ldr	r1, [r5, #8]
 8011c8a:	4640      	mov	r0, r8
 8011c8c:	f00b f9bd 	bl	801d00a <memcpy>
 8011c90:	68aa      	ldr	r2, [r5, #8]
 8011c92:	692b      	ldr	r3, [r5, #16]
 8011c94:	443a      	add	r2, r7
 8011c96:	443b      	add	r3, r7
 8011c98:	60aa      	str	r2, [r5, #8]
 8011c9a:	612b      	str	r3, [r5, #16]
 8011c9c:	e7ed      	b.n	8011c7a <ucdr_deserialize_endian_array_char+0x42>
 8011c9e:	bf00      	nop

08011ca0 <ucdr_serialize_array_uint8_t>:
 8011ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca4:	4688      	mov	r8, r1
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	4617      	mov	r7, r2
 8011caa:	4605      	mov	r5, r0
 8011cac:	f001 fc28 	bl	8013500 <ucdr_check_buffer_available_for>
 8011cb0:	b9e0      	cbnz	r0, 8011cec <ucdr_serialize_array_uint8_t+0x4c>
 8011cb2:	463e      	mov	r6, r7
 8011cb4:	e00b      	b.n	8011cce <ucdr_serialize_array_uint8_t+0x2e>
 8011cb6:	4441      	add	r1, r8
 8011cb8:	68a8      	ldr	r0, [r5, #8]
 8011cba:	4622      	mov	r2, r4
 8011cbc:	1b36      	subs	r6, r6, r4
 8011cbe:	f00b f9a4 	bl	801d00a <memcpy>
 8011cc2:	68ab      	ldr	r3, [r5, #8]
 8011cc4:	6928      	ldr	r0, [r5, #16]
 8011cc6:	4423      	add	r3, r4
 8011cc8:	4420      	add	r0, r4
 8011cca:	60ab      	str	r3, [r5, #8]
 8011ccc:	6128      	str	r0, [r5, #16]
 8011cce:	4631      	mov	r1, r6
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	f001 fc9e 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011cd8:	1bb9      	subs	r1, r7, r6
 8011cda:	4604      	mov	r4, r0
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d1ea      	bne.n	8011cb6 <ucdr_serialize_array_uint8_t+0x16>
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	7da8      	ldrb	r0, [r5, #22]
 8011ce4:	756b      	strb	r3, [r5, #21]
 8011ce6:	4058      	eors	r0, r3
 8011ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cec:	463a      	mov	r2, r7
 8011cee:	4641      	mov	r1, r8
 8011cf0:	68a8      	ldr	r0, [r5, #8]
 8011cf2:	f00b f98a 	bl	801d00a <memcpy>
 8011cf6:	68aa      	ldr	r2, [r5, #8]
 8011cf8:	692b      	ldr	r3, [r5, #16]
 8011cfa:	443a      	add	r2, r7
 8011cfc:	443b      	add	r3, r7
 8011cfe:	60aa      	str	r2, [r5, #8]
 8011d00:	612b      	str	r3, [r5, #16]
 8011d02:	e7ed      	b.n	8011ce0 <ucdr_serialize_array_uint8_t+0x40>

08011d04 <ucdr_serialize_endian_array_uint8_t>:
 8011d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d08:	4619      	mov	r1, r3
 8011d0a:	461f      	mov	r7, r3
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	4690      	mov	r8, r2
 8011d10:	f001 fbf6 	bl	8013500 <ucdr_check_buffer_available_for>
 8011d14:	b9e0      	cbnz	r0, 8011d50 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011d16:	463e      	mov	r6, r7
 8011d18:	e00b      	b.n	8011d32 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8011d1a:	4441      	add	r1, r8
 8011d1c:	68a8      	ldr	r0, [r5, #8]
 8011d1e:	4622      	mov	r2, r4
 8011d20:	1b36      	subs	r6, r6, r4
 8011d22:	f00b f972 	bl	801d00a <memcpy>
 8011d26:	68ab      	ldr	r3, [r5, #8]
 8011d28:	6928      	ldr	r0, [r5, #16]
 8011d2a:	4423      	add	r3, r4
 8011d2c:	4420      	add	r0, r4
 8011d2e:	60ab      	str	r3, [r5, #8]
 8011d30:	6128      	str	r0, [r5, #16]
 8011d32:	4631      	mov	r1, r6
 8011d34:	2201      	movs	r2, #1
 8011d36:	4628      	mov	r0, r5
 8011d38:	f001 fc6c 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011d3c:	1bb9      	subs	r1, r7, r6
 8011d3e:	4604      	mov	r4, r0
 8011d40:	2800      	cmp	r0, #0
 8011d42:	d1ea      	bne.n	8011d1a <ucdr_serialize_endian_array_uint8_t+0x16>
 8011d44:	2301      	movs	r3, #1
 8011d46:	7da8      	ldrb	r0, [r5, #22]
 8011d48:	756b      	strb	r3, [r5, #21]
 8011d4a:	4058      	eors	r0, r3
 8011d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d50:	463a      	mov	r2, r7
 8011d52:	4641      	mov	r1, r8
 8011d54:	68a8      	ldr	r0, [r5, #8]
 8011d56:	f00b f958 	bl	801d00a <memcpy>
 8011d5a:	68aa      	ldr	r2, [r5, #8]
 8011d5c:	692b      	ldr	r3, [r5, #16]
 8011d5e:	443a      	add	r2, r7
 8011d60:	443b      	add	r3, r7
 8011d62:	60aa      	str	r2, [r5, #8]
 8011d64:	612b      	str	r3, [r5, #16]
 8011d66:	e7ed      	b.n	8011d44 <ucdr_serialize_endian_array_uint8_t+0x40>

08011d68 <ucdr_deserialize_array_uint8_t>:
 8011d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6c:	4688      	mov	r8, r1
 8011d6e:	4611      	mov	r1, r2
 8011d70:	4617      	mov	r7, r2
 8011d72:	4605      	mov	r5, r0
 8011d74:	f001 fbc4 	bl	8013500 <ucdr_check_buffer_available_for>
 8011d78:	b9e8      	cbnz	r0, 8011db6 <ucdr_deserialize_array_uint8_t+0x4e>
 8011d7a:	463e      	mov	r6, r7
 8011d7c:	e00c      	b.n	8011d98 <ucdr_deserialize_array_uint8_t+0x30>
 8011d7e:	eb08 0003 	add.w	r0, r8, r3
 8011d82:	68a9      	ldr	r1, [r5, #8]
 8011d84:	4622      	mov	r2, r4
 8011d86:	1b36      	subs	r6, r6, r4
 8011d88:	f00b f93f 	bl	801d00a <memcpy>
 8011d8c:	68ab      	ldr	r3, [r5, #8]
 8011d8e:	6928      	ldr	r0, [r5, #16]
 8011d90:	4423      	add	r3, r4
 8011d92:	4420      	add	r0, r4
 8011d94:	60ab      	str	r3, [r5, #8]
 8011d96:	6128      	str	r0, [r5, #16]
 8011d98:	4631      	mov	r1, r6
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f001 fc39 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011da2:	1bbb      	subs	r3, r7, r6
 8011da4:	4604      	mov	r4, r0
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d1e9      	bne.n	8011d7e <ucdr_deserialize_array_uint8_t+0x16>
 8011daa:	2301      	movs	r3, #1
 8011dac:	7da8      	ldrb	r0, [r5, #22]
 8011dae:	756b      	strb	r3, [r5, #21]
 8011db0:	4058      	eors	r0, r3
 8011db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db6:	463a      	mov	r2, r7
 8011db8:	68a9      	ldr	r1, [r5, #8]
 8011dba:	4640      	mov	r0, r8
 8011dbc:	f00b f925 	bl	801d00a <memcpy>
 8011dc0:	68aa      	ldr	r2, [r5, #8]
 8011dc2:	692b      	ldr	r3, [r5, #16]
 8011dc4:	443a      	add	r2, r7
 8011dc6:	443b      	add	r3, r7
 8011dc8:	60aa      	str	r2, [r5, #8]
 8011dca:	612b      	str	r3, [r5, #16]
 8011dcc:	e7ed      	b.n	8011daa <ucdr_deserialize_array_uint8_t+0x42>
 8011dce:	bf00      	nop

08011dd0 <ucdr_deserialize_endian_array_uint8_t>:
 8011dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	461f      	mov	r7, r3
 8011dd8:	4605      	mov	r5, r0
 8011dda:	4690      	mov	r8, r2
 8011ddc:	f001 fb90 	bl	8013500 <ucdr_check_buffer_available_for>
 8011de0:	b9e8      	cbnz	r0, 8011e1e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8011de2:	463e      	mov	r6, r7
 8011de4:	e00c      	b.n	8011e00 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8011de6:	eb08 0003 	add.w	r0, r8, r3
 8011dea:	68a9      	ldr	r1, [r5, #8]
 8011dec:	4622      	mov	r2, r4
 8011dee:	1b36      	subs	r6, r6, r4
 8011df0:	f00b f90b 	bl	801d00a <memcpy>
 8011df4:	68ab      	ldr	r3, [r5, #8]
 8011df6:	6928      	ldr	r0, [r5, #16]
 8011df8:	4423      	add	r3, r4
 8011dfa:	4420      	add	r0, r4
 8011dfc:	60ab      	str	r3, [r5, #8]
 8011dfe:	6128      	str	r0, [r5, #16]
 8011e00:	4631      	mov	r1, r6
 8011e02:	2201      	movs	r2, #1
 8011e04:	4628      	mov	r0, r5
 8011e06:	f001 fc05 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011e0a:	1bbb      	subs	r3, r7, r6
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d1e9      	bne.n	8011de6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011e12:	2301      	movs	r3, #1
 8011e14:	7da8      	ldrb	r0, [r5, #22]
 8011e16:	756b      	strb	r3, [r5, #21]
 8011e18:	4058      	eors	r0, r3
 8011e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1e:	463a      	mov	r2, r7
 8011e20:	68a9      	ldr	r1, [r5, #8]
 8011e22:	4640      	mov	r0, r8
 8011e24:	f00b f8f1 	bl	801d00a <memcpy>
 8011e28:	68aa      	ldr	r2, [r5, #8]
 8011e2a:	692b      	ldr	r3, [r5, #16]
 8011e2c:	443a      	add	r2, r7
 8011e2e:	443b      	add	r3, r7
 8011e30:	60aa      	str	r2, [r5, #8]
 8011e32:	612b      	str	r3, [r5, #16]
 8011e34:	e7ed      	b.n	8011e12 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8011e36:	bf00      	nop

08011e38 <ucdr_serialize_array_double>:
 8011e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	460e      	mov	r6, r1
 8011e40:	2108      	movs	r1, #8
 8011e42:	4617      	mov	r7, r2
 8011e44:	f001 fbbc 	bl	80135c0 <ucdr_buffer_alignment>
 8011e48:	4601      	mov	r1, r0
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	7d65      	ldrb	r5, [r4, #21]
 8011e4e:	f001 fbff 	bl	8013650 <ucdr_advance_buffer>
 8011e52:	7d21      	ldrb	r1, [r4, #20]
 8011e54:	7565      	strb	r5, [r4, #21]
 8011e56:	2901      	cmp	r1, #1
 8011e58:	d010      	beq.n	8011e7c <ucdr_serialize_array_double+0x44>
 8011e5a:	b157      	cbz	r7, 8011e72 <ucdr_serialize_array_double+0x3a>
 8011e5c:	2500      	movs	r5, #0
 8011e5e:	e000      	b.n	8011e62 <ucdr_serialize_array_double+0x2a>
 8011e60:	7d21      	ldrb	r1, [r4, #20]
 8011e62:	3501      	adds	r5, #1
 8011e64:	4620      	mov	r0, r4
 8011e66:	ecb6 0b02 	vldmia	r6!, {d0}
 8011e6a:	f001 f8e3 	bl	8013034 <ucdr_serialize_endian_double>
 8011e6e:	42af      	cmp	r7, r5
 8011e70:	d1f6      	bne.n	8011e60 <ucdr_serialize_array_double+0x28>
 8011e72:	7da0      	ldrb	r0, [r4, #22]
 8011e74:	f080 0001 	eor.w	r0, r0, #1
 8011e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e7c:	00ff      	lsls	r7, r7, #3
 8011e7e:	4620      	mov	r0, r4
 8011e80:	4639      	mov	r1, r7
 8011e82:	f001 fb3d 	bl	8013500 <ucdr_check_buffer_available_for>
 8011e86:	b9f8      	cbnz	r0, 8011ec8 <ucdr_serialize_array_double+0x90>
 8011e88:	46b8      	mov	r8, r7
 8011e8a:	e00c      	b.n	8011ea6 <ucdr_serialize_array_double+0x6e>
 8011e8c:	462a      	mov	r2, r5
 8011e8e:	4431      	add	r1, r6
 8011e90:	68a0      	ldr	r0, [r4, #8]
 8011e92:	eba8 0805 	sub.w	r8, r8, r5
 8011e96:	f00b f8b8 	bl	801d00a <memcpy>
 8011e9a:	68a2      	ldr	r2, [r4, #8]
 8011e9c:	6923      	ldr	r3, [r4, #16]
 8011e9e:	442a      	add	r2, r5
 8011ea0:	442b      	add	r3, r5
 8011ea2:	60a2      	str	r2, [r4, #8]
 8011ea4:	6123      	str	r3, [r4, #16]
 8011ea6:	4641      	mov	r1, r8
 8011ea8:	2208      	movs	r2, #8
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f001 fbb2 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011eb0:	eba7 0108 	sub.w	r1, r7, r8
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d1e8      	bne.n	8011e8c <ucdr_serialize_array_double+0x54>
 8011eba:	2308      	movs	r3, #8
 8011ebc:	7da0      	ldrb	r0, [r4, #22]
 8011ebe:	7563      	strb	r3, [r4, #21]
 8011ec0:	f080 0001 	eor.w	r0, r0, #1
 8011ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec8:	463a      	mov	r2, r7
 8011eca:	4631      	mov	r1, r6
 8011ecc:	68a0      	ldr	r0, [r4, #8]
 8011ece:	f00b f89c 	bl	801d00a <memcpy>
 8011ed2:	68a2      	ldr	r2, [r4, #8]
 8011ed4:	6923      	ldr	r3, [r4, #16]
 8011ed6:	443a      	add	r2, r7
 8011ed8:	441f      	add	r7, r3
 8011eda:	60a2      	str	r2, [r4, #8]
 8011edc:	6127      	str	r7, [r4, #16]
 8011ede:	e7ec      	b.n	8011eba <ucdr_serialize_array_double+0x82>

08011ee0 <ucdr_deserialize_array_double>:
 8011ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	460e      	mov	r6, r1
 8011ee8:	2108      	movs	r1, #8
 8011eea:	4617      	mov	r7, r2
 8011eec:	f001 fb68 	bl	80135c0 <ucdr_buffer_alignment>
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	7d65      	ldrb	r5, [r4, #21]
 8011ef6:	f001 fbab 	bl	8013650 <ucdr_advance_buffer>
 8011efa:	7d21      	ldrb	r1, [r4, #20]
 8011efc:	7565      	strb	r5, [r4, #21]
 8011efe:	2901      	cmp	r1, #1
 8011f00:	d010      	beq.n	8011f24 <ucdr_deserialize_array_double+0x44>
 8011f02:	b157      	cbz	r7, 8011f1a <ucdr_deserialize_array_double+0x3a>
 8011f04:	2500      	movs	r5, #0
 8011f06:	e000      	b.n	8011f0a <ucdr_deserialize_array_double+0x2a>
 8011f08:	7d21      	ldrb	r1, [r4, #20]
 8011f0a:	3501      	adds	r5, #1
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	4620      	mov	r0, r4
 8011f10:	3608      	adds	r6, #8
 8011f12:	f001 fa27 	bl	8013364 <ucdr_deserialize_endian_double>
 8011f16:	42af      	cmp	r7, r5
 8011f18:	d1f6      	bne.n	8011f08 <ucdr_deserialize_array_double+0x28>
 8011f1a:	7da0      	ldrb	r0, [r4, #22]
 8011f1c:	f080 0001 	eor.w	r0, r0, #1
 8011f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f24:	00ff      	lsls	r7, r7, #3
 8011f26:	4620      	mov	r0, r4
 8011f28:	4639      	mov	r1, r7
 8011f2a:	f001 fae9 	bl	8013500 <ucdr_check_buffer_available_for>
 8011f2e:	b9f8      	cbnz	r0, 8011f70 <ucdr_deserialize_array_double+0x90>
 8011f30:	46b8      	mov	r8, r7
 8011f32:	e00c      	b.n	8011f4e <ucdr_deserialize_array_double+0x6e>
 8011f34:	18f0      	adds	r0, r6, r3
 8011f36:	462a      	mov	r2, r5
 8011f38:	68a1      	ldr	r1, [r4, #8]
 8011f3a:	eba8 0805 	sub.w	r8, r8, r5
 8011f3e:	f00b f864 	bl	801d00a <memcpy>
 8011f42:	68a2      	ldr	r2, [r4, #8]
 8011f44:	6923      	ldr	r3, [r4, #16]
 8011f46:	442a      	add	r2, r5
 8011f48:	442b      	add	r3, r5
 8011f4a:	60a2      	str	r2, [r4, #8]
 8011f4c:	6123      	str	r3, [r4, #16]
 8011f4e:	4641      	mov	r1, r8
 8011f50:	2208      	movs	r2, #8
 8011f52:	4620      	mov	r0, r4
 8011f54:	f001 fb5e 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8011f58:	eba7 0308 	sub.w	r3, r7, r8
 8011f5c:	4605      	mov	r5, r0
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d1e8      	bne.n	8011f34 <ucdr_deserialize_array_double+0x54>
 8011f62:	2308      	movs	r3, #8
 8011f64:	7da0      	ldrb	r0, [r4, #22]
 8011f66:	7563      	strb	r3, [r4, #21]
 8011f68:	f080 0001 	eor.w	r0, r0, #1
 8011f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f70:	463a      	mov	r2, r7
 8011f72:	68a1      	ldr	r1, [r4, #8]
 8011f74:	4630      	mov	r0, r6
 8011f76:	f00b f848 	bl	801d00a <memcpy>
 8011f7a:	68a2      	ldr	r2, [r4, #8]
 8011f7c:	6923      	ldr	r3, [r4, #16]
 8011f7e:	443a      	add	r2, r7
 8011f80:	441f      	add	r7, r3
 8011f82:	60a2      	str	r2, [r4, #8]
 8011f84:	6127      	str	r7, [r4, #16]
 8011f86:	e7ec      	b.n	8011f62 <ucdr_deserialize_array_double+0x82>

08011f88 <ucdr_serialize_bool>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	460d      	mov	r5, r1
 8011f8c:	2101      	movs	r1, #1
 8011f8e:	4604      	mov	r4, r0
 8011f90:	f001 fac2 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8011f94:	b148      	cbz	r0, 8011faa <ucdr_serialize_bool+0x22>
 8011f96:	68a3      	ldr	r3, [r4, #8]
 8011f98:	2101      	movs	r1, #1
 8011f9a:	701d      	strb	r5, [r3, #0]
 8011f9c:	68a2      	ldr	r2, [r4, #8]
 8011f9e:	6923      	ldr	r3, [r4, #16]
 8011fa0:	440a      	add	r2, r1
 8011fa2:	7561      	strb	r1, [r4, #21]
 8011fa4:	440b      	add	r3, r1
 8011fa6:	60a2      	str	r2, [r4, #8]
 8011fa8:	6123      	str	r3, [r4, #16]
 8011faa:	7da0      	ldrb	r0, [r4, #22]
 8011fac:	f080 0001 	eor.w	r0, r0, #1
 8011fb0:	bd38      	pop	{r3, r4, r5, pc}
 8011fb2:	bf00      	nop

08011fb4 <ucdr_deserialize_bool>:
 8011fb4:	b538      	push	{r3, r4, r5, lr}
 8011fb6:	460d      	mov	r5, r1
 8011fb8:	2101      	movs	r1, #1
 8011fba:	4604      	mov	r4, r0
 8011fbc:	f001 faac 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8011fc0:	b160      	cbz	r0, 8011fdc <ucdr_deserialize_bool+0x28>
 8011fc2:	68a2      	ldr	r2, [r4, #8]
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	6923      	ldr	r3, [r4, #16]
 8011fc8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011fcc:	440b      	add	r3, r1
 8011fce:	3800      	subs	r0, #0
 8011fd0:	bf18      	it	ne
 8011fd2:	2001      	movne	r0, #1
 8011fd4:	7028      	strb	r0, [r5, #0]
 8011fd6:	60a2      	str	r2, [r4, #8]
 8011fd8:	6123      	str	r3, [r4, #16]
 8011fda:	7561      	strb	r1, [r4, #21]
 8011fdc:	7da0      	ldrb	r0, [r4, #22]
 8011fde:	f080 0001 	eor.w	r0, r0, #1
 8011fe2:	bd38      	pop	{r3, r4, r5, pc}

08011fe4 <ucdr_serialize_uint8_t>:
 8011fe4:	b538      	push	{r3, r4, r5, lr}
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	2101      	movs	r1, #1
 8011fea:	4604      	mov	r4, r0
 8011fec:	f001 fa94 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8011ff0:	b148      	cbz	r0, 8012006 <ucdr_serialize_uint8_t+0x22>
 8011ff2:	68a3      	ldr	r3, [r4, #8]
 8011ff4:	2101      	movs	r1, #1
 8011ff6:	701d      	strb	r5, [r3, #0]
 8011ff8:	68a2      	ldr	r2, [r4, #8]
 8011ffa:	6923      	ldr	r3, [r4, #16]
 8011ffc:	440a      	add	r2, r1
 8011ffe:	7561      	strb	r1, [r4, #21]
 8012000:	440b      	add	r3, r1
 8012002:	60a2      	str	r2, [r4, #8]
 8012004:	6123      	str	r3, [r4, #16]
 8012006:	7da0      	ldrb	r0, [r4, #22]
 8012008:	f080 0001 	eor.w	r0, r0, #1
 801200c:	bd38      	pop	{r3, r4, r5, pc}
 801200e:	bf00      	nop

08012010 <ucdr_deserialize_uint8_t>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	460d      	mov	r5, r1
 8012014:	2101      	movs	r1, #1
 8012016:	4604      	mov	r4, r0
 8012018:	f001 fa7e 	bl	8013518 <ucdr_check_final_buffer_behavior>
 801201c:	b150      	cbz	r0, 8012034 <ucdr_deserialize_uint8_t+0x24>
 801201e:	68a3      	ldr	r3, [r4, #8]
 8012020:	2101      	movs	r1, #1
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	702b      	strb	r3, [r5, #0]
 8012026:	68a2      	ldr	r2, [r4, #8]
 8012028:	6923      	ldr	r3, [r4, #16]
 801202a:	440a      	add	r2, r1
 801202c:	7561      	strb	r1, [r4, #21]
 801202e:	440b      	add	r3, r1
 8012030:	60a2      	str	r2, [r4, #8]
 8012032:	6123      	str	r3, [r4, #16]
 8012034:	7da0      	ldrb	r0, [r4, #22]
 8012036:	f080 0001 	eor.w	r0, r0, #1
 801203a:	bd38      	pop	{r3, r4, r5, pc}

0801203c <ucdr_serialize_uint16_t>:
 801203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	460b      	mov	r3, r1
 8012042:	b082      	sub	sp, #8
 8012044:	4604      	mov	r4, r0
 8012046:	2102      	movs	r1, #2
 8012048:	f8ad 3006 	strh.w	r3, [sp, #6]
 801204c:	f001 fab8 	bl	80135c0 <ucdr_buffer_alignment>
 8012050:	4601      	mov	r1, r0
 8012052:	4620      	mov	r0, r4
 8012054:	7d67      	ldrb	r7, [r4, #21]
 8012056:	f001 fafb 	bl	8013650 <ucdr_advance_buffer>
 801205a:	2102      	movs	r1, #2
 801205c:	4620      	mov	r0, r4
 801205e:	f001 fa4f 	bl	8013500 <ucdr_check_buffer_available_for>
 8012062:	bb78      	cbnz	r0, 80120c4 <ucdr_serialize_uint16_t+0x88>
 8012064:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012068:	42ab      	cmp	r3, r5
 801206a:	d926      	bls.n	80120ba <ucdr_serialize_uint16_t+0x7e>
 801206c:	1b5e      	subs	r6, r3, r5
 801206e:	60a3      	str	r3, [r4, #8]
 8012070:	6923      	ldr	r3, [r4, #16]
 8012072:	4620      	mov	r0, r4
 8012074:	f1c6 0802 	rsb	r8, r6, #2
 8012078:	4433      	add	r3, r6
 801207a:	4641      	mov	r1, r8
 801207c:	6123      	str	r3, [r4, #16]
 801207e:	f001 fa4b 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012082:	2800      	cmp	r0, #0
 8012084:	d03b      	beq.n	80120fe <ucdr_serialize_uint16_t+0xc2>
 8012086:	7d23      	ldrb	r3, [r4, #20]
 8012088:	2b01      	cmp	r3, #1
 801208a:	d04a      	beq.n	8012122 <ucdr_serialize_uint16_t+0xe6>
 801208c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012090:	702b      	strb	r3, [r5, #0]
 8012092:	2e00      	cmp	r6, #0
 8012094:	d040      	beq.n	8012118 <ucdr_serialize_uint16_t+0xdc>
 8012096:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801209a:	706b      	strb	r3, [r5, #1]
 801209c:	6923      	ldr	r3, [r4, #16]
 801209e:	2102      	movs	r1, #2
 80120a0:	68a2      	ldr	r2, [r4, #8]
 80120a2:	3302      	adds	r3, #2
 80120a4:	7da0      	ldrb	r0, [r4, #22]
 80120a6:	4442      	add	r2, r8
 80120a8:	7561      	strb	r1, [r4, #21]
 80120aa:	1b9e      	subs	r6, r3, r6
 80120ac:	f080 0001 	eor.w	r0, r0, #1
 80120b0:	60a2      	str	r2, [r4, #8]
 80120b2:	6126      	str	r6, [r4, #16]
 80120b4:	b002      	add	sp, #8
 80120b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ba:	2102      	movs	r1, #2
 80120bc:	4620      	mov	r0, r4
 80120be:	f001 fa2b 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80120c2:	b190      	cbz	r0, 80120ea <ucdr_serialize_uint16_t+0xae>
 80120c4:	7d23      	ldrb	r3, [r4, #20]
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	68a3      	ldr	r3, [r4, #8]
 80120ca:	d014      	beq.n	80120f6 <ucdr_serialize_uint16_t+0xba>
 80120cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80120d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120d4:	7019      	strb	r1, [r3, #0]
 80120d6:	68a3      	ldr	r3, [r4, #8]
 80120d8:	705a      	strb	r2, [r3, #1]
 80120da:	2102      	movs	r1, #2
 80120dc:	68a2      	ldr	r2, [r4, #8]
 80120de:	6923      	ldr	r3, [r4, #16]
 80120e0:	440a      	add	r2, r1
 80120e2:	7561      	strb	r1, [r4, #21]
 80120e4:	440b      	add	r3, r1
 80120e6:	60a2      	str	r2, [r4, #8]
 80120e8:	6123      	str	r3, [r4, #16]
 80120ea:	7da0      	ldrb	r0, [r4, #22]
 80120ec:	f080 0001 	eor.w	r0, r0, #1
 80120f0:	b002      	add	sp, #8
 80120f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80120fa:	801a      	strh	r2, [r3, #0]
 80120fc:	e7ed      	b.n	80120da <ucdr_serialize_uint16_t+0x9e>
 80120fe:	68a2      	ldr	r2, [r4, #8]
 8012100:	6923      	ldr	r3, [r4, #16]
 8012102:	7da0      	ldrb	r0, [r4, #22]
 8012104:	1b92      	subs	r2, r2, r6
 8012106:	1b9b      	subs	r3, r3, r6
 8012108:	7567      	strb	r7, [r4, #21]
 801210a:	f080 0001 	eor.w	r0, r0, #1
 801210e:	60a2      	str	r2, [r4, #8]
 8012110:	6123      	str	r3, [r4, #16]
 8012112:	b002      	add	sp, #8
 8012114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012118:	68a3      	ldr	r3, [r4, #8]
 801211a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801211e:	701a      	strb	r2, [r3, #0]
 8012120:	e7bc      	b.n	801209c <ucdr_serialize_uint16_t+0x60>
 8012122:	4628      	mov	r0, r5
 8012124:	f10d 0506 	add.w	r5, sp, #6
 8012128:	4632      	mov	r2, r6
 801212a:	4629      	mov	r1, r5
 801212c:	f00a ff6d 	bl	801d00a <memcpy>
 8012130:	4642      	mov	r2, r8
 8012132:	19a9      	adds	r1, r5, r6
 8012134:	68a0      	ldr	r0, [r4, #8]
 8012136:	f00a ff68 	bl	801d00a <memcpy>
 801213a:	e7af      	b.n	801209c <ucdr_serialize_uint16_t+0x60>

0801213c <ucdr_serialize_endian_uint16_t>:
 801213c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012140:	4604      	mov	r4, r0
 8012142:	b083      	sub	sp, #12
 8012144:	460d      	mov	r5, r1
 8012146:	2102      	movs	r1, #2
 8012148:	f8ad 2006 	strh.w	r2, [sp, #6]
 801214c:	f001 fa38 	bl	80135c0 <ucdr_buffer_alignment>
 8012150:	4601      	mov	r1, r0
 8012152:	4620      	mov	r0, r4
 8012154:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012158:	f001 fa7a 	bl	8013650 <ucdr_advance_buffer>
 801215c:	2102      	movs	r1, #2
 801215e:	4620      	mov	r0, r4
 8012160:	f001 f9ce 	bl	8013500 <ucdr_check_buffer_available_for>
 8012164:	bb70      	cbnz	r0, 80121c4 <ucdr_serialize_endian_uint16_t+0x88>
 8012166:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801216a:	42be      	cmp	r6, r7
 801216c:	d925      	bls.n	80121ba <ucdr_serialize_endian_uint16_t+0x7e>
 801216e:	6923      	ldr	r3, [r4, #16]
 8012170:	4620      	mov	r0, r4
 8012172:	60a6      	str	r6, [r4, #8]
 8012174:	1bf6      	subs	r6, r6, r7
 8012176:	4433      	add	r3, r6
 8012178:	f1c6 0902 	rsb	r9, r6, #2
 801217c:	6123      	str	r3, [r4, #16]
 801217e:	4649      	mov	r1, r9
 8012180:	f001 f9ca 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012184:	2800      	cmp	r0, #0
 8012186:	d039      	beq.n	80121fc <ucdr_serialize_endian_uint16_t+0xc0>
 8012188:	2d01      	cmp	r5, #1
 801218a:	d04a      	beq.n	8012222 <ucdr_serialize_endian_uint16_t+0xe6>
 801218c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012190:	703b      	strb	r3, [r7, #0]
 8012192:	2e00      	cmp	r6, #0
 8012194:	d040      	beq.n	8012218 <ucdr_serialize_endian_uint16_t+0xdc>
 8012196:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801219a:	707b      	strb	r3, [r7, #1]
 801219c:	6923      	ldr	r3, [r4, #16]
 801219e:	2102      	movs	r1, #2
 80121a0:	68a2      	ldr	r2, [r4, #8]
 80121a2:	7da0      	ldrb	r0, [r4, #22]
 80121a4:	3302      	adds	r3, #2
 80121a6:	444a      	add	r2, r9
 80121a8:	7561      	strb	r1, [r4, #21]
 80121aa:	1b9b      	subs	r3, r3, r6
 80121ac:	f080 0001 	eor.w	r0, r0, #1
 80121b0:	60a2      	str	r2, [r4, #8]
 80121b2:	6123      	str	r3, [r4, #16]
 80121b4:	b003      	add	sp, #12
 80121b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ba:	2102      	movs	r1, #2
 80121bc:	4620      	mov	r0, r4
 80121be:	f001 f9ab 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80121c2:	b188      	cbz	r0, 80121e8 <ucdr_serialize_endian_uint16_t+0xac>
 80121c4:	2d01      	cmp	r5, #1
 80121c6:	68a3      	ldr	r3, [r4, #8]
 80121c8:	d014      	beq.n	80121f4 <ucdr_serialize_endian_uint16_t+0xb8>
 80121ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80121ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121d2:	7019      	strb	r1, [r3, #0]
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	705a      	strb	r2, [r3, #1]
 80121d8:	2102      	movs	r1, #2
 80121da:	68a2      	ldr	r2, [r4, #8]
 80121dc:	6923      	ldr	r3, [r4, #16]
 80121de:	440a      	add	r2, r1
 80121e0:	7561      	strb	r1, [r4, #21]
 80121e2:	440b      	add	r3, r1
 80121e4:	60a2      	str	r2, [r4, #8]
 80121e6:	6123      	str	r3, [r4, #16]
 80121e8:	7da0      	ldrb	r0, [r4, #22]
 80121ea:	f080 0001 	eor.w	r0, r0, #1
 80121ee:	b003      	add	sp, #12
 80121f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80121f8:	801a      	strh	r2, [r3, #0]
 80121fa:	e7ed      	b.n	80121d8 <ucdr_serialize_endian_uint16_t+0x9c>
 80121fc:	68a2      	ldr	r2, [r4, #8]
 80121fe:	6923      	ldr	r3, [r4, #16]
 8012200:	7da0      	ldrb	r0, [r4, #22]
 8012202:	1b92      	subs	r2, r2, r6
 8012204:	1b9b      	subs	r3, r3, r6
 8012206:	f884 8015 	strb.w	r8, [r4, #21]
 801220a:	f080 0001 	eor.w	r0, r0, #1
 801220e:	60a2      	str	r2, [r4, #8]
 8012210:	6123      	str	r3, [r4, #16]
 8012212:	b003      	add	sp, #12
 8012214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012218:	68a3      	ldr	r3, [r4, #8]
 801221a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801221e:	701a      	strb	r2, [r3, #0]
 8012220:	e7bc      	b.n	801219c <ucdr_serialize_endian_uint16_t+0x60>
 8012222:	f10d 0506 	add.w	r5, sp, #6
 8012226:	4632      	mov	r2, r6
 8012228:	4638      	mov	r0, r7
 801222a:	4629      	mov	r1, r5
 801222c:	f00a feed 	bl	801d00a <memcpy>
 8012230:	464a      	mov	r2, r9
 8012232:	19a9      	adds	r1, r5, r6
 8012234:	68a0      	ldr	r0, [r4, #8]
 8012236:	f00a fee8 	bl	801d00a <memcpy>
 801223a:	e7af      	b.n	801219c <ucdr_serialize_endian_uint16_t+0x60>

0801223c <ucdr_deserialize_uint16_t>:
 801223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012240:	4604      	mov	r4, r0
 8012242:	460d      	mov	r5, r1
 8012244:	2102      	movs	r1, #2
 8012246:	f001 f9bb 	bl	80135c0 <ucdr_buffer_alignment>
 801224a:	4601      	mov	r1, r0
 801224c:	4620      	mov	r0, r4
 801224e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012252:	f001 f9fd 	bl	8013650 <ucdr_advance_buffer>
 8012256:	2102      	movs	r1, #2
 8012258:	4620      	mov	r0, r4
 801225a:	f001 f951 	bl	8013500 <ucdr_check_buffer_available_for>
 801225e:	bb60      	cbnz	r0, 80122ba <ucdr_deserialize_uint16_t+0x7e>
 8012260:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012264:	42be      	cmp	r6, r7
 8012266:	d923      	bls.n	80122b0 <ucdr_deserialize_uint16_t+0x74>
 8012268:	6923      	ldr	r3, [r4, #16]
 801226a:	4620      	mov	r0, r4
 801226c:	60a6      	str	r6, [r4, #8]
 801226e:	1bf6      	subs	r6, r6, r7
 8012270:	4433      	add	r3, r6
 8012272:	f1c6 0902 	rsb	r9, r6, #2
 8012276:	6123      	str	r3, [r4, #16]
 8012278:	4649      	mov	r1, r9
 801227a:	f001 f94d 	bl	8013518 <ucdr_check_final_buffer_behavior>
 801227e:	2800      	cmp	r0, #0
 8012280:	d034      	beq.n	80122ec <ucdr_deserialize_uint16_t+0xb0>
 8012282:	7d23      	ldrb	r3, [r4, #20]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d042      	beq.n	801230e <ucdr_deserialize_uint16_t+0xd2>
 8012288:	787b      	ldrb	r3, [r7, #1]
 801228a:	702b      	strb	r3, [r5, #0]
 801228c:	2e00      	cmp	r6, #0
 801228e:	d03a      	beq.n	8012306 <ucdr_deserialize_uint16_t+0xca>
 8012290:	783b      	ldrb	r3, [r7, #0]
 8012292:	706b      	strb	r3, [r5, #1]
 8012294:	6923      	ldr	r3, [r4, #16]
 8012296:	2102      	movs	r1, #2
 8012298:	68a2      	ldr	r2, [r4, #8]
 801229a:	3302      	adds	r3, #2
 801229c:	7da0      	ldrb	r0, [r4, #22]
 801229e:	444a      	add	r2, r9
 80122a0:	7561      	strb	r1, [r4, #21]
 80122a2:	1b9b      	subs	r3, r3, r6
 80122a4:	f080 0001 	eor.w	r0, r0, #1
 80122a8:	60a2      	str	r2, [r4, #8]
 80122aa:	6123      	str	r3, [r4, #16]
 80122ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122b0:	2102      	movs	r1, #2
 80122b2:	4620      	mov	r0, r4
 80122b4:	f001 f930 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80122b8:	b180      	cbz	r0, 80122dc <ucdr_deserialize_uint16_t+0xa0>
 80122ba:	7d23      	ldrb	r3, [r4, #20]
 80122bc:	2b01      	cmp	r3, #1
 80122be:	68a3      	ldr	r3, [r4, #8]
 80122c0:	d011      	beq.n	80122e6 <ucdr_deserialize_uint16_t+0xaa>
 80122c2:	785b      	ldrb	r3, [r3, #1]
 80122c4:	702b      	strb	r3, [r5, #0]
 80122c6:	68a3      	ldr	r3, [r4, #8]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	706b      	strb	r3, [r5, #1]
 80122cc:	2102      	movs	r1, #2
 80122ce:	68a2      	ldr	r2, [r4, #8]
 80122d0:	6923      	ldr	r3, [r4, #16]
 80122d2:	440a      	add	r2, r1
 80122d4:	7561      	strb	r1, [r4, #21]
 80122d6:	440b      	add	r3, r1
 80122d8:	60a2      	str	r2, [r4, #8]
 80122da:	6123      	str	r3, [r4, #16]
 80122dc:	7da0      	ldrb	r0, [r4, #22]
 80122de:	f080 0001 	eor.w	r0, r0, #1
 80122e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122e6:	881b      	ldrh	r3, [r3, #0]
 80122e8:	802b      	strh	r3, [r5, #0]
 80122ea:	e7ef      	b.n	80122cc <ucdr_deserialize_uint16_t+0x90>
 80122ec:	68a2      	ldr	r2, [r4, #8]
 80122ee:	6923      	ldr	r3, [r4, #16]
 80122f0:	1b92      	subs	r2, r2, r6
 80122f2:	7da0      	ldrb	r0, [r4, #22]
 80122f4:	1b9b      	subs	r3, r3, r6
 80122f6:	f884 8015 	strb.w	r8, [r4, #21]
 80122fa:	f080 0001 	eor.w	r0, r0, #1
 80122fe:	60a2      	str	r2, [r4, #8]
 8012300:	6123      	str	r3, [r4, #16]
 8012302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012306:	68a3      	ldr	r3, [r4, #8]
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	706b      	strb	r3, [r5, #1]
 801230c:	e7c2      	b.n	8012294 <ucdr_deserialize_uint16_t+0x58>
 801230e:	4639      	mov	r1, r7
 8012310:	4632      	mov	r2, r6
 8012312:	4628      	mov	r0, r5
 8012314:	f00a fe79 	bl	801d00a <memcpy>
 8012318:	464a      	mov	r2, r9
 801231a:	19a8      	adds	r0, r5, r6
 801231c:	68a1      	ldr	r1, [r4, #8]
 801231e:	f00a fe74 	bl	801d00a <memcpy>
 8012322:	e7b7      	b.n	8012294 <ucdr_deserialize_uint16_t+0x58>

08012324 <ucdr_deserialize_endian_uint16_t>:
 8012324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012328:	4604      	mov	r4, r0
 801232a:	460e      	mov	r6, r1
 801232c:	2102      	movs	r1, #2
 801232e:	4615      	mov	r5, r2
 8012330:	f001 f946 	bl	80135c0 <ucdr_buffer_alignment>
 8012334:	4601      	mov	r1, r0
 8012336:	4620      	mov	r0, r4
 8012338:	f894 8015 	ldrb.w	r8, [r4, #21]
 801233c:	f001 f988 	bl	8013650 <ucdr_advance_buffer>
 8012340:	2102      	movs	r1, #2
 8012342:	4620      	mov	r0, r4
 8012344:	f001 f8dc 	bl	8013500 <ucdr_check_buffer_available_for>
 8012348:	bb70      	cbnz	r0, 80123a8 <ucdr_deserialize_endian_uint16_t+0x84>
 801234a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801234e:	454f      	cmp	r7, r9
 8012350:	d925      	bls.n	801239e <ucdr_deserialize_endian_uint16_t+0x7a>
 8012352:	6923      	ldr	r3, [r4, #16]
 8012354:	4620      	mov	r0, r4
 8012356:	60a7      	str	r7, [r4, #8]
 8012358:	eba7 0709 	sub.w	r7, r7, r9
 801235c:	443b      	add	r3, r7
 801235e:	f1c7 0a02 	rsb	sl, r7, #2
 8012362:	6123      	str	r3, [r4, #16]
 8012364:	4651      	mov	r1, sl
 8012366:	f001 f8d7 	bl	8013518 <ucdr_check_final_buffer_behavior>
 801236a:	2800      	cmp	r0, #0
 801236c:	d034      	beq.n	80123d8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801236e:	2e01      	cmp	r6, #1
 8012370:	d043      	beq.n	80123fa <ucdr_deserialize_endian_uint16_t+0xd6>
 8012372:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012376:	702b      	strb	r3, [r5, #0]
 8012378:	2f00      	cmp	r7, #0
 801237a:	d03a      	beq.n	80123f2 <ucdr_deserialize_endian_uint16_t+0xce>
 801237c:	f899 3000 	ldrb.w	r3, [r9]
 8012380:	706b      	strb	r3, [r5, #1]
 8012382:	6923      	ldr	r3, [r4, #16]
 8012384:	2102      	movs	r1, #2
 8012386:	68a2      	ldr	r2, [r4, #8]
 8012388:	3302      	adds	r3, #2
 801238a:	7da0      	ldrb	r0, [r4, #22]
 801238c:	4452      	add	r2, sl
 801238e:	7561      	strb	r1, [r4, #21]
 8012390:	1bdb      	subs	r3, r3, r7
 8012392:	f080 0001 	eor.w	r0, r0, #1
 8012396:	60a2      	str	r2, [r4, #8]
 8012398:	6123      	str	r3, [r4, #16]
 801239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801239e:	2102      	movs	r1, #2
 80123a0:	4620      	mov	r0, r4
 80123a2:	f001 f8b9 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80123a6:	b178      	cbz	r0, 80123c8 <ucdr_deserialize_endian_uint16_t+0xa4>
 80123a8:	2e01      	cmp	r6, #1
 80123aa:	68a3      	ldr	r3, [r4, #8]
 80123ac:	d011      	beq.n	80123d2 <ucdr_deserialize_endian_uint16_t+0xae>
 80123ae:	785b      	ldrb	r3, [r3, #1]
 80123b0:	702b      	strb	r3, [r5, #0]
 80123b2:	68a3      	ldr	r3, [r4, #8]
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	706b      	strb	r3, [r5, #1]
 80123b8:	2102      	movs	r1, #2
 80123ba:	68a2      	ldr	r2, [r4, #8]
 80123bc:	6923      	ldr	r3, [r4, #16]
 80123be:	440a      	add	r2, r1
 80123c0:	7561      	strb	r1, [r4, #21]
 80123c2:	440b      	add	r3, r1
 80123c4:	60a2      	str	r2, [r4, #8]
 80123c6:	6123      	str	r3, [r4, #16]
 80123c8:	7da0      	ldrb	r0, [r4, #22]
 80123ca:	f080 0001 	eor.w	r0, r0, #1
 80123ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	802b      	strh	r3, [r5, #0]
 80123d6:	e7ef      	b.n	80123b8 <ucdr_deserialize_endian_uint16_t+0x94>
 80123d8:	68a2      	ldr	r2, [r4, #8]
 80123da:	6923      	ldr	r3, [r4, #16]
 80123dc:	1bd2      	subs	r2, r2, r7
 80123de:	7da0      	ldrb	r0, [r4, #22]
 80123e0:	1bdb      	subs	r3, r3, r7
 80123e2:	f884 8015 	strb.w	r8, [r4, #21]
 80123e6:	f080 0001 	eor.w	r0, r0, #1
 80123ea:	60a2      	str	r2, [r4, #8]
 80123ec:	6123      	str	r3, [r4, #16]
 80123ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f2:	68a3      	ldr	r3, [r4, #8]
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	706b      	strb	r3, [r5, #1]
 80123f8:	e7c3      	b.n	8012382 <ucdr_deserialize_endian_uint16_t+0x5e>
 80123fa:	4649      	mov	r1, r9
 80123fc:	463a      	mov	r2, r7
 80123fe:	4628      	mov	r0, r5
 8012400:	f00a fe03 	bl	801d00a <memcpy>
 8012404:	4652      	mov	r2, sl
 8012406:	19e8      	adds	r0, r5, r7
 8012408:	68a1      	ldr	r1, [r4, #8]
 801240a:	f00a fdfe 	bl	801d00a <memcpy>
 801240e:	e7b8      	b.n	8012382 <ucdr_deserialize_endian_uint16_t+0x5e>

08012410 <ucdr_serialize_uint32_t>:
 8012410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	4604      	mov	r4, r0
 8012418:	9101      	str	r1, [sp, #4]
 801241a:	2104      	movs	r1, #4
 801241c:	f001 f8d0 	bl	80135c0 <ucdr_buffer_alignment>
 8012420:	4601      	mov	r1, r0
 8012422:	4620      	mov	r0, r4
 8012424:	7d67      	ldrb	r7, [r4, #21]
 8012426:	f001 f913 	bl	8013650 <ucdr_advance_buffer>
 801242a:	2104      	movs	r1, #4
 801242c:	4620      	mov	r0, r4
 801242e:	f001 f867 	bl	8013500 <ucdr_check_buffer_available_for>
 8012432:	2800      	cmp	r0, #0
 8012434:	d139      	bne.n	80124aa <ucdr_serialize_uint32_t+0x9a>
 8012436:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801243a:	42ab      	cmp	r3, r5
 801243c:	d930      	bls.n	80124a0 <ucdr_serialize_uint32_t+0x90>
 801243e:	1b5e      	subs	r6, r3, r5
 8012440:	60a3      	str	r3, [r4, #8]
 8012442:	6923      	ldr	r3, [r4, #16]
 8012444:	4620      	mov	r0, r4
 8012446:	f1c6 0804 	rsb	r8, r6, #4
 801244a:	4433      	add	r3, r6
 801244c:	4641      	mov	r1, r8
 801244e:	6123      	str	r3, [r4, #16]
 8012450:	f001 f862 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012454:	2800      	cmp	r0, #0
 8012456:	d04c      	beq.n	80124f2 <ucdr_serialize_uint32_t+0xe2>
 8012458:	7d23      	ldrb	r3, [r4, #20]
 801245a:	2b01      	cmp	r3, #1
 801245c:	d063      	beq.n	8012526 <ucdr_serialize_uint32_t+0x116>
 801245e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012462:	702b      	strb	r3, [r5, #0]
 8012464:	2e00      	cmp	r6, #0
 8012466:	d051      	beq.n	801250c <ucdr_serialize_uint32_t+0xfc>
 8012468:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801246c:	2e01      	cmp	r6, #1
 801246e:	706b      	strb	r3, [r5, #1]
 8012470:	d050      	beq.n	8012514 <ucdr_serialize_uint32_t+0x104>
 8012472:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012476:	2e02      	cmp	r6, #2
 8012478:	70ab      	strb	r3, [r5, #2]
 801247a:	d04f      	beq.n	801251c <ucdr_serialize_uint32_t+0x10c>
 801247c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012480:	70eb      	strb	r3, [r5, #3]
 8012482:	6923      	ldr	r3, [r4, #16]
 8012484:	2104      	movs	r1, #4
 8012486:	68a2      	ldr	r2, [r4, #8]
 8012488:	3304      	adds	r3, #4
 801248a:	7da0      	ldrb	r0, [r4, #22]
 801248c:	4442      	add	r2, r8
 801248e:	7561      	strb	r1, [r4, #21]
 8012490:	1b9e      	subs	r6, r3, r6
 8012492:	f080 0001 	eor.w	r0, r0, #1
 8012496:	60a2      	str	r2, [r4, #8]
 8012498:	6126      	str	r6, [r4, #16]
 801249a:	b002      	add	sp, #8
 801249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a0:	2104      	movs	r1, #4
 80124a2:	4620      	mov	r0, r4
 80124a4:	f001 f838 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80124a8:	b1d0      	cbz	r0, 80124e0 <ucdr_serialize_uint32_t+0xd0>
 80124aa:	7d23      	ldrb	r3, [r4, #20]
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	68a3      	ldr	r3, [r4, #8]
 80124b0:	d01c      	beq.n	80124ec <ucdr_serialize_uint32_t+0xdc>
 80124b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80124b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80124ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80124be:	7018      	strb	r0, [r3, #0]
 80124c0:	68a3      	ldr	r3, [r4, #8]
 80124c2:	705a      	strb	r2, [r3, #1]
 80124c4:	68a3      	ldr	r3, [r4, #8]
 80124c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80124ca:	7099      	strb	r1, [r3, #2]
 80124cc:	68a3      	ldr	r3, [r4, #8]
 80124ce:	70da      	strb	r2, [r3, #3]
 80124d0:	2104      	movs	r1, #4
 80124d2:	68a2      	ldr	r2, [r4, #8]
 80124d4:	6923      	ldr	r3, [r4, #16]
 80124d6:	440a      	add	r2, r1
 80124d8:	7561      	strb	r1, [r4, #21]
 80124da:	440b      	add	r3, r1
 80124dc:	60a2      	str	r2, [r4, #8]
 80124de:	6123      	str	r3, [r4, #16]
 80124e0:	7da0      	ldrb	r0, [r4, #22]
 80124e2:	f080 0001 	eor.w	r0, r0, #1
 80124e6:	b002      	add	sp, #8
 80124e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ec:	9a01      	ldr	r2, [sp, #4]
 80124ee:	601a      	str	r2, [r3, #0]
 80124f0:	e7ee      	b.n	80124d0 <ucdr_serialize_uint32_t+0xc0>
 80124f2:	68a2      	ldr	r2, [r4, #8]
 80124f4:	6923      	ldr	r3, [r4, #16]
 80124f6:	7da0      	ldrb	r0, [r4, #22]
 80124f8:	1b92      	subs	r2, r2, r6
 80124fa:	1b9b      	subs	r3, r3, r6
 80124fc:	7567      	strb	r7, [r4, #21]
 80124fe:	f080 0001 	eor.w	r0, r0, #1
 8012502:	60a2      	str	r2, [r4, #8]
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	b002      	add	sp, #8
 8012508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801250c:	68a3      	ldr	r3, [r4, #8]
 801250e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012512:	701a      	strb	r2, [r3, #0]
 8012514:	68a3      	ldr	r3, [r4, #8]
 8012516:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801251a:	701a      	strb	r2, [r3, #0]
 801251c:	68a3      	ldr	r3, [r4, #8]
 801251e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012522:	701a      	strb	r2, [r3, #0]
 8012524:	e7ad      	b.n	8012482 <ucdr_serialize_uint32_t+0x72>
 8012526:	4628      	mov	r0, r5
 8012528:	ad01      	add	r5, sp, #4
 801252a:	4632      	mov	r2, r6
 801252c:	4629      	mov	r1, r5
 801252e:	f00a fd6c 	bl	801d00a <memcpy>
 8012532:	4642      	mov	r2, r8
 8012534:	19a9      	adds	r1, r5, r6
 8012536:	68a0      	ldr	r0, [r4, #8]
 8012538:	f00a fd67 	bl	801d00a <memcpy>
 801253c:	e7a1      	b.n	8012482 <ucdr_serialize_uint32_t+0x72>
 801253e:	bf00      	nop

08012540 <ucdr_serialize_endian_uint32_t>:
 8012540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012544:	4604      	mov	r4, r0
 8012546:	b083      	sub	sp, #12
 8012548:	460d      	mov	r5, r1
 801254a:	2104      	movs	r1, #4
 801254c:	9201      	str	r2, [sp, #4]
 801254e:	f001 f837 	bl	80135c0 <ucdr_buffer_alignment>
 8012552:	4601      	mov	r1, r0
 8012554:	4620      	mov	r0, r4
 8012556:	f894 8015 	ldrb.w	r8, [r4, #21]
 801255a:	f001 f879 	bl	8013650 <ucdr_advance_buffer>
 801255e:	2104      	movs	r1, #4
 8012560:	4620      	mov	r0, r4
 8012562:	f000 ffcd 	bl	8013500 <ucdr_check_buffer_available_for>
 8012566:	2800      	cmp	r0, #0
 8012568:	d138      	bne.n	80125dc <ucdr_serialize_endian_uint32_t+0x9c>
 801256a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801256e:	42b7      	cmp	r7, r6
 8012570:	d92f      	bls.n	80125d2 <ucdr_serialize_endian_uint32_t+0x92>
 8012572:	6923      	ldr	r3, [r4, #16]
 8012574:	4620      	mov	r0, r4
 8012576:	60a7      	str	r7, [r4, #8]
 8012578:	1bbf      	subs	r7, r7, r6
 801257a:	443b      	add	r3, r7
 801257c:	f1c7 0904 	rsb	r9, r7, #4
 8012580:	6123      	str	r3, [r4, #16]
 8012582:	4649      	mov	r1, r9
 8012584:	f000 ffc8 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012588:	2800      	cmp	r0, #0
 801258a:	d04a      	beq.n	8012622 <ucdr_serialize_endian_uint32_t+0xe2>
 801258c:	2d01      	cmp	r5, #1
 801258e:	d063      	beq.n	8012658 <ucdr_serialize_endian_uint32_t+0x118>
 8012590:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012594:	7033      	strb	r3, [r6, #0]
 8012596:	2f00      	cmp	r7, #0
 8012598:	d051      	beq.n	801263e <ucdr_serialize_endian_uint32_t+0xfe>
 801259a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801259e:	2f01      	cmp	r7, #1
 80125a0:	7073      	strb	r3, [r6, #1]
 80125a2:	d050      	beq.n	8012646 <ucdr_serialize_endian_uint32_t+0x106>
 80125a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80125a8:	2f02      	cmp	r7, #2
 80125aa:	70b3      	strb	r3, [r6, #2]
 80125ac:	d04f      	beq.n	801264e <ucdr_serialize_endian_uint32_t+0x10e>
 80125ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125b2:	70f3      	strb	r3, [r6, #3]
 80125b4:	6923      	ldr	r3, [r4, #16]
 80125b6:	2104      	movs	r1, #4
 80125b8:	68a2      	ldr	r2, [r4, #8]
 80125ba:	7da0      	ldrb	r0, [r4, #22]
 80125bc:	3304      	adds	r3, #4
 80125be:	444a      	add	r2, r9
 80125c0:	7561      	strb	r1, [r4, #21]
 80125c2:	1bdb      	subs	r3, r3, r7
 80125c4:	f080 0001 	eor.w	r0, r0, #1
 80125c8:	60a2      	str	r2, [r4, #8]
 80125ca:	6123      	str	r3, [r4, #16]
 80125cc:	b003      	add	sp, #12
 80125ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125d2:	2104      	movs	r1, #4
 80125d4:	4620      	mov	r0, r4
 80125d6:	f000 ff9f 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80125da:	b1c8      	cbz	r0, 8012610 <ucdr_serialize_endian_uint32_t+0xd0>
 80125dc:	2d01      	cmp	r5, #1
 80125de:	68a3      	ldr	r3, [r4, #8]
 80125e0:	d01c      	beq.n	801261c <ucdr_serialize_endian_uint32_t+0xdc>
 80125e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80125e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80125ee:	7018      	strb	r0, [r3, #0]
 80125f0:	68a3      	ldr	r3, [r4, #8]
 80125f2:	705a      	strb	r2, [r3, #1]
 80125f4:	68a3      	ldr	r3, [r4, #8]
 80125f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125fa:	7099      	strb	r1, [r3, #2]
 80125fc:	68a3      	ldr	r3, [r4, #8]
 80125fe:	70da      	strb	r2, [r3, #3]
 8012600:	2104      	movs	r1, #4
 8012602:	68a2      	ldr	r2, [r4, #8]
 8012604:	6923      	ldr	r3, [r4, #16]
 8012606:	440a      	add	r2, r1
 8012608:	7561      	strb	r1, [r4, #21]
 801260a:	440b      	add	r3, r1
 801260c:	60a2      	str	r2, [r4, #8]
 801260e:	6123      	str	r3, [r4, #16]
 8012610:	7da0      	ldrb	r0, [r4, #22]
 8012612:	f080 0001 	eor.w	r0, r0, #1
 8012616:	b003      	add	sp, #12
 8012618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801261c:	9a01      	ldr	r2, [sp, #4]
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	e7ee      	b.n	8012600 <ucdr_serialize_endian_uint32_t+0xc0>
 8012622:	68a2      	ldr	r2, [r4, #8]
 8012624:	6923      	ldr	r3, [r4, #16]
 8012626:	7da0      	ldrb	r0, [r4, #22]
 8012628:	1bd2      	subs	r2, r2, r7
 801262a:	1bdb      	subs	r3, r3, r7
 801262c:	f884 8015 	strb.w	r8, [r4, #21]
 8012630:	f080 0001 	eor.w	r0, r0, #1
 8012634:	60a2      	str	r2, [r4, #8]
 8012636:	6123      	str	r3, [r4, #16]
 8012638:	b003      	add	sp, #12
 801263a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801263e:	68a3      	ldr	r3, [r4, #8]
 8012640:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012644:	701a      	strb	r2, [r3, #0]
 8012646:	68a3      	ldr	r3, [r4, #8]
 8012648:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801264c:	701a      	strb	r2, [r3, #0]
 801264e:	68a3      	ldr	r3, [r4, #8]
 8012650:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012654:	701a      	strb	r2, [r3, #0]
 8012656:	e7ad      	b.n	80125b4 <ucdr_serialize_endian_uint32_t+0x74>
 8012658:	ad01      	add	r5, sp, #4
 801265a:	463a      	mov	r2, r7
 801265c:	4630      	mov	r0, r6
 801265e:	4629      	mov	r1, r5
 8012660:	f00a fcd3 	bl	801d00a <memcpy>
 8012664:	464a      	mov	r2, r9
 8012666:	19e9      	adds	r1, r5, r7
 8012668:	68a0      	ldr	r0, [r4, #8]
 801266a:	f00a fcce 	bl	801d00a <memcpy>
 801266e:	e7a1      	b.n	80125b4 <ucdr_serialize_endian_uint32_t+0x74>

08012670 <ucdr_deserialize_uint32_t>:
 8012670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012674:	4604      	mov	r4, r0
 8012676:	460d      	mov	r5, r1
 8012678:	2104      	movs	r1, #4
 801267a:	f000 ffa1 	bl	80135c0 <ucdr_buffer_alignment>
 801267e:	4601      	mov	r1, r0
 8012680:	4620      	mov	r0, r4
 8012682:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012686:	f000 ffe3 	bl	8013650 <ucdr_advance_buffer>
 801268a:	2104      	movs	r1, #4
 801268c:	4620      	mov	r0, r4
 801268e:	f000 ff37 	bl	8013500 <ucdr_check_buffer_available_for>
 8012692:	2800      	cmp	r0, #0
 8012694:	d138      	bne.n	8012708 <ucdr_deserialize_uint32_t+0x98>
 8012696:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801269a:	42b7      	cmp	r7, r6
 801269c:	d92f      	bls.n	80126fe <ucdr_deserialize_uint32_t+0x8e>
 801269e:	6923      	ldr	r3, [r4, #16]
 80126a0:	4620      	mov	r0, r4
 80126a2:	60a7      	str	r7, [r4, #8]
 80126a4:	1bbf      	subs	r7, r7, r6
 80126a6:	443b      	add	r3, r7
 80126a8:	f1c7 0904 	rsb	r9, r7, #4
 80126ac:	6123      	str	r3, [r4, #16]
 80126ae:	4649      	mov	r1, r9
 80126b0:	f000 ff32 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d046      	beq.n	8012746 <ucdr_deserialize_uint32_t+0xd6>
 80126b8:	7d23      	ldrb	r3, [r4, #20]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d05c      	beq.n	8012778 <ucdr_deserialize_uint32_t+0x108>
 80126be:	78f3      	ldrb	r3, [r6, #3]
 80126c0:	702b      	strb	r3, [r5, #0]
 80126c2:	2f00      	cmp	r7, #0
 80126c4:	d04c      	beq.n	8012760 <ucdr_deserialize_uint32_t+0xf0>
 80126c6:	78b3      	ldrb	r3, [r6, #2]
 80126c8:	2f01      	cmp	r7, #1
 80126ca:	706b      	strb	r3, [r5, #1]
 80126cc:	f105 0302 	add.w	r3, r5, #2
 80126d0:	d04a      	beq.n	8012768 <ucdr_deserialize_uint32_t+0xf8>
 80126d2:	7873      	ldrb	r3, [r6, #1]
 80126d4:	2f02      	cmp	r7, #2
 80126d6:	70ab      	strb	r3, [r5, #2]
 80126d8:	f105 0303 	add.w	r3, r5, #3
 80126dc:	d048      	beq.n	8012770 <ucdr_deserialize_uint32_t+0x100>
 80126de:	7833      	ldrb	r3, [r6, #0]
 80126e0:	70eb      	strb	r3, [r5, #3]
 80126e2:	6923      	ldr	r3, [r4, #16]
 80126e4:	2104      	movs	r1, #4
 80126e6:	68a2      	ldr	r2, [r4, #8]
 80126e8:	3304      	adds	r3, #4
 80126ea:	7da0      	ldrb	r0, [r4, #22]
 80126ec:	444a      	add	r2, r9
 80126ee:	7561      	strb	r1, [r4, #21]
 80126f0:	1bdb      	subs	r3, r3, r7
 80126f2:	f080 0001 	eor.w	r0, r0, #1
 80126f6:	60a2      	str	r2, [r4, #8]
 80126f8:	6123      	str	r3, [r4, #16]
 80126fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126fe:	2104      	movs	r1, #4
 8012700:	4620      	mov	r0, r4
 8012702:	f000 ff09 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012706:	b1b0      	cbz	r0, 8012736 <ucdr_deserialize_uint32_t+0xc6>
 8012708:	7d23      	ldrb	r3, [r4, #20]
 801270a:	2b01      	cmp	r3, #1
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	d017      	beq.n	8012740 <ucdr_deserialize_uint32_t+0xd0>
 8012710:	78db      	ldrb	r3, [r3, #3]
 8012712:	702b      	strb	r3, [r5, #0]
 8012714:	68a3      	ldr	r3, [r4, #8]
 8012716:	789b      	ldrb	r3, [r3, #2]
 8012718:	706b      	strb	r3, [r5, #1]
 801271a:	68a3      	ldr	r3, [r4, #8]
 801271c:	785b      	ldrb	r3, [r3, #1]
 801271e:	70ab      	strb	r3, [r5, #2]
 8012720:	68a3      	ldr	r3, [r4, #8]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	70eb      	strb	r3, [r5, #3]
 8012726:	2104      	movs	r1, #4
 8012728:	68a2      	ldr	r2, [r4, #8]
 801272a:	6923      	ldr	r3, [r4, #16]
 801272c:	440a      	add	r2, r1
 801272e:	7561      	strb	r1, [r4, #21]
 8012730:	440b      	add	r3, r1
 8012732:	60a2      	str	r2, [r4, #8]
 8012734:	6123      	str	r3, [r4, #16]
 8012736:	7da0      	ldrb	r0, [r4, #22]
 8012738:	f080 0001 	eor.w	r0, r0, #1
 801273c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	602b      	str	r3, [r5, #0]
 8012744:	e7ef      	b.n	8012726 <ucdr_deserialize_uint32_t+0xb6>
 8012746:	68a2      	ldr	r2, [r4, #8]
 8012748:	6923      	ldr	r3, [r4, #16]
 801274a:	1bd2      	subs	r2, r2, r7
 801274c:	7da0      	ldrb	r0, [r4, #22]
 801274e:	1bdb      	subs	r3, r3, r7
 8012750:	f884 8015 	strb.w	r8, [r4, #21]
 8012754:	f080 0001 	eor.w	r0, r0, #1
 8012758:	60a2      	str	r2, [r4, #8]
 801275a:	6123      	str	r3, [r4, #16]
 801275c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012760:	68a3      	ldr	r3, [r4, #8]
 8012762:	789b      	ldrb	r3, [r3, #2]
 8012764:	706b      	strb	r3, [r5, #1]
 8012766:	1cab      	adds	r3, r5, #2
 8012768:	68a2      	ldr	r2, [r4, #8]
 801276a:	7852      	ldrb	r2, [r2, #1]
 801276c:	f803 2b01 	strb.w	r2, [r3], #1
 8012770:	68a2      	ldr	r2, [r4, #8]
 8012772:	7812      	ldrb	r2, [r2, #0]
 8012774:	701a      	strb	r2, [r3, #0]
 8012776:	e7b4      	b.n	80126e2 <ucdr_deserialize_uint32_t+0x72>
 8012778:	4631      	mov	r1, r6
 801277a:	463a      	mov	r2, r7
 801277c:	4628      	mov	r0, r5
 801277e:	f00a fc44 	bl	801d00a <memcpy>
 8012782:	464a      	mov	r2, r9
 8012784:	19e8      	adds	r0, r5, r7
 8012786:	68a1      	ldr	r1, [r4, #8]
 8012788:	f00a fc3f 	bl	801d00a <memcpy>
 801278c:	e7a9      	b.n	80126e2 <ucdr_deserialize_uint32_t+0x72>
 801278e:	bf00      	nop

08012790 <ucdr_deserialize_endian_uint32_t>:
 8012790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012794:	4604      	mov	r4, r0
 8012796:	460e      	mov	r6, r1
 8012798:	2104      	movs	r1, #4
 801279a:	4615      	mov	r5, r2
 801279c:	f000 ff10 	bl	80135c0 <ucdr_buffer_alignment>
 80127a0:	4601      	mov	r1, r0
 80127a2:	4620      	mov	r0, r4
 80127a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80127a8:	f000 ff52 	bl	8013650 <ucdr_advance_buffer>
 80127ac:	2104      	movs	r1, #4
 80127ae:	4620      	mov	r0, r4
 80127b0:	f000 fea6 	bl	8013500 <ucdr_check_buffer_available_for>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d13c      	bne.n	8012832 <ucdr_deserialize_endian_uint32_t+0xa2>
 80127b8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80127bc:	42bb      	cmp	r3, r7
 80127be:	d933      	bls.n	8012828 <ucdr_deserialize_endian_uint32_t+0x98>
 80127c0:	eba3 0907 	sub.w	r9, r3, r7
 80127c4:	60a3      	str	r3, [r4, #8]
 80127c6:	6923      	ldr	r3, [r4, #16]
 80127c8:	4620      	mov	r0, r4
 80127ca:	f1c9 0a04 	rsb	sl, r9, #4
 80127ce:	444b      	add	r3, r9
 80127d0:	4651      	mov	r1, sl
 80127d2:	6123      	str	r3, [r4, #16]
 80127d4:	f000 fea0 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80127d8:	2800      	cmp	r0, #0
 80127da:	d048      	beq.n	801286e <ucdr_deserialize_endian_uint32_t+0xde>
 80127dc:	2e01      	cmp	r6, #1
 80127de:	d061      	beq.n	80128a4 <ucdr_deserialize_endian_uint32_t+0x114>
 80127e0:	78fb      	ldrb	r3, [r7, #3]
 80127e2:	702b      	strb	r3, [r5, #0]
 80127e4:	f1b9 0f00 	cmp.w	r9, #0
 80127e8:	d050      	beq.n	801288c <ucdr_deserialize_endian_uint32_t+0xfc>
 80127ea:	78bb      	ldrb	r3, [r7, #2]
 80127ec:	f1b9 0f01 	cmp.w	r9, #1
 80127f0:	706b      	strb	r3, [r5, #1]
 80127f2:	f105 0302 	add.w	r3, r5, #2
 80127f6:	d04d      	beq.n	8012894 <ucdr_deserialize_endian_uint32_t+0x104>
 80127f8:	787b      	ldrb	r3, [r7, #1]
 80127fa:	f1b9 0f02 	cmp.w	r9, #2
 80127fe:	70ab      	strb	r3, [r5, #2]
 8012800:	f105 0303 	add.w	r3, r5, #3
 8012804:	d04a      	beq.n	801289c <ucdr_deserialize_endian_uint32_t+0x10c>
 8012806:	783b      	ldrb	r3, [r7, #0]
 8012808:	70eb      	strb	r3, [r5, #3]
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	2104      	movs	r1, #4
 801280e:	68a2      	ldr	r2, [r4, #8]
 8012810:	3304      	adds	r3, #4
 8012812:	7da0      	ldrb	r0, [r4, #22]
 8012814:	4452      	add	r2, sl
 8012816:	7561      	strb	r1, [r4, #21]
 8012818:	eba3 0309 	sub.w	r3, r3, r9
 801281c:	f080 0001 	eor.w	r0, r0, #1
 8012820:	60a2      	str	r2, [r4, #8]
 8012822:	6123      	str	r3, [r4, #16]
 8012824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012828:	2104      	movs	r1, #4
 801282a:	4620      	mov	r0, r4
 801282c:	f000 fe74 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012830:	b1a8      	cbz	r0, 801285e <ucdr_deserialize_endian_uint32_t+0xce>
 8012832:	2e01      	cmp	r6, #1
 8012834:	68a3      	ldr	r3, [r4, #8]
 8012836:	d017      	beq.n	8012868 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012838:	78db      	ldrb	r3, [r3, #3]
 801283a:	702b      	strb	r3, [r5, #0]
 801283c:	68a3      	ldr	r3, [r4, #8]
 801283e:	789b      	ldrb	r3, [r3, #2]
 8012840:	706b      	strb	r3, [r5, #1]
 8012842:	68a3      	ldr	r3, [r4, #8]
 8012844:	785b      	ldrb	r3, [r3, #1]
 8012846:	70ab      	strb	r3, [r5, #2]
 8012848:	68a3      	ldr	r3, [r4, #8]
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	70eb      	strb	r3, [r5, #3]
 801284e:	2104      	movs	r1, #4
 8012850:	68a2      	ldr	r2, [r4, #8]
 8012852:	6923      	ldr	r3, [r4, #16]
 8012854:	440a      	add	r2, r1
 8012856:	7561      	strb	r1, [r4, #21]
 8012858:	440b      	add	r3, r1
 801285a:	60a2      	str	r2, [r4, #8]
 801285c:	6123      	str	r3, [r4, #16]
 801285e:	7da0      	ldrb	r0, [r4, #22]
 8012860:	f080 0001 	eor.w	r0, r0, #1
 8012864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	602b      	str	r3, [r5, #0]
 801286c:	e7ef      	b.n	801284e <ucdr_deserialize_endian_uint32_t+0xbe>
 801286e:	68a2      	ldr	r2, [r4, #8]
 8012870:	6923      	ldr	r3, [r4, #16]
 8012872:	eba2 0209 	sub.w	r2, r2, r9
 8012876:	7da0      	ldrb	r0, [r4, #22]
 8012878:	eba3 0309 	sub.w	r3, r3, r9
 801287c:	f884 8015 	strb.w	r8, [r4, #21]
 8012880:	f080 0001 	eor.w	r0, r0, #1
 8012884:	60a2      	str	r2, [r4, #8]
 8012886:	6123      	str	r3, [r4, #16]
 8012888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801288c:	68a3      	ldr	r3, [r4, #8]
 801288e:	789b      	ldrb	r3, [r3, #2]
 8012890:	706b      	strb	r3, [r5, #1]
 8012892:	1cab      	adds	r3, r5, #2
 8012894:	68a2      	ldr	r2, [r4, #8]
 8012896:	7852      	ldrb	r2, [r2, #1]
 8012898:	f803 2b01 	strb.w	r2, [r3], #1
 801289c:	68a2      	ldr	r2, [r4, #8]
 801289e:	7812      	ldrb	r2, [r2, #0]
 80128a0:	701a      	strb	r2, [r3, #0]
 80128a2:	e7b2      	b.n	801280a <ucdr_deserialize_endian_uint32_t+0x7a>
 80128a4:	4639      	mov	r1, r7
 80128a6:	464a      	mov	r2, r9
 80128a8:	4628      	mov	r0, r5
 80128aa:	f00a fbae 	bl	801d00a <memcpy>
 80128ae:	4652      	mov	r2, sl
 80128b0:	eb05 0009 	add.w	r0, r5, r9
 80128b4:	68a1      	ldr	r1, [r4, #8]
 80128b6:	f00a fba8 	bl	801d00a <memcpy>
 80128ba:	e7a6      	b.n	801280a <ucdr_deserialize_endian_uint32_t+0x7a>

080128bc <ucdr_serialize_uint64_t>:
 80128bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128c0:	4604      	mov	r4, r0
 80128c2:	b082      	sub	sp, #8
 80128c4:	2108      	movs	r1, #8
 80128c6:	e9cd 2300 	strd	r2, r3, [sp]
 80128ca:	f000 fe79 	bl	80135c0 <ucdr_buffer_alignment>
 80128ce:	4601      	mov	r1, r0
 80128d0:	4620      	mov	r0, r4
 80128d2:	7d67      	ldrb	r7, [r4, #21]
 80128d4:	f000 febc 	bl	8013650 <ucdr_advance_buffer>
 80128d8:	2108      	movs	r1, #8
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 fe10 	bl	8013500 <ucdr_check_buffer_available_for>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d14e      	bne.n	8012982 <ucdr_serialize_uint64_t+0xc6>
 80128e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80128e8:	42ab      	cmp	r3, r5
 80128ea:	d945      	bls.n	8012978 <ucdr_serialize_uint64_t+0xbc>
 80128ec:	1b5e      	subs	r6, r3, r5
 80128ee:	60a3      	str	r3, [r4, #8]
 80128f0:	6923      	ldr	r3, [r4, #16]
 80128f2:	4620      	mov	r0, r4
 80128f4:	f1c6 0808 	rsb	r8, r6, #8
 80128f8:	4433      	add	r3, r6
 80128fa:	4641      	mov	r1, r8
 80128fc:	6123      	str	r3, [r4, #16]
 80128fe:	f000 fe0b 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012902:	2800      	cmp	r0, #0
 8012904:	d074      	beq.n	80129f0 <ucdr_serialize_uint64_t+0x134>
 8012906:	7d23      	ldrb	r3, [r4, #20]
 8012908:	2b01      	cmp	r3, #1
 801290a:	f000 809b 	beq.w	8012a44 <ucdr_serialize_uint64_t+0x188>
 801290e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012912:	702b      	strb	r3, [r5, #0]
 8012914:	2e00      	cmp	r6, #0
 8012916:	d078      	beq.n	8012a0a <ucdr_serialize_uint64_t+0x14e>
 8012918:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801291c:	2e01      	cmp	r6, #1
 801291e:	706b      	strb	r3, [r5, #1]
 8012920:	d077      	beq.n	8012a12 <ucdr_serialize_uint64_t+0x156>
 8012922:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012926:	2e02      	cmp	r6, #2
 8012928:	70ab      	strb	r3, [r5, #2]
 801292a:	d076      	beq.n	8012a1a <ucdr_serialize_uint64_t+0x15e>
 801292c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012930:	2e03      	cmp	r6, #3
 8012932:	70eb      	strb	r3, [r5, #3]
 8012934:	d075      	beq.n	8012a22 <ucdr_serialize_uint64_t+0x166>
 8012936:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801293a:	2e04      	cmp	r6, #4
 801293c:	712b      	strb	r3, [r5, #4]
 801293e:	d074      	beq.n	8012a2a <ucdr_serialize_uint64_t+0x16e>
 8012940:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012944:	2e05      	cmp	r6, #5
 8012946:	716b      	strb	r3, [r5, #5]
 8012948:	d073      	beq.n	8012a32 <ucdr_serialize_uint64_t+0x176>
 801294a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801294e:	2e06      	cmp	r6, #6
 8012950:	71ab      	strb	r3, [r5, #6]
 8012952:	d072      	beq.n	8012a3a <ucdr_serialize_uint64_t+0x17e>
 8012954:	f89d 3000 	ldrb.w	r3, [sp]
 8012958:	71eb      	strb	r3, [r5, #7]
 801295a:	6923      	ldr	r3, [r4, #16]
 801295c:	2108      	movs	r1, #8
 801295e:	68a2      	ldr	r2, [r4, #8]
 8012960:	3308      	adds	r3, #8
 8012962:	7da0      	ldrb	r0, [r4, #22]
 8012964:	4442      	add	r2, r8
 8012966:	7561      	strb	r1, [r4, #21]
 8012968:	1b9e      	subs	r6, r3, r6
 801296a:	f080 0001 	eor.w	r0, r0, #1
 801296e:	60a2      	str	r2, [r4, #8]
 8012970:	6126      	str	r6, [r4, #16]
 8012972:	b002      	add	sp, #8
 8012974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012978:	2108      	movs	r1, #8
 801297a:	4620      	mov	r0, r4
 801297c:	f000 fdcc 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012980:	b350      	cbz	r0, 80129d8 <ucdr_serialize_uint64_t+0x11c>
 8012982:	7d23      	ldrb	r3, [r4, #20]
 8012984:	2b01      	cmp	r3, #1
 8012986:	d02d      	beq.n	80129e4 <ucdr_serialize_uint64_t+0x128>
 8012988:	68a3      	ldr	r3, [r4, #8]
 801298a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801298e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012992:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012996:	7018      	strb	r0, [r3, #0]
 8012998:	68a3      	ldr	r3, [r4, #8]
 801299a:	705a      	strb	r2, [r3, #1]
 801299c:	68a3      	ldr	r3, [r4, #8]
 801299e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80129a6:	7099      	strb	r1, [r3, #2]
 80129a8:	68a3      	ldr	r3, [r4, #8]
 80129aa:	70da      	strb	r2, [r3, #3]
 80129ac:	68a3      	ldr	r3, [r4, #8]
 80129ae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80129b2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80129b6:	7118      	strb	r0, [r3, #4]
 80129b8:	68a3      	ldr	r3, [r4, #8]
 80129ba:	715a      	strb	r2, [r3, #5]
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	f89d 2000 	ldrb.w	r2, [sp]
 80129c2:	7199      	strb	r1, [r3, #6]
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	71da      	strb	r2, [r3, #7]
 80129c8:	2108      	movs	r1, #8
 80129ca:	68a2      	ldr	r2, [r4, #8]
 80129cc:	6923      	ldr	r3, [r4, #16]
 80129ce:	440a      	add	r2, r1
 80129d0:	7561      	strb	r1, [r4, #21]
 80129d2:	440b      	add	r3, r1
 80129d4:	60a2      	str	r2, [r4, #8]
 80129d6:	6123      	str	r3, [r4, #16]
 80129d8:	7da0      	ldrb	r0, [r4, #22]
 80129da:	f080 0001 	eor.w	r0, r0, #1
 80129de:	b002      	add	sp, #8
 80129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e4:	466b      	mov	r3, sp
 80129e6:	68a2      	ldr	r2, [r4, #8]
 80129e8:	cb03      	ldmia	r3!, {r0, r1}
 80129ea:	6010      	str	r0, [r2, #0]
 80129ec:	6051      	str	r1, [r2, #4]
 80129ee:	e7eb      	b.n	80129c8 <ucdr_serialize_uint64_t+0x10c>
 80129f0:	68a2      	ldr	r2, [r4, #8]
 80129f2:	6923      	ldr	r3, [r4, #16]
 80129f4:	7da0      	ldrb	r0, [r4, #22]
 80129f6:	1b92      	subs	r2, r2, r6
 80129f8:	1b9b      	subs	r3, r3, r6
 80129fa:	7567      	strb	r7, [r4, #21]
 80129fc:	f080 0001 	eor.w	r0, r0, #1
 8012a00:	60a2      	str	r2, [r4, #8]
 8012a02:	6123      	str	r3, [r4, #16]
 8012a04:	b002      	add	sp, #8
 8012a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a0a:	68a3      	ldr	r3, [r4, #8]
 8012a0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a10:	701a      	strb	r2, [r3, #0]
 8012a12:	68a3      	ldr	r3, [r4, #8]
 8012a14:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a18:	701a      	strb	r2, [r3, #0]
 8012a1a:	68a3      	ldr	r3, [r4, #8]
 8012a1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a20:	701a      	strb	r2, [r3, #0]
 8012a22:	68a3      	ldr	r3, [r4, #8]
 8012a24:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012a28:	701a      	strb	r2, [r3, #0]
 8012a2a:	68a3      	ldr	r3, [r4, #8]
 8012a2c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a30:	701a      	strb	r2, [r3, #0]
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012a38:	701a      	strb	r2, [r3, #0]
 8012a3a:	68a3      	ldr	r3, [r4, #8]
 8012a3c:	f89d 2000 	ldrb.w	r2, [sp]
 8012a40:	701a      	strb	r2, [r3, #0]
 8012a42:	e78a      	b.n	801295a <ucdr_serialize_uint64_t+0x9e>
 8012a44:	4628      	mov	r0, r5
 8012a46:	466d      	mov	r5, sp
 8012a48:	4632      	mov	r2, r6
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	f00a fadd 	bl	801d00a <memcpy>
 8012a50:	4642      	mov	r2, r8
 8012a52:	19a9      	adds	r1, r5, r6
 8012a54:	68a0      	ldr	r0, [r4, #8]
 8012a56:	f00a fad8 	bl	801d00a <memcpy>
 8012a5a:	e77e      	b.n	801295a <ucdr_serialize_uint64_t+0x9e>

08012a5c <ucdr_serialize_int16_t>:
 8012a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a60:	460b      	mov	r3, r1
 8012a62:	b082      	sub	sp, #8
 8012a64:	4604      	mov	r4, r0
 8012a66:	2102      	movs	r1, #2
 8012a68:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012a6c:	f000 fda8 	bl	80135c0 <ucdr_buffer_alignment>
 8012a70:	4601      	mov	r1, r0
 8012a72:	4620      	mov	r0, r4
 8012a74:	7d67      	ldrb	r7, [r4, #21]
 8012a76:	f000 fdeb 	bl	8013650 <ucdr_advance_buffer>
 8012a7a:	2102      	movs	r1, #2
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f000 fd3f 	bl	8013500 <ucdr_check_buffer_available_for>
 8012a82:	bb78      	cbnz	r0, 8012ae4 <ucdr_serialize_int16_t+0x88>
 8012a84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012a88:	42ab      	cmp	r3, r5
 8012a8a:	d926      	bls.n	8012ada <ucdr_serialize_int16_t+0x7e>
 8012a8c:	1b5e      	subs	r6, r3, r5
 8012a8e:	60a3      	str	r3, [r4, #8]
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	4620      	mov	r0, r4
 8012a94:	f1c6 0802 	rsb	r8, r6, #2
 8012a98:	4433      	add	r3, r6
 8012a9a:	4641      	mov	r1, r8
 8012a9c:	6123      	str	r3, [r4, #16]
 8012a9e:	f000 fd3b 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d03b      	beq.n	8012b1e <ucdr_serialize_int16_t+0xc2>
 8012aa6:	7d23      	ldrb	r3, [r4, #20]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d04a      	beq.n	8012b42 <ucdr_serialize_int16_t+0xe6>
 8012aac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012ab0:	702b      	strb	r3, [r5, #0]
 8012ab2:	2e00      	cmp	r6, #0
 8012ab4:	d040      	beq.n	8012b38 <ucdr_serialize_int16_t+0xdc>
 8012ab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012aba:	706b      	strb	r3, [r5, #1]
 8012abc:	6923      	ldr	r3, [r4, #16]
 8012abe:	2102      	movs	r1, #2
 8012ac0:	68a2      	ldr	r2, [r4, #8]
 8012ac2:	3302      	adds	r3, #2
 8012ac4:	7da0      	ldrb	r0, [r4, #22]
 8012ac6:	4442      	add	r2, r8
 8012ac8:	7561      	strb	r1, [r4, #21]
 8012aca:	1b9e      	subs	r6, r3, r6
 8012acc:	f080 0001 	eor.w	r0, r0, #1
 8012ad0:	60a2      	str	r2, [r4, #8]
 8012ad2:	6126      	str	r6, [r4, #16]
 8012ad4:	b002      	add	sp, #8
 8012ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ada:	2102      	movs	r1, #2
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fd1b 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012ae2:	b190      	cbz	r0, 8012b0a <ucdr_serialize_int16_t+0xae>
 8012ae4:	7d23      	ldrb	r3, [r4, #20]
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	68a3      	ldr	r3, [r4, #8]
 8012aea:	d014      	beq.n	8012b16 <ucdr_serialize_int16_t+0xba>
 8012aec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012af0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012af4:	7019      	strb	r1, [r3, #0]
 8012af6:	68a3      	ldr	r3, [r4, #8]
 8012af8:	705a      	strb	r2, [r3, #1]
 8012afa:	2102      	movs	r1, #2
 8012afc:	68a2      	ldr	r2, [r4, #8]
 8012afe:	6923      	ldr	r3, [r4, #16]
 8012b00:	440a      	add	r2, r1
 8012b02:	7561      	strb	r1, [r4, #21]
 8012b04:	440b      	add	r3, r1
 8012b06:	60a2      	str	r2, [r4, #8]
 8012b08:	6123      	str	r3, [r4, #16]
 8012b0a:	7da0      	ldrb	r0, [r4, #22]
 8012b0c:	f080 0001 	eor.w	r0, r0, #1
 8012b10:	b002      	add	sp, #8
 8012b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012b1a:	801a      	strh	r2, [r3, #0]
 8012b1c:	e7ed      	b.n	8012afa <ucdr_serialize_int16_t+0x9e>
 8012b1e:	68a2      	ldr	r2, [r4, #8]
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	7da0      	ldrb	r0, [r4, #22]
 8012b24:	1b92      	subs	r2, r2, r6
 8012b26:	1b9b      	subs	r3, r3, r6
 8012b28:	7567      	strb	r7, [r4, #21]
 8012b2a:	f080 0001 	eor.w	r0, r0, #1
 8012b2e:	60a2      	str	r2, [r4, #8]
 8012b30:	6123      	str	r3, [r4, #16]
 8012b32:	b002      	add	sp, #8
 8012b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b38:	68a3      	ldr	r3, [r4, #8]
 8012b3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012b3e:	701a      	strb	r2, [r3, #0]
 8012b40:	e7bc      	b.n	8012abc <ucdr_serialize_int16_t+0x60>
 8012b42:	4628      	mov	r0, r5
 8012b44:	f10d 0506 	add.w	r5, sp, #6
 8012b48:	4632      	mov	r2, r6
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	f00a fa5d 	bl	801d00a <memcpy>
 8012b50:	4642      	mov	r2, r8
 8012b52:	19a9      	adds	r1, r5, r6
 8012b54:	68a0      	ldr	r0, [r4, #8]
 8012b56:	f00a fa58 	bl	801d00a <memcpy>
 8012b5a:	e7af      	b.n	8012abc <ucdr_serialize_int16_t+0x60>

08012b5c <ucdr_deserialize_int16_t>:
 8012b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b60:	4604      	mov	r4, r0
 8012b62:	460d      	mov	r5, r1
 8012b64:	2102      	movs	r1, #2
 8012b66:	f000 fd2b 	bl	80135c0 <ucdr_buffer_alignment>
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012b72:	f000 fd6d 	bl	8013650 <ucdr_advance_buffer>
 8012b76:	2102      	movs	r1, #2
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f000 fcc1 	bl	8013500 <ucdr_check_buffer_available_for>
 8012b7e:	bb60      	cbnz	r0, 8012bda <ucdr_deserialize_int16_t+0x7e>
 8012b80:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012b84:	42be      	cmp	r6, r7
 8012b86:	d923      	bls.n	8012bd0 <ucdr_deserialize_int16_t+0x74>
 8012b88:	6923      	ldr	r3, [r4, #16]
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	60a6      	str	r6, [r4, #8]
 8012b8e:	1bf6      	subs	r6, r6, r7
 8012b90:	4433      	add	r3, r6
 8012b92:	f1c6 0902 	rsb	r9, r6, #2
 8012b96:	6123      	str	r3, [r4, #16]
 8012b98:	4649      	mov	r1, r9
 8012b9a:	f000 fcbd 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	d034      	beq.n	8012c0c <ucdr_deserialize_int16_t+0xb0>
 8012ba2:	7d23      	ldrb	r3, [r4, #20]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d042      	beq.n	8012c2e <ucdr_deserialize_int16_t+0xd2>
 8012ba8:	787b      	ldrb	r3, [r7, #1]
 8012baa:	702b      	strb	r3, [r5, #0]
 8012bac:	2e00      	cmp	r6, #0
 8012bae:	d03a      	beq.n	8012c26 <ucdr_deserialize_int16_t+0xca>
 8012bb0:	783b      	ldrb	r3, [r7, #0]
 8012bb2:	706b      	strb	r3, [r5, #1]
 8012bb4:	6923      	ldr	r3, [r4, #16]
 8012bb6:	2102      	movs	r1, #2
 8012bb8:	68a2      	ldr	r2, [r4, #8]
 8012bba:	3302      	adds	r3, #2
 8012bbc:	7da0      	ldrb	r0, [r4, #22]
 8012bbe:	444a      	add	r2, r9
 8012bc0:	7561      	strb	r1, [r4, #21]
 8012bc2:	1b9b      	subs	r3, r3, r6
 8012bc4:	f080 0001 	eor.w	r0, r0, #1
 8012bc8:	60a2      	str	r2, [r4, #8]
 8012bca:	6123      	str	r3, [r4, #16]
 8012bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bd0:	2102      	movs	r1, #2
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f000 fca0 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012bd8:	b180      	cbz	r0, 8012bfc <ucdr_deserialize_int16_t+0xa0>
 8012bda:	7d23      	ldrb	r3, [r4, #20]
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	68a3      	ldr	r3, [r4, #8]
 8012be0:	d011      	beq.n	8012c06 <ucdr_deserialize_int16_t+0xaa>
 8012be2:	785b      	ldrb	r3, [r3, #1]
 8012be4:	702b      	strb	r3, [r5, #0]
 8012be6:	68a3      	ldr	r3, [r4, #8]
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	706b      	strb	r3, [r5, #1]
 8012bec:	2102      	movs	r1, #2
 8012bee:	68a2      	ldr	r2, [r4, #8]
 8012bf0:	6923      	ldr	r3, [r4, #16]
 8012bf2:	440a      	add	r2, r1
 8012bf4:	7561      	strb	r1, [r4, #21]
 8012bf6:	440b      	add	r3, r1
 8012bf8:	60a2      	str	r2, [r4, #8]
 8012bfa:	6123      	str	r3, [r4, #16]
 8012bfc:	7da0      	ldrb	r0, [r4, #22]
 8012bfe:	f080 0001 	eor.w	r0, r0, #1
 8012c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	802b      	strh	r3, [r5, #0]
 8012c0a:	e7ef      	b.n	8012bec <ucdr_deserialize_int16_t+0x90>
 8012c0c:	68a2      	ldr	r2, [r4, #8]
 8012c0e:	6923      	ldr	r3, [r4, #16]
 8012c10:	1b92      	subs	r2, r2, r6
 8012c12:	7da0      	ldrb	r0, [r4, #22]
 8012c14:	1b9b      	subs	r3, r3, r6
 8012c16:	f884 8015 	strb.w	r8, [r4, #21]
 8012c1a:	f080 0001 	eor.w	r0, r0, #1
 8012c1e:	60a2      	str	r2, [r4, #8]
 8012c20:	6123      	str	r3, [r4, #16]
 8012c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c26:	68a3      	ldr	r3, [r4, #8]
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	706b      	strb	r3, [r5, #1]
 8012c2c:	e7c2      	b.n	8012bb4 <ucdr_deserialize_int16_t+0x58>
 8012c2e:	4639      	mov	r1, r7
 8012c30:	4632      	mov	r2, r6
 8012c32:	4628      	mov	r0, r5
 8012c34:	f00a f9e9 	bl	801d00a <memcpy>
 8012c38:	464a      	mov	r2, r9
 8012c3a:	19a8      	adds	r0, r5, r6
 8012c3c:	68a1      	ldr	r1, [r4, #8]
 8012c3e:	f00a f9e4 	bl	801d00a <memcpy>
 8012c42:	e7b7      	b.n	8012bb4 <ucdr_deserialize_int16_t+0x58>

08012c44 <ucdr_serialize_int32_t>:
 8012c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c48:	b082      	sub	sp, #8
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	9101      	str	r1, [sp, #4]
 8012c4e:	2104      	movs	r1, #4
 8012c50:	f000 fcb6 	bl	80135c0 <ucdr_buffer_alignment>
 8012c54:	4601      	mov	r1, r0
 8012c56:	4620      	mov	r0, r4
 8012c58:	7d67      	ldrb	r7, [r4, #21]
 8012c5a:	f000 fcf9 	bl	8013650 <ucdr_advance_buffer>
 8012c5e:	2104      	movs	r1, #4
 8012c60:	4620      	mov	r0, r4
 8012c62:	f000 fc4d 	bl	8013500 <ucdr_check_buffer_available_for>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d139      	bne.n	8012cde <ucdr_serialize_int32_t+0x9a>
 8012c6a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c6e:	42ab      	cmp	r3, r5
 8012c70:	d930      	bls.n	8012cd4 <ucdr_serialize_int32_t+0x90>
 8012c72:	1b5e      	subs	r6, r3, r5
 8012c74:	60a3      	str	r3, [r4, #8]
 8012c76:	6923      	ldr	r3, [r4, #16]
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f1c6 0804 	rsb	r8, r6, #4
 8012c7e:	4433      	add	r3, r6
 8012c80:	4641      	mov	r1, r8
 8012c82:	6123      	str	r3, [r4, #16]
 8012c84:	f000 fc48 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	d04c      	beq.n	8012d26 <ucdr_serialize_int32_t+0xe2>
 8012c8c:	7d23      	ldrb	r3, [r4, #20]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d063      	beq.n	8012d5a <ucdr_serialize_int32_t+0x116>
 8012c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c96:	702b      	strb	r3, [r5, #0]
 8012c98:	2e00      	cmp	r6, #0
 8012c9a:	d051      	beq.n	8012d40 <ucdr_serialize_int32_t+0xfc>
 8012c9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ca0:	2e01      	cmp	r6, #1
 8012ca2:	706b      	strb	r3, [r5, #1]
 8012ca4:	d050      	beq.n	8012d48 <ucdr_serialize_int32_t+0x104>
 8012ca6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012caa:	2e02      	cmp	r6, #2
 8012cac:	70ab      	strb	r3, [r5, #2]
 8012cae:	d04f      	beq.n	8012d50 <ucdr_serialize_int32_t+0x10c>
 8012cb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012cb4:	70eb      	strb	r3, [r5, #3]
 8012cb6:	6923      	ldr	r3, [r4, #16]
 8012cb8:	2104      	movs	r1, #4
 8012cba:	68a2      	ldr	r2, [r4, #8]
 8012cbc:	3304      	adds	r3, #4
 8012cbe:	7da0      	ldrb	r0, [r4, #22]
 8012cc0:	4442      	add	r2, r8
 8012cc2:	7561      	strb	r1, [r4, #21]
 8012cc4:	1b9e      	subs	r6, r3, r6
 8012cc6:	f080 0001 	eor.w	r0, r0, #1
 8012cca:	60a2      	str	r2, [r4, #8]
 8012ccc:	6126      	str	r6, [r4, #16]
 8012cce:	b002      	add	sp, #8
 8012cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd4:	2104      	movs	r1, #4
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f000 fc1e 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012cdc:	b1d0      	cbz	r0, 8012d14 <ucdr_serialize_int32_t+0xd0>
 8012cde:	7d23      	ldrb	r3, [r4, #20]
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	68a3      	ldr	r3, [r4, #8]
 8012ce4:	d01c      	beq.n	8012d20 <ucdr_serialize_int32_t+0xdc>
 8012ce6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012cea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012cf2:	7018      	strb	r0, [r3, #0]
 8012cf4:	68a3      	ldr	r3, [r4, #8]
 8012cf6:	705a      	strb	r2, [r3, #1]
 8012cf8:	68a3      	ldr	r3, [r4, #8]
 8012cfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012cfe:	7099      	strb	r1, [r3, #2]
 8012d00:	68a3      	ldr	r3, [r4, #8]
 8012d02:	70da      	strb	r2, [r3, #3]
 8012d04:	2104      	movs	r1, #4
 8012d06:	68a2      	ldr	r2, [r4, #8]
 8012d08:	6923      	ldr	r3, [r4, #16]
 8012d0a:	440a      	add	r2, r1
 8012d0c:	7561      	strb	r1, [r4, #21]
 8012d0e:	440b      	add	r3, r1
 8012d10:	60a2      	str	r2, [r4, #8]
 8012d12:	6123      	str	r3, [r4, #16]
 8012d14:	7da0      	ldrb	r0, [r4, #22]
 8012d16:	f080 0001 	eor.w	r0, r0, #1
 8012d1a:	b002      	add	sp, #8
 8012d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d20:	9a01      	ldr	r2, [sp, #4]
 8012d22:	601a      	str	r2, [r3, #0]
 8012d24:	e7ee      	b.n	8012d04 <ucdr_serialize_int32_t+0xc0>
 8012d26:	68a2      	ldr	r2, [r4, #8]
 8012d28:	6923      	ldr	r3, [r4, #16]
 8012d2a:	7da0      	ldrb	r0, [r4, #22]
 8012d2c:	1b92      	subs	r2, r2, r6
 8012d2e:	1b9b      	subs	r3, r3, r6
 8012d30:	7567      	strb	r7, [r4, #21]
 8012d32:	f080 0001 	eor.w	r0, r0, #1
 8012d36:	60a2      	str	r2, [r4, #8]
 8012d38:	6123      	str	r3, [r4, #16]
 8012d3a:	b002      	add	sp, #8
 8012d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d40:	68a3      	ldr	r3, [r4, #8]
 8012d42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d46:	701a      	strb	r2, [r3, #0]
 8012d48:	68a3      	ldr	r3, [r4, #8]
 8012d4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d4e:	701a      	strb	r2, [r3, #0]
 8012d50:	68a3      	ldr	r3, [r4, #8]
 8012d52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d56:	701a      	strb	r2, [r3, #0]
 8012d58:	e7ad      	b.n	8012cb6 <ucdr_serialize_int32_t+0x72>
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	ad01      	add	r5, sp, #4
 8012d5e:	4632      	mov	r2, r6
 8012d60:	4629      	mov	r1, r5
 8012d62:	f00a f952 	bl	801d00a <memcpy>
 8012d66:	4642      	mov	r2, r8
 8012d68:	19a9      	adds	r1, r5, r6
 8012d6a:	68a0      	ldr	r0, [r4, #8]
 8012d6c:	f00a f94d 	bl	801d00a <memcpy>
 8012d70:	e7a1      	b.n	8012cb6 <ucdr_serialize_int32_t+0x72>
 8012d72:	bf00      	nop

08012d74 <ucdr_deserialize_int32_t>:
 8012d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d78:	4604      	mov	r4, r0
 8012d7a:	460d      	mov	r5, r1
 8012d7c:	2104      	movs	r1, #4
 8012d7e:	f000 fc1f 	bl	80135c0 <ucdr_buffer_alignment>
 8012d82:	4601      	mov	r1, r0
 8012d84:	4620      	mov	r0, r4
 8012d86:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d8a:	f000 fc61 	bl	8013650 <ucdr_advance_buffer>
 8012d8e:	2104      	movs	r1, #4
 8012d90:	4620      	mov	r0, r4
 8012d92:	f000 fbb5 	bl	8013500 <ucdr_check_buffer_available_for>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d138      	bne.n	8012e0c <ucdr_deserialize_int32_t+0x98>
 8012d9a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012d9e:	42b7      	cmp	r7, r6
 8012da0:	d92f      	bls.n	8012e02 <ucdr_deserialize_int32_t+0x8e>
 8012da2:	6923      	ldr	r3, [r4, #16]
 8012da4:	4620      	mov	r0, r4
 8012da6:	60a7      	str	r7, [r4, #8]
 8012da8:	1bbf      	subs	r7, r7, r6
 8012daa:	443b      	add	r3, r7
 8012dac:	f1c7 0904 	rsb	r9, r7, #4
 8012db0:	6123      	str	r3, [r4, #16]
 8012db2:	4649      	mov	r1, r9
 8012db4:	f000 fbb0 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012db8:	2800      	cmp	r0, #0
 8012dba:	d046      	beq.n	8012e4a <ucdr_deserialize_int32_t+0xd6>
 8012dbc:	7d23      	ldrb	r3, [r4, #20]
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d05c      	beq.n	8012e7c <ucdr_deserialize_int32_t+0x108>
 8012dc2:	78f3      	ldrb	r3, [r6, #3]
 8012dc4:	702b      	strb	r3, [r5, #0]
 8012dc6:	2f00      	cmp	r7, #0
 8012dc8:	d04c      	beq.n	8012e64 <ucdr_deserialize_int32_t+0xf0>
 8012dca:	78b3      	ldrb	r3, [r6, #2]
 8012dcc:	2f01      	cmp	r7, #1
 8012dce:	706b      	strb	r3, [r5, #1]
 8012dd0:	f105 0302 	add.w	r3, r5, #2
 8012dd4:	d04a      	beq.n	8012e6c <ucdr_deserialize_int32_t+0xf8>
 8012dd6:	7873      	ldrb	r3, [r6, #1]
 8012dd8:	2f02      	cmp	r7, #2
 8012dda:	70ab      	strb	r3, [r5, #2]
 8012ddc:	f105 0303 	add.w	r3, r5, #3
 8012de0:	d048      	beq.n	8012e74 <ucdr_deserialize_int32_t+0x100>
 8012de2:	7833      	ldrb	r3, [r6, #0]
 8012de4:	70eb      	strb	r3, [r5, #3]
 8012de6:	6923      	ldr	r3, [r4, #16]
 8012de8:	2104      	movs	r1, #4
 8012dea:	68a2      	ldr	r2, [r4, #8]
 8012dec:	3304      	adds	r3, #4
 8012dee:	7da0      	ldrb	r0, [r4, #22]
 8012df0:	444a      	add	r2, r9
 8012df2:	7561      	strb	r1, [r4, #21]
 8012df4:	1bdb      	subs	r3, r3, r7
 8012df6:	f080 0001 	eor.w	r0, r0, #1
 8012dfa:	60a2      	str	r2, [r4, #8]
 8012dfc:	6123      	str	r3, [r4, #16]
 8012dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e02:	2104      	movs	r1, #4
 8012e04:	4620      	mov	r0, r4
 8012e06:	f000 fb87 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012e0a:	b1b0      	cbz	r0, 8012e3a <ucdr_deserialize_int32_t+0xc6>
 8012e0c:	7d23      	ldrb	r3, [r4, #20]
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	68a3      	ldr	r3, [r4, #8]
 8012e12:	d017      	beq.n	8012e44 <ucdr_deserialize_int32_t+0xd0>
 8012e14:	78db      	ldrb	r3, [r3, #3]
 8012e16:	702b      	strb	r3, [r5, #0]
 8012e18:	68a3      	ldr	r3, [r4, #8]
 8012e1a:	789b      	ldrb	r3, [r3, #2]
 8012e1c:	706b      	strb	r3, [r5, #1]
 8012e1e:	68a3      	ldr	r3, [r4, #8]
 8012e20:	785b      	ldrb	r3, [r3, #1]
 8012e22:	70ab      	strb	r3, [r5, #2]
 8012e24:	68a3      	ldr	r3, [r4, #8]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	70eb      	strb	r3, [r5, #3]
 8012e2a:	2104      	movs	r1, #4
 8012e2c:	68a2      	ldr	r2, [r4, #8]
 8012e2e:	6923      	ldr	r3, [r4, #16]
 8012e30:	440a      	add	r2, r1
 8012e32:	7561      	strb	r1, [r4, #21]
 8012e34:	440b      	add	r3, r1
 8012e36:	60a2      	str	r2, [r4, #8]
 8012e38:	6123      	str	r3, [r4, #16]
 8012e3a:	7da0      	ldrb	r0, [r4, #22]
 8012e3c:	f080 0001 	eor.w	r0, r0, #1
 8012e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	602b      	str	r3, [r5, #0]
 8012e48:	e7ef      	b.n	8012e2a <ucdr_deserialize_int32_t+0xb6>
 8012e4a:	68a2      	ldr	r2, [r4, #8]
 8012e4c:	6923      	ldr	r3, [r4, #16]
 8012e4e:	1bd2      	subs	r2, r2, r7
 8012e50:	7da0      	ldrb	r0, [r4, #22]
 8012e52:	1bdb      	subs	r3, r3, r7
 8012e54:	f884 8015 	strb.w	r8, [r4, #21]
 8012e58:	f080 0001 	eor.w	r0, r0, #1
 8012e5c:	60a2      	str	r2, [r4, #8]
 8012e5e:	6123      	str	r3, [r4, #16]
 8012e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e64:	68a3      	ldr	r3, [r4, #8]
 8012e66:	789b      	ldrb	r3, [r3, #2]
 8012e68:	706b      	strb	r3, [r5, #1]
 8012e6a:	1cab      	adds	r3, r5, #2
 8012e6c:	68a2      	ldr	r2, [r4, #8]
 8012e6e:	7852      	ldrb	r2, [r2, #1]
 8012e70:	f803 2b01 	strb.w	r2, [r3], #1
 8012e74:	68a2      	ldr	r2, [r4, #8]
 8012e76:	7812      	ldrb	r2, [r2, #0]
 8012e78:	701a      	strb	r2, [r3, #0]
 8012e7a:	e7b4      	b.n	8012de6 <ucdr_deserialize_int32_t+0x72>
 8012e7c:	4631      	mov	r1, r6
 8012e7e:	463a      	mov	r2, r7
 8012e80:	4628      	mov	r0, r5
 8012e82:	f00a f8c2 	bl	801d00a <memcpy>
 8012e86:	464a      	mov	r2, r9
 8012e88:	19e8      	adds	r0, r5, r7
 8012e8a:	68a1      	ldr	r1, [r4, #8]
 8012e8c:	f00a f8bd 	bl	801d00a <memcpy>
 8012e90:	e7a9      	b.n	8012de6 <ucdr_deserialize_int32_t+0x72>
 8012e92:	bf00      	nop

08012e94 <ucdr_serialize_double>:
 8012e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e98:	4604      	mov	r4, r0
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	2108      	movs	r1, #8
 8012e9e:	ed8d 0b00 	vstr	d0, [sp]
 8012ea2:	f000 fb8d 	bl	80135c0 <ucdr_buffer_alignment>
 8012ea6:	4601      	mov	r1, r0
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	7d67      	ldrb	r7, [r4, #21]
 8012eac:	f000 fbd0 	bl	8013650 <ucdr_advance_buffer>
 8012eb0:	2108      	movs	r1, #8
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	f000 fb24 	bl	8013500 <ucdr_check_buffer_available_for>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d14e      	bne.n	8012f5a <ucdr_serialize_double+0xc6>
 8012ebc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012ec0:	42ab      	cmp	r3, r5
 8012ec2:	d945      	bls.n	8012f50 <ucdr_serialize_double+0xbc>
 8012ec4:	1b5e      	subs	r6, r3, r5
 8012ec6:	60a3      	str	r3, [r4, #8]
 8012ec8:	6923      	ldr	r3, [r4, #16]
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f1c6 0808 	rsb	r8, r6, #8
 8012ed0:	4433      	add	r3, r6
 8012ed2:	4641      	mov	r1, r8
 8012ed4:	6123      	str	r3, [r4, #16]
 8012ed6:	f000 fb1f 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d074      	beq.n	8012fc8 <ucdr_serialize_double+0x134>
 8012ede:	7d23      	ldrb	r3, [r4, #20]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	f000 809b 	beq.w	801301c <ucdr_serialize_double+0x188>
 8012ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012eea:	702b      	strb	r3, [r5, #0]
 8012eec:	2e00      	cmp	r6, #0
 8012eee:	d078      	beq.n	8012fe2 <ucdr_serialize_double+0x14e>
 8012ef0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ef4:	2e01      	cmp	r6, #1
 8012ef6:	706b      	strb	r3, [r5, #1]
 8012ef8:	d077      	beq.n	8012fea <ucdr_serialize_double+0x156>
 8012efa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012efe:	2e02      	cmp	r6, #2
 8012f00:	70ab      	strb	r3, [r5, #2]
 8012f02:	d076      	beq.n	8012ff2 <ucdr_serialize_double+0x15e>
 8012f04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f08:	2e03      	cmp	r6, #3
 8012f0a:	70eb      	strb	r3, [r5, #3]
 8012f0c:	d075      	beq.n	8012ffa <ucdr_serialize_double+0x166>
 8012f0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012f12:	2e04      	cmp	r6, #4
 8012f14:	712b      	strb	r3, [r5, #4]
 8012f16:	d074      	beq.n	8013002 <ucdr_serialize_double+0x16e>
 8012f18:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012f1c:	2e05      	cmp	r6, #5
 8012f1e:	716b      	strb	r3, [r5, #5]
 8012f20:	d073      	beq.n	801300a <ucdr_serialize_double+0x176>
 8012f22:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012f26:	2e06      	cmp	r6, #6
 8012f28:	71ab      	strb	r3, [r5, #6]
 8012f2a:	d072      	beq.n	8013012 <ucdr_serialize_double+0x17e>
 8012f2c:	f89d 3000 	ldrb.w	r3, [sp]
 8012f30:	71eb      	strb	r3, [r5, #7]
 8012f32:	6923      	ldr	r3, [r4, #16]
 8012f34:	2108      	movs	r1, #8
 8012f36:	68a2      	ldr	r2, [r4, #8]
 8012f38:	3308      	adds	r3, #8
 8012f3a:	7da0      	ldrb	r0, [r4, #22]
 8012f3c:	4442      	add	r2, r8
 8012f3e:	7561      	strb	r1, [r4, #21]
 8012f40:	1b9e      	subs	r6, r3, r6
 8012f42:	f080 0001 	eor.w	r0, r0, #1
 8012f46:	60a2      	str	r2, [r4, #8]
 8012f48:	6126      	str	r6, [r4, #16]
 8012f4a:	b002      	add	sp, #8
 8012f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f50:	2108      	movs	r1, #8
 8012f52:	4620      	mov	r0, r4
 8012f54:	f000 fae0 	bl	8013518 <ucdr_check_final_buffer_behavior>
 8012f58:	b350      	cbz	r0, 8012fb0 <ucdr_serialize_double+0x11c>
 8012f5a:	7d23      	ldrb	r3, [r4, #20]
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d02d      	beq.n	8012fbc <ucdr_serialize_double+0x128>
 8012f60:	68a3      	ldr	r3, [r4, #8]
 8012f62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012f66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f6a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012f6e:	7018      	strb	r0, [r3, #0]
 8012f70:	68a3      	ldr	r3, [r4, #8]
 8012f72:	705a      	strb	r2, [r3, #1]
 8012f74:	68a3      	ldr	r3, [r4, #8]
 8012f76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012f7e:	7099      	strb	r1, [r3, #2]
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	70da      	strb	r2, [r3, #3]
 8012f84:	68a3      	ldr	r3, [r4, #8]
 8012f86:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f8a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012f8e:	7118      	strb	r0, [r3, #4]
 8012f90:	68a3      	ldr	r3, [r4, #8]
 8012f92:	715a      	strb	r2, [r3, #5]
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	f89d 2000 	ldrb.w	r2, [sp]
 8012f9a:	7199      	strb	r1, [r3, #6]
 8012f9c:	68a3      	ldr	r3, [r4, #8]
 8012f9e:	71da      	strb	r2, [r3, #7]
 8012fa0:	2108      	movs	r1, #8
 8012fa2:	68a2      	ldr	r2, [r4, #8]
 8012fa4:	6923      	ldr	r3, [r4, #16]
 8012fa6:	440a      	add	r2, r1
 8012fa8:	7561      	strb	r1, [r4, #21]
 8012faa:	440b      	add	r3, r1
 8012fac:	60a2      	str	r2, [r4, #8]
 8012fae:	6123      	str	r3, [r4, #16]
 8012fb0:	7da0      	ldrb	r0, [r4, #22]
 8012fb2:	f080 0001 	eor.w	r0, r0, #1
 8012fb6:	b002      	add	sp, #8
 8012fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fbc:	466b      	mov	r3, sp
 8012fbe:	68a2      	ldr	r2, [r4, #8]
 8012fc0:	cb03      	ldmia	r3!, {r0, r1}
 8012fc2:	6010      	str	r0, [r2, #0]
 8012fc4:	6051      	str	r1, [r2, #4]
 8012fc6:	e7eb      	b.n	8012fa0 <ucdr_serialize_double+0x10c>
 8012fc8:	68a2      	ldr	r2, [r4, #8]
 8012fca:	6923      	ldr	r3, [r4, #16]
 8012fcc:	7da0      	ldrb	r0, [r4, #22]
 8012fce:	1b92      	subs	r2, r2, r6
 8012fd0:	1b9b      	subs	r3, r3, r6
 8012fd2:	7567      	strb	r7, [r4, #21]
 8012fd4:	f080 0001 	eor.w	r0, r0, #1
 8012fd8:	60a2      	str	r2, [r4, #8]
 8012fda:	6123      	str	r3, [r4, #16]
 8012fdc:	b002      	add	sp, #8
 8012fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe2:	68a3      	ldr	r3, [r4, #8]
 8012fe4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012fe8:	701a      	strb	r2, [r3, #0]
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012ff0:	701a      	strb	r2, [r3, #0]
 8012ff2:	68a3      	ldr	r3, [r4, #8]
 8012ff4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	68a3      	ldr	r3, [r4, #8]
 8012ffc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013000:	701a      	strb	r2, [r3, #0]
 8013002:	68a3      	ldr	r3, [r4, #8]
 8013004:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	68a3      	ldr	r3, [r4, #8]
 801300c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	68a3      	ldr	r3, [r4, #8]
 8013014:	f89d 2000 	ldrb.w	r2, [sp]
 8013018:	701a      	strb	r2, [r3, #0]
 801301a:	e78a      	b.n	8012f32 <ucdr_serialize_double+0x9e>
 801301c:	4628      	mov	r0, r5
 801301e:	466d      	mov	r5, sp
 8013020:	4632      	mov	r2, r6
 8013022:	4629      	mov	r1, r5
 8013024:	f009 fff1 	bl	801d00a <memcpy>
 8013028:	4642      	mov	r2, r8
 801302a:	19a9      	adds	r1, r5, r6
 801302c:	68a0      	ldr	r0, [r4, #8]
 801302e:	f009 ffec 	bl	801d00a <memcpy>
 8013032:	e77e      	b.n	8012f32 <ucdr_serialize_double+0x9e>

08013034 <ucdr_serialize_endian_double>:
 8013034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013038:	4604      	mov	r4, r0
 801303a:	b083      	sub	sp, #12
 801303c:	460e      	mov	r6, r1
 801303e:	2108      	movs	r1, #8
 8013040:	ed8d 0b00 	vstr	d0, [sp]
 8013044:	f000 fabc 	bl	80135c0 <ucdr_buffer_alignment>
 8013048:	4601      	mov	r1, r0
 801304a:	4620      	mov	r0, r4
 801304c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013050:	f000 fafe 	bl	8013650 <ucdr_advance_buffer>
 8013054:	2108      	movs	r1, #8
 8013056:	4620      	mov	r0, r4
 8013058:	f000 fa52 	bl	8013500 <ucdr_check_buffer_available_for>
 801305c:	2800      	cmp	r0, #0
 801305e:	d14d      	bne.n	80130fc <ucdr_serialize_endian_double+0xc8>
 8013060:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8013064:	42bd      	cmp	r5, r7
 8013066:	d944      	bls.n	80130f2 <ucdr_serialize_endian_double+0xbe>
 8013068:	6923      	ldr	r3, [r4, #16]
 801306a:	4620      	mov	r0, r4
 801306c:	60a5      	str	r5, [r4, #8]
 801306e:	1bed      	subs	r5, r5, r7
 8013070:	442b      	add	r3, r5
 8013072:	f1c5 0908 	rsb	r9, r5, #8
 8013076:	6123      	str	r3, [r4, #16]
 8013078:	4649      	mov	r1, r9
 801307a:	f000 fa4d 	bl	8013518 <ucdr_check_final_buffer_behavior>
 801307e:	2800      	cmp	r0, #0
 8013080:	d072      	beq.n	8013168 <ucdr_serialize_endian_double+0x134>
 8013082:	2e01      	cmp	r6, #1
 8013084:	f000 809b 	beq.w	80131be <ucdr_serialize_endian_double+0x18a>
 8013088:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801308c:	703b      	strb	r3, [r7, #0]
 801308e:	2d00      	cmp	r5, #0
 8013090:	d078      	beq.n	8013184 <ucdr_serialize_endian_double+0x150>
 8013092:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013096:	2d01      	cmp	r5, #1
 8013098:	707b      	strb	r3, [r7, #1]
 801309a:	d077      	beq.n	801318c <ucdr_serialize_endian_double+0x158>
 801309c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130a0:	2d02      	cmp	r5, #2
 80130a2:	70bb      	strb	r3, [r7, #2]
 80130a4:	d076      	beq.n	8013194 <ucdr_serialize_endian_double+0x160>
 80130a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80130aa:	2d03      	cmp	r5, #3
 80130ac:	70fb      	strb	r3, [r7, #3]
 80130ae:	d075      	beq.n	801319c <ucdr_serialize_endian_double+0x168>
 80130b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80130b4:	2d04      	cmp	r5, #4
 80130b6:	713b      	strb	r3, [r7, #4]
 80130b8:	d074      	beq.n	80131a4 <ucdr_serialize_endian_double+0x170>
 80130ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80130be:	2d05      	cmp	r5, #5
 80130c0:	717b      	strb	r3, [r7, #5]
 80130c2:	d073      	beq.n	80131ac <ucdr_serialize_endian_double+0x178>
 80130c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80130c8:	2d06      	cmp	r5, #6
 80130ca:	71bb      	strb	r3, [r7, #6]
 80130cc:	d072      	beq.n	80131b4 <ucdr_serialize_endian_double+0x180>
 80130ce:	f89d 3000 	ldrb.w	r3, [sp]
 80130d2:	71fb      	strb	r3, [r7, #7]
 80130d4:	6923      	ldr	r3, [r4, #16]
 80130d6:	2108      	movs	r1, #8
 80130d8:	68a2      	ldr	r2, [r4, #8]
 80130da:	3308      	adds	r3, #8
 80130dc:	7da0      	ldrb	r0, [r4, #22]
 80130de:	444a      	add	r2, r9
 80130e0:	7561      	strb	r1, [r4, #21]
 80130e2:	1b5d      	subs	r5, r3, r5
 80130e4:	f080 0001 	eor.w	r0, r0, #1
 80130e8:	60a2      	str	r2, [r4, #8]
 80130ea:	6125      	str	r5, [r4, #16]
 80130ec:	b003      	add	sp, #12
 80130ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130f2:	2108      	movs	r1, #8
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 fa0f 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80130fa:	b348      	cbz	r0, 8013150 <ucdr_serialize_endian_double+0x11c>
 80130fc:	2e01      	cmp	r6, #1
 80130fe:	d02d      	beq.n	801315c <ucdr_serialize_endian_double+0x128>
 8013100:	68a3      	ldr	r3, [r4, #8]
 8013102:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013106:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801310a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801310e:	7018      	strb	r0, [r3, #0]
 8013110:	68a3      	ldr	r3, [r4, #8]
 8013112:	705a      	strb	r2, [r3, #1]
 8013114:	68a3      	ldr	r3, [r4, #8]
 8013116:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801311a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801311e:	7099      	strb	r1, [r3, #2]
 8013120:	68a3      	ldr	r3, [r4, #8]
 8013122:	70da      	strb	r2, [r3, #3]
 8013124:	68a3      	ldr	r3, [r4, #8]
 8013126:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801312a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801312e:	7118      	strb	r0, [r3, #4]
 8013130:	68a3      	ldr	r3, [r4, #8]
 8013132:	715a      	strb	r2, [r3, #5]
 8013134:	68a3      	ldr	r3, [r4, #8]
 8013136:	f89d 2000 	ldrb.w	r2, [sp]
 801313a:	7199      	strb	r1, [r3, #6]
 801313c:	68a3      	ldr	r3, [r4, #8]
 801313e:	71da      	strb	r2, [r3, #7]
 8013140:	2108      	movs	r1, #8
 8013142:	68a2      	ldr	r2, [r4, #8]
 8013144:	6923      	ldr	r3, [r4, #16]
 8013146:	440a      	add	r2, r1
 8013148:	7561      	strb	r1, [r4, #21]
 801314a:	440b      	add	r3, r1
 801314c:	60a2      	str	r2, [r4, #8]
 801314e:	6123      	str	r3, [r4, #16]
 8013150:	7da0      	ldrb	r0, [r4, #22]
 8013152:	f080 0001 	eor.w	r0, r0, #1
 8013156:	b003      	add	sp, #12
 8013158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801315c:	466b      	mov	r3, sp
 801315e:	68a2      	ldr	r2, [r4, #8]
 8013160:	cb03      	ldmia	r3!, {r0, r1}
 8013162:	6010      	str	r0, [r2, #0]
 8013164:	6051      	str	r1, [r2, #4]
 8013166:	e7eb      	b.n	8013140 <ucdr_serialize_endian_double+0x10c>
 8013168:	68a2      	ldr	r2, [r4, #8]
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	7da0      	ldrb	r0, [r4, #22]
 801316e:	1b52      	subs	r2, r2, r5
 8013170:	1b5b      	subs	r3, r3, r5
 8013172:	f884 8015 	strb.w	r8, [r4, #21]
 8013176:	f080 0001 	eor.w	r0, r0, #1
 801317a:	60a2      	str	r2, [r4, #8]
 801317c:	6123      	str	r3, [r4, #16]
 801317e:	b003      	add	sp, #12
 8013180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013184:	68a3      	ldr	r3, [r4, #8]
 8013186:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801318a:	701a      	strb	r2, [r3, #0]
 801318c:	68a3      	ldr	r3, [r4, #8]
 801318e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013192:	701a      	strb	r2, [r3, #0]
 8013194:	68a3      	ldr	r3, [r4, #8]
 8013196:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801319a:	701a      	strb	r2, [r3, #0]
 801319c:	68a3      	ldr	r3, [r4, #8]
 801319e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80131a2:	701a      	strb	r2, [r3, #0]
 80131a4:	68a3      	ldr	r3, [r4, #8]
 80131a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80131aa:	701a      	strb	r2, [r3, #0]
 80131ac:	68a3      	ldr	r3, [r4, #8]
 80131ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80131b2:	701a      	strb	r2, [r3, #0]
 80131b4:	68a3      	ldr	r3, [r4, #8]
 80131b6:	f89d 2000 	ldrb.w	r2, [sp]
 80131ba:	701a      	strb	r2, [r3, #0]
 80131bc:	e78a      	b.n	80130d4 <ucdr_serialize_endian_double+0xa0>
 80131be:	466e      	mov	r6, sp
 80131c0:	462a      	mov	r2, r5
 80131c2:	4638      	mov	r0, r7
 80131c4:	4631      	mov	r1, r6
 80131c6:	f009 ff20 	bl	801d00a <memcpy>
 80131ca:	464a      	mov	r2, r9
 80131cc:	1971      	adds	r1, r6, r5
 80131ce:	68a0      	ldr	r0, [r4, #8]
 80131d0:	f009 ff1b 	bl	801d00a <memcpy>
 80131d4:	e77e      	b.n	80130d4 <ucdr_serialize_endian_double+0xa0>
 80131d6:	bf00      	nop

080131d8 <ucdr_deserialize_double>:
 80131d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131dc:	4604      	mov	r4, r0
 80131de:	460d      	mov	r5, r1
 80131e0:	2108      	movs	r1, #8
 80131e2:	f000 f9ed 	bl	80135c0 <ucdr_buffer_alignment>
 80131e6:	4601      	mov	r1, r0
 80131e8:	4620      	mov	r0, r4
 80131ea:	f894 8015 	ldrb.w	r8, [r4, #21]
 80131ee:	f000 fa2f 	bl	8013650 <ucdr_advance_buffer>
 80131f2:	2108      	movs	r1, #8
 80131f4:	4620      	mov	r0, r4
 80131f6:	f000 f983 	bl	8013500 <ucdr_check_buffer_available_for>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d151      	bne.n	80132a2 <ucdr_deserialize_double+0xca>
 80131fe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013202:	42be      	cmp	r6, r7
 8013204:	d948      	bls.n	8013298 <ucdr_deserialize_double+0xc0>
 8013206:	6923      	ldr	r3, [r4, #16]
 8013208:	4620      	mov	r0, r4
 801320a:	60a6      	str	r6, [r4, #8]
 801320c:	1bf6      	subs	r6, r6, r7
 801320e:	4433      	add	r3, r6
 8013210:	f1c6 0908 	rsb	r9, r6, #8
 8013214:	6123      	str	r3, [r4, #16]
 8013216:	4649      	mov	r1, r9
 8013218:	f000 f97e 	bl	8013518 <ucdr_check_final_buffer_behavior>
 801321c:	2800      	cmp	r0, #0
 801321e:	d06d      	beq.n	80132fc <ucdr_deserialize_double+0x124>
 8013220:	7d23      	ldrb	r3, [r4, #20]
 8013222:	2b01      	cmp	r3, #1
 8013224:	f000 8093 	beq.w	801334e <ucdr_deserialize_double+0x176>
 8013228:	79fb      	ldrb	r3, [r7, #7]
 801322a:	702b      	strb	r3, [r5, #0]
 801322c:	2e00      	cmp	r6, #0
 801322e:	d072      	beq.n	8013316 <ucdr_deserialize_double+0x13e>
 8013230:	79bb      	ldrb	r3, [r7, #6]
 8013232:	2e01      	cmp	r6, #1
 8013234:	706b      	strb	r3, [r5, #1]
 8013236:	f105 0302 	add.w	r3, r5, #2
 801323a:	d070      	beq.n	801331e <ucdr_deserialize_double+0x146>
 801323c:	797b      	ldrb	r3, [r7, #5]
 801323e:	2e02      	cmp	r6, #2
 8013240:	70ab      	strb	r3, [r5, #2]
 8013242:	f105 0303 	add.w	r3, r5, #3
 8013246:	d06e      	beq.n	8013326 <ucdr_deserialize_double+0x14e>
 8013248:	793b      	ldrb	r3, [r7, #4]
 801324a:	2e03      	cmp	r6, #3
 801324c:	70eb      	strb	r3, [r5, #3]
 801324e:	f105 0304 	add.w	r3, r5, #4
 8013252:	d06c      	beq.n	801332e <ucdr_deserialize_double+0x156>
 8013254:	78fb      	ldrb	r3, [r7, #3]
 8013256:	2e04      	cmp	r6, #4
 8013258:	712b      	strb	r3, [r5, #4]
 801325a:	f105 0305 	add.w	r3, r5, #5
 801325e:	d06a      	beq.n	8013336 <ucdr_deserialize_double+0x15e>
 8013260:	78bb      	ldrb	r3, [r7, #2]
 8013262:	2e05      	cmp	r6, #5
 8013264:	716b      	strb	r3, [r5, #5]
 8013266:	f105 0306 	add.w	r3, r5, #6
 801326a:	d068      	beq.n	801333e <ucdr_deserialize_double+0x166>
 801326c:	787b      	ldrb	r3, [r7, #1]
 801326e:	2e06      	cmp	r6, #6
 8013270:	71ab      	strb	r3, [r5, #6]
 8013272:	f105 0307 	add.w	r3, r5, #7
 8013276:	d066      	beq.n	8013346 <ucdr_deserialize_double+0x16e>
 8013278:	783b      	ldrb	r3, [r7, #0]
 801327a:	71eb      	strb	r3, [r5, #7]
 801327c:	6923      	ldr	r3, [r4, #16]
 801327e:	2108      	movs	r1, #8
 8013280:	68a2      	ldr	r2, [r4, #8]
 8013282:	3308      	adds	r3, #8
 8013284:	7da0      	ldrb	r0, [r4, #22]
 8013286:	444a      	add	r2, r9
 8013288:	7561      	strb	r1, [r4, #21]
 801328a:	1b9e      	subs	r6, r3, r6
 801328c:	f080 0001 	eor.w	r0, r0, #1
 8013290:	60a2      	str	r2, [r4, #8]
 8013292:	6126      	str	r6, [r4, #16]
 8013294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013298:	2108      	movs	r1, #8
 801329a:	4620      	mov	r0, r4
 801329c:	f000 f93c 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80132a0:	b310      	cbz	r0, 80132e8 <ucdr_deserialize_double+0x110>
 80132a2:	7d23      	ldrb	r3, [r4, #20]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	68a3      	ldr	r3, [r4, #8]
 80132a8:	d023      	beq.n	80132f2 <ucdr_deserialize_double+0x11a>
 80132aa:	79db      	ldrb	r3, [r3, #7]
 80132ac:	702b      	strb	r3, [r5, #0]
 80132ae:	68a3      	ldr	r3, [r4, #8]
 80132b0:	799b      	ldrb	r3, [r3, #6]
 80132b2:	706b      	strb	r3, [r5, #1]
 80132b4:	68a3      	ldr	r3, [r4, #8]
 80132b6:	795b      	ldrb	r3, [r3, #5]
 80132b8:	70ab      	strb	r3, [r5, #2]
 80132ba:	68a3      	ldr	r3, [r4, #8]
 80132bc:	791b      	ldrb	r3, [r3, #4]
 80132be:	70eb      	strb	r3, [r5, #3]
 80132c0:	68a3      	ldr	r3, [r4, #8]
 80132c2:	78db      	ldrb	r3, [r3, #3]
 80132c4:	712b      	strb	r3, [r5, #4]
 80132c6:	68a3      	ldr	r3, [r4, #8]
 80132c8:	789b      	ldrb	r3, [r3, #2]
 80132ca:	716b      	strb	r3, [r5, #5]
 80132cc:	68a3      	ldr	r3, [r4, #8]
 80132ce:	785b      	ldrb	r3, [r3, #1]
 80132d0:	71ab      	strb	r3, [r5, #6]
 80132d2:	68a3      	ldr	r3, [r4, #8]
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	71eb      	strb	r3, [r5, #7]
 80132d8:	2108      	movs	r1, #8
 80132da:	68a2      	ldr	r2, [r4, #8]
 80132dc:	6923      	ldr	r3, [r4, #16]
 80132de:	440a      	add	r2, r1
 80132e0:	7561      	strb	r1, [r4, #21]
 80132e2:	440b      	add	r3, r1
 80132e4:	60a2      	str	r2, [r4, #8]
 80132e6:	6123      	str	r3, [r4, #16]
 80132e8:	7da0      	ldrb	r0, [r4, #22]
 80132ea:	f080 0001 	eor.w	r0, r0, #1
 80132ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	602a      	str	r2, [r5, #0]
 80132f8:	606b      	str	r3, [r5, #4]
 80132fa:	e7ed      	b.n	80132d8 <ucdr_deserialize_double+0x100>
 80132fc:	68a2      	ldr	r2, [r4, #8]
 80132fe:	6923      	ldr	r3, [r4, #16]
 8013300:	1b92      	subs	r2, r2, r6
 8013302:	7da0      	ldrb	r0, [r4, #22]
 8013304:	1b9b      	subs	r3, r3, r6
 8013306:	f884 8015 	strb.w	r8, [r4, #21]
 801330a:	f080 0001 	eor.w	r0, r0, #1
 801330e:	60a2      	str	r2, [r4, #8]
 8013310:	6123      	str	r3, [r4, #16]
 8013312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013316:	68a3      	ldr	r3, [r4, #8]
 8013318:	799b      	ldrb	r3, [r3, #6]
 801331a:	706b      	strb	r3, [r5, #1]
 801331c:	1cab      	adds	r3, r5, #2
 801331e:	68a2      	ldr	r2, [r4, #8]
 8013320:	7952      	ldrb	r2, [r2, #5]
 8013322:	f803 2b01 	strb.w	r2, [r3], #1
 8013326:	68a2      	ldr	r2, [r4, #8]
 8013328:	7912      	ldrb	r2, [r2, #4]
 801332a:	f803 2b01 	strb.w	r2, [r3], #1
 801332e:	68a2      	ldr	r2, [r4, #8]
 8013330:	78d2      	ldrb	r2, [r2, #3]
 8013332:	f803 2b01 	strb.w	r2, [r3], #1
 8013336:	68a2      	ldr	r2, [r4, #8]
 8013338:	7892      	ldrb	r2, [r2, #2]
 801333a:	f803 2b01 	strb.w	r2, [r3], #1
 801333e:	68a2      	ldr	r2, [r4, #8]
 8013340:	7852      	ldrb	r2, [r2, #1]
 8013342:	f803 2b01 	strb.w	r2, [r3], #1
 8013346:	68a2      	ldr	r2, [r4, #8]
 8013348:	7812      	ldrb	r2, [r2, #0]
 801334a:	701a      	strb	r2, [r3, #0]
 801334c:	e796      	b.n	801327c <ucdr_deserialize_double+0xa4>
 801334e:	4639      	mov	r1, r7
 8013350:	4632      	mov	r2, r6
 8013352:	4628      	mov	r0, r5
 8013354:	f009 fe59 	bl	801d00a <memcpy>
 8013358:	464a      	mov	r2, r9
 801335a:	19a8      	adds	r0, r5, r6
 801335c:	68a1      	ldr	r1, [r4, #8]
 801335e:	f009 fe54 	bl	801d00a <memcpy>
 8013362:	e78b      	b.n	801327c <ucdr_deserialize_double+0xa4>

08013364 <ucdr_deserialize_endian_double>:
 8013364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013368:	4604      	mov	r4, r0
 801336a:	460f      	mov	r7, r1
 801336c:	2108      	movs	r1, #8
 801336e:	4615      	mov	r5, r2
 8013370:	f000 f926 	bl	80135c0 <ucdr_buffer_alignment>
 8013374:	4601      	mov	r1, r0
 8013376:	4620      	mov	r0, r4
 8013378:	f894 8015 	ldrb.w	r8, [r4, #21]
 801337c:	f000 f968 	bl	8013650 <ucdr_advance_buffer>
 8013380:	2108      	movs	r1, #8
 8013382:	4620      	mov	r0, r4
 8013384:	f000 f8bc 	bl	8013500 <ucdr_check_buffer_available_for>
 8013388:	2800      	cmp	r0, #0
 801338a:	d159      	bne.n	8013440 <ucdr_deserialize_endian_double+0xdc>
 801338c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 8013390:	454e      	cmp	r6, r9
 8013392:	d950      	bls.n	8013436 <ucdr_deserialize_endian_double+0xd2>
 8013394:	6923      	ldr	r3, [r4, #16]
 8013396:	4620      	mov	r0, r4
 8013398:	60a6      	str	r6, [r4, #8]
 801339a:	eba6 0609 	sub.w	r6, r6, r9
 801339e:	4433      	add	r3, r6
 80133a0:	f1c6 0a08 	rsb	sl, r6, #8
 80133a4:	6123      	str	r3, [r4, #16]
 80133a6:	4651      	mov	r1, sl
 80133a8:	f000 f8b6 	bl	8013518 <ucdr_check_final_buffer_behavior>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d073      	beq.n	8013498 <ucdr_deserialize_endian_double+0x134>
 80133b0:	2f01      	cmp	r7, #1
 80133b2:	f000 809a 	beq.w	80134ea <ucdr_deserialize_endian_double+0x186>
 80133b6:	f899 3007 	ldrb.w	r3, [r9, #7]
 80133ba:	702b      	strb	r3, [r5, #0]
 80133bc:	2e00      	cmp	r6, #0
 80133be:	d078      	beq.n	80134b2 <ucdr_deserialize_endian_double+0x14e>
 80133c0:	f899 3006 	ldrb.w	r3, [r9, #6]
 80133c4:	2e01      	cmp	r6, #1
 80133c6:	706b      	strb	r3, [r5, #1]
 80133c8:	f105 0302 	add.w	r3, r5, #2
 80133cc:	d075      	beq.n	80134ba <ucdr_deserialize_endian_double+0x156>
 80133ce:	f899 3005 	ldrb.w	r3, [r9, #5]
 80133d2:	2e02      	cmp	r6, #2
 80133d4:	70ab      	strb	r3, [r5, #2]
 80133d6:	f105 0303 	add.w	r3, r5, #3
 80133da:	d072      	beq.n	80134c2 <ucdr_deserialize_endian_double+0x15e>
 80133dc:	f899 3004 	ldrb.w	r3, [r9, #4]
 80133e0:	2e03      	cmp	r6, #3
 80133e2:	70eb      	strb	r3, [r5, #3]
 80133e4:	f105 0304 	add.w	r3, r5, #4
 80133e8:	d06f      	beq.n	80134ca <ucdr_deserialize_endian_double+0x166>
 80133ea:	f899 3003 	ldrb.w	r3, [r9, #3]
 80133ee:	2e04      	cmp	r6, #4
 80133f0:	712b      	strb	r3, [r5, #4]
 80133f2:	f105 0305 	add.w	r3, r5, #5
 80133f6:	d06c      	beq.n	80134d2 <ucdr_deserialize_endian_double+0x16e>
 80133f8:	f899 3002 	ldrb.w	r3, [r9, #2]
 80133fc:	2e05      	cmp	r6, #5
 80133fe:	716b      	strb	r3, [r5, #5]
 8013400:	f105 0306 	add.w	r3, r5, #6
 8013404:	d069      	beq.n	80134da <ucdr_deserialize_endian_double+0x176>
 8013406:	f899 3001 	ldrb.w	r3, [r9, #1]
 801340a:	2e06      	cmp	r6, #6
 801340c:	71ab      	strb	r3, [r5, #6]
 801340e:	f105 0307 	add.w	r3, r5, #7
 8013412:	d066      	beq.n	80134e2 <ucdr_deserialize_endian_double+0x17e>
 8013414:	f899 3000 	ldrb.w	r3, [r9]
 8013418:	71eb      	strb	r3, [r5, #7]
 801341a:	6923      	ldr	r3, [r4, #16]
 801341c:	2108      	movs	r1, #8
 801341e:	68a2      	ldr	r2, [r4, #8]
 8013420:	3308      	adds	r3, #8
 8013422:	7da0      	ldrb	r0, [r4, #22]
 8013424:	4452      	add	r2, sl
 8013426:	7561      	strb	r1, [r4, #21]
 8013428:	1b9e      	subs	r6, r3, r6
 801342a:	f080 0001 	eor.w	r0, r0, #1
 801342e:	60a2      	str	r2, [r4, #8]
 8013430:	6126      	str	r6, [r4, #16]
 8013432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013436:	2108      	movs	r1, #8
 8013438:	4620      	mov	r0, r4
 801343a:	f000 f86d 	bl	8013518 <ucdr_check_final_buffer_behavior>
 801343e:	b308      	cbz	r0, 8013484 <ucdr_deserialize_endian_double+0x120>
 8013440:	2f01      	cmp	r7, #1
 8013442:	68a3      	ldr	r3, [r4, #8]
 8013444:	d023      	beq.n	801348e <ucdr_deserialize_endian_double+0x12a>
 8013446:	79db      	ldrb	r3, [r3, #7]
 8013448:	702b      	strb	r3, [r5, #0]
 801344a:	68a3      	ldr	r3, [r4, #8]
 801344c:	799b      	ldrb	r3, [r3, #6]
 801344e:	706b      	strb	r3, [r5, #1]
 8013450:	68a3      	ldr	r3, [r4, #8]
 8013452:	795b      	ldrb	r3, [r3, #5]
 8013454:	70ab      	strb	r3, [r5, #2]
 8013456:	68a3      	ldr	r3, [r4, #8]
 8013458:	791b      	ldrb	r3, [r3, #4]
 801345a:	70eb      	strb	r3, [r5, #3]
 801345c:	68a3      	ldr	r3, [r4, #8]
 801345e:	78db      	ldrb	r3, [r3, #3]
 8013460:	712b      	strb	r3, [r5, #4]
 8013462:	68a3      	ldr	r3, [r4, #8]
 8013464:	789b      	ldrb	r3, [r3, #2]
 8013466:	716b      	strb	r3, [r5, #5]
 8013468:	68a3      	ldr	r3, [r4, #8]
 801346a:	785b      	ldrb	r3, [r3, #1]
 801346c:	71ab      	strb	r3, [r5, #6]
 801346e:	68a3      	ldr	r3, [r4, #8]
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	71eb      	strb	r3, [r5, #7]
 8013474:	2108      	movs	r1, #8
 8013476:	68a2      	ldr	r2, [r4, #8]
 8013478:	6923      	ldr	r3, [r4, #16]
 801347a:	440a      	add	r2, r1
 801347c:	7561      	strb	r1, [r4, #21]
 801347e:	440b      	add	r3, r1
 8013480:	60a2      	str	r2, [r4, #8]
 8013482:	6123      	str	r3, [r4, #16]
 8013484:	7da0      	ldrb	r0, [r4, #22]
 8013486:	f080 0001 	eor.w	r0, r0, #1
 801348a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801348e:	681a      	ldr	r2, [r3, #0]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	602a      	str	r2, [r5, #0]
 8013494:	606b      	str	r3, [r5, #4]
 8013496:	e7ed      	b.n	8013474 <ucdr_deserialize_endian_double+0x110>
 8013498:	68a2      	ldr	r2, [r4, #8]
 801349a:	6923      	ldr	r3, [r4, #16]
 801349c:	1b92      	subs	r2, r2, r6
 801349e:	7da0      	ldrb	r0, [r4, #22]
 80134a0:	1b9b      	subs	r3, r3, r6
 80134a2:	f884 8015 	strb.w	r8, [r4, #21]
 80134a6:	f080 0001 	eor.w	r0, r0, #1
 80134aa:	60a2      	str	r2, [r4, #8]
 80134ac:	6123      	str	r3, [r4, #16]
 80134ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b2:	68a3      	ldr	r3, [r4, #8]
 80134b4:	799b      	ldrb	r3, [r3, #6]
 80134b6:	706b      	strb	r3, [r5, #1]
 80134b8:	1cab      	adds	r3, r5, #2
 80134ba:	68a2      	ldr	r2, [r4, #8]
 80134bc:	7952      	ldrb	r2, [r2, #5]
 80134be:	f803 2b01 	strb.w	r2, [r3], #1
 80134c2:	68a2      	ldr	r2, [r4, #8]
 80134c4:	7912      	ldrb	r2, [r2, #4]
 80134c6:	f803 2b01 	strb.w	r2, [r3], #1
 80134ca:	68a2      	ldr	r2, [r4, #8]
 80134cc:	78d2      	ldrb	r2, [r2, #3]
 80134ce:	f803 2b01 	strb.w	r2, [r3], #1
 80134d2:	68a2      	ldr	r2, [r4, #8]
 80134d4:	7892      	ldrb	r2, [r2, #2]
 80134d6:	f803 2b01 	strb.w	r2, [r3], #1
 80134da:	68a2      	ldr	r2, [r4, #8]
 80134dc:	7852      	ldrb	r2, [r2, #1]
 80134de:	f803 2b01 	strb.w	r2, [r3], #1
 80134e2:	68a2      	ldr	r2, [r4, #8]
 80134e4:	7812      	ldrb	r2, [r2, #0]
 80134e6:	701a      	strb	r2, [r3, #0]
 80134e8:	e797      	b.n	801341a <ucdr_deserialize_endian_double+0xb6>
 80134ea:	4649      	mov	r1, r9
 80134ec:	4632      	mov	r2, r6
 80134ee:	4628      	mov	r0, r5
 80134f0:	f009 fd8b 	bl	801d00a <memcpy>
 80134f4:	4652      	mov	r2, sl
 80134f6:	19a8      	adds	r0, r5, r6
 80134f8:	68a1      	ldr	r1, [r4, #8]
 80134fa:	f009 fd86 	bl	801d00a <memcpy>
 80134fe:	e78c      	b.n	801341a <ucdr_deserialize_endian_double+0xb6>

08013500 <ucdr_check_buffer_available_for>:
 8013500:	7d83      	ldrb	r3, [r0, #22]
 8013502:	b93b      	cbnz	r3, 8013514 <ucdr_check_buffer_available_for+0x14>
 8013504:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013508:	4419      	add	r1, r3
 801350a:	4288      	cmp	r0, r1
 801350c:	bf34      	ite	cc
 801350e:	2000      	movcc	r0, #0
 8013510:	2001      	movcs	r0, #1
 8013512:	4770      	bx	lr
 8013514:	2000      	movs	r0, #0
 8013516:	4770      	bx	lr

08013518 <ucdr_check_final_buffer_behavior>:
 8013518:	7d83      	ldrb	r3, [r0, #22]
 801351a:	b943      	cbnz	r3, 801352e <ucdr_check_final_buffer_behavior+0x16>
 801351c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013520:	b510      	push	{r4, lr}
 8013522:	4291      	cmp	r1, r2
 8013524:	4604      	mov	r4, r0
 8013526:	d205      	bcs.n	8013534 <ucdr_check_final_buffer_behavior+0x1c>
 8013528:	2301      	movs	r3, #1
 801352a:	4618      	mov	r0, r3
 801352c:	bd10      	pop	{r4, pc}
 801352e:	2300      	movs	r3, #0
 8013530:	4618      	mov	r0, r3
 8013532:	4770      	bx	lr
 8013534:	6982      	ldr	r2, [r0, #24]
 8013536:	b13a      	cbz	r2, 8013548 <ucdr_check_final_buffer_behavior+0x30>
 8013538:	69c1      	ldr	r1, [r0, #28]
 801353a:	4790      	blx	r2
 801353c:	f080 0301 	eor.w	r3, r0, #1
 8013540:	75a0      	strb	r0, [r4, #22]
 8013542:	b2db      	uxtb	r3, r3
 8013544:	4618      	mov	r0, r3
 8013546:	bd10      	pop	{r4, pc}
 8013548:	2001      	movs	r0, #1
 801354a:	75a0      	strb	r0, [r4, #22]
 801354c:	e7fa      	b.n	8013544 <ucdr_check_final_buffer_behavior+0x2c>
 801354e:	bf00      	nop

08013550 <ucdr_set_on_full_buffer_callback>:
 8013550:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop

08013558 <ucdr_init_buffer_origin_offset_endian>:
 8013558:	b410      	push	{r4}
 801355a:	9c01      	ldr	r4, [sp, #4]
 801355c:	440a      	add	r2, r1
 801355e:	6001      	str	r1, [r0, #0]
 8013560:	6042      	str	r2, [r0, #4]
 8013562:	190a      	adds	r2, r1, r4
 8013564:	441c      	add	r4, r3
 8013566:	6082      	str	r2, [r0, #8]
 8013568:	2200      	movs	r2, #0
 801356a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801356e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013572:	7542      	strb	r2, [r0, #21]
 8013574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013578:	7582      	strb	r2, [r0, #22]
 801357a:	7503      	strb	r3, [r0, #20]
 801357c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop

08013584 <ucdr_init_buffer_origin_offset>:
 8013584:	b510      	push	{r4, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	9c04      	ldr	r4, [sp, #16]
 801358a:	9400      	str	r4, [sp, #0]
 801358c:	2401      	movs	r4, #1
 801358e:	9401      	str	r4, [sp, #4]
 8013590:	f7ff ffe2 	bl	8013558 <ucdr_init_buffer_origin_offset_endian>
 8013594:	b002      	add	sp, #8
 8013596:	bd10      	pop	{r4, pc}

08013598 <ucdr_init_buffer_origin>:
 8013598:	b510      	push	{r4, lr}
 801359a:	2400      	movs	r4, #0
 801359c:	b082      	sub	sp, #8
 801359e:	9400      	str	r4, [sp, #0]
 80135a0:	f7ff fff0 	bl	8013584 <ucdr_init_buffer_origin_offset>
 80135a4:	b002      	add	sp, #8
 80135a6:	bd10      	pop	{r4, pc}

080135a8 <ucdr_init_buffer>:
 80135a8:	2300      	movs	r3, #0
 80135aa:	f7ff bff5 	b.w	8013598 <ucdr_init_buffer_origin>
 80135ae:	bf00      	nop

080135b0 <ucdr_alignment>:
 80135b0:	fbb0 f2f1 	udiv	r2, r0, r1
 80135b4:	fb02 0011 	mls	r0, r2, r1, r0
 80135b8:	1e4b      	subs	r3, r1, #1
 80135ba:	1a08      	subs	r0, r1, r0
 80135bc:	4018      	ands	r0, r3
 80135be:	4770      	bx	lr

080135c0 <ucdr_buffer_alignment>:
 80135c0:	7d43      	ldrb	r3, [r0, #21]
 80135c2:	428b      	cmp	r3, r1
 80135c4:	d209      	bcs.n	80135da <ucdr_buffer_alignment+0x1a>
 80135c6:	6903      	ldr	r3, [r0, #16]
 80135c8:	1e4a      	subs	r2, r1, #1
 80135ca:	fbb3 f0f1 	udiv	r0, r3, r1
 80135ce:	fb01 3010 	mls	r0, r1, r0, r3
 80135d2:	1a09      	subs	r1, r1, r0
 80135d4:	ea01 0002 	and.w	r0, r1, r2
 80135d8:	4770      	bx	lr
 80135da:	2000      	movs	r0, #0
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop

080135e0 <ucdr_align_to>:
 80135e0:	b538      	push	{r3, r4, r5, lr}
 80135e2:	4604      	mov	r4, r0
 80135e4:	460d      	mov	r5, r1
 80135e6:	f7ff ffeb 	bl	80135c0 <ucdr_buffer_alignment>
 80135ea:	68a3      	ldr	r3, [r4, #8]
 80135ec:	7565      	strb	r5, [r4, #21]
 80135ee:	181a      	adds	r2, r3, r0
 80135f0:	6923      	ldr	r3, [r4, #16]
 80135f2:	4418      	add	r0, r3
 80135f4:	6863      	ldr	r3, [r4, #4]
 80135f6:	4293      	cmp	r3, r2
 80135f8:	6120      	str	r0, [r4, #16]
 80135fa:	bf28      	it	cs
 80135fc:	4613      	movcs	r3, r2
 80135fe:	60a3      	str	r3, [r4, #8]
 8013600:	bd38      	pop	{r3, r4, r5, pc}
 8013602:	bf00      	nop

08013604 <ucdr_buffer_length>:
 8013604:	6882      	ldr	r2, [r0, #8]
 8013606:	6800      	ldr	r0, [r0, #0]
 8013608:	1a10      	subs	r0, r2, r0
 801360a:	4770      	bx	lr

0801360c <ucdr_buffer_remaining>:
 801360c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013610:	1a10      	subs	r0, r2, r0
 8013612:	4770      	bx	lr

08013614 <ucdr_check_final_buffer_behavior_array>:
 8013614:	b538      	push	{r3, r4, r5, lr}
 8013616:	7d83      	ldrb	r3, [r0, #22]
 8013618:	b9a3      	cbnz	r3, 8013644 <ucdr_check_final_buffer_behavior_array+0x30>
 801361a:	4604      	mov	r4, r0
 801361c:	460d      	mov	r5, r1
 801361e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013622:	429a      	cmp	r2, r3
 8013624:	d300      	bcc.n	8013628 <ucdr_check_final_buffer_behavior_array+0x14>
 8013626:	b931      	cbnz	r1, 8013636 <ucdr_check_final_buffer_behavior_array+0x22>
 8013628:	4620      	mov	r0, r4
 801362a:	f7ff ffef 	bl	801360c <ucdr_buffer_remaining>
 801362e:	42a8      	cmp	r0, r5
 8013630:	bf28      	it	cs
 8013632:	4628      	movcs	r0, r5
 8013634:	bd38      	pop	{r3, r4, r5, pc}
 8013636:	6983      	ldr	r3, [r0, #24]
 8013638:	b133      	cbz	r3, 8013648 <ucdr_check_final_buffer_behavior_array+0x34>
 801363a:	69c1      	ldr	r1, [r0, #28]
 801363c:	4798      	blx	r3
 801363e:	75a0      	strb	r0, [r4, #22]
 8013640:	2800      	cmp	r0, #0
 8013642:	d0f1      	beq.n	8013628 <ucdr_check_final_buffer_behavior_array+0x14>
 8013644:	2000      	movs	r0, #0
 8013646:	bd38      	pop	{r3, r4, r5, pc}
 8013648:	2301      	movs	r3, #1
 801364a:	7583      	strb	r3, [r0, #22]
 801364c:	e7fa      	b.n	8013644 <ucdr_check_final_buffer_behavior_array+0x30>
 801364e:	bf00      	nop

08013650 <ucdr_advance_buffer>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	4604      	mov	r4, r0
 8013654:	460d      	mov	r5, r1
 8013656:	f7ff ff53 	bl	8013500 <ucdr_check_buffer_available_for>
 801365a:	b178      	cbz	r0, 801367c <ucdr_advance_buffer+0x2c>
 801365c:	6923      	ldr	r3, [r4, #16]
 801365e:	68a2      	ldr	r2, [r4, #8]
 8013660:	442b      	add	r3, r5
 8013662:	442a      	add	r2, r5
 8013664:	6123      	str	r3, [r4, #16]
 8013666:	2301      	movs	r3, #1
 8013668:	60a2      	str	r2, [r4, #8]
 801366a:	7563      	strb	r3, [r4, #21]
 801366c:	bd38      	pop	{r3, r4, r5, pc}
 801366e:	68a2      	ldr	r2, [r4, #8]
 8013670:	1a2d      	subs	r5, r5, r0
 8013672:	6923      	ldr	r3, [r4, #16]
 8013674:	4402      	add	r2, r0
 8013676:	4418      	add	r0, r3
 8013678:	60a2      	str	r2, [r4, #8]
 801367a:	6120      	str	r0, [r4, #16]
 801367c:	4629      	mov	r1, r5
 801367e:	2201      	movs	r2, #1
 8013680:	4620      	mov	r0, r4
 8013682:	f7ff ffc7 	bl	8013614 <ucdr_check_final_buffer_behavior_array>
 8013686:	2800      	cmp	r0, #0
 8013688:	d1f1      	bne.n	801366e <ucdr_advance_buffer+0x1e>
 801368a:	2301      	movs	r3, #1
 801368c:	7563      	strb	r3, [r4, #21]
 801368e:	bd38      	pop	{r3, r4, r5, pc}

08013690 <ucdr_serialize_sequence_char>:
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	4615      	mov	r5, r2
 8013694:	460e      	mov	r6, r1
 8013696:	7d01      	ldrb	r1, [r0, #20]
 8013698:	4604      	mov	r4, r0
 801369a:	f7fe ff51 	bl	8012540 <ucdr_serialize_endian_uint32_t>
 801369e:	b90d      	cbnz	r5, 80136a4 <ucdr_serialize_sequence_char+0x14>
 80136a0:	2001      	movs	r0, #1
 80136a2:	bd70      	pop	{r4, r5, r6, pc}
 80136a4:	462b      	mov	r3, r5
 80136a6:	4632      	mov	r2, r6
 80136a8:	7d21      	ldrb	r1, [r4, #20]
 80136aa:	4620      	mov	r0, r4
 80136ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136b0:	f7fe ba90 	b.w	8011bd4 <ucdr_serialize_endian_array_char>

080136b4 <ucdr_deserialize_sequence_char>:
 80136b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b8:	461d      	mov	r5, r3
 80136ba:	4616      	mov	r6, r2
 80136bc:	460f      	mov	r7, r1
 80136be:	461a      	mov	r2, r3
 80136c0:	7d01      	ldrb	r1, [r0, #20]
 80136c2:	4604      	mov	r4, r0
 80136c4:	f7ff f864 	bl	8012790 <ucdr_deserialize_endian_uint32_t>
 80136c8:	682b      	ldr	r3, [r5, #0]
 80136ca:	429e      	cmp	r6, r3
 80136cc:	d201      	bcs.n	80136d2 <ucdr_deserialize_sequence_char+0x1e>
 80136ce:	2201      	movs	r2, #1
 80136d0:	75a2      	strb	r2, [r4, #22]
 80136d2:	b913      	cbnz	r3, 80136da <ucdr_deserialize_sequence_char+0x26>
 80136d4:	2001      	movs	r0, #1
 80136d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136da:	463a      	mov	r2, r7
 80136dc:	7d21      	ldrb	r1, [r4, #20]
 80136de:	4620      	mov	r0, r4
 80136e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136e4:	f7fe baa8 	b.w	8011c38 <ucdr_deserialize_endian_array_char>

080136e8 <ucdr_serialize_sequence_uint8_t>:
 80136e8:	b570      	push	{r4, r5, r6, lr}
 80136ea:	4615      	mov	r5, r2
 80136ec:	460e      	mov	r6, r1
 80136ee:	7d01      	ldrb	r1, [r0, #20]
 80136f0:	4604      	mov	r4, r0
 80136f2:	f7fe ff25 	bl	8012540 <ucdr_serialize_endian_uint32_t>
 80136f6:	b90d      	cbnz	r5, 80136fc <ucdr_serialize_sequence_uint8_t+0x14>
 80136f8:	2001      	movs	r0, #1
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	462b      	mov	r3, r5
 80136fe:	4632      	mov	r2, r6
 8013700:	7d21      	ldrb	r1, [r4, #20]
 8013702:	4620      	mov	r0, r4
 8013704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013708:	f7fe bafc 	b.w	8011d04 <ucdr_serialize_endian_array_uint8_t>

0801370c <ucdr_deserialize_sequence_uint8_t>:
 801370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013710:	461d      	mov	r5, r3
 8013712:	4616      	mov	r6, r2
 8013714:	460f      	mov	r7, r1
 8013716:	461a      	mov	r2, r3
 8013718:	7d01      	ldrb	r1, [r0, #20]
 801371a:	4604      	mov	r4, r0
 801371c:	f7ff f838 	bl	8012790 <ucdr_deserialize_endian_uint32_t>
 8013720:	682b      	ldr	r3, [r5, #0]
 8013722:	429e      	cmp	r6, r3
 8013724:	d201      	bcs.n	801372a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8013726:	2201      	movs	r2, #1
 8013728:	75a2      	strb	r2, [r4, #22]
 801372a:	b913      	cbnz	r3, 8013732 <ucdr_deserialize_sequence_uint8_t+0x26>
 801372c:	2001      	movs	r0, #1
 801372e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013732:	463a      	mov	r2, r7
 8013734:	7d21      	ldrb	r1, [r4, #20]
 8013736:	4620      	mov	r0, r4
 8013738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801373c:	f7fe bb48 	b.w	8011dd0 <ucdr_deserialize_endian_array_uint8_t>

08013740 <uxr_buffer_delete_entity>:
 8013740:	b510      	push	{r4, lr}
 8013742:	2300      	movs	r3, #0
 8013744:	b08e      	sub	sp, #56	@ 0x38
 8013746:	4604      	mov	r4, r0
 8013748:	9103      	str	r1, [sp, #12]
 801374a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801374e:	2303      	movs	r3, #3
 8013750:	2204      	movs	r2, #4
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	ab06      	add	r3, sp, #24
 8013756:	f001 fab1 	bl	8014cbc <uxr_prepare_stream_to_write_submessage>
 801375a:	b918      	cbnz	r0, 8013764 <uxr_buffer_delete_entity+0x24>
 801375c:	4604      	mov	r4, r0
 801375e:	4620      	mov	r0, r4
 8013760:	b00e      	add	sp, #56	@ 0x38
 8013762:	bd10      	pop	{r4, pc}
 8013764:	9902      	ldr	r1, [sp, #8]
 8013766:	aa05      	add	r2, sp, #20
 8013768:	4620      	mov	r0, r4
 801376a:	f001 fbe3 	bl	8014f34 <uxr_init_base_object_request>
 801376e:	4604      	mov	r4, r0
 8013770:	a905      	add	r1, sp, #20
 8013772:	a806      	add	r0, sp, #24
 8013774:	f003 f9c8 	bl	8016b08 <uxr_serialize_DELETE_Payload>
 8013778:	4620      	mov	r0, r4
 801377a:	b00e      	add	sp, #56	@ 0x38
 801377c:	bd10      	pop	{r4, pc}
 801377e:	bf00      	nop

08013780 <uxr_common_create_entity>:
 8013780:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013784:	b510      	push	{r4, lr}
 8013786:	f1bc 0f01 	cmp.w	ip, #1
 801378a:	b08c      	sub	sp, #48	@ 0x30
 801378c:	4604      	mov	r4, r0
 801378e:	9202      	str	r2, [sp, #8]
 8013790:	bf0c      	ite	eq
 8013792:	f003 0201 	andeq.w	r2, r3, #1
 8013796:	2200      	movne	r2, #0
 8013798:	330e      	adds	r3, #14
 801379a:	9103      	str	r1, [sp, #12]
 801379c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80137a0:	441a      	add	r2, r3
 80137a2:	ab04      	add	r3, sp, #16
 80137a4:	9101      	str	r1, [sp, #4]
 80137a6:	2101      	movs	r1, #1
 80137a8:	b292      	uxth	r2, r2
 80137aa:	9100      	str	r1, [sp, #0]
 80137ac:	9903      	ldr	r1, [sp, #12]
 80137ae:	f001 fa85 	bl	8014cbc <uxr_prepare_stream_to_write_submessage>
 80137b2:	b918      	cbnz	r0, 80137bc <uxr_common_create_entity+0x3c>
 80137b4:	4604      	mov	r4, r0
 80137b6:	4620      	mov	r0, r4
 80137b8:	b00c      	add	sp, #48	@ 0x30
 80137ba:	bd10      	pop	{r4, pc}
 80137bc:	9902      	ldr	r1, [sp, #8]
 80137be:	4620      	mov	r0, r4
 80137c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137c2:	f001 fbb7 	bl	8014f34 <uxr_init_base_object_request>
 80137c6:	4604      	mov	r4, r0
 80137c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80137ca:	a804      	add	r0, sp, #16
 80137cc:	f003 f8f6 	bl	80169bc <uxr_serialize_CREATE_Payload>
 80137d0:	4620      	mov	r0, r4
 80137d2:	b00c      	add	sp, #48	@ 0x30
 80137d4:	bd10      	pop	{r4, pc}
 80137d6:	bf00      	nop

080137d8 <uxr_buffer_create_participant_bin>:
 80137d8:	b570      	push	{r4, r5, r6, lr}
 80137da:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80137de:	4605      	mov	r5, r0
 80137e0:	ac11      	add	r4, sp, #68	@ 0x44
 80137e2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80137e6:	2303      	movs	r3, #3
 80137e8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80137ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80137f0:	7223      	strb	r3, [r4, #8]
 80137f2:	2300      	movs	r3, #0
 80137f4:	2201      	movs	r2, #1
 80137f6:	f88d 3014 	strb.w	r3, [sp, #20]
 80137fa:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80137fc:	7122      	strb	r2, [r4, #4]
 80137fe:	b1cb      	cbz	r3, 8013834 <uxr_buffer_create_participant_bin+0x5c>
 8013800:	f88d 201c 	strb.w	r2, [sp, #28]
 8013804:	9308      	str	r3, [sp, #32]
 8013806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801380a:	a915      	add	r1, sp, #84	@ 0x54
 801380c:	a809      	add	r0, sp, #36	@ 0x24
 801380e:	f7ff fecb 	bl	80135a8 <ucdr_init_buffer>
 8013812:	a905      	add	r1, sp, #20
 8013814:	a809      	add	r0, sp, #36	@ 0x24
 8013816:	f002 fda7 	bl	8016368 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801381a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801381c:	9600      	str	r6, [sp, #0]
 801381e:	4628      	mov	r0, r5
 8013820:	9401      	str	r4, [sp, #4]
 8013822:	60e3      	str	r3, [r4, #12]
 8013824:	b29b      	uxth	r3, r3
 8013826:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801382a:	f7ff ffa9 	bl	8013780 <uxr_common_create_entity>
 801382e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8013832:	bd70      	pop	{r4, r5, r6, pc}
 8013834:	f88d 301c 	strb.w	r3, [sp, #28]
 8013838:	e7e5      	b.n	8013806 <uxr_buffer_create_participant_bin+0x2e>
 801383a:	bf00      	nop

0801383c <uxr_buffer_create_topic_bin>:
 801383c:	b570      	push	{r4, r5, r6, lr}
 801383e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8013842:	4605      	mov	r5, r0
 8013844:	4618      	mov	r0, r3
 8013846:	9105      	str	r1, [sp, #20]
 8013848:	a997      	add	r1, sp, #604	@ 0x25c
 801384a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801384e:	ac13      	add	r4, sp, #76	@ 0x4c
 8013850:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013854:	2302      	movs	r3, #2
 8013856:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801385a:	f000 f9ab 	bl	8013bb4 <uxr_object_id_to_raw>
 801385e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8013860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013864:	a917      	add	r1, sp, #92	@ 0x5c
 8013866:	a80b      	add	r0, sp, #44	@ 0x2c
 8013868:	9306      	str	r3, [sp, #24]
 801386a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801386c:	930a      	str	r3, [sp, #40]	@ 0x28
 801386e:	2303      	movs	r3, #3
 8013870:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8013874:	2301      	movs	r3, #1
 8013876:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801387a:	2300      	movs	r3, #0
 801387c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013880:	f7ff fe92 	bl	80135a8 <ucdr_init_buffer>
 8013884:	a906      	add	r1, sp, #24
 8013886:	a80b      	add	r0, sp, #44	@ 0x2c
 8013888:	f002 fd90 	bl	80163ac <uxr_serialize_OBJK_Topic_Binary>
 801388c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801388e:	4628      	mov	r0, r5
 8013890:	9600      	str	r6, [sp, #0]
 8013892:	9316      	str	r3, [sp, #88]	@ 0x58
 8013894:	b29b      	uxth	r3, r3
 8013896:	9401      	str	r4, [sp, #4]
 8013898:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801389c:	f7ff ff70 	bl	8013780 <uxr_common_create_entity>
 80138a0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80138a4:	bd70      	pop	{r4, r5, r6, pc}
 80138a6:	bf00      	nop

080138a8 <uxr_buffer_create_publisher_bin>:
 80138a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80138ae:	2603      	movs	r6, #3
 80138b0:	4605      	mov	r5, r0
 80138b2:	4618      	mov	r0, r3
 80138b4:	9105      	str	r1, [sp, #20]
 80138b6:	a992      	add	r1, sp, #584	@ 0x248
 80138b8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80138bc:	ac0e      	add	r4, sp, #56	@ 0x38
 80138be:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80138c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80138c6:	f000 f975 	bl	8013bb4 <uxr_object_id_to_raw>
 80138ca:	2300      	movs	r3, #0
 80138cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138d0:	a912      	add	r1, sp, #72	@ 0x48
 80138d2:	a806      	add	r0, sp, #24
 80138d4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80138d8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80138dc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80138e0:	f7ff fe62 	bl	80135a8 <ucdr_init_buffer>
 80138e4:	a993      	add	r1, sp, #588	@ 0x24c
 80138e6:	a806      	add	r0, sp, #24
 80138e8:	f002 fe14 	bl	8016514 <uxr_serialize_OBJK_Publisher_Binary>
 80138ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138ee:	4628      	mov	r0, r5
 80138f0:	9700      	str	r7, [sp, #0]
 80138f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	9401      	str	r4, [sp, #4]
 80138f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80138fc:	f7ff ff40 	bl	8013780 <uxr_common_create_entity>
 8013900:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8013904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013906:	bf00      	nop

08013908 <uxr_buffer_create_datawriter_bin>:
 8013908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801390c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013910:	4606      	mov	r6, r0
 8013912:	4618      	mov	r0, r3
 8013914:	2703      	movs	r7, #3
 8013916:	ac1d      	add	r4, sp, #116	@ 0x74
 8013918:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801391c:	9105      	str	r1, [sp, #20]
 801391e:	a9a1      	add	r1, sp, #644	@ 0x284
 8013920:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8013924:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013928:	2305      	movs	r3, #5
 801392a:	7123      	strb	r3, [r4, #4]
 801392c:	f000 f942 	bl	8013bb4 <uxr_object_id_to_raw>
 8013930:	a90e      	add	r1, sp, #56	@ 0x38
 8013932:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8013934:	7227      	strb	r7, [r4, #8]
 8013936:	f000 f93d 	bl	8013bb4 <uxr_object_id_to_raw>
 801393a:	2300      	movs	r3, #0
 801393c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013940:	3d00      	subs	r5, #0
 8013942:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8013946:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801394a:	bf18      	it	ne
 801394c:	2501      	movne	r5, #1
 801394e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8013952:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8013956:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801395a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801395e:	2301      	movs	r3, #1
 8013960:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8013964:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013968:	bb8a      	cbnz	r2, 80139ce <uxr_buffer_create_datawriter_bin+0xc6>
 801396a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801396e:	f04f 0c13 	mov.w	ip, #19
 8013972:	250b      	movs	r5, #11
 8013974:	2221      	movs	r2, #33	@ 0x21
 8013976:	2111      	movs	r1, #17
 8013978:	2009      	movs	r0, #9
 801397a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801397e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8013982:	b923      	cbnz	r3, 801398e <uxr_buffer_create_datawriter_bin+0x86>
 8013984:	4672      	mov	r2, lr
 8013986:	4661      	mov	r1, ip
 8013988:	4628      	mov	r0, r5
 801398a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801398e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8013992:	2b01      	cmp	r3, #1
 8013994:	d025      	beq.n	80139e2 <uxr_buffer_create_datawriter_bin+0xda>
 8013996:	2b03      	cmp	r3, #3
 8013998:	d029      	beq.n	80139ee <uxr_buffer_create_datawriter_bin+0xe6>
 801399a:	b32b      	cbz	r3, 80139e8 <uxr_buffer_create_datawriter_bin+0xe0>
 801399c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80139a0:	a921      	add	r1, sp, #132	@ 0x84
 80139a2:	a806      	add	r0, sp, #24
 80139a4:	f7ff fe00 	bl	80135a8 <ucdr_init_buffer>
 80139a8:	a90e      	add	r1, sp, #56	@ 0x38
 80139aa:	a806      	add	r0, sp, #24
 80139ac:	f002 fe28 	bl	8016600 <uxr_serialize_OBJK_DataWriter_Binary>
 80139b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139b2:	f8cd 8000 	str.w	r8, [sp]
 80139b6:	4630      	mov	r0, r6
 80139b8:	9401      	str	r4, [sp, #4]
 80139ba:	60e3      	str	r3, [r4, #12]
 80139bc:	b29b      	uxth	r3, r3
 80139be:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80139c2:	f7ff fedd 	bl	8013780 <uxr_common_create_entity>
 80139c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80139ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80139d2:	f04f 0c12 	mov.w	ip, #18
 80139d6:	250a      	movs	r5, #10
 80139d8:	2220      	movs	r2, #32
 80139da:	2110      	movs	r1, #16
 80139dc:	2008      	movs	r0, #8
 80139de:	2702      	movs	r7, #2
 80139e0:	e7cd      	b.n	801397e <uxr_buffer_create_datawriter_bin+0x76>
 80139e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80139e6:	e7d9      	b.n	801399c <uxr_buffer_create_datawriter_bin+0x94>
 80139e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80139ec:	e7d6      	b.n	801399c <uxr_buffer_create_datawriter_bin+0x94>
 80139ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80139f2:	e7d3      	b.n	801399c <uxr_buffer_create_datawriter_bin+0x94>

080139f4 <get_custom_error>:
 80139f4:	4b01      	ldr	r3, [pc, #4]	@ (80139fc <get_custom_error+0x8>)
 80139f6:	7818      	ldrb	r0, [r3, #0]
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	2401389c 	.word	0x2401389c

08013a00 <recv_custom_msg>:
 8013a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a04:	4693      	mov	fp, r2
 8013a06:	b089      	sub	sp, #36	@ 0x24
 8013a08:	2200      	movs	r2, #0
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	468a      	mov	sl, r1
 8013a0e:	9305      	str	r3, [sp, #20]
 8013a10:	f88d 201e 	strb.w	r2, [sp, #30]
 8013a14:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013a18:	b322      	cbz	r2, 8013a64 <recv_custom_msg+0x64>
 8013a1a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013a1e:	f10d 081f 	add.w	r8, sp, #31
 8013a22:	af05      	add	r7, sp, #20
 8013a24:	f10d 061e 	add.w	r6, sp, #30
 8013a28:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013a2c:	e002      	b.n	8013a34 <recv_custom_msg+0x34>
 8013a2e:	9b05      	ldr	r3, [sp, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	dd0f      	ble.n	8013a54 <recv_custom_msg+0x54>
 8013a34:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013a38:	4623      	mov	r3, r4
 8013a3a:	4622      	mov	r2, r4
 8013a3c:	4648      	mov	r0, r9
 8013a3e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013a42:	e9cd 5600 	strd	r5, r6, [sp]
 8013a46:	f001 fc8b 	bl	8015360 <uxr_read_framed_msg>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d0ef      	beq.n	8013a2e <recv_custom_msg+0x2e>
 8013a4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013a52:	b1b3      	cbz	r3, 8013a82 <recv_custom_msg+0x82>
 8013a54:	4b0f      	ldr	r3, [pc, #60]	@ (8013a94 <recv_custom_msg+0x94>)
 8013a56:	2000      	movs	r0, #0
 8013a58:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	b009      	add	sp, #36	@ 0x24
 8013a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a64:	f10d 021f 	add.w	r2, sp, #31
 8013a68:	4601      	mov	r1, r0
 8013a6a:	9200      	str	r2, [sp, #0]
 8013a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a70:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013a74:	47a8      	blx	r5
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d0ec      	beq.n	8013a54 <recv_custom_msg+0x54>
 8013a7a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d1e8      	bne.n	8013a54 <recv_custom_msg+0x54>
 8013a82:	f8cb 0000 	str.w	r0, [fp]
 8013a86:	2001      	movs	r0, #1
 8013a88:	f8ca 4000 	str.w	r4, [sl]
 8013a8c:	b009      	add	sp, #36	@ 0x24
 8013a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a92:	bf00      	nop
 8013a94:	2401389c 	.word	0x2401389c

08013a98 <send_custom_msg>:
 8013a98:	b530      	push	{r4, r5, lr}
 8013a9a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8013a9e:	b087      	sub	sp, #28
 8013aa0:	4614      	mov	r4, r2
 8013aa2:	b995      	cbnz	r5, 8013aca <send_custom_msg+0x32>
 8013aa4:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8013aa8:	f10d 0317 	add.w	r3, sp, #23
 8013aac:	47a8      	blx	r5
 8013aae:	1e03      	subs	r3, r0, #0
 8013ab0:	bf18      	it	ne
 8013ab2:	2301      	movne	r3, #1
 8013ab4:	42a0      	cmp	r0, r4
 8013ab6:	bf18      	it	ne
 8013ab8:	2300      	movne	r3, #0
 8013aba:	b91b      	cbnz	r3, 8013ac4 <send_custom_msg+0x2c>
 8013abc:	4a0a      	ldr	r2, [pc, #40]	@ (8013ae8 <send_custom_msg+0x50>)
 8013abe:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8013ac2:	7011      	strb	r1, [r2, #0]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	b007      	add	sp, #28
 8013ac8:	bd30      	pop	{r4, r5, pc}
 8013aca:	460b      	mov	r3, r1
 8013acc:	2200      	movs	r2, #0
 8013ace:	f10d 0117 	add.w	r1, sp, #23
 8013ad2:	9400      	str	r4, [sp, #0]
 8013ad4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013ad8:	4602      	mov	r2, r0
 8013ada:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013ade:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013ae2:	f001 fa5f 	bl	8014fa4 <uxr_write_framed_msg>
 8013ae6:	e7e2      	b.n	8013aae <send_custom_msg+0x16>
 8013ae8:	2401389c 	.word	0x2401389c

08013aec <uxr_set_custom_transport_callbacks>:
 8013aec:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013af0:	9901      	ldr	r1, [sp, #4]
 8013af2:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013af6:	9b00      	ldr	r3, [sp, #0]
 8013af8:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop

08013b00 <uxr_init_custom_transport>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013b06:	b303      	cbz	r3, 8013b4a <uxr_init_custom_transport+0x4a>
 8013b08:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	b1e2      	cbz	r2, 8013b4a <uxr_init_custom_transport+0x4a>
 8013b10:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013b14:	b1ca      	cbz	r2, 8013b4a <uxr_init_custom_transport+0x4a>
 8013b16:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013b1a:	b1b2      	cbz	r2, 8013b4a <uxr_init_custom_transport+0x4a>
 8013b1c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013b20:	4798      	blx	r3
 8013b22:	4605      	mov	r5, r0
 8013b24:	b188      	cbz	r0, 8013b4a <uxr_init_custom_transport+0x4a>
 8013b26:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013b2a:	b98b      	cbnz	r3, 8013b50 <uxr_init_custom_transport+0x50>
 8013b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8013b5c <uxr_init_custom_transport+0x5c>)
 8013b2e:	4628      	mov	r0, r5
 8013b30:	490b      	ldr	r1, [pc, #44]	@ (8013b60 <uxr_init_custom_transport+0x60>)
 8013b32:	4a0c      	ldr	r2, [pc, #48]	@ (8013b64 <uxr_init_custom_transport+0x64>)
 8013b34:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013b38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b3c:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013b40:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013b44:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013b48:	bd38      	pop	{r3, r4, r5, pc}
 8013b4a:	2500      	movs	r5, #0
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	bd38      	pop	{r3, r4, r5, pc}
 8013b50:	2100      	movs	r1, #0
 8013b52:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013b56:	f001 fa1f 	bl	8014f98 <uxr_init_framing_io>
 8013b5a:	e7e7      	b.n	8013b2c <uxr_init_custom_transport+0x2c>
 8013b5c:	08013a01 	.word	0x08013a01
 8013b60:	08013a99 	.word	0x08013a99
 8013b64:	080139f5 	.word	0x080139f5

08013b68 <uxr_close_custom_transport>:
 8013b68:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013b6c:	4718      	bx	r3
 8013b6e:	bf00      	nop

08013b70 <uxr_object_id>:
 8013b70:	b082      	sub	sp, #8
 8013b72:	2300      	movs	r3, #0
 8013b74:	f88d 1006 	strb.w	r1, [sp, #6]
 8013b78:	f360 030f 	bfi	r3, r0, #0, #16
 8013b7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013b80:	f362 431f 	bfi	r3, r2, #16, #16
 8013b84:	4618      	mov	r0, r3
 8013b86:	b002      	add	sp, #8
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop

08013b8c <uxr_object_id_from_raw>:
 8013b8c:	7843      	ldrb	r3, [r0, #1]
 8013b8e:	b082      	sub	sp, #8
 8013b90:	7801      	ldrb	r1, [r0, #0]
 8013b92:	2000      	movs	r0, #0
 8013b94:	091a      	lsrs	r2, r3, #4
 8013b96:	f003 030f 	and.w	r3, r3, #15
 8013b9a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8013b9e:	f88d 3006 	strb.w	r3, [sp, #6]
 8013ba2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013ba6:	f362 000f 	bfi	r0, r2, #0, #16
 8013baa:	f363 401f 	bfi	r0, r3, #16, #16
 8013bae:	b002      	add	sp, #8
 8013bb0:	4770      	bx	lr
 8013bb2:	bf00      	nop

08013bb4 <uxr_object_id_to_raw>:
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013bba:	b082      	sub	sp, #8
 8013bbc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013bc0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013bc4:	f881 c000 	strb.w	ip, [r1]
 8013bc8:	7048      	strb	r0, [r1, #1]
 8013bca:	b002      	add	sp, #8
 8013bcc:	4770      	bx	lr
 8013bce:	bf00      	nop

08013bd0 <uxr_buffer_cancel_data>:
 8013bd0:	b510      	push	{r4, lr}
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	b094      	sub	sp, #80	@ 0x50
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	9205      	str	r2, [sp, #20]
 8013bda:	9301      	str	r3, [sp, #4]
 8013bdc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013be0:	f88d 301e 	strb.w	r3, [sp, #30]
 8013be4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013be8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013bec:	2308      	movs	r3, #8
 8013bee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	9300      	str	r3, [sp, #0]
 8013bf6:	ab0c      	add	r3, sp, #48	@ 0x30
 8013bf8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013bfc:	2210      	movs	r2, #16
 8013bfe:	f001 f85d 	bl	8014cbc <uxr_prepare_stream_to_write_submessage>
 8013c02:	b918      	cbnz	r0, 8013c0c <uxr_buffer_cancel_data+0x3c>
 8013c04:	4604      	mov	r4, r0
 8013c06:	4620      	mov	r0, r4
 8013c08:	b014      	add	sp, #80	@ 0x50
 8013c0a:	bd10      	pop	{r4, pc}
 8013c0c:	9905      	ldr	r1, [sp, #20]
 8013c0e:	aa06      	add	r2, sp, #24
 8013c10:	4620      	mov	r0, r4
 8013c12:	f001 f98f 	bl	8014f34 <uxr_init_base_object_request>
 8013c16:	4604      	mov	r4, r0
 8013c18:	a906      	add	r1, sp, #24
 8013c1a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c1c:	f003 f81e 	bl	8016c5c <uxr_serialize_READ_DATA_Payload>
 8013c20:	4620      	mov	r0, r4
 8013c22:	b014      	add	sp, #80	@ 0x50
 8013c24:	bd10      	pop	{r4, pc}
 8013c26:	bf00      	nop

08013c28 <read_submessage_format>:
 8013c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c2c:	b095      	sub	sp, #84	@ 0x54
 8013c2e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8013c32:	b113      	cbz	r3, 8013c3a <read_submessage_format+0x12>
 8013c34:	b015      	add	sp, #84	@ 0x54
 8013c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013c3e:	460c      	mov	r4, r1
 8013c40:	4615      	mov	r5, r2
 8013c42:	9004      	str	r0, [sp, #16]
 8013c44:	4699      	mov	r9, r3
 8013c46:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013c48:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8013c4c:	9005      	str	r0, [sp, #20]
 8013c4e:	a80c      	add	r0, sp, #48	@ 0x30
 8013c50:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013c54:	1a52      	subs	r2, r2, r1
 8013c56:	f7ff fca7 	bl	80135a8 <ucdr_init_buffer>
 8013c5a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c5c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013c60:	f7ff fc76 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 8013c64:	69e2      	ldr	r2, [r4, #28]
 8013c66:	b19a      	cbz	r2, 8013c90 <read_submessage_format+0x68>
 8013c68:	f1b8 0f07 	cmp.w	r8, #7
 8013c6c:	f882 9014 	strb.w	r9, [r2, #20]
 8013c70:	d040      	beq.n	8013cf4 <read_submessage_format+0xcc>
 8013c72:	f1b8 0f08 	cmp.w	r8, #8
 8013c76:	d02e      	beq.n	8013cd6 <read_submessage_format+0xae>
 8013c78:	f1b8 0f06 	cmp.w	r8, #6
 8013c7c:	d011      	beq.n	8013ca2 <read_submessage_format+0x7a>
 8013c7e:	2301      	movs	r3, #1
 8013c80:	7513      	strb	r3, [r2, #20]
 8013c82:	4629      	mov	r1, r5
 8013c84:	4620      	mov	r0, r4
 8013c86:	f7ff fce3 	bl	8013650 <ucdr_advance_buffer>
 8013c8a:	b015      	add	sp, #84	@ 0x54
 8013c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c90:	f1b8 0f07 	cmp.w	r8, #7
 8013c94:	d02e      	beq.n	8013cf4 <read_submessage_format+0xcc>
 8013c96:	f1b8 0f08 	cmp.w	r8, #8
 8013c9a:	d01c      	beq.n	8013cd6 <read_submessage_format+0xae>
 8013c9c:	f1b8 0f06 	cmp.w	r8, #6
 8013ca0:	d1ef      	bne.n	8013c82 <read_submessage_format+0x5a>
 8013ca2:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8013ca6:	f1b8 0f00 	cmp.w	r8, #0
 8013caa:	d011      	beq.n	8013cd0 <read_submessage_format+0xa8>
 8013cac:	ab0c      	add	r3, sp, #48	@ 0x30
 8013cae:	9501      	str	r5, [sp, #4]
 8013cb0:	463a      	mov	r2, r7
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	9300      	str	r3, [sp, #0]
 8013cb6:	2306      	movs	r3, #6
 8013cb8:	f88d 3016 	strb.w	r3, [sp, #22]
 8013cbc:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8013cc0:	9302      	str	r3, [sp, #8]
 8013cc2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013cc6:	47c0      	blx	r8
 8013cc8:	2301      	movs	r3, #1
 8013cca:	69e2      	ldr	r2, [r4, #28]
 8013ccc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013cd0:	2a00      	cmp	r2, #0
 8013cd2:	d1d4      	bne.n	8013c7e <read_submessage_format+0x56>
 8013cd4:	e7d5      	b.n	8013c82 <read_submessage_format+0x5a>
 8013cd6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d0f8      	beq.n	8013cd0 <read_submessage_format+0xa8>
 8013cde:	a80c      	add	r0, sp, #48	@ 0x30
 8013ce0:	a906      	add	r1, sp, #24
 8013ce2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013ce6:	f003 f893 	bl	8016e10 <uxr_deserialize_SampleIdentity>
 8013cea:	b9a0      	cbnz	r0, 8013d16 <read_submessage_format+0xee>
 8013cec:	69e2      	ldr	r2, [r4, #28]
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	d1c5      	bne.n	8013c7e <read_submessage_format+0x56>
 8013cf2:	e7c6      	b.n	8013c82 <read_submessage_format+0x5a>
 8013cf4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8013cf8:	b13b      	cbz	r3, 8013d0a <read_submessage_format+0xe2>
 8013cfa:	a906      	add	r1, sp, #24
 8013cfc:	a80c      	add	r0, sp, #48	@ 0x30
 8013cfe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013d02:	f002 fd4b 	bl	801679c <uxr_deserialize_BaseObjectRequest>
 8013d06:	bb60      	cbnz	r0, 8013d62 <read_submessage_format+0x13a>
 8013d08:	69e2      	ldr	r2, [r4, #28]
 8013d0a:	68a3      	ldr	r3, [r4, #8]
 8013d0c:	442b      	add	r3, r5
 8013d0e:	60a3      	str	r3, [r4, #8]
 8013d10:	2a00      	cmp	r2, #0
 8013d12:	d1b4      	bne.n	8013c7e <read_submessage_format+0x56>
 8013d14:	e7b5      	b.n	8013c82 <read_submessage_format+0x5a>
 8013d16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d18:	a80c      	add	r0, sp, #48	@ 0x30
 8013d1a:	eba8 0803 	sub.w	r8, r8, r3
 8013d1e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013d22:	44a8      	add	r8, r5
 8013d24:	1a52      	subs	r2, r2, r1
 8013d26:	f7ff fc3f 	bl	80135a8 <ucdr_init_buffer>
 8013d2a:	a80c      	add	r0, sp, #48	@ 0x30
 8013d2c:	fa1f f888 	uxth.w	r8, r8
 8013d30:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d34:	f7ff fc0c 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 8013d38:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d3a:	2108      	movs	r1, #8
 8013d3c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d40:	9300      	str	r3, [sp, #0]
 8013d42:	463a      	mov	r2, r7
 8013d44:	f88d 1016 	strb.w	r1, [sp, #22]
 8013d48:	ab06      	add	r3, sp, #24
 8013d4a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8013d4e:	4630      	mov	r0, r6
 8013d50:	9102      	str	r1, [sp, #8]
 8013d52:	9905      	ldr	r1, [sp, #20]
 8013d54:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8013d58:	47b8      	blx	r7
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013d60:	e7c4      	b.n	8013cec <read_submessage_format+0xc4>
 8013d62:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013d66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d68:	a80c      	add	r0, sp, #48	@ 0x30
 8013d6a:	1a52      	subs	r2, r2, r1
 8013d6c:	eba8 0803 	sub.w	r8, r8, r3
 8013d70:	f7ff fc1a 	bl	80135a8 <ucdr_init_buffer>
 8013d74:	a80c      	add	r0, sp, #48	@ 0x30
 8013d76:	44a8      	add	r8, r5
 8013d78:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d7c:	f7ff fbe8 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 8013d80:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d82:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013d86:	fa1f f888 	uxth.w	r8, r8
 8013d8a:	9300      	str	r3, [sp, #0]
 8013d8c:	463a      	mov	r2, r7
 8013d8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013d92:	4630      	mov	r0, r6
 8013d94:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d98:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013d9c:	2107      	movs	r1, #7
 8013d9e:	f88d 1016 	strb.w	r1, [sp, #22]
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8013da8:	9102      	str	r1, [sp, #8]
 8013daa:	9905      	ldr	r1, [sp, #20]
 8013dac:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8013db0:	47b8      	blx	r7
 8013db2:	2301      	movs	r3, #1
 8013db4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013db8:	e7a6      	b.n	8013d08 <read_submessage_format+0xe0>
 8013dba:	bf00      	nop

08013dbc <on_get_fragmentation_info>:
 8013dbc:	b500      	push	{lr}
 8013dbe:	b08b      	sub	sp, #44	@ 0x2c
 8013dc0:	4601      	mov	r1, r0
 8013dc2:	2204      	movs	r2, #4
 8013dc4:	a802      	add	r0, sp, #8
 8013dc6:	f7ff fbef 	bl	80135a8 <ucdr_init_buffer>
 8013dca:	f10d 0305 	add.w	r3, sp, #5
 8013dce:	f10d 0206 	add.w	r2, sp, #6
 8013dd2:	a901      	add	r1, sp, #4
 8013dd4:	a802      	add	r0, sp, #8
 8013dd6:	f001 feb3 	bl	8015b40 <uxr_read_submessage_header>
 8013dda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013dde:	2b0d      	cmp	r3, #13
 8013de0:	d003      	beq.n	8013dea <on_get_fragmentation_info+0x2e>
 8013de2:	2000      	movs	r0, #0
 8013de4:	b00b      	add	sp, #44	@ 0x2c
 8013de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013dee:	f013 0f02 	tst.w	r3, #2
 8013df2:	bf14      	ite	ne
 8013df4:	2002      	movne	r0, #2
 8013df6:	2001      	moveq	r0, #1
 8013df8:	b00b      	add	sp, #44	@ 0x2c
 8013dfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dfe:	bf00      	nop

08013e00 <read_submessage_get_info>:
 8013e00:	b570      	push	{r4, r5, r6, lr}
 8013e02:	2500      	movs	r5, #0
 8013e04:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013e08:	460e      	mov	r6, r1
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013e10:	4629      	mov	r1, r5
 8013e12:	a810      	add	r0, sp, #64	@ 0x40
 8013e14:	9503      	str	r5, [sp, #12]
 8013e16:	9504      	str	r5, [sp, #16]
 8013e18:	f009 f82e 	bl	801ce78 <memset>
 8013e1c:	a903      	add	r1, sp, #12
 8013e1e:	4630      	mov	r0, r6
 8013e20:	f002 fe5c 	bl	8016adc <uxr_deserialize_GET_INFO_Payload>
 8013e24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013e2e:	f001 f879 	bl	8014f24 <uxr_session_header_offset>
 8013e32:	462b      	mov	r3, r5
 8013e34:	220c      	movs	r2, #12
 8013e36:	a905      	add	r1, sp, #20
 8013e38:	9000      	str	r0, [sp, #0]
 8013e3a:	a808      	add	r0, sp, #32
 8013e3c:	f7ff fba2 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8013e40:	a910      	add	r1, sp, #64	@ 0x40
 8013e42:	a808      	add	r0, sp, #32
 8013e44:	f002 febe 	bl	8016bc4 <uxr_serialize_INFO_Payload>
 8013e48:	9b08      	ldr	r3, [sp, #32]
 8013e4a:	462a      	mov	r2, r5
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f001 f814 	bl	8014e7c <uxr_stamp_session_header>
 8013e54:	a808      	add	r0, sp, #32
 8013e56:	f7ff fbd5 	bl	8013604 <ucdr_buffer_length>
 8013e5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	a905      	add	r1, sp, #20
 8013e60:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013e64:	47a0      	blx	r4
 8013e66:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013e6a:	bd70      	pop	{r4, r5, r6, pc}

08013e6c <write_submessage_acknack.isra.0>:
 8013e6c:	b570      	push	{r4, r5, r6, lr}
 8013e6e:	b092      	sub	sp, #72	@ 0x48
 8013e70:	4605      	mov	r5, r0
 8013e72:	460e      	mov	r6, r1
 8013e74:	4614      	mov	r4, r2
 8013e76:	f001 f855 	bl	8014f24 <uxr_session_header_offset>
 8013e7a:	a905      	add	r1, sp, #20
 8013e7c:	9000      	str	r0, [sp, #0]
 8013e7e:	2300      	movs	r3, #0
 8013e80:	a80a      	add	r0, sp, #40	@ 0x28
 8013e82:	2211      	movs	r2, #17
 8013e84:	f7ff fb7e 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8013e88:	2218      	movs	r2, #24
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	210a      	movs	r1, #10
 8013e8e:	fb02 5404 	mla	r4, r2, r4, r5
 8013e92:	a80a      	add	r0, sp, #40	@ 0x28
 8013e94:	2205      	movs	r2, #5
 8013e96:	3450      	adds	r4, #80	@ 0x50
 8013e98:	f001 fe38 	bl	8015b0c <uxr_buffer_submessage_header>
 8013e9c:	a903      	add	r1, sp, #12
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	f007 fb2e 	bl	801b500 <uxr_compute_acknack>
 8013ea4:	ba40      	rev16	r0, r0
 8013ea6:	a903      	add	r1, sp, #12
 8013ea8:	f88d 6010 	strb.w	r6, [sp, #16]
 8013eac:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013eb0:	a80a      	add	r0, sp, #40	@ 0x28
 8013eb2:	f002 fef9 	bl	8016ca8 <uxr_serialize_ACKNACK_Payload>
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eba:	4628      	mov	r0, r5
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	f000 ffdd 	bl	8014e7c <uxr_stamp_session_header>
 8013ec2:	a80a      	add	r0, sp, #40	@ 0x28
 8013ec4:	f7ff fb9e 	bl	8013604 <ucdr_buffer_length>
 8013ec8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013eca:	4602      	mov	r2, r0
 8013ecc:	a905      	add	r1, sp, #20
 8013ece:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013ed2:	47a0      	blx	r4
 8013ed4:	b012      	add	sp, #72	@ 0x48
 8013ed6:	bd70      	pop	{r4, r5, r6, pc}

08013ed8 <uxr_init_session>:
 8013ed8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013f10 <uxr_init_session+0x38>
 8013edc:	2300      	movs	r3, #0
 8013ede:	b510      	push	{r4, lr}
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8013ee6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8013eea:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8013eee:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8013ef2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013ef6:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013efa:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8013efe:	2181      	movs	r1, #129	@ 0x81
 8013f00:	f000 ff20 	bl	8014d44 <uxr_init_session_info>
 8013f04:	f104 0008 	add.w	r0, r4, #8
 8013f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f0c:	f001 bd1a 	b.w	8015944 <uxr_init_stream_storage>
	...

08013f18 <uxr_set_status_callback>:
 8013f18:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop

08013f20 <uxr_set_topic_callback>:
 8013f20:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop

08013f28 <uxr_set_request_callback>:
 8013f28:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop

08013f30 <uxr_set_reply_callback>:
 8013f30:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop

08013f38 <uxr_create_output_best_effort_stream>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	b084      	sub	sp, #16
 8013f3e:	e9cd 2100 	strd	r2, r1, [sp]
 8013f42:	f000 ffef 	bl	8014f24 <uxr_session_header_offset>
 8013f46:	4603      	mov	r3, r0
 8013f48:	f104 0008 	add.w	r0, r4, #8
 8013f4c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013f50:	b004      	add	sp, #16
 8013f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f56:	f001 bd3b 	b.w	80159d0 <uxr_add_output_best_effort_buffer>
 8013f5a:	bf00      	nop

08013f5c <uxr_create_output_reliable_stream>:
 8013f5c:	b530      	push	{r4, r5, lr}
 8013f5e:	b089      	sub	sp, #36	@ 0x24
 8013f60:	4604      	mov	r4, r0
 8013f62:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013f66:	9303      	str	r3, [sp, #12]
 8013f68:	f000 ffdc 	bl	8014f24 <uxr_session_header_offset>
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	9905      	ldr	r1, [sp, #20]
 8013f70:	f104 0008 	add.w	r0, r4, #8
 8013f74:	9500      	str	r5, [sp, #0]
 8013f76:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013f7a:	f001 fd3d 	bl	80159f8 <uxr_add_output_reliable_buffer>
 8013f7e:	2200      	movs	r2, #0
 8013f80:	fa5f fc80 	uxtb.w	ip, r0
 8013f84:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8013f88:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013f8c:	0e03      	lsrs	r3, r0, #24
 8013f8e:	f36c 0207 	bfi	r2, ip, #0, #8
 8013f92:	f364 220f 	bfi	r2, r4, #8, #8
 8013f96:	f361 4217 	bfi	r2, r1, #16, #8
 8013f9a:	f363 621f 	bfi	r2, r3, #24, #8
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	b009      	add	sp, #36	@ 0x24
 8013fa2:	bd30      	pop	{r4, r5, pc}

08013fa4 <uxr_create_input_best_effort_stream>:
 8013fa4:	b082      	sub	sp, #8
 8013fa6:	3008      	adds	r0, #8
 8013fa8:	b002      	add	sp, #8
 8013faa:	f001 bd3f 	b.w	8015a2c <uxr_add_input_best_effort_buffer>
 8013fae:	bf00      	nop

08013fb0 <uxr_create_input_reliable_stream>:
 8013fb0:	b510      	push	{r4, lr}
 8013fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8013fe4 <uxr_create_input_reliable_stream+0x34>)
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	3008      	adds	r0, #8
 8013fb8:	9400      	str	r4, [sp, #0]
 8013fba:	f001 fd4d 	bl	8015a58 <uxr_add_input_reliable_buffer>
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	fa5f fe80 	uxtb.w	lr, r0
 8013fc4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8013fc8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013fcc:	0e03      	lsrs	r3, r0, #24
 8013fce:	f36e 0207 	bfi	r2, lr, #0, #8
 8013fd2:	f36c 220f 	bfi	r2, ip, #8, #8
 8013fd6:	f361 4217 	bfi	r2, r1, #16, #8
 8013fda:	f363 621f 	bfi	r2, r3, #24, #8
 8013fde:	4610      	mov	r0, r2
 8013fe0:	b004      	add	sp, #16
 8013fe2:	bd10      	pop	{r4, pc}
 8013fe4:	08013dbd 	.word	0x08013dbd

08013fe8 <uxr_epoch_nanos>:
 8013fe8:	b510      	push	{r4, lr}
 8013fea:	4604      	mov	r4, r0
 8013fec:	f001 fdf0 	bl	8015bd0 <uxr_nanos>
 8013ff0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013ff4:	1ac0      	subs	r0, r0, r3
 8013ff6:	eb61 0102 	sbc.w	r1, r1, r2
 8013ffa:	bd10      	pop	{r4, pc}

08013ffc <uxr_flash_output_streams>:
 8013ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014000:	7e03      	ldrb	r3, [r0, #24]
 8014002:	b084      	sub	sp, #16
 8014004:	4604      	mov	r4, r0
 8014006:	b1fb      	cbz	r3, 8014048 <uxr_flash_output_streams+0x4c>
 8014008:	f04f 0900 	mov.w	r9, #0
 801400c:	f10d 0802 	add.w	r8, sp, #2
 8014010:	af03      	add	r7, sp, #12
 8014012:	ae02      	add	r6, sp, #8
 8014014:	4648      	mov	r0, r9
 8014016:	2201      	movs	r2, #1
 8014018:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801401c:	4611      	mov	r1, r2
 801401e:	3508      	adds	r5, #8
 8014020:	f001 fc36 	bl	8015890 <uxr_stream_id>
 8014024:	4684      	mov	ip, r0
 8014026:	4643      	mov	r3, r8
 8014028:	463a      	mov	r2, r7
 801402a:	4631      	mov	r1, r6
 801402c:	4628      	mov	r0, r5
 801402e:	f8cd c004 	str.w	ip, [sp, #4]
 8014032:	f007 faef 	bl	801b614 <uxr_prepare_best_effort_buffer_to_send>
 8014036:	2800      	cmp	r0, #0
 8014038:	d13d      	bne.n	80140b6 <uxr_flash_output_streams+0xba>
 801403a:	f109 0901 	add.w	r9, r9, #1
 801403e:	7e23      	ldrb	r3, [r4, #24]
 8014040:	fa5f f089 	uxtb.w	r0, r9
 8014044:	4283      	cmp	r3, r0
 8014046:	d8e6      	bhi.n	8014016 <uxr_flash_output_streams+0x1a>
 8014048:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801404c:	b383      	cbz	r3, 80140b0 <uxr_flash_output_streams+0xb4>
 801404e:	f04f 0900 	mov.w	r9, #0
 8014052:	f10d 0802 	add.w	r8, sp, #2
 8014056:	af03      	add	r7, sp, #12
 8014058:	ae02      	add	r6, sp, #8
 801405a:	4648      	mov	r0, r9
 801405c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014060:	2201      	movs	r2, #1
 8014062:	2102      	movs	r1, #2
 8014064:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014068:	f001 fc12 	bl	8015890 <uxr_stream_id>
 801406c:	9001      	str	r0, [sp, #4]
 801406e:	3520      	adds	r5, #32
 8014070:	e00c      	b.n	801408c <uxr_flash_output_streams+0x90>
 8014072:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014076:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801407a:	9b02      	ldr	r3, [sp, #8]
 801407c:	f000 fefe 	bl	8014e7c <uxr_stamp_session_header>
 8014080:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014082:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014086:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801408a:	47d0      	blx	sl
 801408c:	4643      	mov	r3, r8
 801408e:	463a      	mov	r2, r7
 8014090:	4631      	mov	r1, r6
 8014092:	4628      	mov	r0, r5
 8014094:	f007 fce0 	bl	801ba58 <uxr_prepare_next_reliable_buffer_to_send>
 8014098:	4603      	mov	r3, r0
 801409a:	4620      	mov	r0, r4
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1e8      	bne.n	8014072 <uxr_flash_output_streams+0x76>
 80140a0:	f109 0901 	add.w	r9, r9, #1
 80140a4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80140a8:	fa5f f089 	uxtb.w	r0, r9
 80140ac:	4283      	cmp	r3, r0
 80140ae:	d8d5      	bhi.n	801405c <uxr_flash_output_streams+0x60>
 80140b0:	b004      	add	sp, #16
 80140b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b6:	9b02      	ldr	r3, [sp, #8]
 80140b8:	4620      	mov	r0, r4
 80140ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80140be:	f109 0901 	add.w	r9, r9, #1
 80140c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80140c6:	f000 fed9 	bl	8014e7c <uxr_stamp_session_header>
 80140ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80140cc:	9a03      	ldr	r2, [sp, #12]
 80140ce:	685d      	ldr	r5, [r3, #4]
 80140d0:	6818      	ldr	r0, [r3, #0]
 80140d2:	9902      	ldr	r1, [sp, #8]
 80140d4:	47a8      	blx	r5
 80140d6:	7e23      	ldrb	r3, [r4, #24]
 80140d8:	fa5f f089 	uxtb.w	r0, r9
 80140dc:	4283      	cmp	r3, r0
 80140de:	d89a      	bhi.n	8014016 <uxr_flash_output_streams+0x1a>
 80140e0:	e7b2      	b.n	8014048 <uxr_flash_output_streams+0x4c>
 80140e2:	bf00      	nop

080140e4 <read_submessage_info>:
 80140e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e8:	460d      	mov	r5, r1
 80140ea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80140ee:	4606      	mov	r6, r0
 80140f0:	4669      	mov	r1, sp
 80140f2:	4628      	mov	r0, r5
 80140f4:	f002 fc04 	bl	8016900 <uxr_deserialize_BaseObjectReply>
 80140f8:	4604      	mov	r4, r0
 80140fa:	a902      	add	r1, sp, #8
 80140fc:	4628      	mov	r0, r5
 80140fe:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8014102:	f7fd ff57 	bl	8011fb4 <ucdr_deserialize_bool>
 8014106:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801410a:	4004      	ands	r4, r0
 801410c:	b2e4      	uxtb	r4, r4
 801410e:	b95b      	cbnz	r3, 8014128 <read_submessage_info+0x44>
 8014110:	a987      	add	r1, sp, #540	@ 0x21c
 8014112:	4628      	mov	r0, r5
 8014114:	f7fd ff4e 	bl	8011fb4 <ucdr_deserialize_bool>
 8014118:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801411c:	4680      	mov	r8, r0
 801411e:	b94b      	cbnz	r3, 8014134 <read_submessage_info+0x50>
 8014120:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8014124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014128:	a903      	add	r1, sp, #12
 801412a:	4628      	mov	r0, r5
 801412c:	f002 fa94 	bl	8016658 <uxr_deserialize_ObjectVariant>
 8014130:	4004      	ands	r4, r0
 8014132:	e7ed      	b.n	8014110 <read_submessage_info+0x2c>
 8014134:	a988      	add	r1, sp, #544	@ 0x220
 8014136:	4628      	mov	r0, r5
 8014138:	f7fd ff6a 	bl	8012010 <ucdr_deserialize_uint8_t>
 801413c:	ea14 0f08 	tst.w	r4, r8
 8014140:	d0ee      	beq.n	8014120 <read_submessage_info+0x3c>
 8014142:	2800      	cmp	r0, #0
 8014144:	d0ec      	beq.n	8014120 <read_submessage_info+0x3c>
 8014146:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801414a:	2b0d      	cmp	r3, #13
 801414c:	d1e8      	bne.n	8014120 <read_submessage_info+0x3c>
 801414e:	a98a      	add	r1, sp, #552	@ 0x228
 8014150:	4628      	mov	r0, r5
 8014152:	f7fe fd03 	bl	8012b5c <ucdr_deserialize_int16_t>
 8014156:	b138      	cbz	r0, 8014168 <read_submessage_info+0x84>
 8014158:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801415c:	2b00      	cmp	r3, #0
 801415e:	dd06      	ble.n	801416e <read_submessage_info+0x8a>
 8014160:	2f00      	cmp	r7, #0
 8014162:	bf14      	ite	ne
 8014164:	2001      	movne	r0, #1
 8014166:	2002      	moveq	r0, #2
 8014168:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801416c:	e7d8      	b.n	8014120 <read_submessage_info+0x3c>
 801416e:	2000      	movs	r0, #0
 8014170:	e7fa      	b.n	8014168 <read_submessage_info+0x84>
 8014172:	bf00      	nop

08014174 <read_submessage_list>:
 8014174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014178:	4604      	mov	r4, r0
 801417a:	b097      	sub	sp, #92	@ 0x5c
 801417c:	460d      	mov	r5, r1
 801417e:	4ec1      	ldr	r6, [pc, #772]	@ (8014484 <read_submessage_list+0x310>)
 8014180:	9209      	str	r2, [sp, #36]	@ 0x24
 8014182:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8014186:	aa0c      	add	r2, sp, #48	@ 0x30
 8014188:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801418c:	4628      	mov	r0, r5
 801418e:	f001 fcd7 	bl	8015b40 <uxr_read_submessage_header>
 8014192:	2800      	cmp	r0, #0
 8014194:	f000 8142 	beq.w	801441c <read_submessage_list+0x2a8>
 8014198:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801419c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80141a0:	3b02      	subs	r3, #2
 80141a2:	2b0d      	cmp	r3, #13
 80141a4:	d8ed      	bhi.n	8014182 <read_submessage_list+0xe>
 80141a6:	a101      	add	r1, pc, #4	@ (adr r1, 80141ac <read_submessage_list+0x38>)
 80141a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80141ac:	08014413 	.word	0x08014413
 80141b0:	08014183 	.word	0x08014183
 80141b4:	08014403 	.word	0x08014403
 80141b8:	080143a1 	.word	0x080143a1
 80141bc:	08014397 	.word	0x08014397
 80141c0:	08014183 	.word	0x08014183
 80141c4:	08014183 	.word	0x08014183
 80141c8:	080142ed 	.word	0x080142ed
 80141cc:	0801427f 	.word	0x0801427f
 80141d0:	0801423f 	.word	0x0801423f
 80141d4:	08014183 	.word	0x08014183
 80141d8:	08014183 	.word	0x08014183
 80141dc:	08014183 	.word	0x08014183
 80141e0:	080141e5 	.word	0x080141e5
 80141e4:	a910      	add	r1, sp, #64	@ 0x40
 80141e6:	4628      	mov	r0, r5
 80141e8:	f002 fdc0 	bl	8016d6c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80141ec:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 80141f0:	f1b8 0f00 	cmp.w	r8, #0
 80141f4:	f000 811a 	beq.w	801442c <read_submessage_list+0x2b8>
 80141f8:	f001 fcea 	bl	8015bd0 <uxr_nanos>
 80141fc:	4602      	mov	r2, r0
 80141fe:	460b      	mov	r3, r1
 8014200:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8014204:	2100      	movs	r1, #0
 8014206:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014208:	9006      	str	r0, [sp, #24]
 801420a:	468c      	mov	ip, r1
 801420c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801420e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014212:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014214:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014218:	468c      	mov	ip, r1
 801421a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801421c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014220:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014224:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8014228:	fbc7 0106 	smlal	r0, r1, r7, r6
 801422c:	e9cd 0100 	strd	r0, r1, [sp]
 8014230:	4620      	mov	r0, r4
 8014232:	47c0      	blx	r8
 8014234:	f04f 0301 	mov.w	r3, #1
 8014238:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801423c:	e7a1      	b.n	8014182 <read_submessage_list+0xe>
 801423e:	a910      	add	r1, sp, #64	@ 0x40
 8014240:	4628      	mov	r0, r5
 8014242:	f002 fd71 	bl	8016d28 <uxr_deserialize_HEARTBEAT_Payload>
 8014246:	2100      	movs	r1, #0
 8014248:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801424c:	f001 fb4e 	bl	80158ec <uxr_stream_id_from_raw>
 8014250:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014254:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014256:	f104 0008 	add.w	r0, r4, #8
 801425a:	4641      	mov	r1, r8
 801425c:	f001 fc34 	bl	8015ac8 <uxr_get_input_reliable_stream>
 8014260:	2800      	cmp	r0, #0
 8014262:	d08e      	beq.n	8014182 <read_submessage_list+0xe>
 8014264:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8014268:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801426c:	f007 f93c 	bl	801b4e8 <uxr_process_heartbeat>
 8014270:	4642      	mov	r2, r8
 8014272:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8014276:	4620      	mov	r0, r4
 8014278:	f7ff fdf8 	bl	8013e6c <write_submessage_acknack.isra.0>
 801427c:	e781      	b.n	8014182 <read_submessage_list+0xe>
 801427e:	a910      	add	r1, sp, #64	@ 0x40
 8014280:	4628      	mov	r0, r5
 8014282:	f002 fd29 	bl	8016cd8 <uxr_deserialize_ACKNACK_Payload>
 8014286:	2100      	movs	r1, #0
 8014288:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801428c:	f001 fb2e 	bl	80158ec <uxr_stream_id_from_raw>
 8014290:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8014294:	900d      	str	r0, [sp, #52]	@ 0x34
 8014296:	f104 0008 	add.w	r0, r4, #8
 801429a:	f001 fbff 	bl	8015a9c <uxr_get_output_reliable_stream>
 801429e:	4680      	mov	r8, r0
 80142a0:	2800      	cmp	r0, #0
 80142a2:	f43f af6e 	beq.w	8014182 <read_submessage_list+0xe>
 80142a6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80142aa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80142ae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80142b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80142b6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80142ba:	b289      	uxth	r1, r1
 80142bc:	f007 fc74 	bl	801bba8 <uxr_process_acknack>
 80142c0:	4640      	mov	r0, r8
 80142c2:	f007 fc35 	bl	801bb30 <uxr_begin_output_nack_buffer_it>
 80142c6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80142ca:	e005      	b.n	80142d8 <read_submessage_list+0x164>
 80142cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80142ce:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80142d2:	e9d3 0900 	ldrd	r0, r9, [r3]
 80142d6:	47c8      	blx	r9
 80142d8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80142dc:	aa0f      	add	r2, sp, #60	@ 0x3c
 80142de:	4651      	mov	r1, sl
 80142e0:	4640      	mov	r0, r8
 80142e2:	f007 fc27 	bl	801bb34 <uxr_next_reliable_nack_buffer_to_send>
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d1f0      	bne.n	80142cc <read_submessage_list+0x158>
 80142ea:	e74a      	b.n	8014182 <read_submessage_list+0xe>
 80142ec:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80142f0:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80142f4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 80142f8:	4628      	mov	r0, r5
 80142fa:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80142fe:	4651      	mov	r1, sl
 8014300:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8014304:	f1a8 0804 	sub.w	r8, r8, #4
 8014308:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801430c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8014310:	fa1f f888 	uxth.w	r8, r8
 8014314:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014318:	f009 090e 	and.w	r9, r9, #14
 801431c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8014320:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8014324:	f002 fa3a 	bl	801679c <uxr_deserialize_BaseObjectRequest>
 8014328:	4650      	mov	r0, sl
 801432a:	a90f      	add	r1, sp, #60	@ 0x3c
 801432c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8014330:	f000 fe20 	bl	8014f74 <uxr_parse_base_object_request>
 8014334:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014336:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801433a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801433e:	9110      	str	r1, [sp, #64]	@ 0x40
 8014340:	f1bb 0f00 	cmp.w	fp, #0
 8014344:	d006      	beq.n	8014354 <read_submessage_list+0x1e0>
 8014346:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801434a:	4652      	mov	r2, sl
 801434c:	4620      	mov	r0, r4
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	2300      	movs	r3, #0
 8014352:	47d8      	blx	fp
 8014354:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8014356:	b182      	cbz	r2, 801437a <read_submessage_list+0x206>
 8014358:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801435a:	f04f 0c00 	mov.w	ip, #0
 801435e:	3902      	subs	r1, #2
 8014360:	e003      	b.n	801436a <read_submessage_list+0x1f6>
 8014362:	f10c 0c01 	add.w	ip, ip, #1
 8014366:	4594      	cmp	ip, r2
 8014368:	d007      	beq.n	801437a <read_submessage_list+0x206>
 801436a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801436e:	4553      	cmp	r3, sl
 8014370:	d1f7      	bne.n	8014362 <read_submessage_list+0x1ee>
 8014372:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8014374:	2200      	movs	r2, #0
 8014376:	f803 200c 	strb.w	r2, [r3, ip]
 801437a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801437e:	464b      	mov	r3, r9
 8014380:	4642      	mov	r2, r8
 8014382:	4620      	mov	r0, r4
 8014384:	9102      	str	r1, [sp, #8]
 8014386:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014388:	9101      	str	r1, [sp, #4]
 801438a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801438c:	9100      	str	r1, [sp, #0]
 801438e:	4629      	mov	r1, r5
 8014390:	f7ff fc4a 	bl	8013c28 <read_submessage_format>
 8014394:	e6f5      	b.n	8014182 <read_submessage_list+0xe>
 8014396:	4629      	mov	r1, r5
 8014398:	4620      	mov	r0, r4
 801439a:	f7ff fea3 	bl	80140e4 <read_submessage_info>
 801439e:	e6f0      	b.n	8014182 <read_submessage_list+0xe>
 80143a0:	2a00      	cmp	r2, #0
 80143a2:	d03e      	beq.n	8014422 <read_submessage_list+0x2ae>
 80143a4:	a910      	add	r1, sp, #64	@ 0x40
 80143a6:	4628      	mov	r0, r5
 80143a8:	f002 fbee 	bl	8016b88 <uxr_deserialize_STATUS_Payload>
 80143ac:	a90e      	add	r1, sp, #56	@ 0x38
 80143ae:	aa0d      	add	r2, sp, #52	@ 0x34
 80143b0:	a810      	add	r0, sp, #64	@ 0x40
 80143b2:	f000 fddf 	bl	8014f74 <uxr_parse_base_object_request>
 80143b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80143b8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80143bc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80143c0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80143c4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80143c6:	f1ba 0f00 	cmp.w	sl, #0
 80143ca:	d006      	beq.n	80143da <read_submessage_list+0x266>
 80143cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80143d0:	4642      	mov	r2, r8
 80143d2:	4620      	mov	r0, r4
 80143d4:	9300      	str	r3, [sp, #0]
 80143d6:	464b      	mov	r3, r9
 80143d8:	47d0      	blx	sl
 80143da:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80143dc:	2a00      	cmp	r2, #0
 80143de:	f43f aed0 	beq.w	8014182 <read_submessage_list+0xe>
 80143e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80143e4:	2100      	movs	r1, #0
 80143e6:	3802      	subs	r0, #2
 80143e8:	e003      	b.n	80143f2 <read_submessage_list+0x27e>
 80143ea:	3101      	adds	r1, #1
 80143ec:	4291      	cmp	r1, r2
 80143ee:	f43f aec8 	beq.w	8014182 <read_submessage_list+0xe>
 80143f2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80143f6:	4543      	cmp	r3, r8
 80143f8:	d1f7      	bne.n	80143ea <read_submessage_list+0x276>
 80143fa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80143fc:	f803 9001 	strb.w	r9, [r3, r1]
 8014400:	e6bf      	b.n	8014182 <read_submessage_list+0xe>
 8014402:	2a00      	cmp	r2, #0
 8014404:	f47f aebd 	bne.w	8014182 <read_submessage_list+0xe>
 8014408:	4629      	mov	r1, r5
 801440a:	4620      	mov	r0, r4
 801440c:	f000 fcf6 	bl	8014dfc <uxr_read_create_session_status>
 8014410:	e6b7      	b.n	8014182 <read_submessage_list+0xe>
 8014412:	4629      	mov	r1, r5
 8014414:	4620      	mov	r0, r4
 8014416:	f7ff fcf3 	bl	8013e00 <read_submessage_get_info>
 801441a:	e6b2      	b.n	8014182 <read_submessage_list+0xe>
 801441c:	b017      	add	sp, #92	@ 0x5c
 801441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014422:	4629      	mov	r1, r5
 8014424:	4620      	mov	r0, r4
 8014426:	f000 fcf7 	bl	8014e18 <uxr_read_delete_session_status>
 801442a:	e6aa      	b.n	8014182 <read_submessage_list+0xe>
 801442c:	f001 fbd0 	bl	8015bd0 <uxr_nanos>
 8014430:	4642      	mov	r2, r8
 8014432:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014434:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014436:	fbc7 3206 	smlal	r3, r2, r7, r6
 801443a:	1818      	adds	r0, r3, r0
 801443c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801443e:	eb42 0101 	adc.w	r1, r2, r1
 8014442:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014444:	4642      	mov	r2, r8
 8014446:	fbc7 3206 	smlal	r3, r2, r7, r6
 801444a:	469c      	mov	ip, r3
 801444c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8014450:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014454:	4643      	mov	r3, r8
 8014456:	eb1c 0c07 	adds.w	ip, ip, r7
 801445a:	eb42 0203 	adc.w	r2, r2, r3
 801445e:	ebb0 030c 	subs.w	r3, r0, ip
 8014462:	eb61 0202 	sbc.w	r2, r1, r2
 8014466:	2a00      	cmp	r2, #0
 8014468:	db08      	blt.n	801447c <read_submessage_list+0x308>
 801446a:	085b      	lsrs	r3, r3, #1
 801446c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014470:	1052      	asrs	r2, r2, #1
 8014472:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8014476:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801447a:	e6db      	b.n	8014234 <read_submessage_list+0xc0>
 801447c:	3301      	adds	r3, #1
 801447e:	f142 0200 	adc.w	r2, r2, #0
 8014482:	e7f2      	b.n	801446a <read_submessage_list+0x2f6>
 8014484:	3b9aca00 	.word	0x3b9aca00

08014488 <listen_message_reliably>:
 8014488:	1e0b      	subs	r3, r1, #0
 801448a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448e:	bfb8      	it	lt
 8014490:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8014494:	b09d      	sub	sp, #116	@ 0x74
 8014496:	4680      	mov	r8, r0
 8014498:	9305      	str	r3, [sp, #20]
 801449a:	f001 fb7d 	bl	8015b98 <uxr_millis>
 801449e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80144a2:	4681      	mov	r9, r0
 80144a4:	2a00      	cmp	r2, #0
 80144a6:	f000 809a 	beq.w	80145de <listen_message_reliably+0x156>
 80144aa:	2600      	movs	r6, #0
 80144ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80144b4:	460f      	mov	r7, r1
 80144b6:	4630      	mov	r0, r6
 80144b8:	9303      	str	r3, [sp, #12]
 80144ba:	e00e      	b.n	80144da <listen_message_reliably+0x52>
 80144bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80144be:	3601      	adds	r6, #1
 80144c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80144c2:	455a      	cmp	r2, fp
 80144c4:	9903      	ldr	r1, [sp, #12]
 80144c6:	b2f0      	uxtb	r0, r6
 80144c8:	eb73 0101 	sbcs.w	r1, r3, r1
 80144cc:	da01      	bge.n	80144d2 <listen_message_reliably+0x4a>
 80144ce:	4693      	mov	fp, r2
 80144d0:	9303      	str	r3, [sp, #12]
 80144d2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80144d6:	4283      	cmp	r3, r0
 80144d8:	d95f      	bls.n	801459a <listen_message_reliably+0x112>
 80144da:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80144de:	2102      	movs	r1, #2
 80144e0:	2201      	movs	r2, #1
 80144e2:	00e4      	lsls	r4, r4, #3
 80144e4:	f001 f9d4 	bl	8015890 <uxr_stream_id>
 80144e8:	4601      	mov	r1, r0
 80144ea:	f104 0520 	add.w	r5, r4, #32
 80144ee:	463b      	mov	r3, r7
 80144f0:	464a      	mov	r2, r9
 80144f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80144f4:	4445      	add	r5, r8
 80144f6:	4628      	mov	r0, r5
 80144f8:	f007 faee 	bl	801bad8 <uxr_update_output_stream_heartbeat_timestamp>
 80144fc:	eb08 0304 	add.w	r3, r8, r4
 8014500:	2800      	cmp	r0, #0
 8014502:	d0db      	beq.n	80144bc <listen_message_reliably+0x34>
 8014504:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8014508:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801450c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014510:	4640      	mov	r0, r8
 8014512:	3501      	adds	r5, #1
 8014514:	4444      	add	r4, r8
 8014516:	9304      	str	r3, [sp, #16]
 8014518:	f000 fd04 	bl	8014f24 <uxr_session_header_offset>
 801451c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014520:	2300      	movs	r3, #0
 8014522:	2211      	movs	r2, #17
 8014524:	a90c      	add	r1, sp, #48	@ 0x30
 8014526:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801452a:	9000      	str	r0, [sp, #0]
 801452c:	4650      	mov	r0, sl
 801452e:	3601      	adds	r6, #1
 8014530:	f7ff f828 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8014534:	2300      	movs	r3, #0
 8014536:	2205      	movs	r2, #5
 8014538:	210b      	movs	r1, #11
 801453a:	4650      	mov	r0, sl
 801453c:	f001 fae6 	bl	8015b0c <uxr_buffer_submessage_header>
 8014540:	2101      	movs	r1, #1
 8014542:	8968      	ldrh	r0, [r5, #10]
 8014544:	f007 fb8c 	bl	801bc60 <uxr_seq_num_add>
 8014548:	892b      	ldrh	r3, [r5, #8]
 801454a:	4602      	mov	r2, r0
 801454c:	a90a      	add	r1, sp, #40	@ 0x28
 801454e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014552:	4650      	mov	r0, sl
 8014554:	9b04      	ldr	r3, [sp, #16]
 8014556:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801455a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801455e:	f002 fbcf 	bl	8016d00 <uxr_serialize_HEARTBEAT_Payload>
 8014562:	2200      	movs	r2, #0
 8014564:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014566:	4640      	mov	r0, r8
 8014568:	4611      	mov	r1, r2
 801456a:	f000 fc87 	bl	8014e7c <uxr_stamp_session_header>
 801456e:	4650      	mov	r0, sl
 8014570:	f7ff f848 	bl	8013604 <ucdr_buffer_length>
 8014574:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8014578:	4602      	mov	r2, r0
 801457a:	a90c      	add	r1, sp, #48	@ 0x30
 801457c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014580:	47a8      	blx	r5
 8014582:	9903      	ldr	r1, [sp, #12]
 8014584:	b2f0      	uxtb	r0, r6
 8014586:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801458a:	455a      	cmp	r2, fp
 801458c:	eb73 0101 	sbcs.w	r1, r3, r1
 8014590:	db9d      	blt.n	80144ce <listen_message_reliably+0x46>
 8014592:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8014596:	4283      	cmp	r3, r0
 8014598:	d89f      	bhi.n	80144da <listen_message_reliably+0x52>
 801459a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801459e:	9a03      	ldr	r2, [sp, #12]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	bf08      	it	eq
 80145a4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80145a8:	d019      	beq.n	80145de <listen_message_reliably+0x156>
 80145aa:	ebab 0309 	sub.w	r3, fp, r9
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	9d05      	ldr	r5, [sp, #20]
 80145b2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80145b6:	aa08      	add	r2, sp, #32
 80145b8:	bf08      	it	eq
 80145ba:	2301      	moveq	r3, #1
 80145bc:	a907      	add	r1, sp, #28
 80145be:	6884      	ldr	r4, [r0, #8]
 80145c0:	429d      	cmp	r5, r3
 80145c2:	6800      	ldr	r0, [r0, #0]
 80145c4:	bfa8      	it	ge
 80145c6:	461d      	movge	r5, r3
 80145c8:	462b      	mov	r3, r5
 80145ca:	47a0      	blx	r4
 80145cc:	b948      	cbnz	r0, 80145e2 <listen_message_reliably+0x15a>
 80145ce:	9b05      	ldr	r3, [sp, #20]
 80145d0:	1b5b      	subs	r3, r3, r5
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	9305      	str	r3, [sp, #20]
 80145d6:	f73f af60 	bgt.w	801449a <listen_message_reliably+0x12>
 80145da:	4604      	mov	r4, r0
 80145dc:	e012      	b.n	8014604 <listen_message_reliably+0x17c>
 80145de:	9b05      	ldr	r3, [sp, #20]
 80145e0:	e7e5      	b.n	80145ae <listen_message_reliably+0x126>
 80145e2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80145e6:	4604      	mov	r4, r0
 80145e8:	2500      	movs	r5, #0
 80145ea:	a80c      	add	r0, sp, #48	@ 0x30
 80145ec:	f7fe ffdc 	bl	80135a8 <ucdr_init_buffer>
 80145f0:	f10d 031a 	add.w	r3, sp, #26
 80145f4:	aa06      	add	r2, sp, #24
 80145f6:	a90c      	add	r1, sp, #48	@ 0x30
 80145f8:	4640      	mov	r0, r8
 80145fa:	f88d 5018 	strb.w	r5, [sp, #24]
 80145fe:	f000 fc51 	bl	8014ea4 <uxr_read_session_header>
 8014602:	b918      	cbnz	r0, 801460c <listen_message_reliably+0x184>
 8014604:	4620      	mov	r0, r4
 8014606:	b01d      	add	sp, #116	@ 0x74
 8014608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801460c:	4629      	mov	r1, r5
 801460e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014612:	f001 f96b 	bl	80158ec <uxr_stream_id_from_raw>
 8014616:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801461a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801461e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014622:	2e01      	cmp	r6, #1
 8014624:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014628:	d04b      	beq.n	80146c2 <listen_message_reliably+0x23a>
 801462a:	2e02      	cmp	r6, #2
 801462c:	d00f      	beq.n	801464e <listen_message_reliably+0x1c6>
 801462e:	2e00      	cmp	r6, #0
 8014630:	d1e8      	bne.n	8014604 <listen_message_reliably+0x17c>
 8014632:	4631      	mov	r1, r6
 8014634:	4630      	mov	r0, r6
 8014636:	f001 f959 	bl	80158ec <uxr_stream_id_from_raw>
 801463a:	4602      	mov	r2, r0
 801463c:	a90c      	add	r1, sp, #48	@ 0x30
 801463e:	4640      	mov	r0, r8
 8014640:	920a      	str	r2, [sp, #40]	@ 0x28
 8014642:	f7ff fd97 	bl	8014174 <read_submessage_list>
 8014646:	4620      	mov	r0, r4
 8014648:	b01d      	add	sp, #116	@ 0x74
 801464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801464e:	4629      	mov	r1, r5
 8014650:	f108 0008 	add.w	r0, r8, #8
 8014654:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8014658:	f001 fa36 	bl	8015ac8 <uxr_get_input_reliable_stream>
 801465c:	4607      	mov	r7, r0
 801465e:	b338      	cbz	r0, 80146b0 <listen_message_reliably+0x228>
 8014660:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014662:	a80c      	add	r0, sp, #48	@ 0x30
 8014664:	9203      	str	r2, [sp, #12]
 8014666:	f7fe ffd1 	bl	801360c <ucdr_buffer_remaining>
 801466a:	4603      	mov	r3, r0
 801466c:	f10d 0019 	add.w	r0, sp, #25
 8014670:	9a03      	ldr	r2, [sp, #12]
 8014672:	4651      	mov	r1, sl
 8014674:	9000      	str	r0, [sp, #0]
 8014676:	4638      	mov	r0, r7
 8014678:	f006 fe3a 	bl	801b2f0 <uxr_receive_reliable_message>
 801467c:	b1c0      	cbz	r0, 80146b0 <listen_message_reliably+0x228>
 801467e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014682:	b393      	cbz	r3, 80146ea <listen_message_reliably+0x262>
 8014684:	ae14      	add	r6, sp, #80	@ 0x50
 8014686:	f04f 0a02 	mov.w	sl, #2
 801468a:	e00a      	b.n	80146a2 <listen_message_reliably+0x21a>
 801468c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8014690:	4631      	mov	r1, r6
 8014692:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8014696:	4640      	mov	r0, r8
 8014698:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801469c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801469e:	f7ff fd69 	bl	8014174 <read_submessage_list>
 80146a2:	2204      	movs	r2, #4
 80146a4:	4631      	mov	r1, r6
 80146a6:	4638      	mov	r0, r7
 80146a8:	f006 fea4 	bl	801b3f4 <uxr_next_input_reliable_buffer_available>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	d1ed      	bne.n	801468c <listen_message_reliably+0x204>
 80146b0:	4640      	mov	r0, r8
 80146b2:	462a      	mov	r2, r5
 80146b4:	4649      	mov	r1, r9
 80146b6:	f7ff fbd9 	bl	8013e6c <write_submessage_acknack.isra.0>
 80146ba:	4620      	mov	r0, r4
 80146bc:	b01d      	add	sp, #116	@ 0x74
 80146be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146c2:	4629      	mov	r1, r5
 80146c4:	f108 0008 	add.w	r0, r8, #8
 80146c8:	f001 f9f4 	bl	8015ab4 <uxr_get_input_best_effort_stream>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d099      	beq.n	8014604 <listen_message_reliably+0x17c>
 80146d0:	4651      	mov	r1, sl
 80146d2:	f006 fd83 	bl	801b1dc <uxr_receive_best_effort_message>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d094      	beq.n	8014604 <listen_message_reliably+0x17c>
 80146da:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80146de:	a90c      	add	r1, sp, #48	@ 0x30
 80146e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80146e2:	4640      	mov	r0, r8
 80146e4:	f7ff fd46 	bl	8014174 <read_submessage_list>
 80146e8:	e78c      	b.n	8014604 <listen_message_reliably+0x17c>
 80146ea:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80146ee:	a90c      	add	r1, sp, #48	@ 0x30
 80146f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80146f2:	4640      	mov	r0, r8
 80146f4:	f7ff fd3e 	bl	8014174 <read_submessage_list>
 80146f8:	e7c4      	b.n	8014684 <listen_message_reliably+0x1fc>
 80146fa:	bf00      	nop

080146fc <uxr_run_session_timeout>:
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	4604      	mov	r4, r0
 8014700:	460d      	mov	r5, r1
 8014702:	f001 fa49 	bl	8015b98 <uxr_millis>
 8014706:	4606      	mov	r6, r0
 8014708:	4620      	mov	r0, r4
 801470a:	f7ff fc77 	bl	8013ffc <uxr_flash_output_streams>
 801470e:	4629      	mov	r1, r5
 8014710:	4620      	mov	r0, r4
 8014712:	f7ff feb9 	bl	8014488 <listen_message_reliably>
 8014716:	f001 fa3f 	bl	8015b98 <uxr_millis>
 801471a:	1b83      	subs	r3, r0, r6
 801471c:	1ae9      	subs	r1, r5, r3
 801471e:	2900      	cmp	r1, #0
 8014720:	dcf6      	bgt.n	8014710 <uxr_run_session_timeout+0x14>
 8014722:	f104 0008 	add.w	r0, r4, #8
 8014726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801472a:	f001 b9d9 	b.w	8015ae0 <uxr_output_streams_confirmed>
 801472e:	bf00      	nop

08014730 <uxr_run_session_until_data>:
 8014730:	b570      	push	{r4, r5, r6, lr}
 8014732:	4604      	mov	r4, r0
 8014734:	460d      	mov	r5, r1
 8014736:	f001 fa2f 	bl	8015b98 <uxr_millis>
 801473a:	4606      	mov	r6, r0
 801473c:	4620      	mov	r0, r4
 801473e:	f7ff fc5d 	bl	8013ffc <uxr_flash_output_streams>
 8014742:	2300      	movs	r3, #0
 8014744:	4629      	mov	r1, r5
 8014746:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801474a:	e005      	b.n	8014758 <uxr_run_session_until_data+0x28>
 801474c:	f001 fa24 	bl	8015b98 <uxr_millis>
 8014750:	1b83      	subs	r3, r0, r6
 8014752:	1ae9      	subs	r1, r5, r3
 8014754:	2900      	cmp	r1, #0
 8014756:	dd07      	ble.n	8014768 <uxr_run_session_until_data+0x38>
 8014758:	4620      	mov	r0, r4
 801475a:	f7ff fe95 	bl	8014488 <listen_message_reliably>
 801475e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8014762:	2800      	cmp	r0, #0
 8014764:	d0f2      	beq.n	801474c <uxr_run_session_until_data+0x1c>
 8014766:	bd70      	pop	{r4, r5, r6, pc}
 8014768:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801476c:	bd70      	pop	{r4, r5, r6, pc}
 801476e:	bf00      	nop

08014770 <uxr_run_session_until_confirm_delivery>:
 8014770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014774:	4606      	mov	r6, r0
 8014776:	460d      	mov	r5, r1
 8014778:	f001 fa0e 	bl	8015b98 <uxr_millis>
 801477c:	4607      	mov	r7, r0
 801477e:	4630      	mov	r0, r6
 8014780:	f106 0808 	add.w	r8, r6, #8
 8014784:	f7ff fc3a 	bl	8013ffc <uxr_flash_output_streams>
 8014788:	2d00      	cmp	r5, #0
 801478a:	db10      	blt.n	80147ae <uxr_run_session_until_confirm_delivery+0x3e>
 801478c:	462c      	mov	r4, r5
 801478e:	e006      	b.n	801479e <uxr_run_session_until_confirm_delivery+0x2e>
 8014790:	f7ff fe7a 	bl	8014488 <listen_message_reliably>
 8014794:	f001 fa00 	bl	8015b98 <uxr_millis>
 8014798:	1bc3      	subs	r3, r0, r7
 801479a:	1aec      	subs	r4, r5, r3
 801479c:	d407      	bmi.n	80147ae <uxr_run_session_until_confirm_delivery+0x3e>
 801479e:	4640      	mov	r0, r8
 80147a0:	f001 f99e 	bl	8015ae0 <uxr_output_streams_confirmed>
 80147a4:	4603      	mov	r3, r0
 80147a6:	4621      	mov	r1, r4
 80147a8:	4630      	mov	r0, r6
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d0f0      	beq.n	8014790 <uxr_run_session_until_confirm_delivery+0x20>
 80147ae:	4640      	mov	r0, r8
 80147b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147b4:	f001 b994 	b.w	8015ae0 <uxr_output_streams_confirmed>

080147b8 <uxr_run_session_until_all_status>:
 80147b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80147c0:	4606      	mov	r6, r0
 80147c2:	4688      	mov	r8, r1
 80147c4:	4692      	mov	sl, r2
 80147c6:	461f      	mov	r7, r3
 80147c8:	f7ff fc18 	bl	8013ffc <uxr_flash_output_streams>
 80147cc:	f1bb 0f00 	cmp.w	fp, #0
 80147d0:	d004      	beq.n	80147dc <uxr_run_session_until_all_status+0x24>
 80147d2:	465a      	mov	r2, fp
 80147d4:	21ff      	movs	r1, #255	@ 0xff
 80147d6:	4638      	mov	r0, r7
 80147d8:	f008 fb4e 	bl	801ce78 <memset>
 80147dc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80147e0:	1e7d      	subs	r5, r7, #1
 80147e2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80147e6:	f001 f9d7 	bl	8015b98 <uxr_millis>
 80147ea:	4641      	mov	r1, r8
 80147ec:	4681      	mov	r9, r0
 80147ee:	4630      	mov	r0, r6
 80147f0:	f7ff fe4a 	bl	8014488 <listen_message_reliably>
 80147f4:	f001 f9d0 	bl	8015b98 <uxr_millis>
 80147f8:	eba0 0009 	sub.w	r0, r0, r9
 80147fc:	eba8 0100 	sub.w	r1, r8, r0
 8014800:	f1bb 0f00 	cmp.w	fp, #0
 8014804:	d029      	beq.n	801485a <uxr_run_session_until_all_status+0xa2>
 8014806:	46ae      	mov	lr, r5
 8014808:	f04f 0c00 	mov.w	ip, #0
 801480c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8014810:	2cff      	cmp	r4, #255	@ 0xff
 8014812:	d015      	beq.n	8014840 <uxr_run_session_until_all_status+0x88>
 8014814:	f10c 0c01 	add.w	ip, ip, #1
 8014818:	45e3      	cmp	fp, ip
 801481a:	d8f7      	bhi.n	801480c <uxr_run_session_until_all_status+0x54>
 801481c:	2300      	movs	r3, #0
 801481e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014820:	e000      	b.n	8014824 <uxr_run_session_until_all_status+0x6c>
 8014822:	b158      	cbz	r0, 801483c <uxr_run_session_until_all_status+0x84>
 8014824:	462b      	mov	r3, r5
 8014826:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801482a:	3302      	adds	r3, #2
 801482c:	2801      	cmp	r0, #1
 801482e:	eba3 0307 	sub.w	r3, r3, r7
 8014832:	bf8c      	ite	hi
 8014834:	2000      	movhi	r0, #0
 8014836:	2001      	movls	r0, #1
 8014838:	459b      	cmp	fp, r3
 801483a:	d8f2      	bhi.n	8014822 <uxr_run_session_until_all_status+0x6a>
 801483c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014840:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8014844:	f10c 0c01 	add.w	ip, ip, #1
 8014848:	45dc      	cmp	ip, fp
 801484a:	d201      	bcs.n	8014850 <uxr_run_session_until_all_status+0x98>
 801484c:	2b00      	cmp	r3, #0
 801484e:	d0dd      	beq.n	801480c <uxr_run_session_until_all_status+0x54>
 8014850:	2900      	cmp	r1, #0
 8014852:	dde3      	ble.n	801481c <uxr_run_session_until_all_status+0x64>
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1ca      	bne.n	80147ee <uxr_run_session_until_all_status+0x36>
 8014858:	e7e0      	b.n	801481c <uxr_run_session_until_all_status+0x64>
 801485a:	2001      	movs	r0, #1
 801485c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8014860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014864:	0000      	movs	r0, r0
	...

08014868 <uxr_sync_session>:
 8014868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801486a:	b093      	sub	sp, #76	@ 0x4c
 801486c:	4604      	mov	r4, r0
 801486e:	460d      	mov	r5, r1
 8014870:	f000 fb58 	bl	8014f24 <uxr_session_header_offset>
 8014874:	2214      	movs	r2, #20
 8014876:	2300      	movs	r3, #0
 8014878:	9000      	str	r0, [sp, #0]
 801487a:	a80a      	add	r0, sp, #40	@ 0x28
 801487c:	eb0d 0102 	add.w	r1, sp, r2
 8014880:	f7fe fe80 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8014884:	2300      	movs	r3, #0
 8014886:	2208      	movs	r2, #8
 8014888:	210e      	movs	r1, #14
 801488a:	a80a      	add	r0, sp, #40	@ 0x28
 801488c:	f001 f93e 	bl	8015b0c <uxr_buffer_submessage_header>
 8014890:	f001 f99e 	bl	8015bd0 <uxr_nanos>
 8014894:	460e      	mov	r6, r1
 8014896:	4607      	mov	r7, r0
 8014898:	a31b      	add	r3, pc, #108	@ (adr r3, 8014908 <uxr_sync_session+0xa0>)
 801489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489e:	f7eb fd87 	bl	80003b0 <__aeabi_ldivmod>
 80148a2:	4631      	mov	r1, r6
 80148a4:	9003      	str	r0, [sp, #12]
 80148a6:	4638      	mov	r0, r7
 80148a8:	a317      	add	r3, pc, #92	@ (adr r3, 8014908 <uxr_sync_session+0xa0>)
 80148aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ae:	f7eb fd7f 	bl	80003b0 <__aeabi_ldivmod>
 80148b2:	a903      	add	r1, sp, #12
 80148b4:	a80a      	add	r0, sp, #40	@ 0x28
 80148b6:	9204      	str	r2, [sp, #16]
 80148b8:	f002 fa4a 	bl	8016d50 <uxr_serialize_TIMESTAMP_Payload>
 80148bc:	2200      	movs	r2, #0
 80148be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148c0:	4620      	mov	r0, r4
 80148c2:	4611      	mov	r1, r2
 80148c4:	f000 fada 	bl	8014e7c <uxr_stamp_session_header>
 80148c8:	a80a      	add	r0, sp, #40	@ 0x28
 80148ca:	f7fe fe9b 	bl	8013604 <ucdr_buffer_length>
 80148ce:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80148d0:	4602      	mov	r2, r0
 80148d2:	a905      	add	r1, sp, #20
 80148d4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80148d8:	47b0      	blx	r6
 80148da:	f001 f95d 	bl	8015b98 <uxr_millis>
 80148de:	2300      	movs	r3, #0
 80148e0:	4606      	mov	r6, r0
 80148e2:	4629      	mov	r1, r5
 80148e4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80148e8:	e000      	b.n	80148ec <uxr_sync_session+0x84>
 80148ea:	b950      	cbnz	r0, 8014902 <uxr_sync_session+0x9a>
 80148ec:	4620      	mov	r0, r4
 80148ee:	f7ff fdcb 	bl	8014488 <listen_message_reliably>
 80148f2:	f001 f951 	bl	8015b98 <uxr_millis>
 80148f6:	1b83      	subs	r3, r0, r6
 80148f8:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80148fc:	1ae9      	subs	r1, r5, r3
 80148fe:	2900      	cmp	r1, #0
 8014900:	dcf3      	bgt.n	80148ea <uxr_sync_session+0x82>
 8014902:	b013      	add	sp, #76	@ 0x4c
 8014904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014906:	bf00      	nop
 8014908:	3b9aca00 	.word	0x3b9aca00
 801490c:	00000000 	.word	0x00000000

08014910 <wait_session_status>:
 8014910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014914:	4604      	mov	r4, r0
 8014916:	b09d      	sub	sp, #116	@ 0x74
 8014918:	20ff      	movs	r0, #255	@ 0xff
 801491a:	9303      	str	r3, [sp, #12]
 801491c:	7160      	strb	r0, [r4, #5]
 801491e:	2b00      	cmp	r3, #0
 8014920:	f000 80b6 	beq.w	8014a90 <wait_session_status+0x180>
 8014924:	4689      	mov	r9, r1
 8014926:	4692      	mov	sl, r2
 8014928:	f04f 0b00 	mov.w	fp, #0
 801492c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801492e:	4652      	mov	r2, sl
 8014930:	4649      	mov	r1, r9
 8014932:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014936:	47a8      	blx	r5
 8014938:	f001 f92e 	bl	8015b98 <uxr_millis>
 801493c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014940:	4605      	mov	r5, r0
 8014942:	e009      	b.n	8014958 <wait_session_status+0x48>
 8014944:	f001 f928 	bl	8015b98 <uxr_millis>
 8014948:	1b40      	subs	r0, r0, r5
 801494a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801494e:	2b00      	cmp	r3, #0
 8014950:	dd40      	ble.n	80149d4 <wait_session_status+0xc4>
 8014952:	7960      	ldrb	r0, [r4, #5]
 8014954:	28ff      	cmp	r0, #255	@ 0xff
 8014956:	d145      	bne.n	80149e4 <wait_session_status+0xd4>
 8014958:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801495a:	a908      	add	r1, sp, #32
 801495c:	6896      	ldr	r6, [r2, #8]
 801495e:	6810      	ldr	r0, [r2, #0]
 8014960:	aa09      	add	r2, sp, #36	@ 0x24
 8014962:	47b0      	blx	r6
 8014964:	2800      	cmp	r0, #0
 8014966:	d0ed      	beq.n	8014944 <wait_session_status+0x34>
 8014968:	a80c      	add	r0, sp, #48	@ 0x30
 801496a:	2600      	movs	r6, #0
 801496c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014970:	f7fe fe1a 	bl	80135a8 <ucdr_init_buffer>
 8014974:	f10d 031e 	add.w	r3, sp, #30
 8014978:	aa07      	add	r2, sp, #28
 801497a:	a90c      	add	r1, sp, #48	@ 0x30
 801497c:	4620      	mov	r0, r4
 801497e:	f88d 601c 	strb.w	r6, [sp, #28]
 8014982:	f000 fa8f 	bl	8014ea4 <uxr_read_session_header>
 8014986:	2800      	cmp	r0, #0
 8014988:	d0dc      	beq.n	8014944 <wait_session_status+0x34>
 801498a:	4631      	mov	r1, r6
 801498c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014990:	f000 ffac 	bl	80158ec <uxr_stream_id_from_raw>
 8014994:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014998:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801499c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80149a0:	2f01      	cmp	r7, #1
 80149a2:	9302      	str	r3, [sp, #8]
 80149a4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80149a8:	d05c      	beq.n	8014a64 <wait_session_status+0x154>
 80149aa:	2f02      	cmp	r7, #2
 80149ac:	d020      	beq.n	80149f0 <wait_session_status+0xe0>
 80149ae:	2f00      	cmp	r7, #0
 80149b0:	d1c8      	bne.n	8014944 <wait_session_status+0x34>
 80149b2:	4639      	mov	r1, r7
 80149b4:	4638      	mov	r0, r7
 80149b6:	f000 ff99 	bl	80158ec <uxr_stream_id_from_raw>
 80149ba:	a90c      	add	r1, sp, #48	@ 0x30
 80149bc:	4602      	mov	r2, r0
 80149be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80149c0:	4620      	mov	r0, r4
 80149c2:	f7ff fbd7 	bl	8014174 <read_submessage_list>
 80149c6:	f001 f8e7 	bl	8015b98 <uxr_millis>
 80149ca:	1b40      	subs	r0, r0, r5
 80149cc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	dcbe      	bgt.n	8014952 <wait_session_status+0x42>
 80149d4:	f10b 0b01 	add.w	fp, fp, #1
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	7960      	ldrb	r0, [r4, #5]
 80149dc:	455b      	cmp	r3, fp
 80149de:	d001      	beq.n	80149e4 <wait_session_status+0xd4>
 80149e0:	28ff      	cmp	r0, #255	@ 0xff
 80149e2:	d0a3      	beq.n	801492c <wait_session_status+0x1c>
 80149e4:	38ff      	subs	r0, #255	@ 0xff
 80149e6:	bf18      	it	ne
 80149e8:	2001      	movne	r0, #1
 80149ea:	b01d      	add	sp, #116	@ 0x74
 80149ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80149f4:	4631      	mov	r1, r6
 80149f6:	f104 0008 	add.w	r0, r4, #8
 80149fa:	9304      	str	r3, [sp, #16]
 80149fc:	f001 f864 	bl	8015ac8 <uxr_get_input_reliable_stream>
 8014a00:	4680      	mov	r8, r0
 8014a02:	b348      	cbz	r0, 8014a58 <wait_session_status+0x148>
 8014a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014a06:	a80c      	add	r0, sp, #48	@ 0x30
 8014a08:	9205      	str	r2, [sp, #20]
 8014a0a:	f7fe fdff 	bl	801360c <ucdr_buffer_remaining>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	f10d 001d 	add.w	r0, sp, #29
 8014a14:	9a05      	ldr	r2, [sp, #20]
 8014a16:	9000      	str	r0, [sp, #0]
 8014a18:	4640      	mov	r0, r8
 8014a1a:	9902      	ldr	r1, [sp, #8]
 8014a1c:	f006 fc68 	bl	801b2f0 <uxr_receive_reliable_message>
 8014a20:	b1d0      	cbz	r0, 8014a58 <wait_session_status+0x148>
 8014a22:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d03a      	beq.n	8014aa0 <wait_session_status+0x190>
 8014a2a:	9f04      	ldr	r7, [sp, #16]
 8014a2c:	e00a      	b.n	8014a44 <wait_session_status+0x134>
 8014a2e:	f04f 0302 	mov.w	r3, #2
 8014a32:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8014a36:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8014a3a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8014a3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a40:	f7ff fb98 	bl	8014174 <read_submessage_list>
 8014a44:	a914      	add	r1, sp, #80	@ 0x50
 8014a46:	2204      	movs	r2, #4
 8014a48:	4640      	mov	r0, r8
 8014a4a:	f006 fcd3 	bl	801b3f4 <uxr_next_input_reliable_buffer_available>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	a914      	add	r1, sp, #80	@ 0x50
 8014a52:	4620      	mov	r0, r4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d1ea      	bne.n	8014a2e <wait_session_status+0x11e>
 8014a58:	4632      	mov	r2, r6
 8014a5a:	9904      	ldr	r1, [sp, #16]
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f7ff fa05 	bl	8013e6c <write_submessage_acknack.isra.0>
 8014a62:	e76f      	b.n	8014944 <wait_session_status+0x34>
 8014a64:	4631      	mov	r1, r6
 8014a66:	f104 0008 	add.w	r0, r4, #8
 8014a6a:	f001 f823 	bl	8015ab4 <uxr_get_input_best_effort_stream>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	f43f af68 	beq.w	8014944 <wait_session_status+0x34>
 8014a74:	9902      	ldr	r1, [sp, #8]
 8014a76:	f006 fbb1 	bl	801b1dc <uxr_receive_best_effort_message>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	f43f af62 	beq.w	8014944 <wait_session_status+0x34>
 8014a80:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014a84:	a90c      	add	r1, sp, #48	@ 0x30
 8014a86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f7ff fb73 	bl	8014174 <read_submessage_list>
 8014a8e:	e759      	b.n	8014944 <wait_session_status+0x34>
 8014a90:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014a92:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014a96:	47a0      	blx	r4
 8014a98:	2001      	movs	r0, #1
 8014a9a:	b01d      	add	sp, #116	@ 0x74
 8014a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014aa4:	a90c      	add	r1, sp, #48	@ 0x30
 8014aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	f7ff fb63 	bl	8014174 <read_submessage_list>
 8014aae:	e7bc      	b.n	8014a2a <wait_session_status+0x11a>

08014ab0 <uxr_delete_session_retries>:
 8014ab0:	b530      	push	{r4, r5, lr}
 8014ab2:	b08f      	sub	sp, #60	@ 0x3c
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	460d      	mov	r5, r1
 8014ab8:	f000 fa34 	bl	8014f24 <uxr_session_header_offset>
 8014abc:	2300      	movs	r3, #0
 8014abe:	2210      	movs	r2, #16
 8014ac0:	a902      	add	r1, sp, #8
 8014ac2:	9000      	str	r0, [sp, #0]
 8014ac4:	a806      	add	r0, sp, #24
 8014ac6:	f7fe fd5d 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8014aca:	a906      	add	r1, sp, #24
 8014acc:	4620      	mov	r0, r4
 8014ace:	f000 f979 	bl	8014dc4 <uxr_buffer_delete_session>
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	9b06      	ldr	r3, [sp, #24]
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	4611      	mov	r1, r2
 8014ada:	f000 f9cf 	bl	8014e7c <uxr_stamp_session_header>
 8014ade:	a806      	add	r0, sp, #24
 8014ae0:	f7fe fd90 	bl	8013604 <ucdr_buffer_length>
 8014ae4:	462b      	mov	r3, r5
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	a902      	add	r1, sp, #8
 8014aea:	4620      	mov	r0, r4
 8014aec:	f7ff ff10 	bl	8014910 <wait_session_status>
 8014af0:	b118      	cbz	r0, 8014afa <uxr_delete_session_retries+0x4a>
 8014af2:	7960      	ldrb	r0, [r4, #5]
 8014af4:	fab0 f080 	clz	r0, r0
 8014af8:	0940      	lsrs	r0, r0, #5
 8014afa:	b00f      	add	sp, #60	@ 0x3c
 8014afc:	bd30      	pop	{r4, r5, pc}
 8014afe:	bf00      	nop

08014b00 <uxr_create_session>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	f100 0b08 	add.w	fp, r0, #8
 8014b08:	4604      	mov	r4, r0
 8014b0a:	b0ab      	sub	sp, #172	@ 0xac
 8014b0c:	4658      	mov	r0, fp
 8014b0e:	465e      	mov	r6, fp
 8014b10:	f000 ff22 	bl	8015958 <uxr_reset_stream_storage>
 8014b14:	4620      	mov	r0, r4
 8014b16:	f000 fa05 	bl	8014f24 <uxr_session_header_offset>
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	221c      	movs	r2, #28
 8014b1e:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b20:	9000      	str	r0, [sp, #0]
 8014b22:	a812      	add	r0, sp, #72	@ 0x48
 8014b24:	f7fe fd2e 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8014b28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014b2a:	a912      	add	r1, sp, #72	@ 0x48
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	8a1a      	ldrh	r2, [r3, #16]
 8014b30:	3a04      	subs	r2, #4
 8014b32:	b292      	uxth	r2, r2
 8014b34:	f000 f91c 	bl	8014d70 <uxr_buffer_create_session>
 8014b38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f000 f98a 	bl	8014e54 <uxr_stamp_create_session_header>
 8014b40:	a812      	add	r0, sp, #72	@ 0x48
 8014b42:	f7fe fd5f 	bl	8013604 <ucdr_buffer_length>
 8014b46:	23ff      	movs	r3, #255	@ 0xff
 8014b48:	4681      	mov	r9, r0
 8014b4a:	7163      	strb	r3, [r4, #5]
 8014b4c:	230a      	movs	r3, #10
 8014b4e:	9303      	str	r3, [sp, #12]
 8014b50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014b52:	464a      	mov	r2, r9
 8014b54:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b56:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014b5a:	47a8      	blx	r5
 8014b5c:	f001 f81c 	bl	8015b98 <uxr_millis>
 8014b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014b64:	4605      	mov	r5, r0
 8014b66:	e009      	b.n	8014b7c <uxr_create_session+0x7c>
 8014b68:	f001 f816 	bl	8015b98 <uxr_millis>
 8014b6c:	1b40      	subs	r0, r0, r5
 8014b6e:	7962      	ldrb	r2, [r4, #5]
 8014b70:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	dd38      	ble.n	8014bea <uxr_create_session+0xea>
 8014b78:	2aff      	cmp	r2, #255	@ 0xff
 8014b7a:	d13c      	bne.n	8014bf6 <uxr_create_session+0xf6>
 8014b7c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014b7e:	a907      	add	r1, sp, #28
 8014b80:	6897      	ldr	r7, [r2, #8]
 8014b82:	6810      	ldr	r0, [r2, #0]
 8014b84:	aa08      	add	r2, sp, #32
 8014b86:	47b8      	blx	r7
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d0ed      	beq.n	8014b68 <uxr_create_session+0x68>
 8014b8c:	a81a      	add	r0, sp, #104	@ 0x68
 8014b8e:	2700      	movs	r7, #0
 8014b90:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014b94:	f7fe fd08 	bl	80135a8 <ucdr_init_buffer>
 8014b98:	f10d 031a 	add.w	r3, sp, #26
 8014b9c:	aa06      	add	r2, sp, #24
 8014b9e:	a91a      	add	r1, sp, #104	@ 0x68
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f88d 7018 	strb.w	r7, [sp, #24]
 8014ba6:	f000 f97d 	bl	8014ea4 <uxr_read_session_header>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d0dc      	beq.n	8014b68 <uxr_create_session+0x68>
 8014bae:	4639      	mov	r1, r7
 8014bb0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014bb4:	f000 fe9a 	bl	80158ec <uxr_stream_id_from_raw>
 8014bb8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014bbc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8014bc0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014bc4:	2f01      	cmp	r7, #1
 8014bc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014bca:	d053      	beq.n	8014c74 <uxr_create_session+0x174>
 8014bcc:	2f02      	cmp	r7, #2
 8014bce:	d018      	beq.n	8014c02 <uxr_create_session+0x102>
 8014bd0:	2f00      	cmp	r7, #0
 8014bd2:	d1c9      	bne.n	8014b68 <uxr_create_session+0x68>
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	4638      	mov	r0, r7
 8014bd8:	f000 fe88 	bl	80158ec <uxr_stream_id_from_raw>
 8014bdc:	a91a      	add	r1, sp, #104	@ 0x68
 8014bde:	4602      	mov	r2, r0
 8014be0:	900a      	str	r0, [sp, #40]	@ 0x28
 8014be2:	4620      	mov	r0, r4
 8014be4:	f7ff fac6 	bl	8014174 <read_submessage_list>
 8014be8:	e7be      	b.n	8014b68 <uxr_create_session+0x68>
 8014bea:	9b03      	ldr	r3, [sp, #12]
 8014bec:	3b01      	subs	r3, #1
 8014bee:	9303      	str	r3, [sp, #12]
 8014bf0:	d001      	beq.n	8014bf6 <uxr_create_session+0xf6>
 8014bf2:	2aff      	cmp	r2, #255	@ 0xff
 8014bf4:	d0ac      	beq.n	8014b50 <uxr_create_session+0x50>
 8014bf6:	2a00      	cmp	r2, #0
 8014bf8:	d051      	beq.n	8014c9e <uxr_create_session+0x19e>
 8014bfa:	2000      	movs	r0, #0
 8014bfc:	b02b      	add	sp, #172	@ 0xac
 8014bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c02:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014c06:	4641      	mov	r1, r8
 8014c08:	4630      	mov	r0, r6
 8014c0a:	9304      	str	r3, [sp, #16]
 8014c0c:	f000 ff5c 	bl	8015ac8 <uxr_get_input_reliable_stream>
 8014c10:	4682      	mov	sl, r0
 8014c12:	b348      	cbz	r0, 8014c68 <uxr_create_session+0x168>
 8014c14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014c16:	a81a      	add	r0, sp, #104	@ 0x68
 8014c18:	9205      	str	r2, [sp, #20]
 8014c1a:	f7fe fcf7 	bl	801360c <ucdr_buffer_remaining>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	f10d 0019 	add.w	r0, sp, #25
 8014c24:	9a05      	ldr	r2, [sp, #20]
 8014c26:	4659      	mov	r1, fp
 8014c28:	9000      	str	r0, [sp, #0]
 8014c2a:	4650      	mov	r0, sl
 8014c2c:	f006 fb60 	bl	801b2f0 <uxr_receive_reliable_message>
 8014c30:	b1d0      	cbz	r0, 8014c68 <uxr_create_session+0x168>
 8014c32:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d038      	beq.n	8014cac <uxr_create_session+0x1ac>
 8014c3a:	9f04      	ldr	r7, [sp, #16]
 8014c3c:	e00a      	b.n	8014c54 <uxr_create_session+0x154>
 8014c3e:	f04f 0302 	mov.w	r3, #2
 8014c42:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8014c46:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8014c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c50:	f7ff fa90 	bl	8014174 <read_submessage_list>
 8014c54:	a922      	add	r1, sp, #136	@ 0x88
 8014c56:	2204      	movs	r2, #4
 8014c58:	4650      	mov	r0, sl
 8014c5a:	f006 fbcb 	bl	801b3f4 <uxr_next_input_reliable_buffer_available>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	a922      	add	r1, sp, #136	@ 0x88
 8014c62:	4620      	mov	r0, r4
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d1ea      	bne.n	8014c3e <uxr_create_session+0x13e>
 8014c68:	4642      	mov	r2, r8
 8014c6a:	9904      	ldr	r1, [sp, #16]
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	f7ff f8fd 	bl	8013e6c <write_submessage_acknack.isra.0>
 8014c72:	e779      	b.n	8014b68 <uxr_create_session+0x68>
 8014c74:	4641      	mov	r1, r8
 8014c76:	4630      	mov	r0, r6
 8014c78:	f000 ff1c 	bl	8015ab4 <uxr_get_input_best_effort_stream>
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	f43f af73 	beq.w	8014b68 <uxr_create_session+0x68>
 8014c82:	4659      	mov	r1, fp
 8014c84:	f006 faaa 	bl	801b1dc <uxr_receive_best_effort_message>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	f43f af6d 	beq.w	8014b68 <uxr_create_session+0x68>
 8014c8e:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8014c92:	a91a      	add	r1, sp, #104	@ 0x68
 8014c94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c96:	4620      	mov	r0, r4
 8014c98:	f7ff fa6c 	bl	8014174 <read_submessage_list>
 8014c9c:	e764      	b.n	8014b68 <uxr_create_session+0x68>
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	f000 fe5a 	bl	8015958 <uxr_reset_stream_storage>
 8014ca4:	2001      	movs	r0, #1
 8014ca6:	b02b      	add	sp, #172	@ 0xac
 8014ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cac:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8014cb0:	a91a      	add	r1, sp, #104	@ 0x68
 8014cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	f7ff fa5d 	bl	8014174 <read_submessage_list>
 8014cba:	e7be      	b.n	8014c3a <uxr_create_session+0x13a>

08014cbc <uxr_prepare_stream_to_write_submessage>:
 8014cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cc0:	b082      	sub	sp, #8
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	4610      	mov	r0, r2
 8014cc6:	4615      	mov	r5, r2
 8014cc8:	461e      	mov	r6, r3
 8014cca:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8014cce:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8014cd2:	f105 0904 	add.w	r9, r5, #4
 8014cd6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8014cda:	9101      	str	r1, [sp, #4]
 8014cdc:	f000 ff56 	bl	8015b8c <uxr_submessage_padding>
 8014ce0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014ce4:	4481      	add	r9, r0
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	d01d      	beq.n	8014d26 <uxr_prepare_stream_to_write_submessage+0x6a>
 8014cea:	2b02      	cmp	r3, #2
 8014cec:	d116      	bne.n	8014d1c <uxr_prepare_stream_to_write_submessage+0x60>
 8014cee:	f104 0008 	add.w	r0, r4, #8
 8014cf2:	4651      	mov	r1, sl
 8014cf4:	f000 fed2 	bl	8015a9c <uxr_get_output_reliable_stream>
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	b158      	cbz	r0, 8014d14 <uxr_prepare_stream_to_write_submessage+0x58>
 8014cfc:	4649      	mov	r1, r9
 8014cfe:	4632      	mov	r2, r6
 8014d00:	f006 fd3c 	bl	801b77c <uxr_prepare_reliable_buffer_to_write>
 8014d04:	4604      	mov	r4, r0
 8014d06:	b12c      	cbz	r4, 8014d14 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d08:	4643      	mov	r3, r8
 8014d0a:	b2aa      	uxth	r2, r5
 8014d0c:	4639      	mov	r1, r7
 8014d0e:	4630      	mov	r0, r6
 8014d10:	f000 fefc 	bl	8015b0c <uxr_buffer_submessage_header>
 8014d14:	4620      	mov	r0, r4
 8014d16:	b002      	add	sp, #8
 8014d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d1c:	2400      	movs	r4, #0
 8014d1e:	4620      	mov	r0, r4
 8014d20:	b002      	add	sp, #8
 8014d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d26:	f104 0008 	add.w	r0, r4, #8
 8014d2a:	4651      	mov	r1, sl
 8014d2c:	f000 feae 	bl	8015a8c <uxr_get_output_best_effort_stream>
 8014d30:	4604      	mov	r4, r0
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d0ee      	beq.n	8014d14 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d36:	4649      	mov	r1, r9
 8014d38:	4632      	mov	r2, r6
 8014d3a:	f006 fc4b 	bl	801b5d4 <uxr_prepare_best_effort_buffer_to_write>
 8014d3e:	4604      	mov	r4, r0
 8014d40:	e7e1      	b.n	8014d06 <uxr_prepare_stream_to_write_submessage+0x4a>
 8014d42:	bf00      	nop

08014d44 <uxr_init_session_info>:
 8014d44:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8014d48:	23ff      	movs	r3, #255	@ 0xff
 8014d4a:	7102      	strb	r2, [r0, #4]
 8014d4c:	f880 c001 	strb.w	ip, [r0, #1]
 8014d50:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014d54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014d58:	7001      	strb	r1, [r0, #0]
 8014d5a:	f880 c002 	strb.w	ip, [r0, #2]
 8014d5e:	7143      	strb	r3, [r0, #5]
 8014d60:	70c2      	strb	r2, [r0, #3]
 8014d62:	b500      	push	{lr}
 8014d64:	f04f 0e09 	mov.w	lr, #9
 8014d68:	f8a0 e006 	strh.w	lr, [r0, #6]
 8014d6c:	f85d fb04 	ldr.w	pc, [sp], #4

08014d70 <uxr_buffer_create_session>:
 8014d70:	b530      	push	{r4, r5, lr}
 8014d72:	2300      	movs	r3, #0
 8014d74:	b089      	sub	sp, #36	@ 0x24
 8014d76:	4d12      	ldr	r5, [pc, #72]	@ (8014dc0 <uxr_buffer_create_session+0x50>)
 8014d78:	460c      	mov	r4, r1
 8014d7a:	9307      	str	r3, [sp, #28]
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014d82:	2201      	movs	r2, #1
 8014d84:	9301      	str	r3, [sp, #4]
 8014d86:	80c2      	strh	r2, [r0, #6]
 8014d88:	f88d 2004 	strb.w	r2, [sp, #4]
 8014d8c:	682a      	ldr	r2, [r5, #0]
 8014d8e:	9303      	str	r3, [sp, #12]
 8014d90:	9200      	str	r2, [sp, #0]
 8014d92:	88aa      	ldrh	r2, [r5, #4]
 8014d94:	9306      	str	r3, [sp, #24]
 8014d96:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d9a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014d9e:	9202      	str	r2, [sp, #8]
 8014da0:	7802      	ldrb	r2, [r0, #0]
 8014da2:	4620      	mov	r0, r4
 8014da4:	f88d 200c 	strb.w	r2, [sp, #12]
 8014da8:	2210      	movs	r2, #16
 8014daa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014dae:	f000 fead 	bl	8015b0c <uxr_buffer_submessage_header>
 8014db2:	4669      	mov	r1, sp
 8014db4:	4620      	mov	r0, r4
 8014db6:	f001 fdff 	bl	80169b8 <uxr_serialize_CREATE_CLIENT_Payload>
 8014dba:	b009      	add	sp, #36	@ 0x24
 8014dbc:	bd30      	pop	{r4, r5, pc}
 8014dbe:	bf00      	nop
 8014dc0:	0801dd3c 	.word	0x0801dd3c

08014dc4 <uxr_buffer_delete_session>:
 8014dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8014df8 <uxr_buffer_delete_session+0x34>)
 8014dc6:	2302      	movs	r3, #2
 8014dc8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8014dcc:	b510      	push	{r4, lr}
 8014dce:	460c      	mov	r4, r1
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	8911      	ldrh	r1, [r2, #8]
 8014dd4:	2204      	movs	r2, #4
 8014dd6:	80c3      	strh	r3, [r0, #6]
 8014dd8:	2300      	movs	r3, #0
 8014dda:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014dde:	4620      	mov	r0, r4
 8014de0:	2103      	movs	r1, #3
 8014de2:	f8ad c004 	strh.w	ip, [sp, #4]
 8014de6:	f000 fe91 	bl	8015b0c <uxr_buffer_submessage_header>
 8014dea:	a901      	add	r1, sp, #4
 8014dec:	4620      	mov	r0, r4
 8014dee:	f001 fe8b 	bl	8016b08 <uxr_serialize_DELETE_Payload>
 8014df2:	b002      	add	sp, #8
 8014df4:	bd10      	pop	{r4, pc}
 8014df6:	bf00      	nop
 8014df8:	0801dd3c 	.word	0x0801dd3c

08014dfc <uxr_read_create_session_status>:
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	460b      	mov	r3, r1
 8014e00:	b088      	sub	sp, #32
 8014e02:	4604      	mov	r4, r0
 8014e04:	a901      	add	r1, sp, #4
 8014e06:	4618      	mov	r0, r3
 8014e08:	f001 fe8e 	bl	8016b28 <uxr_deserialize_STATUS_AGENT_Payload>
 8014e0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014e10:	7163      	strb	r3, [r4, #5]
 8014e12:	b008      	add	sp, #32
 8014e14:	bd10      	pop	{r4, pc}
 8014e16:	bf00      	nop

08014e18 <uxr_read_delete_session_status>:
 8014e18:	b510      	push	{r4, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	4608      	mov	r0, r1
 8014e20:	a902      	add	r1, sp, #8
 8014e22:	f001 feb1 	bl	8016b88 <uxr_deserialize_STATUS_Payload>
 8014e26:	88e3      	ldrh	r3, [r4, #6]
 8014e28:	2b02      	cmp	r3, #2
 8014e2a:	d001      	beq.n	8014e30 <uxr_read_delete_session_status+0x18>
 8014e2c:	b004      	add	sp, #16
 8014e2e:	bd10      	pop	{r4, pc}
 8014e30:	f10d 000a 	add.w	r0, sp, #10
 8014e34:	f7fe feaa 	bl	8013b8c <uxr_object_id_from_raw>
 8014e38:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014e3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014e40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	2b02      	cmp	r3, #2
 8014e48:	d1f0      	bne.n	8014e2c <uxr_read_delete_session_status+0x14>
 8014e4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014e4e:	7163      	strb	r3, [r4, #5]
 8014e50:	e7ec      	b.n	8014e2c <uxr_read_delete_session_status+0x14>
 8014e52:	bf00      	nop

08014e54 <uxr_stamp_create_session_header>:
 8014e54:	b510      	push	{r4, lr}
 8014e56:	2208      	movs	r2, #8
 8014e58:	b08a      	sub	sp, #40	@ 0x28
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	eb0d 0002 	add.w	r0, sp, r2
 8014e60:	f7fe fba2 	bl	80135a8 <ucdr_init_buffer>
 8014e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e68:	2300      	movs	r3, #0
 8014e6a:	a802      	add	r0, sp, #8
 8014e6c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014e70:	9400      	str	r4, [sp, #0]
 8014e72:	461a      	mov	r2, r3
 8014e74:	f001 f846 	bl	8015f04 <uxr_serialize_message_header>
 8014e78:	b00a      	add	sp, #40	@ 0x28
 8014e7a:	bd10      	pop	{r4, pc}

08014e7c <uxr_stamp_session_header>:
 8014e7c:	b530      	push	{r4, r5, lr}
 8014e7e:	b08d      	sub	sp, #52	@ 0x34
 8014e80:	4604      	mov	r4, r0
 8014e82:	460d      	mov	r5, r1
 8014e84:	4619      	mov	r1, r3
 8014e86:	a804      	add	r0, sp, #16
 8014e88:	9203      	str	r2, [sp, #12]
 8014e8a:	2208      	movs	r2, #8
 8014e8c:	f7fe fb8c 	bl	80135a8 <ucdr_init_buffer>
 8014e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e94:	9b03      	ldr	r3, [sp, #12]
 8014e96:	462a      	mov	r2, r5
 8014e98:	a804      	add	r0, sp, #16
 8014e9a:	9400      	str	r4, [sp, #0]
 8014e9c:	f001 f832 	bl	8015f04 <uxr_serialize_message_header>
 8014ea0:	b00d      	add	sp, #52	@ 0x34
 8014ea2:	bd30      	pop	{r4, r5, pc}

08014ea4 <uxr_read_session_header>:
 8014ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea8:	4607      	mov	r7, r0
 8014eaa:	b084      	sub	sp, #16
 8014eac:	4608      	mov	r0, r1
 8014eae:	460c      	mov	r4, r1
 8014eb0:	4615      	mov	r5, r2
 8014eb2:	461e      	mov	r6, r3
 8014eb4:	f7fe fbaa 	bl	801360c <ucdr_buffer_remaining>
 8014eb8:	2808      	cmp	r0, #8
 8014eba:	d803      	bhi.n	8014ec4 <uxr_read_session_header+0x20>
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	b004      	add	sp, #16
 8014ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec4:	f10d 080c 	add.w	r8, sp, #12
 8014ec8:	4633      	mov	r3, r6
 8014eca:	462a      	mov	r2, r5
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f10d 010b 	add.w	r1, sp, #11
 8014ed2:	f8cd 8000 	str.w	r8, [sp]
 8014ed6:	f001 f833 	bl	8015f40 <uxr_deserialize_message_header>
 8014eda:	783a      	ldrb	r2, [r7, #0]
 8014edc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014ee0:	4293      	cmp	r3, r2
 8014ee2:	d1eb      	bne.n	8014ebc <uxr_read_session_header+0x18>
 8014ee4:	061b      	lsls	r3, r3, #24
 8014ee6:	d41b      	bmi.n	8014f20 <uxr_read_session_header+0x7c>
 8014ee8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014eec:	787b      	ldrb	r3, [r7, #1]
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d003      	beq.n	8014efa <uxr_read_session_header+0x56>
 8014ef2:	2001      	movs	r0, #1
 8014ef4:	f080 0001 	eor.w	r0, r0, #1
 8014ef8:	e7e1      	b.n	8014ebe <uxr_read_session_header+0x1a>
 8014efa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014efe:	1cb8      	adds	r0, r7, #2
 8014f00:	78bb      	ldrb	r3, [r7, #2]
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d1f5      	bne.n	8014ef2 <uxr_read_session_header+0x4e>
 8014f06:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014f0a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d1ef      	bne.n	8014ef2 <uxr_read_session_header+0x4e>
 8014f12:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014f16:	7843      	ldrb	r3, [r0, #1]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d1ea      	bne.n	8014ef2 <uxr_read_session_header+0x4e>
 8014f1c:	2000      	movs	r0, #0
 8014f1e:	e7e9      	b.n	8014ef4 <uxr_read_session_header+0x50>
 8014f20:	2001      	movs	r0, #1
 8014f22:	e7cc      	b.n	8014ebe <uxr_read_session_header+0x1a>

08014f24 <uxr_session_header_offset>:
 8014f24:	f990 3000 	ldrsb.w	r3, [r0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	bfac      	ite	ge
 8014f2c:	2008      	movge	r0, #8
 8014f2e:	2004      	movlt	r0, #4
 8014f30:	4770      	bx	lr
 8014f32:	bf00      	nop

08014f34 <uxr_init_base_object_request>:
 8014f34:	b510      	push	{r4, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014f3c:	9101      	str	r1, [sp, #4]
 8014f3e:	88c3      	ldrh	r3, [r0, #6]
 8014f40:	f1a3 010a 	sub.w	r1, r3, #10
 8014f44:	b289      	uxth	r1, r1
 8014f46:	42a1      	cmp	r1, r4
 8014f48:	d80f      	bhi.n	8014f6a <uxr_init_base_object_request+0x36>
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	b29c      	uxth	r4, r3
 8014f4e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8014f52:	b2db      	uxtb	r3, r3
 8014f54:	80c4      	strh	r4, [r0, #6]
 8014f56:	1c91      	adds	r1, r2, #2
 8014f58:	9801      	ldr	r0, [sp, #4]
 8014f5a:	f882 c000 	strb.w	ip, [r2]
 8014f5e:	7053      	strb	r3, [r2, #1]
 8014f60:	f7fe fe28 	bl	8013bb4 <uxr_object_id_to_raw>
 8014f64:	4620      	mov	r0, r4
 8014f66:	b002      	add	sp, #8
 8014f68:	bd10      	pop	{r4, pc}
 8014f6a:	230a      	movs	r3, #10
 8014f6c:	f04f 0c00 	mov.w	ip, #0
 8014f70:	461c      	mov	r4, r3
 8014f72:	e7ef      	b.n	8014f54 <uxr_init_base_object_request+0x20>

08014f74 <uxr_parse_base_object_request>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	4604      	mov	r4, r0
 8014f78:	3002      	adds	r0, #2
 8014f7a:	460d      	mov	r5, r1
 8014f7c:	4616      	mov	r6, r2
 8014f7e:	f7fe fe05 	bl	8013b8c <uxr_object_id_from_raw>
 8014f82:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014f86:	8028      	strh	r0, [r5, #0]
 8014f88:	806b      	strh	r3, [r5, #2]
 8014f8a:	7822      	ldrb	r2, [r4, #0]
 8014f8c:	7863      	ldrb	r3, [r4, #1]
 8014f8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014f92:	8033      	strh	r3, [r6, #0]
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
 8014f96:	bf00      	nop

08014f98 <uxr_init_framing_io>:
 8014f98:	2300      	movs	r3, #0
 8014f9a:	7041      	strb	r1, [r0, #1]
 8014f9c:	7003      	strb	r3, [r0, #0]
 8014f9e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop

08014fa4 <uxr_write_framed_msg>:
 8014fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa8:	4617      	mov	r7, r2
 8014faa:	7842      	ldrb	r2, [r0, #1]
 8014fac:	460e      	mov	r6, r1
 8014fae:	b083      	sub	sp, #12
 8014fb0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014fb4:	469b      	mov	fp, r3
 8014fb6:	237e      	movs	r3, #126	@ 0x7e
 8014fb8:	4604      	mov	r4, r0
 8014fba:	2901      	cmp	r1, #1
 8014fbc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8014fc0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014fc4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014fc8:	f240 8115 	bls.w	80151f6 <uxr_write_framed_msg+0x252>
 8014fcc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014fd0:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014fd4:	2202      	movs	r2, #2
 8014fd6:	2901      	cmp	r1, #1
 8014fd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014fdc:	d952      	bls.n	8015084 <uxr_write_framed_msg+0xe0>
 8014fde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fe0:	2103      	movs	r1, #3
 8014fe2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014fe6:	b2dd      	uxtb	r5, r3
 8014fe8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014fec:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8014ff0:	2a01      	cmp	r2, #1
 8014ff2:	d95c      	bls.n	80150ae <uxr_write_framed_msg+0x10a>
 8014ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ff6:	1862      	adds	r2, r4, r1
 8014ff8:	3101      	adds	r1, #1
 8014ffa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014ffe:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8015002:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015006:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801500a:	2a01      	cmp	r2, #1
 801500c:	d961      	bls.n	80150d2 <uxr_write_framed_msg+0x12e>
 801500e:	1c4a      	adds	r2, r1, #1
 8015010:	4421      	add	r1, r4
 8015012:	b2d2      	uxtb	r2, r2
 8015014:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015018:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801501c:	2b00      	cmp	r3, #0
 801501e:	d06a      	beq.n	80150f6 <uxr_write_framed_msg+0x152>
 8015020:	f04f 0800 	mov.w	r8, #0
 8015024:	46c1      	mov	r9, r8
 8015026:	e016      	b.n	8015056 <uxr_write_framed_msg+0xb2>
 8015028:	2a29      	cmp	r2, #41	@ 0x29
 801502a:	d868      	bhi.n	80150fe <uxr_write_framed_msg+0x15a>
 801502c:	18a0      	adds	r0, r4, r2
 801502e:	3201      	adds	r2, #1
 8015030:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015034:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015038:	ea88 0101 	eor.w	r1, r8, r1
 801503c:	4b7d      	ldr	r3, [pc, #500]	@ (8015234 <uxr_write_framed_msg+0x290>)
 801503e:	f109 0901 	add.w	r9, r9, #1
 8015042:	b2c9      	uxtb	r1, r1
 8015044:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015048:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801504c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801504e:	454b      	cmp	r3, r9
 8015050:	d969      	bls.n	8015126 <uxr_write_framed_msg+0x182>
 8015052:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015056:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801505a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801505e:	2801      	cmp	r0, #1
 8015060:	d8e2      	bhi.n	8015028 <uxr_write_framed_msg+0x84>
 8015062:	1c50      	adds	r0, r2, #1
 8015064:	b2c0      	uxtb	r0, r0
 8015066:	2829      	cmp	r0, #41	@ 0x29
 8015068:	d849      	bhi.n	80150fe <uxr_write_framed_msg+0x15a>
 801506a:	18a0      	adds	r0, r4, r2
 801506c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015070:	3202      	adds	r2, #2
 8015072:	f081 0520 	eor.w	r5, r1, #32
 8015076:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801507a:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801507e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015082:	e7d9      	b.n	8015038 <uxr_write_framed_msg+0x94>
 8015084:	2104      	movs	r1, #4
 8015086:	f04f 0c03 	mov.w	ip, #3
 801508a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801508c:	4422      	add	r2, r4
 801508e:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015092:	44a4      	add	ip, r4
 8015094:	b2dd      	uxtb	r5, r3
 8015096:	f080 0020 	eor.w	r0, r0, #32
 801509a:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801509e:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80150a2:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80150a6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80150aa:	2a01      	cmp	r2, #1
 80150ac:	d8a2      	bhi.n	8014ff4 <uxr_write_framed_msg+0x50>
 80150ae:	1862      	adds	r2, r4, r1
 80150b0:	207d      	movs	r0, #125	@ 0x7d
 80150b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150b4:	f085 0520 	eor.w	r5, r5, #32
 80150b8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80150bc:	3102      	adds	r1, #2
 80150be:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80150c2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80150c6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80150ca:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80150ce:	2a01      	cmp	r2, #1
 80150d0:	d89d      	bhi.n	801500e <uxr_write_framed_msg+0x6a>
 80150d2:	1c4d      	adds	r5, r1, #1
 80150d4:	1c8a      	adds	r2, r1, #2
 80150d6:	f080 0020 	eor.w	r0, r0, #32
 80150da:	4421      	add	r1, r4
 80150dc:	fa54 f585 	uxtab	r5, r4, r5
 80150e0:	b2d2      	uxtb	r2, r2
 80150e2:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80150e6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80150ea:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80150ee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d194      	bne.n	8015020 <uxr_write_framed_msg+0x7c>
 80150f6:	4619      	mov	r1, r3
 80150f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80150fc:	e019      	b.n	8015132 <uxr_write_framed_msg+0x18e>
 80150fe:	2500      	movs	r5, #0
 8015100:	e000      	b.n	8015104 <uxr_write_framed_msg+0x160>
 8015102:	b160      	cbz	r0, 801511e <uxr_write_framed_msg+0x17a>
 8015104:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015108:	1b52      	subs	r2, r2, r5
 801510a:	4653      	mov	r3, sl
 801510c:	4638      	mov	r0, r7
 801510e:	4421      	add	r1, r4
 8015110:	47b0      	blx	r6
 8015112:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015116:	4405      	add	r5, r0
 8015118:	4295      	cmp	r5, r2
 801511a:	d3f2      	bcc.n	8015102 <uxr_write_framed_msg+0x15e>
 801511c:	d066      	beq.n	80151ec <uxr_write_framed_msg+0x248>
 801511e:	2000      	movs	r0, #0
 8015120:	b003      	add	sp, #12
 8015122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015126:	fa5f f188 	uxtb.w	r1, r8
 801512a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801512e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015132:	f04f 0900 	mov.w	r9, #0
 8015136:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801513a:	46c8      	mov	r8, r9
 801513c:	e013      	b.n	8015166 <uxr_write_framed_msg+0x1c2>
 801513e:	2a29      	cmp	r2, #41	@ 0x29
 8015140:	d824      	bhi.n	801518c <uxr_write_framed_msg+0x1e8>
 8015142:	18a3      	adds	r3, r4, r2
 8015144:	3201      	adds	r2, #1
 8015146:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801514a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801514e:	f109 0901 	add.w	r9, r9, #1
 8015152:	f1b9 0f02 	cmp.w	r9, #2
 8015156:	d02d      	beq.n	80151b4 <uxr_write_framed_msg+0x210>
 8015158:	f109 0308 	add.w	r3, r9, #8
 801515c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015160:	446b      	add	r3, sp
 8015162:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015166:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801516a:	2b01      	cmp	r3, #1
 801516c:	d8e7      	bhi.n	801513e <uxr_write_framed_msg+0x19a>
 801516e:	1c53      	adds	r3, r2, #1
 8015170:	b2db      	uxtb	r3, r3
 8015172:	2b29      	cmp	r3, #41	@ 0x29
 8015174:	d80a      	bhi.n	801518c <uxr_write_framed_msg+0x1e8>
 8015176:	18a3      	adds	r3, r4, r2
 8015178:	f081 0120 	eor.w	r1, r1, #32
 801517c:	3202      	adds	r2, #2
 801517e:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8015182:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8015186:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801518a:	e7e0      	b.n	801514e <uxr_write_framed_msg+0x1aa>
 801518c:	2500      	movs	r5, #0
 801518e:	e001      	b.n	8015194 <uxr_write_framed_msg+0x1f0>
 8015190:	2800      	cmp	r0, #0
 8015192:	d0c4      	beq.n	801511e <uxr_write_framed_msg+0x17a>
 8015194:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015198:	1b52      	subs	r2, r2, r5
 801519a:	4653      	mov	r3, sl
 801519c:	4638      	mov	r0, r7
 801519e:	4421      	add	r1, r4
 80151a0:	47b0      	blx	r6
 80151a2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151a6:	4405      	add	r5, r0
 80151a8:	4295      	cmp	r5, r2
 80151aa:	d3f1      	bcc.n	8015190 <uxr_write_framed_msg+0x1ec>
 80151ac:	d1b7      	bne.n	801511e <uxr_write_framed_msg+0x17a>
 80151ae:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80151b2:	e7d1      	b.n	8015158 <uxr_write_framed_msg+0x1b4>
 80151b4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151b8:	b19a      	cbz	r2, 80151e2 <uxr_write_framed_msg+0x23e>
 80151ba:	2500      	movs	r5, #0
 80151bc:	e001      	b.n	80151c2 <uxr_write_framed_msg+0x21e>
 80151be:	2800      	cmp	r0, #0
 80151c0:	d0ad      	beq.n	801511e <uxr_write_framed_msg+0x17a>
 80151c2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80151c6:	1b52      	subs	r2, r2, r5
 80151c8:	4653      	mov	r3, sl
 80151ca:	4638      	mov	r0, r7
 80151cc:	4421      	add	r1, r4
 80151ce:	47b0      	blx	r6
 80151d0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151d4:	4405      	add	r5, r0
 80151d6:	4295      	cmp	r5, r2
 80151d8:	d3f1      	bcc.n	80151be <uxr_write_framed_msg+0x21a>
 80151da:	d1a0      	bne.n	801511e <uxr_write_framed_msg+0x17a>
 80151dc:	2300      	movs	r3, #0
 80151de:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80151e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80151e4:	b298      	uxth	r0, r3
 80151e6:	b003      	add	sp, #12
 80151e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ec:	f04f 0300 	mov.w	r3, #0
 80151f0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80151f4:	e72a      	b.n	801504c <uxr_write_framed_msg+0xa8>
 80151f6:	217d      	movs	r1, #125	@ 0x7d
 80151f8:	f082 0220 	eor.w	r2, r2, #32
 80151fc:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015200:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015204:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015208:	2203      	movs	r2, #3
 801520a:	2901      	cmp	r1, #1
 801520c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015210:	d803      	bhi.n	801521a <uxr_write_framed_msg+0x276>
 8015212:	2105      	movs	r1, #5
 8015214:	f04f 0c04 	mov.w	ip, #4
 8015218:	e737      	b.n	801508a <uxr_write_framed_msg+0xe6>
 801521a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801521c:	2104      	movs	r1, #4
 801521e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015222:	b2dd      	uxtb	r5, r3
 8015224:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015228:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801522c:	2a01      	cmp	r2, #1
 801522e:	f63f aee1 	bhi.w	8014ff4 <uxr_write_framed_msg+0x50>
 8015232:	e73c      	b.n	80150ae <uxr_write_framed_msg+0x10a>
 8015234:	0801e3b8 	.word	0x0801e3b8

08015238 <uxr_framing_read_transport>:
 8015238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523c:	4604      	mov	r4, r0
 801523e:	b085      	sub	sp, #20
 8015240:	4692      	mov	sl, r2
 8015242:	4689      	mov	r9, r1
 8015244:	461d      	mov	r5, r3
 8015246:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8015248:	f000 fca6 	bl	8015b98 <uxr_millis>
 801524c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015250:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015254:	4680      	mov	r8, r0
 8015256:	42ba      	cmp	r2, r7
 8015258:	d05f      	beq.n	801531a <uxr_framing_read_transport+0xe2>
 801525a:	d817      	bhi.n	801528c <uxr_framing_read_transport+0x54>
 801525c:	3f01      	subs	r7, #1
 801525e:	1aba      	subs	r2, r7, r2
 8015260:	2700      	movs	r7, #0
 8015262:	b2d2      	uxtb	r2, r2
 8015264:	42b2      	cmp	r2, r6
 8015266:	d81a      	bhi.n	801529e <uxr_framing_read_transport+0x66>
 8015268:	19d3      	adds	r3, r2, r7
 801526a:	42b3      	cmp	r3, r6
 801526c:	d852      	bhi.n	8015314 <uxr_framing_read_transport+0xdc>
 801526e:	b9d2      	cbnz	r2, 80152a6 <uxr_framing_read_transport+0x6e>
 8015270:	2600      	movs	r6, #0
 8015272:	f000 fc91 	bl	8015b98 <uxr_millis>
 8015276:	682b      	ldr	r3, [r5, #0]
 8015278:	eba0 0008 	sub.w	r0, r0, r8
 801527c:	1a1b      	subs	r3, r3, r0
 801527e:	4630      	mov	r0, r6
 8015280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015284:	602b      	str	r3, [r5, #0]
 8015286:	b005      	add	sp, #20
 8015288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528c:	2f00      	cmp	r7, #0
 801528e:	d060      	beq.n	8015352 <uxr_framing_read_transport+0x11a>
 8015290:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8015294:	3f01      	subs	r7, #1
 8015296:	b2d2      	uxtb	r2, r2
 8015298:	b2ff      	uxtb	r7, r7
 801529a:	42b2      	cmp	r2, r6
 801529c:	d9e4      	bls.n	8015268 <uxr_framing_read_transport+0x30>
 801529e:	b2f2      	uxtb	r2, r6
 80152a0:	2700      	movs	r7, #0
 80152a2:	2a00      	cmp	r2, #0
 80152a4:	d0e4      	beq.n	8015270 <uxr_framing_read_transport+0x38>
 80152a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152a8:	4650      	mov	r0, sl
 80152aa:	9203      	str	r2, [sp, #12]
 80152ac:	9300      	str	r3, [sp, #0]
 80152ae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80152b2:	682b      	ldr	r3, [r5, #0]
 80152b4:	3102      	adds	r1, #2
 80152b6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801535c <uxr_framing_read_transport+0x124>
 80152ba:	4421      	add	r1, r4
 80152bc:	47c8      	blx	r9
 80152be:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80152c2:	4606      	mov	r6, r0
 80152c4:	4403      	add	r3, r0
 80152c6:	0859      	lsrs	r1, r3, #1
 80152c8:	fbab 2101 	umull	r2, r1, fp, r1
 80152cc:	222a      	movs	r2, #42	@ 0x2a
 80152ce:	0889      	lsrs	r1, r1, #2
 80152d0:	fb02 3111 	mls	r1, r2, r1, r3
 80152d4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80152d8:	2800      	cmp	r0, #0
 80152da:	d0c9      	beq.n	8015270 <uxr_framing_read_transport+0x38>
 80152dc:	9a03      	ldr	r2, [sp, #12]
 80152de:	4290      	cmp	r0, r2
 80152e0:	d1c7      	bne.n	8015272 <uxr_framing_read_transport+0x3a>
 80152e2:	2f00      	cmp	r7, #0
 80152e4:	d0c5      	beq.n	8015272 <uxr_framing_read_transport+0x3a>
 80152e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152e8:	3102      	adds	r1, #2
 80152ea:	463a      	mov	r2, r7
 80152ec:	4650      	mov	r0, sl
 80152ee:	4421      	add	r1, r4
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	2300      	movs	r3, #0
 80152f4:	47c8      	blx	r9
 80152f6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80152fa:	4406      	add	r6, r0
 80152fc:	1813      	adds	r3, r2, r0
 80152fe:	085a      	lsrs	r2, r3, #1
 8015300:	fbab 1b02 	umull	r1, fp, fp, r2
 8015304:	222a      	movs	r2, #42	@ 0x2a
 8015306:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801530a:	fb02 331b 	mls	r3, r2, fp, r3
 801530e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015312:	e7ae      	b.n	8015272 <uxr_framing_read_transport+0x3a>
 8015314:	1ab6      	subs	r6, r6, r2
 8015316:	b2f7      	uxtb	r7, r6
 8015318:	e7a9      	b.n	801526e <uxr_framing_read_transport+0x36>
 801531a:	2300      	movs	r3, #0
 801531c:	2e28      	cmp	r6, #40	@ 0x28
 801531e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8015320:	d9bd      	bls.n	801529e <uxr_framing_read_transport+0x66>
 8015322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015324:	2229      	movs	r2, #41	@ 0x29
 8015326:	1ca1      	adds	r1, r4, #2
 8015328:	4650      	mov	r0, sl
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	682b      	ldr	r3, [r5, #0]
 801532e:	47c8      	blx	r9
 8015330:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015334:	4606      	mov	r6, r0
 8015336:	212a      	movs	r1, #42	@ 0x2a
 8015338:	4403      	add	r3, r0
 801533a:	4808      	ldr	r0, [pc, #32]	@ (801535c <uxr_framing_read_transport+0x124>)
 801533c:	085a      	lsrs	r2, r3, #1
 801533e:	fba0 0202 	umull	r0, r2, r0, r2
 8015342:	0892      	lsrs	r2, r2, #2
 8015344:	fb01 3312 	mls	r3, r1, r2, r3
 8015348:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801534c:	2e00      	cmp	r6, #0
 801534e:	d08f      	beq.n	8015270 <uxr_framing_read_transport+0x38>
 8015350:	e78f      	b.n	8015272 <uxr_framing_read_transport+0x3a>
 8015352:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8015356:	b2d2      	uxtb	r2, r2
 8015358:	e784      	b.n	8015264 <uxr_framing_read_transport+0x2c>
 801535a:	bf00      	nop
 801535c:	30c30c31 	.word	0x30c30c31

08015360 <uxr_read_framed_msg>:
 8015360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015364:	461e      	mov	r6, r3
 8015366:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801536a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801536e:	b083      	sub	sp, #12
 8015370:	4604      	mov	r4, r0
 8015372:	4688      	mov	r8, r1
 8015374:	429d      	cmp	r5, r3
 8015376:	4691      	mov	r9, r2
 8015378:	f000 818c 	beq.w	8015694 <uxr_read_framed_msg+0x334>
 801537c:	7823      	ldrb	r3, [r4, #0]
 801537e:	4dc3      	ldr	r5, [pc, #780]	@ (801568c <uxr_read_framed_msg+0x32c>)
 8015380:	4fc3      	ldr	r7, [pc, #780]	@ (8015690 <uxr_read_framed_msg+0x330>)
 8015382:	2b07      	cmp	r3, #7
 8015384:	d8fd      	bhi.n	8015382 <uxr_read_framed_msg+0x22>
 8015386:	e8df f013 	tbh	[pc, r3, lsl #1]
 801538a:	011c      	.short	0x011c
 801538c:	00d900fb 	.word	0x00d900fb
 8015390:	008f00ba 	.word	0x008f00ba
 8015394:	00320051 	.word	0x00320051
 8015398:	0008      	.short	0x0008
 801539a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801539e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80153a2:	4299      	cmp	r1, r3
 80153a4:	f000 814d 	beq.w	8015642 <uxr_read_framed_msg+0x2e2>
 80153a8:	18e2      	adds	r2, r4, r3
 80153aa:	7892      	ldrb	r2, [r2, #2]
 80153ac:	2a7d      	cmp	r2, #125	@ 0x7d
 80153ae:	f000 81b8 	beq.w	8015722 <uxr_read_framed_msg+0x3c2>
 80153b2:	3301      	adds	r3, #1
 80153b4:	212a      	movs	r1, #42	@ 0x2a
 80153b6:	2a7e      	cmp	r2, #126	@ 0x7e
 80153b8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80153bc:	fba5 c000 	umull	ip, r0, r5, r0
 80153c0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80153c4:	fb01 3310 	mls	r3, r1, r0, r3
 80153c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80153cc:	f000 8257 	beq.w	801587e <uxr_read_framed_msg+0x51e>
 80153d0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80153d2:	2000      	movs	r0, #0
 80153d4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80153d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80153da:	7020      	strb	r0, [r4, #0]
 80153dc:	b29b      	uxth	r3, r3
 80153de:	4299      	cmp	r1, r3
 80153e0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80153e2:	f000 8178 	beq.w	80156d6 <uxr_read_framed_msg+0x376>
 80153e6:	2000      	movs	r0, #0
 80153e8:	b003      	add	sp, #12
 80153ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80153f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80153f6:	4298      	cmp	r0, r3
 80153f8:	f000 8132 	beq.w	8015660 <uxr_read_framed_msg+0x300>
 80153fc:	18e2      	adds	r2, r4, r3
 80153fe:	7891      	ldrb	r1, [r2, #2]
 8015400:	297d      	cmp	r1, #125	@ 0x7d
 8015402:	f000 8170 	beq.w	80156e6 <uxr_read_framed_msg+0x386>
 8015406:	3301      	adds	r3, #1
 8015408:	202a      	movs	r0, #42	@ 0x2a
 801540a:	297e      	cmp	r1, #126	@ 0x7e
 801540c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015410:	fba5 c202 	umull	ip, r2, r5, r2
 8015414:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015418:	fb00 3312 	mls	r3, r0, r2, r3
 801541c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015420:	f000 821d 	beq.w	801585e <uxr_read_framed_msg+0x4fe>
 8015424:	2307      	movs	r3, #7
 8015426:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8015428:	7023      	strb	r3, [r4, #0]
 801542a:	e7aa      	b.n	8015382 <uxr_read_framed_msg+0x22>
 801542c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801542e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015432:	459e      	cmp	lr, r3
 8015434:	d827      	bhi.n	8015486 <uxr_read_framed_msg+0x126>
 8015436:	e032      	b.n	801549e <uxr_read_framed_msg+0x13e>
 8015438:	fba5 b101 	umull	fp, r1, r5, r1
 801543c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015440:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015444:	0889      	lsrs	r1, r1, #2
 8015446:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801544a:	fb0b 0111 	mls	r1, fp, r1, r0
 801544e:	f000 80d4 	beq.w	80155fa <uxr_read_framed_msg+0x29a>
 8015452:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015456:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801545a:	f000 80cb 	beq.w	80155f4 <uxr_read_framed_msg+0x294>
 801545e:	f806 c003 	strb.w	ip, [r6, r3]
 8015462:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015464:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015466:	ea80 010c 	eor.w	r1, r0, ip
 801546a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801546e:	3301      	adds	r3, #1
 8015470:	b2c9      	uxtb	r1, r1
 8015472:	b29b      	uxth	r3, r3
 8015474:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015478:	4573      	cmp	r3, lr
 801547a:	8663      	strh	r3, [r4, #50]	@ 0x32
 801547c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015480:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015482:	f080 811d 	bcs.w	80156c0 <uxr_read_framed_msg+0x360>
 8015486:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801548a:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801548e:	1c50      	adds	r0, r2, #1
 8015490:	eb04 0c02 	add.w	ip, r4, r2
 8015494:	4592      	cmp	sl, r2
 8015496:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801549a:	d1cd      	bne.n	8015438 <uxr_read_framed_msg+0xd8>
 801549c:	459e      	cmp	lr, r3
 801549e:	f040 8114 	bne.w	80156ca <uxr_read_framed_msg+0x36a>
 80154a2:	2306      	movs	r3, #6
 80154a4:	7023      	strb	r3, [r4, #0]
 80154a6:	e76c      	b.n	8015382 <uxr_read_framed_msg+0x22>
 80154a8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80154ac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80154b0:	4298      	cmp	r0, r3
 80154b2:	f000 80c6 	beq.w	8015642 <uxr_read_framed_msg+0x2e2>
 80154b6:	18e2      	adds	r2, r4, r3
 80154b8:	7891      	ldrb	r1, [r2, #2]
 80154ba:	297d      	cmp	r1, #125	@ 0x7d
 80154bc:	f000 8193 	beq.w	80157e6 <uxr_read_framed_msg+0x486>
 80154c0:	3301      	adds	r3, #1
 80154c2:	202a      	movs	r0, #42	@ 0x2a
 80154c4:	297e      	cmp	r1, #126	@ 0x7e
 80154c6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80154ca:	fba5 c202 	umull	ip, r2, r5, r2
 80154ce:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80154d2:	fb00 3312 	mls	r3, r0, r2, r3
 80154d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154da:	f000 81d0 	beq.w	801587e <uxr_read_framed_msg+0x51e>
 80154de:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80154e0:	2000      	movs	r0, #0
 80154e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80154e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80154e8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80154ee:	428b      	cmp	r3, r1
 80154f0:	8623      	strh	r3, [r4, #48]	@ 0x30
 80154f2:	f240 80e2 	bls.w	80156ba <uxr_read_framed_msg+0x35a>
 80154f6:	7020      	strb	r0, [r4, #0]
 80154f8:	b003      	add	sp, #12
 80154fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154fe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015502:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015506:	4298      	cmp	r0, r3
 8015508:	f000 80aa 	beq.w	8015660 <uxr_read_framed_msg+0x300>
 801550c:	18e2      	adds	r2, r4, r3
 801550e:	7891      	ldrb	r1, [r2, #2]
 8015510:	297d      	cmp	r1, #125	@ 0x7d
 8015512:	f000 8186 	beq.w	8015822 <uxr_read_framed_msg+0x4c2>
 8015516:	3301      	adds	r3, #1
 8015518:	202a      	movs	r0, #42	@ 0x2a
 801551a:	297e      	cmp	r1, #126	@ 0x7e
 801551c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015520:	fba5 c202 	umull	ip, r2, r5, r2
 8015524:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015528:	fb00 3312 	mls	r3, r0, r2, r3
 801552c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015530:	f000 8195 	beq.w	801585e <uxr_read_framed_msg+0x4fe>
 8015534:	2304      	movs	r3, #4
 8015536:	8621      	strh	r1, [r4, #48]	@ 0x30
 8015538:	7023      	strb	r3, [r4, #0]
 801553a:	e722      	b.n	8015382 <uxr_read_framed_msg+0x22>
 801553c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015540:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015544:	4290      	cmp	r0, r2
 8015546:	f000 80b4 	beq.w	80156b2 <uxr_read_framed_msg+0x352>
 801554a:	18a3      	adds	r3, r4, r2
 801554c:	7899      	ldrb	r1, [r3, #2]
 801554e:	297d      	cmp	r1, #125	@ 0x7d
 8015550:	f000 8107 	beq.w	8015762 <uxr_read_framed_msg+0x402>
 8015554:	3201      	adds	r2, #1
 8015556:	232a      	movs	r3, #42	@ 0x2a
 8015558:	297e      	cmp	r1, #126	@ 0x7e
 801555a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801555e:	fba5 c000 	umull	ip, r0, r5, r0
 8015562:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015566:	fb03 2210 	mls	r2, r3, r0, r2
 801556a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801556e:	f000 818a 	beq.w	8015886 <uxr_read_framed_msg+0x526>
 8015572:	7863      	ldrb	r3, [r4, #1]
 8015574:	428b      	cmp	r3, r1
 8015576:	bf0c      	ite	eq
 8015578:	2303      	moveq	r3, #3
 801557a:	2300      	movne	r3, #0
 801557c:	7023      	strb	r3, [r4, #0]
 801557e:	e700      	b.n	8015382 <uxr_read_framed_msg+0x22>
 8015580:	2300      	movs	r3, #0
 8015582:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015586:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801558a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801558e:	4299      	cmp	r1, r3
 8015590:	d06a      	beq.n	8015668 <uxr_read_framed_msg+0x308>
 8015592:	18e2      	adds	r2, r4, r3
 8015594:	7890      	ldrb	r0, [r2, #2]
 8015596:	287d      	cmp	r0, #125	@ 0x7d
 8015598:	f000 8100 	beq.w	801579c <uxr_read_framed_msg+0x43c>
 801559c:	3301      	adds	r3, #1
 801559e:	212a      	movs	r1, #42	@ 0x2a
 80155a0:	287e      	cmp	r0, #126	@ 0x7e
 80155a2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80155a6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80155aa:	fba5 c202 	umull	ip, r2, r5, r2
 80155ae:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80155b2:	fb01 3312 	mls	r3, r1, r2, r3
 80155b6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155ba:	d055      	beq.n	8015668 <uxr_read_framed_msg+0x308>
 80155bc:	2302      	movs	r3, #2
 80155be:	7023      	strb	r3, [r4, #0]
 80155c0:	e6df      	b.n	8015382 <uxr_read_framed_msg+0x22>
 80155c2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 80155c6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80155ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80155ce:	1c5a      	adds	r2, r3, #1
 80155d0:	459c      	cmp	ip, r3
 80155d2:	eb04 0103 	add.w	r1, r4, r3
 80155d6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80155da:	f43f af04 	beq.w	80153e6 <uxr_read_framed_msg+0x86>
 80155de:	fba5 0303 	umull	r0, r3, r5, r3
 80155e2:	7889      	ldrb	r1, [r1, #2]
 80155e4:	089b      	lsrs	r3, r3, #2
 80155e6:	297e      	cmp	r1, #126	@ 0x7e
 80155e8:	fb0e 2313 	mls	r3, lr, r3, r2
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155f2:	d1ec      	bne.n	80155ce <uxr_read_framed_msg+0x26e>
 80155f4:	2301      	movs	r3, #1
 80155f6:	7023      	strb	r3, [r4, #0]
 80155f8:	e6c3      	b.n	8015382 <uxr_read_framed_msg+0x22>
 80155fa:	1c50      	adds	r0, r2, #1
 80155fc:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015600:	3202      	adds	r2, #2
 8015602:	0841      	lsrs	r1, r0, #1
 8015604:	fba5 c101 	umull	ip, r1, r5, r1
 8015608:	0889      	lsrs	r1, r1, #2
 801560a:	fb0b 0111 	mls	r1, fp, r1, r0
 801560e:	1860      	adds	r0, r4, r1
 8015610:	b2c9      	uxtb	r1, r1
 8015612:	458a      	cmp	sl, r1
 8015614:	f43f af42 	beq.w	801549c <uxr_read_framed_msg+0x13c>
 8015618:	0851      	lsrs	r1, r2, #1
 801561a:	7880      	ldrb	r0, [r0, #2]
 801561c:	fba5 a101 	umull	sl, r1, r5, r1
 8015620:	287e      	cmp	r0, #126	@ 0x7e
 8015622:	f080 0c20 	eor.w	ip, r0, #32
 8015626:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801562a:	fb0b 2211 	mls	r2, fp, r1, r2
 801562e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015632:	f47f af14 	bne.w	801545e <uxr_read_framed_msg+0xfe>
 8015636:	459e      	cmp	lr, r3
 8015638:	f43f af33 	beq.w	80154a2 <uxr_read_framed_msg+0x142>
 801563c:	2301      	movs	r3, #1
 801563e:	7023      	strb	r3, [r4, #0]
 8015640:	e69f      	b.n	8015382 <uxr_read_framed_msg+0x22>
 8015642:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015644:	9300      	str	r3, [sp, #0]
 8015646:	2301      	movs	r3, #1
 8015648:	9301      	str	r3, [sp, #4]
 801564a:	464a      	mov	r2, r9
 801564c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801564e:	4641      	mov	r1, r8
 8015650:	4620      	mov	r0, r4
 8015652:	f7ff fdf1 	bl	8015238 <uxr_framing_read_transport>
 8015656:	2800      	cmp	r0, #0
 8015658:	f43f aec5 	beq.w	80153e6 <uxr_read_framed_msg+0x86>
 801565c:	7823      	ldrb	r3, [r4, #0]
 801565e:	e690      	b.n	8015382 <uxr_read_framed_msg+0x22>
 8015660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015662:	9300      	str	r3, [sp, #0]
 8015664:	2302      	movs	r3, #2
 8015666:	e7ef      	b.n	8015648 <uxr_read_framed_msg+0x2e8>
 8015668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801566a:	464a      	mov	r2, r9
 801566c:	4641      	mov	r1, r8
 801566e:	4620      	mov	r0, r4
 8015670:	9300      	str	r3, [sp, #0]
 8015672:	2304      	movs	r3, #4
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015678:	f7ff fdde 	bl	8015238 <uxr_framing_read_transport>
 801567c:	2800      	cmp	r0, #0
 801567e:	d1ed      	bne.n	801565c <uxr_read_framed_msg+0x2fc>
 8015680:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015684:	2b7e      	cmp	r3, #126	@ 0x7e
 8015686:	d0e9      	beq.n	801565c <uxr_read_framed_msg+0x2fc>
 8015688:	e6ad      	b.n	80153e6 <uxr_read_framed_msg+0x86>
 801568a:	bf00      	nop
 801568c:	30c30c31 	.word	0x30c30c31
 8015690:	0801e3b8 	.word	0x0801e3b8
 8015694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	2305      	movs	r3, #5
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801569e:	f7ff fdcb 	bl	8015238 <uxr_framing_read_transport>
 80156a2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80156a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80156aa:	429a      	cmp	r2, r3
 80156ac:	f43f ae9b 	beq.w	80153e6 <uxr_read_framed_msg+0x86>
 80156b0:	e664      	b.n	801537c <uxr_read_framed_msg+0x1c>
 80156b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	2303      	movs	r3, #3
 80156b8:	e7c6      	b.n	8015648 <uxr_read_framed_msg+0x2e8>
 80156ba:	2305      	movs	r3, #5
 80156bc:	7023      	strb	r3, [r4, #0]
 80156be:	e660      	b.n	8015382 <uxr_read_framed_msg+0x22>
 80156c0:	f43f aeef 	beq.w	80154a2 <uxr_read_framed_msg+0x142>
 80156c4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80156c8:	d094      	beq.n	80155f4 <uxr_read_framed_msg+0x294>
 80156ca:	ebae 0303 	sub.w	r3, lr, r3
 80156ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80156d0:	3302      	adds	r3, #2
 80156d2:	9200      	str	r2, [sp, #0]
 80156d4:	e7b8      	b.n	8015648 <uxr_read_framed_msg+0x2e8>
 80156d6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80156da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80156dc:	7013      	strb	r3, [r2, #0]
 80156de:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80156e0:	b003      	add	sp, #12
 80156e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156e6:	1c59      	adds	r1, r3, #1
 80156e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80156ec:	084a      	lsrs	r2, r1, #1
 80156ee:	fba5 e202 	umull	lr, r2, r5, r2
 80156f2:	0892      	lsrs	r2, r2, #2
 80156f4:	fb0c 1212 	mls	r2, ip, r2, r1
 80156f8:	b2d1      	uxtb	r1, r2
 80156fa:	4288      	cmp	r0, r1
 80156fc:	d0b0      	beq.n	8015660 <uxr_read_framed_msg+0x300>
 80156fe:	3302      	adds	r3, #2
 8015700:	4422      	add	r2, r4
 8015702:	7891      	ldrb	r1, [r2, #2]
 8015704:	085a      	lsrs	r2, r3, #1
 8015706:	fba5 0202 	umull	r0, r2, r5, r2
 801570a:	297e      	cmp	r1, #126	@ 0x7e
 801570c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015710:	fb0c 3312 	mls	r3, ip, r2, r3
 8015714:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015718:	f000 80a1 	beq.w	801585e <uxr_read_framed_msg+0x4fe>
 801571c:	f081 0120 	eor.w	r1, r1, #32
 8015720:	e680      	b.n	8015424 <uxr_read_framed_msg+0xc4>
 8015722:	f103 0c01 	add.w	ip, r3, #1
 8015726:	202a      	movs	r0, #42	@ 0x2a
 8015728:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801572c:	fba5 e202 	umull	lr, r2, r5, r2
 8015730:	0892      	lsrs	r2, r2, #2
 8015732:	fb00 c212 	mls	r2, r0, r2, ip
 8015736:	fa5f fc82 	uxtb.w	ip, r2
 801573a:	4561      	cmp	r1, ip
 801573c:	d081      	beq.n	8015642 <uxr_read_framed_msg+0x2e2>
 801573e:	3302      	adds	r3, #2
 8015740:	4422      	add	r2, r4
 8015742:	0859      	lsrs	r1, r3, #1
 8015744:	7892      	ldrb	r2, [r2, #2]
 8015746:	fba5 c101 	umull	ip, r1, r5, r1
 801574a:	2a7e      	cmp	r2, #126	@ 0x7e
 801574c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015750:	fb00 3311 	mls	r3, r0, r1, r3
 8015754:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015758:	f000 8091 	beq.w	801587e <uxr_read_framed_msg+0x51e>
 801575c:	f082 0220 	eor.w	r2, r2, #32
 8015760:	e636      	b.n	80153d0 <uxr_read_framed_msg+0x70>
 8015762:	1c51      	adds	r1, r2, #1
 8015764:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015768:	084b      	lsrs	r3, r1, #1
 801576a:	fba5 e303 	umull	lr, r3, r5, r3
 801576e:	089b      	lsrs	r3, r3, #2
 8015770:	fb0c 1313 	mls	r3, ip, r3, r1
 8015774:	b2d9      	uxtb	r1, r3
 8015776:	4288      	cmp	r0, r1
 8015778:	d09b      	beq.n	80156b2 <uxr_read_framed_msg+0x352>
 801577a:	3202      	adds	r2, #2
 801577c:	4423      	add	r3, r4
 801577e:	0850      	lsrs	r0, r2, #1
 8015780:	789b      	ldrb	r3, [r3, #2]
 8015782:	fba5 1000 	umull	r1, r0, r5, r0
 8015786:	2b7e      	cmp	r3, #126	@ 0x7e
 8015788:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801578c:	fb0c 2210 	mls	r2, ip, r0, r2
 8015790:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015794:	d077      	beq.n	8015886 <uxr_read_framed_msg+0x526>
 8015796:	f083 0120 	eor.w	r1, r3, #32
 801579a:	e6ea      	b.n	8015572 <uxr_read_framed_msg+0x212>
 801579c:	f103 0c01 	add.w	ip, r3, #1
 80157a0:	202a      	movs	r0, #42	@ 0x2a
 80157a2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80157a6:	fba5 e202 	umull	lr, r2, r5, r2
 80157aa:	0892      	lsrs	r2, r2, #2
 80157ac:	fb00 c212 	mls	r2, r0, r2, ip
 80157b0:	fa5f fc82 	uxtb.w	ip, r2
 80157b4:	4561      	cmp	r1, ip
 80157b6:	f43f af57 	beq.w	8015668 <uxr_read_framed_msg+0x308>
 80157ba:	3302      	adds	r3, #2
 80157bc:	4422      	add	r2, r4
 80157be:	7891      	ldrb	r1, [r2, #2]
 80157c0:	085a      	lsrs	r2, r3, #1
 80157c2:	fba5 c202 	umull	ip, r2, r5, r2
 80157c6:	297e      	cmp	r1, #126	@ 0x7e
 80157c8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157cc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80157d0:	fb00 3312 	mls	r3, r0, r2, r3
 80157d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157d8:	f43f af46 	beq.w	8015668 <uxr_read_framed_msg+0x308>
 80157dc:	f081 0120 	eor.w	r1, r1, #32
 80157e0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157e4:	e6ea      	b.n	80155bc <uxr_read_framed_msg+0x25c>
 80157e6:	1c59      	adds	r1, r3, #1
 80157e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80157ec:	084a      	lsrs	r2, r1, #1
 80157ee:	fba5 e202 	umull	lr, r2, r5, r2
 80157f2:	0892      	lsrs	r2, r2, #2
 80157f4:	fb0c 1212 	mls	r2, ip, r2, r1
 80157f8:	b2d1      	uxtb	r1, r2
 80157fa:	4288      	cmp	r0, r1
 80157fc:	f43f af21 	beq.w	8015642 <uxr_read_framed_msg+0x2e2>
 8015800:	3302      	adds	r3, #2
 8015802:	4422      	add	r2, r4
 8015804:	7891      	ldrb	r1, [r2, #2]
 8015806:	085a      	lsrs	r2, r3, #1
 8015808:	fba5 0202 	umull	r0, r2, r5, r2
 801580c:	297e      	cmp	r1, #126	@ 0x7e
 801580e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015812:	fb0c 3312 	mls	r3, ip, r2, r3
 8015816:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801581a:	d030      	beq.n	801587e <uxr_read_framed_msg+0x51e>
 801581c:	f081 0120 	eor.w	r1, r1, #32
 8015820:	e65d      	b.n	80154de <uxr_read_framed_msg+0x17e>
 8015822:	1c59      	adds	r1, r3, #1
 8015824:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015828:	084a      	lsrs	r2, r1, #1
 801582a:	fba5 e202 	umull	lr, r2, r5, r2
 801582e:	0892      	lsrs	r2, r2, #2
 8015830:	fb0c 1212 	mls	r2, ip, r2, r1
 8015834:	b2d1      	uxtb	r1, r2
 8015836:	4288      	cmp	r0, r1
 8015838:	f43f af12 	beq.w	8015660 <uxr_read_framed_msg+0x300>
 801583c:	3302      	adds	r3, #2
 801583e:	4422      	add	r2, r4
 8015840:	7891      	ldrb	r1, [r2, #2]
 8015842:	085a      	lsrs	r2, r3, #1
 8015844:	fba5 0202 	umull	r0, r2, r5, r2
 8015848:	297e      	cmp	r1, #126	@ 0x7e
 801584a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801584e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015852:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015856:	d002      	beq.n	801585e <uxr_read_framed_msg+0x4fe>
 8015858:	f081 0120 	eor.w	r1, r1, #32
 801585c:	e66a      	b.n	8015534 <uxr_read_framed_msg+0x1d4>
 801585e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015860:	9300      	str	r3, [sp, #0]
 8015862:	2302      	movs	r3, #2
 8015864:	9301      	str	r3, [sp, #4]
 8015866:	464a      	mov	r2, r9
 8015868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801586a:	4641      	mov	r1, r8
 801586c:	4620      	mov	r0, r4
 801586e:	f7ff fce3 	bl	8015238 <uxr_framing_read_transport>
 8015872:	2800      	cmp	r0, #0
 8015874:	f47f aef2 	bne.w	801565c <uxr_read_framed_msg+0x2fc>
 8015878:	2301      	movs	r3, #1
 801587a:	7023      	strb	r3, [r4, #0]
 801587c:	e581      	b.n	8015382 <uxr_read_framed_msg+0x22>
 801587e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	2301      	movs	r3, #1
 8015884:	e7ee      	b.n	8015864 <uxr_read_framed_msg+0x504>
 8015886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015888:	9300      	str	r3, [sp, #0]
 801588a:	2303      	movs	r3, #3
 801588c:	e7ea      	b.n	8015864 <uxr_read_framed_msg+0x504>
 801588e:	bf00      	nop

08015890 <uxr_stream_id>:
 8015890:	2901      	cmp	r1, #1
 8015892:	4684      	mov	ip, r0
 8015894:	b500      	push	{lr}
 8015896:	b083      	sub	sp, #12
 8015898:	d01f      	beq.n	80158da <uxr_stream_id+0x4a>
 801589a:	2902      	cmp	r1, #2
 801589c:	f04f 0e00 	mov.w	lr, #0
 80158a0:	d020      	beq.n	80158e4 <uxr_stream_id+0x54>
 80158a2:	2300      	movs	r3, #0
 80158a4:	2000      	movs	r0, #0
 80158a6:	f36e 0307 	bfi	r3, lr, #0, #8
 80158aa:	f36c 230f 	bfi	r3, ip, #8, #8
 80158ae:	f361 4317 	bfi	r3, r1, #16, #8
 80158b2:	f362 631f 	bfi	r3, r2, #24, #8
 80158b6:	fa5f fc83 	uxtb.w	ip, r3
 80158ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80158be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80158c2:	0e1b      	lsrs	r3, r3, #24
 80158c4:	f36c 0007 	bfi	r0, ip, #0, #8
 80158c8:	f361 200f 	bfi	r0, r1, #8, #8
 80158cc:	f362 4017 	bfi	r0, r2, #16, #8
 80158d0:	f363 601f 	bfi	r0, r3, #24, #8
 80158d4:	b003      	add	sp, #12
 80158d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80158da:	f100 0e01 	add.w	lr, r0, #1
 80158de:	fa5f fe8e 	uxtb.w	lr, lr
 80158e2:	e7de      	b.n	80158a2 <uxr_stream_id+0x12>
 80158e4:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80158e8:	e7db      	b.n	80158a2 <uxr_stream_id+0x12>
 80158ea:	bf00      	nop

080158ec <uxr_stream_id_from_raw>:
 80158ec:	b082      	sub	sp, #8
 80158ee:	b130      	cbz	r0, 80158fe <uxr_stream_id_from_raw+0x12>
 80158f0:	0603      	lsls	r3, r0, #24
 80158f2:	d421      	bmi.n	8015938 <uxr_stream_id_from_raw+0x4c>
 80158f4:	1e42      	subs	r2, r0, #1
 80158f6:	f04f 0c01 	mov.w	ip, #1
 80158fa:	b2d2      	uxtb	r2, r2
 80158fc:	e001      	b.n	8015902 <uxr_stream_id_from_raw+0x16>
 80158fe:	4684      	mov	ip, r0
 8015900:	4602      	mov	r2, r0
 8015902:	2300      	movs	r3, #0
 8015904:	f360 0307 	bfi	r3, r0, #0, #8
 8015908:	2000      	movs	r0, #0
 801590a:	f362 230f 	bfi	r3, r2, #8, #8
 801590e:	f36c 4317 	bfi	r3, ip, #16, #8
 8015912:	f361 631f 	bfi	r3, r1, #24, #8
 8015916:	fa5f fc83 	uxtb.w	ip, r3
 801591a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801591e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015922:	0e1b      	lsrs	r3, r3, #24
 8015924:	f36c 0007 	bfi	r0, ip, #0, #8
 8015928:	f361 200f 	bfi	r0, r1, #8, #8
 801592c:	f362 4017 	bfi	r0, r2, #16, #8
 8015930:	f363 601f 	bfi	r0, r3, #24, #8
 8015934:	b002      	add	sp, #8
 8015936:	4770      	bx	lr
 8015938:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801593c:	f04f 0c02 	mov.w	ip, #2
 8015940:	e7df      	b.n	8015902 <uxr_stream_id_from_raw+0x16>
 8015942:	bf00      	nop

08015944 <uxr_init_stream_storage>:
 8015944:	2300      	movs	r3, #0
 8015946:	7403      	strb	r3, [r0, #16]
 8015948:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801594c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8015950:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015954:	4770      	bx	lr
 8015956:	bf00      	nop

08015958 <uxr_reset_stream_storage>:
 8015958:	b570      	push	{r4, r5, r6, lr}
 801595a:	7c03      	ldrb	r3, [r0, #16]
 801595c:	4604      	mov	r4, r0
 801595e:	b14b      	cbz	r3, 8015974 <uxr_reset_stream_storage+0x1c>
 8015960:	4606      	mov	r6, r0
 8015962:	2500      	movs	r5, #0
 8015964:	4630      	mov	r0, r6
 8015966:	3501      	adds	r5, #1
 8015968:	f005 fe2e 	bl	801b5c8 <uxr_reset_output_best_effort_stream>
 801596c:	7c23      	ldrb	r3, [r4, #16]
 801596e:	3610      	adds	r6, #16
 8015970:	42ab      	cmp	r3, r5
 8015972:	d8f7      	bhi.n	8015964 <uxr_reset_stream_storage+0xc>
 8015974:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015978:	b15b      	cbz	r3, 8015992 <uxr_reset_stream_storage+0x3a>
 801597a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801597e:	2500      	movs	r5, #0
 8015980:	4630      	mov	r0, r6
 8015982:	3501      	adds	r5, #1
 8015984:	f005 fc26 	bl	801b1d4 <uxr_reset_input_best_effort_stream>
 8015988:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801598c:	3602      	adds	r6, #2
 801598e:	42ab      	cmp	r3, r5
 8015990:	d8f6      	bhi.n	8015980 <uxr_reset_stream_storage+0x28>
 8015992:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015996:	b15b      	cbz	r3, 80159b0 <uxr_reset_stream_storage+0x58>
 8015998:	f104 0618 	add.w	r6, r4, #24
 801599c:	2500      	movs	r5, #0
 801599e:	4630      	mov	r0, r6
 80159a0:	3501      	adds	r5, #1
 80159a2:	f005 febd 	bl	801b720 <uxr_reset_output_reliable_stream>
 80159a6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80159aa:	3628      	adds	r6, #40	@ 0x28
 80159ac:	42ab      	cmp	r3, r5
 80159ae:	d8f6      	bhi.n	801599e <uxr_reset_stream_storage+0x46>
 80159b0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80159b4:	b15b      	cbz	r3, 80159ce <uxr_reset_stream_storage+0x76>
 80159b6:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80159ba:	2500      	movs	r5, #0
 80159bc:	4630      	mov	r0, r6
 80159be:	3501      	adds	r5, #1
 80159c0:	f005 fc74 	bl	801b2ac <uxr_reset_input_reliable_stream>
 80159c4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80159c8:	3618      	adds	r6, #24
 80159ca:	42ab      	cmp	r3, r5
 80159cc:	d8f6      	bhi.n	80159bc <uxr_reset_stream_storage+0x64>
 80159ce:	bd70      	pop	{r4, r5, r6, pc}

080159d0 <uxr_add_output_best_effort_buffer>:
 80159d0:	b510      	push	{r4, lr}
 80159d2:	7c04      	ldrb	r4, [r0, #16]
 80159d4:	b082      	sub	sp, #8
 80159d6:	f104 0c01 	add.w	ip, r4, #1
 80159da:	f880 c010 	strb.w	ip, [r0, #16]
 80159de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80159e2:	f005 fde7 	bl	801b5b4 <uxr_init_output_best_effort_stream>
 80159e6:	2201      	movs	r2, #1
 80159e8:	4620      	mov	r0, r4
 80159ea:	4611      	mov	r1, r2
 80159ec:	b002      	add	sp, #8
 80159ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159f2:	f7ff bf4d 	b.w	8015890 <uxr_stream_id>
 80159f6:	bf00      	nop

080159f8 <uxr_add_output_reliable_buffer>:
 80159f8:	b510      	push	{r4, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	4684      	mov	ip, r0
 80159fe:	2028      	movs	r0, #40	@ 0x28
 8015a00:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8015a04:	9400      	str	r4, [sp, #0]
 8015a06:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8015a0a:	fb00 c004 	mla	r0, r0, r4, ip
 8015a0e:	f104 0e01 	add.w	lr, r4, #1
 8015a12:	3018      	adds	r0, #24
 8015a14:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8015a18:	f005 fe4c 	bl	801b6b4 <uxr_init_output_reliable_stream>
 8015a1c:	2201      	movs	r2, #1
 8015a1e:	2102      	movs	r1, #2
 8015a20:	4620      	mov	r0, r4
 8015a22:	b004      	add	sp, #16
 8015a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a28:	f7ff bf32 	b.w	8015890 <uxr_stream_id>

08015a2c <uxr_add_input_best_effort_buffer>:
 8015a2c:	b510      	push	{r4, lr}
 8015a2e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8015a32:	b082      	sub	sp, #8
 8015a34:	1c62      	adds	r2, r4, #1
 8015a36:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8015a3a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8015a3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015a42:	f005 fbc3 	bl	801b1cc <uxr_init_input_best_effort_stream>
 8015a46:	2200      	movs	r2, #0
 8015a48:	2101      	movs	r1, #1
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	b002      	add	sp, #8
 8015a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a52:	f7ff bf1d 	b.w	8015890 <uxr_stream_id>
 8015a56:	bf00      	nop

08015a58 <uxr_add_input_reliable_buffer>:
 8015a58:	b510      	push	{r4, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	4684      	mov	ip, r0
 8015a5e:	2018      	movs	r0, #24
 8015a60:	9c06      	ldr	r4, [sp, #24]
 8015a62:	9400      	str	r4, [sp, #0]
 8015a64:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8015a68:	fb00 c004 	mla	r0, r0, r4, ip
 8015a6c:	f104 0e01 	add.w	lr, r4, #1
 8015a70:	3048      	adds	r0, #72	@ 0x48
 8015a72:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8015a76:	f005 fbf3 	bl	801b260 <uxr_init_input_reliable_stream>
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	2102      	movs	r1, #2
 8015a7e:	4620      	mov	r0, r4
 8015a80:	b004      	add	sp, #16
 8015a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a86:	f7ff bf03 	b.w	8015890 <uxr_stream_id>
 8015a8a:	bf00      	nop

08015a8c <uxr_get_output_best_effort_stream>:
 8015a8c:	7c03      	ldrb	r3, [r0, #16]
 8015a8e:	428b      	cmp	r3, r1
 8015a90:	bf8c      	ite	hi
 8015a92:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8015a96:	2000      	movls	r0, #0
 8015a98:	4770      	bx	lr
 8015a9a:	bf00      	nop

08015a9c <uxr_get_output_reliable_stream>:
 8015a9c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015aa0:	428b      	cmp	r3, r1
 8015aa2:	d904      	bls.n	8015aae <uxr_get_output_reliable_stream+0x12>
 8015aa4:	2328      	movs	r3, #40	@ 0x28
 8015aa6:	fb03 0001 	mla	r0, r3, r1, r0
 8015aaa:	3018      	adds	r0, #24
 8015aac:	4770      	bx	lr
 8015aae:	2000      	movs	r0, #0
 8015ab0:	4770      	bx	lr
 8015ab2:	bf00      	nop

08015ab4 <uxr_get_input_best_effort_stream>:
 8015ab4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8015ab8:	428b      	cmp	r3, r1
 8015aba:	d903      	bls.n	8015ac4 <uxr_get_input_best_effort_stream+0x10>
 8015abc:	3121      	adds	r1, #33	@ 0x21
 8015abe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8015ac2:	4770      	bx	lr
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	4770      	bx	lr

08015ac8 <uxr_get_input_reliable_stream>:
 8015ac8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8015acc:	428b      	cmp	r3, r1
 8015ace:	d904      	bls.n	8015ada <uxr_get_input_reliable_stream+0x12>
 8015ad0:	2318      	movs	r3, #24
 8015ad2:	fb03 0001 	mla	r0, r3, r1, r0
 8015ad6:	3048      	adds	r0, #72	@ 0x48
 8015ad8:	4770      	bx	lr
 8015ada:	2000      	movs	r0, #0
 8015adc:	4770      	bx	lr
 8015ade:	bf00      	nop

08015ae0 <uxr_output_streams_confirmed>:
 8015ae0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015ae4:	b183      	cbz	r3, 8015b08 <uxr_output_streams_confirmed+0x28>
 8015ae6:	b570      	push	{r4, r5, r6, lr}
 8015ae8:	4606      	mov	r6, r0
 8015aea:	f100 0518 	add.w	r5, r0, #24
 8015aee:	2400      	movs	r4, #0
 8015af0:	e000      	b.n	8015af4 <uxr_output_streams_confirmed+0x14>
 8015af2:	b140      	cbz	r0, 8015b06 <uxr_output_streams_confirmed+0x26>
 8015af4:	4628      	mov	r0, r5
 8015af6:	3401      	adds	r4, #1
 8015af8:	f006 f886 	bl	801bc08 <uxr_is_output_up_to_date>
 8015afc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8015b00:	3528      	adds	r5, #40	@ 0x28
 8015b02:	42a3      	cmp	r3, r4
 8015b04:	d8f5      	bhi.n	8015af2 <uxr_output_streams_confirmed+0x12>
 8015b06:	bd70      	pop	{r4, r5, r6, pc}
 8015b08:	2001      	movs	r0, #1
 8015b0a:	4770      	bx	lr

08015b0c <uxr_buffer_submessage_header>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	460e      	mov	r6, r1
 8015b10:	2104      	movs	r1, #4
 8015b12:	4604      	mov	r4, r0
 8015b14:	4615      	mov	r5, r2
 8015b16:	461f      	mov	r7, r3
 8015b18:	f7fd fd62 	bl	80135e0 <ucdr_align_to>
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	4631      	mov	r1, r6
 8015b20:	4620      	mov	r0, r4
 8015b22:	ea47 0203 	orr.w	r2, r7, r3
 8015b26:	7523      	strb	r3, [r4, #20]
 8015b28:	462b      	mov	r3, r5
 8015b2a:	f000 fa29 	bl	8015f80 <uxr_serialize_submessage_header>
 8015b2e:	4620      	mov	r0, r4
 8015b30:	f7fd fd6c 	bl	801360c <ucdr_buffer_remaining>
 8015b34:	42a8      	cmp	r0, r5
 8015b36:	bf34      	ite	cc
 8015b38:	2000      	movcc	r0, #0
 8015b3a:	2001      	movcs	r0, #1
 8015b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b3e:	bf00      	nop

08015b40 <uxr_read_submessage_header>:
 8015b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b44:	4604      	mov	r4, r0
 8015b46:	460d      	mov	r5, r1
 8015b48:	2104      	movs	r1, #4
 8015b4a:	4616      	mov	r6, r2
 8015b4c:	4698      	mov	r8, r3
 8015b4e:	f7fd fd47 	bl	80135e0 <ucdr_align_to>
 8015b52:	4620      	mov	r0, r4
 8015b54:	f7fd fd5a 	bl	801360c <ucdr_buffer_remaining>
 8015b58:	2803      	cmp	r0, #3
 8015b5a:	bf8c      	ite	hi
 8015b5c:	2701      	movhi	r7, #1
 8015b5e:	2700      	movls	r7, #0
 8015b60:	d802      	bhi.n	8015b68 <uxr_read_submessage_header+0x28>
 8015b62:	4638      	mov	r0, r7
 8015b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b68:	4633      	mov	r3, r6
 8015b6a:	4642      	mov	r2, r8
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	4629      	mov	r1, r5
 8015b70:	f000 fa1a 	bl	8015fa8 <uxr_deserialize_submessage_header>
 8015b74:	f898 3000 	ldrb.w	r3, [r8]
 8015b78:	4638      	mov	r0, r7
 8015b7a:	f003 0201 	and.w	r2, r3, #1
 8015b7e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015b82:	f888 3000 	strb.w	r3, [r8]
 8015b86:	7522      	strb	r2, [r4, #20]
 8015b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b8c <uxr_submessage_padding>:
 8015b8c:	f010 0003 	ands.w	r0, r0, #3
 8015b90:	bf18      	it	ne
 8015b92:	f1c0 0004 	rsbne	r0, r0, #4
 8015b96:	4770      	bx	lr

08015b98 <uxr_millis>:
 8015b98:	b510      	push	{r4, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	2001      	movs	r0, #1
 8015b9e:	4669      	mov	r1, sp
 8015ba0:	f7ec f806 	bl	8001bb0 <clock_gettime>
 8015ba4:	4908      	ldr	r1, [pc, #32]	@ (8015bc8 <uxr_millis+0x30>)
 8015ba6:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015baa:	fba0 0301 	umull	r0, r3, r0, r1
 8015bae:	1900      	adds	r0, r0, r4
 8015bb0:	fb01 3102 	mla	r1, r1, r2, r3
 8015bb4:	4a05      	ldr	r2, [pc, #20]	@ (8015bcc <uxr_millis+0x34>)
 8015bb6:	f04f 0300 	mov.w	r3, #0
 8015bba:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015bbe:	f7ea fbf7 	bl	80003b0 <__aeabi_ldivmod>
 8015bc2:	b004      	add	sp, #16
 8015bc4:	bd10      	pop	{r4, pc}
 8015bc6:	bf00      	nop
 8015bc8:	3b9aca00 	.word	0x3b9aca00
 8015bcc:	000f4240 	.word	0x000f4240

08015bd0 <uxr_nanos>:
 8015bd0:	b510      	push	{r4, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	2001      	movs	r0, #1
 8015bd6:	4669      	mov	r1, sp
 8015bd8:	f7eb ffea 	bl	8001bb0 <clock_gettime>
 8015bdc:	4a06      	ldr	r2, [pc, #24]	@ (8015bf8 <uxr_nanos+0x28>)
 8015bde:	9800      	ldr	r0, [sp, #0]
 8015be0:	9902      	ldr	r1, [sp, #8]
 8015be2:	fba0 0302 	umull	r0, r3, r0, r2
 8015be6:	9c01      	ldr	r4, [sp, #4]
 8015be8:	1840      	adds	r0, r0, r1
 8015bea:	fb02 3304 	mla	r3, r2, r4, r3
 8015bee:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8015bf2:	b004      	add	sp, #16
 8015bf4:	bd10      	pop	{r4, pc}
 8015bf6:	bf00      	nop
 8015bf8:	3b9aca00 	.word	0x3b9aca00

08015bfc <on_full_output_buffer_fragmented>:
 8015bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c00:	460c      	mov	r4, r1
 8015c02:	b08a      	sub	sp, #40	@ 0x28
 8015c04:	4606      	mov	r6, r0
 8015c06:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8015c0a:	f104 0008 	add.w	r0, r4, #8
 8015c0e:	f7ff ff45 	bl	8015a9c <uxr_get_output_reliable_stream>
 8015c12:	4605      	mov	r5, r0
 8015c14:	f006 f802 	bl	801bc1c <get_available_free_slots>
 8015c18:	b968      	cbnz	r0, 8015c36 <on_full_output_buffer_fragmented+0x3a>
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8015c20:	4798      	blx	r3
 8015c22:	b918      	cbnz	r0, 8015c2c <on_full_output_buffer_fragmented+0x30>
 8015c24:	2001      	movs	r0, #1
 8015c26:	b00a      	add	sp, #40	@ 0x28
 8015c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	f005 fff5 	bl	801bc1c <get_available_free_slots>
 8015c32:	2800      	cmp	r0, #0
 8015c34:	d0f6      	beq.n	8015c24 <on_full_output_buffer_fragmented+0x28>
 8015c36:	8929      	ldrh	r1, [r5, #8]
 8015c38:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8015c3c:	89eb      	ldrh	r3, [r5, #14]
 8015c3e:	7b28      	ldrb	r0, [r5, #12]
 8015c40:	686f      	ldr	r7, [r5, #4]
 8015c42:	1a12      	subs	r2, r2, r0
 8015c44:	fbb3 f0f1 	udiv	r0, r3, r1
 8015c48:	fbb7 f7f1 	udiv	r7, r7, r1
 8015c4c:	fb01 3110 	mls	r1, r1, r0, r3
 8015c50:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8015c54:	b289      	uxth	r1, r1
 8015c56:	fb07 f101 	mul.w	r1, r7, r1
 8015c5a:	3f04      	subs	r7, #4
 8015c5c:	443a      	add	r2, r7
 8015c5e:	3104      	adds	r1, #4
 8015c60:	fa1f f882 	uxth.w	r8, r2
 8015c64:	463a      	mov	r2, r7
 8015c66:	eba3 0308 	sub.w	r3, r3, r8
 8015c6a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015c6e:	682b      	ldr	r3, [r5, #0]
 8015c70:	4419      	add	r1, r3
 8015c72:	2300      	movs	r3, #0
 8015c74:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015c78:	9000      	str	r0, [sp, #0]
 8015c7a:	a802      	add	r0, sp, #8
 8015c7c:	f7fd fc82 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8015c80:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015c84:	f102 0308 	add.w	r3, r2, #8
 8015c88:	42bb      	cmp	r3, r7
 8015c8a:	d927      	bls.n	8015cdc <on_full_output_buffer_fragmented+0xe0>
 8015c8c:	4642      	mov	r2, r8
 8015c8e:	2300      	movs	r3, #0
 8015c90:	210d      	movs	r1, #13
 8015c92:	a802      	add	r0, sp, #8
 8015c94:	f7ff ff3a 	bl	8015b0c <uxr_buffer_submessage_header>
 8015c98:	8929      	ldrh	r1, [r5, #8]
 8015c9a:	89eb      	ldrh	r3, [r5, #14]
 8015c9c:	686a      	ldr	r2, [r5, #4]
 8015c9e:	fbb3 f0f1 	udiv	r0, r3, r1
 8015ca2:	fbb2 f2f1 	udiv	r2, r2, r1
 8015ca6:	fb01 3310 	mls	r3, r1, r0, r3
 8015caa:	b29b      	uxth	r3, r3
 8015cac:	fb02 f303 	mul.w	r3, r2, r3
 8015cb0:	682a      	ldr	r2, [r5, #0]
 8015cb2:	50d7      	str	r7, [r2, r3]
 8015cb4:	2101      	movs	r1, #1
 8015cb6:	89e8      	ldrh	r0, [r5, #14]
 8015cb8:	f005 ffd2 	bl	801bc60 <uxr_seq_num_add>
 8015cbc:	9904      	ldr	r1, [sp, #16]
 8015cbe:	9a03      	ldr	r2, [sp, #12]
 8015cc0:	81e8      	strh	r0, [r5, #14]
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	1a52      	subs	r2, r2, r1
 8015cc6:	f7fd fc6f 	bl	80135a8 <ucdr_init_buffer>
 8015cca:	4630      	mov	r0, r6
 8015ccc:	4622      	mov	r2, r4
 8015cce:	490f      	ldr	r1, [pc, #60]	@ (8015d0c <on_full_output_buffer_fragmented+0x110>)
 8015cd0:	f7fd fc3e 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 8015cd4:	2000      	movs	r0, #0
 8015cd6:	b00a      	add	sp, #40	@ 0x28
 8015cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cdc:	b292      	uxth	r2, r2
 8015cde:	2302      	movs	r3, #2
 8015ce0:	210d      	movs	r1, #13
 8015ce2:	a802      	add	r0, sp, #8
 8015ce4:	f7ff ff12 	bl	8015b0c <uxr_buffer_submessage_header>
 8015ce8:	8928      	ldrh	r0, [r5, #8]
 8015cea:	89eb      	ldrh	r3, [r5, #14]
 8015cec:	6869      	ldr	r1, [r5, #4]
 8015cee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015cf2:	fbb3 f7f0 	udiv	r7, r3, r0
 8015cf6:	fbb1 f1f0 	udiv	r1, r1, r0
 8015cfa:	fb00 3317 	mls	r3, r0, r7, r3
 8015cfe:	3208      	adds	r2, #8
 8015d00:	b29b      	uxth	r3, r3
 8015d02:	fb01 f303 	mul.w	r3, r1, r3
 8015d06:	6829      	ldr	r1, [r5, #0]
 8015d08:	50ca      	str	r2, [r1, r3]
 8015d0a:	e7d3      	b.n	8015cb4 <on_full_output_buffer_fragmented+0xb8>
 8015d0c:	08015bfd 	.word	0x08015bfd

08015d10 <uxr_prepare_output_stream>:
 8015d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d12:	b087      	sub	sp, #28
 8015d14:	2707      	movs	r7, #7
 8015d16:	2500      	movs	r5, #0
 8015d18:	461c      	mov	r4, r3
 8015d1a:	4606      	mov	r6, r0
 8015d1c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015d20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015d22:	e9cd 7500 	strd	r7, r5, [sp]
 8015d26:	3204      	adds	r2, #4
 8015d28:	f7fe ffc8 	bl	8014cbc <uxr_prepare_stream_to_write_submessage>
 8015d2c:	f080 0201 	eor.w	r2, r0, #1
 8015d30:	b2d2      	uxtb	r2, r2
 8015d32:	75a2      	strb	r2, [r4, #22]
 8015d34:	b112      	cbz	r2, 8015d3c <uxr_prepare_output_stream+0x2c>
 8015d36:	4628      	mov	r0, r5
 8015d38:	b007      	add	sp, #28
 8015d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d3c:	aa05      	add	r2, sp, #20
 8015d3e:	9902      	ldr	r1, [sp, #8]
 8015d40:	4630      	mov	r0, r6
 8015d42:	f7ff f8f7 	bl	8014f34 <uxr_init_base_object_request>
 8015d46:	a905      	add	r1, sp, #20
 8015d48:	4605      	mov	r5, r0
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	f000 ff9c 	bl	8016c88 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015d50:	69a6      	ldr	r6, [r4, #24]
 8015d52:	69e7      	ldr	r7, [r4, #28]
 8015d54:	4620      	mov	r0, r4
 8015d56:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015d5a:	1a52      	subs	r2, r2, r1
 8015d5c:	f7fd fc24 	bl	80135a8 <ucdr_init_buffer>
 8015d60:	4620      	mov	r0, r4
 8015d62:	463a      	mov	r2, r7
 8015d64:	4631      	mov	r1, r6
 8015d66:	f7fd fbf3 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	b007      	add	sp, #28
 8015d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d70 <uxr_prepare_output_stream_fragmented>:
 8015d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d74:	b091      	sub	sp, #68	@ 0x44
 8015d76:	4605      	mov	r5, r0
 8015d78:	3008      	adds	r0, #8
 8015d7a:	461e      	mov	r6, r3
 8015d7c:	9105      	str	r1, [sp, #20]
 8015d7e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015d82:	9204      	str	r2, [sp, #16]
 8015d84:	f7ff fe8a 	bl	8015a9c <uxr_get_output_reliable_stream>
 8015d88:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	f000 8093 	beq.w	8015eb8 <uxr_prepare_output_stream_fragmented+0x148>
 8015d92:	4604      	mov	r4, r0
 8015d94:	2800      	cmp	r0, #0
 8015d96:	f000 808f 	beq.w	8015eb8 <uxr_prepare_output_stream_fragmented+0x148>
 8015d9a:	f005 ff3f 	bl	801bc1c <get_available_free_slots>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	f000 8085 	beq.w	8015eae <uxr_prepare_output_stream_fragmented+0x13e>
 8015da4:	8923      	ldrh	r3, [r4, #8]
 8015da6:	89e7      	ldrh	r7, [r4, #14]
 8015da8:	6862      	ldr	r2, [r4, #4]
 8015daa:	fbb7 f9f3 	udiv	r9, r7, r3
 8015dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8015db2:	fb03 7919 	mls	r9, r3, r9, r7
 8015db6:	6823      	ldr	r3, [r4, #0]
 8015db8:	f1a2 0b04 	sub.w	fp, r2, #4
 8015dbc:	9203      	str	r2, [sp, #12]
 8015dbe:	fa1f f989 	uxth.w	r9, r9
 8015dc2:	fb02 f909 	mul.w	r9, r2, r9
 8015dc6:	f109 0904 	add.w	r9, r9, #4
 8015dca:	4499      	add	r9, r3
 8015dcc:	7b23      	ldrb	r3, [r4, #12]
 8015dce:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015dd2:	4543      	cmp	r3, r8
 8015dd4:	d37c      	bcc.n	8015ed0 <uxr_prepare_output_stream_fragmented+0x160>
 8015dd6:	f1ab 0a04 	sub.w	sl, fp, #4
 8015dda:	465a      	mov	r2, fp
 8015ddc:	4649      	mov	r1, r9
 8015dde:	a808      	add	r0, sp, #32
 8015de0:	ebaa 0a03 	sub.w	sl, sl, r3
 8015de4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015de6:	f8cd 8000 	str.w	r8, [sp]
 8015dea:	3308      	adds	r3, #8
 8015dec:	fa1f fa8a 	uxth.w	sl, sl
 8015df0:	9302      	str	r3, [sp, #8]
 8015df2:	2300      	movs	r3, #0
 8015df4:	f7fd fbc6 	bl	8013584 <ucdr_init_buffer_origin_offset>
 8015df8:	9b02      	ldr	r3, [sp, #8]
 8015dfa:	4652      	mov	r2, sl
 8015dfc:	210d      	movs	r1, #13
 8015dfe:	455b      	cmp	r3, fp
 8015e00:	bf34      	ite	cc
 8015e02:	2302      	movcc	r3, #2
 8015e04:	2300      	movcs	r3, #0
 8015e06:	a808      	add	r0, sp, #32
 8015e08:	f7ff fe80 	bl	8015b0c <uxr_buffer_submessage_header>
 8015e0c:	8921      	ldrh	r1, [r4, #8]
 8015e0e:	6863      	ldr	r3, [r4, #4]
 8015e10:	4638      	mov	r0, r7
 8015e12:	fbb7 f2f1 	udiv	r2, r7, r1
 8015e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e1a:	fb01 7212 	mls	r2, r1, r2, r7
 8015e1e:	2101      	movs	r1, #1
 8015e20:	b292      	uxth	r2, r2
 8015e22:	fb02 f303 	mul.w	r3, r2, r3
 8015e26:	6822      	ldr	r2, [r4, #0]
 8015e28:	f842 b003 	str.w	fp, [r2, r3]
 8015e2c:	f005 ff18 	bl	801bc60 <uxr_seq_num_add>
 8015e30:	9b03      	ldr	r3, [sp, #12]
 8015e32:	f108 0104 	add.w	r1, r8, #4
 8015e36:	4607      	mov	r7, r0
 8015e38:	f1a3 0208 	sub.w	r2, r3, #8
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	4449      	add	r1, r9
 8015e40:	eba2 0208 	sub.w	r2, r2, r8
 8015e44:	f7fd fbb0 	bl	80135a8 <ucdr_init_buffer>
 8015e48:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015e4a:	2107      	movs	r1, #7
 8015e4c:	81e7      	strh	r7, [r4, #14]
 8015e4e:	1d1a      	adds	r2, r3, #4
 8015e50:	2300      	movs	r3, #0
 8015e52:	4630      	mov	r0, r6
 8015e54:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015e58:	bf28      	it	cs
 8015e5a:	461a      	movcs	r2, r3
 8015e5c:	b292      	uxth	r2, r2
 8015e5e:	f7ff fe55 	bl	8015b0c <uxr_buffer_submessage_header>
 8015e62:	aa07      	add	r2, sp, #28
 8015e64:	9904      	ldr	r1, [sp, #16]
 8015e66:	4628      	mov	r0, r5
 8015e68:	f7ff f864 	bl	8014f34 <uxr_init_base_object_request>
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	b320      	cbz	r0, 8015eba <uxr_prepare_output_stream_fragmented+0x14a>
 8015e70:	a907      	add	r1, sp, #28
 8015e72:	4630      	mov	r0, r6
 8015e74:	f000 ff08 	bl	8016c88 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015e78:	4630      	mov	r0, r6
 8015e7a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015e7e:	1a52      	subs	r2, r2, r1
 8015e80:	f7fd fb92 	bl	80135a8 <ucdr_init_buffer>
 8015e84:	9b05      	ldr	r3, [sp, #20]
 8015e86:	9a02      	ldr	r2, [sp, #8]
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015e8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015e90:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8015e94:	462a      	mov	r2, r5
 8015e96:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8015e9a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015e9c:	4918      	ldr	r1, [pc, #96]	@ (8015f00 <uxr_prepare_output_stream_fragmented+0x190>)
 8015e9e:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015ea2:	f7fd fb55 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	b011      	add	sp, #68	@ 0x44
 8015eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015eb0:	4628      	mov	r0, r5
 8015eb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015eb4:	4798      	blx	r3
 8015eb6:	b920      	cbnz	r0, 8015ec2 <uxr_prepare_output_stream_fragmented+0x152>
 8015eb8:	2400      	movs	r4, #0
 8015eba:	4620      	mov	r0, r4
 8015ebc:	b011      	add	sp, #68	@ 0x44
 8015ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f005 feaa 	bl	801bc1c <get_available_free_slots>
 8015ec8:	2800      	cmp	r0, #0
 8015eca:	f47f af6b 	bne.w	8015da4 <uxr_prepare_output_stream_fragmented+0x34>
 8015ece:	e7f3      	b.n	8015eb8 <uxr_prepare_output_stream_fragmented+0x148>
 8015ed0:	4638      	mov	r0, r7
 8015ed2:	2101      	movs	r1, #1
 8015ed4:	f005 fec4 	bl	801bc60 <uxr_seq_num_add>
 8015ed8:	8922      	ldrh	r2, [r4, #8]
 8015eda:	6863      	ldr	r3, [r4, #4]
 8015edc:	4607      	mov	r7, r0
 8015ede:	fbb3 f9f2 	udiv	r9, r3, r2
 8015ee2:	fbb0 f3f2 	udiv	r3, r0, r2
 8015ee6:	fb02 0313 	mls	r3, r2, r3, r0
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	fb03 f909 	mul.w	r9, r3, r9
 8015ef0:	6823      	ldr	r3, [r4, #0]
 8015ef2:	f109 0904 	add.w	r9, r9, #4
 8015ef6:	4499      	add	r9, r3
 8015ef8:	7b23      	ldrb	r3, [r4, #12]
 8015efa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015efe:	e76a      	b.n	8015dd6 <uxr_prepare_output_stream_fragmented+0x66>
 8015f00:	08015bfd 	.word	0x08015bfd

08015f04 <uxr_serialize_message_header>:
 8015f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f06:	4616      	mov	r6, r2
 8015f08:	b083      	sub	sp, #12
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	460d      	mov	r5, r1
 8015f0e:	9301      	str	r3, [sp, #4]
 8015f10:	9f08      	ldr	r7, [sp, #32]
 8015f12:	f7fc f867 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8015f16:	4631      	mov	r1, r6
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f7fc f863 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8015f1e:	9a01      	ldr	r2, [sp, #4]
 8015f20:	2101      	movs	r1, #1
 8015f22:	4620      	mov	r0, r4
 8015f24:	f7fc f90a 	bl	801213c <ucdr_serialize_endian_uint16_t>
 8015f28:	062b      	lsls	r3, r5, #24
 8015f2a:	d501      	bpl.n	8015f30 <uxr_serialize_message_header+0x2c>
 8015f2c:	b003      	add	sp, #12
 8015f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f30:	2204      	movs	r2, #4
 8015f32:	4639      	mov	r1, r7
 8015f34:	4620      	mov	r0, r4
 8015f36:	b003      	add	sp, #12
 8015f38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f3c:	f7fb beb0 	b.w	8011ca0 <ucdr_serialize_array_uint8_t>

08015f40 <uxr_deserialize_message_header>:
 8015f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f42:	4616      	mov	r6, r2
 8015f44:	b083      	sub	sp, #12
 8015f46:	4604      	mov	r4, r0
 8015f48:	460d      	mov	r5, r1
 8015f4a:	9301      	str	r3, [sp, #4]
 8015f4c:	9f08      	ldr	r7, [sp, #32]
 8015f4e:	f7fc f85f 	bl	8012010 <ucdr_deserialize_uint8_t>
 8015f52:	4631      	mov	r1, r6
 8015f54:	4620      	mov	r0, r4
 8015f56:	f7fc f85b 	bl	8012010 <ucdr_deserialize_uint8_t>
 8015f5a:	9a01      	ldr	r2, [sp, #4]
 8015f5c:	2101      	movs	r1, #1
 8015f5e:	4620      	mov	r0, r4
 8015f60:	f7fc f9e0 	bl	8012324 <ucdr_deserialize_endian_uint16_t>
 8015f64:	f995 3000 	ldrsb.w	r3, [r5]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	da01      	bge.n	8015f70 <uxr_deserialize_message_header+0x30>
 8015f6c:	b003      	add	sp, #12
 8015f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f70:	2204      	movs	r2, #4
 8015f72:	4639      	mov	r1, r7
 8015f74:	4620      	mov	r0, r4
 8015f76:	b003      	add	sp, #12
 8015f78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f7c:	f7fb bef4 	b.w	8011d68 <ucdr_deserialize_array_uint8_t>

08015f80 <uxr_serialize_submessage_header>:
 8015f80:	b530      	push	{r4, r5, lr}
 8015f82:	4615      	mov	r5, r2
 8015f84:	b083      	sub	sp, #12
 8015f86:	4604      	mov	r4, r0
 8015f88:	9301      	str	r3, [sp, #4]
 8015f8a:	f7fc f82b 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8015f8e:	4629      	mov	r1, r5
 8015f90:	4620      	mov	r0, r4
 8015f92:	f7fc f827 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8015f96:	9a01      	ldr	r2, [sp, #4]
 8015f98:	2101      	movs	r1, #1
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	b003      	add	sp, #12
 8015f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fa2:	f7fc b8cb 	b.w	801213c <ucdr_serialize_endian_uint16_t>
 8015fa6:	bf00      	nop

08015fa8 <uxr_deserialize_submessage_header>:
 8015fa8:	b530      	push	{r4, r5, lr}
 8015faa:	4615      	mov	r5, r2
 8015fac:	b083      	sub	sp, #12
 8015fae:	4604      	mov	r4, r0
 8015fb0:	9301      	str	r3, [sp, #4]
 8015fb2:	f7fc f82d 	bl	8012010 <ucdr_deserialize_uint8_t>
 8015fb6:	4629      	mov	r1, r5
 8015fb8:	4620      	mov	r0, r4
 8015fba:	f7fc f829 	bl	8012010 <ucdr_deserialize_uint8_t>
 8015fbe:	9a01      	ldr	r2, [sp, #4]
 8015fc0:	2101      	movs	r1, #1
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	b003      	add	sp, #12
 8015fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fca:	f7fc b9ab 	b.w	8012324 <ucdr_deserialize_endian_uint16_t>
 8015fce:	bf00      	nop

08015fd0 <uxr_serialize_CLIENT_Representation>:
 8015fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fd4:	2204      	movs	r2, #4
 8015fd6:	460e      	mov	r6, r1
 8015fd8:	4605      	mov	r5, r0
 8015fda:	f7fb fe61 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8015fde:	4607      	mov	r7, r0
 8015fe0:	2202      	movs	r2, #2
 8015fe2:	1d31      	adds	r1, r6, #4
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f7fb fe5b 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8015fea:	4038      	ands	r0, r7
 8015fec:	2202      	movs	r2, #2
 8015fee:	1db1      	adds	r1, r6, #6
 8015ff0:	b2c7      	uxtb	r7, r0
 8015ff2:	4628      	mov	r0, r5
 8015ff4:	f7fb fe54 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8015ff8:	2204      	movs	r2, #4
 8015ffa:	4007      	ands	r7, r0
 8015ffc:	f106 0108 	add.w	r1, r6, #8
 8016000:	4628      	mov	r0, r5
 8016002:	f7fb fe4d 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016006:	4007      	ands	r7, r0
 8016008:	7b31      	ldrb	r1, [r6, #12]
 801600a:	4628      	mov	r0, r5
 801600c:	f7fb ffea 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016010:	7b71      	ldrb	r1, [r6, #13]
 8016012:	4007      	ands	r7, r0
 8016014:	4628      	mov	r0, r5
 8016016:	f7fb ffb7 	bl	8011f88 <ucdr_serialize_bool>
 801601a:	7b73      	ldrb	r3, [r6, #13]
 801601c:	ea07 0800 	and.w	r8, r7, r0
 8016020:	b93b      	cbnz	r3, 8016032 <uxr_serialize_CLIENT_Representation+0x62>
 8016022:	8bb1      	ldrh	r1, [r6, #28]
 8016024:	4628      	mov	r0, r5
 8016026:	f7fc f809 	bl	801203c <ucdr_serialize_uint16_t>
 801602a:	ea08 0000 	and.w	r0, r8, r0
 801602e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016032:	6931      	ldr	r1, [r6, #16]
 8016034:	4628      	mov	r0, r5
 8016036:	f7fc f9eb 	bl	8012410 <ucdr_serialize_uint32_t>
 801603a:	6933      	ldr	r3, [r6, #16]
 801603c:	b1e3      	cbz	r3, 8016078 <uxr_serialize_CLIENT_Representation+0xa8>
 801603e:	b1c0      	cbz	r0, 8016072 <uxr_serialize_CLIENT_Representation+0xa2>
 8016040:	4637      	mov	r7, r6
 8016042:	f04f 0900 	mov.w	r9, #0
 8016046:	e000      	b.n	801604a <uxr_serialize_CLIENT_Representation+0x7a>
 8016048:	b19c      	cbz	r4, 8016072 <uxr_serialize_CLIENT_Representation+0xa2>
 801604a:	6979      	ldr	r1, [r7, #20]
 801604c:	4628      	mov	r0, r5
 801604e:	f005 f8a5 	bl	801b19c <ucdr_serialize_string>
 8016052:	69b9      	ldr	r1, [r7, #24]
 8016054:	4604      	mov	r4, r0
 8016056:	4628      	mov	r0, r5
 8016058:	f005 f8a0 	bl	801b19c <ucdr_serialize_string>
 801605c:	f109 0901 	add.w	r9, r9, #1
 8016060:	6933      	ldr	r3, [r6, #16]
 8016062:	4004      	ands	r4, r0
 8016064:	3708      	adds	r7, #8
 8016066:	4599      	cmp	r9, r3
 8016068:	b2e4      	uxtb	r4, r4
 801606a:	d3ed      	bcc.n	8016048 <uxr_serialize_CLIENT_Representation+0x78>
 801606c:	ea08 0804 	and.w	r8, r8, r4
 8016070:	e7d7      	b.n	8016022 <uxr_serialize_CLIENT_Representation+0x52>
 8016072:	f04f 0800 	mov.w	r8, #0
 8016076:	e7d4      	b.n	8016022 <uxr_serialize_CLIENT_Representation+0x52>
 8016078:	ea08 0800 	and.w	r8, r8, r0
 801607c:	e7d1      	b.n	8016022 <uxr_serialize_CLIENT_Representation+0x52>
 801607e:	bf00      	nop

08016080 <uxr_deserialize_CLIENT_Representation>:
 8016080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016084:	2204      	movs	r2, #4
 8016086:	460c      	mov	r4, r1
 8016088:	4605      	mov	r5, r0
 801608a:	f7fb fe6d 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801608e:	4607      	mov	r7, r0
 8016090:	2202      	movs	r2, #2
 8016092:	1d21      	adds	r1, r4, #4
 8016094:	4628      	mov	r0, r5
 8016096:	f7fb fe67 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801609a:	4038      	ands	r0, r7
 801609c:	2202      	movs	r2, #2
 801609e:	1da1      	adds	r1, r4, #6
 80160a0:	b2c6      	uxtb	r6, r0
 80160a2:	4628      	mov	r0, r5
 80160a4:	f7fb fe60 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 80160a8:	2204      	movs	r2, #4
 80160aa:	4006      	ands	r6, r0
 80160ac:	f104 0108 	add.w	r1, r4, #8
 80160b0:	4628      	mov	r0, r5
 80160b2:	f7fb fe59 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 80160b6:	4006      	ands	r6, r0
 80160b8:	f104 010c 	add.w	r1, r4, #12
 80160bc:	4628      	mov	r0, r5
 80160be:	f7fb ffa7 	bl	8012010 <ucdr_deserialize_uint8_t>
 80160c2:	f104 010d 	add.w	r1, r4, #13
 80160c6:	ea06 0700 	and.w	r7, r6, r0
 80160ca:	4628      	mov	r0, r5
 80160cc:	f7fb ff72 	bl	8011fb4 <ucdr_deserialize_bool>
 80160d0:	7b63      	ldrb	r3, [r4, #13]
 80160d2:	4007      	ands	r7, r0
 80160d4:	b93b      	cbnz	r3, 80160e6 <uxr_deserialize_CLIENT_Representation+0x66>
 80160d6:	f104 011c 	add.w	r1, r4, #28
 80160da:	4628      	mov	r0, r5
 80160dc:	f7fc f8ae 	bl	801223c <ucdr_deserialize_uint16_t>
 80160e0:	4038      	ands	r0, r7
 80160e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160e6:	f104 0110 	add.w	r1, r4, #16
 80160ea:	4628      	mov	r0, r5
 80160ec:	f7fc fac0 	bl	8012670 <ucdr_deserialize_uint32_t>
 80160f0:	6923      	ldr	r3, [r4, #16]
 80160f2:	2b01      	cmp	r3, #1
 80160f4:	d903      	bls.n	80160fe <uxr_deserialize_CLIENT_Representation+0x7e>
 80160f6:	2301      	movs	r3, #1
 80160f8:	2700      	movs	r7, #0
 80160fa:	75ab      	strb	r3, [r5, #22]
 80160fc:	e7eb      	b.n	80160d6 <uxr_deserialize_CLIENT_Representation+0x56>
 80160fe:	b30b      	cbz	r3, 8016144 <uxr_deserialize_CLIENT_Representation+0xc4>
 8016100:	b1f0      	cbz	r0, 8016140 <uxr_deserialize_CLIENT_Representation+0xc0>
 8016102:	46a0      	mov	r8, r4
 8016104:	f04f 0900 	mov.w	r9, #0
 8016108:	e000      	b.n	801610c <uxr_deserialize_CLIENT_Representation+0x8c>
 801610a:	b1ce      	cbz	r6, 8016140 <uxr_deserialize_CLIENT_Representation+0xc0>
 801610c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016110:	f108 0808 	add.w	r8, r8, #8
 8016114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016118:	4628      	mov	r0, r5
 801611a:	f005 f84f 	bl	801b1bc <ucdr_deserialize_string>
 801611e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016122:	4606      	mov	r6, r0
 8016124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016128:	4628      	mov	r0, r5
 801612a:	f109 0901 	add.w	r9, r9, #1
 801612e:	f005 f845 	bl	801b1bc <ucdr_deserialize_string>
 8016132:	6923      	ldr	r3, [r4, #16]
 8016134:	4006      	ands	r6, r0
 8016136:	4599      	cmp	r9, r3
 8016138:	b2f6      	uxtb	r6, r6
 801613a:	d3e6      	bcc.n	801610a <uxr_deserialize_CLIENT_Representation+0x8a>
 801613c:	4037      	ands	r7, r6
 801613e:	e7ca      	b.n	80160d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8016140:	2700      	movs	r7, #0
 8016142:	e7c8      	b.n	80160d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8016144:	4007      	ands	r7, r0
 8016146:	e7c6      	b.n	80160d6 <uxr_deserialize_CLIENT_Representation+0x56>

08016148 <uxr_serialize_AGENT_Representation>:
 8016148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801614c:	2204      	movs	r2, #4
 801614e:	460f      	mov	r7, r1
 8016150:	4605      	mov	r5, r0
 8016152:	f7fb fda5 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016156:	4604      	mov	r4, r0
 8016158:	2202      	movs	r2, #2
 801615a:	1d39      	adds	r1, r7, #4
 801615c:	4628      	mov	r0, r5
 801615e:	f7fb fd9f 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016162:	4020      	ands	r0, r4
 8016164:	2202      	movs	r2, #2
 8016166:	1db9      	adds	r1, r7, #6
 8016168:	b2c4      	uxtb	r4, r0
 801616a:	4628      	mov	r0, r5
 801616c:	f7fb fd98 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016170:	7a39      	ldrb	r1, [r7, #8]
 8016172:	4004      	ands	r4, r0
 8016174:	4628      	mov	r0, r5
 8016176:	f7fb ff07 	bl	8011f88 <ucdr_serialize_bool>
 801617a:	7a3b      	ldrb	r3, [r7, #8]
 801617c:	ea00 0804 	and.w	r8, r0, r4
 8016180:	b913      	cbnz	r3, 8016188 <uxr_serialize_AGENT_Representation+0x40>
 8016182:	4640      	mov	r0, r8
 8016184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016188:	68f9      	ldr	r1, [r7, #12]
 801618a:	4628      	mov	r0, r5
 801618c:	f7fc f940 	bl	8012410 <ucdr_serialize_uint32_t>
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	b303      	cbz	r3, 80161d6 <uxr_serialize_AGENT_Representation+0x8e>
 8016194:	b1d0      	cbz	r0, 80161cc <uxr_serialize_AGENT_Representation+0x84>
 8016196:	463e      	mov	r6, r7
 8016198:	f04f 0900 	mov.w	r9, #0
 801619c:	e000      	b.n	80161a0 <uxr_serialize_AGENT_Representation+0x58>
 801619e:	b1ac      	cbz	r4, 80161cc <uxr_serialize_AGENT_Representation+0x84>
 80161a0:	6931      	ldr	r1, [r6, #16]
 80161a2:	4628      	mov	r0, r5
 80161a4:	f004 fffa 	bl	801b19c <ucdr_serialize_string>
 80161a8:	6971      	ldr	r1, [r6, #20]
 80161aa:	4604      	mov	r4, r0
 80161ac:	4628      	mov	r0, r5
 80161ae:	f004 fff5 	bl	801b19c <ucdr_serialize_string>
 80161b2:	f109 0901 	add.w	r9, r9, #1
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	4004      	ands	r4, r0
 80161ba:	3608      	adds	r6, #8
 80161bc:	4599      	cmp	r9, r3
 80161be:	b2e4      	uxtb	r4, r4
 80161c0:	d3ed      	bcc.n	801619e <uxr_serialize_AGENT_Representation+0x56>
 80161c2:	ea08 0804 	and.w	r8, r8, r4
 80161c6:	4640      	mov	r0, r8
 80161c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161cc:	f04f 0800 	mov.w	r8, #0
 80161d0:	4640      	mov	r0, r8
 80161d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161d6:	ea08 0800 	and.w	r8, r8, r0
 80161da:	e7d2      	b.n	8016182 <uxr_serialize_AGENT_Representation+0x3a>

080161dc <uxr_serialize_DATAWRITER_Representation>:
 80161dc:	b570      	push	{r4, r5, r6, lr}
 80161de:	460d      	mov	r5, r1
 80161e0:	7809      	ldrb	r1, [r1, #0]
 80161e2:	4606      	mov	r6, r0
 80161e4:	f7fb fefe 	bl	8011fe4 <ucdr_serialize_uint8_t>
 80161e8:	4604      	mov	r4, r0
 80161ea:	b130      	cbz	r0, 80161fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 80161ec:	782b      	ldrb	r3, [r5, #0]
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	d00c      	beq.n	801620c <uxr_serialize_DATAWRITER_Representation+0x30>
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	d010      	beq.n	8016218 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d008      	beq.n	801620c <uxr_serialize_DATAWRITER_Representation+0x30>
 80161fa:	2202      	movs	r2, #2
 80161fc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8016200:	4630      	mov	r0, r6
 8016202:	f7fb fd4d 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016206:	4020      	ands	r0, r4
 8016208:	b2c0      	uxtb	r0, r0
 801620a:	bd70      	pop	{r4, r5, r6, pc}
 801620c:	6869      	ldr	r1, [r5, #4]
 801620e:	4630      	mov	r0, r6
 8016210:	f004 ffc4 	bl	801b19c <ucdr_serialize_string>
 8016214:	4604      	mov	r4, r0
 8016216:	e7f0      	b.n	80161fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016218:	4629      	mov	r1, r5
 801621a:	4630      	mov	r0, r6
 801621c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016220:	3104      	adds	r1, #4
 8016222:	f7fd fa61 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 8016226:	4604      	mov	r4, r0
 8016228:	e7e7      	b.n	80161fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 801622a:	bf00      	nop

0801622c <uxr_serialize_ObjectVariant.part.0>:
 801622c:	b570      	push	{r4, r5, r6, lr}
 801622e:	780b      	ldrb	r3, [r1, #0]
 8016230:	460c      	mov	r4, r1
 8016232:	4605      	mov	r5, r0
 8016234:	3b01      	subs	r3, #1
 8016236:	2b0d      	cmp	r3, #13
 8016238:	d854      	bhi.n	80162e4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801623a:	e8df f003 	tbb	[pc, r3]
 801623e:	0730      	.short	0x0730
 8016240:	07071b1b 	.word	0x07071b1b
 8016244:	0c530707 	.word	0x0c530707
 8016248:	494e0c0c 	.word	0x494e0c0c
 801624c:	3104      	adds	r1, #4
 801624e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016252:	f7ff bfc3 	b.w	80161dc <uxr_serialize_DATAWRITER_Representation>
 8016256:	7909      	ldrb	r1, [r1, #4]
 8016258:	f7fb fec4 	bl	8011fe4 <ucdr_serialize_uint8_t>
 801625c:	b1e8      	cbz	r0, 801629a <uxr_serialize_ObjectVariant.part.0+0x6e>
 801625e:	7923      	ldrb	r3, [r4, #4]
 8016260:	2b01      	cmp	r3, #1
 8016262:	d001      	beq.n	8016268 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016264:	2b02      	cmp	r3, #2
 8016266:	d13d      	bne.n	80162e4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016268:	68a1      	ldr	r1, [r4, #8]
 801626a:	4628      	mov	r0, r5
 801626c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016270:	f004 bf94 	b.w	801b19c <ucdr_serialize_string>
 8016274:	7909      	ldrb	r1, [r1, #4]
 8016276:	f7fb feb5 	bl	8011fe4 <ucdr_serialize_uint8_t>
 801627a:	4606      	mov	r6, r0
 801627c:	b120      	cbz	r0, 8016288 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801627e:	7923      	ldrb	r3, [r4, #4]
 8016280:	2b02      	cmp	r3, #2
 8016282:	d039      	beq.n	80162f8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016284:	2b03      	cmp	r3, #3
 8016286:	d02f      	beq.n	80162e8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8016288:	2202      	movs	r2, #2
 801628a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801628e:	4628      	mov	r0, r5
 8016290:	f7fb fd06 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016294:	4030      	ands	r0, r6
 8016296:	b2c0      	uxtb	r0, r0
 8016298:	bd70      	pop	{r4, r5, r6, pc}
 801629a:	2000      	movs	r0, #0
 801629c:	bd70      	pop	{r4, r5, r6, pc}
 801629e:	7909      	ldrb	r1, [r1, #4]
 80162a0:	f7fb fea0 	bl	8011fe4 <ucdr_serialize_uint8_t>
 80162a4:	4606      	mov	r6, r0
 80162a6:	b158      	cbz	r0, 80162c0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80162a8:	7923      	ldrb	r3, [r4, #4]
 80162aa:	2b02      	cmp	r3, #2
 80162ac:	d003      	beq.n	80162b6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80162ae:	2b03      	cmp	r3, #3
 80162b0:	d028      	beq.n	8016304 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80162b2:	2b01      	cmp	r3, #1
 80162b4:	d104      	bne.n	80162c0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80162b6:	68a1      	ldr	r1, [r4, #8]
 80162b8:	4628      	mov	r0, r5
 80162ba:	f004 ff6f 	bl	801b19c <ucdr_serialize_string>
 80162be:	4606      	mov	r6, r0
 80162c0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80162c4:	4628      	mov	r0, r5
 80162c6:	f7fc fbc9 	bl	8012a5c <ucdr_serialize_int16_t>
 80162ca:	4030      	ands	r0, r6
 80162cc:	b2c0      	uxtb	r0, r0
 80162ce:	bd70      	pop	{r4, r5, r6, pc}
 80162d0:	3104      	adds	r1, #4
 80162d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162d6:	f7ff be7b 	b.w	8015fd0 <uxr_serialize_CLIENT_Representation>
 80162da:	3104      	adds	r1, #4
 80162dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162e0:	f7ff bf32 	b.w	8016148 <uxr_serialize_AGENT_Representation>
 80162e4:	2001      	movs	r0, #1
 80162e6:	bd70      	pop	{r4, r5, r6, pc}
 80162e8:	68a2      	ldr	r2, [r4, #8]
 80162ea:	f104 010c 	add.w	r1, r4, #12
 80162ee:	4628      	mov	r0, r5
 80162f0:	f7fd f9fa 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 80162f4:	4606      	mov	r6, r0
 80162f6:	e7c7      	b.n	8016288 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80162f8:	68a1      	ldr	r1, [r4, #8]
 80162fa:	4628      	mov	r0, r5
 80162fc:	f004 ff4e 	bl	801b19c <ucdr_serialize_string>
 8016300:	4606      	mov	r6, r0
 8016302:	e7c1      	b.n	8016288 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016304:	68a2      	ldr	r2, [r4, #8]
 8016306:	f104 010c 	add.w	r1, r4, #12
 801630a:	4628      	mov	r0, r5
 801630c:	f7fd f9ec 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 8016310:	4606      	mov	r6, r0
 8016312:	e7d5      	b.n	80162c0 <uxr_serialize_ObjectVariant.part.0+0x94>

08016314 <uxr_deserialize_DATAWRITER_Representation>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	4606      	mov	r6, r0
 8016318:	460d      	mov	r5, r1
 801631a:	f7fb fe79 	bl	8012010 <ucdr_deserialize_uint8_t>
 801631e:	4604      	mov	r4, r0
 8016320:	b130      	cbz	r0, 8016330 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016322:	782b      	ldrb	r3, [r5, #0]
 8016324:	2b02      	cmp	r3, #2
 8016326:	d00c      	beq.n	8016342 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016328:	2b03      	cmp	r3, #3
 801632a:	d012      	beq.n	8016352 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801632c:	2b01      	cmp	r3, #1
 801632e:	d008      	beq.n	8016342 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016330:	2202      	movs	r2, #2
 8016332:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8016336:	4630      	mov	r0, r6
 8016338:	f7fb fd16 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801633c:	4020      	ands	r0, r4
 801633e:	b2c0      	uxtb	r0, r0
 8016340:	bd70      	pop	{r4, r5, r6, pc}
 8016342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016346:	6869      	ldr	r1, [r5, #4]
 8016348:	4630      	mov	r0, r6
 801634a:	f004 ff37 	bl	801b1bc <ucdr_deserialize_string>
 801634e:	4604      	mov	r4, r0
 8016350:	e7ee      	b.n	8016330 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016352:	1d2b      	adds	r3, r5, #4
 8016354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016358:	f105 0108 	add.w	r1, r5, #8
 801635c:	4630      	mov	r0, r6
 801635e:	f7fd f9d5 	bl	801370c <ucdr_deserialize_sequence_uint8_t>
 8016362:	4604      	mov	r4, r0
 8016364:	e7e4      	b.n	8016330 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016366:	bf00      	nop

08016368 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016368:	b570      	push	{r4, r5, r6, lr}
 801636a:	460d      	mov	r5, r1
 801636c:	7809      	ldrb	r1, [r1, #0]
 801636e:	4606      	mov	r6, r0
 8016370:	f7fb fe0a 	bl	8011f88 <ucdr_serialize_bool>
 8016374:	782b      	ldrb	r3, [r5, #0]
 8016376:	4604      	mov	r4, r0
 8016378:	b94b      	cbnz	r3, 801638e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801637a:	7a29      	ldrb	r1, [r5, #8]
 801637c:	4630      	mov	r0, r6
 801637e:	f7fb fe03 	bl	8011f88 <ucdr_serialize_bool>
 8016382:	7a2b      	ldrb	r3, [r5, #8]
 8016384:	4004      	ands	r4, r0
 8016386:	b2e4      	uxtb	r4, r4
 8016388:	b943      	cbnz	r3, 801639c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801638a:	4620      	mov	r0, r4
 801638c:	bd70      	pop	{r4, r5, r6, pc}
 801638e:	6869      	ldr	r1, [r5, #4]
 8016390:	4630      	mov	r0, r6
 8016392:	f004 ff03 	bl	801b19c <ucdr_serialize_string>
 8016396:	4004      	ands	r4, r0
 8016398:	b2e4      	uxtb	r4, r4
 801639a:	e7ee      	b.n	801637a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801639c:	68e9      	ldr	r1, [r5, #12]
 801639e:	4630      	mov	r0, r6
 80163a0:	f004 fefc 	bl	801b19c <ucdr_serialize_string>
 80163a4:	4004      	ands	r4, r0
 80163a6:	4620      	mov	r0, r4
 80163a8:	bd70      	pop	{r4, r5, r6, pc}
 80163aa:	bf00      	nop

080163ac <uxr_serialize_OBJK_Topic_Binary>:
 80163ac:	b570      	push	{r4, r5, r6, lr}
 80163ae:	460d      	mov	r5, r1
 80163b0:	4606      	mov	r6, r0
 80163b2:	6809      	ldr	r1, [r1, #0]
 80163b4:	f004 fef2 	bl	801b19c <ucdr_serialize_string>
 80163b8:	4604      	mov	r4, r0
 80163ba:	7929      	ldrb	r1, [r5, #4]
 80163bc:	4630      	mov	r0, r6
 80163be:	f7fb fde3 	bl	8011f88 <ucdr_serialize_bool>
 80163c2:	792b      	ldrb	r3, [r5, #4]
 80163c4:	4004      	ands	r4, r0
 80163c6:	b2e4      	uxtb	r4, r4
 80163c8:	b943      	cbnz	r3, 80163dc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80163ca:	7b29      	ldrb	r1, [r5, #12]
 80163cc:	4630      	mov	r0, r6
 80163ce:	f7fb fddb 	bl	8011f88 <ucdr_serialize_bool>
 80163d2:	7b2b      	ldrb	r3, [r5, #12]
 80163d4:	4004      	ands	r4, r0
 80163d6:	b93b      	cbnz	r3, 80163e8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80163d8:	4620      	mov	r0, r4
 80163da:	bd70      	pop	{r4, r5, r6, pc}
 80163dc:	68a9      	ldr	r1, [r5, #8]
 80163de:	4630      	mov	r0, r6
 80163e0:	f004 fedc 	bl	801b19c <ucdr_serialize_string>
 80163e4:	4004      	ands	r4, r0
 80163e6:	e7f0      	b.n	80163ca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80163e8:	6929      	ldr	r1, [r5, #16]
 80163ea:	4630      	mov	r0, r6
 80163ec:	f004 fed6 	bl	801b19c <ucdr_serialize_string>
 80163f0:	4004      	ands	r4, r0
 80163f2:	b2e4      	uxtb	r4, r4
 80163f4:	4620      	mov	r0, r4
 80163f6:	bd70      	pop	{r4, r5, r6, pc}

080163f8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80163f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163fc:	460c      	mov	r4, r1
 80163fe:	7809      	ldrb	r1, [r1, #0]
 8016400:	4606      	mov	r6, r0
 8016402:	f7fb fdc1 	bl	8011f88 <ucdr_serialize_bool>
 8016406:	7823      	ldrb	r3, [r4, #0]
 8016408:	4605      	mov	r5, r0
 801640a:	b96b      	cbnz	r3, 8016428 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801640c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8016410:	4630      	mov	r0, r6
 8016412:	f7fb fdb9 	bl	8011f88 <ucdr_serialize_bool>
 8016416:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801641a:	4005      	ands	r5, r0
 801641c:	b2ed      	uxtb	r5, r5
 801641e:	2b00      	cmp	r3, #0
 8016420:	d169      	bne.n	80164f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8016422:	4628      	mov	r0, r5
 8016424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016428:	6861      	ldr	r1, [r4, #4]
 801642a:	4630      	mov	r0, r6
 801642c:	f7fb fff0 	bl	8012410 <ucdr_serialize_uint32_t>
 8016430:	6863      	ldr	r3, [r4, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d06b      	beq.n	801650e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8016436:	2800      	cmp	r0, #0
 8016438:	d067      	beq.n	801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801643a:	68a1      	ldr	r1, [r4, #8]
 801643c:	4630      	mov	r0, r6
 801643e:	f004 fead 	bl	801b19c <ucdr_serialize_string>
 8016442:	6863      	ldr	r3, [r4, #4]
 8016444:	2b01      	cmp	r3, #1
 8016446:	d953      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016448:	2800      	cmp	r0, #0
 801644a:	d05e      	beq.n	801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801644c:	68e1      	ldr	r1, [r4, #12]
 801644e:	4630      	mov	r0, r6
 8016450:	f004 fea4 	bl	801b19c <ucdr_serialize_string>
 8016454:	6863      	ldr	r3, [r4, #4]
 8016456:	2b02      	cmp	r3, #2
 8016458:	d94a      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801645a:	2800      	cmp	r0, #0
 801645c:	d055      	beq.n	801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801645e:	6921      	ldr	r1, [r4, #16]
 8016460:	4630      	mov	r0, r6
 8016462:	f004 fe9b 	bl	801b19c <ucdr_serialize_string>
 8016466:	6863      	ldr	r3, [r4, #4]
 8016468:	2b03      	cmp	r3, #3
 801646a:	d941      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801646c:	2800      	cmp	r0, #0
 801646e:	d04c      	beq.n	801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016470:	6961      	ldr	r1, [r4, #20]
 8016472:	4630      	mov	r0, r6
 8016474:	f004 fe92 	bl	801b19c <ucdr_serialize_string>
 8016478:	6863      	ldr	r3, [r4, #4]
 801647a:	2b04      	cmp	r3, #4
 801647c:	d938      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801647e:	2800      	cmp	r0, #0
 8016480:	d043      	beq.n	801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016482:	69a1      	ldr	r1, [r4, #24]
 8016484:	4630      	mov	r0, r6
 8016486:	f004 fe89 	bl	801b19c <ucdr_serialize_string>
 801648a:	6863      	ldr	r3, [r4, #4]
 801648c:	2b05      	cmp	r3, #5
 801648e:	d92f      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016490:	2800      	cmp	r0, #0
 8016492:	d03a      	beq.n	801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016494:	69e1      	ldr	r1, [r4, #28]
 8016496:	4630      	mov	r0, r6
 8016498:	f004 fe80 	bl	801b19c <ucdr_serialize_string>
 801649c:	6863      	ldr	r3, [r4, #4]
 801649e:	2b06      	cmp	r3, #6
 80164a0:	d926      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164a2:	b390      	cbz	r0, 801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164a4:	6a21      	ldr	r1, [r4, #32]
 80164a6:	4630      	mov	r0, r6
 80164a8:	f004 fe78 	bl	801b19c <ucdr_serialize_string>
 80164ac:	6863      	ldr	r3, [r4, #4]
 80164ae:	2b07      	cmp	r3, #7
 80164b0:	d91e      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164b2:	b350      	cbz	r0, 801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80164b6:	4630      	mov	r0, r6
 80164b8:	f004 fe70 	bl	801b19c <ucdr_serialize_string>
 80164bc:	6863      	ldr	r3, [r4, #4]
 80164be:	2b08      	cmp	r3, #8
 80164c0:	d916      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164c2:	b310      	cbz	r0, 801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80164c6:	4630      	mov	r0, r6
 80164c8:	f004 fe68 	bl	801b19c <ucdr_serialize_string>
 80164cc:	6863      	ldr	r3, [r4, #4]
 80164ce:	2b09      	cmp	r3, #9
 80164d0:	d90e      	bls.n	80164f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164d2:	b1d0      	cbz	r0, 801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164d4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80164d8:	2709      	movs	r7, #9
 80164da:	e000      	b.n	80164de <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80164dc:	b1a8      	cbz	r0, 801650a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164de:	f858 1b04 	ldr.w	r1, [r8], #4
 80164e2:	4630      	mov	r0, r6
 80164e4:	f004 fe5a 	bl	801b19c <ucdr_serialize_string>
 80164e8:	3701      	adds	r7, #1
 80164ea:	6862      	ldr	r2, [r4, #4]
 80164ec:	4297      	cmp	r7, r2
 80164ee:	d3f5      	bcc.n	80164dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80164f0:	4005      	ands	r5, r0
 80164f2:	b2ed      	uxtb	r5, r5
 80164f4:	e78a      	b.n	801640c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80164f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80164f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80164fc:	4630      	mov	r0, r6
 80164fe:	f7fd f8f3 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 8016502:	4005      	ands	r5, r0
 8016504:	4628      	mov	r0, r5
 8016506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801650a:	2500      	movs	r5, #0
 801650c:	e77e      	b.n	801640c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801650e:	4028      	ands	r0, r5
 8016510:	b2c5      	uxtb	r5, r0
 8016512:	e77b      	b.n	801640c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08016514 <uxr_serialize_OBJK_Publisher_Binary>:
 8016514:	b570      	push	{r4, r5, r6, lr}
 8016516:	460d      	mov	r5, r1
 8016518:	7809      	ldrb	r1, [r1, #0]
 801651a:	4606      	mov	r6, r0
 801651c:	f7fb fd34 	bl	8011f88 <ucdr_serialize_bool>
 8016520:	782b      	ldrb	r3, [r5, #0]
 8016522:	4604      	mov	r4, r0
 8016524:	b94b      	cbnz	r3, 801653a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8016526:	7a29      	ldrb	r1, [r5, #8]
 8016528:	4630      	mov	r0, r6
 801652a:	f7fb fd2d 	bl	8011f88 <ucdr_serialize_bool>
 801652e:	7a2b      	ldrb	r3, [r5, #8]
 8016530:	4004      	ands	r4, r0
 8016532:	b2e4      	uxtb	r4, r4
 8016534:	b943      	cbnz	r3, 8016548 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8016536:	4620      	mov	r0, r4
 8016538:	bd70      	pop	{r4, r5, r6, pc}
 801653a:	6869      	ldr	r1, [r5, #4]
 801653c:	4630      	mov	r0, r6
 801653e:	f004 fe2d 	bl	801b19c <ucdr_serialize_string>
 8016542:	4004      	ands	r4, r0
 8016544:	b2e4      	uxtb	r4, r4
 8016546:	e7ee      	b.n	8016526 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8016548:	f105 010c 	add.w	r1, r5, #12
 801654c:	4630      	mov	r0, r6
 801654e:	f7ff ff53 	bl	80163f8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8016552:	4004      	ands	r4, r0
 8016554:	4620      	mov	r0, r4
 8016556:	bd70      	pop	{r4, r5, r6, pc}

08016558 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8016558:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801655c:	4688      	mov	r8, r1
 801655e:	4681      	mov	r9, r0
 8016560:	8809      	ldrh	r1, [r1, #0]
 8016562:	f7fb fd6b 	bl	801203c <ucdr_serialize_uint16_t>
 8016566:	4606      	mov	r6, r0
 8016568:	f898 1002 	ldrb.w	r1, [r8, #2]
 801656c:	4648      	mov	r0, r9
 801656e:	f7fb fd0b 	bl	8011f88 <ucdr_serialize_bool>
 8016572:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016576:	4006      	ands	r6, r0
 8016578:	b2f5      	uxtb	r5, r6
 801657a:	b9eb      	cbnz	r3, 80165b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801657c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016580:	4648      	mov	r0, r9
 8016582:	f7fb fd01 	bl	8011f88 <ucdr_serialize_bool>
 8016586:	f898 3006 	ldrb.w	r3, [r8, #6]
 801658a:	4005      	ands	r5, r0
 801658c:	bb7b      	cbnz	r3, 80165ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801658e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8016592:	4648      	mov	r0, r9
 8016594:	f7fb fcf8 	bl	8011f88 <ucdr_serialize_bool>
 8016598:	f898 300c 	ldrb.w	r3, [r8, #12]
 801659c:	4005      	ands	r5, r0
 801659e:	b9f3      	cbnz	r3, 80165de <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80165a0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80165a4:	4648      	mov	r0, r9
 80165a6:	f7fb fcef 	bl	8011f88 <ucdr_serialize_bool>
 80165aa:	f898 3014 	ldrb.w	r3, [r8, #20]
 80165ae:	4005      	ands	r5, r0
 80165b0:	b94b      	cbnz	r3, 80165c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80165b2:	4628      	mov	r0, r5
 80165b4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80165b8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80165bc:	4648      	mov	r0, r9
 80165be:	f7fb fd3d 	bl	801203c <ucdr_serialize_uint16_t>
 80165c2:	4005      	ands	r5, r0
 80165c4:	e7da      	b.n	801657c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80165c6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80165ca:	f108 011c 	add.w	r1, r8, #28
 80165ce:	4648      	mov	r0, r9
 80165d0:	f7fd f88a 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 80165d4:	4028      	ands	r0, r5
 80165d6:	b2c5      	uxtb	r5, r0
 80165d8:	4628      	mov	r0, r5
 80165da:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80165de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80165e2:	4648      	mov	r0, r9
 80165e4:	f7fb ff14 	bl	8012410 <ucdr_serialize_uint32_t>
 80165e8:	4028      	ands	r0, r5
 80165ea:	b2c5      	uxtb	r5, r0
 80165ec:	e7d8      	b.n	80165a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80165ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80165f2:	4648      	mov	r0, r9
 80165f4:	f7fb ff0c 	bl	8012410 <ucdr_serialize_uint32_t>
 80165f8:	4028      	ands	r0, r5
 80165fa:	b2c5      	uxtb	r5, r0
 80165fc:	e7c7      	b.n	801658e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80165fe:	bf00      	nop

08016600 <uxr_serialize_OBJK_DataWriter_Binary>:
 8016600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016602:	2202      	movs	r2, #2
 8016604:	460d      	mov	r5, r1
 8016606:	4606      	mov	r6, r0
 8016608:	f7fb fb4a 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 801660c:	4604      	mov	r4, r0
 801660e:	78a9      	ldrb	r1, [r5, #2]
 8016610:	4630      	mov	r0, r6
 8016612:	f7fb fcb9 	bl	8011f88 <ucdr_serialize_bool>
 8016616:	78ab      	ldrb	r3, [r5, #2]
 8016618:	4004      	ands	r4, r0
 801661a:	b2e4      	uxtb	r4, r4
 801661c:	b90b      	cbnz	r3, 8016622 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801661e:	4620      	mov	r0, r4
 8016620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016622:	f105 0108 	add.w	r1, r5, #8
 8016626:	4630      	mov	r0, r6
 8016628:	f7ff ff96 	bl	8016558 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801662c:	4607      	mov	r7, r0
 801662e:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8016632:	4630      	mov	r0, r6
 8016634:	f7fb fca8 	bl	8011f88 <ucdr_serialize_bool>
 8016638:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801663c:	4038      	ands	r0, r7
 801663e:	b2c7      	uxtb	r7, r0
 8016640:	b913      	cbnz	r3, 8016648 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8016642:	403c      	ands	r4, r7
 8016644:	4620      	mov	r0, r4
 8016646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016648:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801664c:	4630      	mov	r0, r6
 801664e:	f7fc f935 	bl	80128bc <ucdr_serialize_uint64_t>
 8016652:	4007      	ands	r7, r0
 8016654:	e7f5      	b.n	8016642 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8016656:	bf00      	nop

08016658 <uxr_deserialize_ObjectVariant>:
 8016658:	b570      	push	{r4, r5, r6, lr}
 801665a:	4605      	mov	r5, r0
 801665c:	460e      	mov	r6, r1
 801665e:	f7fb fcd7 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016662:	b168      	cbz	r0, 8016680 <uxr_deserialize_ObjectVariant+0x28>
 8016664:	7833      	ldrb	r3, [r6, #0]
 8016666:	4604      	mov	r4, r0
 8016668:	3b01      	subs	r3, #1
 801666a:	2b0d      	cmp	r3, #13
 801666c:	d809      	bhi.n	8016682 <uxr_deserialize_ObjectVariant+0x2a>
 801666e:	e8df f003 	tbb	[pc, r3]
 8016672:	0a41      	.short	0x0a41
 8016674:	0a0a2323 	.word	0x0a0a2323
 8016678:	10080a0a 	.word	0x10080a0a
 801667c:	565c1010 	.word	0x565c1010
 8016680:	2400      	movs	r4, #0
 8016682:	4620      	mov	r0, r4
 8016684:	bd70      	pop	{r4, r5, r6, pc}
 8016686:	1d31      	adds	r1, r6, #4
 8016688:	4628      	mov	r0, r5
 801668a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801668e:	f7ff be41 	b.w	8016314 <uxr_deserialize_DATAWRITER_Representation>
 8016692:	1d31      	adds	r1, r6, #4
 8016694:	4628      	mov	r0, r5
 8016696:	f7fb fcbb 	bl	8012010 <ucdr_deserialize_uint8_t>
 801669a:	2800      	cmp	r0, #0
 801669c:	d0f0      	beq.n	8016680 <uxr_deserialize_ObjectVariant+0x28>
 801669e:	7933      	ldrb	r3, [r6, #4]
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d001      	beq.n	80166a8 <uxr_deserialize_ObjectVariant+0x50>
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	d1ec      	bne.n	8016682 <uxr_deserialize_ObjectVariant+0x2a>
 80166a8:	68b1      	ldr	r1, [r6, #8]
 80166aa:	4628      	mov	r0, r5
 80166ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166b4:	f004 bd82 	b.w	801b1bc <ucdr_deserialize_string>
 80166b8:	1d31      	adds	r1, r6, #4
 80166ba:	4628      	mov	r0, r5
 80166bc:	f7fb fca8 	bl	8012010 <ucdr_deserialize_uint8_t>
 80166c0:	4604      	mov	r4, r0
 80166c2:	b170      	cbz	r0, 80166e2 <uxr_deserialize_ObjectVariant+0x8a>
 80166c4:	7933      	ldrb	r3, [r6, #4]
 80166c6:	2b02      	cmp	r3, #2
 80166c8:	d04c      	beq.n	8016764 <uxr_deserialize_ObjectVariant+0x10c>
 80166ca:	2b03      	cmp	r3, #3
 80166cc:	d109      	bne.n	80166e2 <uxr_deserialize_ObjectVariant+0x8a>
 80166ce:	f106 0308 	add.w	r3, r6, #8
 80166d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166d6:	f106 010c 	add.w	r1, r6, #12
 80166da:	4628      	mov	r0, r5
 80166dc:	f7fd f816 	bl	801370c <ucdr_deserialize_sequence_uint8_t>
 80166e0:	4604      	mov	r4, r0
 80166e2:	2202      	movs	r2, #2
 80166e4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80166e8:	4628      	mov	r0, r5
 80166ea:	f7fb fb3d 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 80166ee:	4020      	ands	r0, r4
 80166f0:	b2c4      	uxtb	r4, r0
 80166f2:	e7c6      	b.n	8016682 <uxr_deserialize_ObjectVariant+0x2a>
 80166f4:	1d31      	adds	r1, r6, #4
 80166f6:	4628      	mov	r0, r5
 80166f8:	f7fb fc8a 	bl	8012010 <ucdr_deserialize_uint8_t>
 80166fc:	4604      	mov	r4, r0
 80166fe:	b130      	cbz	r0, 801670e <uxr_deserialize_ObjectVariant+0xb6>
 8016700:	7933      	ldrb	r3, [r6, #4]
 8016702:	2b02      	cmp	r3, #2
 8016704:	d036      	beq.n	8016774 <uxr_deserialize_ObjectVariant+0x11c>
 8016706:	2b03      	cmp	r3, #3
 8016708:	d03c      	beq.n	8016784 <uxr_deserialize_ObjectVariant+0x12c>
 801670a:	2b01      	cmp	r3, #1
 801670c:	d032      	beq.n	8016774 <uxr_deserialize_ObjectVariant+0x11c>
 801670e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8016712:	4628      	mov	r0, r5
 8016714:	f7fc fa22 	bl	8012b5c <ucdr_deserialize_int16_t>
 8016718:	4020      	ands	r0, r4
 801671a:	b2c4      	uxtb	r4, r0
 801671c:	e7b1      	b.n	8016682 <uxr_deserialize_ObjectVariant+0x2a>
 801671e:	1d31      	adds	r1, r6, #4
 8016720:	4628      	mov	r0, r5
 8016722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016726:	f7ff bcab 	b.w	8016080 <uxr_deserialize_CLIENT_Representation>
 801672a:	2204      	movs	r2, #4
 801672c:	4628      	mov	r0, r5
 801672e:	18b1      	adds	r1, r6, r2
 8016730:	f7fb fb1a 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016734:	4604      	mov	r4, r0
 8016736:	2202      	movs	r2, #2
 8016738:	f106 0108 	add.w	r1, r6, #8
 801673c:	4628      	mov	r0, r5
 801673e:	f7fb fb13 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016742:	4004      	ands	r4, r0
 8016744:	2202      	movs	r2, #2
 8016746:	f106 010a 	add.w	r1, r6, #10
 801674a:	4628      	mov	r0, r5
 801674c:	b2e4      	uxtb	r4, r4
 801674e:	f7fb fb0b 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016752:	4603      	mov	r3, r0
 8016754:	f106 010c 	add.w	r1, r6, #12
 8016758:	4628      	mov	r0, r5
 801675a:	401c      	ands	r4, r3
 801675c:	f7fb fc2a 	bl	8011fb4 <ucdr_deserialize_bool>
 8016760:	4004      	ands	r4, r0
 8016762:	e78e      	b.n	8016682 <uxr_deserialize_ObjectVariant+0x2a>
 8016764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016768:	68b1      	ldr	r1, [r6, #8]
 801676a:	4628      	mov	r0, r5
 801676c:	f004 fd26 	bl	801b1bc <ucdr_deserialize_string>
 8016770:	4604      	mov	r4, r0
 8016772:	e7b6      	b.n	80166e2 <uxr_deserialize_ObjectVariant+0x8a>
 8016774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016778:	68b1      	ldr	r1, [r6, #8]
 801677a:	4628      	mov	r0, r5
 801677c:	f004 fd1e 	bl	801b1bc <ucdr_deserialize_string>
 8016780:	4604      	mov	r4, r0
 8016782:	e7c4      	b.n	801670e <uxr_deserialize_ObjectVariant+0xb6>
 8016784:	f106 0308 	add.w	r3, r6, #8
 8016788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801678c:	f106 010c 	add.w	r1, r6, #12
 8016790:	4628      	mov	r0, r5
 8016792:	f7fc ffbb 	bl	801370c <ucdr_deserialize_sequence_uint8_t>
 8016796:	4604      	mov	r4, r0
 8016798:	e7b9      	b.n	801670e <uxr_deserialize_ObjectVariant+0xb6>
 801679a:	bf00      	nop

0801679c <uxr_deserialize_BaseObjectRequest>:
 801679c:	b570      	push	{r4, r5, r6, lr}
 801679e:	2202      	movs	r2, #2
 80167a0:	4605      	mov	r5, r0
 80167a2:	460e      	mov	r6, r1
 80167a4:	f7fb fae0 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 80167a8:	2202      	movs	r2, #2
 80167aa:	4604      	mov	r4, r0
 80167ac:	4628      	mov	r0, r5
 80167ae:	18b1      	adds	r1, r6, r2
 80167b0:	f7fb fada 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 80167b4:	4020      	ands	r0, r4
 80167b6:	b2c0      	uxtb	r0, r0
 80167b8:	bd70      	pop	{r4, r5, r6, pc}
 80167ba:	bf00      	nop

080167bc <uxr_serialize_ActivityInfoVariant>:
 80167bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167c0:	460e      	mov	r6, r1
 80167c2:	7809      	ldrb	r1, [r1, #0]
 80167c4:	4680      	mov	r8, r0
 80167c6:	f7fb fc0d 	bl	8011fe4 <ucdr_serialize_uint8_t>
 80167ca:	4607      	mov	r7, r0
 80167cc:	b138      	cbz	r0, 80167de <uxr_serialize_ActivityInfoVariant+0x22>
 80167ce:	7833      	ldrb	r3, [r6, #0]
 80167d0:	2b06      	cmp	r3, #6
 80167d2:	f000 8081 	beq.w	80168d8 <uxr_serialize_ActivityInfoVariant+0x11c>
 80167d6:	2b0d      	cmp	r3, #13
 80167d8:	d014      	beq.n	8016804 <uxr_serialize_ActivityInfoVariant+0x48>
 80167da:	2b05      	cmp	r3, #5
 80167dc:	d002      	beq.n	80167e4 <uxr_serialize_ActivityInfoVariant+0x28>
 80167de:	4638      	mov	r0, r7
 80167e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167e4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80167e8:	4640      	mov	r0, r8
 80167ea:	f7fc f937 	bl	8012a5c <ucdr_serialize_int16_t>
 80167ee:	4607      	mov	r7, r0
 80167f0:	4640      	mov	r0, r8
 80167f2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80167f6:	f7fc f861 	bl	80128bc <ucdr_serialize_uint64_t>
 80167fa:	4038      	ands	r0, r7
 80167fc:	b2c7      	uxtb	r7, r0
 80167fe:	4638      	mov	r0, r7
 8016800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016804:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016808:	4640      	mov	r0, r8
 801680a:	f7fc f927 	bl	8012a5c <ucdr_serialize_int16_t>
 801680e:	68f1      	ldr	r1, [r6, #12]
 8016810:	4607      	mov	r7, r0
 8016812:	4640      	mov	r0, r8
 8016814:	f7fb fdfc 	bl	8012410 <ucdr_serialize_uint32_t>
 8016818:	68f3      	ldr	r3, [r6, #12]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d0ed      	beq.n	80167fa <uxr_serialize_ActivityInfoVariant+0x3e>
 801681e:	b318      	cbz	r0, 8016868 <uxr_serialize_ActivityInfoVariant+0xac>
 8016820:	f106 090c 	add.w	r9, r6, #12
 8016824:	2400      	movs	r4, #0
 8016826:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801682a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801682e:	7c29      	ldrb	r1, [r5, #16]
 8016830:	4640      	mov	r0, r8
 8016832:	f7fb fbd7 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016836:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801683a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801683e:	2800      	cmp	r0, #0
 8016840:	d051      	beq.n	80168e6 <uxr_serialize_ActivityInfoVariant+0x12a>
 8016842:	7c2b      	ldrb	r3, [r5, #16]
 8016844:	00c9      	lsls	r1, r1, #3
 8016846:	2b03      	cmp	r3, #3
 8016848:	d854      	bhi.n	80168f4 <uxr_serialize_ActivityInfoVariant+0x138>
 801684a:	e8df f003 	tbb	[pc, r3]
 801684e:	2133      	.short	0x2133
 8016850:	020f      	.short	0x020f
 8016852:	4449      	add	r1, r9
 8016854:	4640      	mov	r0, r8
 8016856:	6889      	ldr	r1, [r1, #8]
 8016858:	f004 fca0 	bl	801b19c <ucdr_serialize_string>
 801685c:	3401      	adds	r4, #1
 801685e:	68f2      	ldr	r2, [r6, #12]
 8016860:	4294      	cmp	r4, r2
 8016862:	d244      	bcs.n	80168ee <uxr_serialize_ActivityInfoVariant+0x132>
 8016864:	2800      	cmp	r0, #0
 8016866:	d1de      	bne.n	8016826 <uxr_serialize_ActivityInfoVariant+0x6a>
 8016868:	2700      	movs	r7, #0
 801686a:	e7b8      	b.n	80167de <uxr_serialize_ActivityInfoVariant+0x22>
 801686c:	3108      	adds	r1, #8
 801686e:	44a2      	add	sl, r4
 8016870:	2210      	movs	r2, #16
 8016872:	4640      	mov	r0, r8
 8016874:	4449      	add	r1, r9
 8016876:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801687a:	f7fb fa11 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 801687e:	4605      	mov	r5, r0
 8016880:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8016884:	4640      	mov	r0, r8
 8016886:	f7fb fdc3 	bl	8012410 <ucdr_serialize_uint32_t>
 801688a:	4028      	ands	r0, r5
 801688c:	b2c0      	uxtb	r0, r0
 801688e:	e7e5      	b.n	801685c <uxr_serialize_ActivityInfoVariant+0xa0>
 8016890:	3108      	adds	r1, #8
 8016892:	44a2      	add	sl, r4
 8016894:	2204      	movs	r2, #4
 8016896:	4640      	mov	r0, r8
 8016898:	4449      	add	r1, r9
 801689a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801689e:	f7fb f9ff 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 80168a2:	4605      	mov	r5, r0
 80168a4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80168a8:	4640      	mov	r0, r8
 80168aa:	f7fb fbc7 	bl	801203c <ucdr_serialize_uint16_t>
 80168ae:	4028      	ands	r0, r5
 80168b0:	b2c0      	uxtb	r0, r0
 80168b2:	e7d3      	b.n	801685c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168b4:	3108      	adds	r1, #8
 80168b6:	44a2      	add	sl, r4
 80168b8:	2202      	movs	r2, #2
 80168ba:	4640      	mov	r0, r8
 80168bc:	4449      	add	r1, r9
 80168be:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80168c2:	f7fb f9ed 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 80168c6:	4605      	mov	r5, r0
 80168c8:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80168cc:	4640      	mov	r0, r8
 80168ce:	f7fb fb89 	bl	8011fe4 <ucdr_serialize_uint8_t>
 80168d2:	4028      	ands	r0, r5
 80168d4:	b2c0      	uxtb	r0, r0
 80168d6:	e7c1      	b.n	801685c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168d8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80168dc:	4640      	mov	r0, r8
 80168de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e2:	f7fc b8bb 	b.w	8012a5c <ucdr_serialize_int16_t>
 80168e6:	3401      	adds	r4, #1
 80168e8:	68f2      	ldr	r2, [r6, #12]
 80168ea:	42a2      	cmp	r2, r4
 80168ec:	d8bc      	bhi.n	8016868 <uxr_serialize_ActivityInfoVariant+0xac>
 80168ee:	4007      	ands	r7, r0
 80168f0:	b2ff      	uxtb	r7, r7
 80168f2:	e774      	b.n	80167de <uxr_serialize_ActivityInfoVariant+0x22>
 80168f4:	3401      	adds	r4, #1
 80168f6:	68f3      	ldr	r3, [r6, #12]
 80168f8:	3518      	adds	r5, #24
 80168fa:	429c      	cmp	r4, r3
 80168fc:	d397      	bcc.n	801682e <uxr_serialize_ActivityInfoVariant+0x72>
 80168fe:	e76e      	b.n	80167de <uxr_serialize_ActivityInfoVariant+0x22>

08016900 <uxr_deserialize_BaseObjectReply>:
 8016900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016904:	2202      	movs	r2, #2
 8016906:	4606      	mov	r6, r0
 8016908:	460f      	mov	r7, r1
 801690a:	f7fb fa2d 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801690e:	2202      	movs	r2, #2
 8016910:	4605      	mov	r5, r0
 8016912:	4630      	mov	r0, r6
 8016914:	18b9      	adds	r1, r7, r2
 8016916:	f7fb fa27 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801691a:	4680      	mov	r8, r0
 801691c:	1d39      	adds	r1, r7, #4
 801691e:	4630      	mov	r0, r6
 8016920:	f7fb fb76 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016924:	ea05 0508 	and.w	r5, r5, r8
 8016928:	4604      	mov	r4, r0
 801692a:	1d79      	adds	r1, r7, #5
 801692c:	4630      	mov	r0, r6
 801692e:	402c      	ands	r4, r5
 8016930:	f7fb fb6e 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016934:	4020      	ands	r0, r4
 8016936:	b2c0      	uxtb	r0, r0
 8016938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801693c <uxr_serialize_ReadSpecification>:
 801693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801693e:	460e      	mov	r6, r1
 8016940:	4607      	mov	r7, r0
 8016942:	7809      	ldrb	r1, [r1, #0]
 8016944:	f7fb fb4e 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016948:	4604      	mov	r4, r0
 801694a:	7871      	ldrb	r1, [r6, #1]
 801694c:	4638      	mov	r0, r7
 801694e:	f7fb fb49 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016952:	4004      	ands	r4, r0
 8016954:	78b1      	ldrb	r1, [r6, #2]
 8016956:	4638      	mov	r0, r7
 8016958:	f7fb fb16 	bl	8011f88 <ucdr_serialize_bool>
 801695c:	78b3      	ldrb	r3, [r6, #2]
 801695e:	b2e4      	uxtb	r4, r4
 8016960:	4004      	ands	r4, r0
 8016962:	b943      	cbnz	r3, 8016976 <uxr_serialize_ReadSpecification+0x3a>
 8016964:	7a31      	ldrb	r1, [r6, #8]
 8016966:	4638      	mov	r0, r7
 8016968:	f7fb fb0e 	bl	8011f88 <ucdr_serialize_bool>
 801696c:	7a33      	ldrb	r3, [r6, #8]
 801696e:	4004      	ands	r4, r0
 8016970:	b93b      	cbnz	r3, 8016982 <uxr_serialize_ReadSpecification+0x46>
 8016972:	4620      	mov	r0, r4
 8016974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016976:	6871      	ldr	r1, [r6, #4]
 8016978:	4638      	mov	r0, r7
 801697a:	f004 fc0f 	bl	801b19c <ucdr_serialize_string>
 801697e:	4004      	ands	r4, r0
 8016980:	e7f0      	b.n	8016964 <uxr_serialize_ReadSpecification+0x28>
 8016982:	8971      	ldrh	r1, [r6, #10]
 8016984:	4638      	mov	r0, r7
 8016986:	f7fb fb59 	bl	801203c <ucdr_serialize_uint16_t>
 801698a:	4605      	mov	r5, r0
 801698c:	89b1      	ldrh	r1, [r6, #12]
 801698e:	4638      	mov	r0, r7
 8016990:	f7fb fb54 	bl	801203c <ucdr_serialize_uint16_t>
 8016994:	4005      	ands	r5, r0
 8016996:	89f1      	ldrh	r1, [r6, #14]
 8016998:	4638      	mov	r0, r7
 801699a:	b2ed      	uxtb	r5, r5
 801699c:	f7fb fb4e 	bl	801203c <ucdr_serialize_uint16_t>
 80169a0:	8a31      	ldrh	r1, [r6, #16]
 80169a2:	4025      	ands	r5, r4
 80169a4:	4604      	mov	r4, r0
 80169a6:	4638      	mov	r0, r7
 80169a8:	4025      	ands	r5, r4
 80169aa:	f7fb fb47 	bl	801203c <ucdr_serialize_uint16_t>
 80169ae:	ea00 0405 	and.w	r4, r0, r5
 80169b2:	4620      	mov	r0, r4
 80169b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169b6:	bf00      	nop

080169b8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80169b8:	f7ff bb0a 	b.w	8015fd0 <uxr_serialize_CLIENT_Representation>

080169bc <uxr_serialize_CREATE_Payload>:
 80169bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169be:	2202      	movs	r2, #2
 80169c0:	4607      	mov	r7, r0
 80169c2:	460e      	mov	r6, r1
 80169c4:	f7fb f96c 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 80169c8:	2202      	movs	r2, #2
 80169ca:	4605      	mov	r5, r0
 80169cc:	4638      	mov	r0, r7
 80169ce:	18b1      	adds	r1, r6, r2
 80169d0:	f7fb f966 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 80169d4:	7931      	ldrb	r1, [r6, #4]
 80169d6:	4604      	mov	r4, r0
 80169d8:	4638      	mov	r0, r7
 80169da:	f7fb fb03 	bl	8011fe4 <ucdr_serialize_uint8_t>
 80169de:	b170      	cbz	r0, 80169fe <uxr_serialize_CREATE_Payload+0x42>
 80169e0:	7933      	ldrb	r3, [r6, #4]
 80169e2:	402c      	ands	r4, r5
 80169e4:	3b01      	subs	r3, #1
 80169e6:	b2e4      	uxtb	r4, r4
 80169e8:	2b0d      	cmp	r3, #13
 80169ea:	d809      	bhi.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 80169ec:	e8df f003 	tbb	[pc, r3]
 80169f0:	23230a4c 	.word	0x23230a4c
 80169f4:	0a0a0a0a 	.word	0x0a0a0a0a
 80169f8:	12121208 	.word	0x12121208
 80169fc:	3e45      	.short	0x3e45
 80169fe:	2400      	movs	r4, #0
 8016a00:	4620      	mov	r0, r4
 8016a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a04:	f106 0108 	add.w	r1, r6, #8
 8016a08:	4638      	mov	r0, r7
 8016a0a:	f7ff fbe7 	bl	80161dc <uxr_serialize_DATAWRITER_Representation>
 8016a0e:	4004      	ands	r4, r0
 8016a10:	4620      	mov	r0, r4
 8016a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a14:	7a31      	ldrb	r1, [r6, #8]
 8016a16:	4638      	mov	r0, r7
 8016a18:	f7fb fae4 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	d0ee      	beq.n	80169fe <uxr_serialize_CREATE_Payload+0x42>
 8016a20:	7a33      	ldrb	r3, [r6, #8]
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d001      	beq.n	8016a2a <uxr_serialize_CREATE_Payload+0x6e>
 8016a26:	2b02      	cmp	r3, #2
 8016a28:	d1ea      	bne.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 8016a2a:	68f1      	ldr	r1, [r6, #12]
 8016a2c:	4638      	mov	r0, r7
 8016a2e:	f004 fbb5 	bl	801b19c <ucdr_serialize_string>
 8016a32:	4004      	ands	r4, r0
 8016a34:	e7e4      	b.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 8016a36:	7a31      	ldrb	r1, [r6, #8]
 8016a38:	4638      	mov	r0, r7
 8016a3a:	f7fb fad3 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016a3e:	4605      	mov	r5, r0
 8016a40:	b158      	cbz	r0, 8016a5a <uxr_serialize_CREATE_Payload+0x9e>
 8016a42:	7a33      	ldrb	r3, [r6, #8]
 8016a44:	2b02      	cmp	r3, #2
 8016a46:	d034      	beq.n	8016ab2 <uxr_serialize_CREATE_Payload+0xf6>
 8016a48:	2b03      	cmp	r3, #3
 8016a4a:	d106      	bne.n	8016a5a <uxr_serialize_CREATE_Payload+0x9e>
 8016a4c:	68f2      	ldr	r2, [r6, #12]
 8016a4e:	f106 0110 	add.w	r1, r6, #16
 8016a52:	4638      	mov	r0, r7
 8016a54:	f7fc fe48 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 8016a58:	4605      	mov	r5, r0
 8016a5a:	2202      	movs	r2, #2
 8016a5c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016a60:	4638      	mov	r0, r7
 8016a62:	f7fb f91d 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016a66:	4028      	ands	r0, r5
 8016a68:	4004      	ands	r4, r0
 8016a6a:	e7c9      	b.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 8016a6c:	f106 0108 	add.w	r1, r6, #8
 8016a70:	4638      	mov	r0, r7
 8016a72:	f7ff faad 	bl	8015fd0 <uxr_serialize_CLIENT_Representation>
 8016a76:	4004      	ands	r4, r0
 8016a78:	e7c2      	b.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 8016a7a:	f106 0108 	add.w	r1, r6, #8
 8016a7e:	4638      	mov	r0, r7
 8016a80:	f7ff fb62 	bl	8016148 <uxr_serialize_AGENT_Representation>
 8016a84:	4004      	ands	r4, r0
 8016a86:	e7bb      	b.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 8016a88:	7a31      	ldrb	r1, [r6, #8]
 8016a8a:	4638      	mov	r0, r7
 8016a8c:	f7fb faaa 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016a90:	4605      	mov	r5, r0
 8016a92:	b130      	cbz	r0, 8016aa2 <uxr_serialize_CREATE_Payload+0xe6>
 8016a94:	7a33      	ldrb	r3, [r6, #8]
 8016a96:	2b02      	cmp	r3, #2
 8016a98:	d011      	beq.n	8016abe <uxr_serialize_CREATE_Payload+0x102>
 8016a9a:	2b03      	cmp	r3, #3
 8016a9c:	d015      	beq.n	8016aca <uxr_serialize_CREATE_Payload+0x10e>
 8016a9e:	2b01      	cmp	r3, #1
 8016aa0:	d00d      	beq.n	8016abe <uxr_serialize_CREATE_Payload+0x102>
 8016aa2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	f7fb ffd8 	bl	8012a5c <ucdr_serialize_int16_t>
 8016aac:	4028      	ands	r0, r5
 8016aae:	4004      	ands	r4, r0
 8016ab0:	e7a6      	b.n	8016a00 <uxr_serialize_CREATE_Payload+0x44>
 8016ab2:	68f1      	ldr	r1, [r6, #12]
 8016ab4:	4638      	mov	r0, r7
 8016ab6:	f004 fb71 	bl	801b19c <ucdr_serialize_string>
 8016aba:	4605      	mov	r5, r0
 8016abc:	e7cd      	b.n	8016a5a <uxr_serialize_CREATE_Payload+0x9e>
 8016abe:	68f1      	ldr	r1, [r6, #12]
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f004 fb6b 	bl	801b19c <ucdr_serialize_string>
 8016ac6:	4605      	mov	r5, r0
 8016ac8:	e7eb      	b.n	8016aa2 <uxr_serialize_CREATE_Payload+0xe6>
 8016aca:	68f2      	ldr	r2, [r6, #12]
 8016acc:	f106 0110 	add.w	r1, r6, #16
 8016ad0:	4638      	mov	r0, r7
 8016ad2:	f7fc fe09 	bl	80136e8 <ucdr_serialize_sequence_uint8_t>
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	e7e3      	b.n	8016aa2 <uxr_serialize_CREATE_Payload+0xe6>
 8016ada:	bf00      	nop

08016adc <uxr_deserialize_GET_INFO_Payload>:
 8016adc:	b570      	push	{r4, r5, r6, lr}
 8016ade:	2202      	movs	r2, #2
 8016ae0:	4605      	mov	r5, r0
 8016ae2:	460e      	mov	r6, r1
 8016ae4:	f7fb f940 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016ae8:	2202      	movs	r2, #2
 8016aea:	4604      	mov	r4, r0
 8016aec:	4628      	mov	r0, r5
 8016aee:	18b1      	adds	r1, r6, r2
 8016af0:	f7fb f93a 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016af4:	4603      	mov	r3, r0
 8016af6:	1d31      	adds	r1, r6, #4
 8016af8:	4628      	mov	r0, r5
 8016afa:	401c      	ands	r4, r3
 8016afc:	f7fb fdb8 	bl	8012670 <ucdr_deserialize_uint32_t>
 8016b00:	b2e4      	uxtb	r4, r4
 8016b02:	4020      	ands	r0, r4
 8016b04:	bd70      	pop	{r4, r5, r6, pc}
 8016b06:	bf00      	nop

08016b08 <uxr_serialize_DELETE_Payload>:
 8016b08:	b570      	push	{r4, r5, r6, lr}
 8016b0a:	2202      	movs	r2, #2
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	460e      	mov	r6, r1
 8016b10:	f7fb f8c6 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016b14:	2202      	movs	r2, #2
 8016b16:	4604      	mov	r4, r0
 8016b18:	4628      	mov	r0, r5
 8016b1a:	18b1      	adds	r1, r6, r2
 8016b1c:	f7fb f8c0 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016b20:	4020      	ands	r0, r4
 8016b22:	b2c0      	uxtb	r0, r0
 8016b24:	bd70      	pop	{r4, r5, r6, pc}
 8016b26:	bf00      	nop

08016b28 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b2c:	460e      	mov	r6, r1
 8016b2e:	4605      	mov	r5, r0
 8016b30:	f7fb fa6e 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016b34:	4604      	mov	r4, r0
 8016b36:	1c71      	adds	r1, r6, #1
 8016b38:	4628      	mov	r0, r5
 8016b3a:	f7fb fa69 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016b3e:	2204      	movs	r2, #4
 8016b40:	4681      	mov	r9, r0
 8016b42:	4628      	mov	r0, r5
 8016b44:	18b1      	adds	r1, r6, r2
 8016b46:	f7fb f90f 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016b4a:	f106 0108 	add.w	r1, r6, #8
 8016b4e:	4680      	mov	r8, r0
 8016b50:	2202      	movs	r2, #2
 8016b52:	4628      	mov	r0, r5
 8016b54:	f7fb f908 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016b58:	ea04 0309 	and.w	r3, r4, r9
 8016b5c:	4607      	mov	r7, r0
 8016b5e:	2202      	movs	r2, #2
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	f106 010a 	add.w	r1, r6, #10
 8016b66:	4628      	mov	r0, r5
 8016b68:	ea03 0408 	and.w	r4, r3, r8
 8016b6c:	f7fb f8fc 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016b70:	4603      	mov	r3, r0
 8016b72:	4628      	mov	r0, r5
 8016b74:	403c      	ands	r4, r7
 8016b76:	f106 010c 	add.w	r1, r6, #12
 8016b7a:	461d      	mov	r5, r3
 8016b7c:	f7fb fa1a 	bl	8011fb4 <ucdr_deserialize_bool>
 8016b80:	4025      	ands	r5, r4
 8016b82:	4028      	ands	r0, r5
 8016b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016b88 <uxr_deserialize_STATUS_Payload>:
 8016b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b8c:	2202      	movs	r2, #2
 8016b8e:	4606      	mov	r6, r0
 8016b90:	460f      	mov	r7, r1
 8016b92:	f7fb f8e9 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016b96:	2202      	movs	r2, #2
 8016b98:	4605      	mov	r5, r0
 8016b9a:	4630      	mov	r0, r6
 8016b9c:	18b9      	adds	r1, r7, r2
 8016b9e:	f7fb f8e3 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016ba2:	4680      	mov	r8, r0
 8016ba4:	1d39      	adds	r1, r7, #4
 8016ba6:	4630      	mov	r0, r6
 8016ba8:	f7fb fa32 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016bac:	ea05 0508 	and.w	r5, r5, r8
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	1d79      	adds	r1, r7, #5
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	402c      	ands	r4, r5
 8016bb8:	f7fb fa2a 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016bbc:	4020      	ands	r0, r4
 8016bbe:	b2c0      	uxtb	r0, r0
 8016bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016bc4 <uxr_serialize_INFO_Payload>:
 8016bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc8:	2202      	movs	r2, #2
 8016bca:	460c      	mov	r4, r1
 8016bcc:	4605      	mov	r5, r0
 8016bce:	f7fb f867 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016bd2:	2202      	movs	r2, #2
 8016bd4:	4680      	mov	r8, r0
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	18a1      	adds	r1, r4, r2
 8016bda:	f7fb f861 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016bde:	4607      	mov	r7, r0
 8016be0:	7921      	ldrb	r1, [r4, #4]
 8016be2:	4628      	mov	r0, r5
 8016be4:	f7fb f9fe 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016be8:	ea08 0807 	and.w	r8, r8, r7
 8016bec:	4606      	mov	r6, r0
 8016bee:	7961      	ldrb	r1, [r4, #5]
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	ea06 0608 	and.w	r6, r6, r8
 8016bf6:	f7fb f9f5 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016bfa:	7a21      	ldrb	r1, [r4, #8]
 8016bfc:	4030      	ands	r0, r6
 8016bfe:	b2c7      	uxtb	r7, r0
 8016c00:	4628      	mov	r0, r5
 8016c02:	f7fb f9c1 	bl	8011f88 <ucdr_serialize_bool>
 8016c06:	7a23      	ldrb	r3, [r4, #8]
 8016c08:	4606      	mov	r6, r0
 8016c0a:	b96b      	cbnz	r3, 8016c28 <uxr_serialize_INFO_Payload+0x64>
 8016c0c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8016c10:	4628      	mov	r0, r5
 8016c12:	f7fb f9b9 	bl	8011f88 <ucdr_serialize_bool>
 8016c16:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8016c1a:	4030      	ands	r0, r6
 8016c1c:	b2c6      	uxtb	r6, r0
 8016c1e:	b983      	cbnz	r3, 8016c42 <uxr_serialize_INFO_Payload+0x7e>
 8016c20:	ea06 0007 	and.w	r0, r6, r7
 8016c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c28:	7b21      	ldrb	r1, [r4, #12]
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	f7fb f9da 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016c30:	b188      	cbz	r0, 8016c56 <uxr_serialize_INFO_Payload+0x92>
 8016c32:	f104 010c 	add.w	r1, r4, #12
 8016c36:	4628      	mov	r0, r5
 8016c38:	f7ff faf8 	bl	801622c <uxr_serialize_ObjectVariant.part.0>
 8016c3c:	4030      	ands	r0, r6
 8016c3e:	b2c6      	uxtb	r6, r0
 8016c40:	e7e4      	b.n	8016c0c <uxr_serialize_INFO_Payload+0x48>
 8016c42:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016c46:	4628      	mov	r0, r5
 8016c48:	f7ff fdb8 	bl	80167bc <uxr_serialize_ActivityInfoVariant>
 8016c4c:	4006      	ands	r6, r0
 8016c4e:	ea06 0007 	and.w	r0, r6, r7
 8016c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c56:	4606      	mov	r6, r0
 8016c58:	e7d8      	b.n	8016c0c <uxr_serialize_INFO_Payload+0x48>
 8016c5a:	bf00      	nop

08016c5c <uxr_serialize_READ_DATA_Payload>:
 8016c5c:	b570      	push	{r4, r5, r6, lr}
 8016c5e:	2202      	movs	r2, #2
 8016c60:	4605      	mov	r5, r0
 8016c62:	460e      	mov	r6, r1
 8016c64:	f7fb f81c 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016c68:	2202      	movs	r2, #2
 8016c6a:	4604      	mov	r4, r0
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	18b1      	adds	r1, r6, r2
 8016c70:	f7fb f816 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016c74:	4603      	mov	r3, r0
 8016c76:	1d31      	adds	r1, r6, #4
 8016c78:	4628      	mov	r0, r5
 8016c7a:	401c      	ands	r4, r3
 8016c7c:	f7ff fe5e 	bl	801693c <uxr_serialize_ReadSpecification>
 8016c80:	b2e4      	uxtb	r4, r4
 8016c82:	4020      	ands	r0, r4
 8016c84:	bd70      	pop	{r4, r5, r6, pc}
 8016c86:	bf00      	nop

08016c88 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016c88:	b570      	push	{r4, r5, r6, lr}
 8016c8a:	2202      	movs	r2, #2
 8016c8c:	4605      	mov	r5, r0
 8016c8e:	460e      	mov	r6, r1
 8016c90:	f7fb f806 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016c94:	2202      	movs	r2, #2
 8016c96:	4604      	mov	r4, r0
 8016c98:	4628      	mov	r0, r5
 8016c9a:	18b1      	adds	r1, r6, r2
 8016c9c:	f7fb f800 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016ca0:	4020      	ands	r0, r4
 8016ca2:	b2c0      	uxtb	r0, r0
 8016ca4:	bd70      	pop	{r4, r5, r6, pc}
 8016ca6:	bf00      	nop

08016ca8 <uxr_serialize_ACKNACK_Payload>:
 8016ca8:	b570      	push	{r4, r5, r6, lr}
 8016caa:	460c      	mov	r4, r1
 8016cac:	4605      	mov	r5, r0
 8016cae:	460e      	mov	r6, r1
 8016cb0:	f834 1b02 	ldrh.w	r1, [r4], #2
 8016cb4:	f7fb f9c2 	bl	801203c <ucdr_serialize_uint16_t>
 8016cb8:	2202      	movs	r2, #2
 8016cba:	4621      	mov	r1, r4
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	f7fa ffee 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	7931      	ldrb	r1, [r6, #4]
 8016cc8:	4628      	mov	r0, r5
 8016cca:	401c      	ands	r4, r3
 8016ccc:	f7fb f98a 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016cd0:	b2e4      	uxtb	r4, r4
 8016cd2:	4020      	ands	r0, r4
 8016cd4:	bd70      	pop	{r4, r5, r6, pc}
 8016cd6:	bf00      	nop

08016cd8 <uxr_deserialize_ACKNACK_Payload>:
 8016cd8:	b570      	push	{r4, r5, r6, lr}
 8016cda:	460e      	mov	r6, r1
 8016cdc:	4605      	mov	r5, r0
 8016cde:	f7fb faad 	bl	801223c <ucdr_deserialize_uint16_t>
 8016ce2:	2202      	movs	r2, #2
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	18b1      	adds	r1, r6, r2
 8016cea:	f7fb f83d 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	1d31      	adds	r1, r6, #4
 8016cf2:	4628      	mov	r0, r5
 8016cf4:	401c      	ands	r4, r3
 8016cf6:	f7fb f98b 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016cfa:	b2e4      	uxtb	r4, r4
 8016cfc:	4020      	ands	r0, r4
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}

08016d00 <uxr_serialize_HEARTBEAT_Payload>:
 8016d00:	b570      	push	{r4, r5, r6, lr}
 8016d02:	460d      	mov	r5, r1
 8016d04:	4606      	mov	r6, r0
 8016d06:	8809      	ldrh	r1, [r1, #0]
 8016d08:	f7fb f998 	bl	801203c <ucdr_serialize_uint16_t>
 8016d0c:	8869      	ldrh	r1, [r5, #2]
 8016d0e:	4604      	mov	r4, r0
 8016d10:	4630      	mov	r0, r6
 8016d12:	f7fb f993 	bl	801203c <ucdr_serialize_uint16_t>
 8016d16:	4603      	mov	r3, r0
 8016d18:	7929      	ldrb	r1, [r5, #4]
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	401c      	ands	r4, r3
 8016d1e:	f7fb f961 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016d22:	b2e4      	uxtb	r4, r4
 8016d24:	4020      	ands	r0, r4
 8016d26:	bd70      	pop	{r4, r5, r6, pc}

08016d28 <uxr_deserialize_HEARTBEAT_Payload>:
 8016d28:	b570      	push	{r4, r5, r6, lr}
 8016d2a:	460e      	mov	r6, r1
 8016d2c:	4605      	mov	r5, r0
 8016d2e:	f7fb fa85 	bl	801223c <ucdr_deserialize_uint16_t>
 8016d32:	4604      	mov	r4, r0
 8016d34:	1cb1      	adds	r1, r6, #2
 8016d36:	4628      	mov	r0, r5
 8016d38:	f7fb fa80 	bl	801223c <ucdr_deserialize_uint16_t>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	1d31      	adds	r1, r6, #4
 8016d40:	4628      	mov	r0, r5
 8016d42:	401c      	ands	r4, r3
 8016d44:	f7fb f964 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016d48:	b2e4      	uxtb	r4, r4
 8016d4a:	4020      	ands	r0, r4
 8016d4c:	bd70      	pop	{r4, r5, r6, pc}
 8016d4e:	bf00      	nop

08016d50 <uxr_serialize_TIMESTAMP_Payload>:
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	460d      	mov	r5, r1
 8016d54:	4606      	mov	r6, r0
 8016d56:	6809      	ldr	r1, [r1, #0]
 8016d58:	f7fb ff74 	bl	8012c44 <ucdr_serialize_int32_t>
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	6869      	ldr	r1, [r5, #4]
 8016d60:	4630      	mov	r0, r6
 8016d62:	f7fb fb55 	bl	8012410 <ucdr_serialize_uint32_t>
 8016d66:	4020      	ands	r0, r4
 8016d68:	b2c0      	uxtb	r0, r0
 8016d6a:	bd70      	pop	{r4, r5, r6, pc}

08016d6c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d70:	460e      	mov	r6, r1
 8016d72:	4605      	mov	r5, r0
 8016d74:	f7fb fffe 	bl	8012d74 <ucdr_deserialize_int32_t>
 8016d78:	4607      	mov	r7, r0
 8016d7a:	1d31      	adds	r1, r6, #4
 8016d7c:	4628      	mov	r0, r5
 8016d7e:	f7fb fc77 	bl	8012670 <ucdr_deserialize_uint32_t>
 8016d82:	4680      	mov	r8, r0
 8016d84:	f106 0108 	add.w	r1, r6, #8
 8016d88:	4628      	mov	r0, r5
 8016d8a:	f7fb fff3 	bl	8012d74 <ucdr_deserialize_int32_t>
 8016d8e:	ea07 0708 	and.w	r7, r7, r8
 8016d92:	4604      	mov	r4, r0
 8016d94:	f106 010c 	add.w	r1, r6, #12
 8016d98:	4628      	mov	r0, r5
 8016d9a:	403c      	ands	r4, r7
 8016d9c:	f7fb fc68 	bl	8012670 <ucdr_deserialize_uint32_t>
 8016da0:	f106 0110 	add.w	r1, r6, #16
 8016da4:	4004      	ands	r4, r0
 8016da6:	4628      	mov	r0, r5
 8016da8:	f7fb ffe4 	bl	8012d74 <ucdr_deserialize_int32_t>
 8016dac:	4603      	mov	r3, r0
 8016dae:	b2e4      	uxtb	r4, r4
 8016db0:	4628      	mov	r0, r5
 8016db2:	461d      	mov	r5, r3
 8016db4:	f106 0114 	add.w	r1, r6, #20
 8016db8:	f7fb fc5a 	bl	8012670 <ucdr_deserialize_uint32_t>
 8016dbc:	402c      	ands	r4, r5
 8016dbe:	4020      	ands	r0, r4
 8016dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016dc4 <uxr_serialize_SampleIdentity>:
 8016dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc8:	4604      	mov	r4, r0
 8016dca:	460d      	mov	r5, r1
 8016dcc:	220c      	movs	r2, #12
 8016dce:	f7fa ff67 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016dd2:	2203      	movs	r2, #3
 8016dd4:	f105 010c 	add.w	r1, r5, #12
 8016dd8:	4607      	mov	r7, r0
 8016dda:	4620      	mov	r0, r4
 8016ddc:	f7fa ff60 	bl	8011ca0 <ucdr_serialize_array_uint8_t>
 8016de0:	7be9      	ldrb	r1, [r5, #15]
 8016de2:	4680      	mov	r8, r0
 8016de4:	4620      	mov	r0, r4
 8016de6:	f7fb f8fd 	bl	8011fe4 <ucdr_serialize_uint8_t>
 8016dea:	6929      	ldr	r1, [r5, #16]
 8016dec:	4606      	mov	r6, r0
 8016dee:	4620      	mov	r0, r4
 8016df0:	f7fb ff28 	bl	8012c44 <ucdr_serialize_int32_t>
 8016df4:	ea07 0708 	and.w	r7, r7, r8
 8016df8:	4603      	mov	r3, r0
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	403e      	ands	r6, r7
 8016dfe:	6969      	ldr	r1, [r5, #20]
 8016e00:	461c      	mov	r4, r3
 8016e02:	f7fb fb05 	bl	8012410 <ucdr_serialize_uint32_t>
 8016e06:	4034      	ands	r4, r6
 8016e08:	4020      	ands	r0, r4
 8016e0a:	b2c0      	uxtb	r0, r0
 8016e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e10 <uxr_deserialize_SampleIdentity>:
 8016e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e14:	4604      	mov	r4, r0
 8016e16:	460d      	mov	r5, r1
 8016e18:	220c      	movs	r2, #12
 8016e1a:	f7fa ffa5 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016e1e:	2203      	movs	r2, #3
 8016e20:	f105 010c 	add.w	r1, r5, #12
 8016e24:	4607      	mov	r7, r0
 8016e26:	4620      	mov	r0, r4
 8016e28:	f7fa ff9e 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 8016e2c:	f105 010f 	add.w	r1, r5, #15
 8016e30:	4680      	mov	r8, r0
 8016e32:	4620      	mov	r0, r4
 8016e34:	f7fb f8ec 	bl	8012010 <ucdr_deserialize_uint8_t>
 8016e38:	f105 0110 	add.w	r1, r5, #16
 8016e3c:	4606      	mov	r6, r0
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f7fb ff98 	bl	8012d74 <ucdr_deserialize_int32_t>
 8016e44:	ea07 0708 	and.w	r7, r7, r8
 8016e48:	4603      	mov	r3, r0
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	403e      	ands	r6, r7
 8016e4e:	f105 0114 	add.w	r1, r5, #20
 8016e52:	461c      	mov	r4, r3
 8016e54:	f7fb fc0c 	bl	8012670 <ucdr_deserialize_uint32_t>
 8016e58:	4034      	ands	r4, r6
 8016e5a:	4020      	ands	r0, r4
 8016e5c:	b2c0      	uxtb	r0, r0
 8016e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e62:	bf00      	nop

08016e64 <rcl_client_get_rmw_handle>:
 8016e64:	b118      	cbz	r0, 8016e6e <rcl_client_get_rmw_handle+0xa>
 8016e66:	6800      	ldr	r0, [r0, #0]
 8016e68:	b108      	cbz	r0, 8016e6e <rcl_client_get_rmw_handle+0xa>
 8016e6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e6e:	4770      	bx	lr

08016e70 <rcl_send_request>:
 8016e70:	b570      	push	{r4, r5, r6, lr}
 8016e72:	b082      	sub	sp, #8
 8016e74:	b1f8      	cbz	r0, 8016eb6 <rcl_send_request+0x46>
 8016e76:	4604      	mov	r4, r0
 8016e78:	6800      	ldr	r0, [r0, #0]
 8016e7a:	b1e0      	cbz	r0, 8016eb6 <rcl_send_request+0x46>
 8016e7c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016e80:	b1cb      	cbz	r3, 8016eb6 <rcl_send_request+0x46>
 8016e82:	460e      	mov	r6, r1
 8016e84:	b1e1      	cbz	r1, 8016ec0 <rcl_send_request+0x50>
 8016e86:	4615      	mov	r5, r2
 8016e88:	b1d2      	cbz	r2, 8016ec0 <rcl_send_request+0x50>
 8016e8a:	2105      	movs	r1, #5
 8016e8c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016e90:	f002 fe1a 	bl	8019ac8 <__atomic_load_8>
 8016e94:	4602      	mov	r2, r0
 8016e96:	460b      	mov	r3, r1
 8016e98:	4631      	mov	r1, r6
 8016e9a:	e9c5 2300 	strd	r2, r3, [r5]
 8016e9e:	6823      	ldr	r3, [r4, #0]
 8016ea0:	462a      	mov	r2, r5
 8016ea2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016ea6:	f003 fd3d 	bl	801a924 <rmw_send_request>
 8016eaa:	4606      	mov	r6, r0
 8016eac:	b160      	cbz	r0, 8016ec8 <rcl_send_request+0x58>
 8016eae:	2601      	movs	r6, #1
 8016eb0:	4630      	mov	r0, r6
 8016eb2:	b002      	add	sp, #8
 8016eb4:	bd70      	pop	{r4, r5, r6, pc}
 8016eb6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8016eba:	4630      	mov	r0, r6
 8016ebc:	b002      	add	sp, #8
 8016ebe:	bd70      	pop	{r4, r5, r6, pc}
 8016ec0:	260b      	movs	r6, #11
 8016ec2:	4630      	mov	r0, r6
 8016ec4:	b002      	add	sp, #8
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
 8016ec8:	6820      	ldr	r0, [r4, #0]
 8016eca:	2105      	movs	r1, #5
 8016ecc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ed0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016ed4:	9100      	str	r1, [sp, #0]
 8016ed6:	f002 fe63 	bl	8019ba0 <__atomic_exchange_8>
 8016eda:	4630      	mov	r0, r6
 8016edc:	b002      	add	sp, #8
 8016ede:	bd70      	pop	{r4, r5, r6, pc}

08016ee0 <rcl_take_response>:
 8016ee0:	b570      	push	{r4, r5, r6, lr}
 8016ee2:	468e      	mov	lr, r1
 8016ee4:	b08c      	sub	sp, #48	@ 0x30
 8016ee6:	460c      	mov	r4, r1
 8016ee8:	4616      	mov	r6, r2
 8016eea:	f10d 0c18 	add.w	ip, sp, #24
 8016eee:	4605      	mov	r5, r0
 8016ef0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ef4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ef8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016efc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f00:	b35d      	cbz	r5, 8016f5a <rcl_take_response+0x7a>
 8016f02:	682b      	ldr	r3, [r5, #0]
 8016f04:	b34b      	cbz	r3, 8016f5a <rcl_take_response+0x7a>
 8016f06:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016f0a:	b330      	cbz	r0, 8016f5a <rcl_take_response+0x7a>
 8016f0c:	b346      	cbz	r6, 8016f60 <rcl_take_response+0x80>
 8016f0e:	2300      	movs	r3, #0
 8016f10:	4632      	mov	r2, r6
 8016f12:	a902      	add	r1, sp, #8
 8016f14:	f88d 3007 	strb.w	r3, [sp, #7]
 8016f18:	f10d 0307 	add.w	r3, sp, #7
 8016f1c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016f68 <rcl_take_response+0x88>
 8016f20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016f28:	f003 fe04 	bl	801ab34 <rmw_take_response>
 8016f2c:	4605      	mov	r5, r0
 8016f2e:	b9c8      	cbnz	r0, 8016f64 <rcl_take_response+0x84>
 8016f30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016f34:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016f38:	2a00      	cmp	r2, #0
 8016f3a:	bf08      	it	eq
 8016f3c:	461d      	moveq	r5, r3
 8016f3e:	f10d 0e18 	add.w	lr, sp, #24
 8016f42:	46a4      	mov	ip, r4
 8016f44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016f50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f54:	4628      	mov	r0, r5
 8016f56:	b00c      	add	sp, #48	@ 0x30
 8016f58:	bd70      	pop	{r4, r5, r6, pc}
 8016f5a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8016f5e:	e7ee      	b.n	8016f3e <rcl_take_response+0x5e>
 8016f60:	250b      	movs	r5, #11
 8016f62:	e7ec      	b.n	8016f3e <rcl_take_response+0x5e>
 8016f64:	2501      	movs	r5, #1
 8016f66:	e7ea      	b.n	8016f3e <rcl_take_response+0x5e>
	...

08016f70 <rcl_client_is_valid>:
 8016f70:	b130      	cbz	r0, 8016f80 <rcl_client_is_valid+0x10>
 8016f72:	6800      	ldr	r0, [r0, #0]
 8016f74:	b120      	cbz	r0, 8016f80 <rcl_client_is_valid+0x10>
 8016f76:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016f7a:	3800      	subs	r0, #0
 8016f7c:	bf18      	it	ne
 8016f7e:	2001      	movne	r0, #1
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop

08016f84 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016f84:	280b      	cmp	r0, #11
 8016f86:	dc0d      	bgt.n	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016f88:	2800      	cmp	r0, #0
 8016f8a:	db09      	blt.n	8016fa0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016f8c:	280b      	cmp	r0, #11
 8016f8e:	d807      	bhi.n	8016fa0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016f90:	e8df f000 	tbb	[pc, r0]
 8016f94:	07060607 	.word	0x07060607
 8016f98:	06060606 	.word	0x06060606
 8016f9c:	07070606 	.word	0x07070606
 8016fa0:	2001      	movs	r0, #1
 8016fa2:	4770      	bx	lr
 8016fa4:	28cb      	cmp	r0, #203	@ 0xcb
 8016fa6:	bf18      	it	ne
 8016fa8:	2001      	movne	r0, #1
 8016faa:	4770      	bx	lr

08016fac <rcl_get_zero_initialized_context>:
 8016fac:	4a03      	ldr	r2, [pc, #12]	@ (8016fbc <rcl_get_zero_initialized_context+0x10>)
 8016fae:	4603      	mov	r3, r0
 8016fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	4770      	bx	lr
 8016fbc:	0801e5b8 	.word	0x0801e5b8

08016fc0 <rcl_context_is_valid>:
 8016fc0:	b118      	cbz	r0, 8016fca <rcl_context_is_valid+0xa>
 8016fc2:	6840      	ldr	r0, [r0, #4]
 8016fc4:	3800      	subs	r0, #0
 8016fc6:	bf18      	it	ne
 8016fc8:	2001      	movne	r0, #1
 8016fca:	4770      	bx	lr

08016fcc <__cleanup_context>:
 8016fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fd0:	4606      	mov	r6, r0
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	6800      	ldr	r0, [r0, #0]
 8016fd6:	6073      	str	r3, [r6, #4]
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d049      	beq.n	8017070 <__cleanup_context+0xa4>
 8016fdc:	6947      	ldr	r7, [r0, #20]
 8016fde:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016fe2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8016fe6:	b137      	cbz	r7, 8016ff6 <__cleanup_context+0x2a>
 8016fe8:	3014      	adds	r0, #20
 8016fea:	f7f7 fdd3 	bl	800eb94 <rcl_init_options_fini>
 8016fee:	4607      	mov	r7, r0
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d144      	bne.n	801707e <__cleanup_context+0xb2>
 8016ff4:	6830      	ldr	r0, [r6, #0]
 8016ff6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016ff8:	b143      	cbz	r3, 801700c <__cleanup_context+0x40>
 8016ffa:	3028      	adds	r0, #40	@ 0x28
 8016ffc:	f7f9 f9ba 	bl	8010374 <rmw_context_fini>
 8017000:	b118      	cbz	r0, 801700a <__cleanup_context+0x3e>
 8017002:	2f00      	cmp	r7, #0
 8017004:	d03e      	beq.n	8017084 <__cleanup_context+0xb8>
 8017006:	f7f8 feeb 	bl	800fde0 <rcutils_reset_error>
 801700a:	6830      	ldr	r0, [r6, #0]
 801700c:	6a03      	ldr	r3, [r0, #32]
 801700e:	b1db      	cbz	r3, 8017048 <__cleanup_context+0x7c>
 8017010:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8017014:	2a01      	cmp	r2, #1
 8017016:	f17c 0100 	sbcs.w	r1, ip, #0
 801701a:	db11      	blt.n	8017040 <__cleanup_context+0x74>
 801701c:	2400      	movs	r4, #0
 801701e:	4625      	mov	r5, r4
 8017020:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017024:	4649      	mov	r1, r9
 8017026:	b1b8      	cbz	r0, 8017058 <__cleanup_context+0x8c>
 8017028:	47c0      	blx	r8
 801702a:	6833      	ldr	r3, [r6, #0]
 801702c:	3401      	adds	r4, #1
 801702e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8017032:	f145 0500 	adc.w	r5, r5, #0
 8017036:	6a1b      	ldr	r3, [r3, #32]
 8017038:	4294      	cmp	r4, r2
 801703a:	eb75 010c 	sbcs.w	r1, r5, ip
 801703e:	dbef      	blt.n	8017020 <__cleanup_context+0x54>
 8017040:	4618      	mov	r0, r3
 8017042:	4649      	mov	r1, r9
 8017044:	47c0      	blx	r8
 8017046:	6830      	ldr	r0, [r6, #0]
 8017048:	4649      	mov	r1, r9
 801704a:	47c0      	blx	r8
 801704c:	2300      	movs	r3, #0
 801704e:	4638      	mov	r0, r7
 8017050:	e9c6 3300 	strd	r3, r3, [r6]
 8017054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017058:	3401      	adds	r4, #1
 801705a:	f145 0500 	adc.w	r5, r5, #0
 801705e:	4294      	cmp	r4, r2
 8017060:	eb75 010c 	sbcs.w	r1, r5, ip
 8017064:	dbdc      	blt.n	8017020 <__cleanup_context+0x54>
 8017066:	4618      	mov	r0, r3
 8017068:	4649      	mov	r1, r9
 801706a:	47c0      	blx	r8
 801706c:	6830      	ldr	r0, [r6, #0]
 801706e:	e7eb      	b.n	8017048 <__cleanup_context+0x7c>
 8017070:	4607      	mov	r7, r0
 8017072:	2300      	movs	r3, #0
 8017074:	4638      	mov	r0, r7
 8017076:	e9c6 3300 	strd	r3, r3, [r6]
 801707a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801707e:	f7f8 feaf 	bl	800fde0 <rcutils_reset_error>
 8017082:	e7b7      	b.n	8016ff4 <__cleanup_context+0x28>
 8017084:	f7ff ff7e 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 8017088:	4607      	mov	r7, r0
 801708a:	e7bc      	b.n	8017006 <__cleanup_context+0x3a>

0801708c <rcl_init>:
 801708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017090:	1e05      	subs	r5, r0, #0
 8017092:	b09e      	sub	sp, #120	@ 0x78
 8017094:	460e      	mov	r6, r1
 8017096:	4690      	mov	r8, r2
 8017098:	461f      	mov	r7, r3
 801709a:	f340 809f 	ble.w	80171dc <rcl_init+0x150>
 801709e:	2900      	cmp	r1, #0
 80170a0:	f000 809f 	beq.w	80171e2 <rcl_init+0x156>
 80170a4:	f1a1 0e04 	sub.w	lr, r1, #4
 80170a8:	f04f 0c00 	mov.w	ip, #0
 80170ac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80170b0:	f10c 0c01 	add.w	ip, ip, #1
 80170b4:	2c00      	cmp	r4, #0
 80170b6:	f000 8094 	beq.w	80171e2 <rcl_init+0x156>
 80170ba:	4565      	cmp	r5, ip
 80170bc:	d1f6      	bne.n	80170ac <rcl_init+0x20>
 80170be:	f1b8 0f00 	cmp.w	r8, #0
 80170c2:	f000 808e 	beq.w	80171e2 <rcl_init+0x156>
 80170c6:	f8d8 4000 	ldr.w	r4, [r8]
 80170ca:	2c00      	cmp	r4, #0
 80170cc:	f000 8089 	beq.w	80171e2 <rcl_init+0x156>
 80170d0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80170d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170da:	6823      	ldr	r3, [r4, #0]
 80170dc:	a819      	add	r0, sp, #100	@ 0x64
 80170de:	f8cc 3000 	str.w	r3, [ip]
 80170e2:	f7f8 fe59 	bl	800fd98 <rcutils_allocator_is_valid>
 80170e6:	f080 0001 	eor.w	r0, r0, #1
 80170ea:	b2c0      	uxtb	r0, r0
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d178      	bne.n	80171e2 <rcl_init+0x156>
 80170f0:	2f00      	cmp	r7, #0
 80170f2:	d076      	beq.n	80171e2 <rcl_init+0x156>
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d178      	bne.n	80171ec <rcl_init+0x160>
 80170fa:	2178      	movs	r1, #120	@ 0x78
 80170fc:	2001      	movs	r0, #1
 80170fe:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017102:	4798      	blx	r3
 8017104:	4604      	mov	r4, r0
 8017106:	6038      	str	r0, [r7, #0]
 8017108:	2800      	cmp	r0, #0
 801710a:	f000 80b6 	beq.w	801727a <rcl_init+0x1ee>
 801710e:	a802      	add	r0, sp, #8
 8017110:	f003 f84e 	bl	801a1b0 <rmw_get_zero_initialized_context>
 8017114:	a902      	add	r1, sp, #8
 8017116:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801711a:	2250      	movs	r2, #80	@ 0x50
 801711c:	f005 ff75 	bl	801d00a <memcpy>
 8017120:	ac19      	add	r4, sp, #100	@ 0x64
 8017122:	f8d7 e000 	ldr.w	lr, [r7]
 8017126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017128:	46f4      	mov	ip, lr
 801712a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801712e:	6823      	ldr	r3, [r4, #0]
 8017130:	f10e 0114 	add.w	r1, lr, #20
 8017134:	4640      	mov	r0, r8
 8017136:	f8cc 3000 	str.w	r3, [ip]
 801713a:	f7f7 fd55 	bl	800ebe8 <rcl_init_options_copy>
 801713e:	4604      	mov	r4, r0
 8017140:	2800      	cmp	r0, #0
 8017142:	d144      	bne.n	80171ce <rcl_init+0x142>
 8017144:	f8d7 9000 	ldr.w	r9, [r7]
 8017148:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801714c:	f8c9 0020 	str.w	r0, [r9, #32]
 8017150:	f8c9 5018 	str.w	r5, [r9, #24]
 8017154:	f8c9 801c 	str.w	r8, [r9, #28]
 8017158:	2d00      	cmp	r5, #0
 801715a:	d04e      	beq.n	80171fa <rcl_init+0x16e>
 801715c:	2e00      	cmp	r6, #0
 801715e:	d04c      	beq.n	80171fa <rcl_init+0x16e>
 8017160:	2104      	movs	r1, #4
 8017162:	4628      	mov	r0, r5
 8017164:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017168:	4798      	blx	r3
 801716a:	f8c9 0020 	str.w	r0, [r9, #32]
 801716e:	f8d7 9000 	ldr.w	r9, [r7]
 8017172:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8017176:	46ca      	mov	sl, r9
 8017178:	b343      	cbz	r3, 80171cc <rcl_init+0x140>
 801717a:	2d01      	cmp	r5, #1
 801717c:	f178 0300 	sbcs.w	r3, r8, #0
 8017180:	db3b      	blt.n	80171fa <rcl_init+0x16e>
 8017182:	2400      	movs	r4, #0
 8017184:	3e04      	subs	r6, #4
 8017186:	46a1      	mov	r9, r4
 8017188:	e00b      	b.n	80171a2 <rcl_init+0x116>
 801718a:	6831      	ldr	r1, [r6, #0]
 801718c:	f005 ff3d 	bl	801d00a <memcpy>
 8017190:	3401      	adds	r4, #1
 8017192:	f149 0900 	adc.w	r9, r9, #0
 8017196:	45c8      	cmp	r8, r9
 8017198:	bf08      	it	eq
 801719a:	42a5      	cmpeq	r5, r4
 801719c:	d02b      	beq.n	80171f6 <rcl_init+0x16a>
 801719e:	f8d7 a000 	ldr.w	sl, [r7]
 80171a2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80171a6:	f7e9 f8a5 	bl	80002f4 <strlen>
 80171aa:	1c42      	adds	r2, r0, #1
 80171ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171ae:	4610      	mov	r0, r2
 80171b0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80171b2:	f8da a020 	ldr.w	sl, [sl, #32]
 80171b6:	9201      	str	r2, [sp, #4]
 80171b8:	4798      	blx	r3
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80171c0:	6a1b      	ldr	r3, [r3, #32]
 80171c2:	9a01      	ldr	r2, [sp, #4]
 80171c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80171c8:	2800      	cmp	r0, #0
 80171ca:	d1de      	bne.n	801718a <rcl_init+0xfe>
 80171cc:	240a      	movs	r4, #10
 80171ce:	4638      	mov	r0, r7
 80171d0:	f7ff fefc 	bl	8016fcc <__cleanup_context>
 80171d4:	4620      	mov	r0, r4
 80171d6:	b01e      	add	sp, #120	@ 0x78
 80171d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171dc:	2900      	cmp	r1, #0
 80171de:	f43f af6e 	beq.w	80170be <rcl_init+0x32>
 80171e2:	240b      	movs	r4, #11
 80171e4:	4620      	mov	r0, r4
 80171e6:	b01e      	add	sp, #120	@ 0x78
 80171e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171ec:	2464      	movs	r4, #100	@ 0x64
 80171ee:	4620      	mov	r0, r4
 80171f0:	b01e      	add	sp, #120	@ 0x78
 80171f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171f6:	f8d7 9000 	ldr.w	r9, [r7]
 80171fa:	4926      	ldr	r1, [pc, #152]	@ (8017294 <rcl_init+0x208>)
 80171fc:	680b      	ldr	r3, [r1, #0]
 80171fe:	3301      	adds	r3, #1
 8017200:	d036      	beq.n	8017270 <rcl_init+0x1e4>
 8017202:	461a      	mov	r2, r3
 8017204:	2400      	movs	r4, #0
 8017206:	600b      	str	r3, [r1, #0]
 8017208:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801720c:	607b      	str	r3, [r7, #4]
 801720e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017210:	3301      	adds	r3, #1
 8017212:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8017216:	d034      	beq.n	8017282 <rcl_init+0x1f6>
 8017218:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801721c:	b93b      	cbnz	r3, 801722e <rcl_init+0x1a2>
 801721e:	3030      	adds	r0, #48	@ 0x30
 8017220:	f000 f83a 	bl	8017298 <rcl_get_localhost_only>
 8017224:	4604      	mov	r4, r0
 8017226:	2800      	cmp	r0, #0
 8017228:	d1d1      	bne.n	80171ce <rcl_init+0x142>
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	6958      	ldr	r0, [r3, #20]
 801722e:	aa18      	add	r2, sp, #96	@ 0x60
 8017230:	a917      	add	r1, sp, #92	@ 0x5c
 8017232:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8017234:	f001 f8d2 	bl	80183dc <rcl_validate_enclave_name>
 8017238:	4604      	mov	r4, r0
 801723a:	2800      	cmp	r0, #0
 801723c:	d1c7      	bne.n	80171ce <rcl_init+0x142>
 801723e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017240:	b9eb      	cbnz	r3, 801727e <rcl_init+0x1f2>
 8017242:	6839      	ldr	r1, [r7, #0]
 8017244:	694b      	ldr	r3, [r1, #20]
 8017246:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801724a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801724c:	f000 fb72 	bl	8017934 <rcl_get_security_options_from_environment>
 8017250:	4604      	mov	r4, r0
 8017252:	2800      	cmp	r0, #0
 8017254:	d1bb      	bne.n	80171ce <rcl_init+0x142>
 8017256:	6839      	ldr	r1, [r7, #0]
 8017258:	6948      	ldr	r0, [r1, #20]
 801725a:	3128      	adds	r1, #40	@ 0x28
 801725c:	3018      	adds	r0, #24
 801725e:	f7f8 ff53 	bl	8010108 <rmw_init>
 8017262:	4604      	mov	r4, r0
 8017264:	2800      	cmp	r0, #0
 8017266:	d0bd      	beq.n	80171e4 <rcl_init+0x158>
 8017268:	f7ff fe8c 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 801726c:	4604      	mov	r4, r0
 801726e:	e7ae      	b.n	80171ce <rcl_init+0x142>
 8017270:	2201      	movs	r2, #1
 8017272:	461c      	mov	r4, r3
 8017274:	600a      	str	r2, [r1, #0]
 8017276:	4613      	mov	r3, r2
 8017278:	e7c6      	b.n	8017208 <rcl_init+0x17c>
 801727a:	240a      	movs	r4, #10
 801727c:	e7b2      	b.n	80171e4 <rcl_init+0x158>
 801727e:	2401      	movs	r4, #1
 8017280:	e7a5      	b.n	80171ce <rcl_init+0x142>
 8017282:	3024      	adds	r0, #36	@ 0x24
 8017284:	f004 fd0c 	bl	801bca0 <rcl_get_default_domain_id>
 8017288:	4604      	mov	r4, r0
 801728a:	2800      	cmp	r0, #0
 801728c:	d19f      	bne.n	80171ce <rcl_init+0x142>
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	6958      	ldr	r0, [r3, #20]
 8017292:	e7c1      	b.n	8017218 <rcl_init+0x18c>
 8017294:	240138a0 	.word	0x240138a0

08017298 <rcl_get_localhost_only>:
 8017298:	b510      	push	{r4, lr}
 801729a:	2300      	movs	r3, #0
 801729c:	b082      	sub	sp, #8
 801729e:	9301      	str	r3, [sp, #4]
 80172a0:	b1b8      	cbz	r0, 80172d2 <rcl_get_localhost_only+0x3a>
 80172a2:	4604      	mov	r4, r0
 80172a4:	a901      	add	r1, sp, #4
 80172a6:	480c      	ldr	r0, [pc, #48]	@ (80172d8 <rcl_get_localhost_only+0x40>)
 80172a8:	f002 fcb2 	bl	8019c10 <rcutils_get_env>
 80172ac:	b110      	cbz	r0, 80172b4 <rcl_get_localhost_only+0x1c>
 80172ae:	2001      	movs	r0, #1
 80172b0:	b002      	add	sp, #8
 80172b2:	bd10      	pop	{r4, pc}
 80172b4:	9b01      	ldr	r3, [sp, #4]
 80172b6:	b113      	cbz	r3, 80172be <rcl_get_localhost_only+0x26>
 80172b8:	781a      	ldrb	r2, [r3, #0]
 80172ba:	2a31      	cmp	r2, #49	@ 0x31
 80172bc:	d004      	beq.n	80172c8 <rcl_get_localhost_only+0x30>
 80172be:	2302      	movs	r3, #2
 80172c0:	2000      	movs	r0, #0
 80172c2:	7023      	strb	r3, [r4, #0]
 80172c4:	b002      	add	sp, #8
 80172c6:	bd10      	pop	{r4, pc}
 80172c8:	785b      	ldrb	r3, [r3, #1]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d1f7      	bne.n	80172be <rcl_get_localhost_only+0x26>
 80172ce:	2301      	movs	r3, #1
 80172d0:	e7f6      	b.n	80172c0 <rcl_get_localhost_only+0x28>
 80172d2:	200b      	movs	r0, #11
 80172d4:	b002      	add	sp, #8
 80172d6:	bd10      	pop	{r4, pc}
 80172d8:	0801e5c0 	.word	0x0801e5c0

080172dc <rcl_get_zero_initialized_node>:
 80172dc:	4a03      	ldr	r2, [pc, #12]	@ (80172ec <rcl_get_zero_initialized_node+0x10>)
 80172de:	4603      	mov	r3, r0
 80172e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80172e8:	4618      	mov	r0, r3
 80172ea:	4770      	bx	lr
 80172ec:	0801e5dc 	.word	0x0801e5dc

080172f0 <rcl_node_init>:
 80172f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f4:	b0a9      	sub	sp, #164	@ 0xa4
 80172f6:	4604      	mov	r4, r0
 80172f8:	460e      	mov	r6, r1
 80172fa:	4615      	mov	r5, r2
 80172fc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8017300:	a823      	add	r0, sp, #140	@ 0x8c
 8017302:	461f      	mov	r7, r3
 8017304:	f004 ff40 	bl	801c188 <rcl_guard_condition_get_default_options>
 8017308:	f1b8 0f00 	cmp.w	r8, #0
 801730c:	f000 80f3 	beq.w	80174f6 <rcl_node_init+0x206>
 8017310:	4640      	mov	r0, r8
 8017312:	f7f8 fd41 	bl	800fd98 <rcutils_allocator_is_valid>
 8017316:	2d00      	cmp	r5, #0
 8017318:	bf18      	it	ne
 801731a:	2c00      	cmpne	r4, #0
 801731c:	f080 0001 	eor.w	r0, r0, #1
 8017320:	bf0c      	ite	eq
 8017322:	f04f 0c01 	moveq.w	ip, #1
 8017326:	f04f 0c00 	movne.w	ip, #0
 801732a:	2e00      	cmp	r6, #0
 801732c:	bf08      	it	eq
 801732e:	f04c 0c01 	orreq.w	ip, ip, #1
 8017332:	ea4c 0c00 	orr.w	ip, ip, r0
 8017336:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801733a:	f040 80dc 	bne.w	80174f6 <rcl_node_init+0x206>
 801733e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8017342:	f1ba 0f00 	cmp.w	sl, #0
 8017346:	f040 80fc 	bne.w	8017542 <rcl_node_init+0x252>
 801734a:	2f00      	cmp	r7, #0
 801734c:	f000 80d3 	beq.w	80174f6 <rcl_node_init+0x206>
 8017350:	4638      	mov	r0, r7
 8017352:	f7ff fe35 	bl	8016fc0 <rcl_context_is_valid>
 8017356:	4683      	mov	fp, r0
 8017358:	2800      	cmp	r0, #0
 801735a:	f000 80d2 	beq.w	8017502 <rcl_node_init+0x212>
 801735e:	4652      	mov	r2, sl
 8017360:	4630      	mov	r0, r6
 8017362:	a922      	add	r1, sp, #136	@ 0x88
 8017364:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8017368:	f003 f8b4 	bl	801a4d4 <rmw_validate_node_name>
 801736c:	4682      	mov	sl, r0
 801736e:	2800      	cmp	r0, #0
 8017370:	f040 80c3 	bne.w	80174fa <rcl_node_init+0x20a>
 8017374:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8017376:	2800      	cmp	r0, #0
 8017378:	f040 80f1 	bne.w	801755e <rcl_node_init+0x26e>
 801737c:	4628      	mov	r0, r5
 801737e:	f7e8 ffb9 	bl	80002f4 <strlen>
 8017382:	2800      	cmp	r0, #0
 8017384:	f040 80c0 	bne.w	8017508 <rcl_node_init+0x218>
 8017388:	4d79      	ldr	r5, [pc, #484]	@ (8017570 <rcl_node_init+0x280>)
 801738a:	a922      	add	r1, sp, #136	@ 0x88
 801738c:	2200      	movs	r2, #0
 801738e:	4628      	mov	r0, r5
 8017390:	f003 f882 	bl	801a498 <rmw_validate_namespace>
 8017394:	4682      	mov	sl, r0
 8017396:	2800      	cmp	r0, #0
 8017398:	f040 80af 	bne.w	80174fa <rcl_node_init+0x20a>
 801739c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801739e:	2800      	cmp	r0, #0
 80173a0:	f040 80d5 	bne.w	801754e <rcl_node_init+0x25e>
 80173a4:	f8d8 3000 	ldr.w	r3, [r8]
 80173a8:	2078      	movs	r0, #120	@ 0x78
 80173aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80173ae:	4798      	blx	r3
 80173b0:	4682      	mov	sl, r0
 80173b2:	6060      	str	r0, [r4, #4]
 80173b4:	2800      	cmp	r0, #0
 80173b6:	f000 80cf 	beq.w	8017558 <rcl_node_init+0x268>
 80173ba:	2200      	movs	r2, #0
 80173bc:	2300      	movs	r3, #0
 80173be:	a808      	add	r0, sp, #32
 80173c0:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80173c4:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80173c8:	f000 f902 	bl	80175d0 <rcl_node_get_default_options>
 80173cc:	a908      	add	r1, sp, #32
 80173ce:	4650      	mov	r0, sl
 80173d0:	2268      	movs	r2, #104	@ 0x68
 80173d2:	f005 fe1a 	bl	801d00a <memcpy>
 80173d6:	6861      	ldr	r1, [r4, #4]
 80173d8:	4640      	mov	r0, r8
 80173da:	6027      	str	r7, [r4, #0]
 80173dc:	f000 f906 	bl	80175ec <rcl_node_options_copy>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	d158      	bne.n	8017496 <rcl_node_init+0x1a6>
 80173e4:	4628      	mov	r0, r5
 80173e6:	f7e8 ff85 	bl	80002f4 <strlen>
 80173ea:	4428      	add	r0, r5
 80173ec:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80173f0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80173f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80173f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80173fa:	9300      	str	r3, [sp, #0]
 80173fc:	bf0c      	ite	eq
 80173fe:	4b5d      	ldreq	r3, [pc, #372]	@ (8017574 <rcl_node_init+0x284>)
 8017400:	4b5d      	ldrne	r3, [pc, #372]	@ (8017578 <rcl_node_init+0x288>)
 8017402:	9302      	str	r3, [sp, #8]
 8017404:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017408:	9301      	str	r3, [sp, #4]
 801740a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801740e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017412:	f002 fc25 	bl	8019c60 <rcutils_format_string_limit>
 8017416:	6823      	ldr	r3, [r4, #0]
 8017418:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801741c:	4631      	mov	r1, r6
 801741e:	6818      	ldr	r0, [r3, #0]
 8017420:	462a      	mov	r2, r5
 8017422:	6866      	ldr	r6, [r4, #4]
 8017424:	3028      	adds	r0, #40	@ 0x28
 8017426:	f7f9 f857 	bl	80104d8 <rmw_create_node>
 801742a:	6863      	ldr	r3, [r4, #4]
 801742c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801742e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8017430:	2800      	cmp	r0, #0
 8017432:	d032      	beq.n	801749a <rcl_node_init+0x1aa>
 8017434:	f7f9 f8e0 	bl	80105f8 <rmw_node_get_graph_guard_condition>
 8017438:	4682      	mov	sl, r0
 801743a:	b360      	cbz	r0, 8017496 <rcl_node_init+0x1a6>
 801743c:	f8d8 3000 	ldr.w	r3, [r8]
 8017440:	2008      	movs	r0, #8
 8017442:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8017446:	6866      	ldr	r6, [r4, #4]
 8017448:	4798      	blx	r3
 801744a:	6863      	ldr	r3, [r4, #4]
 801744c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801744e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8017452:	f1bb 0f00 	cmp.w	fp, #0
 8017456:	d020      	beq.n	801749a <rcl_node_init+0x1aa>
 8017458:	a806      	add	r0, sp, #24
 801745a:	ae23      	add	r6, sp, #140	@ 0x8c
 801745c:	f004 fdba 	bl	801bfd4 <rcl_get_zero_initialized_guard_condition>
 8017460:	a806      	add	r0, sp, #24
 8017462:	6863      	ldr	r3, [r4, #4]
 8017464:	46c4      	mov	ip, r8
 8017466:	c803      	ldmia	r0, {r0, r1}
 8017468:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801746c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8017470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017474:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017476:	f8dc 3000 	ldr.w	r3, [ip]
 801747a:	6033      	str	r3, [r6, #0]
 801747c:	ab28      	add	r3, sp, #160	@ 0xa0
 801747e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8017482:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017486:	4651      	mov	r1, sl
 8017488:	463a      	mov	r2, r7
 801748a:	4670      	mov	r0, lr
 801748c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801748e:	f004 fdf9 	bl	801c084 <rcl_guard_condition_init_from_rmw>
 8017492:	4682      	mov	sl, r0
 8017494:	b328      	cbz	r0, 80174e2 <rcl_node_init+0x1f2>
 8017496:	6863      	ldr	r3, [r4, #4]
 8017498:	b1f3      	cbz	r3, 80174d8 <rcl_node_init+0x1e8>
 801749a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801749c:	b128      	cbz	r0, 80174aa <rcl_node_init+0x1ba>
 801749e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174a6:	4798      	blx	r3
 80174a8:	6863      	ldr	r3, [r4, #4]
 80174aa:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80174ac:	b110      	cbz	r0, 80174b4 <rcl_node_init+0x1c4>
 80174ae:	f7f9 f825 	bl	80104fc <rmw_destroy_node>
 80174b2:	6863      	ldr	r3, [r4, #4]
 80174b4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80174b6:	b148      	cbz	r0, 80174cc <rcl_node_init+0x1dc>
 80174b8:	f004 fe40 	bl	801c13c <rcl_guard_condition_fini>
 80174bc:	6863      	ldr	r3, [r4, #4]
 80174be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174c2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80174c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174c8:	4798      	blx	r3
 80174ca:	6863      	ldr	r3, [r4, #4]
 80174cc:	4618      	mov	r0, r3
 80174ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174d6:	4798      	blx	r3
 80174d8:	2300      	movs	r3, #0
 80174da:	f04f 0a01 	mov.w	sl, #1
 80174de:	e9c4 3300 	strd	r3, r3, [r4]
 80174e2:	f1b9 0f00 	cmp.w	r9, #0
 80174e6:	d008      	beq.n	80174fa <rcl_node_init+0x20a>
 80174e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174ec:	4628      	mov	r0, r5
 80174ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174f2:	4798      	blx	r3
 80174f4:	e001      	b.n	80174fa <rcl_node_init+0x20a>
 80174f6:	f04f 0a0b 	mov.w	sl, #11
 80174fa:	4650      	mov	r0, sl
 80174fc:	b029      	add	sp, #164	@ 0xa4
 80174fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017502:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8017506:	e7f8      	b.n	80174fa <rcl_node_init+0x20a>
 8017508:	782b      	ldrb	r3, [r5, #0]
 801750a:	2b2f      	cmp	r3, #47	@ 0x2f
 801750c:	f43f af3d 	beq.w	801738a <rcl_node_init+0x9a>
 8017510:	9503      	str	r5, [sp, #12]
 8017512:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	4b18      	ldr	r3, [pc, #96]	@ (801757c <rcl_node_init+0x28c>)
 801751a:	9302      	str	r3, [sp, #8]
 801751c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017520:	9301      	str	r3, [sp, #4]
 8017522:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017526:	f002 fb9b 	bl	8019c60 <rcutils_format_string_limit>
 801752a:	4605      	mov	r5, r0
 801752c:	b1e0      	cbz	r0, 8017568 <rcl_node_init+0x278>
 801752e:	2200      	movs	r2, #0
 8017530:	a922      	add	r1, sp, #136	@ 0x88
 8017532:	9222      	str	r2, [sp, #136]	@ 0x88
 8017534:	f002 ffb0 	bl	801a498 <rmw_validate_namespace>
 8017538:	4682      	mov	sl, r0
 801753a:	2800      	cmp	r0, #0
 801753c:	d1d4      	bne.n	80174e8 <rcl_node_init+0x1f8>
 801753e:	46d9      	mov	r9, fp
 8017540:	e72c      	b.n	801739c <rcl_node_init+0xac>
 8017542:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8017546:	4650      	mov	r0, sl
 8017548:	b029      	add	sp, #164	@ 0xa4
 801754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801754e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8017552:	f002 ffb3 	bl	801a4bc <rmw_namespace_validation_result_string>
 8017556:	e7c4      	b.n	80174e2 <rcl_node_init+0x1f2>
 8017558:	f04f 0a0a 	mov.w	sl, #10
 801755c:	e7c1      	b.n	80174e2 <rcl_node_init+0x1f2>
 801755e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8017562:	f003 f80b 	bl	801a57c <rmw_node_name_validation_result_string>
 8017566:	e7c8      	b.n	80174fa <rcl_node_init+0x20a>
 8017568:	f04f 0a0a 	mov.w	sl, #10
 801756c:	e7c5      	b.n	80174fa <rcl_node_init+0x20a>
 801756e:	bf00      	nop
 8017570:	0801defc 	.word	0x0801defc
 8017574:	0801df48 	.word	0x0801df48
 8017578:	0801df00 	.word	0x0801df00
 801757c:	0801e5d8 	.word	0x0801e5d8

08017580 <rcl_node_is_valid>:
 8017580:	b130      	cbz	r0, 8017590 <rcl_node_is_valid+0x10>
 8017582:	6843      	ldr	r3, [r0, #4]
 8017584:	b123      	cbz	r3, 8017590 <rcl_node_is_valid+0x10>
 8017586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017588:	b113      	cbz	r3, 8017590 <rcl_node_is_valid+0x10>
 801758a:	6800      	ldr	r0, [r0, #0]
 801758c:	f7ff bd18 	b.w	8016fc0 <rcl_context_is_valid>
 8017590:	2000      	movs	r0, #0
 8017592:	4770      	bx	lr

08017594 <rcl_node_get_name>:
 8017594:	b120      	cbz	r0, 80175a0 <rcl_node_get_name+0xc>
 8017596:	6840      	ldr	r0, [r0, #4]
 8017598:	b110      	cbz	r0, 80175a0 <rcl_node_get_name+0xc>
 801759a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801759c:	b100      	cbz	r0, 80175a0 <rcl_node_get_name+0xc>
 801759e:	6880      	ldr	r0, [r0, #8]
 80175a0:	4770      	bx	lr
 80175a2:	bf00      	nop

080175a4 <rcl_node_get_namespace>:
 80175a4:	b120      	cbz	r0, 80175b0 <rcl_node_get_namespace+0xc>
 80175a6:	6840      	ldr	r0, [r0, #4]
 80175a8:	b110      	cbz	r0, 80175b0 <rcl_node_get_namespace+0xc>
 80175aa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80175ac:	b100      	cbz	r0, 80175b0 <rcl_node_get_namespace+0xc>
 80175ae:	68c0      	ldr	r0, [r0, #12]
 80175b0:	4770      	bx	lr
 80175b2:	bf00      	nop

080175b4 <rcl_node_get_options>:
 80175b4:	b128      	cbz	r0, 80175c2 <rcl_node_get_options+0xe>
 80175b6:	6840      	ldr	r0, [r0, #4]
 80175b8:	b118      	cbz	r0, 80175c2 <rcl_node_get_options+0xe>
 80175ba:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80175bc:	2b00      	cmp	r3, #0
 80175be:	bf08      	it	eq
 80175c0:	2000      	moveq	r0, #0
 80175c2:	4770      	bx	lr

080175c4 <rcl_node_get_rmw_handle>:
 80175c4:	b110      	cbz	r0, 80175cc <rcl_node_get_rmw_handle+0x8>
 80175c6:	6840      	ldr	r0, [r0, #4]
 80175c8:	b100      	cbz	r0, 80175cc <rcl_node_get_rmw_handle+0x8>
 80175ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80175cc:	4770      	bx	lr
 80175ce:	bf00      	nop

080175d0 <rcl_node_get_default_options>:
 80175d0:	b510      	push	{r4, lr}
 80175d2:	4604      	mov	r4, r0
 80175d4:	2268      	movs	r2, #104	@ 0x68
 80175d6:	2100      	movs	r1, #0
 80175d8:	f005 fc4e 	bl	801ce78 <memset>
 80175dc:	4620      	mov	r0, r4
 80175de:	f7f8 fbcd 	bl	800fd7c <rcutils_get_default_allocator>
 80175e2:	2301      	movs	r3, #1
 80175e4:	4620      	mov	r0, r4
 80175e6:	7523      	strb	r3, [r4, #20]
 80175e8:	bd10      	pop	{r4, pc}
 80175ea:	bf00      	nop

080175ec <rcl_node_options_copy>:
 80175ec:	2800      	cmp	r0, #0
 80175ee:	bf18      	it	ne
 80175f0:	4288      	cmpne	r0, r1
 80175f2:	d01b      	beq.n	801762c <rcl_node_options_copy+0x40>
 80175f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175f6:	fab1 f681 	clz	r6, r1
 80175fa:	460c      	mov	r4, r1
 80175fc:	0976      	lsrs	r6, r6, #5
 80175fe:	b199      	cbz	r1, 8017628 <rcl_node_options_copy+0x3c>
 8017600:	4605      	mov	r5, r0
 8017602:	8a87      	ldrh	r7, [r0, #20]
 8017604:	4684      	mov	ip, r0
 8017606:	468e      	mov	lr, r1
 8017608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801760a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801760e:	682b      	ldr	r3, [r5, #0]
 8017610:	2250      	movs	r2, #80	@ 0x50
 8017612:	f10c 0118 	add.w	r1, ip, #24
 8017616:	f104 0018 	add.w	r0, r4, #24
 801761a:	f8ce 3000 	str.w	r3, [lr]
 801761e:	82a7      	strh	r7, [r4, #20]
 8017620:	f005 fcf3 	bl	801d00a <memcpy>
 8017624:	4630      	mov	r0, r6
 8017626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017628:	200b      	movs	r0, #11
 801762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801762c:	200b      	movs	r0, #11
 801762e:	4770      	bx	lr

08017630 <rcl_node_resolve_name>:
 8017630:	b082      	sub	sp, #8
 8017632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017636:	b091      	sub	sp, #68	@ 0x44
 8017638:	ac1a      	add	r4, sp, #104	@ 0x68
 801763a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801763e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017642:	2800      	cmp	r0, #0
 8017644:	d03d      	beq.n	80176c2 <rcl_node_resolve_name+0x92>
 8017646:	460c      	mov	r4, r1
 8017648:	4605      	mov	r5, r0
 801764a:	f7ff ffb3 	bl	80175b4 <rcl_node_get_options>
 801764e:	2800      	cmp	r0, #0
 8017650:	d03a      	beq.n	80176c8 <rcl_node_resolve_name+0x98>
 8017652:	4628      	mov	r0, r5
 8017654:	f7ff ff9e 	bl	8017594 <rcl_node_get_name>
 8017658:	4606      	mov	r6, r0
 801765a:	4628      	mov	r0, r5
 801765c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801765e:	f7ff ffa1 	bl	80175a4 <rcl_node_get_namespace>
 8017662:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8017666:	4607      	mov	r7, r0
 8017668:	46ac      	mov	ip, r5
 801766a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801766e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017672:	f8de 3000 	ldr.w	r3, [lr]
 8017676:	f8cc 3000 	str.w	r3, [ip]
 801767a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801767c:	b30b      	cbz	r3, 80176c2 <rcl_node_resolve_name+0x92>
 801767e:	4689      	mov	r9, r1
 8017680:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8017684:	f002 fc64 	bl	8019f50 <rcutils_get_zero_initialized_string_map>
 8017688:	ab10      	add	r3, sp, #64	@ 0x40
 801768a:	9008      	str	r0, [sp, #32]
 801768c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8017690:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017694:	2100      	movs	r1, #0
 8017696:	a808      	add	r0, sp, #32
 8017698:	e895 000c 	ldmia.w	r5, {r2, r3}
 801769c:	f002 fcce 	bl	801a03c <rcutils_string_map_init>
 80176a0:	4683      	mov	fp, r0
 80176a2:	b1a0      	cbz	r0, 80176ce <rcl_node_resolve_name+0x9e>
 80176a4:	f7f8 fb86 	bl	800fdb4 <rcutils_get_error_string>
 80176a8:	f7f8 fb9a 	bl	800fde0 <rcutils_reset_error>
 80176ac:	f1bb 0f0a 	cmp.w	fp, #10
 80176b0:	bf18      	it	ne
 80176b2:	f04f 0b01 	movne.w	fp, #1
 80176b6:	4658      	mov	r0, fp
 80176b8:	b011      	add	sp, #68	@ 0x44
 80176ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176be:	b002      	add	sp, #8
 80176c0:	4770      	bx	lr
 80176c2:	f04f 0b0b 	mov.w	fp, #11
 80176c6:	e7f6      	b.n	80176b6 <rcl_node_resolve_name+0x86>
 80176c8:	f04f 0b01 	mov.w	fp, #1
 80176cc:	e7f3      	b.n	80176b6 <rcl_node_resolve_name+0x86>
 80176ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80176d0:	9007      	str	r0, [sp, #28]
 80176d2:	a808      	add	r0, sp, #32
 80176d4:	f004 fc78 	bl	801bfc8 <rcl_get_default_topic_name_substitutions>
 80176d8:	4683      	mov	fp, r0
 80176da:	b180      	cbz	r0, 80176fe <rcl_node_resolve_name+0xce>
 80176dc:	280a      	cmp	r0, #10
 80176de:	a808      	add	r0, sp, #32
 80176e0:	bf18      	it	ne
 80176e2:	f04f 0b01 	movne.w	fp, #1
 80176e6:	f002 fce9 	bl	801a0bc <rcutils_string_map_fini>
 80176ea:	4604      	mov	r4, r0
 80176ec:	2800      	cmp	r0, #0
 80176ee:	d15b      	bne.n	80177a8 <rcl_node_resolve_name+0x178>
 80176f0:	4651      	mov	r1, sl
 80176f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176f4:	47c8      	blx	r9
 80176f6:	4651      	mov	r1, sl
 80176f8:	4620      	mov	r0, r4
 80176fa:	47c8      	blx	r9
 80176fc:	e7db      	b.n	80176b6 <rcl_node_resolve_name+0x86>
 80176fe:	ab09      	add	r3, sp, #36	@ 0x24
 8017700:	46ec      	mov	ip, sp
 8017702:	9305      	str	r3, [sp, #20]
 8017704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801770a:	682b      	ldr	r3, [r5, #0]
 801770c:	463a      	mov	r2, r7
 801770e:	4631      	mov	r1, r6
 8017710:	4620      	mov	r0, r4
 8017712:	f8cc 3000 	str.w	r3, [ip]
 8017716:	ab08      	add	r3, sp, #32
 8017718:	f004 faf6 	bl	801bd08 <rcl_expand_topic_name>
 801771c:	4683      	mov	fp, r0
 801771e:	b9d8      	cbnz	r0, 8017758 <rcl_node_resolve_name+0x128>
 8017720:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017722:	4602      	mov	r2, r0
 8017724:	9009      	str	r0, [sp, #36]	@ 0x24
 8017726:	a90a      	add	r1, sp, #40	@ 0x28
 8017728:	4620      	mov	r0, r4
 801772a:	f002 fde5 	bl	801a2f8 <rmw_validate_full_topic_name>
 801772e:	bb50      	cbnz	r0, 8017786 <rcl_node_resolve_name+0x156>
 8017730:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017732:	2d00      	cmp	r5, #0
 8017734:	d140      	bne.n	80177b8 <rcl_node_resolve_name+0x188>
 8017736:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017738:	a808      	add	r0, sp, #32
 801773a:	601c      	str	r4, [r3, #0]
 801773c:	f002 fcbe 	bl	801a0bc <rcutils_string_map_fini>
 8017740:	4683      	mov	fp, r0
 8017742:	2800      	cmp	r0, #0
 8017744:	d043      	beq.n	80177ce <rcl_node_resolve_name+0x19e>
 8017746:	f7f8 fb35 	bl	800fdb4 <rcutils_get_error_string>
 801774a:	46a8      	mov	r8, r5
 801774c:	f04f 0b01 	mov.w	fp, #1
 8017750:	462c      	mov	r4, r5
 8017752:	f7f8 fb45 	bl	800fde0 <rcutils_reset_error>
 8017756:	e00a      	b.n	801776e <rcl_node_resolve_name+0x13e>
 8017758:	2867      	cmp	r0, #103	@ 0x67
 801775a:	bf14      	ite	ne
 801775c:	f04f 0800 	movne.w	r8, #0
 8017760:	f008 0801 	andeq.w	r8, r8, #1
 8017764:	9c07      	ldr	r4, [sp, #28]
 8017766:	a808      	add	r0, sp, #32
 8017768:	f002 fca8 	bl	801a0bc <rcutils_string_map_fini>
 801776c:	bb50      	cbnz	r0, 80177c4 <rcl_node_resolve_name+0x194>
 801776e:	4651      	mov	r1, sl
 8017770:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017772:	47c8      	blx	r9
 8017774:	4651      	mov	r1, sl
 8017776:	4620      	mov	r0, r4
 8017778:	47c8      	blx	r9
 801777a:	f1b8 0f00 	cmp.w	r8, #0
 801777e:	bf18      	it	ne
 8017780:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8017784:	e797      	b.n	80176b6 <rcl_node_resolve_name+0x86>
 8017786:	f7f8 fb15 	bl	800fdb4 <rcutils_get_error_string>
 801778a:	f7f8 fb29 	bl	800fde0 <rcutils_reset_error>
 801778e:	a808      	add	r0, sp, #32
 8017790:	f002 fc94 	bl	801a0bc <rcutils_string_map_fini>
 8017794:	b998      	cbnz	r0, 80177be <rcl_node_resolve_name+0x18e>
 8017796:	4651      	mov	r1, sl
 8017798:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801779a:	47c8      	blx	r9
 801779c:	4651      	mov	r1, sl
 801779e:	4620      	mov	r0, r4
 80177a0:	f04f 0b01 	mov.w	fp, #1
 80177a4:	47c8      	blx	r9
 80177a6:	e786      	b.n	80176b6 <rcl_node_resolve_name+0x86>
 80177a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80177ac:	f7f8 fb02 	bl	800fdb4 <rcutils_get_error_string>
 80177b0:	f7f8 fb16 	bl	800fde0 <rcutils_reset_error>
 80177b4:	4644      	mov	r4, r8
 80177b6:	e7da      	b.n	801776e <rcl_node_resolve_name+0x13e>
 80177b8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80177bc:	e7d3      	b.n	8017766 <rcl_node_resolve_name+0x136>
 80177be:	46d8      	mov	r8, fp
 80177c0:	f04f 0b01 	mov.w	fp, #1
 80177c4:	f7f8 faf6 	bl	800fdb4 <rcutils_get_error_string>
 80177c8:	f7f8 fb0a 	bl	800fde0 <rcutils_reset_error>
 80177cc:	e7cf      	b.n	801776e <rcl_node_resolve_name+0x13e>
 80177ce:	4651      	mov	r1, sl
 80177d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177d2:	47c8      	blx	r9
 80177d4:	4651      	mov	r1, sl
 80177d6:	4658      	mov	r0, fp
 80177d8:	47c8      	blx	r9
 80177da:	e76c      	b.n	80176b6 <rcl_node_resolve_name+0x86>

080177dc <exact_match_lookup>:
 80177dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177de:	f102 0708 	add.w	r7, r2, #8
 80177e2:	460b      	mov	r3, r1
 80177e4:	b085      	sub	sp, #20
 80177e6:	4614      	mov	r4, r2
 80177e8:	4606      	mov	r6, r0
 80177ea:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80177ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80177f2:	4618      	mov	r0, r3
 80177f4:	4919      	ldr	r1, [pc, #100]	@ (801785c <exact_match_lookup+0x80>)
 80177f6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80177fa:	f002 fa23 	bl	8019c44 <rcutils_join_path>
 80177fe:	7833      	ldrb	r3, [r6, #0]
 8017800:	4605      	mov	r5, r0
 8017802:	2b2f      	cmp	r3, #47	@ 0x2f
 8017804:	d023      	beq.n	801784e <exact_match_lookup+0x72>
 8017806:	f104 030c 	add.w	r3, r4, #12
 801780a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801780e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017812:	1c70      	adds	r0, r6, #1
 8017814:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017818:	f002 fa1a 	bl	8019c50 <rcutils_to_native_path>
 801781c:	4606      	mov	r6, r0
 801781e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017822:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017826:	4631      	mov	r1, r6
 8017828:	4628      	mov	r0, r5
 801782a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801782e:	f002 fa09 	bl	8019c44 <rcutils_join_path>
 8017832:	4603      	mov	r3, r0
 8017834:	4630      	mov	r0, r6
 8017836:	6862      	ldr	r2, [r4, #4]
 8017838:	461e      	mov	r6, r3
 801783a:	6921      	ldr	r1, [r4, #16]
 801783c:	4790      	blx	r2
 801783e:	4628      	mov	r0, r5
 8017840:	4635      	mov	r5, r6
 8017842:	6863      	ldr	r3, [r4, #4]
 8017844:	6921      	ldr	r1, [r4, #16]
 8017846:	4798      	blx	r3
 8017848:	4628      	mov	r0, r5
 801784a:	b005      	add	sp, #20
 801784c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801784e:	7873      	ldrb	r3, [r6, #1]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d1d8      	bne.n	8017806 <exact_match_lookup+0x2a>
 8017854:	4628      	mov	r0, r5
 8017856:	b005      	add	sp, #20
 8017858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801785a:	bf00      	nop
 801785c:	0801e620 	.word	0x0801e620

08017860 <rcl_get_secure_root>:
 8017860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017864:	b085      	sub	sp, #20
 8017866:	b168      	cbz	r0, 8017884 <rcl_get_secure_root+0x24>
 8017868:	4607      	mov	r7, r0
 801786a:	4608      	mov	r0, r1
 801786c:	460c      	mov	r4, r1
 801786e:	f7f8 fa93 	bl	800fd98 <rcutils_allocator_is_valid>
 8017872:	b138      	cbz	r0, 8017884 <rcl_get_secure_root+0x24>
 8017874:	2300      	movs	r3, #0
 8017876:	482d      	ldr	r0, [pc, #180]	@ (801792c <rcl_get_secure_root+0xcc>)
 8017878:	a903      	add	r1, sp, #12
 801787a:	9303      	str	r3, [sp, #12]
 801787c:	f002 f9c8 	bl	8019c10 <rcutils_get_env>
 8017880:	4605      	mov	r5, r0
 8017882:	b120      	cbz	r0, 801788e <rcl_get_secure_root+0x2e>
 8017884:	2500      	movs	r5, #0
 8017886:	4628      	mov	r0, r5
 8017888:	b005      	add	sp, #20
 801788a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801788e:	9b03      	ldr	r3, [sp, #12]
 8017890:	781a      	ldrb	r2, [r3, #0]
 8017892:	2a00      	cmp	r2, #0
 8017894:	d0f6      	beq.n	8017884 <rcl_get_secure_root+0x24>
 8017896:	f104 090c 	add.w	r9, r4, #12
 801789a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801789e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80178a2:	4618      	mov	r0, r3
 80178a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80178a8:	f002 fb14 	bl	8019ed4 <rcutils_strdup>
 80178ac:	4680      	mov	r8, r0
 80178ae:	2800      	cmp	r0, #0
 80178b0:	d0e8      	beq.n	8017884 <rcl_get_secure_root+0x24>
 80178b2:	a903      	add	r1, sp, #12
 80178b4:	481e      	ldr	r0, [pc, #120]	@ (8017930 <rcl_get_secure_root+0xd0>)
 80178b6:	9503      	str	r5, [sp, #12]
 80178b8:	f002 f9aa 	bl	8019c10 <rcutils_get_env>
 80178bc:	b160      	cbz	r0, 80178d8 <rcl_get_secure_root+0x78>
 80178be:	2600      	movs	r6, #0
 80178c0:	4630      	mov	r0, r6
 80178c2:	6863      	ldr	r3, [r4, #4]
 80178c4:	6921      	ldr	r1, [r4, #16]
 80178c6:	4798      	blx	r3
 80178c8:	4640      	mov	r0, r8
 80178ca:	6863      	ldr	r3, [r4, #4]
 80178cc:	6921      	ldr	r1, [r4, #16]
 80178ce:	4798      	blx	r3
 80178d0:	4628      	mov	r0, r5
 80178d2:	b005      	add	sp, #20
 80178d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d8:	9b03      	ldr	r3, [sp, #12]
 80178da:	781e      	ldrb	r6, [r3, #0]
 80178dc:	b1f6      	cbz	r6, 801791c <rcl_get_secure_root+0xbc>
 80178de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80178e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80178e6:	4618      	mov	r0, r3
 80178e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80178ec:	f002 faf2 	bl	8019ed4 <rcutils_strdup>
 80178f0:	4606      	mov	r6, r0
 80178f2:	2800      	cmp	r0, #0
 80178f4:	d0e3      	beq.n	80178be <rcl_get_secure_root+0x5e>
 80178f6:	4622      	mov	r2, r4
 80178f8:	4641      	mov	r1, r8
 80178fa:	f7ff ff6f 	bl	80177dc <exact_match_lookup>
 80178fe:	4605      	mov	r5, r0
 8017900:	2d00      	cmp	r5, #0
 8017902:	d0dd      	beq.n	80178c0 <rcl_get_secure_root+0x60>
 8017904:	4628      	mov	r0, r5
 8017906:	f002 f99b 	bl	8019c40 <rcutils_is_directory>
 801790a:	4603      	mov	r3, r0
 801790c:	2800      	cmp	r0, #0
 801790e:	d1d7      	bne.n	80178c0 <rcl_get_secure_root+0x60>
 8017910:	4628      	mov	r0, r5
 8017912:	6921      	ldr	r1, [r4, #16]
 8017914:	461d      	mov	r5, r3
 8017916:	6863      	ldr	r3, [r4, #4]
 8017918:	4798      	blx	r3
 801791a:	e7d1      	b.n	80178c0 <rcl_get_secure_root+0x60>
 801791c:	4622      	mov	r2, r4
 801791e:	4638      	mov	r0, r7
 8017920:	4641      	mov	r1, r8
 8017922:	f7ff ff5b 	bl	80177dc <exact_match_lookup>
 8017926:	4605      	mov	r5, r0
 8017928:	e7ea      	b.n	8017900 <rcl_get_secure_root+0xa0>
 801792a:	bf00      	nop
 801792c:	0801e62c 	.word	0x0801e62c
 8017930:	0801e644 	.word	0x0801e644

08017934 <rcl_get_security_options_from_environment>:
 8017934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017938:	b082      	sub	sp, #8
 801793a:	2300      	movs	r3, #0
 801793c:	4606      	mov	r6, r0
 801793e:	460f      	mov	r7, r1
 8017940:	4821      	ldr	r0, [pc, #132]	@ (80179c8 <rcl_get_security_options_from_environment+0x94>)
 8017942:	a901      	add	r1, sp, #4
 8017944:	4690      	mov	r8, r2
 8017946:	9301      	str	r3, [sp, #4]
 8017948:	f002 f962 	bl	8019c10 <rcutils_get_env>
 801794c:	b120      	cbz	r0, 8017958 <rcl_get_security_options_from_environment+0x24>
 801794e:	2501      	movs	r5, #1
 8017950:	4628      	mov	r0, r5
 8017952:	b002      	add	sp, #8
 8017954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017958:	4604      	mov	r4, r0
 801795a:	491c      	ldr	r1, [pc, #112]	@ (80179cc <rcl_get_security_options_from_environment+0x98>)
 801795c:	9801      	ldr	r0, [sp, #4]
 801795e:	f7e8 fcbf 	bl	80002e0 <strcmp>
 8017962:	4605      	mov	r5, r0
 8017964:	b9f0      	cbnz	r0, 80179a4 <rcl_get_security_options_from_environment+0x70>
 8017966:	9001      	str	r0, [sp, #4]
 8017968:	f1b8 0f00 	cmp.w	r8, #0
 801796c:	d021      	beq.n	80179b2 <rcl_get_security_options_from_environment+0x7e>
 801796e:	a901      	add	r1, sp, #4
 8017970:	4817      	ldr	r0, [pc, #92]	@ (80179d0 <rcl_get_security_options_from_environment+0x9c>)
 8017972:	f002 f94d 	bl	8019c10 <rcutils_get_env>
 8017976:	2800      	cmp	r0, #0
 8017978:	d1e9      	bne.n	801794e <rcl_get_security_options_from_environment+0x1a>
 801797a:	4916      	ldr	r1, [pc, #88]	@ (80179d4 <rcl_get_security_options_from_environment+0xa0>)
 801797c:	9801      	ldr	r0, [sp, #4]
 801797e:	f7e8 fcaf 	bl	80002e0 <strcmp>
 8017982:	4603      	mov	r3, r0
 8017984:	4639      	mov	r1, r7
 8017986:	4630      	mov	r0, r6
 8017988:	fab3 f383 	clz	r3, r3
 801798c:	095b      	lsrs	r3, r3, #5
 801798e:	f888 3000 	strb.w	r3, [r8]
 8017992:	f7ff ff65 	bl	8017860 <rcl_get_secure_root>
 8017996:	b170      	cbz	r0, 80179b6 <rcl_get_security_options_from_environment+0x82>
 8017998:	f8c8 0004 	str.w	r0, [r8, #4]
 801799c:	4628      	mov	r0, r5
 801799e:	b002      	add	sp, #8
 80179a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a4:	4625      	mov	r5, r4
 80179a6:	f888 4000 	strb.w	r4, [r8]
 80179aa:	4628      	mov	r0, r5
 80179ac:	b002      	add	sp, #8
 80179ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b2:	250b      	movs	r5, #11
 80179b4:	e7cc      	b.n	8017950 <rcl_get_security_options_from_environment+0x1c>
 80179b6:	f898 5000 	ldrb.w	r5, [r8]
 80179ba:	f1a5 0501 	sub.w	r5, r5, #1
 80179be:	fab5 f585 	clz	r5, r5
 80179c2:	096d      	lsrs	r5, r5, #5
 80179c4:	e7c4      	b.n	8017950 <rcl_get_security_options_from_environment+0x1c>
 80179c6:	bf00      	nop
 80179c8:	0801e5e4 	.word	0x0801e5e4
 80179cc:	0801e5f8 	.word	0x0801e5f8
 80179d0:	0801e600 	.word	0x0801e600
 80179d4:	0801e618 	.word	0x0801e618

080179d8 <rcl_service_get_rmw_handle>:
 80179d8:	b118      	cbz	r0, 80179e2 <rcl_service_get_rmw_handle+0xa>
 80179da:	6800      	ldr	r0, [r0, #0]
 80179dc:	b108      	cbz	r0, 80179e2 <rcl_service_get_rmw_handle+0xa>
 80179de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80179e2:	4770      	bx	lr

080179e4 <rcl_take_request>:
 80179e4:	b570      	push	{r4, r5, r6, lr}
 80179e6:	468e      	mov	lr, r1
 80179e8:	b08c      	sub	sp, #48	@ 0x30
 80179ea:	460c      	mov	r4, r1
 80179ec:	4616      	mov	r6, r2
 80179ee:	f10d 0c18 	add.w	ip, sp, #24
 80179f2:	4605      	mov	r5, r0
 80179f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80179f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017a00:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017a04:	b30d      	cbz	r5, 8017a4a <rcl_take_request+0x66>
 8017a06:	682b      	ldr	r3, [r5, #0]
 8017a08:	b1fb      	cbz	r3, 8017a4a <rcl_take_request+0x66>
 8017a0a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017a0e:	b1e0      	cbz	r0, 8017a4a <rcl_take_request+0x66>
 8017a10:	b336      	cbz	r6, 8017a60 <rcl_take_request+0x7c>
 8017a12:	2300      	movs	r3, #0
 8017a14:	4632      	mov	r2, r6
 8017a16:	a902      	add	r1, sp, #8
 8017a18:	f88d 3007 	strb.w	r3, [sp, #7]
 8017a1c:	f10d 0307 	add.w	r3, sp, #7
 8017a20:	f002 ffce 	bl	801a9c0 <rmw_take_request>
 8017a24:	4605      	mov	r5, r0
 8017a26:	b198      	cbz	r0, 8017a50 <rcl_take_request+0x6c>
 8017a28:	280a      	cmp	r0, #10
 8017a2a:	bf18      	it	ne
 8017a2c:	2501      	movne	r5, #1
 8017a2e:	f10d 0e18 	add.w	lr, sp, #24
 8017a32:	46a4      	mov	ip, r4
 8017a34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a3c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017a40:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017a44:	4628      	mov	r0, r5
 8017a46:	b00c      	add	sp, #48	@ 0x30
 8017a48:	bd70      	pop	{r4, r5, r6, pc}
 8017a4a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8017a4e:	e7ee      	b.n	8017a2e <rcl_take_request+0x4a>
 8017a50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017a54:	f240 2359 	movw	r3, #601	@ 0x259
 8017a58:	2a00      	cmp	r2, #0
 8017a5a:	bf08      	it	eq
 8017a5c:	461d      	moveq	r5, r3
 8017a5e:	e7e6      	b.n	8017a2e <rcl_take_request+0x4a>
 8017a60:	250b      	movs	r5, #11
 8017a62:	e7e4      	b.n	8017a2e <rcl_take_request+0x4a>

08017a64 <rcl_send_response>:
 8017a64:	b170      	cbz	r0, 8017a84 <rcl_send_response+0x20>
 8017a66:	6800      	ldr	r0, [r0, #0]
 8017a68:	b160      	cbz	r0, 8017a84 <rcl_send_response+0x20>
 8017a6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017a6e:	b148      	cbz	r0, 8017a84 <rcl_send_response+0x20>
 8017a70:	b169      	cbz	r1, 8017a8e <rcl_send_response+0x2a>
 8017a72:	b510      	push	{r4, lr}
 8017a74:	b14a      	cbz	r2, 8017a8a <rcl_send_response+0x26>
 8017a76:	f003 f801 	bl	801aa7c <rmw_send_response>
 8017a7a:	b110      	cbz	r0, 8017a82 <rcl_send_response+0x1e>
 8017a7c:	2802      	cmp	r0, #2
 8017a7e:	bf18      	it	ne
 8017a80:	2001      	movne	r0, #1
 8017a82:	bd10      	pop	{r4, pc}
 8017a84:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8017a88:	4770      	bx	lr
 8017a8a:	200b      	movs	r0, #11
 8017a8c:	bd10      	pop	{r4, pc}
 8017a8e:	200b      	movs	r0, #11
 8017a90:	4770      	bx	lr
 8017a92:	bf00      	nop

08017a94 <rcl_service_is_valid>:
 8017a94:	b130      	cbz	r0, 8017aa4 <rcl_service_is_valid+0x10>
 8017a96:	6800      	ldr	r0, [r0, #0]
 8017a98:	b120      	cbz	r0, 8017aa4 <rcl_service_is_valid+0x10>
 8017a9a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017a9e:	3800      	subs	r0, #0
 8017aa0:	bf18      	it	ne
 8017aa2:	2001      	movne	r0, #1
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop

08017aa8 <rcl_take>:
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	d049      	beq.n	8017b40 <rcl_take+0x98>
 8017aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ab0:	4615      	mov	r5, r2
 8017ab2:	6802      	ldr	r2, [r0, #0]
 8017ab4:	b0a4      	sub	sp, #144	@ 0x90
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	2a00      	cmp	r2, #0
 8017aba:	d039      	beq.n	8017b30 <rcl_take+0x88>
 8017abc:	461f      	mov	r7, r3
 8017abe:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8017ac2:	b3ab      	cbz	r3, 8017b30 <rcl_take+0x88>
 8017ac4:	460e      	mov	r6, r1
 8017ac6:	2900      	cmp	r1, #0
 8017ac8:	d038      	beq.n	8017b3c <rcl_take+0x94>
 8017aca:	2d00      	cmp	r5, #0
 8017acc:	d03c      	beq.n	8017b48 <rcl_take+0xa0>
 8017ace:	a802      	add	r0, sp, #8
 8017ad0:	f04f 0800 	mov.w	r8, #0
 8017ad4:	f002 fc08 	bl	801a2e8 <rmw_get_zero_initialized_message_info>
 8017ad8:	f10d 0c08 	add.w	ip, sp, #8
 8017adc:	46ae      	mov	lr, r5
 8017ade:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ae2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017ae6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017aea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017aee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017af2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017af6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017afa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017afe:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8017b02:	462b      	mov	r3, r5
 8017b04:	6820      	ldr	r0, [r4, #0]
 8017b06:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b10:	9700      	str	r7, [sp, #0]
 8017b12:	f003 f857 	bl	801abc4 <rmw_take_with_info>
 8017b16:	4603      	mov	r3, r0
 8017b18:	b9c0      	cbnz	r0, 8017b4c <rcl_take+0xa4>
 8017b1a:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8017b1e:	f240 1291 	movw	r2, #401	@ 0x191
 8017b22:	2900      	cmp	r1, #0
 8017b24:	bf08      	it	eq
 8017b26:	4613      	moveq	r3, r2
 8017b28:	4618      	mov	r0, r3
 8017b2a:	b024      	add	sp, #144	@ 0x90
 8017b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b30:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017b34:	4618      	mov	r0, r3
 8017b36:	b024      	add	sp, #144	@ 0x90
 8017b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b3c:	230b      	movs	r3, #11
 8017b3e:	e7f3      	b.n	8017b28 <rcl_take+0x80>
 8017b40:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017b44:	4618      	mov	r0, r3
 8017b46:	4770      	bx	lr
 8017b48:	ad14      	add	r5, sp, #80	@ 0x50
 8017b4a:	e7c0      	b.n	8017ace <rcl_take+0x26>
 8017b4c:	f7ff fa1a 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 8017b50:	4603      	mov	r3, r0
 8017b52:	e7e9      	b.n	8017b28 <rcl_take+0x80>

08017b54 <rcl_subscription_get_rmw_handle>:
 8017b54:	b118      	cbz	r0, 8017b5e <rcl_subscription_get_rmw_handle+0xa>
 8017b56:	6800      	ldr	r0, [r0, #0]
 8017b58:	b108      	cbz	r0, 8017b5e <rcl_subscription_get_rmw_handle+0xa>
 8017b5a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b5e:	4770      	bx	lr

08017b60 <rcl_subscription_is_valid>:
 8017b60:	b130      	cbz	r0, 8017b70 <rcl_subscription_is_valid+0x10>
 8017b62:	6800      	ldr	r0, [r0, #0]
 8017b64:	b120      	cbz	r0, 8017b70 <rcl_subscription_is_valid+0x10>
 8017b66:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b6a:	3800      	subs	r0, #0
 8017b6c:	bf18      	it	ne
 8017b6e:	2001      	movne	r0, #1
 8017b70:	4770      	bx	lr
 8017b72:	bf00      	nop

08017b74 <rcl_get_system_time>:
 8017b74:	4608      	mov	r0, r1
 8017b76:	f7f8 b94f 	b.w	800fe18 <rcutils_system_time_now>
 8017b7a:	bf00      	nop

08017b7c <rcl_get_steady_time>:
 8017b7c:	4608      	mov	r0, r1
 8017b7e:	f7f8 b971 	b.w	800fe64 <rcutils_steady_time_now>
 8017b82:	bf00      	nop

08017b84 <rcl_get_ros_time>:
 8017b84:	7a03      	ldrb	r3, [r0, #8]
 8017b86:	b510      	push	{r4, lr}
 8017b88:	460c      	mov	r4, r1
 8017b8a:	b143      	cbz	r3, 8017b9e <rcl_get_ros_time+0x1a>
 8017b8c:	2105      	movs	r1, #5
 8017b8e:	f001 ff9b 	bl	8019ac8 <__atomic_load_8>
 8017b92:	4602      	mov	r2, r0
 8017b94:	460b      	mov	r3, r1
 8017b96:	2000      	movs	r0, #0
 8017b98:	e9c4 2300 	strd	r2, r3, [r4]
 8017b9c:	bd10      	pop	{r4, pc}
 8017b9e:	4608      	mov	r0, r1
 8017ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ba4:	f7f8 b938 	b.w	800fe18 <rcutils_system_time_now>

08017ba8 <rcl_clock_init>:
 8017ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017baa:	4605      	mov	r5, r0
 8017bac:	4610      	mov	r0, r2
 8017bae:	4614      	mov	r4, r2
 8017bb0:	460e      	mov	r6, r1
 8017bb2:	f7f8 f8f1 	bl	800fd98 <rcutils_allocator_is_valid>
 8017bb6:	b128      	cbz	r0, 8017bc4 <rcl_clock_init+0x1c>
 8017bb8:	2d03      	cmp	r5, #3
 8017bba:	d803      	bhi.n	8017bc4 <rcl_clock_init+0x1c>
 8017bbc:	e8df f005 	tbb	[pc, r5]
 8017bc0:	0659301f 	.word	0x0659301f
 8017bc4:	f04f 0c0b 	mov.w	ip, #11
 8017bc8:	4660      	mov	r0, ip
 8017bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bcc:	2c00      	cmp	r4, #0
 8017bce:	d0f9      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017bd0:	fab6 f386 	clz	r3, r6
 8017bd4:	095b      	lsrs	r3, r3, #5
 8017bd6:	2e00      	cmp	r6, #0
 8017bd8:	d0f4      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017bda:	6133      	str	r3, [r6, #16]
 8017bdc:	469c      	mov	ip, r3
 8017bde:	f106 0514 	add.w	r5, r6, #20
 8017be2:	4f32      	ldr	r7, [pc, #200]	@ (8017cac <rcl_clock_init+0x104>)
 8017be4:	f04f 0e03 	mov.w	lr, #3
 8017be8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017bf0:	6823      	ldr	r3, [r4, #0]
 8017bf2:	4660      	mov	r0, ip
 8017bf4:	602b      	str	r3, [r5, #0]
 8017bf6:	60f7      	str	r7, [r6, #12]
 8017bf8:	f886 e000 	strb.w	lr, [r6]
 8017bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bfe:	2e00      	cmp	r6, #0
 8017c00:	d0e0      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017c02:	2300      	movs	r3, #0
 8017c04:	f106 0514 	add.w	r5, r6, #20
 8017c08:	7033      	strb	r3, [r6, #0]
 8017c0a:	469c      	mov	ip, r3
 8017c0c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017c10:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c18:	6823      	ldr	r3, [r4, #0]
 8017c1a:	4660      	mov	r0, ip
 8017c1c:	602b      	str	r3, [r5, #0]
 8017c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c20:	2c00      	cmp	r4, #0
 8017c22:	d0cf      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017c24:	fab6 f586 	clz	r5, r6
 8017c28:	096d      	lsrs	r5, r5, #5
 8017c2a:	2e00      	cmp	r6, #0
 8017c2c:	d0ca      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017c2e:	46a6      	mov	lr, r4
 8017c30:	7035      	strb	r5, [r6, #0]
 8017c32:	f106 0c14 	add.w	ip, r6, #20
 8017c36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017c3a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017c3e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8017c42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c46:	f8de 3000 	ldr.w	r3, [lr]
 8017c4a:	2010      	movs	r0, #16
 8017c4c:	f8cc 3000 	str.w	r3, [ip]
 8017c50:	6823      	ldr	r3, [r4, #0]
 8017c52:	6921      	ldr	r1, [r4, #16]
 8017c54:	4798      	blx	r3
 8017c56:	6130      	str	r0, [r6, #16]
 8017c58:	b320      	cbz	r0, 8017ca4 <rcl_clock_init+0xfc>
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	46ac      	mov	ip, r5
 8017c60:	7205      	strb	r5, [r0, #8]
 8017c62:	e9c0 2300 	strd	r2, r3, [r0]
 8017c66:	4a12      	ldr	r2, [pc, #72]	@ (8017cb0 <rcl_clock_init+0x108>)
 8017c68:	2301      	movs	r3, #1
 8017c6a:	4660      	mov	r0, ip
 8017c6c:	60f2      	str	r2, [r6, #12]
 8017c6e:	7033      	strb	r3, [r6, #0]
 8017c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c72:	2c00      	cmp	r4, #0
 8017c74:	d0a6      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017c76:	fab6 f386 	clz	r3, r6
 8017c7a:	095b      	lsrs	r3, r3, #5
 8017c7c:	2e00      	cmp	r6, #0
 8017c7e:	d0a1      	beq.n	8017bc4 <rcl_clock_init+0x1c>
 8017c80:	6133      	str	r3, [r6, #16]
 8017c82:	469c      	mov	ip, r3
 8017c84:	f106 0514 	add.w	r5, r6, #20
 8017c88:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8017cb4 <rcl_clock_init+0x10c>
 8017c8c:	2702      	movs	r7, #2
 8017c8e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c96:	6823      	ldr	r3, [r4, #0]
 8017c98:	4660      	mov	r0, ip
 8017c9a:	602b      	str	r3, [r5, #0]
 8017c9c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017ca0:	7037      	strb	r7, [r6, #0]
 8017ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ca4:	f04f 0c0a 	mov.w	ip, #10
 8017ca8:	e78e      	b.n	8017bc8 <rcl_clock_init+0x20>
 8017caa:	bf00      	nop
 8017cac:	08017b7d 	.word	0x08017b7d
 8017cb0:	08017b85 	.word	0x08017b85
 8017cb4:	08017b75 	.word	0x08017b75

08017cb8 <rcl_clock_get_now>:
 8017cb8:	b140      	cbz	r0, 8017ccc <rcl_clock_get_now+0x14>
 8017cba:	b139      	cbz	r1, 8017ccc <rcl_clock_get_now+0x14>
 8017cbc:	7803      	ldrb	r3, [r0, #0]
 8017cbe:	b11b      	cbz	r3, 8017cc8 <rcl_clock_get_now+0x10>
 8017cc0:	68c3      	ldr	r3, [r0, #12]
 8017cc2:	b10b      	cbz	r3, 8017cc8 <rcl_clock_get_now+0x10>
 8017cc4:	6900      	ldr	r0, [r0, #16]
 8017cc6:	4718      	bx	r3
 8017cc8:	2001      	movs	r0, #1
 8017cca:	4770      	bx	lr
 8017ccc:	200b      	movs	r0, #11
 8017cce:	4770      	bx	lr

08017cd0 <rcl_clock_add_jump_callback>:
 8017cd0:	b082      	sub	sp, #8
 8017cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd6:	a906      	add	r1, sp, #24
 8017cd8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 8017cdc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017ce0:	b330      	cbz	r0, 8017d30 <rcl_clock_add_jump_callback+0x60>
 8017ce2:	4604      	mov	r4, r0
 8017ce4:	3014      	adds	r0, #20
 8017ce6:	f7f8 f857 	bl	800fd98 <rcutils_allocator_is_valid>
 8017cea:	b30d      	cbz	r5, 8017d30 <rcl_clock_add_jump_callback+0x60>
 8017cec:	f080 0301 	eor.w	r3, r0, #1
 8017cf0:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8017cf4:	d11c      	bne.n	8017d30 <rcl_clock_add_jump_callback+0x60>
 8017cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cf8:	2a00      	cmp	r2, #0
 8017cfa:	db19      	blt.n	8017d30 <rcl_clock_add_jump_callback+0x60>
 8017cfc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8017d00:	2901      	cmp	r1, #1
 8017d02:	f172 0200 	sbcs.w	r2, r2, #0
 8017d06:	da13      	bge.n	8017d30 <rcl_clock_add_jump_callback+0x60>
 8017d08:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8017d0c:	2f00      	cmp	r7, #0
 8017d0e:	d040      	beq.n	8017d92 <rcl_clock_add_jump_callback+0xc2>
 8017d10:	4602      	mov	r2, r0
 8017d12:	e003      	b.n	8017d1c <rcl_clock_add_jump_callback+0x4c>
 8017d14:	42bb      	cmp	r3, r7
 8017d16:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8017d1a:	d010      	beq.n	8017d3e <rcl_clock_add_jump_callback+0x6e>
 8017d1c:	6811      	ldr	r1, [r2, #0]
 8017d1e:	3301      	adds	r3, #1
 8017d20:	42a9      	cmp	r1, r5
 8017d22:	d1f7      	bne.n	8017d14 <rcl_clock_add_jump_callback+0x44>
 8017d24:	6a11      	ldr	r1, [r2, #32]
 8017d26:	42b1      	cmp	r1, r6
 8017d28:	d1f4      	bne.n	8017d14 <rcl_clock_add_jump_callback+0x44>
 8017d2a:	f04f 0e01 	mov.w	lr, #1
 8017d2e:	e001      	b.n	8017d34 <rcl_clock_add_jump_callback+0x64>
 8017d30:	f04f 0e0b 	mov.w	lr, #11
 8017d34:	4670      	mov	r0, lr
 8017d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3a:	b002      	add	sp, #8
 8017d3c:	4770      	bx	lr
 8017d3e:	3301      	adds	r3, #1
 8017d40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017d44:	00d9      	lsls	r1, r3, #3
 8017d46:	69e3      	ldr	r3, [r4, #28]
 8017d48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017d4a:	4798      	blx	r3
 8017d4c:	b1f0      	cbz	r0, 8017d8c <rcl_clock_add_jump_callback+0xbc>
 8017d4e:	68a3      	ldr	r3, [r4, #8]
 8017d50:	f10d 0c18 	add.w	ip, sp, #24
 8017d54:	6060      	str	r0, [r4, #4]
 8017d56:	f04f 0e00 	mov.w	lr, #0
 8017d5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8017d5e:	f103 0801 	add.w	r8, r3, #1
 8017d62:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8017d66:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017d6e:	f105 0708 	add.w	r7, r5, #8
 8017d72:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017d74:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017d78:	e887 0003 	stmia.w	r7, {r0, r1}
 8017d7c:	4670      	mov	r0, lr
 8017d7e:	622e      	str	r6, [r5, #32]
 8017d80:	f8c4 8008 	str.w	r8, [r4, #8]
 8017d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d88:	b002      	add	sp, #8
 8017d8a:	4770      	bx	lr
 8017d8c:	f04f 0e0a 	mov.w	lr, #10
 8017d90:	e7d0      	b.n	8017d34 <rcl_clock_add_jump_callback+0x64>
 8017d92:	2128      	movs	r1, #40	@ 0x28
 8017d94:	e7d7      	b.n	8017d46 <rcl_clock_add_jump_callback+0x76>
 8017d96:	bf00      	nop

08017d98 <rcl_clock_remove_jump_callback>:
 8017d98:	2800      	cmp	r0, #0
 8017d9a:	d05f      	beq.n	8017e5c <rcl_clock_remove_jump_callback+0xc4>
 8017d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017da0:	4605      	mov	r5, r0
 8017da2:	3014      	adds	r0, #20
 8017da4:	460f      	mov	r7, r1
 8017da6:	4692      	mov	sl, r2
 8017da8:	f7f7 fff6 	bl	800fd98 <rcutils_allocator_is_valid>
 8017dac:	f080 0001 	eor.w	r0, r0, #1
 8017db0:	b2c0      	uxtb	r0, r0
 8017db2:	2800      	cmp	r0, #0
 8017db4:	d13f      	bne.n	8017e36 <rcl_clock_remove_jump_callback+0x9e>
 8017db6:	2f00      	cmp	r7, #0
 8017db8:	d03d      	beq.n	8017e36 <rcl_clock_remove_jump_callback+0x9e>
 8017dba:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8017dbe:	f1b8 0f00 	cmp.w	r8, #0
 8017dc2:	d00c      	beq.n	8017dde <rcl_clock_remove_jump_callback+0x46>
 8017dc4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017dc8:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8017dcc:	464c      	mov	r4, r9
 8017dce:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8017dd2:	6823      	ldr	r3, [r4, #0]
 8017dd4:	42bb      	cmp	r3, r7
 8017dd6:	d005      	beq.n	8017de4 <rcl_clock_remove_jump_callback+0x4c>
 8017dd8:	3428      	adds	r4, #40	@ 0x28
 8017dda:	42a6      	cmp	r6, r4
 8017ddc:	d1f9      	bne.n	8017dd2 <rcl_clock_remove_jump_callback+0x3a>
 8017dde:	2001      	movs	r0, #1
 8017de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017de4:	6a23      	ldr	r3, [r4, #32]
 8017de6:	3428      	adds	r4, #40	@ 0x28
 8017de8:	42a6      	cmp	r6, r4
 8017dea:	d02f      	beq.n	8017e4c <rcl_clock_remove_jump_callback+0xb4>
 8017dec:	4553      	cmp	r3, sl
 8017dee:	d1f0      	bne.n	8017dd2 <rcl_clock_remove_jump_callback+0x3a>
 8017df0:	46a6      	mov	lr, r4
 8017df2:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8017df6:	3428      	adds	r4, #40	@ 0x28
 8017df8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e04:	42a6      	cmp	r6, r4
 8017e06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e0a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017e0e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e12:	d1ed      	bne.n	8017df0 <rcl_clock_remove_jump_callback+0x58>
 8017e14:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017e18:	60ac      	str	r4, [r5, #8]
 8017e1a:	b17c      	cbz	r4, 8017e3c <rcl_clock_remove_jump_callback+0xa4>
 8017e1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017e20:	69eb      	ldr	r3, [r5, #28]
 8017e22:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017e24:	4648      	mov	r0, r9
 8017e26:	00e1      	lsls	r1, r4, #3
 8017e28:	4798      	blx	r3
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	b1c0      	cbz	r0, 8017e60 <rcl_clock_remove_jump_callback+0xc8>
 8017e2e:	2000      	movs	r0, #0
 8017e30:	606b      	str	r3, [r5, #4]
 8017e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e36:	200b      	movs	r0, #11
 8017e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e3c:	4648      	mov	r0, r9
 8017e3e:	69ab      	ldr	r3, [r5, #24]
 8017e40:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8017e42:	4798      	blx	r3
 8017e44:	4620      	mov	r0, r4
 8017e46:	606c      	str	r4, [r5, #4]
 8017e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e4c:	4553      	cmp	r3, sl
 8017e4e:	d1c6      	bne.n	8017dde <rcl_clock_remove_jump_callback+0x46>
 8017e50:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017e54:	60ac      	str	r4, [r5, #8]
 8017e56:	2c00      	cmp	r4, #0
 8017e58:	d1e0      	bne.n	8017e1c <rcl_clock_remove_jump_callback+0x84>
 8017e5a:	e7ef      	b.n	8017e3c <rcl_clock_remove_jump_callback+0xa4>
 8017e5c:	200b      	movs	r0, #11
 8017e5e:	4770      	bx	lr
 8017e60:	200a      	movs	r0, #10
 8017e62:	e7e9      	b.n	8017e38 <rcl_clock_remove_jump_callback+0xa0>

08017e64 <_rcl_timer_time_jump>:
 8017e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e68:	4605      	mov	r5, r0
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	4614      	mov	r4, r2
 8017e6e:	b131      	cbz	r1, 8017e7e <_rcl_timer_time_jump+0x1a>
 8017e70:	7803      	ldrb	r3, [r0, #0]
 8017e72:	3b02      	subs	r3, #2
 8017e74:	2b01      	cmp	r3, #1
 8017e76:	d93f      	bls.n	8017ef8 <_rcl_timer_time_jump+0x94>
 8017e78:	b004      	add	sp, #16
 8017e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e7e:	6813      	ldr	r3, [r2, #0]
 8017e80:	a902      	add	r1, sp, #8
 8017e82:	6818      	ldr	r0, [r3, #0]
 8017e84:	f7ff ff18 	bl	8017cb8 <rcl_clock_get_now>
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d1f5      	bne.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017e8c:	6820      	ldr	r0, [r4, #0]
 8017e8e:	2105      	movs	r1, #5
 8017e90:	3020      	adds	r0, #32
 8017e92:	f001 fe19 	bl	8019ac8 <__atomic_load_8>
 8017e96:	6823      	ldr	r3, [r4, #0]
 8017e98:	4681      	mov	r9, r0
 8017e9a:	4688      	mov	r8, r1
 8017e9c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8017ea0:	2105      	movs	r1, #5
 8017ea2:	f001 fe11 	bl	8019ac8 <__atomic_load_8>
 8017ea6:	4607      	mov	r7, r0
 8017ea8:	6820      	ldr	r0, [r4, #0]
 8017eaa:	460e      	mov	r6, r1
 8017eac:	2105      	movs	r1, #5
 8017eae:	3018      	adds	r0, #24
 8017eb0:	f001 fe0a 	bl	8019ac8 <__atomic_load_8>
 8017eb4:	782b      	ldrb	r3, [r5, #0]
 8017eb6:	4682      	mov	sl, r0
 8017eb8:	460d      	mov	r5, r1
 8017eba:	3b02      	subs	r3, #2
 8017ebc:	9a02      	ldr	r2, [sp, #8]
 8017ebe:	2b01      	cmp	r3, #1
 8017ec0:	9b03      	ldr	r3, [sp, #12]
 8017ec2:	d937      	bls.n	8017f34 <_rcl_timer_time_jump+0xd0>
 8017ec4:	42ba      	cmp	r2, r7
 8017ec6:	eb73 0106 	sbcs.w	r1, r3, r6
 8017eca:	da60      	bge.n	8017f8e <_rcl_timer_time_jump+0x12a>
 8017ecc:	454a      	cmp	r2, r9
 8017ece:	eb73 0108 	sbcs.w	r1, r3, r8
 8017ed2:	dad1      	bge.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017ed4:	eb1a 0202 	adds.w	r2, sl, r2
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	eb43 0305 	adc.w	r3, r3, r5
 8017ede:	2505      	movs	r5, #5
 8017ee0:	3028      	adds	r0, #40	@ 0x28
 8017ee2:	9500      	str	r5, [sp, #0]
 8017ee4:	f001 fe26 	bl	8019b34 <__atomic_store_8>
 8017ee8:	6820      	ldr	r0, [r4, #0]
 8017eea:	9500      	str	r5, [sp, #0]
 8017eec:	3020      	adds	r0, #32
 8017eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ef2:	f001 fe1f 	bl	8019b34 <__atomic_store_8>
 8017ef6:	e7bf      	b.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017ef8:	6813      	ldr	r3, [r2, #0]
 8017efa:	a902      	add	r1, sp, #8
 8017efc:	6818      	ldr	r0, [r3, #0]
 8017efe:	f7ff fedb 	bl	8017cb8 <rcl_clock_get_now>
 8017f02:	2800      	cmp	r0, #0
 8017f04:	d1b8      	bne.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f0a:	4313      	orrs	r3, r2
 8017f0c:	d0b4      	beq.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017f0e:	6820      	ldr	r0, [r4, #0]
 8017f10:	2105      	movs	r1, #5
 8017f12:	3028      	adds	r0, #40	@ 0x28
 8017f14:	f001 fdd8 	bl	8019ac8 <__atomic_load_8>
 8017f18:	9d02      	ldr	r5, [sp, #8]
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	9b03      	ldr	r3, [sp, #12]
 8017f1e:	6820      	ldr	r0, [r4, #0]
 8017f20:	1b52      	subs	r2, r2, r5
 8017f22:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8017f26:	eb61 0303 	sbc.w	r3, r1, r3
 8017f2a:	2105      	movs	r1, #5
 8017f2c:	9100      	str	r1, [sp, #0]
 8017f2e:	f001 fe01 	bl	8019b34 <__atomic_store_8>
 8017f32:	e7a1      	b.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017f34:	4313      	orrs	r3, r2
 8017f36:	d09f      	beq.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017f38:	6820      	ldr	r0, [r4, #0]
 8017f3a:	f04f 0805 	mov.w	r8, #5
 8017f3e:	2300      	movs	r3, #0
 8017f40:	2200      	movs	r2, #0
 8017f42:	3030      	adds	r0, #48	@ 0x30
 8017f44:	f8cd 8000 	str.w	r8, [sp]
 8017f48:	f001 fe2a 	bl	8019ba0 <__atomic_exchange_8>
 8017f4c:	ea51 0300 	orrs.w	r3, r1, r0
 8017f50:	4606      	mov	r6, r0
 8017f52:	460f      	mov	r7, r1
 8017f54:	d090      	beq.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017f56:	9a02      	ldr	r2, [sp, #8]
 8017f58:	9b03      	ldr	r3, [sp, #12]
 8017f5a:	1a12      	subs	r2, r2, r0
 8017f5c:	f8cd 8000 	str.w	r8, [sp]
 8017f60:	6820      	ldr	r0, [r4, #0]
 8017f62:	eb63 0301 	sbc.w	r3, r3, r1
 8017f66:	eb12 020a 	adds.w	r2, r2, sl
 8017f6a:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8017f6e:	eb43 0305 	adc.w	r3, r3, r5
 8017f72:	f001 fddf 	bl	8019b34 <__atomic_store_8>
 8017f76:	f8cd 8000 	str.w	r8, [sp]
 8017f7a:	6820      	ldr	r0, [r4, #0]
 8017f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f80:	3020      	adds	r0, #32
 8017f82:	1b92      	subs	r2, r2, r6
 8017f84:	eb63 0307 	sbc.w	r3, r3, r7
 8017f88:	f001 fdd4 	bl	8019b34 <__atomic_store_8>
 8017f8c:	e774      	b.n	8017e78 <_rcl_timer_time_jump+0x14>
 8017f8e:	6820      	ldr	r0, [r4, #0]
 8017f90:	3008      	adds	r0, #8
 8017f92:	f004 f915 	bl	801c1c0 <rcl_trigger_guard_condition>
 8017f96:	e76f      	b.n	8017e78 <_rcl_timer_time_jump+0x14>

08017f98 <rcl_get_zero_initialized_timer>:
 8017f98:	4b01      	ldr	r3, [pc, #4]	@ (8017fa0 <rcl_get_zero_initialized_timer+0x8>)
 8017f9a:	6818      	ldr	r0, [r3, #0]
 8017f9c:	4770      	bx	lr
 8017f9e:	bf00      	nop
 8017fa0:	0801e664 	.word	0x0801e664
 8017fa4:	00000000 	.word	0x00000000

08017fa8 <rcl_timer_init>:
 8017fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fac:	b0ab      	sub	sp, #172	@ 0xac
 8017fae:	460d      	mov	r5, r1
 8017fb0:	4604      	mov	r4, r0
 8017fb2:	4692      	mov	sl, r2
 8017fb4:	a837      	add	r0, sp, #220	@ 0xdc
 8017fb6:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8017fb8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8017fbc:	f7f7 feec 	bl	800fd98 <rcutils_allocator_is_valid>
 8017fc0:	fab5 f385 	clz	r3, r5
 8017fc4:	095b      	lsrs	r3, r3, #5
 8017fc6:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 8017fca:	2c00      	cmp	r4, #0
 8017fcc:	bf08      	it	eq
 8017fce:	f043 0301 	orreq.w	r3, r3, #1
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d164      	bne.n	80180a0 <rcl_timer_init+0xf8>
 8017fd6:	f080 0001 	eor.w	r0, r0, #1
 8017fda:	b2c0      	uxtb	r0, r0
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	d15f      	bne.n	80180a0 <rcl_timer_init+0xf8>
 8017fe0:	6823      	ldr	r3, [r4, #0]
 8017fe2:	b123      	cbz	r3, 8017fee <rcl_timer_init+0x46>
 8017fe4:	2664      	movs	r6, #100	@ 0x64
 8017fe6:	4630      	mov	r0, r6
 8017fe8:	b02b      	add	sp, #172	@ 0xac
 8017fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fee:	a908      	add	r1, sp, #32
 8017ff0:	4628      	mov	r0, r5
 8017ff2:	f7ff fe61 	bl	8017cb8 <rcl_clock_get_now>
 8017ff6:	4606      	mov	r6, r0
 8017ff8:	2800      	cmp	r0, #0
 8017ffa:	d1f4      	bne.n	8017fe6 <rcl_timer_init+0x3e>
 8017ffc:	f10d 0b18 	add.w	fp, sp, #24
 8018000:	ae0b      	add	r6, sp, #44	@ 0x2c
 8018002:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8018006:	4658      	mov	r0, fp
 8018008:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801800c:	f003 ffe2 	bl	801bfd4 <rcl_get_zero_initialized_guard_condition>
 8018010:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8018014:	e889 0003 	stmia.w	r9, {r0, r1}
 8018018:	4630      	mov	r0, r6
 801801a:	f004 f8b5 	bl	801c188 <rcl_guard_condition_get_default_options>
 801801e:	ab0d      	add	r3, sp, #52	@ 0x34
 8018020:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018024:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018028:	4651      	mov	r1, sl
 801802a:	4648      	mov	r0, r9
 801802c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018030:	f003 ffda 	bl	801bfe8 <rcl_guard_condition_init>
 8018034:	4606      	mov	r6, r0
 8018036:	2800      	cmp	r0, #0
 8018038:	d1d5      	bne.n	8017fe6 <rcl_timer_init+0x3e>
 801803a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801803c:	781b      	ldrb	r3, [r3, #0]
 801803e:	2b01      	cmp	r3, #1
 8018040:	d033      	beq.n	80180aa <rcl_timer_init+0x102>
 8018042:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8018044:	4642      	mov	r2, r8
 8018046:	463b      	mov	r3, r7
 8018048:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801804c:	911a      	str	r1, [sp, #104]	@ 0x68
 801804e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8018052:	f04f 0a00 	mov.w	sl, #0
 8018056:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801805a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801805e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018108 <rcl_timer_init+0x160>
 8018062:	eb12 0008 	adds.w	r0, r2, r8
 8018066:	eb47 0103 	adc.w	r1, r7, r3
 801806a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801806e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8018072:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8018076:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801807a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801807e:	f8de 3000 	ldr.w	r3, [lr]
 8018082:	2050      	movs	r0, #80	@ 0x50
 8018084:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8018088:	4619      	mov	r1, r3
 801808a:	f8cc 3000 	str.w	r3, [ip]
 801808e:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8018090:	4798      	blx	r3
 8018092:	6020      	str	r0, [r4, #0]
 8018094:	b358      	cbz	r0, 80180ee <rcl_timer_init+0x146>
 8018096:	2250      	movs	r2, #80	@ 0x50
 8018098:	a916      	add	r1, sp, #88	@ 0x58
 801809a:	f004 ffb6 	bl	801d00a <memcpy>
 801809e:	e7a2      	b.n	8017fe6 <rcl_timer_init+0x3e>
 80180a0:	260b      	movs	r6, #11
 80180a2:	4630      	mov	r0, r6
 80180a4:	b02b      	add	sp, #172	@ 0xac
 80180a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180aa:	2001      	movs	r0, #1
 80180ac:	2100      	movs	r1, #0
 80180ae:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80180b2:	ab12      	add	r3, sp, #72	@ 0x48
 80180b4:	4a16      	ldr	r2, [pc, #88]	@ (8018110 <rcl_timer_init+0x168>)
 80180b6:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80180ba:	9405      	str	r4, [sp, #20]
 80180bc:	9204      	str	r2, [sp, #16]
 80180be:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80180c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80180ca:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80180ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80180d4:	4628      	mov	r0, r5
 80180d6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80180da:	f7ff fdf9 	bl	8017cd0 <rcl_clock_add_jump_callback>
 80180de:	4603      	mov	r3, r0
 80180e0:	2800      	cmp	r0, #0
 80180e2:	d0ae      	beq.n	8018042 <rcl_timer_init+0x9a>
 80180e4:	4648      	mov	r0, r9
 80180e6:	461e      	mov	r6, r3
 80180e8:	f004 f828 	bl	801c13c <rcl_guard_condition_fini>
 80180ec:	e77b      	b.n	8017fe6 <rcl_timer_init+0x3e>
 80180ee:	4648      	mov	r0, r9
 80180f0:	260a      	movs	r6, #10
 80180f2:	f004 f823 	bl	801c13c <rcl_guard_condition_fini>
 80180f6:	4622      	mov	r2, r4
 80180f8:	4905      	ldr	r1, [pc, #20]	@ (8018110 <rcl_timer_init+0x168>)
 80180fa:	4628      	mov	r0, r5
 80180fc:	f7ff fe4c 	bl	8017d98 <rcl_clock_remove_jump_callback>
 8018100:	e771      	b.n	8017fe6 <rcl_timer_init+0x3e>
 8018102:	bf00      	nop
 8018104:	f3af 8000 	nop.w
	...
 8018110:	08017e65 	.word	0x08017e65

08018114 <rcl_timer_call>:
 8018114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018118:	b087      	sub	sp, #28
 801811a:	2800      	cmp	r0, #0
 801811c:	d06c      	beq.n	80181f8 <rcl_timer_call+0xe4>
 801811e:	6803      	ldr	r3, [r0, #0]
 8018120:	4604      	mov	r4, r0
 8018122:	2b00      	cmp	r3, #0
 8018124:	d062      	beq.n	80181ec <rcl_timer_call+0xd8>
 8018126:	f3bf 8f5b 	dmb	ish
 801812a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801812e:	f3bf 8f5b 	dmb	ish
 8018132:	2b00      	cmp	r3, #0
 8018134:	d14f      	bne.n	80181d6 <rcl_timer_call+0xc2>
 8018136:	6803      	ldr	r3, [r0, #0]
 8018138:	a904      	add	r1, sp, #16
 801813a:	6818      	ldr	r0, [r3, #0]
 801813c:	f7ff fdbc 	bl	8017cb8 <rcl_clock_get_now>
 8018140:	4605      	mov	r5, r0
 8018142:	2800      	cmp	r0, #0
 8018144:	d149      	bne.n	80181da <rcl_timer_call+0xc6>
 8018146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801814a:	2b00      	cmp	r3, #0
 801814c:	db49      	blt.n	80181e2 <rcl_timer_call+0xce>
 801814e:	2605      	movs	r6, #5
 8018150:	6820      	ldr	r0, [r4, #0]
 8018152:	9600      	str	r6, [sp, #0]
 8018154:	3020      	adds	r0, #32
 8018156:	f001 fd23 	bl	8019ba0 <__atomic_exchange_8>
 801815a:	6823      	ldr	r3, [r4, #0]
 801815c:	4680      	mov	r8, r0
 801815e:	f3bf 8f5b 	dmb	ish
 8018162:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8018166:	f3bf 8f5b 	dmb	ish
 801816a:	6820      	ldr	r0, [r4, #0]
 801816c:	4689      	mov	r9, r1
 801816e:	4631      	mov	r1, r6
 8018170:	3028      	adds	r0, #40	@ 0x28
 8018172:	f001 fca9 	bl	8019ac8 <__atomic_load_8>
 8018176:	460f      	mov	r7, r1
 8018178:	4631      	mov	r1, r6
 801817a:	4606      	mov	r6, r0
 801817c:	6820      	ldr	r0, [r4, #0]
 801817e:	3018      	adds	r0, #24
 8018180:	f001 fca2 	bl	8019ac8 <__atomic_load_8>
 8018184:	4602      	mov	r2, r0
 8018186:	9804      	ldr	r0, [sp, #16]
 8018188:	460b      	mov	r3, r1
 801818a:	18b6      	adds	r6, r6, r2
 801818c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8018190:	4692      	mov	sl, r2
 8018192:	eb47 0701 	adc.w	r7, r7, r1
 8018196:	4286      	cmp	r6, r0
 8018198:	eb77 010c 	sbcs.w	r1, r7, ip
 801819c:	da04      	bge.n	80181a8 <rcl_timer_call+0x94>
 801819e:	ea53 0102 	orrs.w	r1, r3, r2
 80181a2:	d12e      	bne.n	8018202 <rcl_timer_call+0xee>
 80181a4:	4606      	mov	r6, r0
 80181a6:	4667      	mov	r7, ip
 80181a8:	6820      	ldr	r0, [r4, #0]
 80181aa:	2105      	movs	r1, #5
 80181ac:	4632      	mov	r2, r6
 80181ae:	463b      	mov	r3, r7
 80181b0:	3028      	adds	r0, #40	@ 0x28
 80181b2:	9100      	str	r1, [sp, #0]
 80181b4:	f001 fcbe 	bl	8019b34 <__atomic_store_8>
 80181b8:	f1bb 0f00 	cmp.w	fp, #0
 80181bc:	d00d      	beq.n	80181da <rcl_timer_call+0xc6>
 80181be:	9a04      	ldr	r2, [sp, #16]
 80181c0:	4620      	mov	r0, r4
 80181c2:	9b05      	ldr	r3, [sp, #20]
 80181c4:	ebb2 0208 	subs.w	r2, r2, r8
 80181c8:	eb63 0309 	sbc.w	r3, r3, r9
 80181cc:	47d8      	blx	fp
 80181ce:	4628      	mov	r0, r5
 80181d0:	b007      	add	sp, #28
 80181d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d6:	f240 3521 	movw	r5, #801	@ 0x321
 80181da:	4628      	mov	r0, r5
 80181dc:	b007      	add	sp, #28
 80181de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e2:	2501      	movs	r5, #1
 80181e4:	4628      	mov	r0, r5
 80181e6:	b007      	add	sp, #28
 80181e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ec:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80181f0:	4628      	mov	r0, r5
 80181f2:	b007      	add	sp, #28
 80181f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f8:	250b      	movs	r5, #11
 80181fa:	4628      	mov	r0, r5
 80181fc:	b007      	add	sp, #28
 80181fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018202:	1b80      	subs	r0, r0, r6
 8018204:	eb6c 0107 	sbc.w	r1, ip, r7
 8018208:	3801      	subs	r0, #1
 801820a:	f161 0100 	sbc.w	r1, r1, #0
 801820e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018212:	f7e8 f8cd 	bl	80003b0 <__aeabi_ldivmod>
 8018216:	9b02      	ldr	r3, [sp, #8]
 8018218:	3001      	adds	r0, #1
 801821a:	f141 0100 	adc.w	r1, r1, #0
 801821e:	fb00 f303 	mul.w	r3, r0, r3
 8018222:	fb01 330a 	mla	r3, r1, sl, r3
 8018226:	fba0 0a0a 	umull	r0, sl, r0, sl
 801822a:	1986      	adds	r6, r0, r6
 801822c:	4453      	add	r3, sl
 801822e:	eb43 0707 	adc.w	r7, r3, r7
 8018232:	e7b9      	b.n	80181a8 <rcl_timer_call+0x94>

08018234 <rcl_timer_is_ready>:
 8018234:	b570      	push	{r4, r5, r6, lr}
 8018236:	b082      	sub	sp, #8
 8018238:	b380      	cbz	r0, 801829c <rcl_timer_is_ready+0x68>
 801823a:	6803      	ldr	r3, [r0, #0]
 801823c:	4604      	mov	r4, r0
 801823e:	b38b      	cbz	r3, 80182a4 <rcl_timer_is_ready+0x70>
 8018240:	460d      	mov	r5, r1
 8018242:	b359      	cbz	r1, 801829c <rcl_timer_is_ready+0x68>
 8018244:	f3bf 8f5b 	dmb	ish
 8018248:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801824c:	f3bf 8f5b 	dmb	ish
 8018250:	b953      	cbnz	r3, 8018268 <rcl_timer_is_ready+0x34>
 8018252:	6803      	ldr	r3, [r0, #0]
 8018254:	4669      	mov	r1, sp
 8018256:	6818      	ldr	r0, [r3, #0]
 8018258:	f7ff fd2e 	bl	8017cb8 <rcl_clock_get_now>
 801825c:	4606      	mov	r6, r0
 801825e:	b148      	cbz	r0, 8018274 <rcl_timer_is_ready+0x40>
 8018260:	f240 3321 	movw	r3, #801	@ 0x321
 8018264:	4298      	cmp	r0, r3
 8018266:	d102      	bne.n	801826e <rcl_timer_is_ready+0x3a>
 8018268:	2300      	movs	r3, #0
 801826a:	461e      	mov	r6, r3
 801826c:	702b      	strb	r3, [r5, #0]
 801826e:	4630      	mov	r0, r6
 8018270:	b002      	add	sp, #8
 8018272:	bd70      	pop	{r4, r5, r6, pc}
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	2105      	movs	r1, #5
 8018278:	3028      	adds	r0, #40	@ 0x28
 801827a:	f001 fc25 	bl	8019ac8 <__atomic_load_8>
 801827e:	9b00      	ldr	r3, [sp, #0]
 8018280:	1ac0      	subs	r0, r0, r3
 8018282:	9b01      	ldr	r3, [sp, #4]
 8018284:	eb61 0103 	sbc.w	r1, r1, r3
 8018288:	2801      	cmp	r0, #1
 801828a:	4630      	mov	r0, r6
 801828c:	f171 0300 	sbcs.w	r3, r1, #0
 8018290:	bfb4      	ite	lt
 8018292:	2301      	movlt	r3, #1
 8018294:	2300      	movge	r3, #0
 8018296:	702b      	strb	r3, [r5, #0]
 8018298:	b002      	add	sp, #8
 801829a:	bd70      	pop	{r4, r5, r6, pc}
 801829c:	260b      	movs	r6, #11
 801829e:	4630      	mov	r0, r6
 80182a0:	b002      	add	sp, #8
 80182a2:	bd70      	pop	{r4, r5, r6, pc}
 80182a4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80182a8:	e7e1      	b.n	801826e <rcl_timer_is_ready+0x3a>
 80182aa:	bf00      	nop

080182ac <rcl_timer_get_time_until_next_call>:
 80182ac:	b570      	push	{r4, r5, r6, lr}
 80182ae:	b082      	sub	sp, #8
 80182b0:	b330      	cbz	r0, 8018300 <rcl_timer_get_time_until_next_call+0x54>
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	4604      	mov	r4, r0
 80182b6:	b33b      	cbz	r3, 8018308 <rcl_timer_get_time_until_next_call+0x5c>
 80182b8:	460d      	mov	r5, r1
 80182ba:	b309      	cbz	r1, 8018300 <rcl_timer_get_time_until_next_call+0x54>
 80182bc:	f3bf 8f5b 	dmb	ish
 80182c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80182c4:	f3bf 8f5b 	dmb	ish
 80182c8:	b9ab      	cbnz	r3, 80182f6 <rcl_timer_get_time_until_next_call+0x4a>
 80182ca:	6803      	ldr	r3, [r0, #0]
 80182cc:	4669      	mov	r1, sp
 80182ce:	6818      	ldr	r0, [r3, #0]
 80182d0:	f7ff fcf2 	bl	8017cb8 <rcl_clock_get_now>
 80182d4:	4606      	mov	r6, r0
 80182d6:	b958      	cbnz	r0, 80182f0 <rcl_timer_get_time_until_next_call+0x44>
 80182d8:	6820      	ldr	r0, [r4, #0]
 80182da:	2105      	movs	r1, #5
 80182dc:	3028      	adds	r0, #40	@ 0x28
 80182de:	f001 fbf3 	bl	8019ac8 <__atomic_load_8>
 80182e2:	9b00      	ldr	r3, [sp, #0]
 80182e4:	1ac0      	subs	r0, r0, r3
 80182e6:	9b01      	ldr	r3, [sp, #4]
 80182e8:	eb61 0103 	sbc.w	r1, r1, r3
 80182ec:	6028      	str	r0, [r5, #0]
 80182ee:	6069      	str	r1, [r5, #4]
 80182f0:	4630      	mov	r0, r6
 80182f2:	b002      	add	sp, #8
 80182f4:	bd70      	pop	{r4, r5, r6, pc}
 80182f6:	f240 3621 	movw	r6, #801	@ 0x321
 80182fa:	4630      	mov	r0, r6
 80182fc:	b002      	add	sp, #8
 80182fe:	bd70      	pop	{r4, r5, r6, pc}
 8018300:	260b      	movs	r6, #11
 8018302:	4630      	mov	r0, r6
 8018304:	b002      	add	sp, #8
 8018306:	bd70      	pop	{r4, r5, r6, pc}
 8018308:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801830c:	e7f0      	b.n	80182f0 <rcl_timer_get_time_until_next_call+0x44>
 801830e:	bf00      	nop

08018310 <rcl_timer_get_guard_condition>:
 8018310:	b130      	cbz	r0, 8018320 <rcl_timer_get_guard_condition+0x10>
 8018312:	6800      	ldr	r0, [r0, #0]
 8018314:	b120      	cbz	r0, 8018320 <rcl_timer_get_guard_condition+0x10>
 8018316:	68c3      	ldr	r3, [r0, #12]
 8018318:	b10b      	cbz	r3, 801831e <rcl_timer_get_guard_condition+0xe>
 801831a:	3008      	adds	r0, #8
 801831c:	4770      	bx	lr
 801831e:	4618      	mov	r0, r3
 8018320:	4770      	bx	lr
 8018322:	bf00      	nop

08018324 <rcl_validate_enclave_name_with_size>:
 8018324:	2800      	cmp	r0, #0
 8018326:	d049      	beq.n	80183bc <rcl_validate_enclave_name_with_size+0x98>
 8018328:	b570      	push	{r4, r5, r6, lr}
 801832a:	4615      	mov	r5, r2
 801832c:	b0c2      	sub	sp, #264	@ 0x108
 801832e:	b19a      	cbz	r2, 8018358 <rcl_validate_enclave_name_with_size+0x34>
 8018330:	461e      	mov	r6, r3
 8018332:	466a      	mov	r2, sp
 8018334:	ab01      	add	r3, sp, #4
 8018336:	460c      	mov	r4, r1
 8018338:	f002 f85a 	bl	801a3f0 <rmw_validate_namespace_with_size>
 801833c:	4684      	mov	ip, r0
 801833e:	b9b8      	cbnz	r0, 8018370 <rcl_validate_enclave_name_with_size+0x4c>
 8018340:	9900      	ldr	r1, [sp, #0]
 8018342:	b171      	cbz	r1, 8018362 <rcl_validate_enclave_name_with_size+0x3e>
 8018344:	2907      	cmp	r1, #7
 8018346:	d019      	beq.n	801837c <rcl_validate_enclave_name_with_size+0x58>
 8018348:	1e4b      	subs	r3, r1, #1
 801834a:	2b05      	cmp	r3, #5
 801834c:	d83a      	bhi.n	80183c4 <rcl_validate_enclave_name_with_size+0xa0>
 801834e:	e8df f003 	tbb	[pc, r3]
 8018352:	2926      	.short	0x2926
 8018354:	1d322f2c 	.word	0x1d322f2c
 8018358:	f04f 0c0b 	mov.w	ip, #11
 801835c:	4660      	mov	r0, ip
 801835e:	b042      	add	sp, #264	@ 0x108
 8018360:	bd70      	pop	{r4, r5, r6, pc}
 8018362:	2907      	cmp	r1, #7
 8018364:	d00a      	beq.n	801837c <rcl_validate_enclave_name_with_size+0x58>
 8018366:	2300      	movs	r3, #0
 8018368:	4660      	mov	r0, ip
 801836a:	602b      	str	r3, [r5, #0]
 801836c:	b042      	add	sp, #264	@ 0x108
 801836e:	bd70      	pop	{r4, r5, r6, pc}
 8018370:	f7fe fe08 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 8018374:	4684      	mov	ip, r0
 8018376:	4660      	mov	r0, ip
 8018378:	b042      	add	sp, #264	@ 0x108
 801837a:	bd70      	pop	{r4, r5, r6, pc}
 801837c:	2cff      	cmp	r4, #255	@ 0xff
 801837e:	d9f2      	bls.n	8018366 <rcl_validate_enclave_name_with_size+0x42>
 8018380:	6029      	str	r1, [r5, #0]
 8018382:	2e00      	cmp	r6, #0
 8018384:	d0ea      	beq.n	801835c <rcl_validate_enclave_name_with_size+0x38>
 8018386:	23fe      	movs	r3, #254	@ 0xfe
 8018388:	6033      	str	r3, [r6, #0]
 801838a:	e7e7      	b.n	801835c <rcl_validate_enclave_name_with_size+0x38>
 801838c:	2306      	movs	r3, #6
 801838e:	602b      	str	r3, [r5, #0]
 8018390:	2e00      	cmp	r6, #0
 8018392:	d0e3      	beq.n	801835c <rcl_validate_enclave_name_with_size+0x38>
 8018394:	9b01      	ldr	r3, [sp, #4]
 8018396:	4660      	mov	r0, ip
 8018398:	6033      	str	r3, [r6, #0]
 801839a:	b042      	add	sp, #264	@ 0x108
 801839c:	bd70      	pop	{r4, r5, r6, pc}
 801839e:	2301      	movs	r3, #1
 80183a0:	602b      	str	r3, [r5, #0]
 80183a2:	e7f5      	b.n	8018390 <rcl_validate_enclave_name_with_size+0x6c>
 80183a4:	2302      	movs	r3, #2
 80183a6:	602b      	str	r3, [r5, #0]
 80183a8:	e7f2      	b.n	8018390 <rcl_validate_enclave_name_with_size+0x6c>
 80183aa:	2303      	movs	r3, #3
 80183ac:	602b      	str	r3, [r5, #0]
 80183ae:	e7ef      	b.n	8018390 <rcl_validate_enclave_name_with_size+0x6c>
 80183b0:	2304      	movs	r3, #4
 80183b2:	602b      	str	r3, [r5, #0]
 80183b4:	e7ec      	b.n	8018390 <rcl_validate_enclave_name_with_size+0x6c>
 80183b6:	2305      	movs	r3, #5
 80183b8:	602b      	str	r3, [r5, #0]
 80183ba:	e7e9      	b.n	8018390 <rcl_validate_enclave_name_with_size+0x6c>
 80183bc:	f04f 0c0b 	mov.w	ip, #11
 80183c0:	4660      	mov	r0, ip
 80183c2:	4770      	bx	lr
 80183c4:	460b      	mov	r3, r1
 80183c6:	4a04      	ldr	r2, [pc, #16]	@ (80183d8 <rcl_validate_enclave_name_with_size+0xb4>)
 80183c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80183cc:	a802      	add	r0, sp, #8
 80183ce:	f001 fd33 	bl	8019e38 <rcutils_snprintf>
 80183d2:	f04f 0c01 	mov.w	ip, #1
 80183d6:	e7c1      	b.n	801835c <rcl_validate_enclave_name_with_size+0x38>
 80183d8:	0801e668 	.word	0x0801e668

080183dc <rcl_validate_enclave_name>:
 80183dc:	b168      	cbz	r0, 80183fa <rcl_validate_enclave_name+0x1e>
 80183de:	b570      	push	{r4, r5, r6, lr}
 80183e0:	460d      	mov	r5, r1
 80183e2:	4616      	mov	r6, r2
 80183e4:	4604      	mov	r4, r0
 80183e6:	f7e7 ff85 	bl	80002f4 <strlen>
 80183ea:	4633      	mov	r3, r6
 80183ec:	4601      	mov	r1, r0
 80183ee:	462a      	mov	r2, r5
 80183f0:	4620      	mov	r0, r4
 80183f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183f6:	f7ff bf95 	b.w	8018324 <rcl_validate_enclave_name_with_size>
 80183fa:	200b      	movs	r0, #11
 80183fc:	4770      	bx	lr
 80183fe:	bf00      	nop

08018400 <rcl_get_zero_initialized_wait_set>:
 8018400:	b510      	push	{r4, lr}
 8018402:	4c08      	ldr	r4, [pc, #32]	@ (8018424 <rcl_get_zero_initialized_wait_set+0x24>)
 8018404:	4686      	mov	lr, r0
 8018406:	4684      	mov	ip, r0
 8018408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801840a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801840e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018410:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018416:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801841a:	6823      	ldr	r3, [r4, #0]
 801841c:	4670      	mov	r0, lr
 801841e:	f8cc 3000 	str.w	r3, [ip]
 8018422:	bd10      	pop	{r4, pc}
 8018424:	0801e6c8 	.word	0x0801e6c8

08018428 <rcl_wait_set_is_valid>:
 8018428:	b118      	cbz	r0, 8018432 <rcl_wait_set_is_valid+0xa>
 801842a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801842c:	3800      	subs	r0, #0
 801842e:	bf18      	it	ne
 8018430:	2001      	movne	r0, #1
 8018432:	4770      	bx	lr

08018434 <rcl_wait_set_fini>:
 8018434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018438:	b082      	sub	sp, #8
 801843a:	2800      	cmp	r0, #0
 801843c:	f000 8095 	beq.w	801856a <rcl_wait_set_fini+0x136>
 8018440:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018442:	4604      	mov	r4, r0
 8018444:	2e00      	cmp	r6, #0
 8018446:	f000 808c 	beq.w	8018562 <rcl_wait_set_fini+0x12e>
 801844a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801844c:	f002 fd7c 	bl	801af48 <rmw_destroy_wait_set>
 8018450:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018452:	1e06      	subs	r6, r0, #0
 8018454:	bf18      	it	ne
 8018456:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801845a:	2d00      	cmp	r5, #0
 801845c:	f000 8081 	beq.w	8018562 <rcl_wait_set_fini+0x12e>
 8018460:	2700      	movs	r7, #0
 8018462:	6820      	ldr	r0, [r4, #0]
 8018464:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8018468:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801846a:	6067      	str	r7, [r4, #4]
 801846c:	602f      	str	r7, [r5, #0]
 801846e:	b120      	cbz	r0, 801847a <rcl_wait_set_fini+0x46>
 8018470:	9101      	str	r1, [sp, #4]
 8018472:	47c0      	blx	r8
 8018474:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018476:	9901      	ldr	r1, [sp, #4]
 8018478:	6027      	str	r7, [r4, #0]
 801847a:	68a8      	ldr	r0, [r5, #8]
 801847c:	b120      	cbz	r0, 8018488 <rcl_wait_set_fini+0x54>
 801847e:	47c0      	blx	r8
 8018480:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018482:	2300      	movs	r3, #0
 8018484:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8018488:	f04f 0800 	mov.w	r8, #0
 801848c:	68a0      	ldr	r0, [r4, #8]
 801848e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8018490:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018492:	f8c4 800c 	str.w	r8, [r4, #12]
 8018496:	f8c5 800c 	str.w	r8, [r5, #12]
 801849a:	b128      	cbz	r0, 80184a8 <rcl_wait_set_fini+0x74>
 801849c:	47b8      	blx	r7
 801849e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184a0:	f8c4 8008 	str.w	r8, [r4, #8]
 80184a4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184a8:	f04f 0800 	mov.w	r8, #0
 80184ac:	6968      	ldr	r0, [r5, #20]
 80184ae:	f8c5 8010 	str.w	r8, [r5, #16]
 80184b2:	b128      	cbz	r0, 80184c0 <rcl_wait_set_fini+0x8c>
 80184b4:	47b8      	blx	r7
 80184b6:	f8c5 8014 	str.w	r8, [r5, #20]
 80184ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184c0:	f04f 0800 	mov.w	r8, #0
 80184c4:	6920      	ldr	r0, [r4, #16]
 80184c6:	f8c4 8014 	str.w	r8, [r4, #20]
 80184ca:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80184ce:	b128      	cbz	r0, 80184dc <rcl_wait_set_fini+0xa8>
 80184d0:	47b8      	blx	r7
 80184d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80184d8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184dc:	f04f 0800 	mov.w	r8, #0
 80184e0:	69a0      	ldr	r0, [r4, #24]
 80184e2:	f8c4 801c 	str.w	r8, [r4, #28]
 80184e6:	f8c5 8018 	str.w	r8, [r5, #24]
 80184ea:	b128      	cbz	r0, 80184f8 <rcl_wait_set_fini+0xc4>
 80184ec:	9101      	str	r1, [sp, #4]
 80184ee:	47b8      	blx	r7
 80184f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184f2:	9901      	ldr	r1, [sp, #4]
 80184f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80184f8:	6a28      	ldr	r0, [r5, #32]
 80184fa:	b120      	cbz	r0, 8018506 <rcl_wait_set_fini+0xd2>
 80184fc:	47b8      	blx	r7
 80184fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018500:	2300      	movs	r3, #0
 8018502:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8018506:	2700      	movs	r7, #0
 8018508:	6a20      	ldr	r0, [r4, #32]
 801850a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801850e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018510:	6267      	str	r7, [r4, #36]	@ 0x24
 8018512:	626f      	str	r7, [r5, #36]	@ 0x24
 8018514:	b120      	cbz	r0, 8018520 <rcl_wait_set_fini+0xec>
 8018516:	9101      	str	r1, [sp, #4]
 8018518:	47c0      	blx	r8
 801851a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801851c:	9901      	ldr	r1, [sp, #4]
 801851e:	6227      	str	r7, [r4, #32]
 8018520:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8018522:	b120      	cbz	r0, 801852e <rcl_wait_set_fini+0xfa>
 8018524:	47c0      	blx	r8
 8018526:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018528:	2300      	movs	r3, #0
 801852a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801852e:	2700      	movs	r7, #0
 8018530:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8018532:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8018536:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018538:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801853a:	632f      	str	r7, [r5, #48]	@ 0x30
 801853c:	b120      	cbz	r0, 8018548 <rcl_wait_set_fini+0x114>
 801853e:	9101      	str	r1, [sp, #4]
 8018540:	47c0      	blx	r8
 8018542:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018544:	9901      	ldr	r1, [sp, #4]
 8018546:	62a7      	str	r7, [r4, #40]	@ 0x28
 8018548:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801854a:	b120      	cbz	r0, 8018556 <rcl_wait_set_fini+0x122>
 801854c:	47c0      	blx	r8
 801854e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018550:	2300      	movs	r3, #0
 8018552:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8018556:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8018558:	4628      	mov	r0, r5
 801855a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801855c:	4798      	blx	r3
 801855e:	2300      	movs	r3, #0
 8018560:	6323      	str	r3, [r4, #48]	@ 0x30
 8018562:	4630      	mov	r0, r6
 8018564:	b002      	add	sp, #8
 8018566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801856a:	260b      	movs	r6, #11
 801856c:	4630      	mov	r0, r6
 801856e:	b002      	add	sp, #8
 8018570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018574 <rcl_wait_set_add_subscription>:
 8018574:	b318      	cbz	r0, 80185be <rcl_wait_set_add_subscription+0x4a>
 8018576:	b538      	push	{r3, r4, r5, lr}
 8018578:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801857a:	4604      	mov	r4, r0
 801857c:	b30b      	cbz	r3, 80185c2 <rcl_wait_set_add_subscription+0x4e>
 801857e:	b319      	cbz	r1, 80185c8 <rcl_wait_set_add_subscription+0x54>
 8018580:	681d      	ldr	r5, [r3, #0]
 8018582:	6840      	ldr	r0, [r0, #4]
 8018584:	4285      	cmp	r5, r0
 8018586:	d217      	bcs.n	80185b8 <rcl_wait_set_add_subscription+0x44>
 8018588:	1c68      	adds	r0, r5, #1
 801858a:	6018      	str	r0, [r3, #0]
 801858c:	6823      	ldr	r3, [r4, #0]
 801858e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018592:	b102      	cbz	r2, 8018596 <rcl_wait_set_add_subscription+0x22>
 8018594:	6015      	str	r5, [r2, #0]
 8018596:	4608      	mov	r0, r1
 8018598:	f7ff fadc 	bl	8017b54 <rcl_subscription_get_rmw_handle>
 801859c:	b150      	cbz	r0, 80185b4 <rcl_wait_set_add_subscription+0x40>
 801859e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185a0:	6842      	ldr	r2, [r0, #4]
 80185a2:	2000      	movs	r0, #0
 80185a4:	689b      	ldr	r3, [r3, #8]
 80185a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80185aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80185ac:	6853      	ldr	r3, [r2, #4]
 80185ae:	3301      	adds	r3, #1
 80185b0:	6053      	str	r3, [r2, #4]
 80185b2:	bd38      	pop	{r3, r4, r5, pc}
 80185b4:	2001      	movs	r0, #1
 80185b6:	bd38      	pop	{r3, r4, r5, pc}
 80185b8:	f240 3086 	movw	r0, #902	@ 0x386
 80185bc:	bd38      	pop	{r3, r4, r5, pc}
 80185be:	200b      	movs	r0, #11
 80185c0:	4770      	bx	lr
 80185c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80185c6:	bd38      	pop	{r3, r4, r5, pc}
 80185c8:	200b      	movs	r0, #11
 80185ca:	bd38      	pop	{r3, r4, r5, pc}

080185cc <rcl_wait_set_clear>:
 80185cc:	2800      	cmp	r0, #0
 80185ce:	d074      	beq.n	80186ba <rcl_wait_set_clear+0xee>
 80185d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80185d2:	b510      	push	{r4, lr}
 80185d4:	4604      	mov	r4, r0
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d071      	beq.n	80186be <rcl_wait_set_clear+0xf2>
 80185da:	6800      	ldr	r0, [r0, #0]
 80185dc:	b138      	cbz	r0, 80185ee <rcl_wait_set_clear+0x22>
 80185de:	6862      	ldr	r2, [r4, #4]
 80185e0:	2100      	movs	r1, #0
 80185e2:	0092      	lsls	r2, r2, #2
 80185e4:	f004 fc48 	bl	801ce78 <memset>
 80185e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185ea:	2200      	movs	r2, #0
 80185ec:	601a      	str	r2, [r3, #0]
 80185ee:	68a0      	ldr	r0, [r4, #8]
 80185f0:	b138      	cbz	r0, 8018602 <rcl_wait_set_clear+0x36>
 80185f2:	68e2      	ldr	r2, [r4, #12]
 80185f4:	2100      	movs	r1, #0
 80185f6:	0092      	lsls	r2, r2, #2
 80185f8:	f004 fc3e 	bl	801ce78 <memset>
 80185fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185fe:	2200      	movs	r2, #0
 8018600:	60da      	str	r2, [r3, #12]
 8018602:	69a0      	ldr	r0, [r4, #24]
 8018604:	b138      	cbz	r0, 8018616 <rcl_wait_set_clear+0x4a>
 8018606:	69e2      	ldr	r2, [r4, #28]
 8018608:	2100      	movs	r1, #0
 801860a:	0092      	lsls	r2, r2, #2
 801860c:	f004 fc34 	bl	801ce78 <memset>
 8018610:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018612:	2200      	movs	r2, #0
 8018614:	619a      	str	r2, [r3, #24]
 8018616:	6a20      	ldr	r0, [r4, #32]
 8018618:	b138      	cbz	r0, 801862a <rcl_wait_set_clear+0x5e>
 801861a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801861c:	2100      	movs	r1, #0
 801861e:	0092      	lsls	r2, r2, #2
 8018620:	f004 fc2a 	bl	801ce78 <memset>
 8018624:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018626:	2200      	movs	r2, #0
 8018628:	625a      	str	r2, [r3, #36]	@ 0x24
 801862a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801862c:	b138      	cbz	r0, 801863e <rcl_wait_set_clear+0x72>
 801862e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018630:	2100      	movs	r1, #0
 8018632:	0092      	lsls	r2, r2, #2
 8018634:	f004 fc20 	bl	801ce78 <memset>
 8018638:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801863a:	2200      	movs	r2, #0
 801863c:	631a      	str	r2, [r3, #48]	@ 0x30
 801863e:	6920      	ldr	r0, [r4, #16]
 8018640:	b138      	cbz	r0, 8018652 <rcl_wait_set_clear+0x86>
 8018642:	6962      	ldr	r2, [r4, #20]
 8018644:	2100      	movs	r1, #0
 8018646:	0092      	lsls	r2, r2, #2
 8018648:	f004 fc16 	bl	801ce78 <memset>
 801864c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801864e:	2200      	movs	r2, #0
 8018650:	641a      	str	r2, [r3, #64]	@ 0x40
 8018652:	6898      	ldr	r0, [r3, #8]
 8018654:	b138      	cbz	r0, 8018666 <rcl_wait_set_clear+0x9a>
 8018656:	685a      	ldr	r2, [r3, #4]
 8018658:	2100      	movs	r1, #0
 801865a:	0092      	lsls	r2, r2, #2
 801865c:	f004 fc0c 	bl	801ce78 <memset>
 8018660:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018662:	2200      	movs	r2, #0
 8018664:	605a      	str	r2, [r3, #4]
 8018666:	6958      	ldr	r0, [r3, #20]
 8018668:	b138      	cbz	r0, 801867a <rcl_wait_set_clear+0xae>
 801866a:	691a      	ldr	r2, [r3, #16]
 801866c:	2100      	movs	r1, #0
 801866e:	0092      	lsls	r2, r2, #2
 8018670:	f004 fc02 	bl	801ce78 <memset>
 8018674:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018676:	2200      	movs	r2, #0
 8018678:	611a      	str	r2, [r3, #16]
 801867a:	6a18      	ldr	r0, [r3, #32]
 801867c:	b138      	cbz	r0, 801868e <rcl_wait_set_clear+0xc2>
 801867e:	69da      	ldr	r2, [r3, #28]
 8018680:	2100      	movs	r1, #0
 8018682:	0092      	lsls	r2, r2, #2
 8018684:	f004 fbf8 	bl	801ce78 <memset>
 8018688:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801868a:	2200      	movs	r2, #0
 801868c:	61da      	str	r2, [r3, #28]
 801868e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8018690:	b138      	cbz	r0, 80186a2 <rcl_wait_set_clear+0xd6>
 8018692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018694:	2100      	movs	r1, #0
 8018696:	0092      	lsls	r2, r2, #2
 8018698:	f004 fbee 	bl	801ce78 <memset>
 801869c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801869e:	2200      	movs	r2, #0
 80186a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80186a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80186a4:	b140      	cbz	r0, 80186b8 <rcl_wait_set_clear+0xec>
 80186a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80186a8:	2100      	movs	r1, #0
 80186aa:	0092      	lsls	r2, r2, #2
 80186ac:	f004 fbe4 	bl	801ce78 <memset>
 80186b0:	2300      	movs	r3, #0
 80186b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80186b4:	4618      	mov	r0, r3
 80186b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80186b8:	bd10      	pop	{r4, pc}
 80186ba:	200b      	movs	r0, #11
 80186bc:	4770      	bx	lr
 80186be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80186c2:	bd10      	pop	{r4, pc}

080186c4 <rcl_wait_set_resize>:
 80186c4:	2800      	cmp	r0, #0
 80186c6:	f000 8180 	beq.w	80189ca <rcl_wait_set_resize+0x306>
 80186ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80186d0:	b083      	sub	sp, #12
 80186d2:	4605      	mov	r5, r0
 80186d4:	2c00      	cmp	r4, #0
 80186d6:	f000 817a 	beq.w	80189ce <rcl_wait_set_resize+0x30a>
 80186da:	f04f 0900 	mov.w	r9, #0
 80186de:	461f      	mov	r7, r3
 80186e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80186e4:	4688      	mov	r8, r1
 80186e6:	4616      	mov	r6, r2
 80186e8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80186ec:	f8c0 9004 	str.w	r9, [r0, #4]
 80186f0:	f8c4 9000 	str.w	r9, [r4]
 80186f4:	2900      	cmp	r1, #0
 80186f6:	f000 80bf 	beq.w	8018878 <rcl_wait_set_resize+0x1b4>
 80186fa:	008c      	lsls	r4, r1, #2
 80186fc:	4652      	mov	r2, sl
 80186fe:	6800      	ldr	r0, [r0, #0]
 8018700:	4621      	mov	r1, r4
 8018702:	9301      	str	r3, [sp, #4]
 8018704:	4798      	blx	r3
 8018706:	9b01      	ldr	r3, [sp, #4]
 8018708:	6028      	str	r0, [r5, #0]
 801870a:	2800      	cmp	r0, #0
 801870c:	f000 80f6 	beq.w	80188fc <rcl_wait_set_resize+0x238>
 8018710:	4622      	mov	r2, r4
 8018712:	4649      	mov	r1, r9
 8018714:	9301      	str	r3, [sp, #4]
 8018716:	f004 fbaf 	bl	801ce78 <memset>
 801871a:	f8c5 8004 	str.w	r8, [r5, #4]
 801871e:	4652      	mov	r2, sl
 8018720:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8018724:	4621      	mov	r1, r4
 8018726:	9b01      	ldr	r3, [sp, #4]
 8018728:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801872c:	f8c8 9004 	str.w	r9, [r8, #4]
 8018730:	4798      	blx	r3
 8018732:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018734:	f8c8 0008 	str.w	r0, [r8, #8]
 8018738:	689b      	ldr	r3, [r3, #8]
 801873a:	2b00      	cmp	r3, #0
 801873c:	f000 814a 	beq.w	80189d4 <rcl_wait_set_resize+0x310>
 8018740:	4622      	mov	r2, r4
 8018742:	4649      	mov	r1, r9
 8018744:	4618      	mov	r0, r3
 8018746:	f004 fb97 	bl	801ce78 <memset>
 801874a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801874c:	f04f 0800 	mov.w	r8, #0
 8018750:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018754:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8018758:	f8c5 800c 	str.w	r8, [r5, #12]
 801875c:	f8c4 800c 	str.w	r8, [r4, #12]
 8018760:	2e00      	cmp	r6, #0
 8018762:	f040 809b 	bne.w	801889c <rcl_wait_set_resize+0x1d8>
 8018766:	68a8      	ldr	r0, [r5, #8]
 8018768:	b128      	cbz	r0, 8018776 <rcl_wait_set_resize+0xb2>
 801876a:	4649      	mov	r1, r9
 801876c:	4790      	blx	r2
 801876e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018770:	60ae      	str	r6, [r5, #8]
 8018772:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018776:	f04f 0800 	mov.w	r8, #0
 801877a:	19f6      	adds	r6, r6, r7
 801877c:	f8c4 8010 	str.w	r8, [r4, #16]
 8018780:	f040 80a2 	bne.w	80188c8 <rcl_wait_set_resize+0x204>
 8018784:	6960      	ldr	r0, [r4, #20]
 8018786:	b130      	cbz	r0, 8018796 <rcl_wait_set_resize+0xd2>
 8018788:	4649      	mov	r1, r9
 801878a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801878c:	4798      	blx	r3
 801878e:	6166      	str	r6, [r4, #20]
 8018790:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018792:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018796:	2600      	movs	r6, #0
 8018798:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801879c:	616e      	str	r6, [r5, #20]
 801879e:	6426      	str	r6, [r4, #64]	@ 0x40
 80187a0:	2f00      	cmp	r7, #0
 80187a2:	f040 80af 	bne.w	8018904 <rcl_wait_set_resize+0x240>
 80187a6:	6928      	ldr	r0, [r5, #16]
 80187a8:	b138      	cbz	r0, 80187ba <rcl_wait_set_resize+0xf6>
 80187aa:	4649      	mov	r1, r9
 80187ac:	47d0      	blx	sl
 80187ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187b0:	612f      	str	r7, [r5, #16]
 80187b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80187b6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80187ba:	2600      	movs	r6, #0
 80187bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187be:	61ee      	str	r6, [r5, #28]
 80187c0:	61a6      	str	r6, [r4, #24]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f040 8093 	bne.w	80188ee <rcl_wait_set_resize+0x22a>
 80187c8:	69a8      	ldr	r0, [r5, #24]
 80187ca:	b120      	cbz	r0, 80187d6 <rcl_wait_set_resize+0x112>
 80187cc:	4649      	mov	r1, r9
 80187ce:	47d0      	blx	sl
 80187d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187d4:	61ab      	str	r3, [r5, #24]
 80187d6:	6a20      	ldr	r0, [r4, #32]
 80187d8:	b128      	cbz	r0, 80187e6 <rcl_wait_set_resize+0x122>
 80187da:	4649      	mov	r1, r9
 80187dc:	47d0      	blx	sl
 80187de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187e0:	2300      	movs	r3, #0
 80187e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80187e6:	2600      	movs	r6, #0
 80187e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187ea:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80187ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80187f0:	626e      	str	r6, [r5, #36]	@ 0x24
 80187f2:	6266      	str	r6, [r4, #36]	@ 0x24
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	f000 8098 	beq.w	801892a <rcl_wait_set_resize+0x266>
 80187fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80187fe:	463a      	mov	r2, r7
 8018800:	6a28      	ldr	r0, [r5, #32]
 8018802:	4651      	mov	r1, sl
 8018804:	47c8      	blx	r9
 8018806:	6228      	str	r0, [r5, #32]
 8018808:	2800      	cmp	r0, #0
 801880a:	d077      	beq.n	80188fc <rcl_wait_set_resize+0x238>
 801880c:	4652      	mov	r2, sl
 801880e:	4631      	mov	r1, r6
 8018810:	f004 fb32 	bl	801ce78 <memset>
 8018814:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018818:	463a      	mov	r2, r7
 801881a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801881c:	4651      	mov	r1, sl
 801881e:	626b      	str	r3, [r5, #36]	@ 0x24
 8018820:	62a6      	str	r6, [r4, #40]	@ 0x28
 8018822:	47c8      	blx	r9
 8018824:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018826:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8018828:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801882a:	2c00      	cmp	r4, #0
 801882c:	f000 80f2 	beq.w	8018a14 <rcl_wait_set_resize+0x350>
 8018830:	4620      	mov	r0, r4
 8018832:	4652      	mov	r2, sl
 8018834:	4631      	mov	r1, r6
 8018836:	f004 fb1f 	bl	801ce78 <memset>
 801883a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801883c:	2600      	movs	r6, #0
 801883e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018840:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8018842:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8018846:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8018848:	6326      	str	r6, [r4, #48]	@ 0x30
 801884a:	2b00      	cmp	r3, #0
 801884c:	f040 8097 	bne.w	801897e <rcl_wait_set_resize+0x2ba>
 8018850:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018852:	b120      	cbz	r0, 801885e <rcl_wait_set_resize+0x19a>
 8018854:	4639      	mov	r1, r7
 8018856:	47c0      	blx	r8
 8018858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801885a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801885c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801885e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018860:	2800      	cmp	r0, #0
 8018862:	d04c      	beq.n	80188fe <rcl_wait_set_resize+0x23a>
 8018864:	4639      	mov	r1, r7
 8018866:	47c0      	blx	r8
 8018868:	2300      	movs	r3, #0
 801886a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801886c:	4618      	mov	r0, r3
 801886e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8018872:	b003      	add	sp, #12
 8018874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018878:	6800      	ldr	r0, [r0, #0]
 801887a:	b120      	cbz	r0, 8018886 <rcl_wait_set_resize+0x1c2>
 801887c:	4651      	mov	r1, sl
 801887e:	47d8      	blx	fp
 8018880:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018882:	f8c5 8000 	str.w	r8, [r5]
 8018886:	68a0      	ldr	r0, [r4, #8]
 8018888:	2800      	cmp	r0, #0
 801888a:	f43f af5f 	beq.w	801874c <rcl_wait_set_resize+0x88>
 801888e:	4651      	mov	r1, sl
 8018890:	47d8      	blx	fp
 8018892:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018894:	2300      	movs	r3, #0
 8018896:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801889a:	e757      	b.n	801874c <rcl_wait_set_resize+0x88>
 801889c:	00b4      	lsls	r4, r6, #2
 801889e:	464a      	mov	r2, r9
 80188a0:	68a8      	ldr	r0, [r5, #8]
 80188a2:	4621      	mov	r1, r4
 80188a4:	4798      	blx	r3
 80188a6:	60a8      	str	r0, [r5, #8]
 80188a8:	b340      	cbz	r0, 80188fc <rcl_wait_set_resize+0x238>
 80188aa:	4622      	mov	r2, r4
 80188ac:	4641      	mov	r1, r8
 80188ae:	f004 fae3 	bl	801ce78 <memset>
 80188b2:	f04f 0800 	mov.w	r8, #0
 80188b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188b8:	60ee      	str	r6, [r5, #12]
 80188ba:	19f6      	adds	r6, r6, r7
 80188bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80188c0:	f8c4 8010 	str.w	r8, [r4, #16]
 80188c4:	f43f af5e 	beq.w	8018784 <rcl_wait_set_resize+0xc0>
 80188c8:	00b6      	lsls	r6, r6, #2
 80188ca:	464a      	mov	r2, r9
 80188cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80188ce:	6960      	ldr	r0, [r4, #20]
 80188d0:	4631      	mov	r1, r6
 80188d2:	4798      	blx	r3
 80188d4:	4681      	mov	r9, r0
 80188d6:	6160      	str	r0, [r4, #20]
 80188d8:	2800      	cmp	r0, #0
 80188da:	f000 8084 	beq.w	80189e6 <rcl_wait_set_resize+0x322>
 80188de:	4632      	mov	r2, r6
 80188e0:	4641      	mov	r1, r8
 80188e2:	f004 fac9 	bl	801ce78 <memset>
 80188e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80188ec:	e753      	b.n	8018796 <rcl_wait_set_resize+0xd2>
 80188ee:	009c      	lsls	r4, r3, #2
 80188f0:	464a      	mov	r2, r9
 80188f2:	69a8      	ldr	r0, [r5, #24]
 80188f4:	4621      	mov	r1, r4
 80188f6:	47c0      	blx	r8
 80188f8:	61a8      	str	r0, [r5, #24]
 80188fa:	bb40      	cbnz	r0, 801894e <rcl_wait_set_resize+0x28a>
 80188fc:	200a      	movs	r0, #10
 80188fe:	b003      	add	sp, #12
 8018900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018904:	00bc      	lsls	r4, r7, #2
 8018906:	464a      	mov	r2, r9
 8018908:	6928      	ldr	r0, [r5, #16]
 801890a:	4621      	mov	r1, r4
 801890c:	47c0      	blx	r8
 801890e:	6128      	str	r0, [r5, #16]
 8018910:	2800      	cmp	r0, #0
 8018912:	d0f3      	beq.n	80188fc <rcl_wait_set_resize+0x238>
 8018914:	4622      	mov	r2, r4
 8018916:	4631      	mov	r1, r6
 8018918:	f004 faae 	bl	801ce78 <memset>
 801891c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801891e:	616f      	str	r7, [r5, #20]
 8018920:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018924:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8018928:	e747      	b.n	80187ba <rcl_wait_set_resize+0xf6>
 801892a:	6a28      	ldr	r0, [r5, #32]
 801892c:	b120      	cbz	r0, 8018938 <rcl_wait_set_resize+0x274>
 801892e:	4639      	mov	r1, r7
 8018930:	47c0      	blx	r8
 8018932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018934:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018936:	622b      	str	r3, [r5, #32]
 8018938:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801893a:	2800      	cmp	r0, #0
 801893c:	f43f af7e 	beq.w	801883c <rcl_wait_set_resize+0x178>
 8018940:	4639      	mov	r1, r7
 8018942:	47c0      	blx	r8
 8018944:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018946:	2300      	movs	r3, #0
 8018948:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801894c:	e776      	b.n	801883c <rcl_wait_set_resize+0x178>
 801894e:	4622      	mov	r2, r4
 8018950:	4631      	mov	r1, r6
 8018952:	f004 fa91 	bl	801ce78 <memset>
 8018956:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8018958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801895a:	464a      	mov	r2, r9
 801895c:	6a38      	ldr	r0, [r7, #32]
 801895e:	4621      	mov	r1, r4
 8018960:	61eb      	str	r3, [r5, #28]
 8018962:	61fe      	str	r6, [r7, #28]
 8018964:	47c0      	blx	r8
 8018966:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018968:	6238      	str	r0, [r7, #32]
 801896a:	6a1f      	ldr	r7, [r3, #32]
 801896c:	2f00      	cmp	r7, #0
 801896e:	d04a      	beq.n	8018a06 <rcl_wait_set_resize+0x342>
 8018970:	4622      	mov	r2, r4
 8018972:	4631      	mov	r1, r6
 8018974:	4638      	mov	r0, r7
 8018976:	f004 fa7f 	bl	801ce78 <memset>
 801897a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801897c:	e733      	b.n	80187e6 <rcl_wait_set_resize+0x122>
 801897e:	009c      	lsls	r4, r3, #2
 8018980:	463a      	mov	r2, r7
 8018982:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018984:	4621      	mov	r1, r4
 8018986:	47c8      	blx	r9
 8018988:	62a8      	str	r0, [r5, #40]	@ 0x28
 801898a:	2800      	cmp	r0, #0
 801898c:	d0b6      	beq.n	80188fc <rcl_wait_set_resize+0x238>
 801898e:	4622      	mov	r2, r4
 8018990:	4631      	mov	r1, r6
 8018992:	f004 fa71 	bl	801ce78 <memset>
 8018996:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801899a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801899c:	463a      	mov	r2, r7
 801899e:	4621      	mov	r1, r4
 80189a0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80189a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80189a6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80189aa:	47c8      	blx	r9
 80189ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80189ae:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80189b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d034      	beq.n	8018a22 <rcl_wait_set_resize+0x35e>
 80189b8:	4622      	mov	r2, r4
 80189ba:	4631      	mov	r1, r6
 80189bc:	4618      	mov	r0, r3
 80189be:	f004 fa5b 	bl	801ce78 <memset>
 80189c2:	4630      	mov	r0, r6
 80189c4:	b003      	add	sp, #12
 80189c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ca:	200b      	movs	r0, #11
 80189cc:	4770      	bx	lr
 80189ce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80189d2:	e794      	b.n	80188fe <rcl_wait_set_resize+0x23a>
 80189d4:	6828      	ldr	r0, [r5, #0]
 80189d6:	4651      	mov	r1, sl
 80189d8:	9301      	str	r3, [sp, #4]
 80189da:	47d8      	blx	fp
 80189dc:	9b01      	ldr	r3, [sp, #4]
 80189de:	200a      	movs	r0, #10
 80189e0:	e9c5 3300 	strd	r3, r3, [r5]
 80189e4:	e78b      	b.n	80188fe <rcl_wait_set_resize+0x23a>
 80189e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80189e8:	68a8      	ldr	r0, [r5, #8]
 80189ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80189ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80189ee:	4798      	blx	r3
 80189f0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80189f2:	6928      	ldr	r0, [r5, #16]
 80189f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80189f6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80189f8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80189fc:	4790      	blx	r2
 80189fe:	200a      	movs	r0, #10
 8018a00:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8018a04:	e77b      	b.n	80188fe <rcl_wait_set_resize+0x23a>
 8018a06:	69a8      	ldr	r0, [r5, #24]
 8018a08:	4649      	mov	r1, r9
 8018a0a:	47d0      	blx	sl
 8018a0c:	200a      	movs	r0, #10
 8018a0e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8018a12:	e774      	b.n	80188fe <rcl_wait_set_resize+0x23a>
 8018a14:	6a28      	ldr	r0, [r5, #32]
 8018a16:	4639      	mov	r1, r7
 8018a18:	47c0      	blx	r8
 8018a1a:	200a      	movs	r0, #10
 8018a1c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8018a20:	e76d      	b.n	80188fe <rcl_wait_set_resize+0x23a>
 8018a22:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018a24:	4639      	mov	r1, r7
 8018a26:	9301      	str	r3, [sp, #4]
 8018a28:	47c0      	blx	r8
 8018a2a:	9b01      	ldr	r3, [sp, #4]
 8018a2c:	200a      	movs	r0, #10
 8018a2e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8018a32:	e764      	b.n	80188fe <rcl_wait_set_resize+0x23a>

08018a34 <rcl_wait_set_init>:
 8018a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a38:	b085      	sub	sp, #20
 8018a3a:	4605      	mov	r5, r0
 8018a3c:	460e      	mov	r6, r1
 8018a3e:	4617      	mov	r7, r2
 8018a40:	a812      	add	r0, sp, #72	@ 0x48
 8018a42:	4698      	mov	r8, r3
 8018a44:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8018a48:	f7f7 f9a6 	bl	800fd98 <rcutils_allocator_is_valid>
 8018a4c:	2d00      	cmp	r5, #0
 8018a4e:	d072      	beq.n	8018b36 <rcl_wait_set_init+0x102>
 8018a50:	f080 0001 	eor.w	r0, r0, #1
 8018a54:	b2c0      	uxtb	r0, r0
 8018a56:	2800      	cmp	r0, #0
 8018a58:	d16d      	bne.n	8018b36 <rcl_wait_set_init+0x102>
 8018a5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8018a5e:	f1ba 0f00 	cmp.w	sl, #0
 8018a62:	d004      	beq.n	8018a6e <rcl_wait_set_init+0x3a>
 8018a64:	2464      	movs	r4, #100	@ 0x64
 8018a66:	4620      	mov	r0, r4
 8018a68:	b005      	add	sp, #20
 8018a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a6e:	f1b9 0f00 	cmp.w	r9, #0
 8018a72:	d060      	beq.n	8018b36 <rcl_wait_set_init+0x102>
 8018a74:	4648      	mov	r0, r9
 8018a76:	f7fe faa3 	bl	8016fc0 <rcl_context_is_valid>
 8018a7a:	2800      	cmp	r0, #0
 8018a7c:	d068      	beq.n	8018b50 <rcl_wait_set_init+0x11c>
 8018a7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018a80:	205c      	movs	r0, #92	@ 0x5c
 8018a82:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018a84:	4798      	blx	r3
 8018a86:	6328      	str	r0, [r5, #48]	@ 0x30
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	d063      	beq.n	8018b54 <rcl_wait_set_init+0x120>
 8018a8c:	225c      	movs	r2, #92	@ 0x5c
 8018a8e:	4651      	mov	r1, sl
 8018a90:	f004 f9f2 	bl	801ce78 <memset>
 8018a94:	ac12      	add	r4, sp, #72	@ 0x48
 8018a96:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8018a9a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8018a9e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8018aa2:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8018aa6:	eb03 0e02 	add.w	lr, r3, r2
 8018aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018aac:	f8d9 9000 	ldr.w	r9, [r9]
 8018ab0:	449e      	add	lr, r3
 8018ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ab4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8018ab8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8018abc:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8018ac0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8018ac4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8018ac8:	44be      	add	lr, r7
 8018aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ace:	6823      	ldr	r3, [r4, #0]
 8018ad0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8018ad4:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8018ad8:	f8cc 3000 	str.w	r3, [ip]
 8018adc:	f002 fa2a 	bl	801af34 <rmw_create_wait_set>
 8018ae0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018ae2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8018ae6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018ae8:	b350      	cbz	r0, 8018b40 <rcl_wait_set_init+0x10c>
 8018aea:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8018aec:	4643      	mov	r3, r8
 8018aee:	463a      	mov	r2, r7
 8018af0:	4631      	mov	r1, r6
 8018af2:	9402      	str	r4, [sp, #8]
 8018af4:	4628      	mov	r0, r5
 8018af6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018af8:	9401      	str	r4, [sp, #4]
 8018afa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018afc:	9400      	str	r4, [sp, #0]
 8018afe:	f7ff fde1 	bl	80186c4 <rcl_wait_set_resize>
 8018b02:	4604      	mov	r4, r0
 8018b04:	2800      	cmp	r0, #0
 8018b06:	d0ae      	beq.n	8018a66 <rcl_wait_set_init+0x32>
 8018b08:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018b0a:	bb2b      	cbnz	r3, 8018b58 <rcl_wait_set_init+0x124>
 8018b0c:	2600      	movs	r6, #0
 8018b0e:	4628      	mov	r0, r5
 8018b10:	4633      	mov	r3, r6
 8018b12:	4632      	mov	r2, r6
 8018b14:	4631      	mov	r1, r6
 8018b16:	9600      	str	r6, [sp, #0]
 8018b18:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018b1c:	f7ff fdd2 	bl	80186c4 <rcl_wait_set_resize>
 8018b20:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d09f      	beq.n	8018a66 <rcl_wait_set_init+0x32>
 8018b26:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018b28:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018b2a:	4798      	blx	r3
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	632e      	str	r6, [r5, #48]	@ 0x30
 8018b30:	b005      	add	sp, #20
 8018b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b36:	240b      	movs	r4, #11
 8018b38:	4620      	mov	r0, r4
 8018b3a:	b005      	add	sp, #20
 8018b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b40:	2401      	movs	r4, #1
 8018b42:	f002 fa01 	bl	801af48 <rmw_destroy_wait_set>
 8018b46:	2800      	cmp	r0, #0
 8018b48:	bf18      	it	ne
 8018b4a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8018b4e:	e7dd      	b.n	8018b0c <rcl_wait_set_init+0xd8>
 8018b50:	2465      	movs	r4, #101	@ 0x65
 8018b52:	e788      	b.n	8018a66 <rcl_wait_set_init+0x32>
 8018b54:	240a      	movs	r4, #10
 8018b56:	e786      	b.n	8018a66 <rcl_wait_set_init+0x32>
 8018b58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018b5a:	e7f2      	b.n	8018b42 <rcl_wait_set_init+0x10e>

08018b5c <rcl_wait_set_add_guard_condition>:
 8018b5c:	b318      	cbz	r0, 8018ba6 <rcl_wait_set_add_guard_condition+0x4a>
 8018b5e:	b538      	push	{r3, r4, r5, lr}
 8018b60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018b62:	4604      	mov	r4, r0
 8018b64:	b30b      	cbz	r3, 8018baa <rcl_wait_set_add_guard_condition+0x4e>
 8018b66:	b319      	cbz	r1, 8018bb0 <rcl_wait_set_add_guard_condition+0x54>
 8018b68:	68dd      	ldr	r5, [r3, #12]
 8018b6a:	68c0      	ldr	r0, [r0, #12]
 8018b6c:	4285      	cmp	r5, r0
 8018b6e:	d217      	bcs.n	8018ba0 <rcl_wait_set_add_guard_condition+0x44>
 8018b70:	1c68      	adds	r0, r5, #1
 8018b72:	60d8      	str	r0, [r3, #12]
 8018b74:	68a3      	ldr	r3, [r4, #8]
 8018b76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018b7a:	b102      	cbz	r2, 8018b7e <rcl_wait_set_add_guard_condition+0x22>
 8018b7c:	6015      	str	r5, [r2, #0]
 8018b7e:	4608      	mov	r0, r1
 8018b80:	f003 fb2e 	bl	801c1e0 <rcl_guard_condition_get_rmw_handle>
 8018b84:	b150      	cbz	r0, 8018b9c <rcl_wait_set_add_guard_condition+0x40>
 8018b86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018b88:	6842      	ldr	r2, [r0, #4]
 8018b8a:	2000      	movs	r0, #0
 8018b8c:	695b      	ldr	r3, [r3, #20]
 8018b8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018b92:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018b94:	6913      	ldr	r3, [r2, #16]
 8018b96:	3301      	adds	r3, #1
 8018b98:	6113      	str	r3, [r2, #16]
 8018b9a:	bd38      	pop	{r3, r4, r5, pc}
 8018b9c:	2001      	movs	r0, #1
 8018b9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ba0:	f240 3086 	movw	r0, #902	@ 0x386
 8018ba4:	bd38      	pop	{r3, r4, r5, pc}
 8018ba6:	200b      	movs	r0, #11
 8018ba8:	4770      	bx	lr
 8018baa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018bae:	bd38      	pop	{r3, r4, r5, pc}
 8018bb0:	200b      	movs	r0, #11
 8018bb2:	bd38      	pop	{r3, r4, r5, pc}

08018bb4 <rcl_wait_set_add_timer>:
 8018bb4:	b328      	cbz	r0, 8018c02 <rcl_wait_set_add_timer+0x4e>
 8018bb6:	b538      	push	{r3, r4, r5, lr}
 8018bb8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018bba:	4604      	mov	r4, r0
 8018bbc:	b31b      	cbz	r3, 8018c06 <rcl_wait_set_add_timer+0x52>
 8018bbe:	b329      	cbz	r1, 8018c0c <rcl_wait_set_add_timer+0x58>
 8018bc0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8018bc2:	6965      	ldr	r5, [r4, #20]
 8018bc4:	42a8      	cmp	r0, r5
 8018bc6:	d219      	bcs.n	8018bfc <rcl_wait_set_add_timer+0x48>
 8018bc8:	1c45      	adds	r5, r0, #1
 8018bca:	641d      	str	r5, [r3, #64]	@ 0x40
 8018bcc:	6923      	ldr	r3, [r4, #16]
 8018bce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8018bd2:	b102      	cbz	r2, 8018bd6 <rcl_wait_set_add_timer+0x22>
 8018bd4:	6010      	str	r0, [r2, #0]
 8018bd6:	4608      	mov	r0, r1
 8018bd8:	f7ff fb9a 	bl	8018310 <rcl_timer_get_guard_condition>
 8018bdc:	b168      	cbz	r0, 8018bfa <rcl_wait_set_add_timer+0x46>
 8018bde:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018be0:	68e3      	ldr	r3, [r4, #12]
 8018be2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8018be4:	3b01      	subs	r3, #1
 8018be6:	441d      	add	r5, r3
 8018be8:	f003 fafa 	bl	801c1e0 <rcl_guard_condition_get_rmw_handle>
 8018bec:	b180      	cbz	r0, 8018c10 <rcl_wait_set_add_timer+0x5c>
 8018bee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018bf0:	6842      	ldr	r2, [r0, #4]
 8018bf2:	2000      	movs	r0, #0
 8018bf4:	695b      	ldr	r3, [r3, #20]
 8018bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018bfa:	bd38      	pop	{r3, r4, r5, pc}
 8018bfc:	f240 3086 	movw	r0, #902	@ 0x386
 8018c00:	bd38      	pop	{r3, r4, r5, pc}
 8018c02:	200b      	movs	r0, #11
 8018c04:	4770      	bx	lr
 8018c06:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c0a:	bd38      	pop	{r3, r4, r5, pc}
 8018c0c:	200b      	movs	r0, #11
 8018c0e:	bd38      	pop	{r3, r4, r5, pc}
 8018c10:	2001      	movs	r0, #1
 8018c12:	bd38      	pop	{r3, r4, r5, pc}

08018c14 <rcl_wait_set_add_client>:
 8018c14:	b318      	cbz	r0, 8018c5e <rcl_wait_set_add_client+0x4a>
 8018c16:	b538      	push	{r3, r4, r5, lr}
 8018c18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c1a:	4604      	mov	r4, r0
 8018c1c:	b30b      	cbz	r3, 8018c62 <rcl_wait_set_add_client+0x4e>
 8018c1e:	b319      	cbz	r1, 8018c68 <rcl_wait_set_add_client+0x54>
 8018c20:	699d      	ldr	r5, [r3, #24]
 8018c22:	69c0      	ldr	r0, [r0, #28]
 8018c24:	4285      	cmp	r5, r0
 8018c26:	d217      	bcs.n	8018c58 <rcl_wait_set_add_client+0x44>
 8018c28:	1c68      	adds	r0, r5, #1
 8018c2a:	6198      	str	r0, [r3, #24]
 8018c2c:	69a3      	ldr	r3, [r4, #24]
 8018c2e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018c32:	b102      	cbz	r2, 8018c36 <rcl_wait_set_add_client+0x22>
 8018c34:	6015      	str	r5, [r2, #0]
 8018c36:	4608      	mov	r0, r1
 8018c38:	f7fe f914 	bl	8016e64 <rcl_client_get_rmw_handle>
 8018c3c:	b150      	cbz	r0, 8018c54 <rcl_wait_set_add_client+0x40>
 8018c3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c40:	6842      	ldr	r2, [r0, #4]
 8018c42:	2000      	movs	r0, #0
 8018c44:	6a1b      	ldr	r3, [r3, #32]
 8018c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c4a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018c4c:	69d3      	ldr	r3, [r2, #28]
 8018c4e:	3301      	adds	r3, #1
 8018c50:	61d3      	str	r3, [r2, #28]
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
 8018c54:	2001      	movs	r0, #1
 8018c56:	bd38      	pop	{r3, r4, r5, pc}
 8018c58:	f240 3086 	movw	r0, #902	@ 0x386
 8018c5c:	bd38      	pop	{r3, r4, r5, pc}
 8018c5e:	200b      	movs	r0, #11
 8018c60:	4770      	bx	lr
 8018c62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c66:	bd38      	pop	{r3, r4, r5, pc}
 8018c68:	200b      	movs	r0, #11
 8018c6a:	bd38      	pop	{r3, r4, r5, pc}

08018c6c <rcl_wait_set_add_service>:
 8018c6c:	b318      	cbz	r0, 8018cb6 <rcl_wait_set_add_service+0x4a>
 8018c6e:	b538      	push	{r3, r4, r5, lr}
 8018c70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c72:	4604      	mov	r4, r0
 8018c74:	b30b      	cbz	r3, 8018cba <rcl_wait_set_add_service+0x4e>
 8018c76:	b319      	cbz	r1, 8018cc0 <rcl_wait_set_add_service+0x54>
 8018c78:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018c7a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018c7c:	4285      	cmp	r5, r0
 8018c7e:	d217      	bcs.n	8018cb0 <rcl_wait_set_add_service+0x44>
 8018c80:	1c68      	adds	r0, r5, #1
 8018c82:	6258      	str	r0, [r3, #36]	@ 0x24
 8018c84:	6a23      	ldr	r3, [r4, #32]
 8018c86:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018c8a:	b102      	cbz	r2, 8018c8e <rcl_wait_set_add_service+0x22>
 8018c8c:	6015      	str	r5, [r2, #0]
 8018c8e:	4608      	mov	r0, r1
 8018c90:	f7fe fea2 	bl	80179d8 <rcl_service_get_rmw_handle>
 8018c94:	b150      	cbz	r0, 8018cac <rcl_wait_set_add_service+0x40>
 8018c96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c98:	6842      	ldr	r2, [r0, #4]
 8018c9a:	2000      	movs	r0, #0
 8018c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ca2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018ca4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	6293      	str	r3, [r2, #40]	@ 0x28
 8018caa:	bd38      	pop	{r3, r4, r5, pc}
 8018cac:	2001      	movs	r0, #1
 8018cae:	bd38      	pop	{r3, r4, r5, pc}
 8018cb0:	f240 3086 	movw	r0, #902	@ 0x386
 8018cb4:	bd38      	pop	{r3, r4, r5, pc}
 8018cb6:	200b      	movs	r0, #11
 8018cb8:	4770      	bx	lr
 8018cba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018cbe:	bd38      	pop	{r3, r4, r5, pc}
 8018cc0:	200b      	movs	r0, #11
 8018cc2:	bd38      	pop	{r3, r4, r5, pc}
 8018cc4:	0000      	movs	r0, r0
	...

08018cc8 <rcl_wait>:
 8018cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ccc:	ed2d 8b02 	vpush	{d8}
 8018cd0:	b08d      	sub	sp, #52	@ 0x34
 8018cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018cd6:	2800      	cmp	r0, #0
 8018cd8:	f000 814f 	beq.w	8018f7a <rcl_wait+0x2b2>
 8018cdc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018cde:	4605      	mov	r5, r0
 8018ce0:	2e00      	cmp	r6, #0
 8018ce2:	f000 811a 	beq.w	8018f1a <rcl_wait+0x252>
 8018ce6:	6843      	ldr	r3, [r0, #4]
 8018ce8:	b983      	cbnz	r3, 8018d0c <rcl_wait+0x44>
 8018cea:	68eb      	ldr	r3, [r5, #12]
 8018cec:	b973      	cbnz	r3, 8018d0c <rcl_wait+0x44>
 8018cee:	696b      	ldr	r3, [r5, #20]
 8018cf0:	b963      	cbnz	r3, 8018d0c <rcl_wait+0x44>
 8018cf2:	69eb      	ldr	r3, [r5, #28]
 8018cf4:	b953      	cbnz	r3, 8018d0c <rcl_wait+0x44>
 8018cf6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018cf8:	b943      	cbnz	r3, 8018d0c <rcl_wait+0x44>
 8018cfa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8018cfc:	b933      	cbnz	r3, 8018d0c <rcl_wait+0x44>
 8018cfe:	f240 3085 	movw	r0, #901	@ 0x385
 8018d02:	b00d      	add	sp, #52	@ 0x34
 8018d04:	ecbd 8b02 	vpop	{d8}
 8018d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d0c:	9b04      	ldr	r3, [sp, #16]
 8018d0e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	9b05      	ldr	r3, [sp, #20]
 8018d14:	f173 0300 	sbcs.w	r3, r3, #0
 8018d18:	f2c0 80f8 	blt.w	8018f0c <rcl_wait+0x244>
 8018d1c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018d20:	2a00      	cmp	r2, #0
 8018d22:	f000 810f 	beq.w	8018f44 <rcl_wait+0x27c>
 8018d26:	2400      	movs	r4, #0
 8018d28:	4613      	mov	r3, r2
 8018d2a:	f240 3921 	movw	r9, #801	@ 0x321
 8018d2e:	4632      	mov	r2, r6
 8018d30:	46a2      	mov	sl, r4
 8018d32:	46a3      	mov	fp, r4
 8018d34:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8018f98 <rcl_wait+0x2d0>
 8018d38:	e014      	b.n	8018d64 <rcl_wait+0x9c>
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	d1e1      	bne.n	8018d02 <rcl_wait+0x3a>
 8018d3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018d42:	4542      	cmp	r2, r8
 8018d44:	eb73 0107 	sbcs.w	r1, r3, r7
 8018d48:	da03      	bge.n	8018d52 <rcl_wait+0x8a>
 8018d4a:	4690      	mov	r8, r2
 8018d4c:	461f      	mov	r7, r3
 8018d4e:	f04f 0b01 	mov.w	fp, #1
 8018d52:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018d54:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018d56:	3401      	adds	r4, #1
 8018d58:	f14a 0a00 	adc.w	sl, sl, #0
 8018d5c:	429c      	cmp	r4, r3
 8018d5e:	f17a 0100 	sbcs.w	r1, sl, #0
 8018d62:	d228      	bcs.n	8018db6 <rcl_wait+0xee>
 8018d64:	6928      	ldr	r0, [r5, #16]
 8018d66:	a908      	add	r1, sp, #32
 8018d68:	00a6      	lsls	r6, r4, #2
 8018d6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	d0f1      	beq.n	8018d56 <rcl_wait+0x8e>
 8018d72:	68eb      	ldr	r3, [r5, #12]
 8018d74:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018d78:	4423      	add	r3, r4
 8018d7a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8018d7e:	f1be 0f00 	cmp.w	lr, #0
 8018d82:	d006      	beq.n	8018d92 <rcl_wait+0xca>
 8018d84:	6913      	ldr	r3, [r2, #16]
 8018d86:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8018d8a:	3301      	adds	r3, #1
 8018d8c:	6113      	str	r3, [r2, #16]
 8018d8e:	692b      	ldr	r3, [r5, #16]
 8018d90:	5998      	ldr	r0, [r3, r6]
 8018d92:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018d96:	f7ff fa89 	bl	80182ac <rcl_timer_get_time_until_next_call>
 8018d9a:	4548      	cmp	r0, r9
 8018d9c:	d1cd      	bne.n	8018d3a <rcl_wait+0x72>
 8018d9e:	692b      	ldr	r3, [r5, #16]
 8018da0:	2200      	movs	r2, #0
 8018da2:	3401      	adds	r4, #1
 8018da4:	519a      	str	r2, [r3, r6]
 8018da6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018da8:	f14a 0a00 	adc.w	sl, sl, #0
 8018dac:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018dae:	429c      	cmp	r4, r3
 8018db0:	f17a 0100 	sbcs.w	r1, sl, #0
 8018db4:	d3d6      	bcc.n	8018d64 <rcl_wait+0x9c>
 8018db6:	4659      	mov	r1, fp
 8018db8:	4616      	mov	r6, r2
 8018dba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018dbe:	4313      	orrs	r3, r2
 8018dc0:	f040 80b4 	bne.w	8018f2c <rcl_wait+0x264>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	460c      	mov	r4, r1
 8018dca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018dd2:	ab08      	add	r3, sp, #32
 8018dd4:	9302      	str	r3, [sp, #8]
 8018dd6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8018dda:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8018ddc:	f106 0110 	add.w	r1, r6, #16
 8018de0:	9300      	str	r3, [sp, #0]
 8018de2:	1d30      	adds	r0, r6, #4
 8018de4:	f106 031c 	add.w	r3, r6, #28
 8018de8:	9201      	str	r2, [sp, #4]
 8018dea:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8018dee:	f001 ff3d 	bl	801ac6c <rmw_wait>
 8018df2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018df4:	4680      	mov	r8, r0
 8018df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018df8:	b1e2      	cbz	r2, 8018e34 <rcl_wait+0x16c>
 8018dfa:	f04f 0900 	mov.w	r9, #0
 8018dfe:	464f      	mov	r7, r9
 8018e00:	692a      	ldr	r2, [r5, #16]
 8018e02:	f10d 011f 	add.w	r1, sp, #31
 8018e06:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8018e0a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8018e0e:	b160      	cbz	r0, 8018e2a <rcl_wait+0x162>
 8018e10:	f88d 701f 	strb.w	r7, [sp, #31]
 8018e14:	f7ff fa0e 	bl	8018234 <rcl_timer_is_ready>
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	f47f af72 	bne.w	8018d02 <rcl_wait+0x3a>
 8018e1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8018e22:	b90b      	cbnz	r3, 8018e28 <rcl_wait+0x160>
 8018e24:	692a      	ldr	r2, [r5, #16]
 8018e26:	5193      	str	r3, [r2, r6]
 8018e28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018e2a:	f109 0901 	add.w	r9, r9, #1
 8018e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018e30:	454a      	cmp	r2, r9
 8018e32:	d8e5      	bhi.n	8018e00 <rcl_wait+0x138>
 8018e34:	f038 0002 	bics.w	r0, r8, #2
 8018e38:	d176      	bne.n	8018f28 <rcl_wait+0x260>
 8018e3a:	686f      	ldr	r7, [r5, #4]
 8018e3c:	b17f      	cbz	r7, 8018e5e <rcl_wait+0x196>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	e002      	b.n	8018e48 <rcl_wait+0x180>
 8018e42:	3201      	adds	r2, #1
 8018e44:	42ba      	cmp	r2, r7
 8018e46:	d00a      	beq.n	8018e5e <rcl_wait+0x196>
 8018e48:	6899      	ldr	r1, [r3, #8]
 8018e4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e4e:	2900      	cmp	r1, #0
 8018e50:	d1f7      	bne.n	8018e42 <rcl_wait+0x17a>
 8018e52:	682e      	ldr	r6, [r5, #0]
 8018e54:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e58:	3201      	adds	r2, #1
 8018e5a:	42ba      	cmp	r2, r7
 8018e5c:	d1f4      	bne.n	8018e48 <rcl_wait+0x180>
 8018e5e:	68ef      	ldr	r7, [r5, #12]
 8018e60:	b17f      	cbz	r7, 8018e82 <rcl_wait+0x1ba>
 8018e62:	2200      	movs	r2, #0
 8018e64:	e002      	b.n	8018e6c <rcl_wait+0x1a4>
 8018e66:	3201      	adds	r2, #1
 8018e68:	42ba      	cmp	r2, r7
 8018e6a:	d00a      	beq.n	8018e82 <rcl_wait+0x1ba>
 8018e6c:	6959      	ldr	r1, [r3, #20]
 8018e6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e72:	2900      	cmp	r1, #0
 8018e74:	d1f7      	bne.n	8018e66 <rcl_wait+0x19e>
 8018e76:	68ae      	ldr	r6, [r5, #8]
 8018e78:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e7c:	3201      	adds	r2, #1
 8018e7e:	42ba      	cmp	r2, r7
 8018e80:	d1f4      	bne.n	8018e6c <rcl_wait+0x1a4>
 8018e82:	69ef      	ldr	r7, [r5, #28]
 8018e84:	b17f      	cbz	r7, 8018ea6 <rcl_wait+0x1de>
 8018e86:	2200      	movs	r2, #0
 8018e88:	e002      	b.n	8018e90 <rcl_wait+0x1c8>
 8018e8a:	3201      	adds	r2, #1
 8018e8c:	42ba      	cmp	r2, r7
 8018e8e:	d00a      	beq.n	8018ea6 <rcl_wait+0x1de>
 8018e90:	6a19      	ldr	r1, [r3, #32]
 8018e92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e96:	2900      	cmp	r1, #0
 8018e98:	d1f7      	bne.n	8018e8a <rcl_wait+0x1c2>
 8018e9a:	69ae      	ldr	r6, [r5, #24]
 8018e9c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018ea0:	3201      	adds	r2, #1
 8018ea2:	42ba      	cmp	r2, r7
 8018ea4:	d1f4      	bne.n	8018e90 <rcl_wait+0x1c8>
 8018ea6:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8018ea8:	b17f      	cbz	r7, 8018eca <rcl_wait+0x202>
 8018eaa:	2200      	movs	r2, #0
 8018eac:	e002      	b.n	8018eb4 <rcl_wait+0x1ec>
 8018eae:	3201      	adds	r2, #1
 8018eb0:	42ba      	cmp	r2, r7
 8018eb2:	d00a      	beq.n	8018eca <rcl_wait+0x202>
 8018eb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018eb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018eba:	2900      	cmp	r1, #0
 8018ebc:	d1f7      	bne.n	8018eae <rcl_wait+0x1e6>
 8018ebe:	6a2e      	ldr	r6, [r5, #32]
 8018ec0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018ec4:	3201      	adds	r2, #1
 8018ec6:	42ba      	cmp	r2, r7
 8018ec8:	d1f4      	bne.n	8018eb4 <rcl_wait+0x1ec>
 8018eca:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8018ecc:	b17f      	cbz	r7, 8018eee <rcl_wait+0x226>
 8018ece:	2200      	movs	r2, #0
 8018ed0:	e002      	b.n	8018ed8 <rcl_wait+0x210>
 8018ed2:	3201      	adds	r2, #1
 8018ed4:	42ba      	cmp	r2, r7
 8018ed6:	d00a      	beq.n	8018eee <rcl_wait+0x226>
 8018ed8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8018eda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018ede:	2900      	cmp	r1, #0
 8018ee0:	d1f7      	bne.n	8018ed2 <rcl_wait+0x20a>
 8018ee2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8018ee4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018ee8:	3201      	adds	r2, #1
 8018eea:	42ba      	cmp	r2, r7
 8018eec:	d1f4      	bne.n	8018ed8 <rcl_wait+0x210>
 8018eee:	f1b8 0f02 	cmp.w	r8, #2
 8018ef2:	f47f af06 	bne.w	8018d02 <rcl_wait+0x3a>
 8018ef6:	f084 0301 	eor.w	r3, r4, #1
 8018efa:	b2db      	uxtb	r3, r3
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	bf18      	it	ne
 8018f00:	2002      	movne	r0, #2
 8018f02:	b00d      	add	sp, #52	@ 0x34
 8018f04:	ecbd 8b02 	vpop	{d8}
 8018f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0c:	2a00      	cmp	r2, #0
 8018f0e:	d03a      	beq.n	8018f86 <rcl_wait+0x2be>
 8018f10:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018f14:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018f18:	e705      	b.n	8018d26 <rcl_wait+0x5e>
 8018f1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018f1e:	b00d      	add	sp, #52	@ 0x34
 8018f20:	ecbd 8b02 	vpop	{d8}
 8018f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f28:	2001      	movs	r0, #1
 8018f2a:	e6ea      	b.n	8018d02 <rcl_wait+0x3a>
 8018f2c:	9b04      	ldr	r3, [sp, #16]
 8018f2e:	460c      	mov	r4, r1
 8018f30:	2b01      	cmp	r3, #1
 8018f32:	9b05      	ldr	r3, [sp, #20]
 8018f34:	f173 0300 	sbcs.w	r3, r3, #0
 8018f38:	bfa8      	it	ge
 8018f3a:	f044 0401 	orrge.w	r4, r4, #1
 8018f3e:	b914      	cbnz	r4, 8018f46 <rcl_wait+0x27e>
 8018f40:	4623      	mov	r3, r4
 8018f42:	e747      	b.n	8018dd4 <rcl_wait+0x10c>
 8018f44:	4611      	mov	r1, r2
 8018f46:	2f00      	cmp	r7, #0
 8018f48:	da02      	bge.n	8018f50 <rcl_wait+0x288>
 8018f4a:	f04f 0800 	mov.w	r8, #0
 8018f4e:	4647      	mov	r7, r8
 8018f50:	460c      	mov	r4, r1
 8018f52:	4640      	mov	r0, r8
 8018f54:	4639      	mov	r1, r7
 8018f56:	a312      	add	r3, pc, #72	@ (adr r3, 8018fa0 <rcl_wait+0x2d8>)
 8018f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5c:	f7e7 fa28 	bl	80003b0 <__aeabi_ldivmod>
 8018f60:	a30f      	add	r3, pc, #60	@ (adr r3, 8018fa0 <rcl_wait+0x2d8>)
 8018f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018f6a:	4640      	mov	r0, r8
 8018f6c:	4639      	mov	r1, r7
 8018f6e:	f7e7 fa1f 	bl	80003b0 <__aeabi_ldivmod>
 8018f72:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018f76:	ab08      	add	r3, sp, #32
 8018f78:	e72c      	b.n	8018dd4 <rcl_wait+0x10c>
 8018f7a:	200b      	movs	r0, #11
 8018f7c:	b00d      	add	sp, #52	@ 0x34
 8018f7e:	ecbd 8b02 	vpop	{d8}
 8018f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f86:	4611      	mov	r1, r2
 8018f88:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018f8c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018f90:	e713      	b.n	8018dba <rcl_wait+0xf2>
 8018f92:	bf00      	nop
 8018f94:	f3af 8000 	nop.w
 8018f98:	ffffffff 	.word	0xffffffff
 8018f9c:	7fffffff 	.word	0x7fffffff
 8018fa0:	3b9aca00 	.word	0x3b9aca00
 8018fa4:	00000000 	.word	0x00000000

08018fa8 <rcl_action_take_goal_response>:
 8018fa8:	2800      	cmp	r0, #0
 8018faa:	d039      	beq.n	8019020 <rcl_action_take_goal_response+0x78>
 8018fac:	b570      	push	{r4, r5, r6, lr}
 8018fae:	4604      	mov	r4, r0
 8018fb0:	6800      	ldr	r0, [r0, #0]
 8018fb2:	b380      	cbz	r0, 8019016 <rcl_action_take_goal_response+0x6e>
 8018fb4:	460e      	mov	r6, r1
 8018fb6:	4615      	mov	r5, r2
 8018fb8:	f7fd ffda 	bl	8016f70 <rcl_client_is_valid>
 8018fbc:	b330      	cbz	r0, 801900c <rcl_action_take_goal_response+0x64>
 8018fbe:	6820      	ldr	r0, [r4, #0]
 8018fc0:	3004      	adds	r0, #4
 8018fc2:	f7fd ffd5 	bl	8016f70 <rcl_client_is_valid>
 8018fc6:	b308      	cbz	r0, 801900c <rcl_action_take_goal_response+0x64>
 8018fc8:	6820      	ldr	r0, [r4, #0]
 8018fca:	3008      	adds	r0, #8
 8018fcc:	f7fd ffd0 	bl	8016f70 <rcl_client_is_valid>
 8018fd0:	b1e0      	cbz	r0, 801900c <rcl_action_take_goal_response+0x64>
 8018fd2:	6820      	ldr	r0, [r4, #0]
 8018fd4:	300c      	adds	r0, #12
 8018fd6:	f7fe fdc3 	bl	8017b60 <rcl_subscription_is_valid>
 8018fda:	b1b8      	cbz	r0, 801900c <rcl_action_take_goal_response+0x64>
 8018fdc:	6820      	ldr	r0, [r4, #0]
 8018fde:	3010      	adds	r0, #16
 8018fe0:	f7fe fdbe 	bl	8017b60 <rcl_subscription_is_valid>
 8018fe4:	b190      	cbz	r0, 801900c <rcl_action_take_goal_response+0x64>
 8018fe6:	b1cd      	cbz	r5, 801901c <rcl_action_take_goal_response+0x74>
 8018fe8:	b1c6      	cbz	r6, 801901c <rcl_action_take_goal_response+0x74>
 8018fea:	462a      	mov	r2, r5
 8018fec:	4631      	mov	r1, r6
 8018fee:	6820      	ldr	r0, [r4, #0]
 8018ff0:	f7fd ff76 	bl	8016ee0 <rcl_take_response>
 8018ff4:	b148      	cbz	r0, 801900a <rcl_action_take_goal_response+0x62>
 8018ff6:	280a      	cmp	r0, #10
 8018ff8:	d007      	beq.n	801900a <rcl_action_take_goal_response+0x62>
 8018ffa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018ffe:	f640 0337 	movw	r3, #2103	@ 0x837
 8019002:	4290      	cmp	r0, r2
 8019004:	bf0c      	ite	eq
 8019006:	4618      	moveq	r0, r3
 8019008:	2001      	movne	r0, #1
 801900a:	bd70      	pop	{r4, r5, r6, pc}
 801900c:	f7f6 fee8 	bl	800fde0 <rcutils_reset_error>
 8019010:	f640 0036 	movw	r0, #2102	@ 0x836
 8019014:	bd70      	pop	{r4, r5, r6, pc}
 8019016:	f640 0036 	movw	r0, #2102	@ 0x836
 801901a:	bd70      	pop	{r4, r5, r6, pc}
 801901c:	200b      	movs	r0, #11
 801901e:	bd70      	pop	{r4, r5, r6, pc}
 8019020:	f640 0036 	movw	r0, #2102	@ 0x836
 8019024:	4770      	bx	lr
 8019026:	bf00      	nop

08019028 <rcl_action_send_result_request>:
 8019028:	b390      	cbz	r0, 8019090 <rcl_action_send_result_request+0x68>
 801902a:	b570      	push	{r4, r5, r6, lr}
 801902c:	4604      	mov	r4, r0
 801902e:	6800      	ldr	r0, [r0, #0]
 8019030:	b348      	cbz	r0, 8019086 <rcl_action_send_result_request+0x5e>
 8019032:	460e      	mov	r6, r1
 8019034:	4615      	mov	r5, r2
 8019036:	f7fd ff9b 	bl	8016f70 <rcl_client_is_valid>
 801903a:	b1f8      	cbz	r0, 801907c <rcl_action_send_result_request+0x54>
 801903c:	6820      	ldr	r0, [r4, #0]
 801903e:	3004      	adds	r0, #4
 8019040:	f7fd ff96 	bl	8016f70 <rcl_client_is_valid>
 8019044:	b1d0      	cbz	r0, 801907c <rcl_action_send_result_request+0x54>
 8019046:	6820      	ldr	r0, [r4, #0]
 8019048:	3008      	adds	r0, #8
 801904a:	f7fd ff91 	bl	8016f70 <rcl_client_is_valid>
 801904e:	b1a8      	cbz	r0, 801907c <rcl_action_send_result_request+0x54>
 8019050:	6820      	ldr	r0, [r4, #0]
 8019052:	300c      	adds	r0, #12
 8019054:	f7fe fd84 	bl	8017b60 <rcl_subscription_is_valid>
 8019058:	b180      	cbz	r0, 801907c <rcl_action_send_result_request+0x54>
 801905a:	6820      	ldr	r0, [r4, #0]
 801905c:	3010      	adds	r0, #16
 801905e:	f7fe fd7f 	bl	8017b60 <rcl_subscription_is_valid>
 8019062:	b158      	cbz	r0, 801907c <rcl_action_send_result_request+0x54>
 8019064:	b195      	cbz	r5, 801908c <rcl_action_send_result_request+0x64>
 8019066:	b18e      	cbz	r6, 801908c <rcl_action_send_result_request+0x64>
 8019068:	6820      	ldr	r0, [r4, #0]
 801906a:	462a      	mov	r2, r5
 801906c:	4631      	mov	r1, r6
 801906e:	3008      	adds	r0, #8
 8019070:	f7fd fefe 	bl	8016e70 <rcl_send_request>
 8019074:	3800      	subs	r0, #0
 8019076:	bf18      	it	ne
 8019078:	2001      	movne	r0, #1
 801907a:	bd70      	pop	{r4, r5, r6, pc}
 801907c:	f7f6 feb0 	bl	800fde0 <rcutils_reset_error>
 8019080:	f640 0036 	movw	r0, #2102	@ 0x836
 8019084:	bd70      	pop	{r4, r5, r6, pc}
 8019086:	f640 0036 	movw	r0, #2102	@ 0x836
 801908a:	bd70      	pop	{r4, r5, r6, pc}
 801908c:	200b      	movs	r0, #11
 801908e:	bd70      	pop	{r4, r5, r6, pc}
 8019090:	f640 0036 	movw	r0, #2102	@ 0x836
 8019094:	4770      	bx	lr
 8019096:	bf00      	nop

08019098 <rcl_action_take_result_response>:
 8019098:	2800      	cmp	r0, #0
 801909a:	d03a      	beq.n	8019112 <rcl_action_take_result_response+0x7a>
 801909c:	b570      	push	{r4, r5, r6, lr}
 801909e:	4604      	mov	r4, r0
 80190a0:	6800      	ldr	r0, [r0, #0]
 80190a2:	b388      	cbz	r0, 8019108 <rcl_action_take_result_response+0x70>
 80190a4:	460e      	mov	r6, r1
 80190a6:	4615      	mov	r5, r2
 80190a8:	f7fd ff62 	bl	8016f70 <rcl_client_is_valid>
 80190ac:	b338      	cbz	r0, 80190fe <rcl_action_take_result_response+0x66>
 80190ae:	6820      	ldr	r0, [r4, #0]
 80190b0:	3004      	adds	r0, #4
 80190b2:	f7fd ff5d 	bl	8016f70 <rcl_client_is_valid>
 80190b6:	b310      	cbz	r0, 80190fe <rcl_action_take_result_response+0x66>
 80190b8:	6820      	ldr	r0, [r4, #0]
 80190ba:	3008      	adds	r0, #8
 80190bc:	f7fd ff58 	bl	8016f70 <rcl_client_is_valid>
 80190c0:	b1e8      	cbz	r0, 80190fe <rcl_action_take_result_response+0x66>
 80190c2:	6820      	ldr	r0, [r4, #0]
 80190c4:	300c      	adds	r0, #12
 80190c6:	f7fe fd4b 	bl	8017b60 <rcl_subscription_is_valid>
 80190ca:	b1c0      	cbz	r0, 80190fe <rcl_action_take_result_response+0x66>
 80190cc:	6820      	ldr	r0, [r4, #0]
 80190ce:	3010      	adds	r0, #16
 80190d0:	f7fe fd46 	bl	8017b60 <rcl_subscription_is_valid>
 80190d4:	b198      	cbz	r0, 80190fe <rcl_action_take_result_response+0x66>
 80190d6:	b1d5      	cbz	r5, 801910e <rcl_action_take_result_response+0x76>
 80190d8:	b1ce      	cbz	r6, 801910e <rcl_action_take_result_response+0x76>
 80190da:	6820      	ldr	r0, [r4, #0]
 80190dc:	462a      	mov	r2, r5
 80190de:	4631      	mov	r1, r6
 80190e0:	3008      	adds	r0, #8
 80190e2:	f7fd fefd 	bl	8016ee0 <rcl_take_response>
 80190e6:	b148      	cbz	r0, 80190fc <rcl_action_take_result_response+0x64>
 80190e8:	280a      	cmp	r0, #10
 80190ea:	d007      	beq.n	80190fc <rcl_action_take_result_response+0x64>
 80190ec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80190f0:	f640 0337 	movw	r3, #2103	@ 0x837
 80190f4:	4290      	cmp	r0, r2
 80190f6:	bf0c      	ite	eq
 80190f8:	4618      	moveq	r0, r3
 80190fa:	2001      	movne	r0, #1
 80190fc:	bd70      	pop	{r4, r5, r6, pc}
 80190fe:	f7f6 fe6f 	bl	800fde0 <rcutils_reset_error>
 8019102:	f640 0036 	movw	r0, #2102	@ 0x836
 8019106:	bd70      	pop	{r4, r5, r6, pc}
 8019108:	f640 0036 	movw	r0, #2102	@ 0x836
 801910c:	bd70      	pop	{r4, r5, r6, pc}
 801910e:	200b      	movs	r0, #11
 8019110:	bd70      	pop	{r4, r5, r6, pc}
 8019112:	f640 0036 	movw	r0, #2102	@ 0x836
 8019116:	4770      	bx	lr

08019118 <rcl_action_take_cancel_response>:
 8019118:	2800      	cmp	r0, #0
 801911a:	d03a      	beq.n	8019192 <rcl_action_take_cancel_response+0x7a>
 801911c:	b570      	push	{r4, r5, r6, lr}
 801911e:	4604      	mov	r4, r0
 8019120:	6800      	ldr	r0, [r0, #0]
 8019122:	b388      	cbz	r0, 8019188 <rcl_action_take_cancel_response+0x70>
 8019124:	460e      	mov	r6, r1
 8019126:	4615      	mov	r5, r2
 8019128:	f7fd ff22 	bl	8016f70 <rcl_client_is_valid>
 801912c:	b338      	cbz	r0, 801917e <rcl_action_take_cancel_response+0x66>
 801912e:	6820      	ldr	r0, [r4, #0]
 8019130:	3004      	adds	r0, #4
 8019132:	f7fd ff1d 	bl	8016f70 <rcl_client_is_valid>
 8019136:	b310      	cbz	r0, 801917e <rcl_action_take_cancel_response+0x66>
 8019138:	6820      	ldr	r0, [r4, #0]
 801913a:	3008      	adds	r0, #8
 801913c:	f7fd ff18 	bl	8016f70 <rcl_client_is_valid>
 8019140:	b1e8      	cbz	r0, 801917e <rcl_action_take_cancel_response+0x66>
 8019142:	6820      	ldr	r0, [r4, #0]
 8019144:	300c      	adds	r0, #12
 8019146:	f7fe fd0b 	bl	8017b60 <rcl_subscription_is_valid>
 801914a:	b1c0      	cbz	r0, 801917e <rcl_action_take_cancel_response+0x66>
 801914c:	6820      	ldr	r0, [r4, #0]
 801914e:	3010      	adds	r0, #16
 8019150:	f7fe fd06 	bl	8017b60 <rcl_subscription_is_valid>
 8019154:	b198      	cbz	r0, 801917e <rcl_action_take_cancel_response+0x66>
 8019156:	b1d5      	cbz	r5, 801918e <rcl_action_take_cancel_response+0x76>
 8019158:	b1ce      	cbz	r6, 801918e <rcl_action_take_cancel_response+0x76>
 801915a:	6820      	ldr	r0, [r4, #0]
 801915c:	462a      	mov	r2, r5
 801915e:	4631      	mov	r1, r6
 8019160:	3004      	adds	r0, #4
 8019162:	f7fd febd 	bl	8016ee0 <rcl_take_response>
 8019166:	b148      	cbz	r0, 801917c <rcl_action_take_cancel_response+0x64>
 8019168:	280a      	cmp	r0, #10
 801916a:	d007      	beq.n	801917c <rcl_action_take_cancel_response+0x64>
 801916c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019170:	f640 0337 	movw	r3, #2103	@ 0x837
 8019174:	4290      	cmp	r0, r2
 8019176:	bf0c      	ite	eq
 8019178:	4618      	moveq	r0, r3
 801917a:	2001      	movne	r0, #1
 801917c:	bd70      	pop	{r4, r5, r6, pc}
 801917e:	f7f6 fe2f 	bl	800fde0 <rcutils_reset_error>
 8019182:	f640 0036 	movw	r0, #2102	@ 0x836
 8019186:	bd70      	pop	{r4, r5, r6, pc}
 8019188:	f640 0036 	movw	r0, #2102	@ 0x836
 801918c:	bd70      	pop	{r4, r5, r6, pc}
 801918e:	200b      	movs	r0, #11
 8019190:	bd70      	pop	{r4, r5, r6, pc}
 8019192:	f640 0036 	movw	r0, #2102	@ 0x836
 8019196:	4770      	bx	lr

08019198 <rcl_action_take_feedback>:
 8019198:	2800      	cmp	r0, #0
 801919a:	d038      	beq.n	801920e <rcl_action_take_feedback+0x76>
 801919c:	b530      	push	{r4, r5, lr}
 801919e:	4604      	mov	r4, r0
 80191a0:	6800      	ldr	r0, [r0, #0]
 80191a2:	b091      	sub	sp, #68	@ 0x44
 80191a4:	b378      	cbz	r0, 8019206 <rcl_action_take_feedback+0x6e>
 80191a6:	460d      	mov	r5, r1
 80191a8:	f7fd fee2 	bl	8016f70 <rcl_client_is_valid>
 80191ac:	b328      	cbz	r0, 80191fa <rcl_action_take_feedback+0x62>
 80191ae:	6820      	ldr	r0, [r4, #0]
 80191b0:	3004      	adds	r0, #4
 80191b2:	f7fd fedd 	bl	8016f70 <rcl_client_is_valid>
 80191b6:	b300      	cbz	r0, 80191fa <rcl_action_take_feedback+0x62>
 80191b8:	6820      	ldr	r0, [r4, #0]
 80191ba:	3008      	adds	r0, #8
 80191bc:	f7fd fed8 	bl	8016f70 <rcl_client_is_valid>
 80191c0:	b1d8      	cbz	r0, 80191fa <rcl_action_take_feedback+0x62>
 80191c2:	6820      	ldr	r0, [r4, #0]
 80191c4:	300c      	adds	r0, #12
 80191c6:	f7fe fccb 	bl	8017b60 <rcl_subscription_is_valid>
 80191ca:	b1b0      	cbz	r0, 80191fa <rcl_action_take_feedback+0x62>
 80191cc:	6820      	ldr	r0, [r4, #0]
 80191ce:	3010      	adds	r0, #16
 80191d0:	f7fe fcc6 	bl	8017b60 <rcl_subscription_is_valid>
 80191d4:	b188      	cbz	r0, 80191fa <rcl_action_take_feedback+0x62>
 80191d6:	b1ed      	cbz	r5, 8019214 <rcl_action_take_feedback+0x7c>
 80191d8:	6820      	ldr	r0, [r4, #0]
 80191da:	2300      	movs	r3, #0
 80191dc:	466a      	mov	r2, sp
 80191de:	4629      	mov	r1, r5
 80191e0:	300c      	adds	r0, #12
 80191e2:	f7fe fc61 	bl	8017aa8 <rcl_take>
 80191e6:	b160      	cbz	r0, 8019202 <rcl_action_take_feedback+0x6a>
 80191e8:	f240 1391 	movw	r3, #401	@ 0x191
 80191ec:	4298      	cmp	r0, r3
 80191ee:	d014      	beq.n	801921a <rcl_action_take_feedback+0x82>
 80191f0:	280a      	cmp	r0, #10
 80191f2:	bf18      	it	ne
 80191f4:	2001      	movne	r0, #1
 80191f6:	b011      	add	sp, #68	@ 0x44
 80191f8:	bd30      	pop	{r4, r5, pc}
 80191fa:	f7f6 fdf1 	bl	800fde0 <rcutils_reset_error>
 80191fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8019202:	b011      	add	sp, #68	@ 0x44
 8019204:	bd30      	pop	{r4, r5, pc}
 8019206:	f640 0036 	movw	r0, #2102	@ 0x836
 801920a:	b011      	add	sp, #68	@ 0x44
 801920c:	bd30      	pop	{r4, r5, pc}
 801920e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019212:	4770      	bx	lr
 8019214:	200b      	movs	r0, #11
 8019216:	b011      	add	sp, #68	@ 0x44
 8019218:	bd30      	pop	{r4, r5, pc}
 801921a:	f640 0037 	movw	r0, #2103	@ 0x837
 801921e:	e7f0      	b.n	8019202 <rcl_action_take_feedback+0x6a>

08019220 <rcl_action_wait_set_add_action_client>:
 8019220:	2800      	cmp	r0, #0
 8019222:	d048      	beq.n	80192b6 <rcl_action_wait_set_add_action_client+0x96>
 8019224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019226:	460c      	mov	r4, r1
 8019228:	2900      	cmp	r1, #0
 801922a:	d03c      	beq.n	80192a6 <rcl_action_wait_set_add_action_client+0x86>
 801922c:	4605      	mov	r5, r0
 801922e:	6808      	ldr	r0, [r1, #0]
 8019230:	2800      	cmp	r0, #0
 8019232:	d038      	beq.n	80192a6 <rcl_action_wait_set_add_action_client+0x86>
 8019234:	4617      	mov	r7, r2
 8019236:	461e      	mov	r6, r3
 8019238:	f7fd fe9a 	bl	8016f70 <rcl_client_is_valid>
 801923c:	b3b0      	cbz	r0, 80192ac <rcl_action_wait_set_add_action_client+0x8c>
 801923e:	6820      	ldr	r0, [r4, #0]
 8019240:	3004      	adds	r0, #4
 8019242:	f7fd fe95 	bl	8016f70 <rcl_client_is_valid>
 8019246:	b388      	cbz	r0, 80192ac <rcl_action_wait_set_add_action_client+0x8c>
 8019248:	6820      	ldr	r0, [r4, #0]
 801924a:	3008      	adds	r0, #8
 801924c:	f7fd fe90 	bl	8016f70 <rcl_client_is_valid>
 8019250:	b360      	cbz	r0, 80192ac <rcl_action_wait_set_add_action_client+0x8c>
 8019252:	6820      	ldr	r0, [r4, #0]
 8019254:	300c      	adds	r0, #12
 8019256:	f7fe fc83 	bl	8017b60 <rcl_subscription_is_valid>
 801925a:	b338      	cbz	r0, 80192ac <rcl_action_wait_set_add_action_client+0x8c>
 801925c:	6820      	ldr	r0, [r4, #0]
 801925e:	3010      	adds	r0, #16
 8019260:	f7fe fc7e 	bl	8017b60 <rcl_subscription_is_valid>
 8019264:	b310      	cbz	r0, 80192ac <rcl_action_wait_set_add_action_client+0x8c>
 8019266:	6821      	ldr	r1, [r4, #0]
 8019268:	4628      	mov	r0, r5
 801926a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801926e:	f7ff fcd1 	bl	8018c14 <rcl_wait_set_add_client>
 8019272:	b9b8      	cbnz	r0, 80192a4 <rcl_action_wait_set_add_action_client+0x84>
 8019274:	6821      	ldr	r1, [r4, #0]
 8019276:	4628      	mov	r0, r5
 8019278:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801927c:	3104      	adds	r1, #4
 801927e:	f7ff fcc9 	bl	8018c14 <rcl_wait_set_add_client>
 8019282:	b978      	cbnz	r0, 80192a4 <rcl_action_wait_set_add_action_client+0x84>
 8019284:	6821      	ldr	r1, [r4, #0]
 8019286:	4628      	mov	r0, r5
 8019288:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801928c:	3108      	adds	r1, #8
 801928e:	f7ff fcc1 	bl	8018c14 <rcl_wait_set_add_client>
 8019292:	b938      	cbnz	r0, 80192a4 <rcl_action_wait_set_add_action_client+0x84>
 8019294:	6821      	ldr	r1, [r4, #0]
 8019296:	4628      	mov	r0, r5
 8019298:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801929c:	310c      	adds	r1, #12
 801929e:	f7ff f969 	bl	8018574 <rcl_wait_set_add_subscription>
 80192a2:	b158      	cbz	r0, 80192bc <rcl_action_wait_set_add_action_client+0x9c>
 80192a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80192aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192ac:	f7f6 fd98 	bl	800fde0 <rcutils_reset_error>
 80192b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80192b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80192ba:	4770      	bx	lr
 80192bc:	6821      	ldr	r1, [r4, #0]
 80192be:	4628      	mov	r0, r5
 80192c0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80192c4:	3110      	adds	r1, #16
 80192c6:	f7ff f955 	bl	8018574 <rcl_wait_set_add_subscription>
 80192ca:	2800      	cmp	r0, #0
 80192cc:	d1ea      	bne.n	80192a4 <rcl_action_wait_set_add_action_client+0x84>
 80192ce:	b11f      	cbz	r7, 80192d8 <rcl_action_wait_set_add_action_client+0xb8>
 80192d0:	6823      	ldr	r3, [r4, #0]
 80192d2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80192d6:	603b      	str	r3, [r7, #0]
 80192d8:	2e00      	cmp	r6, #0
 80192da:	d0e3      	beq.n	80192a4 <rcl_action_wait_set_add_action_client+0x84>
 80192dc:	6823      	ldr	r3, [r4, #0]
 80192de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80192e2:	6033      	str	r3, [r6, #0]
 80192e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192e6:	bf00      	nop

080192e8 <rcl_action_client_wait_set_get_entities_ready>:
 80192e8:	2800      	cmp	r0, #0
 80192ea:	d050      	beq.n	801938e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80192ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192f0:	460c      	mov	r4, r1
 80192f2:	2900      	cmp	r1, #0
 80192f4:	d03e      	beq.n	8019374 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80192f6:	4605      	mov	r5, r0
 80192f8:	6808      	ldr	r0, [r1, #0]
 80192fa:	2800      	cmp	r0, #0
 80192fc:	d03a      	beq.n	8019374 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80192fe:	4616      	mov	r6, r2
 8019300:	461f      	mov	r7, r3
 8019302:	f7fd fe35 	bl	8016f70 <rcl_client_is_valid>
 8019306:	2800      	cmp	r0, #0
 8019308:	d038      	beq.n	801937c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801930a:	6820      	ldr	r0, [r4, #0]
 801930c:	3004      	adds	r0, #4
 801930e:	f7fd fe2f 	bl	8016f70 <rcl_client_is_valid>
 8019312:	2800      	cmp	r0, #0
 8019314:	d032      	beq.n	801937c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019316:	6820      	ldr	r0, [r4, #0]
 8019318:	3008      	adds	r0, #8
 801931a:	f7fd fe29 	bl	8016f70 <rcl_client_is_valid>
 801931e:	b368      	cbz	r0, 801937c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019320:	6820      	ldr	r0, [r4, #0]
 8019322:	300c      	adds	r0, #12
 8019324:	f7fe fc1c 	bl	8017b60 <rcl_subscription_is_valid>
 8019328:	b340      	cbz	r0, 801937c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801932a:	6820      	ldr	r0, [r4, #0]
 801932c:	3010      	adds	r0, #16
 801932e:	f7fe fc17 	bl	8017b60 <rcl_subscription_is_valid>
 8019332:	b318      	cbz	r0, 801937c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019334:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8019338:	2a00      	cmp	r2, #0
 801933a:	bf18      	it	ne
 801933c:	2b00      	cmpne	r3, #0
 801933e:	9b08      	ldr	r3, [sp, #32]
 8019340:	bf0c      	ite	eq
 8019342:	2101      	moveq	r1, #1
 8019344:	2100      	movne	r1, #0
 8019346:	2b00      	cmp	r3, #0
 8019348:	bf08      	it	eq
 801934a:	f041 0101 	orreq.w	r1, r1, #1
 801934e:	2f00      	cmp	r7, #0
 8019350:	bf08      	it	eq
 8019352:	f041 0101 	orreq.w	r1, r1, #1
 8019356:	b9b9      	cbnz	r1, 8019388 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8019358:	b1b6      	cbz	r6, 8019388 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801935a:	6823      	ldr	r3, [r4, #0]
 801935c:	686c      	ldr	r4, [r5, #4]
 801935e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8019362:	428a      	cmp	r2, r1
 8019364:	4610      	mov	r0, r2
 8019366:	bf38      	it	cc
 8019368:	4608      	movcc	r0, r1
 801936a:	4284      	cmp	r4, r0
 801936c:	d812      	bhi.n	8019394 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801936e:	2001      	movs	r0, #1
 8019370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019374:	f640 0036 	movw	r0, #2102	@ 0x836
 8019378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801937c:	f7f6 fd30 	bl	800fde0 <rcutils_reset_error>
 8019380:	f640 0036 	movw	r0, #2102	@ 0x836
 8019384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019388:	200b      	movs	r0, #11
 801938a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801938e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019392:	4770      	bx	lr
 8019394:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8019398:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801939c:	45f0      	cmp	r8, lr
 801939e:	4640      	mov	r0, r8
 80193a0:	69ec      	ldr	r4, [r5, #28]
 80193a2:	bf38      	it	cc
 80193a4:	4670      	movcc	r0, lr
 80193a6:	4560      	cmp	r0, ip
 80193a8:	bf38      	it	cc
 80193aa:	4660      	movcc	r0, ip
 80193ac:	4284      	cmp	r4, r0
 80193ae:	d9de      	bls.n	801936e <rcl_action_client_wait_set_get_entities_ready+0x86>
 80193b0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80193b4:	682d      	ldr	r5, [r5, #0]
 80193b6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80193ba:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80193be:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80193c2:	1a18      	subs	r0, r3, r0
 80193c4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80193c8:	f103 0c0c 	add.w	ip, r3, #12
 80193cc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80193d0:	fab0 f080 	clz	r0, r0
 80193d4:	eba5 050c 	sub.w	r5, r5, ip
 80193d8:	0940      	lsrs	r0, r0, #5
 80193da:	fab5 f585 	clz	r5, r5
 80193de:	096d      	lsrs	r5, r5, #5
 80193e0:	7035      	strb	r5, [r6, #0]
 80193e2:	f103 0510 	add.w	r5, r3, #16
 80193e6:	1b64      	subs	r4, r4, r5
 80193e8:	9d08      	ldr	r5, [sp, #32]
 80193ea:	fab4 f484 	clz	r4, r4
 80193ee:	0964      	lsrs	r4, r4, #5
 80193f0:	703c      	strb	r4, [r7, #0]
 80193f2:	1d1c      	adds	r4, r3, #4
 80193f4:	3308      	adds	r3, #8
 80193f6:	7028      	strb	r0, [r5, #0]
 80193f8:	1b09      	subs	r1, r1, r4
 80193fa:	2000      	movs	r0, #0
 80193fc:	1ad3      	subs	r3, r2, r3
 80193fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019400:	fab1 f181 	clz	r1, r1
 8019404:	fab3 f383 	clz	r3, r3
 8019408:	0949      	lsrs	r1, r1, #5
 801940a:	095b      	lsrs	r3, r3, #5
 801940c:	7011      	strb	r1, [r2, #0]
 801940e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019410:	7013      	strb	r3, [r2, #0]
 8019412:	e7b1      	b.n	8019378 <rcl_action_client_wait_set_get_entities_ready+0x90>

08019414 <rcl_action_take_goal_request>:
 8019414:	2800      	cmp	r0, #0
 8019416:	d039      	beq.n	801948c <rcl_action_take_goal_request+0x78>
 8019418:	b570      	push	{r4, r5, r6, lr}
 801941a:	4604      	mov	r4, r0
 801941c:	6800      	ldr	r0, [r0, #0]
 801941e:	b380      	cbz	r0, 8019482 <rcl_action_take_goal_request+0x6e>
 8019420:	460e      	mov	r6, r1
 8019422:	4615      	mov	r5, r2
 8019424:	f7fe fb36 	bl	8017a94 <rcl_service_is_valid>
 8019428:	b330      	cbz	r0, 8019478 <rcl_action_take_goal_request+0x64>
 801942a:	6820      	ldr	r0, [r4, #0]
 801942c:	3004      	adds	r0, #4
 801942e:	f7fe fb31 	bl	8017a94 <rcl_service_is_valid>
 8019432:	b308      	cbz	r0, 8019478 <rcl_action_take_goal_request+0x64>
 8019434:	6820      	ldr	r0, [r4, #0]
 8019436:	3008      	adds	r0, #8
 8019438:	f7fe fb2c 	bl	8017a94 <rcl_service_is_valid>
 801943c:	b1e0      	cbz	r0, 8019478 <rcl_action_take_goal_request+0x64>
 801943e:	6820      	ldr	r0, [r4, #0]
 8019440:	300c      	adds	r0, #12
 8019442:	f7f5 fd39 	bl	800eeb8 <rcl_publisher_is_valid>
 8019446:	b1b8      	cbz	r0, 8019478 <rcl_action_take_goal_request+0x64>
 8019448:	6820      	ldr	r0, [r4, #0]
 801944a:	3010      	adds	r0, #16
 801944c:	f7f5 fd34 	bl	800eeb8 <rcl_publisher_is_valid>
 8019450:	b190      	cbz	r0, 8019478 <rcl_action_take_goal_request+0x64>
 8019452:	b1cd      	cbz	r5, 8019488 <rcl_action_take_goal_request+0x74>
 8019454:	b1c6      	cbz	r6, 8019488 <rcl_action_take_goal_request+0x74>
 8019456:	462a      	mov	r2, r5
 8019458:	4631      	mov	r1, r6
 801945a:	6820      	ldr	r0, [r4, #0]
 801945c:	f7fe fac2 	bl	80179e4 <rcl_take_request>
 8019460:	b148      	cbz	r0, 8019476 <rcl_action_take_goal_request+0x62>
 8019462:	280a      	cmp	r0, #10
 8019464:	d007      	beq.n	8019476 <rcl_action_take_goal_request+0x62>
 8019466:	f240 2259 	movw	r2, #601	@ 0x259
 801946a:	f640 0399 	movw	r3, #2201	@ 0x899
 801946e:	4290      	cmp	r0, r2
 8019470:	bf0c      	ite	eq
 8019472:	4618      	moveq	r0, r3
 8019474:	2001      	movne	r0, #1
 8019476:	bd70      	pop	{r4, r5, r6, pc}
 8019478:	f7f6 fcb2 	bl	800fde0 <rcutils_reset_error>
 801947c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019480:	bd70      	pop	{r4, r5, r6, pc}
 8019482:	f640 0098 	movw	r0, #2200	@ 0x898
 8019486:	bd70      	pop	{r4, r5, r6, pc}
 8019488:	200b      	movs	r0, #11
 801948a:	bd70      	pop	{r4, r5, r6, pc}
 801948c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop

08019494 <rcl_action_send_goal_response>:
 8019494:	b390      	cbz	r0, 80194fc <rcl_action_send_goal_response+0x68>
 8019496:	b570      	push	{r4, r5, r6, lr}
 8019498:	4604      	mov	r4, r0
 801949a:	6800      	ldr	r0, [r0, #0]
 801949c:	b348      	cbz	r0, 80194f2 <rcl_action_send_goal_response+0x5e>
 801949e:	460e      	mov	r6, r1
 80194a0:	4615      	mov	r5, r2
 80194a2:	f7fe faf7 	bl	8017a94 <rcl_service_is_valid>
 80194a6:	b1f8      	cbz	r0, 80194e8 <rcl_action_send_goal_response+0x54>
 80194a8:	6820      	ldr	r0, [r4, #0]
 80194aa:	3004      	adds	r0, #4
 80194ac:	f7fe faf2 	bl	8017a94 <rcl_service_is_valid>
 80194b0:	b1d0      	cbz	r0, 80194e8 <rcl_action_send_goal_response+0x54>
 80194b2:	6820      	ldr	r0, [r4, #0]
 80194b4:	3008      	adds	r0, #8
 80194b6:	f7fe faed 	bl	8017a94 <rcl_service_is_valid>
 80194ba:	b1a8      	cbz	r0, 80194e8 <rcl_action_send_goal_response+0x54>
 80194bc:	6820      	ldr	r0, [r4, #0]
 80194be:	300c      	adds	r0, #12
 80194c0:	f7f5 fcfa 	bl	800eeb8 <rcl_publisher_is_valid>
 80194c4:	b180      	cbz	r0, 80194e8 <rcl_action_send_goal_response+0x54>
 80194c6:	6820      	ldr	r0, [r4, #0]
 80194c8:	3010      	adds	r0, #16
 80194ca:	f7f5 fcf5 	bl	800eeb8 <rcl_publisher_is_valid>
 80194ce:	b158      	cbz	r0, 80194e8 <rcl_action_send_goal_response+0x54>
 80194d0:	b195      	cbz	r5, 80194f8 <rcl_action_send_goal_response+0x64>
 80194d2:	b18e      	cbz	r6, 80194f8 <rcl_action_send_goal_response+0x64>
 80194d4:	462a      	mov	r2, r5
 80194d6:	4631      	mov	r1, r6
 80194d8:	6820      	ldr	r0, [r4, #0]
 80194da:	f7fe fac3 	bl	8017a64 <rcl_send_response>
 80194de:	b110      	cbz	r0, 80194e6 <rcl_action_send_goal_response+0x52>
 80194e0:	2802      	cmp	r0, #2
 80194e2:	bf18      	it	ne
 80194e4:	2001      	movne	r0, #1
 80194e6:	bd70      	pop	{r4, r5, r6, pc}
 80194e8:	f7f6 fc7a 	bl	800fde0 <rcutils_reset_error>
 80194ec:	f640 0098 	movw	r0, #2200	@ 0x898
 80194f0:	bd70      	pop	{r4, r5, r6, pc}
 80194f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80194f6:	bd70      	pop	{r4, r5, r6, pc}
 80194f8:	200b      	movs	r0, #11
 80194fa:	bd70      	pop	{r4, r5, r6, pc}
 80194fc:	f640 0098 	movw	r0, #2200	@ 0x898
 8019500:	4770      	bx	lr
 8019502:	bf00      	nop

08019504 <rcl_action_take_result_request>:
 8019504:	2800      	cmp	r0, #0
 8019506:	d03a      	beq.n	801957e <rcl_action_take_result_request+0x7a>
 8019508:	b570      	push	{r4, r5, r6, lr}
 801950a:	4604      	mov	r4, r0
 801950c:	6800      	ldr	r0, [r0, #0]
 801950e:	b388      	cbz	r0, 8019574 <rcl_action_take_result_request+0x70>
 8019510:	460e      	mov	r6, r1
 8019512:	4615      	mov	r5, r2
 8019514:	f7fe fabe 	bl	8017a94 <rcl_service_is_valid>
 8019518:	b338      	cbz	r0, 801956a <rcl_action_take_result_request+0x66>
 801951a:	6820      	ldr	r0, [r4, #0]
 801951c:	3004      	adds	r0, #4
 801951e:	f7fe fab9 	bl	8017a94 <rcl_service_is_valid>
 8019522:	b310      	cbz	r0, 801956a <rcl_action_take_result_request+0x66>
 8019524:	6820      	ldr	r0, [r4, #0]
 8019526:	3008      	adds	r0, #8
 8019528:	f7fe fab4 	bl	8017a94 <rcl_service_is_valid>
 801952c:	b1e8      	cbz	r0, 801956a <rcl_action_take_result_request+0x66>
 801952e:	6820      	ldr	r0, [r4, #0]
 8019530:	300c      	adds	r0, #12
 8019532:	f7f5 fcc1 	bl	800eeb8 <rcl_publisher_is_valid>
 8019536:	b1c0      	cbz	r0, 801956a <rcl_action_take_result_request+0x66>
 8019538:	6820      	ldr	r0, [r4, #0]
 801953a:	3010      	adds	r0, #16
 801953c:	f7f5 fcbc 	bl	800eeb8 <rcl_publisher_is_valid>
 8019540:	b198      	cbz	r0, 801956a <rcl_action_take_result_request+0x66>
 8019542:	b1d5      	cbz	r5, 801957a <rcl_action_take_result_request+0x76>
 8019544:	b1ce      	cbz	r6, 801957a <rcl_action_take_result_request+0x76>
 8019546:	6820      	ldr	r0, [r4, #0]
 8019548:	462a      	mov	r2, r5
 801954a:	4631      	mov	r1, r6
 801954c:	3008      	adds	r0, #8
 801954e:	f7fe fa49 	bl	80179e4 <rcl_take_request>
 8019552:	b148      	cbz	r0, 8019568 <rcl_action_take_result_request+0x64>
 8019554:	280a      	cmp	r0, #10
 8019556:	d007      	beq.n	8019568 <rcl_action_take_result_request+0x64>
 8019558:	f240 2259 	movw	r2, #601	@ 0x259
 801955c:	f640 0399 	movw	r3, #2201	@ 0x899
 8019560:	4290      	cmp	r0, r2
 8019562:	bf0c      	ite	eq
 8019564:	4618      	moveq	r0, r3
 8019566:	2001      	movne	r0, #1
 8019568:	bd70      	pop	{r4, r5, r6, pc}
 801956a:	f7f6 fc39 	bl	800fde0 <rcutils_reset_error>
 801956e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019572:	bd70      	pop	{r4, r5, r6, pc}
 8019574:	f640 0098 	movw	r0, #2200	@ 0x898
 8019578:	bd70      	pop	{r4, r5, r6, pc}
 801957a:	200b      	movs	r0, #11
 801957c:	bd70      	pop	{r4, r5, r6, pc}
 801957e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019582:	4770      	bx	lr

08019584 <rcl_action_take_cancel_request>:
 8019584:	2800      	cmp	r0, #0
 8019586:	d03a      	beq.n	80195fe <rcl_action_take_cancel_request+0x7a>
 8019588:	b570      	push	{r4, r5, r6, lr}
 801958a:	4604      	mov	r4, r0
 801958c:	6800      	ldr	r0, [r0, #0]
 801958e:	b388      	cbz	r0, 80195f4 <rcl_action_take_cancel_request+0x70>
 8019590:	460e      	mov	r6, r1
 8019592:	4615      	mov	r5, r2
 8019594:	f7fe fa7e 	bl	8017a94 <rcl_service_is_valid>
 8019598:	b338      	cbz	r0, 80195ea <rcl_action_take_cancel_request+0x66>
 801959a:	6820      	ldr	r0, [r4, #0]
 801959c:	3004      	adds	r0, #4
 801959e:	f7fe fa79 	bl	8017a94 <rcl_service_is_valid>
 80195a2:	b310      	cbz	r0, 80195ea <rcl_action_take_cancel_request+0x66>
 80195a4:	6820      	ldr	r0, [r4, #0]
 80195a6:	3008      	adds	r0, #8
 80195a8:	f7fe fa74 	bl	8017a94 <rcl_service_is_valid>
 80195ac:	b1e8      	cbz	r0, 80195ea <rcl_action_take_cancel_request+0x66>
 80195ae:	6820      	ldr	r0, [r4, #0]
 80195b0:	300c      	adds	r0, #12
 80195b2:	f7f5 fc81 	bl	800eeb8 <rcl_publisher_is_valid>
 80195b6:	b1c0      	cbz	r0, 80195ea <rcl_action_take_cancel_request+0x66>
 80195b8:	6820      	ldr	r0, [r4, #0]
 80195ba:	3010      	adds	r0, #16
 80195bc:	f7f5 fc7c 	bl	800eeb8 <rcl_publisher_is_valid>
 80195c0:	b198      	cbz	r0, 80195ea <rcl_action_take_cancel_request+0x66>
 80195c2:	b1d5      	cbz	r5, 80195fa <rcl_action_take_cancel_request+0x76>
 80195c4:	b1ce      	cbz	r6, 80195fa <rcl_action_take_cancel_request+0x76>
 80195c6:	6820      	ldr	r0, [r4, #0]
 80195c8:	462a      	mov	r2, r5
 80195ca:	4631      	mov	r1, r6
 80195cc:	3004      	adds	r0, #4
 80195ce:	f7fe fa09 	bl	80179e4 <rcl_take_request>
 80195d2:	b148      	cbz	r0, 80195e8 <rcl_action_take_cancel_request+0x64>
 80195d4:	280a      	cmp	r0, #10
 80195d6:	d007      	beq.n	80195e8 <rcl_action_take_cancel_request+0x64>
 80195d8:	f240 2259 	movw	r2, #601	@ 0x259
 80195dc:	f640 0399 	movw	r3, #2201	@ 0x899
 80195e0:	4290      	cmp	r0, r2
 80195e2:	bf0c      	ite	eq
 80195e4:	4618      	moveq	r0, r3
 80195e6:	2001      	movne	r0, #1
 80195e8:	bd70      	pop	{r4, r5, r6, pc}
 80195ea:	f7f6 fbf9 	bl	800fde0 <rcutils_reset_error>
 80195ee:	f640 0098 	movw	r0, #2200	@ 0x898
 80195f2:	bd70      	pop	{r4, r5, r6, pc}
 80195f4:	f640 0098 	movw	r0, #2200	@ 0x898
 80195f8:	bd70      	pop	{r4, r5, r6, pc}
 80195fa:	200b      	movs	r0, #11
 80195fc:	bd70      	pop	{r4, r5, r6, pc}
 80195fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8019602:	4770      	bx	lr

08019604 <rcl_action_send_cancel_response>:
 8019604:	b398      	cbz	r0, 801966e <rcl_action_send_cancel_response+0x6a>
 8019606:	b570      	push	{r4, r5, r6, lr}
 8019608:	4604      	mov	r4, r0
 801960a:	6800      	ldr	r0, [r0, #0]
 801960c:	b350      	cbz	r0, 8019664 <rcl_action_send_cancel_response+0x60>
 801960e:	460e      	mov	r6, r1
 8019610:	4615      	mov	r5, r2
 8019612:	f7fe fa3f 	bl	8017a94 <rcl_service_is_valid>
 8019616:	b300      	cbz	r0, 801965a <rcl_action_send_cancel_response+0x56>
 8019618:	6820      	ldr	r0, [r4, #0]
 801961a:	3004      	adds	r0, #4
 801961c:	f7fe fa3a 	bl	8017a94 <rcl_service_is_valid>
 8019620:	b1d8      	cbz	r0, 801965a <rcl_action_send_cancel_response+0x56>
 8019622:	6820      	ldr	r0, [r4, #0]
 8019624:	3008      	adds	r0, #8
 8019626:	f7fe fa35 	bl	8017a94 <rcl_service_is_valid>
 801962a:	b1b0      	cbz	r0, 801965a <rcl_action_send_cancel_response+0x56>
 801962c:	6820      	ldr	r0, [r4, #0]
 801962e:	300c      	adds	r0, #12
 8019630:	f7f5 fc42 	bl	800eeb8 <rcl_publisher_is_valid>
 8019634:	b188      	cbz	r0, 801965a <rcl_action_send_cancel_response+0x56>
 8019636:	6820      	ldr	r0, [r4, #0]
 8019638:	3010      	adds	r0, #16
 801963a:	f7f5 fc3d 	bl	800eeb8 <rcl_publisher_is_valid>
 801963e:	b160      	cbz	r0, 801965a <rcl_action_send_cancel_response+0x56>
 8019640:	b19d      	cbz	r5, 801966a <rcl_action_send_cancel_response+0x66>
 8019642:	b196      	cbz	r6, 801966a <rcl_action_send_cancel_response+0x66>
 8019644:	6820      	ldr	r0, [r4, #0]
 8019646:	462a      	mov	r2, r5
 8019648:	4631      	mov	r1, r6
 801964a:	3004      	adds	r0, #4
 801964c:	f7fe fa0a 	bl	8017a64 <rcl_send_response>
 8019650:	b110      	cbz	r0, 8019658 <rcl_action_send_cancel_response+0x54>
 8019652:	2802      	cmp	r0, #2
 8019654:	bf18      	it	ne
 8019656:	2001      	movne	r0, #1
 8019658:	bd70      	pop	{r4, r5, r6, pc}
 801965a:	f7f6 fbc1 	bl	800fde0 <rcutils_reset_error>
 801965e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019662:	bd70      	pop	{r4, r5, r6, pc}
 8019664:	f640 0098 	movw	r0, #2200	@ 0x898
 8019668:	bd70      	pop	{r4, r5, r6, pc}
 801966a:	200b      	movs	r0, #11
 801966c:	bd70      	pop	{r4, r5, r6, pc}
 801966e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019672:	4770      	bx	lr

08019674 <rcl_action_wait_set_add_action_server>:
 8019674:	2800      	cmp	r0, #0
 8019676:	d04d      	beq.n	8019714 <rcl_action_wait_set_add_action_server+0xa0>
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	460c      	mov	r4, r1
 801967c:	b159      	cbz	r1, 8019696 <rcl_action_wait_set_add_action_server+0x22>
 801967e:	4605      	mov	r5, r0
 8019680:	6808      	ldr	r0, [r1, #0]
 8019682:	b140      	cbz	r0, 8019696 <rcl_action_wait_set_add_action_server+0x22>
 8019684:	4616      	mov	r6, r2
 8019686:	f7fe fa05 	bl	8017a94 <rcl_service_is_valid>
 801968a:	b120      	cbz	r0, 8019696 <rcl_action_wait_set_add_action_server+0x22>
 801968c:	6820      	ldr	r0, [r4, #0]
 801968e:	3004      	adds	r0, #4
 8019690:	f7fe fa00 	bl	8017a94 <rcl_service_is_valid>
 8019694:	b910      	cbnz	r0, 801969c <rcl_action_wait_set_add_action_server+0x28>
 8019696:	f640 0098 	movw	r0, #2200	@ 0x898
 801969a:	bd70      	pop	{r4, r5, r6, pc}
 801969c:	6820      	ldr	r0, [r4, #0]
 801969e:	3008      	adds	r0, #8
 80196a0:	f7fe f9f8 	bl	8017a94 <rcl_service_is_valid>
 80196a4:	2800      	cmp	r0, #0
 80196a6:	d0f6      	beq.n	8019696 <rcl_action_wait_set_add_action_server+0x22>
 80196a8:	6820      	ldr	r0, [r4, #0]
 80196aa:	300c      	adds	r0, #12
 80196ac:	f7f5 fc1c 	bl	800eee8 <rcl_publisher_is_valid_except_context>
 80196b0:	2800      	cmp	r0, #0
 80196b2:	d0f0      	beq.n	8019696 <rcl_action_wait_set_add_action_server+0x22>
 80196b4:	6820      	ldr	r0, [r4, #0]
 80196b6:	3010      	adds	r0, #16
 80196b8:	f7f5 fc16 	bl	800eee8 <rcl_publisher_is_valid_except_context>
 80196bc:	2800      	cmp	r0, #0
 80196be:	d0ea      	beq.n	8019696 <rcl_action_wait_set_add_action_server+0x22>
 80196c0:	6821      	ldr	r1, [r4, #0]
 80196c2:	4628      	mov	r0, r5
 80196c4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80196c8:	f7ff fad0 	bl	8018c6c <rcl_wait_set_add_service>
 80196cc:	2800      	cmp	r0, #0
 80196ce:	d1e4      	bne.n	801969a <rcl_action_wait_set_add_action_server+0x26>
 80196d0:	6821      	ldr	r1, [r4, #0]
 80196d2:	4628      	mov	r0, r5
 80196d4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80196d8:	3104      	adds	r1, #4
 80196da:	f7ff fac7 	bl	8018c6c <rcl_wait_set_add_service>
 80196de:	2800      	cmp	r0, #0
 80196e0:	d1db      	bne.n	801969a <rcl_action_wait_set_add_action_server+0x26>
 80196e2:	6821      	ldr	r1, [r4, #0]
 80196e4:	4628      	mov	r0, r5
 80196e6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80196ea:	3108      	adds	r1, #8
 80196ec:	f7ff fabe 	bl	8018c6c <rcl_wait_set_add_service>
 80196f0:	2800      	cmp	r0, #0
 80196f2:	d1d2      	bne.n	801969a <rcl_action_wait_set_add_action_server+0x26>
 80196f4:	6821      	ldr	r1, [r4, #0]
 80196f6:	4628      	mov	r0, r5
 80196f8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80196fc:	3114      	adds	r1, #20
 80196fe:	f7ff fa59 	bl	8018bb4 <rcl_wait_set_add_timer>
 8019702:	2800      	cmp	r0, #0
 8019704:	d1c9      	bne.n	801969a <rcl_action_wait_set_add_action_server+0x26>
 8019706:	2e00      	cmp	r6, #0
 8019708:	d0c7      	beq.n	801969a <rcl_action_wait_set_add_action_server+0x26>
 801970a:	6823      	ldr	r3, [r4, #0]
 801970c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8019710:	6033      	str	r3, [r6, #0]
 8019712:	bd70      	pop	{r4, r5, r6, pc}
 8019714:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019718:	4770      	bx	lr
 801971a:	bf00      	nop

0801971c <rcl_action_server_wait_set_get_entities_ready>:
 801971c:	2800      	cmp	r0, #0
 801971e:	d067      	beq.n	80197f0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8019720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019724:	460c      	mov	r4, r1
 8019726:	b161      	cbz	r1, 8019742 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019728:	4605      	mov	r5, r0
 801972a:	6808      	ldr	r0, [r1, #0]
 801972c:	b148      	cbz	r0, 8019742 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801972e:	4616      	mov	r6, r2
 8019730:	4698      	mov	r8, r3
 8019732:	f7fe f9af 	bl	8017a94 <rcl_service_is_valid>
 8019736:	b120      	cbz	r0, 8019742 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019738:	6820      	ldr	r0, [r4, #0]
 801973a:	3004      	adds	r0, #4
 801973c:	f7fe f9aa 	bl	8017a94 <rcl_service_is_valid>
 8019740:	b918      	cbnz	r0, 801974a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8019742:	f640 0098 	movw	r0, #2200	@ 0x898
 8019746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801974a:	6820      	ldr	r0, [r4, #0]
 801974c:	3008      	adds	r0, #8
 801974e:	f7fe f9a1 	bl	8017a94 <rcl_service_is_valid>
 8019752:	2800      	cmp	r0, #0
 8019754:	d0f5      	beq.n	8019742 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019756:	6820      	ldr	r0, [r4, #0]
 8019758:	300c      	adds	r0, #12
 801975a:	f7f5 fbc5 	bl	800eee8 <rcl_publisher_is_valid_except_context>
 801975e:	2800      	cmp	r0, #0
 8019760:	d0ef      	beq.n	8019742 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019762:	6820      	ldr	r0, [r4, #0]
 8019764:	3010      	adds	r0, #16
 8019766:	f7f5 fbbf 	bl	800eee8 <rcl_publisher_is_valid_except_context>
 801976a:	2800      	cmp	r0, #0
 801976c:	d0e9      	beq.n	8019742 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801976e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019772:	2a00      	cmp	r2, #0
 8019774:	bf18      	it	ne
 8019776:	2b00      	cmpne	r3, #0
 8019778:	bf0c      	ite	eq
 801977a:	2101      	moveq	r1, #1
 801977c:	2100      	movne	r1, #0
 801977e:	f1b8 0f00 	cmp.w	r8, #0
 8019782:	bf08      	it	eq
 8019784:	f041 0101 	orreq.w	r1, r1, #1
 8019788:	bba9      	cbnz	r1, 80197f6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801978a:	b3a6      	cbz	r6, 80197f6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801978c:	6821      	ldr	r1, [r4, #0]
 801978e:	2000      	movs	r0, #0
 8019790:	692c      	ldr	r4, [r5, #16]
 8019792:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8019796:	6a2f      	ldr	r7, [r5, #32]
 8019798:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801979c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80197a0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80197a4:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80197a8:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80197ac:	1a64      	subs	r4, r4, r1
 80197ae:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80197b2:	fab4 f484 	clz	r4, r4
 80197b6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80197ba:	0964      	lsrs	r4, r4, #5
 80197bc:	7034      	strb	r4, [r6, #0]
 80197be:	1d0c      	adds	r4, r1, #4
 80197c0:	1b2c      	subs	r4, r5, r4
 80197c2:	fab4 f484 	clz	r4, r4
 80197c6:	0964      	lsrs	r4, r4, #5
 80197c8:	f888 4000 	strb.w	r4, [r8]
 80197cc:	f101 0408 	add.w	r4, r1, #8
 80197d0:	1b1b      	subs	r3, r3, r4
 80197d2:	9c06      	ldr	r4, [sp, #24]
 80197d4:	fab3 f383 	clz	r3, r3
 80197d8:	095b      	lsrs	r3, r3, #5
 80197da:	7023      	strb	r3, [r4, #0]
 80197dc:	f101 0314 	add.w	r3, r1, #20
 80197e0:	1ad3      	subs	r3, r2, r3
 80197e2:	9a07      	ldr	r2, [sp, #28]
 80197e4:	fab3 f383 	clz	r3, r3
 80197e8:	095b      	lsrs	r3, r3, #5
 80197ea:	7013      	strb	r3, [r2, #0]
 80197ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80197f4:	4770      	bx	lr
 80197f6:	200b      	movs	r0, #11
 80197f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080197fc <_execute_event_handler>:
 80197fc:	2002      	movs	r0, #2
 80197fe:	4770      	bx	lr

08019800 <_cancel_goal_event_handler>:
 8019800:	2003      	movs	r0, #3
 8019802:	4770      	bx	lr

08019804 <_succeed_event_handler>:
 8019804:	2004      	movs	r0, #4
 8019806:	4770      	bx	lr

08019808 <_abort_event_handler>:
 8019808:	2006      	movs	r0, #6
 801980a:	4770      	bx	lr

0801980c <_canceled_event_handler>:
 801980c:	2005      	movs	r0, #5
 801980e:	4770      	bx	lr

08019810 <rcl_action_transition_goal_state>:
 8019810:	b2c2      	uxtb	r2, r0
 8019812:	2a06      	cmp	r2, #6
 8019814:	d810      	bhi.n	8019838 <rcl_action_transition_goal_state+0x28>
 8019816:	2904      	cmp	r1, #4
 8019818:	d80e      	bhi.n	8019838 <rcl_action_transition_goal_state+0x28>
 801981a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801981e:	b410      	push	{r4}
 8019820:	1853      	adds	r3, r2, r1
 8019822:	4c06      	ldr	r4, [pc, #24]	@ (801983c <rcl_action_transition_goal_state+0x2c>)
 8019824:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019828:	b113      	cbz	r3, 8019830 <rcl_action_transition_goal_state+0x20>
 801982a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801982e:	4718      	bx	r3
 8019830:	2000      	movs	r0, #0
 8019832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019836:	4770      	bx	lr
 8019838:	2000      	movs	r0, #0
 801983a:	4770      	bx	lr
 801983c:	0801e6fc 	.word	0x0801e6fc

08019840 <rcl_action_get_zero_initialized_cancel_response>:
 8019840:	b510      	push	{r4, lr}
 8019842:	4c07      	ldr	r4, [pc, #28]	@ (8019860 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8019844:	4686      	mov	lr, r0
 8019846:	4684      	mov	ip, r0
 8019848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801984a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801984e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019850:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019854:	6823      	ldr	r3, [r4, #0]
 8019856:	4670      	mov	r0, lr
 8019858:	f8cc 3000 	str.w	r3, [ip]
 801985c:	bd10      	pop	{r4, pc}
 801985e:	bf00      	nop
 8019860:	0801e788 	.word	0x0801e788

08019864 <rclc_action_send_result_request>:
 8019864:	b1d0      	cbz	r0, 801989c <rclc_action_send_result_request+0x38>
 8019866:	4684      	mov	ip, r0
 8019868:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801986c:	b500      	push	{lr}
 801986e:	b087      	sub	sp, #28
 8019870:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8019874:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019878:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801987c:	f10d 0e08 	add.w	lr, sp, #8
 8019880:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019884:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019888:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801988c:	a902      	add	r1, sp, #8
 801988e:	3010      	adds	r0, #16
 8019890:	f7ff fbca 	bl	8019028 <rcl_action_send_result_request>
 8019894:	b920      	cbnz	r0, 80198a0 <rclc_action_send_result_request+0x3c>
 8019896:	b007      	add	sp, #28
 8019898:	f85d fb04 	ldr.w	pc, [sp], #4
 801989c:	200b      	movs	r0, #11
 801989e:	4770      	bx	lr
 80198a0:	9001      	str	r0, [sp, #4]
 80198a2:	f7f6 fa9d 	bl	800fde0 <rcutils_reset_error>
 80198a6:	9801      	ldr	r0, [sp, #4]
 80198a8:	b007      	add	sp, #28
 80198aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80198ae:	bf00      	nop

080198b0 <rclc_action_take_goal_handle>:
 80198b0:	b160      	cbz	r0, 80198cc <rclc_action_take_goal_handle+0x1c>
 80198b2:	6883      	ldr	r3, [r0, #8]
 80198b4:	b143      	cbz	r3, 80198c8 <rclc_action_take_goal_handle+0x18>
 80198b6:	6819      	ldr	r1, [r3, #0]
 80198b8:	2200      	movs	r2, #0
 80198ba:	6081      	str	r1, [r0, #8]
 80198bc:	721a      	strb	r2, [r3, #8]
 80198be:	68c1      	ldr	r1, [r0, #12]
 80198c0:	621a      	str	r2, [r3, #32]
 80198c2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80198c4:	6019      	str	r1, [r3, #0]
 80198c6:	60c3      	str	r3, [r0, #12]
 80198c8:	4618      	mov	r0, r3
 80198ca:	4770      	bx	lr
 80198cc:	4603      	mov	r3, r0
 80198ce:	e7fb      	b.n	80198c8 <rclc_action_take_goal_handle+0x18>

080198d0 <rclc_action_remove_used_goal_handle>:
 80198d0:	b180      	cbz	r0, 80198f4 <rclc_action_remove_used_goal_handle+0x24>
 80198d2:	b179      	cbz	r1, 80198f4 <rclc_action_remove_used_goal_handle+0x24>
 80198d4:	68c3      	ldr	r3, [r0, #12]
 80198d6:	4299      	cmp	r1, r3
 80198d8:	d00d      	beq.n	80198f6 <rclc_action_remove_used_goal_handle+0x26>
 80198da:	b12b      	cbz	r3, 80198e8 <rclc_action_remove_used_goal_handle+0x18>
 80198dc:	681a      	ldr	r2, [r3, #0]
 80198de:	4291      	cmp	r1, r2
 80198e0:	d003      	beq.n	80198ea <rclc_action_remove_used_goal_handle+0x1a>
 80198e2:	4613      	mov	r3, r2
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d1f9      	bne.n	80198dc <rclc_action_remove_used_goal_handle+0xc>
 80198e8:	4770      	bx	lr
 80198ea:	680a      	ldr	r2, [r1, #0]
 80198ec:	601a      	str	r2, [r3, #0]
 80198ee:	6883      	ldr	r3, [r0, #8]
 80198f0:	600b      	str	r3, [r1, #0]
 80198f2:	6081      	str	r1, [r0, #8]
 80198f4:	4770      	bx	lr
 80198f6:	680b      	ldr	r3, [r1, #0]
 80198f8:	60c3      	str	r3, [r0, #12]
 80198fa:	e7f8      	b.n	80198ee <rclc_action_remove_used_goal_handle+0x1e>

080198fc <rclc_action_find_goal_handle_by_uuid>:
 80198fc:	b538      	push	{r3, r4, r5, lr}
 80198fe:	b181      	cbz	r1, 8019922 <rclc_action_find_goal_handle_by_uuid+0x26>
 8019900:	b178      	cbz	r0, 8019922 <rclc_action_find_goal_handle_by_uuid+0x26>
 8019902:	68c4      	ldr	r4, [r0, #12]
 8019904:	460d      	mov	r5, r1
 8019906:	b914      	cbnz	r4, 801990e <rclc_action_find_goal_handle_by_uuid+0x12>
 8019908:	e009      	b.n	801991e <rclc_action_find_goal_handle_by_uuid+0x22>
 801990a:	6824      	ldr	r4, [r4, #0]
 801990c:	b13c      	cbz	r4, 801991e <rclc_action_find_goal_handle_by_uuid+0x22>
 801990e:	f104 0009 	add.w	r0, r4, #9
 8019912:	2210      	movs	r2, #16
 8019914:	4629      	mov	r1, r5
 8019916:	f003 fa85 	bl	801ce24 <memcmp>
 801991a:	2800      	cmp	r0, #0
 801991c:	d1f5      	bne.n	801990a <rclc_action_find_goal_handle_by_uuid+0xe>
 801991e:	4620      	mov	r0, r4
 8019920:	bd38      	pop	{r3, r4, r5, pc}
 8019922:	2400      	movs	r4, #0
 8019924:	4620      	mov	r0, r4
 8019926:	bd38      	pop	{r3, r4, r5, pc}

08019928 <rclc_action_find_first_handle_by_status>:
 8019928:	b140      	cbz	r0, 801993c <rclc_action_find_first_handle_by_status+0x14>
 801992a:	68c0      	ldr	r0, [r0, #12]
 801992c:	b910      	cbnz	r0, 8019934 <rclc_action_find_first_handle_by_status+0xc>
 801992e:	e005      	b.n	801993c <rclc_action_find_first_handle_by_status+0x14>
 8019930:	6800      	ldr	r0, [r0, #0]
 8019932:	b118      	cbz	r0, 801993c <rclc_action_find_first_handle_by_status+0x14>
 8019934:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019938:	428b      	cmp	r3, r1
 801993a:	d1f9      	bne.n	8019930 <rclc_action_find_first_handle_by_status+0x8>
 801993c:	4770      	bx	lr
 801993e:	bf00      	nop

08019940 <rclc_action_find_first_terminated_handle>:
 8019940:	b140      	cbz	r0, 8019954 <rclc_action_find_first_terminated_handle+0x14>
 8019942:	68c0      	ldr	r0, [r0, #12]
 8019944:	b910      	cbnz	r0, 801994c <rclc_action_find_first_terminated_handle+0xc>
 8019946:	e005      	b.n	8019954 <rclc_action_find_first_terminated_handle+0x14>
 8019948:	6800      	ldr	r0, [r0, #0]
 801994a:	b118      	cbz	r0, 8019954 <rclc_action_find_first_terminated_handle+0x14>
 801994c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019950:	2b03      	cmp	r3, #3
 8019952:	ddf9      	ble.n	8019948 <rclc_action_find_first_terminated_handle+0x8>
 8019954:	4770      	bx	lr
 8019956:	bf00      	nop

08019958 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8019958:	b170      	cbz	r0, 8019978 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801995a:	68c0      	ldr	r0, [r0, #12]
 801995c:	b160      	cbz	r0, 8019978 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801995e:	b410      	push	{r4}
 8019960:	e001      	b.n	8019966 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8019962:	6800      	ldr	r0, [r0, #0]
 8019964:	b128      	cbz	r0, 8019972 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8019966:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801996a:	4299      	cmp	r1, r3
 801996c:	bf08      	it	eq
 801996e:	4294      	cmpeq	r4, r2
 8019970:	d1f7      	bne.n	8019962 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8019972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019976:	4770      	bx	lr
 8019978:	4770      	bx	lr
 801997a:	bf00      	nop

0801997c <rclc_action_find_handle_by_result_request_sequence_number>:
 801997c:	b170      	cbz	r0, 801999c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801997e:	68c0      	ldr	r0, [r0, #12]
 8019980:	b160      	cbz	r0, 801999c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019982:	b410      	push	{r4}
 8019984:	e001      	b.n	801998a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8019986:	6800      	ldr	r0, [r0, #0]
 8019988:	b128      	cbz	r0, 8019996 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801998a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801998e:	4299      	cmp	r1, r3
 8019990:	bf08      	it	eq
 8019992:	4294      	cmpeq	r4, r2
 8019994:	d1f7      	bne.n	8019986 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8019996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801999a:	4770      	bx	lr
 801999c:	4770      	bx	lr
 801999e:	bf00      	nop

080199a0 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80199a0:	b170      	cbz	r0, 80199c0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80199a2:	68c0      	ldr	r0, [r0, #12]
 80199a4:	b160      	cbz	r0, 80199c0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80199a6:	b410      	push	{r4}
 80199a8:	e001      	b.n	80199ae <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80199aa:	6800      	ldr	r0, [r0, #0]
 80199ac:	b128      	cbz	r0, 80199ba <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80199ae:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80199b2:	4299      	cmp	r1, r3
 80199b4:	bf08      	it	eq
 80199b6:	4294      	cmpeq	r4, r2
 80199b8:	d1f7      	bne.n	80199aa <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80199ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199be:	4770      	bx	lr
 80199c0:	4770      	bx	lr
 80199c2:	bf00      	nop

080199c4 <rclc_action_find_first_handle_with_goal_response>:
 80199c4:	b140      	cbz	r0, 80199d8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199c6:	68c0      	ldr	r0, [r0, #12]
 80199c8:	b910      	cbnz	r0, 80199d0 <rclc_action_find_first_handle_with_goal_response+0xc>
 80199ca:	e005      	b.n	80199d8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199cc:	6800      	ldr	r0, [r0, #0]
 80199ce:	b118      	cbz	r0, 80199d8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199d0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d0f9      	beq.n	80199cc <rclc_action_find_first_handle_with_goal_response+0x8>
 80199d8:	4770      	bx	lr
 80199da:	bf00      	nop

080199dc <rclc_action_find_first_handle_with_result_response>:
 80199dc:	b140      	cbz	r0, 80199f0 <rclc_action_find_first_handle_with_result_response+0x14>
 80199de:	68c0      	ldr	r0, [r0, #12]
 80199e0:	b910      	cbnz	r0, 80199e8 <rclc_action_find_first_handle_with_result_response+0xc>
 80199e2:	e005      	b.n	80199f0 <rclc_action_find_first_handle_with_result_response+0x14>
 80199e4:	6800      	ldr	r0, [r0, #0]
 80199e6:	b118      	cbz	r0, 80199f0 <rclc_action_find_first_handle_with_result_response+0x14>
 80199e8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d0f9      	beq.n	80199e4 <rclc_action_find_first_handle_with_result_response+0x8>
 80199f0:	4770      	bx	lr
 80199f2:	bf00      	nop

080199f4 <rclc_action_server_response_goal_request>:
 80199f4:	b198      	cbz	r0, 8019a1e <rclc_action_server_response_goal_request+0x2a>
 80199f6:	2200      	movs	r2, #0
 80199f8:	460b      	mov	r3, r1
 80199fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80199fe:	b510      	push	{r4, lr}
 8019a00:	6844      	ldr	r4, [r0, #4]
 8019a02:	b086      	sub	sp, #24
 8019a04:	f104 0010 	add.w	r0, r4, #16
 8019a08:	9205      	str	r2, [sp, #20]
 8019a0a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8019a0e:	aa03      	add	r2, sp, #12
 8019a10:	f88d 300c 	strb.w	r3, [sp, #12]
 8019a14:	f7ff fd3e 	bl	8019494 <rcl_action_send_goal_response>
 8019a18:	b918      	cbnz	r0, 8019a22 <rclc_action_server_response_goal_request+0x2e>
 8019a1a:	b006      	add	sp, #24
 8019a1c:	bd10      	pop	{r4, pc}
 8019a1e:	200b      	movs	r0, #11
 8019a20:	4770      	bx	lr
 8019a22:	9001      	str	r0, [sp, #4]
 8019a24:	f7f6 f9dc 	bl	800fde0 <rcutils_reset_error>
 8019a28:	9801      	ldr	r0, [sp, #4]
 8019a2a:	b006      	add	sp, #24
 8019a2c:	bd10      	pop	{r4, pc}
 8019a2e:	bf00      	nop

08019a30 <rclc_action_server_goal_cancel_accept>:
 8019a30:	b310      	cbz	r0, 8019a78 <rclc_action_server_goal_cancel_accept+0x48>
 8019a32:	b510      	push	{r4, lr}
 8019a34:	b090      	sub	sp, #64	@ 0x40
 8019a36:	4604      	mov	r4, r0
 8019a38:	a806      	add	r0, sp, #24
 8019a3a:	f7ff ff01 	bl	8019840 <rcl_action_get_zero_initialized_cancel_response>
 8019a3e:	2300      	movs	r3, #0
 8019a40:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8019a44:	46ec      	mov	ip, sp
 8019a46:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019a4a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019a4e:	f88d 3018 	strb.w	r3, [sp, #24]
 8019a52:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8019a56:	f8cd d01c 	str.w	sp, [sp, #28]
 8019a5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a5e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019a80 <rclc_action_server_goal_cancel_accept+0x50>
 8019a62:	6860      	ldr	r0, [r4, #4]
 8019a64:	aa06      	add	r2, sp, #24
 8019a66:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8019a6a:	3010      	adds	r0, #16
 8019a6c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019a70:	f7ff fdc8 	bl	8019604 <rcl_action_send_cancel_response>
 8019a74:	b010      	add	sp, #64	@ 0x40
 8019a76:	bd10      	pop	{r4, pc}
 8019a78:	200b      	movs	r0, #11
 8019a7a:	4770      	bx	lr
 8019a7c:	f3af 8000 	nop.w
 8019a80:	00000001 	.word	0x00000001
 8019a84:	00000001 	.word	0x00000001

08019a88 <rclc_action_server_goal_cancel_reject>:
 8019a88:	b082      	sub	sp, #8
 8019a8a:	b530      	push	{r4, r5, lr}
 8019a8c:	b08b      	sub	sp, #44	@ 0x2c
 8019a8e:	ac0e      	add	r4, sp, #56	@ 0x38
 8019a90:	e884 000c 	stmia.w	r4, {r2, r3}
 8019a94:	b188      	cbz	r0, 8019aba <rclc_action_server_goal_cancel_reject+0x32>
 8019a96:	4604      	mov	r4, r0
 8019a98:	a801      	add	r0, sp, #4
 8019a9a:	460d      	mov	r5, r1
 8019a9c:	f7ff fed0 	bl	8019840 <rcl_action_get_zero_initialized_cancel_response>
 8019aa0:	aa01      	add	r2, sp, #4
 8019aa2:	a90e      	add	r1, sp, #56	@ 0x38
 8019aa4:	f104 0010 	add.w	r0, r4, #16
 8019aa8:	f88d 5004 	strb.w	r5, [sp, #4]
 8019aac:	f7ff fdaa 	bl	8019604 <rcl_action_send_cancel_response>
 8019ab0:	b00b      	add	sp, #44	@ 0x2c
 8019ab2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ab6:	b002      	add	sp, #8
 8019ab8:	4770      	bx	lr
 8019aba:	200b      	movs	r0, #11
 8019abc:	b00b      	add	sp, #44	@ 0x2c
 8019abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ac2:	b002      	add	sp, #8
 8019ac4:	4770      	bx	lr
 8019ac6:	bf00      	nop

08019ac8 <__atomic_load_8>:
 8019ac8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8019acc:	4a16      	ldr	r2, [pc, #88]	@ (8019b28 <__atomic_load_8+0x60>)
 8019ace:	4b17      	ldr	r3, [pc, #92]	@ (8019b2c <__atomic_load_8+0x64>)
 8019ad0:	f04f 0c01 	mov.w	ip, #1
 8019ad4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8019ad8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019adc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8019ae0:	fb02 f101 	mul.w	r1, r2, r1
 8019ae4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8019ae8:	fba3 2301 	umull	r2, r3, r3, r1
 8019aec:	091b      	lsrs	r3, r3, #4
 8019aee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019af2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8019af6:	b4d0      	push	{r4, r6, r7}
 8019af8:	1ac9      	subs	r1, r1, r3
 8019afa:	4c0d      	ldr	r4, [pc, #52]	@ (8019b30 <__atomic_load_8+0x68>)
 8019afc:	1862      	adds	r2, r4, r1
 8019afe:	e8d2 3f4f 	ldrexb	r3, [r2]
 8019b02:	e8c2 cf46 	strexb	r6, ip, [r2]
 8019b06:	2e00      	cmp	r6, #0
 8019b08:	d1f9      	bne.n	8019afe <__atomic_load_8+0x36>
 8019b0a:	b2db      	uxtb	r3, r3
 8019b0c:	f3bf 8f5b 	dmb	ish
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d1f4      	bne.n	8019afe <__atomic_load_8+0x36>
 8019b14:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019b18:	f3bf 8f5b 	dmb	ish
 8019b1c:	5463      	strb	r3, [r4, r1]
 8019b1e:	4630      	mov	r0, r6
 8019b20:	4639      	mov	r1, r7
 8019b22:	bcd0      	pop	{r4, r6, r7}
 8019b24:	4770      	bx	lr
 8019b26:	bf00      	nop
 8019b28:	27d4eb2d 	.word	0x27d4eb2d
 8019b2c:	b21642c9 	.word	0xb21642c9
 8019b30:	240138a4 	.word	0x240138a4

08019b34 <__atomic_store_8>:
 8019b34:	b570      	push	{r4, r5, r6, lr}
 8019b36:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8019b3a:	4916      	ldr	r1, [pc, #88]	@ (8019b94 <__atomic_store_8+0x60>)
 8019b3c:	4c16      	ldr	r4, [pc, #88]	@ (8019b98 <__atomic_store_8+0x64>)
 8019b3e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8019b42:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8019b46:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8019b4a:	fb01 fe0e 	mul.w	lr, r1, lr
 8019b4e:	4913      	ldr	r1, [pc, #76]	@ (8019b9c <__atomic_store_8+0x68>)
 8019b50:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8019b54:	fba1 510e 	umull	r5, r1, r1, lr
 8019b58:	f04f 0501 	mov.w	r5, #1
 8019b5c:	0909      	lsrs	r1, r1, #4
 8019b5e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8019b62:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8019b66:	ebae 0e01 	sub.w	lr, lr, r1
 8019b6a:	eb04 0c0e 	add.w	ip, r4, lr
 8019b6e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8019b72:	e8cc 5f46 	strexb	r6, r5, [ip]
 8019b76:	2e00      	cmp	r6, #0
 8019b78:	d1f9      	bne.n	8019b6e <__atomic_store_8+0x3a>
 8019b7a:	b2c9      	uxtb	r1, r1
 8019b7c:	f3bf 8f5b 	dmb	ish
 8019b80:	2900      	cmp	r1, #0
 8019b82:	d1f4      	bne.n	8019b6e <__atomic_store_8+0x3a>
 8019b84:	e9c0 2300 	strd	r2, r3, [r0]
 8019b88:	f3bf 8f5b 	dmb	ish
 8019b8c:	f804 100e 	strb.w	r1, [r4, lr]
 8019b90:	bd70      	pop	{r4, r5, r6, pc}
 8019b92:	bf00      	nop
 8019b94:	27d4eb2d 	.word	0x27d4eb2d
 8019b98:	240138a4 	.word	0x240138a4
 8019b9c:	b21642c9 	.word	0xb21642c9

08019ba0 <__atomic_exchange_8>:
 8019ba0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8019ba4:	4917      	ldr	r1, [pc, #92]	@ (8019c04 <__atomic_exchange_8+0x64>)
 8019ba6:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8019baa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8019bae:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8019bb2:	fb01 fc0c 	mul.w	ip, r1, ip
 8019bb6:	4914      	ldr	r1, [pc, #80]	@ (8019c08 <__atomic_exchange_8+0x68>)
 8019bb8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8019bbc:	b570      	push	{r4, r5, r6, lr}
 8019bbe:	4686      	mov	lr, r0
 8019bc0:	fba1 010c 	umull	r0, r1, r1, ip
 8019bc4:	4d11      	ldr	r5, [pc, #68]	@ (8019c0c <__atomic_exchange_8+0x6c>)
 8019bc6:	f04f 0001 	mov.w	r0, #1
 8019bca:	0909      	lsrs	r1, r1, #4
 8019bcc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8019bd0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8019bd4:	ebac 0c01 	sub.w	ip, ip, r1
 8019bd8:	eb05 010c 	add.w	r1, r5, ip
 8019bdc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8019be0:	e8c1 0f46 	strexb	r6, r0, [r1]
 8019be4:	2e00      	cmp	r6, #0
 8019be6:	d1f9      	bne.n	8019bdc <__atomic_exchange_8+0x3c>
 8019be8:	b2e4      	uxtb	r4, r4
 8019bea:	f3bf 8f5b 	dmb	ish
 8019bee:	2c00      	cmp	r4, #0
 8019bf0:	d1f4      	bne.n	8019bdc <__atomic_exchange_8+0x3c>
 8019bf2:	e9de 0100 	ldrd	r0, r1, [lr]
 8019bf6:	e9ce 2300 	strd	r2, r3, [lr]
 8019bfa:	f3bf 8f5b 	dmb	ish
 8019bfe:	f805 400c 	strb.w	r4, [r5, ip]
 8019c02:	bd70      	pop	{r4, r5, r6, pc}
 8019c04:	27d4eb2d 	.word	0x27d4eb2d
 8019c08:	b21642c9 	.word	0xb21642c9
 8019c0c:	240138a4 	.word	0x240138a4

08019c10 <rcutils_get_env>:
 8019c10:	b168      	cbz	r0, 8019c2e <rcutils_get_env+0x1e>
 8019c12:	b510      	push	{r4, lr}
 8019c14:	460c      	mov	r4, r1
 8019c16:	b129      	cbz	r1, 8019c24 <rcutils_get_env+0x14>
 8019c18:	f002 fc72 	bl	801c500 <getenv>
 8019c1c:	b120      	cbz	r0, 8019c28 <rcutils_get_env+0x18>
 8019c1e:	6020      	str	r0, [r4, #0]
 8019c20:	2000      	movs	r0, #0
 8019c22:	bd10      	pop	{r4, pc}
 8019c24:	4803      	ldr	r0, [pc, #12]	@ (8019c34 <rcutils_get_env+0x24>)
 8019c26:	bd10      	pop	{r4, pc}
 8019c28:	4b03      	ldr	r3, [pc, #12]	@ (8019c38 <rcutils_get_env+0x28>)
 8019c2a:	6023      	str	r3, [r4, #0]
 8019c2c:	bd10      	pop	{r4, pc}
 8019c2e:	4803      	ldr	r0, [pc, #12]	@ (8019c3c <rcutils_get_env+0x2c>)
 8019c30:	4770      	bx	lr
 8019c32:	bf00      	nop
 8019c34:	0801e7c8 	.word	0x0801e7c8
 8019c38:	0801ebb8 	.word	0x0801ebb8
 8019c3c:	0801e7ac 	.word	0x0801e7ac

08019c40 <rcutils_is_directory>:
 8019c40:	2000      	movs	r0, #0
 8019c42:	4770      	bx	lr

08019c44 <rcutils_join_path>:
 8019c44:	b082      	sub	sp, #8
 8019c46:	2000      	movs	r0, #0
 8019c48:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019c4c:	b002      	add	sp, #8
 8019c4e:	4770      	bx	lr

08019c50 <rcutils_to_native_path>:
 8019c50:	b084      	sub	sp, #16
 8019c52:	2000      	movs	r0, #0
 8019c54:	f10d 0c04 	add.w	ip, sp, #4
 8019c58:	b004      	add	sp, #16
 8019c5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8019c5e:	4770      	bx	lr

08019c60 <rcutils_format_string_limit>:
 8019c60:	b40f      	push	{r0, r1, r2, r3}
 8019c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c64:	b083      	sub	sp, #12
 8019c66:	ac08      	add	r4, sp, #32
 8019c68:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019c6e:	b326      	cbz	r6, 8019cba <rcutils_format_string_limit+0x5a>
 8019c70:	a808      	add	r0, sp, #32
 8019c72:	f7f6 f891 	bl	800fd98 <rcutils_allocator_is_valid>
 8019c76:	b300      	cbz	r0, 8019cba <rcutils_format_string_limit+0x5a>
 8019c78:	2100      	movs	r1, #0
 8019c7a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019c7c:	4632      	mov	r2, r6
 8019c7e:	4608      	mov	r0, r1
 8019c80:	e9cd 3300 	strd	r3, r3, [sp]
 8019c84:	f000 f906 	bl	8019e94 <rcutils_vsnprintf>
 8019c88:	1c43      	adds	r3, r0, #1
 8019c8a:	4605      	mov	r5, r0
 8019c8c:	d015      	beq.n	8019cba <rcutils_format_string_limit+0x5a>
 8019c8e:	1c47      	adds	r7, r0, #1
 8019c90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019c92:	429f      	cmp	r7, r3
 8019c94:	d901      	bls.n	8019c9a <rcutils_format_string_limit+0x3a>
 8019c96:	1e5d      	subs	r5, r3, #1
 8019c98:	461f      	mov	r7, r3
 8019c9a:	9b08      	ldr	r3, [sp, #32]
 8019c9c:	4638      	mov	r0, r7
 8019c9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ca0:	4798      	blx	r3
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	b148      	cbz	r0, 8019cba <rcutils_format_string_limit+0x5a>
 8019ca6:	4632      	mov	r2, r6
 8019ca8:	4639      	mov	r1, r7
 8019caa:	9b01      	ldr	r3, [sp, #4]
 8019cac:	f000 f8f2 	bl	8019e94 <rcutils_vsnprintf>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	db09      	blt.n	8019cc8 <rcutils_format_string_limit+0x68>
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	5563      	strb	r3, [r4, r5]
 8019cb8:	e000      	b.n	8019cbc <rcutils_format_string_limit+0x5c>
 8019cba:	2400      	movs	r4, #0
 8019cbc:	4620      	mov	r0, r4
 8019cbe:	b003      	add	sp, #12
 8019cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cc4:	b004      	add	sp, #16
 8019cc6:	4770      	bx	lr
 8019cc8:	4620      	mov	r0, r4
 8019cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ccc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019cce:	2400      	movs	r4, #0
 8019cd0:	4798      	blx	r3
 8019cd2:	e7f3      	b.n	8019cbc <rcutils_format_string_limit+0x5c>

08019cd4 <rcutils_repl_str>:
 8019cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd8:	ed2d 8b02 	vpush	{d8}
 8019cdc:	b087      	sub	sp, #28
 8019cde:	2600      	movs	r6, #0
 8019ce0:	4680      	mov	r8, r0
 8019ce2:	468a      	mov	sl, r1
 8019ce4:	9000      	str	r0, [sp, #0]
 8019ce6:	4608      	mov	r0, r1
 8019ce8:	ee08 2a10 	vmov	s16, r2
 8019cec:	4699      	mov	r9, r3
 8019cee:	2510      	movs	r5, #16
 8019cf0:	f7e6 fb00 	bl	80002f4 <strlen>
 8019cf4:	4637      	mov	r7, r6
 8019cf6:	46b3      	mov	fp, r6
 8019cf8:	9001      	str	r0, [sp, #4]
 8019cfa:	e01e      	b.n	8019d3a <rcutils_repl_str+0x66>
 8019cfc:	f10b 0b01 	add.w	fp, fp, #1
 8019d00:	9b01      	ldr	r3, [sp, #4]
 8019d02:	455e      	cmp	r6, fp
 8019d04:	eb04 0803 	add.w	r8, r4, r3
 8019d08:	d211      	bcs.n	8019d2e <rcutils_repl_str+0x5a>
 8019d0a:	442e      	add	r6, r5
 8019d0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019d10:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d18:	00b1      	lsls	r1, r6, #2
 8019d1a:	4798      	blx	r3
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	f000 8088 	beq.w	8019e32 <rcutils_repl_str+0x15e>
 8019d22:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8019d26:	4607      	mov	r7, r0
 8019d28:	bf28      	it	cs
 8019d2a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8019d2e:	9a00      	ldr	r2, [sp, #0]
 8019d30:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8019d34:	1aa4      	subs	r4, r4, r2
 8019d36:	f843 4c04 	str.w	r4, [r3, #-4]
 8019d3a:	4651      	mov	r1, sl
 8019d3c:	4640      	mov	r0, r8
 8019d3e:	f003 f8c2 	bl	801cec6 <strstr>
 8019d42:	4604      	mov	r4, r0
 8019d44:	4638      	mov	r0, r7
 8019d46:	2c00      	cmp	r4, #0
 8019d48:	d1d8      	bne.n	8019cfc <rcutils_repl_str+0x28>
 8019d4a:	4640      	mov	r0, r8
 8019d4c:	f7e6 fad2 	bl	80002f4 <strlen>
 8019d50:	9b00      	ldr	r3, [sp, #0]
 8019d52:	eba8 0803 	sub.w	r8, r8, r3
 8019d56:	eb08 0400 	add.w	r4, r8, r0
 8019d5a:	9402      	str	r4, [sp, #8]
 8019d5c:	f1bb 0f00 	cmp.w	fp, #0
 8019d60:	d045      	beq.n	8019dee <rcutils_repl_str+0x11a>
 8019d62:	ee18 0a10 	vmov	r0, s16
 8019d66:	f7e6 fac5 	bl	80002f4 <strlen>
 8019d6a:	9a01      	ldr	r2, [sp, #4]
 8019d6c:	4606      	mov	r6, r0
 8019d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8019d72:	1a82      	subs	r2, r0, r2
 8019d74:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019d78:	fb0b 4202 	mla	r2, fp, r2, r4
 8019d7c:	1c50      	adds	r0, r2, #1
 8019d7e:	9205      	str	r2, [sp, #20]
 8019d80:	4798      	blx	r3
 8019d82:	4682      	mov	sl, r0
 8019d84:	2800      	cmp	r0, #0
 8019d86:	d054      	beq.n	8019e32 <rcutils_repl_str+0x15e>
 8019d88:	683a      	ldr	r2, [r7, #0]
 8019d8a:	463d      	mov	r5, r7
 8019d8c:	9900      	ldr	r1, [sp, #0]
 8019d8e:	2401      	movs	r4, #1
 8019d90:	f003 f93b 	bl	801d00a <memcpy>
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8019d9a:	eb0a 0803 	add.w	r8, sl, r3
 8019d9e:	ee18 7a10 	vmov	r7, s16
 8019da2:	f8dd a000 	ldr.w	sl, [sp]
 8019da6:	f8cd 9000 	str.w	r9, [sp]
 8019daa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019dae:	4632      	mov	r2, r6
 8019db0:	4639      	mov	r1, r7
 8019db2:	4640      	mov	r0, r8
 8019db4:	44b0      	add	r8, r6
 8019db6:	f003 f928 	bl	801d00a <memcpy>
 8019dba:	f855 2b04 	ldr.w	r2, [r5], #4
 8019dbe:	45a3      	cmp	fp, r4
 8019dc0:	444a      	add	r2, r9
 8019dc2:	eb0a 0102 	add.w	r1, sl, r2
 8019dc6:	d02a      	beq.n	8019e1e <rcutils_repl_str+0x14a>
 8019dc8:	6828      	ldr	r0, [r5, #0]
 8019dca:	1a82      	subs	r2, r0, r2
 8019dcc:	4640      	mov	r0, r8
 8019dce:	4490      	add	r8, r2
 8019dd0:	f003 f91b 	bl	801d00a <memcpy>
 8019dd4:	1c62      	adds	r2, r4, #1
 8019dd6:	45a3      	cmp	fp, r4
 8019dd8:	4614      	mov	r4, r2
 8019dda:	d8e8      	bhi.n	8019dae <rcutils_repl_str+0xda>
 8019ddc:	f8dd 9000 	ldr.w	r9, [sp]
 8019de0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019de4:	2300      	movs	r3, #0
 8019de6:	9a05      	ldr	r2, [sp, #20]
 8019de8:	f80a 3002 	strb.w	r3, [sl, r2]
 8019dec:	e00b      	b.n	8019e06 <rcutils_repl_str+0x132>
 8019dee:	4620      	mov	r0, r4
 8019df0:	f8d9 3000 	ldr.w	r3, [r9]
 8019df4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019df8:	3001      	adds	r0, #1
 8019dfa:	4798      	blx	r3
 8019dfc:	4682      	mov	sl, r0
 8019dfe:	b110      	cbz	r0, 8019e06 <rcutils_repl_str+0x132>
 8019e00:	9900      	ldr	r1, [sp, #0]
 8019e02:	f003 f8fa 	bl	801cffa <strcpy>
 8019e06:	4638      	mov	r0, r7
 8019e08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019e0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019e10:	4798      	blx	r3
 8019e12:	4650      	mov	r0, sl
 8019e14:	b007      	add	sp, #28
 8019e16:	ecbd 8b02 	vpop	{d8}
 8019e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e1e:	9b02      	ldr	r3, [sp, #8]
 8019e20:	4640      	mov	r0, r8
 8019e22:	f8dd 9000 	ldr.w	r9, [sp]
 8019e26:	1a9a      	subs	r2, r3, r2
 8019e28:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019e2c:	f003 f8ed 	bl	801d00a <memcpy>
 8019e30:	e7d8      	b.n	8019de4 <rcutils_repl_str+0x110>
 8019e32:	f04f 0a00 	mov.w	sl, #0
 8019e36:	e7e6      	b.n	8019e06 <rcutils_repl_str+0x132>

08019e38 <rcutils_snprintf>:
 8019e38:	b40c      	push	{r2, r3}
 8019e3a:	b530      	push	{r4, r5, lr}
 8019e3c:	b083      	sub	sp, #12
 8019e3e:	ab06      	add	r3, sp, #24
 8019e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e44:	9301      	str	r3, [sp, #4]
 8019e46:	b1e2      	cbz	r2, 8019e82 <rcutils_snprintf+0x4a>
 8019e48:	fab0 f480 	clz	r4, r0
 8019e4c:	fab1 f581 	clz	r5, r1
 8019e50:	ea50 0c01 	orrs.w	ip, r0, r1
 8019e54:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019e58:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019e5c:	d008      	beq.n	8019e70 <rcutils_snprintf+0x38>
 8019e5e:	b984      	cbnz	r4, 8019e82 <rcutils_snprintf+0x4a>
 8019e60:	b97d      	cbnz	r5, 8019e82 <rcutils_snprintf+0x4a>
 8019e62:	f002 ff3d 	bl	801cce0 <vsniprintf>
 8019e66:	b003      	add	sp, #12
 8019e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e6c:	b002      	add	sp, #8
 8019e6e:	4770      	bx	lr
 8019e70:	4661      	mov	r1, ip
 8019e72:	4660      	mov	r0, ip
 8019e74:	f002 ff34 	bl	801cce0 <vsniprintf>
 8019e78:	b003      	add	sp, #12
 8019e7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e7e:	b002      	add	sp, #8
 8019e80:	4770      	bx	lr
 8019e82:	f003 f88d 	bl	801cfa0 <__errno>
 8019e86:	2216      	movs	r2, #22
 8019e88:	4603      	mov	r3, r0
 8019e8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e8e:	601a      	str	r2, [r3, #0]
 8019e90:	e7e9      	b.n	8019e66 <rcutils_snprintf+0x2e>
 8019e92:	bf00      	nop

08019e94 <rcutils_vsnprintf>:
 8019e94:	b570      	push	{r4, r5, r6, lr}
 8019e96:	b1b2      	cbz	r2, 8019ec6 <rcutils_vsnprintf+0x32>
 8019e98:	fab0 f480 	clz	r4, r0
 8019e9c:	fab1 f581 	clz	r5, r1
 8019ea0:	ea50 0c01 	orrs.w	ip, r0, r1
 8019ea4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019ea8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019eac:	d005      	beq.n	8019eba <rcutils_vsnprintf+0x26>
 8019eae:	b954      	cbnz	r4, 8019ec6 <rcutils_vsnprintf+0x32>
 8019eb0:	b94d      	cbnz	r5, 8019ec6 <rcutils_vsnprintf+0x32>
 8019eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019eb6:	f002 bf13 	b.w	801cce0 <vsniprintf>
 8019eba:	4661      	mov	r1, ip
 8019ebc:	4660      	mov	r0, ip
 8019ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ec2:	f002 bf0d 	b.w	801cce0 <vsniprintf>
 8019ec6:	f003 f86b 	bl	801cfa0 <__errno>
 8019eca:	2316      	movs	r3, #22
 8019ecc:	6003      	str	r3, [r0, #0]
 8019ece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ed2:	bd70      	pop	{r4, r5, r6, pc}

08019ed4 <rcutils_strdup>:
 8019ed4:	b084      	sub	sp, #16
 8019ed6:	b570      	push	{r4, r5, r6, lr}
 8019ed8:	b082      	sub	sp, #8
 8019eda:	4605      	mov	r5, r0
 8019edc:	ac07      	add	r4, sp, #28
 8019ede:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019ee2:	b1b0      	cbz	r0, 8019f12 <rcutils_strdup+0x3e>
 8019ee4:	f7e6 fa06 	bl	80002f4 <strlen>
 8019ee8:	1c42      	adds	r2, r0, #1
 8019eea:	9b07      	ldr	r3, [sp, #28]
 8019eec:	4606      	mov	r6, r0
 8019eee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019ef0:	4610      	mov	r0, r2
 8019ef2:	9201      	str	r2, [sp, #4]
 8019ef4:	4798      	blx	r3
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	b128      	cbz	r0, 8019f06 <rcutils_strdup+0x32>
 8019efa:	9a01      	ldr	r2, [sp, #4]
 8019efc:	4629      	mov	r1, r5
 8019efe:	f003 f884 	bl	801d00a <memcpy>
 8019f02:	2300      	movs	r3, #0
 8019f04:	55a3      	strb	r3, [r4, r6]
 8019f06:	4620      	mov	r0, r4
 8019f08:	b002      	add	sp, #8
 8019f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f0e:	b004      	add	sp, #16
 8019f10:	4770      	bx	lr
 8019f12:	4604      	mov	r4, r0
 8019f14:	e7f7      	b.n	8019f06 <rcutils_strdup+0x32>
 8019f16:	bf00      	nop

08019f18 <rcutils_strndup>:
 8019f18:	b082      	sub	sp, #8
 8019f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f1c:	ac06      	add	r4, sp, #24
 8019f1e:	4605      	mov	r5, r0
 8019f20:	e884 000c 	stmia.w	r4, {r2, r3}
 8019f24:	b188      	cbz	r0, 8019f4a <rcutils_strndup+0x32>
 8019f26:	1c4f      	adds	r7, r1, #1
 8019f28:	460e      	mov	r6, r1
 8019f2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f2c:	4638      	mov	r0, r7
 8019f2e:	4790      	blx	r2
 8019f30:	4604      	mov	r4, r0
 8019f32:	b128      	cbz	r0, 8019f40 <rcutils_strndup+0x28>
 8019f34:	463a      	mov	r2, r7
 8019f36:	4629      	mov	r1, r5
 8019f38:	f003 f867 	bl	801d00a <memcpy>
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	55a3      	strb	r3, [r4, r6]
 8019f40:	4620      	mov	r0, r4
 8019f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f46:	b002      	add	sp, #8
 8019f48:	4770      	bx	lr
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	e7f8      	b.n	8019f40 <rcutils_strndup+0x28>
 8019f4e:	bf00      	nop

08019f50 <rcutils_get_zero_initialized_string_map>:
 8019f50:	2000      	movs	r0, #0
 8019f52:	4b01      	ldr	r3, [pc, #4]	@ (8019f58 <rcutils_get_zero_initialized_string_map+0x8>)
 8019f54:	6018      	str	r0, [r3, #0]
 8019f56:	4770      	bx	lr
 8019f58:	240138bc 	.word	0x240138bc

08019f5c <rcutils_string_map_reserve>:
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	d05e      	beq.n	801a01e <rcutils_string_map_reserve+0xc2>
 8019f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f64:	460c      	mov	r4, r1
 8019f66:	6801      	ldr	r1, [r0, #0]
 8019f68:	b082      	sub	sp, #8
 8019f6a:	4605      	mov	r5, r0
 8019f6c:	b129      	cbz	r1, 8019f7a <rcutils_string_map_reserve+0x1e>
 8019f6e:	68cb      	ldr	r3, [r1, #12]
 8019f70:	42a3      	cmp	r3, r4
 8019f72:	d906      	bls.n	8019f82 <rcutils_string_map_reserve+0x26>
 8019f74:	461c      	mov	r4, r3
 8019f76:	2900      	cmp	r1, #0
 8019f78:	d1f9      	bne.n	8019f6e <rcutils_string_map_reserve+0x12>
 8019f7a:	201f      	movs	r0, #31
 8019f7c:	b002      	add	sp, #8
 8019f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f82:	688b      	ldr	r3, [r1, #8]
 8019f84:	42a3      	cmp	r3, r4
 8019f86:	d046      	beq.n	801a016 <rcutils_string_map_reserve+0xba>
 8019f88:	6a0e      	ldr	r6, [r1, #32]
 8019f8a:	2c00      	cmp	r4, #0
 8019f8c:	d033      	beq.n	8019ff6 <rcutils_string_map_reserve+0x9a>
 8019f8e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019f92:	d242      	bcs.n	801a01a <rcutils_string_map_reserve+0xbe>
 8019f94:	00a7      	lsls	r7, r4, #2
 8019f96:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8019f9a:	6808      	ldr	r0, [r1, #0]
 8019f9c:	4632      	mov	r2, r6
 8019f9e:	4639      	mov	r1, r7
 8019fa0:	47c0      	blx	r8
 8019fa2:	2800      	cmp	r0, #0
 8019fa4:	d039      	beq.n	801a01a <rcutils_string_map_reserve+0xbe>
 8019fa6:	682b      	ldr	r3, [r5, #0]
 8019fa8:	4632      	mov	r2, r6
 8019faa:	4639      	mov	r1, r7
 8019fac:	6018      	str	r0, [r3, #0]
 8019fae:	6858      	ldr	r0, [r3, #4]
 8019fb0:	47c0      	blx	r8
 8019fb2:	2800      	cmp	r0, #0
 8019fb4:	d031      	beq.n	801a01a <rcutils_string_map_reserve+0xbe>
 8019fb6:	682d      	ldr	r5, [r5, #0]
 8019fb8:	68ab      	ldr	r3, [r5, #8]
 8019fba:	6068      	str	r0, [r5, #4]
 8019fbc:	42a3      	cmp	r3, r4
 8019fbe:	d225      	bcs.n	801a00c <rcutils_string_map_reserve+0xb0>
 8019fc0:	682a      	ldr	r2, [r5, #0]
 8019fc2:	eb00 0c07 	add.w	ip, r0, r7
 8019fc6:	0099      	lsls	r1, r3, #2
 8019fc8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8019fcc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8019fd0:	45e6      	cmp	lr, ip
 8019fd2:	d203      	bcs.n	8019fdc <rcutils_string_map_reserve+0x80>
 8019fd4:	eb02 0c07 	add.w	ip, r2, r7
 8019fd8:	4566      	cmp	r6, ip
 8019fda:	d322      	bcc.n	801a022 <rcutils_string_map_reserve+0xc6>
 8019fdc:	1ae3      	subs	r3, r4, r3
 8019fde:	4670      	mov	r0, lr
 8019fe0:	2100      	movs	r1, #0
 8019fe2:	009a      	lsls	r2, r3, #2
 8019fe4:	9201      	str	r2, [sp, #4]
 8019fe6:	f002 ff47 	bl	801ce78 <memset>
 8019fea:	9a01      	ldr	r2, [sp, #4]
 8019fec:	2100      	movs	r1, #0
 8019fee:	4630      	mov	r0, r6
 8019ff0:	f002 ff42 	bl	801ce78 <memset>
 8019ff4:	e00a      	b.n	801a00c <rcutils_string_map_reserve+0xb0>
 8019ff6:	694f      	ldr	r7, [r1, #20]
 8019ff8:	6808      	ldr	r0, [r1, #0]
 8019ffa:	4631      	mov	r1, r6
 8019ffc:	47b8      	blx	r7
 8019ffe:	682b      	ldr	r3, [r5, #0]
 801a000:	4631      	mov	r1, r6
 801a002:	6858      	ldr	r0, [r3, #4]
 801a004:	601c      	str	r4, [r3, #0]
 801a006:	47b8      	blx	r7
 801a008:	682d      	ldr	r5, [r5, #0]
 801a00a:	606c      	str	r4, [r5, #4]
 801a00c:	2000      	movs	r0, #0
 801a00e:	60ac      	str	r4, [r5, #8]
 801a010:	b002      	add	sp, #8
 801a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a016:	2000      	movs	r0, #0
 801a018:	e7b0      	b.n	8019f7c <rcutils_string_map_reserve+0x20>
 801a01a:	200a      	movs	r0, #10
 801a01c:	e7ae      	b.n	8019f7c <rcutils_string_map_reserve+0x20>
 801a01e:	200b      	movs	r0, #11
 801a020:	4770      	bx	lr
 801a022:	1f0b      	subs	r3, r1, #4
 801a024:	4418      	add	r0, r3
 801a026:	4413      	add	r3, r2
 801a028:	3a04      	subs	r2, #4
 801a02a:	4417      	add	r7, r2
 801a02c:	2200      	movs	r2, #0
 801a02e:	f843 2f04 	str.w	r2, [r3, #4]!
 801a032:	42bb      	cmp	r3, r7
 801a034:	f840 2f04 	str.w	r2, [r0, #4]!
 801a038:	d1f9      	bne.n	801a02e <rcutils_string_map_reserve+0xd2>
 801a03a:	e7e7      	b.n	801a00c <rcutils_string_map_reserve+0xb0>

0801a03c <rcutils_string_map_init>:
 801a03c:	b082      	sub	sp, #8
 801a03e:	b570      	push	{r4, r5, r6, lr}
 801a040:	ac04      	add	r4, sp, #16
 801a042:	e884 000c 	stmia.w	r4, {r2, r3}
 801a046:	b380      	cbz	r0, 801a0aa <rcutils_string_map_init+0x6e>
 801a048:	6806      	ldr	r6, [r0, #0]
 801a04a:	4604      	mov	r4, r0
 801a04c:	b12e      	cbz	r6, 801a05a <rcutils_string_map_init+0x1e>
 801a04e:	251e      	movs	r5, #30
 801a050:	4628      	mov	r0, r5
 801a052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a056:	b002      	add	sp, #8
 801a058:	4770      	bx	lr
 801a05a:	a804      	add	r0, sp, #16
 801a05c:	460d      	mov	r5, r1
 801a05e:	f7f5 fe9b 	bl	800fd98 <rcutils_allocator_is_valid>
 801a062:	b310      	cbz	r0, 801a0aa <rcutils_string_map_init+0x6e>
 801a064:	9b04      	ldr	r3, [sp, #16]
 801a066:	2024      	movs	r0, #36	@ 0x24
 801a068:	9908      	ldr	r1, [sp, #32]
 801a06a:	4798      	blx	r3
 801a06c:	6020      	str	r0, [r4, #0]
 801a06e:	b310      	cbz	r0, 801a0b6 <rcutils_string_map_init+0x7a>
 801a070:	f10d 0e10 	add.w	lr, sp, #16
 801a074:	f100 0c10 	add.w	ip, r0, #16
 801a078:	e9c0 6600 	strd	r6, r6, [r0]
 801a07c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801a080:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a088:	f8de 3000 	ldr.w	r3, [lr]
 801a08c:	4629      	mov	r1, r5
 801a08e:	4620      	mov	r0, r4
 801a090:	f8cc 3000 	str.w	r3, [ip]
 801a094:	f7ff ff62 	bl	8019f5c <rcutils_string_map_reserve>
 801a098:	4605      	mov	r5, r0
 801a09a:	2800      	cmp	r0, #0
 801a09c:	d0d8      	beq.n	801a050 <rcutils_string_map_init+0x14>
 801a09e:	9b05      	ldr	r3, [sp, #20]
 801a0a0:	9908      	ldr	r1, [sp, #32]
 801a0a2:	6820      	ldr	r0, [r4, #0]
 801a0a4:	4798      	blx	r3
 801a0a6:	6026      	str	r6, [r4, #0]
 801a0a8:	e7d2      	b.n	801a050 <rcutils_string_map_init+0x14>
 801a0aa:	250b      	movs	r5, #11
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0b2:	b002      	add	sp, #8
 801a0b4:	4770      	bx	lr
 801a0b6:	250a      	movs	r5, #10
 801a0b8:	e7ca      	b.n	801a050 <rcutils_string_map_init+0x14>
 801a0ba:	bf00      	nop

0801a0bc <rcutils_string_map_fini>:
 801a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0c0:	b082      	sub	sp, #8
 801a0c2:	2800      	cmp	r0, #0
 801a0c4:	d03a      	beq.n	801a13c <rcutils_string_map_fini+0x80>
 801a0c6:	6804      	ldr	r4, [r0, #0]
 801a0c8:	4606      	mov	r6, r0
 801a0ca:	2c00      	cmp	r4, #0
 801a0cc:	d032      	beq.n	801a134 <rcutils_string_map_fini+0x78>
 801a0ce:	68a3      	ldr	r3, [r4, #8]
 801a0d0:	b32b      	cbz	r3, 801a11e <rcutils_string_map_fini+0x62>
 801a0d2:	2500      	movs	r5, #0
 801a0d4:	6822      	ldr	r2, [r4, #0]
 801a0d6:	462f      	mov	r7, r5
 801a0d8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a0dc:	b1e0      	cbz	r0, 801a118 <rcutils_string_map_fini+0x5c>
 801a0de:	6a21      	ldr	r1, [r4, #32]
 801a0e0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801a0e4:	9101      	str	r1, [sp, #4]
 801a0e6:	47c0      	blx	r8
 801a0e8:	9901      	ldr	r1, [sp, #4]
 801a0ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 801a0ee:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801a0f2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a0f6:	47c0      	blx	r8
 801a0f8:	68e3      	ldr	r3, [r4, #12]
 801a0fa:	6862      	ldr	r2, [r4, #4]
 801a0fc:	3b01      	subs	r3, #1
 801a0fe:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801a102:	3501      	adds	r5, #1
 801a104:	60e3      	str	r3, [r4, #12]
 801a106:	6834      	ldr	r4, [r6, #0]
 801a108:	68a3      	ldr	r3, [r4, #8]
 801a10a:	429d      	cmp	r5, r3
 801a10c:	d207      	bcs.n	801a11e <rcutils_string_map_fini+0x62>
 801a10e:	6822      	ldr	r2, [r4, #0]
 801a110:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a114:	2800      	cmp	r0, #0
 801a116:	d1e2      	bne.n	801a0de <rcutils_string_map_fini+0x22>
 801a118:	3501      	adds	r5, #1
 801a11a:	429d      	cmp	r5, r3
 801a11c:	d3dc      	bcc.n	801a0d8 <rcutils_string_map_fini+0x1c>
 801a11e:	2100      	movs	r1, #0
 801a120:	4630      	mov	r0, r6
 801a122:	f7ff ff1b 	bl	8019f5c <rcutils_string_map_reserve>
 801a126:	4604      	mov	r4, r0
 801a128:	b920      	cbnz	r0, 801a134 <rcutils_string_map_fini+0x78>
 801a12a:	6830      	ldr	r0, [r6, #0]
 801a12c:	6943      	ldr	r3, [r0, #20]
 801a12e:	6a01      	ldr	r1, [r0, #32]
 801a130:	4798      	blx	r3
 801a132:	6034      	str	r4, [r6, #0]
 801a134:	4620      	mov	r0, r4
 801a136:	b002      	add	sp, #8
 801a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a13c:	240b      	movs	r4, #11
 801a13e:	4620      	mov	r0, r4
 801a140:	b002      	add	sp, #8
 801a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a146:	bf00      	nop

0801a148 <rcutils_string_map_getn>:
 801a148:	b378      	cbz	r0, 801a1aa <rcutils_string_map_getn+0x62>
 801a14a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a14e:	f8d0 b000 	ldr.w	fp, [r0]
 801a152:	f1bb 0f00 	cmp.w	fp, #0
 801a156:	d01f      	beq.n	801a198 <rcutils_string_map_getn+0x50>
 801a158:	fab1 f481 	clz	r4, r1
 801a15c:	4688      	mov	r8, r1
 801a15e:	0964      	lsrs	r4, r4, #5
 801a160:	b1d1      	cbz	r1, 801a198 <rcutils_string_map_getn+0x50>
 801a162:	f8db 7008 	ldr.w	r7, [fp, #8]
 801a166:	f8db 6000 	ldr.w	r6, [fp]
 801a16a:	b1af      	cbz	r7, 801a198 <rcutils_string_map_getn+0x50>
 801a16c:	4691      	mov	r9, r2
 801a16e:	3e04      	subs	r6, #4
 801a170:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801a174:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801a178:	3401      	adds	r4, #1
 801a17a:	4628      	mov	r0, r5
 801a17c:	b155      	cbz	r5, 801a194 <rcutils_string_map_getn+0x4c>
 801a17e:	f7e6 f8b9 	bl	80002f4 <strlen>
 801a182:	4602      	mov	r2, r0
 801a184:	4629      	mov	r1, r5
 801a186:	4640      	mov	r0, r8
 801a188:	454a      	cmp	r2, r9
 801a18a:	bf38      	it	cc
 801a18c:	464a      	movcc	r2, r9
 801a18e:	f002 fe88 	bl	801cea2 <strncmp>
 801a192:	b120      	cbz	r0, 801a19e <rcutils_string_map_getn+0x56>
 801a194:	42a7      	cmp	r7, r4
 801a196:	d1eb      	bne.n	801a170 <rcutils_string_map_getn+0x28>
 801a198:	2000      	movs	r0, #0
 801a19a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a19e:	f8db 3004 	ldr.w	r3, [fp, #4]
 801a1a2:	f853 000a 	ldr.w	r0, [r3, sl]
 801a1a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1aa:	4770      	bx	lr
 801a1ac:	0000      	movs	r0, r0
	...

0801a1b0 <rmw_get_zero_initialized_context>:
 801a1b0:	b510      	push	{r4, lr}
 801a1b2:	4604      	mov	r4, r0
 801a1b4:	3010      	adds	r0, #16
 801a1b6:	f7f5 fe7b 	bl	800feb0 <rmw_get_zero_initialized_init_options>
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	4620      	mov	r0, r4
 801a1be:	60a3      	str	r3, [r4, #8]
 801a1c0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801a1c2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801a1c4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801a1d0 <rmw_get_zero_initialized_context+0x20>
 801a1c8:	ed84 7b00 	vstr	d7, [r4]
 801a1cc:	bd10      	pop	{r4, pc}
 801a1ce:	bf00      	nop
	...

0801a1d8 <rmw_time_equal>:
 801a1d8:	b4f0      	push	{r4, r5, r6, r7}
 801a1da:	b084      	sub	sp, #16
 801a1dc:	ac04      	add	r4, sp, #16
 801a1de:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	4925      	ldr	r1, [pc, #148]	@ (801a27c <rmw_time_equal+0xa4>)
 801a1e6:	9d01      	ldr	r5, [sp, #4]
 801a1e8:	4610      	mov	r0, r2
 801a1ea:	4299      	cmp	r1, r3
 801a1ec:	f04f 0202 	mov.w	r2, #2
 801a1f0:	9e03      	ldr	r6, [sp, #12]
 801a1f2:	41aa      	sbcs	r2, r5
 801a1f4:	d330      	bcc.n	801a258 <rmw_time_equal+0x80>
 801a1f6:	4c22      	ldr	r4, [pc, #136]	@ (801a280 <rmw_time_equal+0xa8>)
 801a1f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a1fc:	fba3 3204 	umull	r3, r2, r3, r4
 801a200:	fb04 2205 	mla	r2, r4, r5, r2
 801a204:	43dd      	mvns	r5, r3
 801a206:	1a8c      	subs	r4, r1, r2
 801a208:	4285      	cmp	r5, r0
 801a20a:	41b4      	sbcs	r4, r6
 801a20c:	d332      	bcc.n	801a274 <rmw_time_equal+0x9c>
 801a20e:	eb10 0c03 	adds.w	ip, r0, r3
 801a212:	eb42 0106 	adc.w	r1, r2, r6
 801a216:	4819      	ldr	r0, [pc, #100]	@ (801a27c <rmw_time_equal+0xa4>)
 801a218:	2202      	movs	r2, #2
 801a21a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a21c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a21e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801a222:	4298      	cmp	r0, r3
 801a224:	41b2      	sbcs	r2, r6
 801a226:	d31c      	bcc.n	801a262 <rmw_time_equal+0x8a>
 801a228:	4c15      	ldr	r4, [pc, #84]	@ (801a280 <rmw_time_equal+0xa8>)
 801a22a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a22e:	fba3 3204 	umull	r3, r2, r3, r4
 801a232:	fb04 2206 	mla	r2, r4, r6, r2
 801a236:	43de      	mvns	r6, r3
 801a238:	1a84      	subs	r4, r0, r2
 801a23a:	42ae      	cmp	r6, r5
 801a23c:	41bc      	sbcs	r4, r7
 801a23e:	d315      	bcc.n	801a26c <rmw_time_equal+0x94>
 801a240:	195b      	adds	r3, r3, r5
 801a242:	eb42 0207 	adc.w	r2, r2, r7
 801a246:	428a      	cmp	r2, r1
 801a248:	bf08      	it	eq
 801a24a:	4563      	cmpeq	r3, ip
 801a24c:	bf0c      	ite	eq
 801a24e:	2001      	moveq	r0, #1
 801a250:	2000      	movne	r0, #0
 801a252:	b004      	add	sp, #16
 801a254:	bcf0      	pop	{r4, r5, r6, r7}
 801a256:	4770      	bx	lr
 801a258:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a25c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a260:	e7d9      	b.n	801a216 <rmw_time_equal+0x3e>
 801a262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a266:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801a26a:	e7ec      	b.n	801a246 <rmw_time_equal+0x6e>
 801a26c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a270:	4602      	mov	r2, r0
 801a272:	e7e8      	b.n	801a246 <rmw_time_equal+0x6e>
 801a274:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a278:	e7cd      	b.n	801a216 <rmw_time_equal+0x3e>
 801a27a:	bf00      	nop
 801a27c:	25c17d04 	.word	0x25c17d04
 801a280:	3b9aca00 	.word	0x3b9aca00

0801a284 <rmw_time_total_nsec>:
 801a284:	b470      	push	{r4, r5, r6}
 801a286:	b085      	sub	sp, #20
 801a288:	ac04      	add	r4, sp, #16
 801a28a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a28e:	4603      	mov	r3, r0
 801a290:	4913      	ldr	r1, [pc, #76]	@ (801a2e0 <rmw_time_total_nsec+0x5c>)
 801a292:	9d01      	ldr	r5, [sp, #4]
 801a294:	4610      	mov	r0, r2
 801a296:	4299      	cmp	r1, r3
 801a298:	f04f 0202 	mov.w	r2, #2
 801a29c:	9e03      	ldr	r6, [sp, #12]
 801a29e:	41aa      	sbcs	r2, r5
 801a2a0:	d311      	bcc.n	801a2c6 <rmw_time_total_nsec+0x42>
 801a2a2:	4c10      	ldr	r4, [pc, #64]	@ (801a2e4 <rmw_time_total_nsec+0x60>)
 801a2a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a2a8:	fba3 3204 	umull	r3, r2, r3, r4
 801a2ac:	fb04 2205 	mla	r2, r4, r5, r2
 801a2b0:	43dd      	mvns	r5, r3
 801a2b2:	1a8c      	subs	r4, r1, r2
 801a2b4:	4285      	cmp	r5, r0
 801a2b6:	41b4      	sbcs	r4, r6
 801a2b8:	d30c      	bcc.n	801a2d4 <rmw_time_total_nsec+0x50>
 801a2ba:	1818      	adds	r0, r3, r0
 801a2bc:	eb42 0106 	adc.w	r1, r2, r6
 801a2c0:	b005      	add	sp, #20
 801a2c2:	bc70      	pop	{r4, r5, r6}
 801a2c4:	4770      	bx	lr
 801a2c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a2ce:	b005      	add	sp, #20
 801a2d0:	bc70      	pop	{r4, r5, r6}
 801a2d2:	4770      	bx	lr
 801a2d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2d8:	b005      	add	sp, #20
 801a2da:	bc70      	pop	{r4, r5, r6}
 801a2dc:	4770      	bx	lr
 801a2de:	bf00      	nop
 801a2e0:	25c17d04 	.word	0x25c17d04
 801a2e4:	3b9aca00 	.word	0x3b9aca00

0801a2e8 <rmw_get_zero_initialized_message_info>:
 801a2e8:	b510      	push	{r4, lr}
 801a2ea:	4604      	mov	r4, r0
 801a2ec:	2240      	movs	r2, #64	@ 0x40
 801a2ee:	2100      	movs	r1, #0
 801a2f0:	f002 fdc2 	bl	801ce78 <memset>
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	bd10      	pop	{r4, pc}

0801a2f8 <rmw_validate_full_topic_name>:
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	d05d      	beq.n	801a3b8 <rmw_validate_full_topic_name+0xc0>
 801a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a300:	460d      	mov	r5, r1
 801a302:	2900      	cmp	r1, #0
 801a304:	d05a      	beq.n	801a3bc <rmw_validate_full_topic_name+0xc4>
 801a306:	4604      	mov	r4, r0
 801a308:	4616      	mov	r6, r2
 801a30a:	f7e5 fff3 	bl	80002f4 <strlen>
 801a30e:	b150      	cbz	r0, 801a326 <rmw_validate_full_topic_name+0x2e>
 801a310:	7823      	ldrb	r3, [r4, #0]
 801a312:	2b2f      	cmp	r3, #47	@ 0x2f
 801a314:	d00e      	beq.n	801a334 <rmw_validate_full_topic_name+0x3c>
 801a316:	2302      	movs	r3, #2
 801a318:	602b      	str	r3, [r5, #0]
 801a31a:	b146      	cbz	r6, 801a32e <rmw_validate_full_topic_name+0x36>
 801a31c:	2300      	movs	r3, #0
 801a31e:	4618      	mov	r0, r3
 801a320:	6033      	str	r3, [r6, #0]
 801a322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a326:	2301      	movs	r3, #1
 801a328:	602b      	str	r3, [r5, #0]
 801a32a:	2e00      	cmp	r6, #0
 801a32c:	d1f6      	bne.n	801a31c <rmw_validate_full_topic_name+0x24>
 801a32e:	2000      	movs	r0, #0
 801a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a334:	1e43      	subs	r3, r0, #1
 801a336:	5ce2      	ldrb	r2, [r4, r3]
 801a338:	2a2f      	cmp	r2, #47	@ 0x2f
 801a33a:	d041      	beq.n	801a3c0 <rmw_validate_full_topic_name+0xc8>
 801a33c:	1e62      	subs	r2, r4, #1
 801a33e:	f1c4 0e01 	rsb	lr, r4, #1
 801a342:	eb02 0800 	add.w	r8, r2, r0
 801a346:	eb0e 0702 	add.w	r7, lr, r2
 801a34a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a34e:	f023 0120 	bic.w	r1, r3, #32
 801a352:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801a356:	3941      	subs	r1, #65	@ 0x41
 801a358:	2919      	cmp	r1, #25
 801a35a:	d90f      	bls.n	801a37c <rmw_validate_full_topic_name+0x84>
 801a35c:	f1bc 0f0a 	cmp.w	ip, #10
 801a360:	d90c      	bls.n	801a37c <rmw_validate_full_topic_name+0x84>
 801a362:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801a366:	fab3 f383 	clz	r3, r3
 801a36a:	095b      	lsrs	r3, r3, #5
 801a36c:	b933      	cbnz	r3, 801a37c <rmw_validate_full_topic_name+0x84>
 801a36e:	2204      	movs	r2, #4
 801a370:	602a      	str	r2, [r5, #0]
 801a372:	2e00      	cmp	r6, #0
 801a374:	d0db      	beq.n	801a32e <rmw_validate_full_topic_name+0x36>
 801a376:	4618      	mov	r0, r3
 801a378:	6037      	str	r7, [r6, #0]
 801a37a:	e7d2      	b.n	801a322 <rmw_validate_full_topic_name+0x2a>
 801a37c:	4542      	cmp	r2, r8
 801a37e:	d1e2      	bne.n	801a346 <rmw_validate_full_topic_name+0x4e>
 801a380:	2301      	movs	r3, #1
 801a382:	4f1a      	ldr	r7, [pc, #104]	@ (801a3ec <rmw_validate_full_topic_name+0xf4>)
 801a384:	e004      	b.n	801a390 <rmw_validate_full_topic_name+0x98>
 801a386:	4298      	cmp	r0, r3
 801a388:	f104 0401 	add.w	r4, r4, #1
 801a38c:	4613      	mov	r3, r2
 801a38e:	d91c      	bls.n	801a3ca <rmw_validate_full_topic_name+0xd2>
 801a390:	4298      	cmp	r0, r3
 801a392:	f103 0201 	add.w	r2, r3, #1
 801a396:	d0f6      	beq.n	801a386 <rmw_validate_full_topic_name+0x8e>
 801a398:	7821      	ldrb	r1, [r4, #0]
 801a39a:	292f      	cmp	r1, #47	@ 0x2f
 801a39c:	d1f3      	bne.n	801a386 <rmw_validate_full_topic_name+0x8e>
 801a39e:	7861      	ldrb	r1, [r4, #1]
 801a3a0:	292f      	cmp	r1, #47	@ 0x2f
 801a3a2:	d01e      	beq.n	801a3e2 <rmw_validate_full_topic_name+0xea>
 801a3a4:	5dc9      	ldrb	r1, [r1, r7]
 801a3a6:	0749      	lsls	r1, r1, #29
 801a3a8:	d5ed      	bpl.n	801a386 <rmw_validate_full_topic_name+0x8e>
 801a3aa:	2206      	movs	r2, #6
 801a3ac:	602a      	str	r2, [r5, #0]
 801a3ae:	2e00      	cmp	r6, #0
 801a3b0:	d0bd      	beq.n	801a32e <rmw_validate_full_topic_name+0x36>
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	6033      	str	r3, [r6, #0]
 801a3b6:	e7b4      	b.n	801a322 <rmw_validate_full_topic_name+0x2a>
 801a3b8:	200b      	movs	r0, #11
 801a3ba:	4770      	bx	lr
 801a3bc:	200b      	movs	r0, #11
 801a3be:	e7b0      	b.n	801a322 <rmw_validate_full_topic_name+0x2a>
 801a3c0:	2203      	movs	r2, #3
 801a3c2:	602a      	str	r2, [r5, #0]
 801a3c4:	2e00      	cmp	r6, #0
 801a3c6:	d1f4      	bne.n	801a3b2 <rmw_validate_full_topic_name+0xba>
 801a3c8:	e7b1      	b.n	801a32e <rmw_validate_full_topic_name+0x36>
 801a3ca:	28f7      	cmp	r0, #247	@ 0xf7
 801a3cc:	d803      	bhi.n	801a3d6 <rmw_validate_full_topic_name+0xde>
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	602b      	str	r3, [r5, #0]
 801a3d4:	e7a5      	b.n	801a322 <rmw_validate_full_topic_name+0x2a>
 801a3d6:	2307      	movs	r3, #7
 801a3d8:	602b      	str	r3, [r5, #0]
 801a3da:	2e00      	cmp	r6, #0
 801a3dc:	d0a7      	beq.n	801a32e <rmw_validate_full_topic_name+0x36>
 801a3de:	23f6      	movs	r3, #246	@ 0xf6
 801a3e0:	e7e7      	b.n	801a3b2 <rmw_validate_full_topic_name+0xba>
 801a3e2:	2205      	movs	r2, #5
 801a3e4:	602a      	str	r2, [r5, #0]
 801a3e6:	2e00      	cmp	r6, #0
 801a3e8:	d1e3      	bne.n	801a3b2 <rmw_validate_full_topic_name+0xba>
 801a3ea:	e7a0      	b.n	801a32e <rmw_validate_full_topic_name+0x36>
 801a3ec:	0801ecce 	.word	0x0801ecce

0801a3f0 <rmw_validate_namespace_with_size>:
 801a3f0:	2800      	cmp	r0, #0
 801a3f2:	d043      	beq.n	801a47c <rmw_validate_namespace_with_size+0x8c>
 801a3f4:	b570      	push	{r4, r5, r6, lr}
 801a3f6:	4614      	mov	r4, r2
 801a3f8:	b0c2      	sub	sp, #264	@ 0x108
 801a3fa:	b32a      	cbz	r2, 801a448 <rmw_validate_namespace_with_size+0x58>
 801a3fc:	2901      	cmp	r1, #1
 801a3fe:	460d      	mov	r5, r1
 801a400:	461e      	mov	r6, r3
 801a402:	d102      	bne.n	801a40a <rmw_validate_namespace_with_size+0x1a>
 801a404:	7803      	ldrb	r3, [r0, #0]
 801a406:	2b2f      	cmp	r3, #47	@ 0x2f
 801a408:	d012      	beq.n	801a430 <rmw_validate_namespace_with_size+0x40>
 801a40a:	aa01      	add	r2, sp, #4
 801a40c:	4669      	mov	r1, sp
 801a40e:	f7ff ff73 	bl	801a2f8 <rmw_validate_full_topic_name>
 801a412:	b980      	cbnz	r0, 801a436 <rmw_validate_namespace_with_size+0x46>
 801a414:	9a00      	ldr	r2, [sp, #0]
 801a416:	b14a      	cbz	r2, 801a42c <rmw_validate_namespace_with_size+0x3c>
 801a418:	2a07      	cmp	r2, #7
 801a41a:	d007      	beq.n	801a42c <rmw_validate_namespace_with_size+0x3c>
 801a41c:	1e53      	subs	r3, r2, #1
 801a41e:	2b05      	cmp	r3, #5
 801a420:	d82e      	bhi.n	801a480 <rmw_validate_namespace_with_size+0x90>
 801a422:	e8df f003 	tbb	[pc, r3]
 801a426:	1f1c      	.short	0x1f1c
 801a428:	14282522 	.word	0x14282522
 801a42c:	2df5      	cmp	r5, #245	@ 0xf5
 801a42e:	d804      	bhi.n	801a43a <rmw_validate_namespace_with_size+0x4a>
 801a430:	2300      	movs	r3, #0
 801a432:	4618      	mov	r0, r3
 801a434:	6023      	str	r3, [r4, #0]
 801a436:	b042      	add	sp, #264	@ 0x108
 801a438:	bd70      	pop	{r4, r5, r6, pc}
 801a43a:	2307      	movs	r3, #7
 801a43c:	6023      	str	r3, [r4, #0]
 801a43e:	2e00      	cmp	r6, #0
 801a440:	d0f9      	beq.n	801a436 <rmw_validate_namespace_with_size+0x46>
 801a442:	23f4      	movs	r3, #244	@ 0xf4
 801a444:	6033      	str	r3, [r6, #0]
 801a446:	e7f6      	b.n	801a436 <rmw_validate_namespace_with_size+0x46>
 801a448:	200b      	movs	r0, #11
 801a44a:	b042      	add	sp, #264	@ 0x108
 801a44c:	bd70      	pop	{r4, r5, r6, pc}
 801a44e:	2306      	movs	r3, #6
 801a450:	6023      	str	r3, [r4, #0]
 801a452:	2e00      	cmp	r6, #0
 801a454:	d0ef      	beq.n	801a436 <rmw_validate_namespace_with_size+0x46>
 801a456:	9b01      	ldr	r3, [sp, #4]
 801a458:	6033      	str	r3, [r6, #0]
 801a45a:	b042      	add	sp, #264	@ 0x108
 801a45c:	bd70      	pop	{r4, r5, r6, pc}
 801a45e:	2301      	movs	r3, #1
 801a460:	6023      	str	r3, [r4, #0]
 801a462:	e7f6      	b.n	801a452 <rmw_validate_namespace_with_size+0x62>
 801a464:	2302      	movs	r3, #2
 801a466:	6023      	str	r3, [r4, #0]
 801a468:	e7f3      	b.n	801a452 <rmw_validate_namespace_with_size+0x62>
 801a46a:	2303      	movs	r3, #3
 801a46c:	6023      	str	r3, [r4, #0]
 801a46e:	e7f0      	b.n	801a452 <rmw_validate_namespace_with_size+0x62>
 801a470:	2304      	movs	r3, #4
 801a472:	6023      	str	r3, [r4, #0]
 801a474:	e7ed      	b.n	801a452 <rmw_validate_namespace_with_size+0x62>
 801a476:	2305      	movs	r3, #5
 801a478:	6023      	str	r3, [r4, #0]
 801a47a:	e7ea      	b.n	801a452 <rmw_validate_namespace_with_size+0x62>
 801a47c:	200b      	movs	r0, #11
 801a47e:	4770      	bx	lr
 801a480:	4613      	mov	r3, r2
 801a482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a486:	4a03      	ldr	r2, [pc, #12]	@ (801a494 <rmw_validate_namespace_with_size+0xa4>)
 801a488:	a802      	add	r0, sp, #8
 801a48a:	f7ff fcd5 	bl	8019e38 <rcutils_snprintf>
 801a48e:	2001      	movs	r0, #1
 801a490:	e7d1      	b.n	801a436 <rmw_validate_namespace_with_size+0x46>
 801a492:	bf00      	nop
 801a494:	0801e7e4 	.word	0x0801e7e4

0801a498 <rmw_validate_namespace>:
 801a498:	b168      	cbz	r0, 801a4b6 <rmw_validate_namespace+0x1e>
 801a49a:	b570      	push	{r4, r5, r6, lr}
 801a49c:	460d      	mov	r5, r1
 801a49e:	4616      	mov	r6, r2
 801a4a0:	4604      	mov	r4, r0
 801a4a2:	f7e5 ff27 	bl	80002f4 <strlen>
 801a4a6:	4633      	mov	r3, r6
 801a4a8:	4601      	mov	r1, r0
 801a4aa:	462a      	mov	r2, r5
 801a4ac:	4620      	mov	r0, r4
 801a4ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4b2:	f7ff bf9d 	b.w	801a3f0 <rmw_validate_namespace_with_size>
 801a4b6:	200b      	movs	r0, #11
 801a4b8:	4770      	bx	lr
 801a4ba:	bf00      	nop

0801a4bc <rmw_namespace_validation_result_string>:
 801a4bc:	2807      	cmp	r0, #7
 801a4be:	d803      	bhi.n	801a4c8 <rmw_namespace_validation_result_string+0xc>
 801a4c0:	4b02      	ldr	r3, [pc, #8]	@ (801a4cc <rmw_namespace_validation_result_string+0x10>)
 801a4c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a4c6:	4770      	bx	lr
 801a4c8:	4801      	ldr	r0, [pc, #4]	@ (801a4d0 <rmw_namespace_validation_result_string+0x14>)
 801a4ca:	4770      	bx	lr
 801a4cc:	0801e9dc 	.word	0x0801e9dc
 801a4d0:	0801e834 	.word	0x0801e834

0801a4d4 <rmw_validate_node_name>:
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	d042      	beq.n	801a55e <rmw_validate_node_name+0x8a>
 801a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4dc:	460d      	mov	r5, r1
 801a4de:	2900      	cmp	r1, #0
 801a4e0:	d03f      	beq.n	801a562 <rmw_validate_node_name+0x8e>
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	4616      	mov	r6, r2
 801a4e6:	f7e5 ff05 	bl	80002f4 <strlen>
 801a4ea:	b310      	cbz	r0, 801a532 <rmw_validate_node_name+0x5e>
 801a4ec:	1e63      	subs	r3, r4, #1
 801a4ee:	f1c4 0101 	rsb	r1, r4, #1
 801a4f2:	eb03 0800 	add.w	r8, r3, r0
 801a4f6:	18cf      	adds	r7, r1, r3
 801a4f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801a4fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801a500:	f02e 0c20 	bic.w	ip, lr, #32
 801a504:	2a09      	cmp	r2, #9
 801a506:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801a50a:	d905      	bls.n	801a518 <rmw_validate_node_name+0x44>
 801a50c:	f1bc 0f19 	cmp.w	ip, #25
 801a510:	d902      	bls.n	801a518 <rmw_validate_node_name+0x44>
 801a512:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801a516:	d114      	bne.n	801a542 <rmw_validate_node_name+0x6e>
 801a518:	4598      	cmp	r8, r3
 801a51a:	d1ec      	bne.n	801a4f6 <rmw_validate_node_name+0x22>
 801a51c:	7822      	ldrb	r2, [r4, #0]
 801a51e:	4b16      	ldr	r3, [pc, #88]	@ (801a578 <rmw_validate_node_name+0xa4>)
 801a520:	5cd3      	ldrb	r3, [r2, r3]
 801a522:	f013 0304 	ands.w	r3, r3, #4
 801a526:	d113      	bne.n	801a550 <rmw_validate_node_name+0x7c>
 801a528:	28ff      	cmp	r0, #255	@ 0xff
 801a52a:	d81c      	bhi.n	801a566 <rmw_validate_node_name+0x92>
 801a52c:	4618      	mov	r0, r3
 801a52e:	602b      	str	r3, [r5, #0]
 801a530:	e00c      	b.n	801a54c <rmw_validate_node_name+0x78>
 801a532:	2301      	movs	r3, #1
 801a534:	602b      	str	r3, [r5, #0]
 801a536:	b17e      	cbz	r6, 801a558 <rmw_validate_node_name+0x84>
 801a538:	2300      	movs	r3, #0
 801a53a:	4618      	mov	r0, r3
 801a53c:	6033      	str	r3, [r6, #0]
 801a53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a542:	2302      	movs	r3, #2
 801a544:	602b      	str	r3, [r5, #0]
 801a546:	b13e      	cbz	r6, 801a558 <rmw_validate_node_name+0x84>
 801a548:	2000      	movs	r0, #0
 801a54a:	6037      	str	r7, [r6, #0]
 801a54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a550:	2303      	movs	r3, #3
 801a552:	602b      	str	r3, [r5, #0]
 801a554:	2e00      	cmp	r6, #0
 801a556:	d1ef      	bne.n	801a538 <rmw_validate_node_name+0x64>
 801a558:	2000      	movs	r0, #0
 801a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a55e:	200b      	movs	r0, #11
 801a560:	4770      	bx	lr
 801a562:	200b      	movs	r0, #11
 801a564:	e7f2      	b.n	801a54c <rmw_validate_node_name+0x78>
 801a566:	2204      	movs	r2, #4
 801a568:	602a      	str	r2, [r5, #0]
 801a56a:	2e00      	cmp	r6, #0
 801a56c:	d0f4      	beq.n	801a558 <rmw_validate_node_name+0x84>
 801a56e:	22fe      	movs	r2, #254	@ 0xfe
 801a570:	4618      	mov	r0, r3
 801a572:	6032      	str	r2, [r6, #0]
 801a574:	e7ea      	b.n	801a54c <rmw_validate_node_name+0x78>
 801a576:	bf00      	nop
 801a578:	0801ecce 	.word	0x0801ecce

0801a57c <rmw_node_name_validation_result_string>:
 801a57c:	2804      	cmp	r0, #4
 801a57e:	d803      	bhi.n	801a588 <rmw_node_name_validation_result_string+0xc>
 801a580:	4b02      	ldr	r3, [pc, #8]	@ (801a58c <rmw_node_name_validation_result_string+0x10>)
 801a582:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a586:	4770      	bx	lr
 801a588:	4801      	ldr	r0, [pc, #4]	@ (801a590 <rmw_node_name_validation_result_string+0x14>)
 801a58a:	4770      	bx	lr
 801a58c:	0801eae8 	.word	0x0801eae8
 801a590:	0801e9fc 	.word	0x0801e9fc

0801a594 <on_status>:
 801a594:	b082      	sub	sp, #8
 801a596:	b002      	add	sp, #8
 801a598:	4770      	bx	lr
 801a59a:	bf00      	nop

0801a59c <on_topic>:
 801a59c:	4a23      	ldr	r2, [pc, #140]	@ (801a62c <on_topic+0x90>)
 801a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5a2:	6812      	ldr	r2, [r2, #0]
 801a5a4:	b094      	sub	sp, #80	@ 0x50
 801a5a6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a5a8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801a5ac:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a5ae:	9312      	str	r3, [sp, #72]	@ 0x48
 801a5b0:	b3c2      	cbz	r2, 801a624 <on_topic+0x88>
 801a5b2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a5b6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a5ba:	e001      	b.n	801a5c0 <on_topic+0x24>
 801a5bc:	6852      	ldr	r2, [r2, #4]
 801a5be:	b38a      	cbz	r2, 801a624 <on_topic+0x88>
 801a5c0:	6894      	ldr	r4, [r2, #8]
 801a5c2:	8aa3      	ldrh	r3, [r4, #20]
 801a5c4:	428b      	cmp	r3, r1
 801a5c6:	d1f9      	bne.n	801a5bc <on_topic+0x20>
 801a5c8:	7da3      	ldrb	r3, [r4, #22]
 801a5ca:	4283      	cmp	r3, r0
 801a5cc:	d1f6      	bne.n	801a5bc <on_topic+0x20>
 801a5ce:	2248      	movs	r2, #72	@ 0x48
 801a5d0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a5d4:	4668      	mov	r0, sp
 801a5d6:	f002 fd18 	bl	801d00a <memcpy>
 801a5da:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a5de:	4620      	mov	r0, r4
 801a5e0:	cb0c      	ldmia	r3, {r2, r3}
 801a5e2:	f7f6 fc7f 	bl	8010ee4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a5e6:	4607      	mov	r7, r0
 801a5e8:	b1e0      	cbz	r0, 801a624 <on_topic+0x88>
 801a5ea:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a5ee:	462a      	mov	r2, r5
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f108 0110 	add.w	r1, r8, #16
 801a5f6:	f7f7 fbb7 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801a5fa:	b930      	cbnz	r0, 801a60a <on_topic+0x6e>
 801a5fc:	4639      	mov	r1, r7
 801a5fe:	480c      	ldr	r0, [pc, #48]	@ (801a630 <on_topic+0x94>)
 801a600:	b014      	add	sp, #80	@ 0x50
 801a602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a606:	f000 b8bd 	b.w	801a784 <put_memory>
 801a60a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a60e:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801a612:	f7f6 fa65 	bl	8010ae0 <rmw_uros_epoch_nanos>
 801a616:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a61a:	2305      	movs	r3, #5
 801a61c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a620:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a624:	b014      	add	sp, #80	@ 0x50
 801a626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a62a:	bf00      	nop
 801a62c:	2401386c 	.word	0x2401386c
 801a630:	2401385c 	.word	0x2401385c

0801a634 <on_request>:
 801a634:	4824      	ldr	r0, [pc, #144]	@ (801a6c8 <on_request+0x94>)
 801a636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a63a:	6800      	ldr	r0, [r0, #0]
 801a63c:	b094      	sub	sp, #80	@ 0x50
 801a63e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a640:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a644:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a646:	2800      	cmp	r0, #0
 801a648:	d03b      	beq.n	801a6c2 <on_request+0x8e>
 801a64a:	461d      	mov	r5, r3
 801a64c:	e001      	b.n	801a652 <on_request+0x1e>
 801a64e:	6840      	ldr	r0, [r0, #4]
 801a650:	b3b8      	cbz	r0, 801a6c2 <on_request+0x8e>
 801a652:	6884      	ldr	r4, [r0, #8]
 801a654:	8b21      	ldrh	r1, [r4, #24]
 801a656:	4291      	cmp	r1, r2
 801a658:	d1f9      	bne.n	801a64e <on_request+0x1a>
 801a65a:	2248      	movs	r2, #72	@ 0x48
 801a65c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a660:	4668      	mov	r0, sp
 801a662:	f002 fcd2 	bl	801d00a <memcpy>
 801a666:	f104 0320 	add.w	r3, r4, #32
 801a66a:	4620      	mov	r0, r4
 801a66c:	cb0c      	ldmia	r3, {r2, r3}
 801a66e:	f7f6 fc39 	bl	8010ee4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a672:	4680      	mov	r8, r0
 801a674:	b328      	cbz	r0, 801a6c2 <on_request+0x8e>
 801a676:	4630      	mov	r0, r6
 801a678:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a67c:	463a      	mov	r2, r7
 801a67e:	f106 0110 	add.w	r1, r6, #16
 801a682:	f7f7 fb71 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801a686:	b930      	cbnz	r0, 801a696 <on_request+0x62>
 801a688:	4641      	mov	r1, r8
 801a68a:	4810      	ldr	r0, [pc, #64]	@ (801a6cc <on_request+0x98>)
 801a68c:	b014      	add	sp, #80	@ 0x50
 801a68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a692:	f000 b877 	b.w	801a784 <put_memory>
 801a696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a698:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801a69c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a6a0:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a6a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a6ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a6b0:	f7f6 fa16 	bl	8010ae0 <rmw_uros_epoch_nanos>
 801a6b4:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a6b8:	2303      	movs	r3, #3
 801a6ba:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a6be:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a6c2:	b014      	add	sp, #80	@ 0x50
 801a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6c8:	2401383c 	.word	0x2401383c
 801a6cc:	2401385c 	.word	0x2401385c

0801a6d0 <on_reply>:
 801a6d0:	4822      	ldr	r0, [pc, #136]	@ (801a75c <on_reply+0x8c>)
 801a6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6d6:	6800      	ldr	r0, [r0, #0]
 801a6d8:	b094      	sub	sp, #80	@ 0x50
 801a6da:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a6dc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a6e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a6e2:	b3b8      	cbz	r0, 801a754 <on_reply+0x84>
 801a6e4:	461d      	mov	r5, r3
 801a6e6:	e001      	b.n	801a6ec <on_reply+0x1c>
 801a6e8:	6840      	ldr	r0, [r0, #4]
 801a6ea:	b398      	cbz	r0, 801a754 <on_reply+0x84>
 801a6ec:	6884      	ldr	r4, [r0, #8]
 801a6ee:	8b21      	ldrh	r1, [r4, #24]
 801a6f0:	4291      	cmp	r1, r2
 801a6f2:	d1f9      	bne.n	801a6e8 <on_reply+0x18>
 801a6f4:	2248      	movs	r2, #72	@ 0x48
 801a6f6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a6fa:	4668      	mov	r0, sp
 801a6fc:	f002 fc85 	bl	801d00a <memcpy>
 801a700:	f104 0320 	add.w	r3, r4, #32
 801a704:	4620      	mov	r0, r4
 801a706:	cb0c      	ldmia	r3, {r2, r3}
 801a708:	f7f6 fbec 	bl	8010ee4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a70c:	4680      	mov	r8, r0
 801a70e:	b308      	cbz	r0, 801a754 <on_reply+0x84>
 801a710:	4630      	mov	r0, r6
 801a712:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a716:	463a      	mov	r2, r7
 801a718:	f106 0110 	add.w	r1, r6, #16
 801a71c:	f7f7 fb24 	bl	8011d68 <ucdr_deserialize_array_uint8_t>
 801a720:	b930      	cbnz	r0, 801a730 <on_reply+0x60>
 801a722:	4641      	mov	r1, r8
 801a724:	480e      	ldr	r0, [pc, #56]	@ (801a760 <on_reply+0x90>)
 801a726:	b014      	add	sp, #80	@ 0x50
 801a728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a72c:	f000 b82a 	b.w	801a784 <put_memory>
 801a730:	2200      	movs	r2, #0
 801a732:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a736:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a73a:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801a73e:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801a742:	f7f6 f9cd 	bl	8010ae0 <rmw_uros_epoch_nanos>
 801a746:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a74a:	2304      	movs	r3, #4
 801a74c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a750:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a754:	b014      	add	sp, #80	@ 0x50
 801a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a75a:	bf00      	nop
 801a75c:	2400ef4c 	.word	0x2400ef4c
 801a760:	2401385c 	.word	0x2401385c

0801a764 <get_memory>:
 801a764:	4603      	mov	r3, r0
 801a766:	6840      	ldr	r0, [r0, #4]
 801a768:	b158      	cbz	r0, 801a782 <get_memory+0x1e>
 801a76a:	6842      	ldr	r2, [r0, #4]
 801a76c:	605a      	str	r2, [r3, #4]
 801a76e:	b10a      	cbz	r2, 801a774 <get_memory+0x10>
 801a770:	2100      	movs	r1, #0
 801a772:	6011      	str	r1, [r2, #0]
 801a774:	681a      	ldr	r2, [r3, #0]
 801a776:	6042      	str	r2, [r0, #4]
 801a778:	b102      	cbz	r2, 801a77c <get_memory+0x18>
 801a77a:	6010      	str	r0, [r2, #0]
 801a77c:	2200      	movs	r2, #0
 801a77e:	6002      	str	r2, [r0, #0]
 801a780:	6018      	str	r0, [r3, #0]
 801a782:	4770      	bx	lr

0801a784 <put_memory>:
 801a784:	680b      	ldr	r3, [r1, #0]
 801a786:	b10b      	cbz	r3, 801a78c <put_memory+0x8>
 801a788:	684a      	ldr	r2, [r1, #4]
 801a78a:	605a      	str	r2, [r3, #4]
 801a78c:	684a      	ldr	r2, [r1, #4]
 801a78e:	b102      	cbz	r2, 801a792 <put_memory+0xe>
 801a790:	6013      	str	r3, [r2, #0]
 801a792:	6803      	ldr	r3, [r0, #0]
 801a794:	428b      	cmp	r3, r1
 801a796:	6843      	ldr	r3, [r0, #4]
 801a798:	bf08      	it	eq
 801a79a:	6002      	streq	r2, [r0, #0]
 801a79c:	604b      	str	r3, [r1, #4]
 801a79e:	b103      	cbz	r3, 801a7a2 <put_memory+0x1e>
 801a7a0:	6019      	str	r1, [r3, #0]
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	600b      	str	r3, [r1, #0]
 801a7a6:	6041      	str	r1, [r0, #4]
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop

0801a7ac <rmw_destroy_client>:
 801a7ac:	b570      	push	{r4, r5, r6, lr}
 801a7ae:	b128      	cbz	r0, 801a7bc <rmw_destroy_client+0x10>
 801a7b0:	4604      	mov	r4, r0
 801a7b2:	6800      	ldr	r0, [r0, #0]
 801a7b4:	460d      	mov	r5, r1
 801a7b6:	f7f6 fd0f 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 801a7ba:	b910      	cbnz	r0, 801a7c2 <rmw_destroy_client+0x16>
 801a7bc:	2401      	movs	r4, #1
 801a7be:	4620      	mov	r0, r4
 801a7c0:	bd70      	pop	{r4, r5, r6, pc}
 801a7c2:	6863      	ldr	r3, [r4, #4]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d0f9      	beq.n	801a7bc <rmw_destroy_client+0x10>
 801a7c8:	2d00      	cmp	r5, #0
 801a7ca:	d0f7      	beq.n	801a7bc <rmw_destroy_client+0x10>
 801a7cc:	6828      	ldr	r0, [r5, #0]
 801a7ce:	f7f6 fd03 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 801a7d2:	2800      	cmp	r0, #0
 801a7d4:	d0f2      	beq.n	801a7bc <rmw_destroy_client+0x10>
 801a7d6:	686e      	ldr	r6, [r5, #4]
 801a7d8:	2e00      	cmp	r6, #0
 801a7da:	d0ef      	beq.n	801a7bc <rmw_destroy_client+0x10>
 801a7dc:	6864      	ldr	r4, [r4, #4]
 801a7de:	6932      	ldr	r2, [r6, #16]
 801a7e0:	6920      	ldr	r0, [r4, #16]
 801a7e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a7e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7ea:	6819      	ldr	r1, [r3, #0]
 801a7ec:	f7f9 f9f0 	bl	8013bd0 <uxr_buffer_cancel_data>
 801a7f0:	4602      	mov	r2, r0
 801a7f2:	6920      	ldr	r0, [r4, #16]
 801a7f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a7f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a7fc:	f7f6 fc72 	bl	80110e4 <run_xrce_session>
 801a800:	6920      	ldr	r0, [r4, #16]
 801a802:	6932      	ldr	r2, [r6, #16]
 801a804:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a808:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a80c:	6819      	ldr	r1, [r3, #0]
 801a80e:	f7f8 ff97 	bl	8013740 <uxr_buffer_delete_entity>
 801a812:	4602      	mov	r2, r0
 801a814:	6920      	ldr	r0, [r4, #16]
 801a816:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a81a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a81e:	f7f6 fc61 	bl	80110e4 <run_xrce_session>
 801a822:	4603      	mov	r3, r0
 801a824:	4628      	mov	r0, r5
 801a826:	2b00      	cmp	r3, #0
 801a828:	bf14      	ite	ne
 801a82a:	2400      	movne	r4, #0
 801a82c:	2402      	moveq	r4, #2
 801a82e:	f7f6 fb37 	bl	8010ea0 <rmw_uxrce_fini_client_memory>
 801a832:	e7c4      	b.n	801a7be <rmw_destroy_client+0x12>

0801a834 <rmw_get_implementation_identifier>:
 801a834:	4b01      	ldr	r3, [pc, #4]	@ (801a83c <rmw_get_implementation_identifier+0x8>)
 801a836:	6818      	ldr	r0, [r3, #0]
 801a838:	4770      	bx	lr
 801a83a:	bf00      	nop
 801a83c:	0801eb14 	.word	0x0801eb14

0801a840 <create_topic>:
 801a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a844:	4605      	mov	r5, r0
 801a846:	b084      	sub	sp, #16
 801a848:	4822      	ldr	r0, [pc, #136]	@ (801a8d4 <create_topic+0x94>)
 801a84a:	460f      	mov	r7, r1
 801a84c:	4616      	mov	r6, r2
 801a84e:	f7ff ff89 	bl	801a764 <get_memory>
 801a852:	4604      	mov	r4, r0
 801a854:	2800      	cmp	r0, #0
 801a856:	d039      	beq.n	801a8cc <create_topic+0x8c>
 801a858:	692b      	ldr	r3, [r5, #16]
 801a85a:	2102      	movs	r1, #2
 801a85c:	6884      	ldr	r4, [r0, #8]
 801a85e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a862:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801a8dc <create_topic+0x9c>
 801a866:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801a86a:	1c42      	adds	r2, r0, #1
 801a86c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801a870:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801a874:	f7f9 f97c 	bl	8013b70 <uxr_object_id>
 801a878:	223c      	movs	r2, #60	@ 0x3c
 801a87a:	6120      	str	r0, [r4, #16]
 801a87c:	4641      	mov	r1, r8
 801a87e:	4638      	mov	r0, r7
 801a880:	f7f6 fc92 	bl	80111a8 <generate_topic_name>
 801a884:	b1f0      	cbz	r0, 801a8c4 <create_topic+0x84>
 801a886:	4f14      	ldr	r7, [pc, #80]	@ (801a8d8 <create_topic+0x98>)
 801a888:	4630      	mov	r0, r6
 801a88a:	2264      	movs	r2, #100	@ 0x64
 801a88c:	4639      	mov	r1, r7
 801a88e:	f7f6 fc5d 	bl	801114c <generate_type_name>
 801a892:	b1b8      	cbz	r0, 801a8c4 <create_topic+0x84>
 801a894:	6928      	ldr	r0, [r5, #16]
 801a896:	2106      	movs	r1, #6
 801a898:	696b      	ldr	r3, [r5, #20]
 801a89a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801a89e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a8a2:	f8cd 8000 	str.w	r8, [sp]
 801a8a6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a8aa:	6811      	ldr	r1, [r2, #0]
 801a8ac:	6922      	ldr	r2, [r4, #16]
 801a8ae:	f7f8 ffc5 	bl	801383c <uxr_buffer_create_topic_bin>
 801a8b2:	4602      	mov	r2, r0
 801a8b4:	6928      	ldr	r0, [r5, #16]
 801a8b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a8ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a8be:	f7f6 fc11 	bl	80110e4 <run_xrce_session>
 801a8c2:	b918      	cbnz	r0, 801a8cc <create_topic+0x8c>
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	2400      	movs	r4, #0
 801a8c8:	f7f6 fb00 	bl	8010ecc <rmw_uxrce_fini_topic_memory>
 801a8cc:	4620      	mov	r0, r4
 801a8ce:	b004      	add	sp, #16
 801a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8d4:	2401387c 	.word	0x2401387c
 801a8d8:	240138fc 	.word	0x240138fc
 801a8dc:	240138c0 	.word	0x240138c0

0801a8e0 <destroy_topic>:
 801a8e0:	b538      	push	{r3, r4, r5, lr}
 801a8e2:	6985      	ldr	r5, [r0, #24]
 801a8e4:	b1dd      	cbz	r5, 801a91e <destroy_topic+0x3e>
 801a8e6:	4604      	mov	r4, r0
 801a8e8:	6928      	ldr	r0, [r5, #16]
 801a8ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a8ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a8f2:	6922      	ldr	r2, [r4, #16]
 801a8f4:	6819      	ldr	r1, [r3, #0]
 801a8f6:	f7f8 ff23 	bl	8013740 <uxr_buffer_delete_entity>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	6928      	ldr	r0, [r5, #16]
 801a8fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a902:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a906:	f7f6 fbed 	bl	80110e4 <run_xrce_session>
 801a90a:	4603      	mov	r3, r0
 801a90c:	4620      	mov	r0, r4
 801a90e:	2b00      	cmp	r3, #0
 801a910:	bf14      	ite	ne
 801a912:	2400      	movne	r4, #0
 801a914:	2402      	moveq	r4, #2
 801a916:	f7f6 fad9 	bl	8010ecc <rmw_uxrce_fini_topic_memory>
 801a91a:	4620      	mov	r0, r4
 801a91c:	bd38      	pop	{r3, r4, r5, pc}
 801a91e:	2401      	movs	r4, #1
 801a920:	4620      	mov	r0, r4
 801a922:	bd38      	pop	{r3, r4, r5, pc}

0801a924 <rmw_send_request>:
 801a924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a928:	4604      	mov	r4, r0
 801a92a:	6800      	ldr	r0, [r0, #0]
 801a92c:	b08b      	sub	sp, #44	@ 0x2c
 801a92e:	460e      	mov	r6, r1
 801a930:	4615      	mov	r5, r2
 801a932:	b128      	cbz	r0, 801a940 <rmw_send_request+0x1c>
 801a934:	4b21      	ldr	r3, [pc, #132]	@ (801a9bc <rmw_send_request+0x98>)
 801a936:	6819      	ldr	r1, [r3, #0]
 801a938:	f7e5 fcd2 	bl	80002e0 <strcmp>
 801a93c:	2800      	cmp	r0, #0
 801a93e:	d139      	bne.n	801a9b4 <rmw_send_request+0x90>
 801a940:	6864      	ldr	r4, [r4, #4]
 801a942:	2700      	movs	r7, #0
 801a944:	6963      	ldr	r3, [r4, #20]
 801a946:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801a94a:	689b      	ldr	r3, [r3, #8]
 801a94c:	4798      	blx	r3
 801a94e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a952:	4630      	mov	r0, r6
 801a954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a958:	4798      	blx	r3
 801a95a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a95e:	9000      	str	r0, [sp, #0]
 801a960:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a964:	6922      	ldr	r2, [r4, #16]
 801a966:	ab02      	add	r3, sp, #8
 801a968:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a96a:	f7fb f9d1 	bl	8015d10 <uxr_prepare_output_stream>
 801a96e:	e9c5 0700 	strd	r0, r7, [r5]
 801a972:	b198      	cbz	r0, 801a99c <rmw_send_request+0x78>
 801a974:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a978:	a902      	add	r1, sp, #8
 801a97a:	4630      	mov	r0, r6
 801a97c:	4798      	blx	r3
 801a97e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a982:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a986:	2b01      	cmp	r3, #1
 801a988:	d00c      	beq.n	801a9a4 <rmw_send_request+0x80>
 801a98a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a98c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a990:	f7f9 feee 	bl	8014770 <uxr_run_session_until_confirm_delivery>
 801a994:	4638      	mov	r0, r7
 801a996:	b00b      	add	sp, #44	@ 0x2c
 801a998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a99c:	2001      	movs	r0, #1
 801a99e:	b00b      	add	sp, #44	@ 0x2c
 801a9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a9a8:	f7f9 fb28 	bl	8013ffc <uxr_flash_output_streams>
 801a9ac:	4638      	mov	r0, r7
 801a9ae:	b00b      	add	sp, #44	@ 0x2c
 801a9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9b4:	200c      	movs	r0, #12
 801a9b6:	b00b      	add	sp, #44	@ 0x2c
 801a9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9bc:	0801eb14 	.word	0x0801eb14

0801a9c0 <rmw_take_request>:
 801a9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9c4:	4605      	mov	r5, r0
 801a9c6:	6800      	ldr	r0, [r0, #0]
 801a9c8:	b089      	sub	sp, #36	@ 0x24
 801a9ca:	460c      	mov	r4, r1
 801a9cc:	4690      	mov	r8, r2
 801a9ce:	461e      	mov	r6, r3
 801a9d0:	b128      	cbz	r0, 801a9de <rmw_take_request+0x1e>
 801a9d2:	4b28      	ldr	r3, [pc, #160]	@ (801aa74 <rmw_take_request+0xb4>)
 801a9d4:	6819      	ldr	r1, [r3, #0]
 801a9d6:	f7e5 fc83 	bl	80002e0 <strcmp>
 801a9da:	2800      	cmp	r0, #0
 801a9dc:	d146      	bne.n	801aa6c <rmw_take_request+0xac>
 801a9de:	b10e      	cbz	r6, 801a9e4 <rmw_take_request+0x24>
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	7033      	strb	r3, [r6, #0]
 801a9e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a9e8:	f7f6 fafe 	bl	8010fe8 <rmw_uxrce_clean_expired_static_input_buffer>
 801a9ec:	4648      	mov	r0, r9
 801a9ee:	f7f6 fad3 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a9f2:	4607      	mov	r7, r0
 801a9f4:	b3b0      	cbz	r0, 801aa64 <rmw_take_request+0xa4>
 801a9f6:	6885      	ldr	r5, [r0, #8]
 801a9f8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801a9fc:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801aa00:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801aa04:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801aa08:	7423      	strb	r3, [r4, #16]
 801aa0a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801aa0e:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801aa12:	f8a4 2011 	strh.w	r2, [r4, #17]
 801aa16:	74e3      	strb	r3, [r4, #19]
 801aa18:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801aa1c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801aa20:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801aa24:	6161      	str	r1, [r4, #20]
 801aa26:	61a2      	str	r2, [r4, #24]
 801aa28:	61e3      	str	r3, [r4, #28]
 801aa2a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	4798      	blx	r3
 801aa32:	6844      	ldr	r4, [r0, #4]
 801aa34:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801aa38:	f105 0110 	add.w	r1, r5, #16
 801aa3c:	4668      	mov	r0, sp
 801aa3e:	f7f8 fdb3 	bl	80135a8 <ucdr_init_buffer>
 801aa42:	4641      	mov	r1, r8
 801aa44:	68e3      	ldr	r3, [r4, #12]
 801aa46:	4668      	mov	r0, sp
 801aa48:	4798      	blx	r3
 801aa4a:	4639      	mov	r1, r7
 801aa4c:	4604      	mov	r4, r0
 801aa4e:	480a      	ldr	r0, [pc, #40]	@ (801aa78 <rmw_take_request+0xb8>)
 801aa50:	f7ff fe98 	bl	801a784 <put_memory>
 801aa54:	b106      	cbz	r6, 801aa58 <rmw_take_request+0x98>
 801aa56:	7034      	strb	r4, [r6, #0]
 801aa58:	f084 0001 	eor.w	r0, r4, #1
 801aa5c:	b2c0      	uxtb	r0, r0
 801aa5e:	b009      	add	sp, #36	@ 0x24
 801aa60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa64:	2001      	movs	r0, #1
 801aa66:	b009      	add	sp, #36	@ 0x24
 801aa68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa6c:	200c      	movs	r0, #12
 801aa6e:	b009      	add	sp, #36	@ 0x24
 801aa70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa74:	0801eb14 	.word	0x0801eb14
 801aa78:	2401385c 	.word	0x2401385c

0801aa7c <rmw_send_response>:
 801aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa7e:	4605      	mov	r5, r0
 801aa80:	6800      	ldr	r0, [r0, #0]
 801aa82:	b091      	sub	sp, #68	@ 0x44
 801aa84:	460c      	mov	r4, r1
 801aa86:	4616      	mov	r6, r2
 801aa88:	b128      	cbz	r0, 801aa96 <rmw_send_response+0x1a>
 801aa8a:	4b29      	ldr	r3, [pc, #164]	@ (801ab30 <rmw_send_response+0xb4>)
 801aa8c:	6819      	ldr	r1, [r3, #0]
 801aa8e:	f7e5 fc27 	bl	80002e0 <strcmp>
 801aa92:	2800      	cmp	r0, #0
 801aa94:	d141      	bne.n	801ab1a <rmw_send_response+0x9e>
 801aa96:	686d      	ldr	r5, [r5, #4]
 801aa98:	68a1      	ldr	r1, [r4, #8]
 801aa9a:	6860      	ldr	r0, [r4, #4]
 801aa9c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801aa9e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801aaa2:	9307      	str	r3, [sp, #28]
 801aaa4:	4623      	mov	r3, r4
 801aaa6:	9206      	str	r2, [sp, #24]
 801aaa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aaac:	789b      	ldrb	r3, [r3, #2]
 801aaae:	f88d 2017 	strb.w	r2, [sp, #23]
 801aab2:	f88d 3016 	strb.w	r3, [sp, #22]
 801aab6:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801aaba:	68e2      	ldr	r2, [r4, #12]
 801aabc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aac0:	ab02      	add	r3, sp, #8
 801aac2:	696c      	ldr	r4, [r5, #20]
 801aac4:	c307      	stmia	r3!, {r0, r1, r2}
 801aac6:	68e3      	ldr	r3, [r4, #12]
 801aac8:	4798      	blx	r3
 801aaca:	6844      	ldr	r4, [r0, #4]
 801aacc:	4630      	mov	r0, r6
 801aace:	6923      	ldr	r3, [r4, #16]
 801aad0:	4798      	blx	r3
 801aad2:	f100 0318 	add.w	r3, r0, #24
 801aad6:	6938      	ldr	r0, [r7, #16]
 801aad8:	9300      	str	r3, [sp, #0]
 801aada:	ab08      	add	r3, sp, #32
 801aadc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aae0:	692a      	ldr	r2, [r5, #16]
 801aae2:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801aae4:	f7fb f914 	bl	8015d10 <uxr_prepare_output_stream>
 801aae8:	b910      	cbnz	r0, 801aaf0 <rmw_send_response+0x74>
 801aaea:	2001      	movs	r0, #1
 801aaec:	b011      	add	sp, #68	@ 0x44
 801aaee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaf0:	a902      	add	r1, sp, #8
 801aaf2:	a808      	add	r0, sp, #32
 801aaf4:	f7fc f966 	bl	8016dc4 <uxr_serialize_SampleIdentity>
 801aaf8:	68a3      	ldr	r3, [r4, #8]
 801aafa:	a908      	add	r1, sp, #32
 801aafc:	4630      	mov	r0, r6
 801aafe:	4798      	blx	r3
 801ab00:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801ab04:	6938      	ldr	r0, [r7, #16]
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	d00a      	beq.n	801ab20 <rmw_send_response+0xa4>
 801ab0a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801ab0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab10:	f7f9 fe2e 	bl	8014770 <uxr_run_session_until_confirm_delivery>
 801ab14:	2000      	movs	r0, #0
 801ab16:	b011      	add	sp, #68	@ 0x44
 801ab18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab1a:	200c      	movs	r0, #12
 801ab1c:	b011      	add	sp, #68	@ 0x44
 801ab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab24:	f7f9 fa6a 	bl	8013ffc <uxr_flash_output_streams>
 801ab28:	2000      	movs	r0, #0
 801ab2a:	b011      	add	sp, #68	@ 0x44
 801ab2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab2e:	bf00      	nop
 801ab30:	0801eb14 	.word	0x0801eb14

0801ab34 <rmw_take_response>:
 801ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab38:	4604      	mov	r4, r0
 801ab3a:	6800      	ldr	r0, [r0, #0]
 801ab3c:	b088      	sub	sp, #32
 801ab3e:	460f      	mov	r7, r1
 801ab40:	4690      	mov	r8, r2
 801ab42:	461d      	mov	r5, r3
 801ab44:	b120      	cbz	r0, 801ab50 <rmw_take_response+0x1c>
 801ab46:	4b1d      	ldr	r3, [pc, #116]	@ (801abbc <rmw_take_response+0x88>)
 801ab48:	6819      	ldr	r1, [r3, #0]
 801ab4a:	f7e5 fbc9 	bl	80002e0 <strcmp>
 801ab4e:	bb68      	cbnz	r0, 801abac <rmw_take_response+0x78>
 801ab50:	b10d      	cbz	r5, 801ab56 <rmw_take_response+0x22>
 801ab52:	2300      	movs	r3, #0
 801ab54:	702b      	strb	r3, [r5, #0]
 801ab56:	6864      	ldr	r4, [r4, #4]
 801ab58:	f7f6 fa46 	bl	8010fe8 <rmw_uxrce_clean_expired_static_input_buffer>
 801ab5c:	4620      	mov	r0, r4
 801ab5e:	f7f6 fa1b 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ab62:	4606      	mov	r6, r0
 801ab64:	b330      	cbz	r0, 801abb4 <rmw_take_response+0x80>
 801ab66:	6963      	ldr	r3, [r4, #20]
 801ab68:	6884      	ldr	r4, [r0, #8]
 801ab6a:	68db      	ldr	r3, [r3, #12]
 801ab6c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801ab70:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801ab74:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801ab78:	4798      	blx	r3
 801ab7a:	6847      	ldr	r7, [r0, #4]
 801ab7c:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801ab80:	f104 0110 	add.w	r1, r4, #16
 801ab84:	4668      	mov	r0, sp
 801ab86:	f7f8 fd0f 	bl	80135a8 <ucdr_init_buffer>
 801ab8a:	4641      	mov	r1, r8
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	4668      	mov	r0, sp
 801ab90:	4798      	blx	r3
 801ab92:	4631      	mov	r1, r6
 801ab94:	4604      	mov	r4, r0
 801ab96:	480a      	ldr	r0, [pc, #40]	@ (801abc0 <rmw_take_response+0x8c>)
 801ab98:	f7ff fdf4 	bl	801a784 <put_memory>
 801ab9c:	b105      	cbz	r5, 801aba0 <rmw_take_response+0x6c>
 801ab9e:	702c      	strb	r4, [r5, #0]
 801aba0:	f084 0001 	eor.w	r0, r4, #1
 801aba4:	b2c0      	uxtb	r0, r0
 801aba6:	b008      	add	sp, #32
 801aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abac:	200c      	movs	r0, #12
 801abae:	b008      	add	sp, #32
 801abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abb4:	2001      	movs	r0, #1
 801abb6:	b008      	add	sp, #32
 801abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abbc:	0801eb14 	.word	0x0801eb14
 801abc0:	2401385c 	.word	0x2401385c

0801abc4 <rmw_take_with_info>:
 801abc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abc6:	4604      	mov	r4, r0
 801abc8:	6800      	ldr	r0, [r0, #0]
 801abca:	b089      	sub	sp, #36	@ 0x24
 801abcc:	460f      	mov	r7, r1
 801abce:	4615      	mov	r5, r2
 801abd0:	b128      	cbz	r0, 801abde <rmw_take_with_info+0x1a>
 801abd2:	4b24      	ldr	r3, [pc, #144]	@ (801ac64 <rmw_take_with_info+0xa0>)
 801abd4:	6819      	ldr	r1, [r3, #0]
 801abd6:	f7e5 fb83 	bl	80002e0 <strcmp>
 801abda:	2800      	cmp	r0, #0
 801abdc:	d13e      	bne.n	801ac5c <rmw_take_with_info+0x98>
 801abde:	b305      	cbz	r5, 801ac22 <rmw_take_with_info+0x5e>
 801abe0:	2300      	movs	r3, #0
 801abe2:	6864      	ldr	r4, [r4, #4]
 801abe4:	702b      	strb	r3, [r5, #0]
 801abe6:	f7f6 f9ff 	bl	8010fe8 <rmw_uxrce_clean_expired_static_input_buffer>
 801abea:	4620      	mov	r0, r4
 801abec:	f7f6 f9d4 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801abf0:	4606      	mov	r6, r0
 801abf2:	b1f0      	cbz	r0, 801ac32 <rmw_take_with_info+0x6e>
 801abf4:	6881      	ldr	r1, [r0, #8]
 801abf6:	4668      	mov	r0, sp
 801abf8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801abfc:	3110      	adds	r1, #16
 801abfe:	f7f8 fcd3 	bl	80135a8 <ucdr_init_buffer>
 801ac02:	69a3      	ldr	r3, [r4, #24]
 801ac04:	4639      	mov	r1, r7
 801ac06:	4668      	mov	r0, sp
 801ac08:	68db      	ldr	r3, [r3, #12]
 801ac0a:	4798      	blx	r3
 801ac0c:	4604      	mov	r4, r0
 801ac0e:	4631      	mov	r1, r6
 801ac10:	4815      	ldr	r0, [pc, #84]	@ (801ac68 <rmw_take_with_info+0xa4>)
 801ac12:	f7ff fdb7 	bl	801a784 <put_memory>
 801ac16:	702c      	strb	r4, [r5, #0]
 801ac18:	f084 0001 	eor.w	r0, r4, #1
 801ac1c:	b2c0      	uxtb	r0, r0
 801ac1e:	b009      	add	sp, #36	@ 0x24
 801ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac22:	6864      	ldr	r4, [r4, #4]
 801ac24:	f7f6 f9e0 	bl	8010fe8 <rmw_uxrce_clean_expired_static_input_buffer>
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f7f6 f9b5 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ac2e:	4605      	mov	r5, r0
 801ac30:	b910      	cbnz	r0, 801ac38 <rmw_take_with_info+0x74>
 801ac32:	2001      	movs	r0, #1
 801ac34:	b009      	add	sp, #36	@ 0x24
 801ac36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac38:	68a9      	ldr	r1, [r5, #8]
 801ac3a:	4668      	mov	r0, sp
 801ac3c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801ac40:	3110      	adds	r1, #16
 801ac42:	f7f8 fcb1 	bl	80135a8 <ucdr_init_buffer>
 801ac46:	69a3      	ldr	r3, [r4, #24]
 801ac48:	4639      	mov	r1, r7
 801ac4a:	4668      	mov	r0, sp
 801ac4c:	68db      	ldr	r3, [r3, #12]
 801ac4e:	4798      	blx	r3
 801ac50:	4629      	mov	r1, r5
 801ac52:	4604      	mov	r4, r0
 801ac54:	4804      	ldr	r0, [pc, #16]	@ (801ac68 <rmw_take_with_info+0xa4>)
 801ac56:	f7ff fd95 	bl	801a784 <put_memory>
 801ac5a:	e7dd      	b.n	801ac18 <rmw_take_with_info+0x54>
 801ac5c:	200c      	movs	r0, #12
 801ac5e:	b009      	add	sp, #36	@ 0x24
 801ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac62:	bf00      	nop
 801ac64:	0801eb14 	.word	0x0801eb14
 801ac68:	2401385c 	.word	0x2401385c

0801ac6c <rmw_wait>:
 801ac6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac70:	4698      	mov	r8, r3
 801ac72:	ea40 0301 	orr.w	r3, r0, r1
 801ac76:	b089      	sub	sp, #36	@ 0x24
 801ac78:	ea48 0303 	orr.w	r3, r8, r3
 801ac7c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ac7e:	4313      	orrs	r3, r2
 801ac80:	f000 8106 	beq.w	801ae90 <rmw_wait+0x224>
 801ac84:	4605      	mov	r5, r0
 801ac86:	460e      	mov	r6, r1
 801ac88:	4691      	mov	r9, r2
 801ac8a:	b16c      	cbz	r4, 801aca8 <rmw_wait+0x3c>
 801ac8c:	4ba6      	ldr	r3, [pc, #664]	@ (801af28 <rmw_wait+0x2bc>)
 801ac8e:	af04      	add	r7, sp, #16
 801ac90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ac92:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801ac96:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801ac9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ac9e:	f7ff fa9b 	bl	801a1d8 <rmw_time_equal>
 801aca2:	2800      	cmp	r0, #0
 801aca4:	f000 810b 	beq.w	801aebe <rmw_wait+0x252>
 801aca8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801acac:	f7f6 f99c 	bl	8010fe8 <rmw_uxrce_clean_expired_static_input_buffer>
 801acb0:	4b9e      	ldr	r3, [pc, #632]	@ (801af2c <rmw_wait+0x2c0>)
 801acb2:	681c      	ldr	r4, [r3, #0]
 801acb4:	b14c      	cbz	r4, 801acca <rmw_wait+0x5e>
 801acb6:	4623      	mov	r3, r4
 801acb8:	2100      	movs	r1, #0
 801acba:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801acbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801acc2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d1f7      	bne.n	801acba <rmw_wait+0x4e>
 801acca:	f1b9 0f00 	cmp.w	r9, #0
 801acce:	d011      	beq.n	801acf4 <rmw_wait+0x88>
 801acd0:	f8d9 1000 	ldr.w	r1, [r9]
 801acd4:	b171      	cbz	r1, 801acf4 <rmw_wait+0x88>
 801acd6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801acda:	2300      	movs	r3, #0
 801acdc:	2001      	movs	r0, #1
 801acde:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ace2:	3301      	adds	r3, #1
 801ace4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ace6:	4299      	cmp	r1, r3
 801ace8:	6912      	ldr	r2, [r2, #16]
 801acea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801acee:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801acf2:	d1f4      	bne.n	801acde <rmw_wait+0x72>
 801acf4:	f1b8 0f00 	cmp.w	r8, #0
 801acf8:	d011      	beq.n	801ad1e <rmw_wait+0xb2>
 801acfa:	f8d8 1000 	ldr.w	r1, [r8]
 801acfe:	b171      	cbz	r1, 801ad1e <rmw_wait+0xb2>
 801ad00:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801ad04:	2300      	movs	r3, #0
 801ad06:	2001      	movs	r0, #1
 801ad08:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ad0c:	3301      	adds	r3, #1
 801ad0e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ad10:	4299      	cmp	r1, r3
 801ad12:	6912      	ldr	r2, [r2, #16]
 801ad14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad18:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad1c:	d1f4      	bne.n	801ad08 <rmw_wait+0x9c>
 801ad1e:	b185      	cbz	r5, 801ad42 <rmw_wait+0xd6>
 801ad20:	6829      	ldr	r1, [r5, #0]
 801ad22:	b171      	cbz	r1, 801ad42 <rmw_wait+0xd6>
 801ad24:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801ad28:	2300      	movs	r3, #0
 801ad2a:	2001      	movs	r0, #1
 801ad2c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ad30:	3301      	adds	r3, #1
 801ad32:	6a12      	ldr	r2, [r2, #32]
 801ad34:	4299      	cmp	r1, r3
 801ad36:	6912      	ldr	r2, [r2, #16]
 801ad38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad3c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad40:	d1f4      	bne.n	801ad2c <rmw_wait+0xc0>
 801ad42:	b344      	cbz	r4, 801ad96 <rmw_wait+0x12a>
 801ad44:	4622      	mov	r2, r4
 801ad46:	2300      	movs	r3, #0
 801ad48:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801ad4c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801ad50:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801ad54:	440b      	add	r3, r1
 801ad56:	b2db      	uxtb	r3, r3
 801ad58:	2a00      	cmp	r2, #0
 801ad5a:	d1f5      	bne.n	801ad48 <rmw_wait+0xdc>
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d05f      	beq.n	801ae20 <rmw_wait+0x1b4>
 801ad60:	1c7a      	adds	r2, r7, #1
 801ad62:	d00d      	beq.n	801ad80 <rmw_wait+0x114>
 801ad64:	ee07 7a90 	vmov	s15, r7
 801ad68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ad6c:	ee07 3a90 	vmov	s15, r3
 801ad70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ad78:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801ad7c:	ee17 7a90 	vmov	r7, s15
 801ad80:	68a0      	ldr	r0, [r4, #8]
 801ad82:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801ad86:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	f040 808d 	bne.w	801aeaa <rmw_wait+0x23e>
 801ad90:	6864      	ldr	r4, [r4, #4]
 801ad92:	2c00      	cmp	r4, #0
 801ad94:	d1f4      	bne.n	801ad80 <rmw_wait+0x114>
 801ad96:	f1b9 0f00 	cmp.w	r9, #0
 801ad9a:	f000 80a1 	beq.w	801aee0 <rmw_wait+0x274>
 801ad9e:	f8d9 7000 	ldr.w	r7, [r9]
 801ada2:	2f00      	cmp	r7, #0
 801ada4:	f000 80a4 	beq.w	801aef0 <rmw_wait+0x284>
 801ada8:	2400      	movs	r4, #0
 801adaa:	4627      	mov	r7, r4
 801adac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801adb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801adb4:	f7f6 f8f0 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801adb8:	2800      	cmp	r0, #0
 801adba:	d03b      	beq.n	801ae34 <rmw_wait+0x1c8>
 801adbc:	3401      	adds	r4, #1
 801adbe:	f8d9 3000 	ldr.w	r3, [r9]
 801adc2:	2701      	movs	r7, #1
 801adc4:	42a3      	cmp	r3, r4
 801adc6:	d8f1      	bhi.n	801adac <rmw_wait+0x140>
 801adc8:	2701      	movs	r7, #1
 801adca:	f1b8 0f00 	cmp.w	r8, #0
 801adce:	d010      	beq.n	801adf2 <rmw_wait+0x186>
 801add0:	f8d8 3000 	ldr.w	r3, [r8]
 801add4:	b16b      	cbz	r3, 801adf2 <rmw_wait+0x186>
 801add6:	2400      	movs	r4, #0
 801add8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801addc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ade0:	f7f6 f8da 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ade4:	b370      	cbz	r0, 801ae44 <rmw_wait+0x1d8>
 801ade6:	3401      	adds	r4, #1
 801ade8:	f8d8 3000 	ldr.w	r3, [r8]
 801adec:	2701      	movs	r7, #1
 801adee:	42a3      	cmp	r3, r4
 801adf0:	d8f2      	bhi.n	801add8 <rmw_wait+0x16c>
 801adf2:	2d00      	cmp	r5, #0
 801adf4:	d035      	beq.n	801ae62 <rmw_wait+0x1f6>
 801adf6:	682b      	ldr	r3, [r5, #0]
 801adf8:	b39b      	cbz	r3, 801ae62 <rmw_wait+0x1f6>
 801adfa:	2400      	movs	r4, #0
 801adfc:	686b      	ldr	r3, [r5, #4]
 801adfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae02:	f7f6 f8c9 	bl	8010f98 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ae06:	b328      	cbz	r0, 801ae54 <rmw_wait+0x1e8>
 801ae08:	3401      	adds	r4, #1
 801ae0a:	682b      	ldr	r3, [r5, #0]
 801ae0c:	2701      	movs	r7, #1
 801ae0e:	42a3      	cmp	r3, r4
 801ae10:	d8f4      	bhi.n	801adfc <rmw_wait+0x190>
 801ae12:	2e00      	cmp	r6, #0
 801ae14:	d03c      	beq.n	801ae90 <rmw_wait+0x224>
 801ae16:	6834      	ldr	r4, [r6, #0]
 801ae18:	2c00      	cmp	r4, #0
 801ae1a:	d039      	beq.n	801ae90 <rmw_wait+0x224>
 801ae1c:	2701      	movs	r7, #1
 801ae1e:	e023      	b.n	801ae68 <rmw_wait+0x1fc>
 801ae20:	68a0      	ldr	r0, [r4, #8]
 801ae22:	2100      	movs	r1, #0
 801ae24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ae28:	f7f9 fc68 	bl	80146fc <uxr_run_session_timeout>
 801ae2c:	6864      	ldr	r4, [r4, #4]
 801ae2e:	2c00      	cmp	r4, #0
 801ae30:	d1f6      	bne.n	801ae20 <rmw_wait+0x1b4>
 801ae32:	e7b0      	b.n	801ad96 <rmw_wait+0x12a>
 801ae34:	e9d9 3200 	ldrd	r3, r2, [r9]
 801ae38:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae3c:	3401      	adds	r4, #1
 801ae3e:	42a3      	cmp	r3, r4
 801ae40:	d8b4      	bhi.n	801adac <rmw_wait+0x140>
 801ae42:	e7c2      	b.n	801adca <rmw_wait+0x15e>
 801ae44:	e9d8 3200 	ldrd	r3, r2, [r8]
 801ae48:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae4c:	3401      	adds	r4, #1
 801ae4e:	429c      	cmp	r4, r3
 801ae50:	d3c2      	bcc.n	801add8 <rmw_wait+0x16c>
 801ae52:	e7ce      	b.n	801adf2 <rmw_wait+0x186>
 801ae54:	e9d5 3200 	ldrd	r3, r2, [r5]
 801ae58:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae5c:	3401      	adds	r4, #1
 801ae5e:	42a3      	cmp	r3, r4
 801ae60:	d8cc      	bhi.n	801adfc <rmw_wait+0x190>
 801ae62:	b1a6      	cbz	r6, 801ae8e <rmw_wait+0x222>
 801ae64:	6834      	ldr	r4, [r6, #0]
 801ae66:	b194      	cbz	r4, 801ae8e <rmw_wait+0x222>
 801ae68:	2300      	movs	r3, #0
 801ae6a:	461d      	mov	r5, r3
 801ae6c:	e004      	b.n	801ae78 <rmw_wait+0x20c>
 801ae6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801ae72:	3301      	adds	r3, #1
 801ae74:	42a3      	cmp	r3, r4
 801ae76:	d00a      	beq.n	801ae8e <rmw_wait+0x222>
 801ae78:	6870      	ldr	r0, [r6, #4]
 801ae7a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801ae7e:	7c0a      	ldrb	r2, [r1, #16]
 801ae80:	2a00      	cmp	r2, #0
 801ae82:	d0f4      	beq.n	801ae6e <rmw_wait+0x202>
 801ae84:	3301      	adds	r3, #1
 801ae86:	4617      	mov	r7, r2
 801ae88:	740d      	strb	r5, [r1, #16]
 801ae8a:	42a3      	cmp	r3, r4
 801ae8c:	d1f4      	bne.n	801ae78 <rmw_wait+0x20c>
 801ae8e:	b147      	cbz	r7, 801aea2 <rmw_wait+0x236>
 801ae90:	2000      	movs	r0, #0
 801ae92:	b009      	add	sp, #36	@ 0x24
 801ae94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae98:	b11e      	cbz	r6, 801aea2 <rmw_wait+0x236>
 801ae9a:	6834      	ldr	r4, [r6, #0]
 801ae9c:	462f      	mov	r7, r5
 801ae9e:	2c00      	cmp	r4, #0
 801aea0:	d1e2      	bne.n	801ae68 <rmw_wait+0x1fc>
 801aea2:	2002      	movs	r0, #2
 801aea4:	b009      	add	sp, #36	@ 0x24
 801aea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aeaa:	4639      	mov	r1, r7
 801aeac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aeb0:	f7f9 fc3e 	bl	8014730 <uxr_run_session_until_data>
 801aeb4:	6864      	ldr	r4, [r4, #4]
 801aeb6:	2c00      	cmp	r4, #0
 801aeb8:	f47f af62 	bne.w	801ad80 <rmw_wait+0x114>
 801aebc:	e76b      	b.n	801ad96 <rmw_wait+0x12a>
 801aebe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801aec2:	f7ff f9df 	bl	801a284 <rmw_time_total_nsec>
 801aec6:	2300      	movs	r3, #0
 801aec8:	4a19      	ldr	r2, [pc, #100]	@ (801af30 <rmw_wait+0x2c4>)
 801aeca:	f7e5 fac1 	bl	8000450 <__aeabi_uldivmod>
 801aece:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801aed2:	4607      	mov	r7, r0
 801aed4:	f171 0300 	sbcs.w	r3, r1, #0
 801aed8:	bfa8      	it	ge
 801aeda:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801aede:	e6e5      	b.n	801acac <rmw_wait+0x40>
 801aee0:	f1b8 0f00 	cmp.w	r8, #0
 801aee4:	d00f      	beq.n	801af06 <rmw_wait+0x29a>
 801aee6:	f8d8 3000 	ldr.w	r3, [r8]
 801aeea:	b193      	cbz	r3, 801af12 <rmw_wait+0x2a6>
 801aeec:	464f      	mov	r7, r9
 801aeee:	e772      	b.n	801add6 <rmw_wait+0x16a>
 801aef0:	f1b8 0f00 	cmp.w	r8, #0
 801aef4:	d007      	beq.n	801af06 <rmw_wait+0x29a>
 801aef6:	f8d8 3000 	ldr.w	r3, [r8]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	f47f af6b 	bne.w	801add6 <rmw_wait+0x16a>
 801af00:	b155      	cbz	r5, 801af18 <rmw_wait+0x2ac>
 801af02:	461f      	mov	r7, r3
 801af04:	e777      	b.n	801adf6 <rmw_wait+0x18a>
 801af06:	2d00      	cmp	r5, #0
 801af08:	d0c6      	beq.n	801ae98 <rmw_wait+0x22c>
 801af0a:	682b      	ldr	r3, [r5, #0]
 801af0c:	b143      	cbz	r3, 801af20 <rmw_wait+0x2b4>
 801af0e:	4647      	mov	r7, r8
 801af10:	e773      	b.n	801adfa <rmw_wait+0x18e>
 801af12:	b10d      	cbz	r5, 801af18 <rmw_wait+0x2ac>
 801af14:	464f      	mov	r7, r9
 801af16:	e76e      	b.n	801adf6 <rmw_wait+0x18a>
 801af18:	462f      	mov	r7, r5
 801af1a:	2e00      	cmp	r6, #0
 801af1c:	d1a2      	bne.n	801ae64 <rmw_wait+0x1f8>
 801af1e:	e7c0      	b.n	801aea2 <rmw_wait+0x236>
 801af20:	4647      	mov	r7, r8
 801af22:	2e00      	cmp	r6, #0
 801af24:	d19e      	bne.n	801ae64 <rmw_wait+0x1f8>
 801af26:	e7bc      	b.n	801aea2 <rmw_wait+0x236>
 801af28:	0801dd48 	.word	0x0801dd48
 801af2c:	2401384c 	.word	0x2401384c
 801af30:	000f4240 	.word	0x000f4240

0801af34 <rmw_create_wait_set>:
 801af34:	b508      	push	{r3, lr}
 801af36:	4803      	ldr	r0, [pc, #12]	@ (801af44 <rmw_create_wait_set+0x10>)
 801af38:	f7ff fc14 	bl	801a764 <get_memory>
 801af3c:	b108      	cbz	r0, 801af42 <rmw_create_wait_set+0xe>
 801af3e:	6880      	ldr	r0, [r0, #8]
 801af40:	3010      	adds	r0, #16
 801af42:	bd08      	pop	{r3, pc}
 801af44:	2401388c 	.word	0x2401388c

0801af48 <rmw_destroy_wait_set>:
 801af48:	b508      	push	{r3, lr}
 801af4a:	4b08      	ldr	r3, [pc, #32]	@ (801af6c <rmw_destroy_wait_set+0x24>)
 801af4c:	6819      	ldr	r1, [r3, #0]
 801af4e:	b911      	cbnz	r1, 801af56 <rmw_destroy_wait_set+0xe>
 801af50:	e00a      	b.n	801af68 <rmw_destroy_wait_set+0x20>
 801af52:	6849      	ldr	r1, [r1, #4]
 801af54:	b141      	cbz	r1, 801af68 <rmw_destroy_wait_set+0x20>
 801af56:	688b      	ldr	r3, [r1, #8]
 801af58:	3310      	adds	r3, #16
 801af5a:	4298      	cmp	r0, r3
 801af5c:	d1f9      	bne.n	801af52 <rmw_destroy_wait_set+0xa>
 801af5e:	4803      	ldr	r0, [pc, #12]	@ (801af6c <rmw_destroy_wait_set+0x24>)
 801af60:	f7ff fc10 	bl	801a784 <put_memory>
 801af64:	2000      	movs	r0, #0
 801af66:	bd08      	pop	{r3, pc}
 801af68:	2001      	movs	r0, #1
 801af6a:	bd08      	pop	{r3, pc}
 801af6c:	2401388c 	.word	0x2401388c

0801af70 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af74:	6805      	ldr	r5, [r0, #0]
 801af76:	4604      	mov	r4, r0
 801af78:	460e      	mov	r6, r1
 801af7a:	4628      	mov	r0, r5
 801af7c:	f7e5 f9b0 	bl	80002e0 <strcmp>
 801af80:	b1c8      	cbz	r0, 801afb6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801af82:	4b11      	ldr	r3, [pc, #68]	@ (801afc8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	429d      	cmp	r5, r3
 801af88:	d112      	bne.n	801afb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801af8a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801af8e:	f8d8 4000 	ldr.w	r4, [r8]
 801af92:	b16c      	cbz	r4, 801afb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801af94:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801af98:	2700      	movs	r7, #0
 801af9a:	3d04      	subs	r5, #4
 801af9c:	4631      	mov	r1, r6
 801af9e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801afa2:	f7e5 f99d 	bl	80002e0 <strcmp>
 801afa6:	00bb      	lsls	r3, r7, #2
 801afa8:	b140      	cbz	r0, 801afbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801afaa:	3701      	adds	r7, #1
 801afac:	42bc      	cmp	r4, r7
 801afae:	d1f5      	bne.n	801af9c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801afb0:	2000      	movs	r0, #0
 801afb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afb6:	4620      	mov	r0, r4
 801afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801afc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afc4:	58d3      	ldr	r3, [r2, r3]
 801afc6:	4718      	bx	r3
 801afc8:	24000678 	.word	0x24000678

0801afcc <sensor_msgs__msg__Imu__init>:
 801afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afd0:	4605      	mov	r5, r0
 801afd2:	b3c0      	cbz	r0, 801b046 <sensor_msgs__msg__Imu__init+0x7a>
 801afd4:	f000 f894 	bl	801b100 <std_msgs__msg__Header__init>
 801afd8:	4604      	mov	r4, r0
 801afda:	b310      	cbz	r0, 801b022 <sensor_msgs__msg__Imu__init+0x56>
 801afdc:	f105 0618 	add.w	r6, r5, #24
 801afe0:	4630      	mov	r0, r6
 801afe2:	f000 f8c3 	bl	801b16c <geometry_msgs__msg__Quaternion__init>
 801afe6:	4604      	mov	r4, r0
 801afe8:	2800      	cmp	r0, #0
 801afea:	d040      	beq.n	801b06e <sensor_msgs__msg__Imu__init+0xa2>
 801afec:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801aff0:	4638      	mov	r0, r7
 801aff2:	f000 f8cd 	bl	801b190 <geometry_msgs__msg__Vector3__init>
 801aff6:	4604      	mov	r4, r0
 801aff8:	b348      	cbz	r0, 801b04e <sensor_msgs__msg__Imu__init+0x82>
 801affa:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801affe:	4640      	mov	r0, r8
 801b000:	f000 f8c6 	bl	801b190 <geometry_msgs__msg__Vector3__init>
 801b004:	4604      	mov	r4, r0
 801b006:	b9d8      	cbnz	r0, 801b040 <sensor_msgs__msg__Imu__init+0x74>
 801b008:	4628      	mov	r0, r5
 801b00a:	f000 f89d 	bl	801b148 <std_msgs__msg__Header__fini>
 801b00e:	4630      	mov	r0, r6
 801b010:	f000 f8bc 	bl	801b18c <geometry_msgs__msg__Quaternion__fini>
 801b014:	4638      	mov	r0, r7
 801b016:	f000 f8bf 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b01a:	4640      	mov	r0, r8
 801b01c:	f000 f8bc 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b020:	e00e      	b.n	801b040 <sensor_msgs__msg__Imu__init+0x74>
 801b022:	4628      	mov	r0, r5
 801b024:	f000 f890 	bl	801b148 <std_msgs__msg__Header__fini>
 801b028:	f105 0018 	add.w	r0, r5, #24
 801b02c:	f000 f8ae 	bl	801b18c <geometry_msgs__msg__Quaternion__fini>
 801b030:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801b034:	f000 f8b0 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b038:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801b03c:	f000 f8ac 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b040:	4620      	mov	r0, r4
 801b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b046:	4604      	mov	r4, r0
 801b048:	4620      	mov	r0, r4
 801b04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b04e:	4628      	mov	r0, r5
 801b050:	f000 f87a 	bl	801b148 <std_msgs__msg__Header__fini>
 801b054:	4630      	mov	r0, r6
 801b056:	f000 f899 	bl	801b18c <geometry_msgs__msg__Quaternion__fini>
 801b05a:	4638      	mov	r0, r7
 801b05c:	f000 f89c 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b060:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801b064:	f000 f898 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b068:	4620      	mov	r0, r4
 801b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b06e:	4628      	mov	r0, r5
 801b070:	f000 f86a 	bl	801b148 <std_msgs__msg__Header__fini>
 801b074:	4630      	mov	r0, r6
 801b076:	e7d9      	b.n	801b02c <sensor_msgs__msg__Imu__init+0x60>

0801b078 <sensor_msgs__msg__Imu__fini>:
 801b078:	b188      	cbz	r0, 801b09e <sensor_msgs__msg__Imu__fini+0x26>
 801b07a:	b510      	push	{r4, lr}
 801b07c:	4604      	mov	r4, r0
 801b07e:	f000 f863 	bl	801b148 <std_msgs__msg__Header__fini>
 801b082:	f104 0018 	add.w	r0, r4, #24
 801b086:	f000 f881 	bl	801b18c <geometry_msgs__msg__Quaternion__fini>
 801b08a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801b08e:	f000 f883 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b092:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801b096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b09a:	f000 b87d 	b.w	801b198 <geometry_msgs__msg__Vector3__fini>
 801b09e:	4770      	bx	lr

0801b0a0 <sensor_msgs__msg__MagneticField__init>:
 801b0a0:	b570      	push	{r4, r5, r6, lr}
 801b0a2:	4605      	mov	r5, r0
 801b0a4:	b1a8      	cbz	r0, 801b0d2 <sensor_msgs__msg__MagneticField__init+0x32>
 801b0a6:	f000 f82b 	bl	801b100 <std_msgs__msg__Header__init>
 801b0aa:	4604      	mov	r4, r0
 801b0ac:	b140      	cbz	r0, 801b0c0 <sensor_msgs__msg__MagneticField__init+0x20>
 801b0ae:	f105 0618 	add.w	r6, r5, #24
 801b0b2:	4630      	mov	r0, r6
 801b0b4:	f000 f86c 	bl	801b190 <geometry_msgs__msg__Vector3__init>
 801b0b8:	4604      	mov	r4, r0
 801b0ba:	b168      	cbz	r0, 801b0d8 <sensor_msgs__msg__MagneticField__init+0x38>
 801b0bc:	4620      	mov	r0, r4
 801b0be:	bd70      	pop	{r4, r5, r6, pc}
 801b0c0:	4628      	mov	r0, r5
 801b0c2:	f000 f841 	bl	801b148 <std_msgs__msg__Header__fini>
 801b0c6:	f105 0018 	add.w	r0, r5, #24
 801b0ca:	f000 f865 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	bd70      	pop	{r4, r5, r6, pc}
 801b0d2:	4604      	mov	r4, r0
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	bd70      	pop	{r4, r5, r6, pc}
 801b0d8:	4628      	mov	r0, r5
 801b0da:	f000 f835 	bl	801b148 <std_msgs__msg__Header__fini>
 801b0de:	4630      	mov	r0, r6
 801b0e0:	f000 f85a 	bl	801b198 <geometry_msgs__msg__Vector3__fini>
 801b0e4:	e7ea      	b.n	801b0bc <sensor_msgs__msg__MagneticField__init+0x1c>
 801b0e6:	bf00      	nop

0801b0e8 <sensor_msgs__msg__MagneticField__fini>:
 801b0e8:	b148      	cbz	r0, 801b0fe <sensor_msgs__msg__MagneticField__fini+0x16>
 801b0ea:	b510      	push	{r4, lr}
 801b0ec:	4604      	mov	r4, r0
 801b0ee:	f000 f82b 	bl	801b148 <std_msgs__msg__Header__fini>
 801b0f2:	f104 0018 	add.w	r0, r4, #24
 801b0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0fa:	f000 b84d 	b.w	801b198 <geometry_msgs__msg__Vector3__fini>
 801b0fe:	4770      	bx	lr

0801b100 <std_msgs__msg__Header__init>:
 801b100:	b570      	push	{r4, r5, r6, lr}
 801b102:	4605      	mov	r5, r0
 801b104:	b1a8      	cbz	r0, 801b132 <std_msgs__msg__Header__init+0x32>
 801b106:	f000 f82b 	bl	801b160 <builtin_interfaces__msg__Time__init>
 801b10a:	4604      	mov	r4, r0
 801b10c:	b140      	cbz	r0, 801b120 <std_msgs__msg__Header__init+0x20>
 801b10e:	f105 0608 	add.w	r6, r5, #8
 801b112:	4630      	mov	r0, r6
 801b114:	f001 f968 	bl	801c3e8 <rosidl_runtime_c__String__init>
 801b118:	4604      	mov	r4, r0
 801b11a:	b168      	cbz	r0, 801b138 <std_msgs__msg__Header__init+0x38>
 801b11c:	4620      	mov	r0, r4
 801b11e:	bd70      	pop	{r4, r5, r6, pc}
 801b120:	4628      	mov	r0, r5
 801b122:	f000 f821 	bl	801b168 <builtin_interfaces__msg__Time__fini>
 801b126:	f105 0008 	add.w	r0, r5, #8
 801b12a:	f001 f973 	bl	801c414 <rosidl_runtime_c__String__fini>
 801b12e:	4620      	mov	r0, r4
 801b130:	bd70      	pop	{r4, r5, r6, pc}
 801b132:	4604      	mov	r4, r0
 801b134:	4620      	mov	r0, r4
 801b136:	bd70      	pop	{r4, r5, r6, pc}
 801b138:	4628      	mov	r0, r5
 801b13a:	f000 f815 	bl	801b168 <builtin_interfaces__msg__Time__fini>
 801b13e:	4630      	mov	r0, r6
 801b140:	f001 f968 	bl	801c414 <rosidl_runtime_c__String__fini>
 801b144:	e7ea      	b.n	801b11c <std_msgs__msg__Header__init+0x1c>
 801b146:	bf00      	nop

0801b148 <std_msgs__msg__Header__fini>:
 801b148:	b148      	cbz	r0, 801b15e <std_msgs__msg__Header__fini+0x16>
 801b14a:	b510      	push	{r4, lr}
 801b14c:	4604      	mov	r4, r0
 801b14e:	f000 f80b 	bl	801b168 <builtin_interfaces__msg__Time__fini>
 801b152:	f104 0008 	add.w	r0, r4, #8
 801b156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b15a:	f001 b95b 	b.w	801c414 <rosidl_runtime_c__String__fini>
 801b15e:	4770      	bx	lr

0801b160 <builtin_interfaces__msg__Time__init>:
 801b160:	3800      	subs	r0, #0
 801b162:	bf18      	it	ne
 801b164:	2001      	movne	r0, #1
 801b166:	4770      	bx	lr

0801b168 <builtin_interfaces__msg__Time__fini>:
 801b168:	4770      	bx	lr
 801b16a:	bf00      	nop

0801b16c <geometry_msgs__msg__Quaternion__init>:
 801b16c:	b160      	cbz	r0, 801b188 <geometry_msgs__msg__Quaternion__init+0x1c>
 801b16e:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801b172:	2200      	movs	r2, #0
 801b174:	2300      	movs	r3, #0
 801b176:	ed80 7b06 	vstr	d7, [r0, #24]
 801b17a:	e9c0 2300 	strd	r2, r3, [r0]
 801b17e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b182:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b186:	2001      	movs	r0, #1
 801b188:	4770      	bx	lr
 801b18a:	bf00      	nop

0801b18c <geometry_msgs__msg__Quaternion__fini>:
 801b18c:	4770      	bx	lr
 801b18e:	bf00      	nop

0801b190 <geometry_msgs__msg__Vector3__init>:
 801b190:	3800      	subs	r0, #0
 801b192:	bf18      	it	ne
 801b194:	2001      	movne	r0, #1
 801b196:	4770      	bx	lr

0801b198 <geometry_msgs__msg__Vector3__fini>:
 801b198:	4770      	bx	lr
 801b19a:	bf00      	nop

0801b19c <ucdr_serialize_string>:
 801b19c:	b510      	push	{r4, lr}
 801b19e:	b082      	sub	sp, #8
 801b1a0:	4604      	mov	r4, r0
 801b1a2:	4608      	mov	r0, r1
 801b1a4:	9101      	str	r1, [sp, #4]
 801b1a6:	f7e5 f8a5 	bl	80002f4 <strlen>
 801b1aa:	4602      	mov	r2, r0
 801b1ac:	9901      	ldr	r1, [sp, #4]
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	3201      	adds	r2, #1
 801b1b2:	b002      	add	sp, #8
 801b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1b8:	f7f8 ba6a 	b.w	8013690 <ucdr_serialize_sequence_char>

0801b1bc <ucdr_deserialize_string>:
 801b1bc:	b500      	push	{lr}
 801b1be:	b083      	sub	sp, #12
 801b1c0:	ab01      	add	r3, sp, #4
 801b1c2:	f7f8 fa77 	bl	80136b4 <ucdr_deserialize_sequence_char>
 801b1c6:	b003      	add	sp, #12
 801b1c8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1cc <uxr_init_input_best_effort_stream>:
 801b1cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1d0:	8003      	strh	r3, [r0, #0]
 801b1d2:	4770      	bx	lr

0801b1d4 <uxr_reset_input_best_effort_stream>:
 801b1d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1d8:	8003      	strh	r3, [r0, #0]
 801b1da:	4770      	bx	lr

0801b1dc <uxr_receive_best_effort_message>:
 801b1dc:	b538      	push	{r3, r4, r5, lr}
 801b1de:	4604      	mov	r4, r0
 801b1e0:	8800      	ldrh	r0, [r0, #0]
 801b1e2:	460d      	mov	r5, r1
 801b1e4:	f000 fd44 	bl	801bc70 <uxr_seq_num_cmp>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	0fc0      	lsrs	r0, r0, #31
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	bfb8      	it	lt
 801b1f0:	8025      	strhlt	r5, [r4, #0]
 801b1f2:	bd38      	pop	{r3, r4, r5, pc}

0801b1f4 <on_full_input_buffer>:
 801b1f4:	b570      	push	{r4, r5, r6, lr}
 801b1f6:	460c      	mov	r4, r1
 801b1f8:	4605      	mov	r5, r0
 801b1fa:	8908      	ldrh	r0, [r1, #8]
 801b1fc:	682b      	ldr	r3, [r5, #0]
 801b1fe:	7d26      	ldrb	r6, [r4, #20]
 801b200:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b204:	fbb2 f2f0 	udiv	r2, r2, r0
 801b208:	eba3 0c01 	sub.w	ip, r3, r1
 801b20c:	fbbc fcf2 	udiv	ip, ip, r2
 801b210:	f10c 0c01 	add.w	ip, ip, #1
 801b214:	fa1f f38c 	uxth.w	r3, ip
 801b218:	fbb3 fcf0 	udiv	ip, r3, r0
 801b21c:	fb00 331c 	mls	r3, r0, ip, r3
 801b220:	b29b      	uxth	r3, r3
 801b222:	fb02 f303 	mul.w	r3, r2, r3
 801b226:	1d18      	adds	r0, r3, #4
 801b228:	4408      	add	r0, r1
 801b22a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b22e:	b116      	cbz	r6, 801b236 <on_full_input_buffer+0x42>
 801b230:	2600      	movs	r6, #0
 801b232:	f840 6c04 	str.w	r6, [r0, #-4]
 801b236:	2a03      	cmp	r2, #3
 801b238:	d801      	bhi.n	801b23e <on_full_input_buffer+0x4a>
 801b23a:	2001      	movs	r0, #1
 801b23c:	bd70      	pop	{r4, r5, r6, pc}
 801b23e:	3308      	adds	r3, #8
 801b240:	4628      	mov	r0, r5
 801b242:	3a04      	subs	r2, #4
 801b244:	4419      	add	r1, r3
 801b246:	692b      	ldr	r3, [r5, #16]
 801b248:	f7f8 f9a6 	bl	8013598 <ucdr_init_buffer_origin>
 801b24c:	4628      	mov	r0, r5
 801b24e:	4622      	mov	r2, r4
 801b250:	4902      	ldr	r1, [pc, #8]	@ (801b25c <on_full_input_buffer+0x68>)
 801b252:	f7f8 f97d 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 801b256:	2000      	movs	r0, #0
 801b258:	bd70      	pop	{r4, r5, r6, pc}
 801b25a:	bf00      	nop
 801b25c:	0801b1f5 	.word	0x0801b1f5

0801b260 <uxr_init_input_reliable_stream>:
 801b260:	b510      	push	{r4, lr}
 801b262:	e9c0 1200 	strd	r1, r2, [r0]
 801b266:	2400      	movs	r4, #0
 801b268:	9a02      	ldr	r2, [sp, #8]
 801b26a:	8103      	strh	r3, [r0, #8]
 801b26c:	6102      	str	r2, [r0, #16]
 801b26e:	7504      	strb	r4, [r0, #20]
 801b270:	b1c3      	cbz	r3, 801b2a4 <uxr_init_input_reliable_stream+0x44>
 801b272:	600c      	str	r4, [r1, #0]
 801b274:	8901      	ldrh	r1, [r0, #8]
 801b276:	2901      	cmp	r1, #1
 801b278:	d914      	bls.n	801b2a4 <uxr_init_input_reliable_stream+0x44>
 801b27a:	f04f 0c01 	mov.w	ip, #1
 801b27e:	6843      	ldr	r3, [r0, #4]
 801b280:	f10c 0e01 	add.w	lr, ip, #1
 801b284:	fbbc f2f1 	udiv	r2, ip, r1
 801b288:	fbb3 f3f1 	udiv	r3, r3, r1
 801b28c:	fb01 c212 	mls	r2, r1, r2, ip
 801b290:	fa1f fc8e 	uxth.w	ip, lr
 801b294:	b292      	uxth	r2, r2
 801b296:	fb02 f303 	mul.w	r3, r2, r3
 801b29a:	6802      	ldr	r2, [r0, #0]
 801b29c:	50d4      	str	r4, [r2, r3]
 801b29e:	8901      	ldrh	r1, [r0, #8]
 801b2a0:	4561      	cmp	r1, ip
 801b2a2:	d8ec      	bhi.n	801b27e <uxr_init_input_reliable_stream+0x1e>
 801b2a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2a8:	60c3      	str	r3, [r0, #12]
 801b2aa:	bd10      	pop	{r4, pc}

0801b2ac <uxr_reset_input_reliable_stream>:
 801b2ac:	8901      	ldrh	r1, [r0, #8]
 801b2ae:	b1d9      	cbz	r1, 801b2e8 <uxr_reset_input_reliable_stream+0x3c>
 801b2b0:	b510      	push	{r4, lr}
 801b2b2:	f04f 0e00 	mov.w	lr, #0
 801b2b6:	46f4      	mov	ip, lr
 801b2b8:	4674      	mov	r4, lr
 801b2ba:	6843      	ldr	r3, [r0, #4]
 801b2bc:	f10e 0e01 	add.w	lr, lr, #1
 801b2c0:	fbbc f2f1 	udiv	r2, ip, r1
 801b2c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2c8:	fb01 c212 	mls	r2, r1, r2, ip
 801b2cc:	fa1f fc8e 	uxth.w	ip, lr
 801b2d0:	b292      	uxth	r2, r2
 801b2d2:	fb02 f303 	mul.w	r3, r2, r3
 801b2d6:	6802      	ldr	r2, [r0, #0]
 801b2d8:	50d4      	str	r4, [r2, r3]
 801b2da:	8901      	ldrh	r1, [r0, #8]
 801b2dc:	4561      	cmp	r1, ip
 801b2de:	d8ec      	bhi.n	801b2ba <uxr_reset_input_reliable_stream+0xe>
 801b2e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2e4:	60c3      	str	r3, [r0, #12]
 801b2e6:	bd10      	pop	{r4, pc}
 801b2e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2ec:	60c3      	str	r3, [r0, #12]
 801b2ee:	4770      	bx	lr

0801b2f0 <uxr_receive_reliable_message>:
 801b2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2f4:	4604      	mov	r4, r0
 801b2f6:	460d      	mov	r5, r1
 801b2f8:	8901      	ldrh	r1, [r0, #8]
 801b2fa:	4617      	mov	r7, r2
 801b2fc:	8980      	ldrh	r0, [r0, #12]
 801b2fe:	4698      	mov	r8, r3
 801b300:	f000 fcae 	bl	801bc60 <uxr_seq_num_add>
 801b304:	4629      	mov	r1, r5
 801b306:	4606      	mov	r6, r0
 801b308:	89a0      	ldrh	r0, [r4, #12]
 801b30a:	f000 fcb1 	bl	801bc70 <uxr_seq_num_cmp>
 801b30e:	2800      	cmp	r0, #0
 801b310:	db0a      	blt.n	801b328 <uxr_receive_reliable_message+0x38>
 801b312:	2600      	movs	r6, #0
 801b314:	4629      	mov	r1, r5
 801b316:	89e0      	ldrh	r0, [r4, #14]
 801b318:	f000 fcaa 	bl	801bc70 <uxr_seq_num_cmp>
 801b31c:	2800      	cmp	r0, #0
 801b31e:	da00      	bge.n	801b322 <uxr_receive_reliable_message+0x32>
 801b320:	81e5      	strh	r5, [r4, #14]
 801b322:	4630      	mov	r0, r6
 801b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b328:	4630      	mov	r0, r6
 801b32a:	4629      	mov	r1, r5
 801b32c:	f000 fca0 	bl	801bc70 <uxr_seq_num_cmp>
 801b330:	2800      	cmp	r0, #0
 801b332:	dbee      	blt.n	801b312 <uxr_receive_reliable_message+0x22>
 801b334:	6923      	ldr	r3, [r4, #16]
 801b336:	4638      	mov	r0, r7
 801b338:	4798      	blx	r3
 801b33a:	4681      	mov	r9, r0
 801b33c:	2101      	movs	r1, #1
 801b33e:	89a0      	ldrh	r0, [r4, #12]
 801b340:	f000 fc8e 	bl	801bc60 <uxr_seq_num_add>
 801b344:	f1b9 0f00 	cmp.w	r9, #0
 801b348:	bf08      	it	eq
 801b34a:	4285      	cmpeq	r5, r0
 801b34c:	bf0c      	ite	eq
 801b34e:	2601      	moveq	r6, #1
 801b350:	2600      	movne	r6, #0
 801b352:	d104      	bne.n	801b35e <uxr_receive_reliable_message+0x6e>
 801b354:	2300      	movs	r3, #0
 801b356:	9a08      	ldr	r2, [sp, #32]
 801b358:	81a0      	strh	r0, [r4, #12]
 801b35a:	7013      	strb	r3, [r2, #0]
 801b35c:	e7da      	b.n	801b314 <uxr_receive_reliable_message+0x24>
 801b35e:	8922      	ldrh	r2, [r4, #8]
 801b360:	6863      	ldr	r3, [r4, #4]
 801b362:	fbb5 f0f2 	udiv	r0, r5, r2
 801b366:	fbb3 f3f2 	udiv	r3, r3, r2
 801b36a:	fb02 5010 	mls	r0, r2, r0, r5
 801b36e:	b280      	uxth	r0, r0
 801b370:	fb03 f000 	mul.w	r0, r3, r0
 801b374:	6823      	ldr	r3, [r4, #0]
 801b376:	3004      	adds	r0, #4
 801b378:	4418      	add	r0, r3
 801b37a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d1c7      	bne.n	801b312 <uxr_receive_reliable_message+0x22>
 801b382:	4639      	mov	r1, r7
 801b384:	4642      	mov	r2, r8
 801b386:	f001 fe40 	bl	801d00a <memcpy>
 801b38a:	8921      	ldrh	r1, [r4, #8]
 801b38c:	6863      	ldr	r3, [r4, #4]
 801b38e:	fbb5 f2f1 	udiv	r2, r5, r1
 801b392:	fbb3 f3f1 	udiv	r3, r3, r1
 801b396:	fb01 5212 	mls	r2, r1, r2, r5
 801b39a:	b292      	uxth	r2, r2
 801b39c:	fb02 f303 	mul.w	r3, r2, r3
 801b3a0:	6822      	ldr	r2, [r4, #0]
 801b3a2:	f842 8003 	str.w	r8, [r2, r3]
 801b3a6:	2301      	movs	r3, #1
 801b3a8:	9a08      	ldr	r2, [sp, #32]
 801b3aa:	7013      	strb	r3, [r2, #0]
 801b3ac:	f1b9 0f00 	cmp.w	r9, #0
 801b3b0:	d0af      	beq.n	801b312 <uxr_receive_reliable_message+0x22>
 801b3b2:	89a6      	ldrh	r6, [r4, #12]
 801b3b4:	2101      	movs	r1, #1
 801b3b6:	4630      	mov	r0, r6
 801b3b8:	f000 fc52 	bl	801bc60 <uxr_seq_num_add>
 801b3bc:	8921      	ldrh	r1, [r4, #8]
 801b3be:	6863      	ldr	r3, [r4, #4]
 801b3c0:	4606      	mov	r6, r0
 801b3c2:	fbb0 f2f1 	udiv	r2, r0, r1
 801b3c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3ca:	fb01 0212 	mls	r2, r1, r2, r0
 801b3ce:	6820      	ldr	r0, [r4, #0]
 801b3d0:	b292      	uxth	r2, r2
 801b3d2:	fb02 f303 	mul.w	r3, r2, r3
 801b3d6:	3304      	adds	r3, #4
 801b3d8:	4418      	add	r0, r3
 801b3da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d097      	beq.n	801b312 <uxr_receive_reliable_message+0x22>
 801b3e2:	6923      	ldr	r3, [r4, #16]
 801b3e4:	4798      	blx	r3
 801b3e6:	2802      	cmp	r0, #2
 801b3e8:	d002      	beq.n	801b3f0 <uxr_receive_reliable_message+0x100>
 801b3ea:	2801      	cmp	r0, #1
 801b3ec:	d0e2      	beq.n	801b3b4 <uxr_receive_reliable_message+0xc4>
 801b3ee:	e790      	b.n	801b312 <uxr_receive_reliable_message+0x22>
 801b3f0:	2601      	movs	r6, #1
 801b3f2:	e78f      	b.n	801b314 <uxr_receive_reliable_message+0x24>

0801b3f4 <uxr_next_input_reliable_buffer_available>:
 801b3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3f8:	4604      	mov	r4, r0
 801b3fa:	460f      	mov	r7, r1
 801b3fc:	8980      	ldrh	r0, [r0, #12]
 801b3fe:	2101      	movs	r1, #1
 801b400:	4690      	mov	r8, r2
 801b402:	f000 fc2d 	bl	801bc60 <uxr_seq_num_add>
 801b406:	8922      	ldrh	r2, [r4, #8]
 801b408:	6866      	ldr	r6, [r4, #4]
 801b40a:	fbb0 f3f2 	udiv	r3, r0, r2
 801b40e:	fbb6 f6f2 	udiv	r6, r6, r2
 801b412:	fb02 0313 	mls	r3, r2, r3, r0
 801b416:	b29b      	uxth	r3, r3
 801b418:	fb03 f606 	mul.w	r6, r3, r6
 801b41c:	6823      	ldr	r3, [r4, #0]
 801b41e:	3604      	adds	r6, #4
 801b420:	441e      	add	r6, r3
 801b422:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b426:	f1b9 0f00 	cmp.w	r9, #0
 801b42a:	d023      	beq.n	801b474 <uxr_next_input_reliable_buffer_available+0x80>
 801b42c:	4605      	mov	r5, r0
 801b42e:	6923      	ldr	r3, [r4, #16]
 801b430:	4630      	mov	r0, r6
 801b432:	4798      	blx	r3
 801b434:	4682      	mov	sl, r0
 801b436:	b300      	cbz	r0, 801b47a <uxr_next_input_reliable_buffer_available+0x86>
 801b438:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b43c:	2101      	movs	r1, #1
 801b43e:	4650      	mov	r0, sl
 801b440:	f000 fc0e 	bl	801bc60 <uxr_seq_num_add>
 801b444:	8921      	ldrh	r1, [r4, #8]
 801b446:	4682      	mov	sl, r0
 801b448:	6863      	ldr	r3, [r4, #4]
 801b44a:	6820      	ldr	r0, [r4, #0]
 801b44c:	fbba f2f1 	udiv	r2, sl, r1
 801b450:	fbb3 f3f1 	udiv	r3, r3, r1
 801b454:	fb01 a212 	mls	r2, r1, r2, sl
 801b458:	b292      	uxth	r2, r2
 801b45a:	fb02 f303 	mul.w	r3, r2, r3
 801b45e:	3304      	adds	r3, #4
 801b460:	4418      	add	r0, r3
 801b462:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b466:	b12b      	cbz	r3, 801b474 <uxr_next_input_reliable_buffer_available+0x80>
 801b468:	6923      	ldr	r3, [r4, #16]
 801b46a:	4798      	blx	r3
 801b46c:	2802      	cmp	r0, #2
 801b46e:	d01b      	beq.n	801b4a8 <uxr_next_input_reliable_buffer_available+0xb4>
 801b470:	2801      	cmp	r0, #1
 801b472:	d0e3      	beq.n	801b43c <uxr_next_input_reliable_buffer_available+0x48>
 801b474:	2000      	movs	r0, #0
 801b476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b47a:	464a      	mov	r2, r9
 801b47c:	4631      	mov	r1, r6
 801b47e:	4638      	mov	r0, r7
 801b480:	f7f8 f892 	bl	80135a8 <ucdr_init_buffer>
 801b484:	8921      	ldrh	r1, [r4, #8]
 801b486:	6863      	ldr	r3, [r4, #4]
 801b488:	2001      	movs	r0, #1
 801b48a:	fbb5 f2f1 	udiv	r2, r5, r1
 801b48e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b492:	fb01 5212 	mls	r2, r1, r2, r5
 801b496:	b292      	uxth	r2, r2
 801b498:	fb02 f303 	mul.w	r3, r2, r3
 801b49c:	6822      	ldr	r2, [r4, #0]
 801b49e:	f842 a003 	str.w	sl, [r2, r3]
 801b4a2:	81a5      	strh	r5, [r4, #12]
 801b4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4a8:	8920      	ldrh	r0, [r4, #8]
 801b4aa:	eb06 0108 	add.w	r1, r6, r8
 801b4ae:	6863      	ldr	r3, [r4, #4]
 801b4b0:	eba9 0208 	sub.w	r2, r9, r8
 801b4b4:	fbb5 f6f0 	udiv	r6, r5, r0
 801b4b8:	fbb3 f3f0 	udiv	r3, r3, r0
 801b4bc:	fb00 5516 	mls	r5, r0, r6, r5
 801b4c0:	2000      	movs	r0, #0
 801b4c2:	b2ad      	uxth	r5, r5
 801b4c4:	fb03 f505 	mul.w	r5, r3, r5
 801b4c8:	6823      	ldr	r3, [r4, #0]
 801b4ca:	5158      	str	r0, [r3, r5]
 801b4cc:	4638      	mov	r0, r7
 801b4ce:	f7f8 f86b 	bl	80135a8 <ucdr_init_buffer>
 801b4d2:	4638      	mov	r0, r7
 801b4d4:	4622      	mov	r2, r4
 801b4d6:	4903      	ldr	r1, [pc, #12]	@ (801b4e4 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b4d8:	f7f8 f83a 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 801b4dc:	2001      	movs	r0, #1
 801b4de:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b4e2:	e7c8      	b.n	801b476 <uxr_next_input_reliable_buffer_available+0x82>
 801b4e4:	0801b1f5 	.word	0x0801b1f5

0801b4e8 <uxr_process_heartbeat>:
 801b4e8:	b538      	push	{r3, r4, r5, lr}
 801b4ea:	4611      	mov	r1, r2
 801b4ec:	4604      	mov	r4, r0
 801b4ee:	89c0      	ldrh	r0, [r0, #14]
 801b4f0:	4615      	mov	r5, r2
 801b4f2:	f000 fbbd 	bl	801bc70 <uxr_seq_num_cmp>
 801b4f6:	2800      	cmp	r0, #0
 801b4f8:	bfb8      	it	lt
 801b4fa:	81e5      	strhlt	r5, [r4, #14]
 801b4fc:	bd38      	pop	{r3, r4, r5, pc}
 801b4fe:	bf00      	nop

0801b500 <uxr_compute_acknack>:
 801b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b504:	8903      	ldrh	r3, [r0, #8]
 801b506:	4604      	mov	r4, r0
 801b508:	460f      	mov	r7, r1
 801b50a:	8985      	ldrh	r5, [r0, #12]
 801b50c:	b1db      	cbz	r3, 801b546 <uxr_compute_acknack+0x46>
 801b50e:	4628      	mov	r0, r5
 801b510:	2601      	movs	r6, #1
 801b512:	e004      	b.n	801b51e <uxr_compute_acknack+0x1e>
 801b514:	4566      	cmp	r6, ip
 801b516:	f106 0601 	add.w	r6, r6, #1
 801b51a:	d214      	bcs.n	801b546 <uxr_compute_acknack+0x46>
 801b51c:	89a0      	ldrh	r0, [r4, #12]
 801b51e:	b2b1      	uxth	r1, r6
 801b520:	f000 fb9e 	bl	801bc60 <uxr_seq_num_add>
 801b524:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b528:	fbb0 f2fc 	udiv	r2, r0, ip
 801b52c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b530:	fb0c 0212 	mls	r2, ip, r2, r0
 801b534:	fbb3 f3fc 	udiv	r3, r3, ip
 801b538:	b292      	uxth	r2, r2
 801b53a:	fb02 f303 	mul.w	r3, r2, r3
 801b53e:	58cb      	ldr	r3, [r1, r3]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d1e7      	bne.n	801b514 <uxr_compute_acknack+0x14>
 801b544:	4605      	mov	r5, r0
 801b546:	803d      	strh	r5, [r7, #0]
 801b548:	2101      	movs	r1, #1
 801b54a:	89e6      	ldrh	r6, [r4, #14]
 801b54c:	4628      	mov	r0, r5
 801b54e:	f000 fb8b 	bl	801bc68 <uxr_seq_num_sub>
 801b552:	4601      	mov	r1, r0
 801b554:	4630      	mov	r0, r6
 801b556:	f000 fb87 	bl	801bc68 <uxr_seq_num_sub>
 801b55a:	4606      	mov	r6, r0
 801b55c:	b328      	cbz	r0, 801b5aa <uxr_compute_acknack+0xaa>
 801b55e:	f04f 0900 	mov.w	r9, #0
 801b562:	f04f 0801 	mov.w	r8, #1
 801b566:	464d      	mov	r5, r9
 801b568:	fa1f f189 	uxth.w	r1, r9
 801b56c:	8838      	ldrh	r0, [r7, #0]
 801b56e:	f000 fb77 	bl	801bc60 <uxr_seq_num_add>
 801b572:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b576:	6861      	ldr	r1, [r4, #4]
 801b578:	fa08 fe09 	lsl.w	lr, r8, r9
 801b57c:	6822      	ldr	r2, [r4, #0]
 801b57e:	f109 0901 	add.w	r9, r9, #1
 801b582:	ea4e 0e05 	orr.w	lr, lr, r5
 801b586:	fbb0 f3fc 	udiv	r3, r0, ip
 801b58a:	fbb1 f1fc 	udiv	r1, r1, ip
 801b58e:	fb03 001c 	mls	r0, r3, ip, r0
 801b592:	b283      	uxth	r3, r0
 801b594:	fb01 f303 	mul.w	r3, r1, r3
 801b598:	58d3      	ldr	r3, [r2, r3]
 801b59a:	b90b      	cbnz	r3, 801b5a0 <uxr_compute_acknack+0xa0>
 801b59c:	fa1f f58e 	uxth.w	r5, lr
 801b5a0:	454e      	cmp	r6, r9
 801b5a2:	d1e1      	bne.n	801b568 <uxr_compute_acknack+0x68>
 801b5a4:	4628      	mov	r0, r5
 801b5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5aa:	4605      	mov	r5, r0
 801b5ac:	4628      	mov	r0, r5
 801b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5b2:	bf00      	nop

0801b5b4 <uxr_init_output_best_effort_stream>:
 801b5b4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b5b8:	6001      	str	r1, [r0, #0]
 801b5ba:	7303      	strb	r3, [r0, #12]
 801b5bc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b5c0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop

0801b5c8 <uxr_reset_output_best_effort_stream>:
 801b5c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b5cc:	7b03      	ldrb	r3, [r0, #12]
 801b5ce:	81c2      	strh	r2, [r0, #14]
 801b5d0:	6043      	str	r3, [r0, #4]
 801b5d2:	4770      	bx	lr

0801b5d4 <uxr_prepare_best_effort_buffer_to_write>:
 801b5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5d6:	4604      	mov	r4, r0
 801b5d8:	b083      	sub	sp, #12
 801b5da:	6840      	ldr	r0, [r0, #4]
 801b5dc:	460d      	mov	r5, r1
 801b5de:	4616      	mov	r6, r2
 801b5e0:	f7fa fad4 	bl	8015b8c <uxr_submessage_padding>
 801b5e4:	6863      	ldr	r3, [r4, #4]
 801b5e6:	4418      	add	r0, r3
 801b5e8:	68a3      	ldr	r3, [r4, #8]
 801b5ea:	1942      	adds	r2, r0, r5
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	bf2c      	ite	cs
 801b5f0:	2701      	movcs	r7, #1
 801b5f2:	2700      	movcc	r7, #0
 801b5f4:	d202      	bcs.n	801b5fc <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b5f6:	4638      	mov	r0, r7
 801b5f8:	b003      	add	sp, #12
 801b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5fc:	9000      	str	r0, [sp, #0]
 801b5fe:	2300      	movs	r3, #0
 801b600:	4630      	mov	r0, r6
 801b602:	6821      	ldr	r1, [r4, #0]
 801b604:	f7f7 ffbe 	bl	8013584 <ucdr_init_buffer_origin_offset>
 801b608:	6861      	ldr	r1, [r4, #4]
 801b60a:	4638      	mov	r0, r7
 801b60c:	4429      	add	r1, r5
 801b60e:	6061      	str	r1, [r4, #4]
 801b610:	b003      	add	sp, #12
 801b612:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b614 <uxr_prepare_best_effort_buffer_to_send>:
 801b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b618:	4604      	mov	r4, r0
 801b61a:	461d      	mov	r5, r3
 801b61c:	6840      	ldr	r0, [r0, #4]
 801b61e:	7b23      	ldrb	r3, [r4, #12]
 801b620:	4298      	cmp	r0, r3
 801b622:	bf8c      	ite	hi
 801b624:	2601      	movhi	r6, #1
 801b626:	2600      	movls	r6, #0
 801b628:	d802      	bhi.n	801b630 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b62a:	4630      	mov	r0, r6
 801b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b630:	4688      	mov	r8, r1
 801b632:	89e0      	ldrh	r0, [r4, #14]
 801b634:	2101      	movs	r1, #1
 801b636:	4617      	mov	r7, r2
 801b638:	f000 fb12 	bl	801bc60 <uxr_seq_num_add>
 801b63c:	6823      	ldr	r3, [r4, #0]
 801b63e:	81e0      	strh	r0, [r4, #14]
 801b640:	8028      	strh	r0, [r5, #0]
 801b642:	4630      	mov	r0, r6
 801b644:	f8c8 3000 	str.w	r3, [r8]
 801b648:	6863      	ldr	r3, [r4, #4]
 801b64a:	603b      	str	r3, [r7, #0]
 801b64c:	7b23      	ldrb	r3, [r4, #12]
 801b64e:	6063      	str	r3, [r4, #4]
 801b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b654 <on_full_output_buffer>:
 801b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b656:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b65a:	460c      	mov	r4, r1
 801b65c:	6803      	ldr	r3, [r0, #0]
 801b65e:	4605      	mov	r5, r0
 801b660:	7b26      	ldrb	r6, [r4, #12]
 801b662:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b666:	fbb2 f2fc 	udiv	r2, r2, ip
 801b66a:	eba3 0e01 	sub.w	lr, r3, r1
 801b66e:	6903      	ldr	r3, [r0, #16]
 801b670:	fbbe fef2 	udiv	lr, lr, r2
 801b674:	f10e 0e01 	add.w	lr, lr, #1
 801b678:	fa1f fe8e 	uxth.w	lr, lr
 801b67c:	fbbe f7fc 	udiv	r7, lr, ip
 801b680:	fb0c ec17 	mls	ip, ip, r7, lr
 801b684:	fa1f fc8c 	uxth.w	ip, ip
 801b688:	fb02 fc0c 	mul.w	ip, r2, ip
 801b68c:	f851 200c 	ldr.w	r2, [r1, ip]
 801b690:	44b4      	add	ip, r6
 801b692:	1b92      	subs	r2, r2, r6
 801b694:	f10c 0c08 	add.w	ip, ip, #8
 801b698:	3a04      	subs	r2, #4
 801b69a:	4461      	add	r1, ip
 801b69c:	f7f7 ff7c 	bl	8013598 <ucdr_init_buffer_origin>
 801b6a0:	4628      	mov	r0, r5
 801b6a2:	4622      	mov	r2, r4
 801b6a4:	4902      	ldr	r1, [pc, #8]	@ (801b6b0 <on_full_output_buffer+0x5c>)
 801b6a6:	f7f7 ff53 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 801b6aa:	2000      	movs	r0, #0
 801b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6ae:	bf00      	nop
 801b6b0:	0801b655 	.word	0x0801b655

0801b6b4 <uxr_init_output_reliable_stream>:
 801b6b4:	b530      	push	{r4, r5, lr}
 801b6b6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b6ba:	8103      	strh	r3, [r0, #8]
 801b6bc:	7304      	strb	r4, [r0, #12]
 801b6be:	e9c0 1200 	strd	r1, r2, [r0]
 801b6c2:	b1e3      	cbz	r3, 801b6fe <uxr_init_output_reliable_stream+0x4a>
 801b6c4:	600c      	str	r4, [r1, #0]
 801b6c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b6ca:	f1bc 0f01 	cmp.w	ip, #1
 801b6ce:	d916      	bls.n	801b6fe <uxr_init_output_reliable_stream+0x4a>
 801b6d0:	f04f 0e01 	mov.w	lr, #1
 801b6d4:	6843      	ldr	r3, [r0, #4]
 801b6d6:	f10e 0501 	add.w	r5, lr, #1
 801b6da:	7b04      	ldrb	r4, [r0, #12]
 801b6dc:	6801      	ldr	r1, [r0, #0]
 801b6de:	fbbe f2fc 	udiv	r2, lr, ip
 801b6e2:	fbb3 f3fc 	udiv	r3, r3, ip
 801b6e6:	fb0c e212 	mls	r2, ip, r2, lr
 801b6ea:	fa1f fe85 	uxth.w	lr, r5
 801b6ee:	b292      	uxth	r2, r2
 801b6f0:	fb02 f303 	mul.w	r3, r2, r3
 801b6f4:	50cc      	str	r4, [r1, r3]
 801b6f6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b6fa:	45f4      	cmp	ip, lr
 801b6fc:	d8ea      	bhi.n	801b6d4 <uxr_init_output_reliable_stream+0x20>
 801b6fe:	4b07      	ldr	r3, [pc, #28]	@ (801b71c <uxr_init_output_reliable_stream+0x68>)
 801b700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b704:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b708:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801b70c:	f8c0 300e 	str.w	r3, [r0, #14]
 801b710:	2300      	movs	r3, #0
 801b712:	8242      	strh	r2, [r0, #18]
 801b714:	8403      	strh	r3, [r0, #32]
 801b716:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b71a:	bd30      	pop	{r4, r5, pc}
 801b71c:	ffff0000 	.word	0xffff0000

0801b720 <uxr_reset_output_reliable_stream>:
 801b720:	8901      	ldrh	r1, [r0, #8]
 801b722:	b510      	push	{r4, lr}
 801b724:	b1b1      	cbz	r1, 801b754 <uxr_reset_output_reliable_stream+0x34>
 801b726:	f04f 0e00 	mov.w	lr, #0
 801b72a:	46f4      	mov	ip, lr
 801b72c:	6843      	ldr	r3, [r0, #4]
 801b72e:	f10e 0e01 	add.w	lr, lr, #1
 801b732:	7b04      	ldrb	r4, [r0, #12]
 801b734:	fbbc f2f1 	udiv	r2, ip, r1
 801b738:	fbb3 f3f1 	udiv	r3, r3, r1
 801b73c:	fb01 c212 	mls	r2, r1, r2, ip
 801b740:	fa1f fc8e 	uxth.w	ip, lr
 801b744:	b292      	uxth	r2, r2
 801b746:	fb02 f303 	mul.w	r3, r2, r3
 801b74a:	6802      	ldr	r2, [r0, #0]
 801b74c:	50d4      	str	r4, [r2, r3]
 801b74e:	8901      	ldrh	r1, [r0, #8]
 801b750:	4561      	cmp	r1, ip
 801b752:	d8eb      	bhi.n	801b72c <uxr_reset_output_reliable_stream+0xc>
 801b754:	4b08      	ldr	r3, [pc, #32]	@ (801b778 <uxr_reset_output_reliable_stream+0x58>)
 801b756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b75a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801b770 <uxr_reset_output_reliable_stream+0x50>
 801b75e:	f8c0 300e 	str.w	r3, [r0, #14]
 801b762:	2300      	movs	r3, #0
 801b764:	8242      	strh	r2, [r0, #18]
 801b766:	8403      	strh	r3, [r0, #32]
 801b768:	ed80 7b06 	vstr	d7, [r0, #24]
 801b76c:	bd10      	pop	{r4, pc}
 801b76e:	bf00      	nop
 801b770:	ffffffff 	.word	0xffffffff
 801b774:	7fffffff 	.word	0x7fffffff
 801b778:	ffff0000 	.word	0xffff0000

0801b77c <uxr_prepare_reliable_buffer_to_write>:
 801b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b780:	4604      	mov	r4, r0
 801b782:	b091      	sub	sp, #68	@ 0x44
 801b784:	8900      	ldrh	r0, [r0, #8]
 801b786:	468b      	mov	fp, r1
 801b788:	89e6      	ldrh	r6, [r4, #14]
 801b78a:	9204      	str	r2, [sp, #16]
 801b78c:	6865      	ldr	r5, [r4, #4]
 801b78e:	6823      	ldr	r3, [r4, #0]
 801b790:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b794:	fbb6 f2f0 	udiv	r2, r6, r0
 801b798:	fbb5 f5f0 	udiv	r5, r5, r0
 801b79c:	fb00 6212 	mls	r2, r0, r2, r6
 801b7a0:	1f2f      	subs	r7, r5, #4
 801b7a2:	b292      	uxth	r2, r2
 801b7a4:	fb05 3202 	mla	r2, r5, r2, r3
 801b7a8:	1d11      	adds	r1, r2, #4
 801b7aa:	f8d2 8000 	ldr.w	r8, [r2]
 801b7ae:	9103      	str	r1, [sp, #12]
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	f000 814a 	beq.w	801ba4a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b7b6:	f04f 0c00 	mov.w	ip, #0
 801b7ba:	46e2      	mov	sl, ip
 801b7bc:	4661      	mov	r1, ip
 801b7be:	f10c 0c01 	add.w	ip, ip, #1
 801b7c2:	fbb1 f2f0 	udiv	r2, r1, r0
 801b7c6:	fb00 1212 	mls	r2, r0, r2, r1
 801b7ca:	fa1f f18c 	uxth.w	r1, ip
 801b7ce:	b292      	uxth	r2, r2
 801b7d0:	fb05 f202 	mul.w	r2, r5, r2
 801b7d4:	589a      	ldr	r2, [r3, r2]
 801b7d6:	454a      	cmp	r2, r9
 801b7d8:	d103      	bne.n	801b7e2 <uxr_prepare_reliable_buffer_to_write+0x66>
 801b7da:	f10a 0a01 	add.w	sl, sl, #1
 801b7de:	fa1f fa8a 	uxth.w	sl, sl
 801b7e2:	4281      	cmp	r1, r0
 801b7e4:	d3eb      	bcc.n	801b7be <uxr_prepare_reliable_buffer_to_write+0x42>
 801b7e6:	4640      	mov	r0, r8
 801b7e8:	2104      	movs	r1, #4
 801b7ea:	f8cd a014 	str.w	sl, [sp, #20]
 801b7ee:	f7f7 fedf 	bl	80135b0 <ucdr_alignment>
 801b7f2:	4480      	add	r8, r0
 801b7f4:	eb08 020b 	add.w	r2, r8, fp
 801b7f8:	42ba      	cmp	r2, r7
 801b7fa:	f240 80ca 	bls.w	801b992 <uxr_prepare_reliable_buffer_to_write+0x216>
 801b7fe:	7b22      	ldrb	r2, [r4, #12]
 801b800:	445a      	add	r2, fp
 801b802:	42ba      	cmp	r2, r7
 801b804:	f240 80b2 	bls.w	801b96c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b808:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801b80c:	b2bb      	uxth	r3, r7
 801b80e:	eba2 0209 	sub.w	r2, r2, r9
 801b812:	441a      	add	r2, r3
 801b814:	b292      	uxth	r2, r2
 801b816:	fb0a f902 	mul.w	r9, sl, r2
 801b81a:	9205      	str	r2, [sp, #20]
 801b81c:	45d9      	cmp	r9, fp
 801b81e:	9206      	str	r2, [sp, #24]
 801b820:	f0c0 80b3 	bcc.w	801b98a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b824:	f108 0204 	add.w	r2, r8, #4
 801b828:	42ba      	cmp	r2, r7
 801b82a:	f080 80da 	bcs.w	801b9e2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801b82e:	f1a3 0904 	sub.w	r9, r3, #4
 801b832:	9b05      	ldr	r3, [sp, #20]
 801b834:	eba9 0908 	sub.w	r9, r9, r8
 801b838:	fa1f f989 	uxth.w	r9, r9
 801b83c:	ebab 0b09 	sub.w	fp, fp, r9
 801b840:	fbbb f2f3 	udiv	r2, fp, r3
 801b844:	fb03 b312 	mls	r3, r3, r2, fp
 801b848:	2b00      	cmp	r3, #0
 801b84a:	f040 80c4 	bne.w	801b9d6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b84e:	b293      	uxth	r3, r2
 801b850:	4553      	cmp	r3, sl
 801b852:	f200 809a 	bhi.w	801b98a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b856:	2b00      	cmp	r3, #0
 801b858:	f000 80f9 	beq.w	801ba4e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b85c:	f8cd 801c 	str.w	r8, [sp, #28]
 801b860:	f04f 0a00 	mov.w	sl, #0
 801b864:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b868:	f10d 0b20 	add.w	fp, sp, #32
 801b86c:	9505      	str	r5, [sp, #20]
 801b86e:	461d      	mov	r5, r3
 801b870:	e000      	b.n	801b874 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b872:	46c1      	mov	r9, r8
 801b874:	8922      	ldrh	r2, [r4, #8]
 801b876:	4658      	mov	r0, fp
 801b878:	6863      	ldr	r3, [r4, #4]
 801b87a:	f10a 0a01 	add.w	sl, sl, #1
 801b87e:	fbb6 f1f2 	udiv	r1, r6, r2
 801b882:	fbb3 f3f2 	udiv	r3, r3, r2
 801b886:	fb02 6111 	mls	r1, r2, r1, r6
 801b88a:	463a      	mov	r2, r7
 801b88c:	b289      	uxth	r1, r1
 801b88e:	fb03 f101 	mul.w	r1, r3, r1
 801b892:	6823      	ldr	r3, [r4, #0]
 801b894:	3104      	adds	r1, #4
 801b896:	4419      	add	r1, r3
 801b898:	2300      	movs	r3, #0
 801b89a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b89e:	f8cd c000 	str.w	ip, [sp]
 801b8a2:	f7f7 fe6f 	bl	8013584 <ucdr_init_buffer_origin_offset>
 801b8a6:	464a      	mov	r2, r9
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	210d      	movs	r1, #13
 801b8ac:	4658      	mov	r0, fp
 801b8ae:	f7fa f92d 	bl	8015b0c <uxr_buffer_submessage_header>
 801b8b2:	8921      	ldrh	r1, [r4, #8]
 801b8b4:	6863      	ldr	r3, [r4, #4]
 801b8b6:	4630      	mov	r0, r6
 801b8b8:	fbb6 f2f1 	udiv	r2, r6, r1
 801b8bc:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8c0:	fb01 6212 	mls	r2, r1, r2, r6
 801b8c4:	2101      	movs	r1, #1
 801b8c6:	b292      	uxth	r2, r2
 801b8c8:	fb02 f303 	mul.w	r3, r2, r3
 801b8cc:	6822      	ldr	r2, [r4, #0]
 801b8ce:	50d7      	str	r7, [r2, r3]
 801b8d0:	f000 f9c6 	bl	801bc60 <uxr_seq_num_add>
 801b8d4:	4606      	mov	r6, r0
 801b8d6:	fa1f f38a 	uxth.w	r3, sl
 801b8da:	429d      	cmp	r5, r3
 801b8dc:	d8c9      	bhi.n	801b872 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b8de:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b8e2:	9d05      	ldr	r5, [sp, #20]
 801b8e4:	8920      	ldrh	r0, [r4, #8]
 801b8e6:	463a      	mov	r2, r7
 801b8e8:	6863      	ldr	r3, [r4, #4]
 801b8ea:	fbb6 f1f0 	udiv	r1, r6, r0
 801b8ee:	fbb3 f3f0 	udiv	r3, r3, r0
 801b8f2:	fb00 6111 	mls	r1, r0, r1, r6
 801b8f6:	4658      	mov	r0, fp
 801b8f8:	b289      	uxth	r1, r1
 801b8fa:	fb01 f303 	mul.w	r3, r1, r3
 801b8fe:	6821      	ldr	r1, [r4, #0]
 801b900:	3304      	adds	r3, #4
 801b902:	4419      	add	r1, r3
 801b904:	2300      	movs	r3, #0
 801b906:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b90a:	9700      	str	r7, [sp, #0]
 801b90c:	f7f7 fe3a 	bl	8013584 <ucdr_init_buffer_origin_offset>
 801b910:	9f06      	ldr	r7, [sp, #24]
 801b912:	4658      	mov	r0, fp
 801b914:	2302      	movs	r3, #2
 801b916:	b2ba      	uxth	r2, r7
 801b918:	210d      	movs	r1, #13
 801b91a:	f7fa f8f7 	bl	8015b0c <uxr_buffer_submessage_header>
 801b91e:	f108 0104 	add.w	r1, r8, #4
 801b922:	9b03      	ldr	r3, [sp, #12]
 801b924:	f1a5 0208 	sub.w	r2, r5, #8
 801b928:	8925      	ldrh	r5, [r4, #8]
 801b92a:	440b      	add	r3, r1
 801b92c:	eba2 0208 	sub.w	r2, r2, r8
 801b930:	fbb6 f0f5 	udiv	r0, r6, r5
 801b934:	4619      	mov	r1, r3
 801b936:	6863      	ldr	r3, [r4, #4]
 801b938:	fb05 6010 	mls	r0, r5, r0, r6
 801b93c:	fbb3 f3f5 	udiv	r3, r3, r5
 801b940:	b280      	uxth	r0, r0
 801b942:	6825      	ldr	r5, [r4, #0]
 801b944:	fb00 f303 	mul.w	r3, r0, r3
 801b948:	7b20      	ldrb	r0, [r4, #12]
 801b94a:	3004      	adds	r0, #4
 801b94c:	4438      	add	r0, r7
 801b94e:	50e8      	str	r0, [r5, r3]
 801b950:	9d04      	ldr	r5, [sp, #16]
 801b952:	4628      	mov	r0, r5
 801b954:	f7f7 fe28 	bl	80135a8 <ucdr_init_buffer>
 801b958:	4628      	mov	r0, r5
 801b95a:	4622      	mov	r2, r4
 801b95c:	493d      	ldr	r1, [pc, #244]	@ (801ba54 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b95e:	f7f7 fdf7 	bl	8013550 <ucdr_set_on_full_buffer_callback>
 801b962:	2001      	movs	r0, #1
 801b964:	81e6      	strh	r6, [r4, #14]
 801b966:	b011      	add	sp, #68	@ 0x44
 801b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b96c:	2101      	movs	r1, #1
 801b96e:	89e0      	ldrh	r0, [r4, #14]
 801b970:	f000 f976 	bl	801bc60 <uxr_seq_num_add>
 801b974:	4605      	mov	r5, r0
 801b976:	8921      	ldrh	r1, [r4, #8]
 801b978:	8a60      	ldrh	r0, [r4, #18]
 801b97a:	f000 f971 	bl	801bc60 <uxr_seq_num_add>
 801b97e:	4601      	mov	r1, r0
 801b980:	4628      	mov	r0, r5
 801b982:	f000 f975 	bl	801bc70 <uxr_seq_num_cmp>
 801b986:	2800      	cmp	r0, #0
 801b988:	dd44      	ble.n	801ba14 <uxr_prepare_reliable_buffer_to_write+0x298>
 801b98a:	2000      	movs	r0, #0
 801b98c:	b011      	add	sp, #68	@ 0x44
 801b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b992:	8921      	ldrh	r1, [r4, #8]
 801b994:	8a60      	ldrh	r0, [r4, #18]
 801b996:	9205      	str	r2, [sp, #20]
 801b998:	f000 f962 	bl	801bc60 <uxr_seq_num_add>
 801b99c:	4601      	mov	r1, r0
 801b99e:	4630      	mov	r0, r6
 801b9a0:	f000 f966 	bl	801bc70 <uxr_seq_num_cmp>
 801b9a4:	2800      	cmp	r0, #0
 801b9a6:	9a05      	ldr	r2, [sp, #20]
 801b9a8:	dcef      	bgt.n	801b98a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b9aa:	8925      	ldrh	r5, [r4, #8]
 801b9ac:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b9b0:	fbb6 f4f5 	udiv	r4, r6, r5
 801b9b4:	fbb3 f3f5 	udiv	r3, r3, r5
 801b9b8:	fb05 6414 	mls	r4, r5, r4, r6
 801b9bc:	b2a4      	uxth	r4, r4
 801b9be:	fb04 f303 	mul.w	r3, r4, r3
 801b9c2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b9c6:	50fa      	str	r2, [r7, r3]
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	f8cd 8000 	str.w	r8, [sp]
 801b9ce:	f7f7 fdd9 	bl	8013584 <ucdr_init_buffer_origin_offset>
 801b9d2:	2001      	movs	r0, #1
 801b9d4:	e7da      	b.n	801b98c <uxr_prepare_reliable_buffer_to_write+0x210>
 801b9d6:	3201      	adds	r2, #1
 801b9d8:	9306      	str	r3, [sp, #24]
 801b9da:	b293      	uxth	r3, r2
 801b9dc:	4553      	cmp	r3, sl
 801b9de:	d8d4      	bhi.n	801b98a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b9e0:	e739      	b.n	801b856 <uxr_prepare_reliable_buffer_to_write+0xda>
 801b9e2:	4630      	mov	r0, r6
 801b9e4:	2101      	movs	r1, #1
 801b9e6:	9307      	str	r3, [sp, #28]
 801b9e8:	f000 f93a 	bl	801bc60 <uxr_seq_num_add>
 801b9ec:	4606      	mov	r6, r0
 801b9ee:	8920      	ldrh	r0, [r4, #8]
 801b9f0:	6862      	ldr	r2, [r4, #4]
 801b9f2:	fbb6 f1f0 	udiv	r1, r6, r0
 801b9f6:	fbb2 f2f0 	udiv	r2, r2, r0
 801b9fa:	fb00 6111 	mls	r1, r0, r1, r6
 801b9fe:	b289      	uxth	r1, r1
 801ba00:	fb01 f202 	mul.w	r2, r1, r2
 801ba04:	6821      	ldr	r1, [r4, #0]
 801ba06:	3204      	adds	r2, #4
 801ba08:	188b      	adds	r3, r1, r2
 801ba0a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ba0e:	9303      	str	r3, [sp, #12]
 801ba10:	9b07      	ldr	r3, [sp, #28]
 801ba12:	e70c      	b.n	801b82e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ba14:	8921      	ldrh	r1, [r4, #8]
 801ba16:	6863      	ldr	r3, [r4, #4]
 801ba18:	9804      	ldr	r0, [sp, #16]
 801ba1a:	fbb5 f2f1 	udiv	r2, r5, r1
 801ba1e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba22:	fb01 5212 	mls	r2, r1, r2, r5
 801ba26:	6821      	ldr	r1, [r4, #0]
 801ba28:	b292      	uxth	r2, r2
 801ba2a:	fb02 f303 	mul.w	r3, r2, r3
 801ba2e:	7b22      	ldrb	r2, [r4, #12]
 801ba30:	3304      	adds	r3, #4
 801ba32:	445a      	add	r2, fp
 801ba34:	4419      	add	r1, r3
 801ba36:	f841 2c04 	str.w	r2, [r1, #-4]
 801ba3a:	7b23      	ldrb	r3, [r4, #12]
 801ba3c:	9300      	str	r3, [sp, #0]
 801ba3e:	2300      	movs	r3, #0
 801ba40:	f7f7 fda0 	bl	8013584 <ucdr_init_buffer_origin_offset>
 801ba44:	2001      	movs	r0, #1
 801ba46:	81e5      	strh	r5, [r4, #14]
 801ba48:	e7a0      	b.n	801b98c <uxr_prepare_reliable_buffer_to_write+0x210>
 801ba4a:	4682      	mov	sl, r0
 801ba4c:	e6cb      	b.n	801b7e6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ba4e:	f10d 0b20 	add.w	fp, sp, #32
 801ba52:	e747      	b.n	801b8e4 <uxr_prepare_reliable_buffer_to_write+0x168>
 801ba54:	0801b655 	.word	0x0801b655

0801ba58 <uxr_prepare_next_reliable_buffer_to_send>:
 801ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba5a:	4604      	mov	r4, r0
 801ba5c:	461d      	mov	r5, r3
 801ba5e:	460f      	mov	r7, r1
 801ba60:	8a00      	ldrh	r0, [r0, #16]
 801ba62:	2101      	movs	r1, #1
 801ba64:	4616      	mov	r6, r2
 801ba66:	f000 f8fb 	bl	801bc60 <uxr_seq_num_add>
 801ba6a:	8028      	strh	r0, [r5, #0]
 801ba6c:	8922      	ldrh	r2, [r4, #8]
 801ba6e:	6863      	ldr	r3, [r4, #4]
 801ba70:	fbb0 f1f2 	udiv	r1, r0, r2
 801ba74:	fbb3 f3f2 	udiv	r3, r3, r2
 801ba78:	fb02 0c11 	mls	ip, r2, r1, r0
 801ba7c:	89e1      	ldrh	r1, [r4, #14]
 801ba7e:	fa1f fc8c 	uxth.w	ip, ip
 801ba82:	fb0c fc03 	mul.w	ip, ip, r3
 801ba86:	6823      	ldr	r3, [r4, #0]
 801ba88:	f10c 0c04 	add.w	ip, ip, #4
 801ba8c:	4463      	add	r3, ip
 801ba8e:	603b      	str	r3, [r7, #0]
 801ba90:	6823      	ldr	r3, [r4, #0]
 801ba92:	449c      	add	ip, r3
 801ba94:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ba98:	6033      	str	r3, [r6, #0]
 801ba9a:	f000 f8e9 	bl	801bc70 <uxr_seq_num_cmp>
 801ba9e:	2800      	cmp	r0, #0
 801baa0:	dd01      	ble.n	801baa6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801baa2:	2000      	movs	r0, #0
 801baa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baa6:	7b23      	ldrb	r3, [r4, #12]
 801baa8:	6832      	ldr	r2, [r6, #0]
 801baaa:	429a      	cmp	r2, r3
 801baac:	d9f9      	bls.n	801baa2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801baae:	8a61      	ldrh	r1, [r4, #18]
 801bab0:	8a20      	ldrh	r0, [r4, #16]
 801bab2:	f000 f8d9 	bl	801bc68 <uxr_seq_num_sub>
 801bab6:	8923      	ldrh	r3, [r4, #8]
 801bab8:	4283      	cmp	r3, r0
 801baba:	d0f2      	beq.n	801baa2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801babc:	8828      	ldrh	r0, [r5, #0]
 801babe:	89e3      	ldrh	r3, [r4, #14]
 801bac0:	8220      	strh	r0, [r4, #16]
 801bac2:	4298      	cmp	r0, r3
 801bac4:	d001      	beq.n	801baca <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801bac6:	2001      	movs	r0, #1
 801bac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baca:	2101      	movs	r1, #1
 801bacc:	f000 f8c8 	bl	801bc60 <uxr_seq_num_add>
 801bad0:	4603      	mov	r3, r0
 801bad2:	2001      	movs	r0, #1
 801bad4:	81e3      	strh	r3, [r4, #14]
 801bad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bad8 <uxr_update_output_stream_heartbeat_timestamp>:
 801bad8:	b570      	push	{r4, r5, r6, lr}
 801bada:	8a01      	ldrh	r1, [r0, #16]
 801badc:	4604      	mov	r4, r0
 801bade:	8a40      	ldrh	r0, [r0, #18]
 801bae0:	4615      	mov	r5, r2
 801bae2:	461e      	mov	r6, r3
 801bae4:	f000 f8c4 	bl	801bc70 <uxr_seq_num_cmp>
 801bae8:	2800      	cmp	r0, #0
 801baea:	db07      	blt.n	801bafc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801baec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801baf0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801baf4:	2000      	movs	r0, #0
 801baf6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801bafa:	bd70      	pop	{r4, r5, r6, pc}
 801bafc:	f894 0020 	ldrb.w	r0, [r4, #32]
 801bb00:	b940      	cbnz	r0, 801bb14 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801bb02:	2301      	movs	r3, #1
 801bb04:	f884 3020 	strb.w	r3, [r4, #32]
 801bb08:	3564      	adds	r5, #100	@ 0x64
 801bb0a:	f146 0600 	adc.w	r6, r6, #0
 801bb0e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bb12:	bd70      	pop	{r4, r5, r6, pc}
 801bb14:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801bb18:	4295      	cmp	r5, r2
 801bb1a:	eb76 0303 	sbcs.w	r3, r6, r3
 801bb1e:	db04      	blt.n	801bb2a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801bb20:	1c43      	adds	r3, r0, #1
 801bb22:	2001      	movs	r0, #1
 801bb24:	f884 3020 	strb.w	r3, [r4, #32]
 801bb28:	e7ee      	b.n	801bb08 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bb2a:	2000      	movs	r0, #0
 801bb2c:	e7ec      	b.n	801bb08 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bb2e:	bf00      	nop

0801bb30 <uxr_begin_output_nack_buffer_it>:
 801bb30:	8a40      	ldrh	r0, [r0, #18]
 801bb32:	4770      	bx	lr

0801bb34 <uxr_next_reliable_nack_buffer_to_send>:
 801bb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb38:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801bb3c:	b197      	cbz	r7, 801bb64 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801bb3e:	4680      	mov	r8, r0
 801bb40:	460d      	mov	r5, r1
 801bb42:	4616      	mov	r6, r2
 801bb44:	461c      	mov	r4, r3
 801bb46:	8818      	ldrh	r0, [r3, #0]
 801bb48:	2101      	movs	r1, #1
 801bb4a:	f000 f889 	bl	801bc60 <uxr_seq_num_add>
 801bb4e:	8020      	strh	r0, [r4, #0]
 801bb50:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801bb54:	f000 f88c 	bl	801bc70 <uxr_seq_num_cmp>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	dd06      	ble.n	801bb6a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	461f      	mov	r7, r3
 801bb60:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801bb64:	4638      	mov	r0, r7
 801bb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb6a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801bb6e:	8820      	ldrh	r0, [r4, #0]
 801bb70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bb74:	fbb0 f3f2 	udiv	r3, r0, r2
 801bb78:	fbb1 fcf2 	udiv	ip, r1, r2
 801bb7c:	fb02 0313 	mls	r3, r2, r3, r0
 801bb80:	b29b      	uxth	r3, r3
 801bb82:	fb03 fc0c 	mul.w	ip, r3, ip
 801bb86:	f8d8 3000 	ldr.w	r3, [r8]
 801bb8a:	f10c 0c04 	add.w	ip, ip, #4
 801bb8e:	4463      	add	r3, ip
 801bb90:	602b      	str	r3, [r5, #0]
 801bb92:	f8d8 3000 	ldr.w	r3, [r8]
 801bb96:	4463      	add	r3, ip
 801bb98:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bb9c:	6033      	str	r3, [r6, #0]
 801bb9e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d0d0      	beq.n	801bb48 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801bba6:	e7dd      	b.n	801bb64 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801bba8 <uxr_process_acknack>:
 801bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbaa:	4604      	mov	r4, r0
 801bbac:	460e      	mov	r6, r1
 801bbae:	4610      	mov	r0, r2
 801bbb0:	2101      	movs	r1, #1
 801bbb2:	f000 f859 	bl	801bc68 <uxr_seq_num_sub>
 801bbb6:	8a61      	ldrh	r1, [r4, #18]
 801bbb8:	f000 f856 	bl	801bc68 <uxr_seq_num_sub>
 801bbbc:	b1c8      	cbz	r0, 801bbf2 <uxr_process_acknack+0x4a>
 801bbbe:	4605      	mov	r5, r0
 801bbc0:	2700      	movs	r7, #0
 801bbc2:	2101      	movs	r1, #1
 801bbc4:	8a60      	ldrh	r0, [r4, #18]
 801bbc6:	f000 f84b 	bl	801bc60 <uxr_seq_num_add>
 801bbca:	8923      	ldrh	r3, [r4, #8]
 801bbcc:	6862      	ldr	r2, [r4, #4]
 801bbce:	3701      	adds	r7, #1
 801bbd0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801bbd4:	6821      	ldr	r1, [r4, #0]
 801bbd6:	42bd      	cmp	r5, r7
 801bbd8:	8260      	strh	r0, [r4, #18]
 801bbda:	fbb0 fef3 	udiv	lr, r0, r3
 801bbde:	fbb2 f2f3 	udiv	r2, r2, r3
 801bbe2:	fb03 031e 	mls	r3, r3, lr, r0
 801bbe6:	b29b      	uxth	r3, r3
 801bbe8:	fb02 f303 	mul.w	r3, r2, r3
 801bbec:	f841 c003 	str.w	ip, [r1, r3]
 801bbf0:	d1e7      	bne.n	801bbc2 <uxr_process_acknack+0x1a>
 801bbf2:	3e00      	subs	r6, #0
 801bbf4:	f04f 0300 	mov.w	r3, #0
 801bbf8:	bf18      	it	ne
 801bbfa:	2601      	movne	r6, #1
 801bbfc:	f884 3020 	strb.w	r3, [r4, #32]
 801bc00:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801bc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc06:	bf00      	nop

0801bc08 <uxr_is_output_up_to_date>:
 801bc08:	8a01      	ldrh	r1, [r0, #16]
 801bc0a:	8a40      	ldrh	r0, [r0, #18]
 801bc0c:	b508      	push	{r3, lr}
 801bc0e:	f000 f82f 	bl	801bc70 <uxr_seq_num_cmp>
 801bc12:	fab0 f080 	clz	r0, r0
 801bc16:	0940      	lsrs	r0, r0, #5
 801bc18:	bd08      	pop	{r3, pc}
 801bc1a:	bf00      	nop

0801bc1c <get_available_free_slots>:
 801bc1c:	8901      	ldrh	r1, [r0, #8]
 801bc1e:	b1e1      	cbz	r1, 801bc5a <get_available_free_slots+0x3e>
 801bc20:	6843      	ldr	r3, [r0, #4]
 801bc22:	f04f 0c00 	mov.w	ip, #0
 801bc26:	b530      	push	{r4, r5, lr}
 801bc28:	fbb3 fef1 	udiv	lr, r3, r1
 801bc2c:	6805      	ldr	r5, [r0, #0]
 801bc2e:	4662      	mov	r2, ip
 801bc30:	7b04      	ldrb	r4, [r0, #12]
 801bc32:	4660      	mov	r0, ip
 801bc34:	f10c 0c01 	add.w	ip, ip, #1
 801bc38:	fbb2 f3f1 	udiv	r3, r2, r1
 801bc3c:	fb01 2313 	mls	r3, r1, r3, r2
 801bc40:	fa1f f28c 	uxth.w	r2, ip
 801bc44:	b29b      	uxth	r3, r3
 801bc46:	fb0e f303 	mul.w	r3, lr, r3
 801bc4a:	58eb      	ldr	r3, [r5, r3]
 801bc4c:	429c      	cmp	r4, r3
 801bc4e:	d101      	bne.n	801bc54 <get_available_free_slots+0x38>
 801bc50:	3001      	adds	r0, #1
 801bc52:	b280      	uxth	r0, r0
 801bc54:	428a      	cmp	r2, r1
 801bc56:	d3ed      	bcc.n	801bc34 <get_available_free_slots+0x18>
 801bc58:	bd30      	pop	{r4, r5, pc}
 801bc5a:	4608      	mov	r0, r1
 801bc5c:	4770      	bx	lr
 801bc5e:	bf00      	nop

0801bc60 <uxr_seq_num_add>:
 801bc60:	4408      	add	r0, r1
 801bc62:	b280      	uxth	r0, r0
 801bc64:	4770      	bx	lr
 801bc66:	bf00      	nop

0801bc68 <uxr_seq_num_sub>:
 801bc68:	1a40      	subs	r0, r0, r1
 801bc6a:	b280      	uxth	r0, r0
 801bc6c:	4770      	bx	lr
 801bc6e:	bf00      	nop

0801bc70 <uxr_seq_num_cmp>:
 801bc70:	4288      	cmp	r0, r1
 801bc72:	d011      	beq.n	801bc98 <uxr_seq_num_cmp+0x28>
 801bc74:	d309      	bcc.n	801bc8a <uxr_seq_num_cmp+0x1a>
 801bc76:	4288      	cmp	r0, r1
 801bc78:	d910      	bls.n	801bc9c <uxr_seq_num_cmp+0x2c>
 801bc7a:	1a40      	subs	r0, r0, r1
 801bc7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801bc80:	bfd4      	ite	le
 801bc82:	2001      	movle	r0, #1
 801bc84:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801bc88:	4770      	bx	lr
 801bc8a:	1a0b      	subs	r3, r1, r0
 801bc8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bc90:	daf1      	bge.n	801bc76 <uxr_seq_num_cmp+0x6>
 801bc92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc96:	4770      	bx	lr
 801bc98:	2000      	movs	r0, #0
 801bc9a:	4770      	bx	lr
 801bc9c:	2001      	movs	r0, #1
 801bc9e:	4770      	bx	lr

0801bca0 <rcl_get_default_domain_id>:
 801bca0:	b530      	push	{r4, r5, lr}
 801bca2:	2300      	movs	r3, #0
 801bca4:	b083      	sub	sp, #12
 801bca6:	9300      	str	r3, [sp, #0]
 801bca8:	b1d0      	cbz	r0, 801bce0 <rcl_get_default_domain_id+0x40>
 801bcaa:	4604      	mov	r4, r0
 801bcac:	4669      	mov	r1, sp
 801bcae:	4815      	ldr	r0, [pc, #84]	@ (801bd04 <rcl_get_default_domain_id+0x64>)
 801bcb0:	f7fd ffae 	bl	8019c10 <rcutils_get_env>
 801bcb4:	4602      	mov	r2, r0
 801bcb6:	b110      	cbz	r0, 801bcbe <rcl_get_default_domain_id+0x1e>
 801bcb8:	2001      	movs	r0, #1
 801bcba:	b003      	add	sp, #12
 801bcbc:	bd30      	pop	{r4, r5, pc}
 801bcbe:	9b00      	ldr	r3, [sp, #0]
 801bcc0:	b18b      	cbz	r3, 801bce6 <rcl_get_default_domain_id+0x46>
 801bcc2:	7818      	ldrb	r0, [r3, #0]
 801bcc4:	2800      	cmp	r0, #0
 801bcc6:	d0f8      	beq.n	801bcba <rcl_get_default_domain_id+0x1a>
 801bcc8:	a901      	add	r1, sp, #4
 801bcca:	4618      	mov	r0, r3
 801bccc:	9201      	str	r2, [sp, #4]
 801bcce:	f000 fe2d 	bl	801c92c <strtoul>
 801bcd2:	4605      	mov	r5, r0
 801bcd4:	b150      	cbz	r0, 801bcec <rcl_get_default_domain_id+0x4c>
 801bcd6:	1c43      	adds	r3, r0, #1
 801bcd8:	d00d      	beq.n	801bcf6 <rcl_get_default_domain_id+0x56>
 801bcda:	2000      	movs	r0, #0
 801bcdc:	6025      	str	r5, [r4, #0]
 801bcde:	e7ec      	b.n	801bcba <rcl_get_default_domain_id+0x1a>
 801bce0:	200b      	movs	r0, #11
 801bce2:	b003      	add	sp, #12
 801bce4:	bd30      	pop	{r4, r5, pc}
 801bce6:	4618      	mov	r0, r3
 801bce8:	b003      	add	sp, #12
 801bcea:	bd30      	pop	{r4, r5, pc}
 801bcec:	9b01      	ldr	r3, [sp, #4]
 801bcee:	781b      	ldrb	r3, [r3, #0]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d0f2      	beq.n	801bcda <rcl_get_default_domain_id+0x3a>
 801bcf4:	e7e0      	b.n	801bcb8 <rcl_get_default_domain_id+0x18>
 801bcf6:	f001 f953 	bl	801cfa0 <__errno>
 801bcfa:	6803      	ldr	r3, [r0, #0]
 801bcfc:	2b22      	cmp	r3, #34	@ 0x22
 801bcfe:	d1ec      	bne.n	801bcda <rcl_get_default_domain_id+0x3a>
 801bd00:	e7da      	b.n	801bcb8 <rcl_get_default_domain_id+0x18>
 801bd02:	bf00      	nop
 801bd04:	0801eb30 	.word	0x0801eb30

0801bd08 <rcl_expand_topic_name>:
 801bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0c:	b08d      	sub	sp, #52	@ 0x34
 801bd0e:	4698      	mov	r8, r3
 801bd10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bd12:	9207      	str	r2, [sp, #28]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	bf18      	it	ne
 801bd18:	f1b8 0f00 	cmpne.w	r8, #0
 801bd1c:	bf0c      	ite	eq
 801bd1e:	2301      	moveq	r3, #1
 801bd20:	2300      	movne	r3, #0
 801bd22:	2a00      	cmp	r2, #0
 801bd24:	bf08      	it	eq
 801bd26:	f043 0301 	orreq.w	r3, r3, #1
 801bd2a:	2900      	cmp	r1, #0
 801bd2c:	bf08      	it	eq
 801bd2e:	f043 0301 	orreq.w	r3, r3, #1
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d13d      	bne.n	801bdb2 <rcl_expand_topic_name+0xaa>
 801bd36:	fab0 f280 	clz	r2, r0
 801bd3a:	4604      	mov	r4, r0
 801bd3c:	0952      	lsrs	r2, r2, #5
 801bd3e:	2800      	cmp	r0, #0
 801bd40:	d037      	beq.n	801bdb2 <rcl_expand_topic_name+0xaa>
 801bd42:	460f      	mov	r7, r1
 801bd44:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd46:	f000 fa51 	bl	801c1ec <rcl_validate_topic_name>
 801bd4a:	4605      	mov	r5, r0
 801bd4c:	bb68      	cbnz	r0, 801bdaa <rcl_expand_topic_name+0xa2>
 801bd4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d137      	bne.n	801bdc4 <rcl_expand_topic_name+0xbc>
 801bd54:	4602      	mov	r2, r0
 801bd56:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd58:	4638      	mov	r0, r7
 801bd5a:	f7fe fbbb 	bl	801a4d4 <rmw_validate_node_name>
 801bd5e:	bb68      	cbnz	r0, 801bdbc <rcl_expand_topic_name+0xb4>
 801bd60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d133      	bne.n	801bdce <rcl_expand_topic_name+0xc6>
 801bd66:	462a      	mov	r2, r5
 801bd68:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd6a:	9807      	ldr	r0, [sp, #28]
 801bd6c:	f7fe fb94 	bl	801a498 <rmw_validate_namespace>
 801bd70:	bb20      	cbnz	r0, 801bdbc <rcl_expand_topic_name+0xb4>
 801bd72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bd74:	2d00      	cmp	r5, #0
 801bd76:	f040 80a2 	bne.w	801bebe <rcl_expand_topic_name+0x1b6>
 801bd7a:	217b      	movs	r1, #123	@ 0x7b
 801bd7c:	4620      	mov	r0, r4
 801bd7e:	f001 f883 	bl	801ce88 <strchr>
 801bd82:	7823      	ldrb	r3, [r4, #0]
 801bd84:	4681      	mov	r9, r0
 801bd86:	bb20      	cbnz	r0, 801bdd2 <rcl_expand_topic_name+0xca>
 801bd88:	2b2f      	cmp	r3, #47	@ 0x2f
 801bd8a:	d122      	bne.n	801bdd2 <rcl_expand_topic_name+0xca>
 801bd8c:	ab19      	add	r3, sp, #100	@ 0x64
 801bd8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bd92:	ab16      	add	r3, sp, #88	@ 0x58
 801bd94:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bd98:	4620      	mov	r0, r4
 801bd9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bd9c:	f7fe f89a 	bl	8019ed4 <rcutils_strdup>
 801bda0:	2800      	cmp	r0, #0
 801bda2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bda4:	bf08      	it	eq
 801bda6:	250a      	moveq	r5, #10
 801bda8:	6018      	str	r0, [r3, #0]
 801bdaa:	4628      	mov	r0, r5
 801bdac:	b00d      	add	sp, #52	@ 0x34
 801bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb2:	250b      	movs	r5, #11
 801bdb4:	4628      	mov	r0, r5
 801bdb6:	b00d      	add	sp, #52	@ 0x34
 801bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdbc:	f7fb f8e2 	bl	8016f84 <rcl_convert_rmw_ret_to_rcl_ret>
 801bdc0:	4605      	mov	r5, r0
 801bdc2:	e7f2      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801bdc4:	2567      	movs	r5, #103	@ 0x67
 801bdc6:	4628      	mov	r0, r5
 801bdc8:	b00d      	add	sp, #52	@ 0x34
 801bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdce:	25c9      	movs	r5, #201	@ 0xc9
 801bdd0:	e7eb      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801bdd2:	2b7e      	cmp	r3, #126	@ 0x7e
 801bdd4:	d075      	beq.n	801bec2 <rcl_expand_topic_name+0x1ba>
 801bdd6:	f1b9 0f00 	cmp.w	r9, #0
 801bdda:	f000 80c2 	beq.w	801bf62 <rcl_expand_topic_name+0x25a>
 801bdde:	2300      	movs	r3, #0
 801bde0:	46a2      	mov	sl, r4
 801bde2:	461e      	mov	r6, r3
 801bde4:	9508      	str	r5, [sp, #32]
 801bde6:	4655      	mov	r5, sl
 801bde8:	9409      	str	r4, [sp, #36]	@ 0x24
 801bdea:	46b2      	mov	sl, r6
 801bdec:	464c      	mov	r4, r9
 801bdee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bdf2:	2c00      	cmp	r4, #0
 801bdf4:	f000 80ae 	beq.w	801bf54 <rcl_expand_topic_name+0x24c>
 801bdf8:	217d      	movs	r1, #125	@ 0x7d
 801bdfa:	4628      	mov	r0, r5
 801bdfc:	f001 f844 	bl	801ce88 <strchr>
 801be00:	eba0 0904 	sub.w	r9, r0, r4
 801be04:	4621      	mov	r1, r4
 801be06:	4869      	ldr	r0, [pc, #420]	@ (801bfac <rcl_expand_topic_name+0x2a4>)
 801be08:	f109 0601 	add.w	r6, r9, #1
 801be0c:	4632      	mov	r2, r6
 801be0e:	f001 f848 	bl	801cea2 <strncmp>
 801be12:	2800      	cmp	r0, #0
 801be14:	d051      	beq.n	801beba <rcl_expand_topic_name+0x1b2>
 801be16:	4632      	mov	r2, r6
 801be18:	4621      	mov	r1, r4
 801be1a:	4865      	ldr	r0, [pc, #404]	@ (801bfb0 <rcl_expand_topic_name+0x2a8>)
 801be1c:	f001 f841 	bl	801cea2 <strncmp>
 801be20:	b128      	cbz	r0, 801be2e <rcl_expand_topic_name+0x126>
 801be22:	4632      	mov	r2, r6
 801be24:	4621      	mov	r1, r4
 801be26:	4863      	ldr	r0, [pc, #396]	@ (801bfb4 <rcl_expand_topic_name+0x2ac>)
 801be28:	f001 f83b 	bl	801cea2 <strncmp>
 801be2c:	bb38      	cbnz	r0, 801be7e <rcl_expand_topic_name+0x176>
 801be2e:	46d9      	mov	r9, fp
 801be30:	ab18      	add	r3, sp, #96	@ 0x60
 801be32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801be36:	ab16      	add	r3, sp, #88	@ 0x58
 801be38:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be3c:	4620      	mov	r0, r4
 801be3e:	4631      	mov	r1, r6
 801be40:	cb0c      	ldmia	r3, {r2, r3}
 801be42:	f7fe f869 	bl	8019f18 <rcutils_strndup>
 801be46:	4604      	mov	r4, r0
 801be48:	2800      	cmp	r0, #0
 801be4a:	f000 80a3 	beq.w	801bf94 <rcl_expand_topic_name+0x28c>
 801be4e:	464a      	mov	r2, r9
 801be50:	4628      	mov	r0, r5
 801be52:	ab16      	add	r3, sp, #88	@ 0x58
 801be54:	4621      	mov	r1, r4
 801be56:	f7fd ff3d 	bl	8019cd4 <rcutils_repl_str>
 801be5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be5c:	4605      	mov	r5, r0
 801be5e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be60:	4620      	mov	r0, r4
 801be62:	4798      	blx	r3
 801be64:	4650      	mov	r0, sl
 801be66:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be6a:	4798      	blx	r3
 801be6c:	2d00      	cmp	r5, #0
 801be6e:	d06c      	beq.n	801bf4a <rcl_expand_topic_name+0x242>
 801be70:	217b      	movs	r1, #123	@ 0x7b
 801be72:	4628      	mov	r0, r5
 801be74:	f001 f808 	bl	801ce88 <strchr>
 801be78:	46aa      	mov	sl, r5
 801be7a:	4604      	mov	r4, r0
 801be7c:	e7b9      	b.n	801bdf2 <rcl_expand_topic_name+0xea>
 801be7e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801be82:	1c61      	adds	r1, r4, #1
 801be84:	4640      	mov	r0, r8
 801be86:	f7fe f95f 	bl	801a148 <rcutils_string_map_getn>
 801be8a:	4681      	mov	r9, r0
 801be8c:	2800      	cmp	r0, #0
 801be8e:	d1cf      	bne.n	801be30 <rcl_expand_topic_name+0x128>
 801be90:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801be92:	aa18      	add	r2, sp, #96	@ 0x60
 801be94:	2569      	movs	r5, #105	@ 0x69
 801be96:	6018      	str	r0, [r3, #0]
 801be98:	ab16      	add	r3, sp, #88	@ 0x58
 801be9a:	ca07      	ldmia	r2, {r0, r1, r2}
 801be9c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bea0:	4631      	mov	r1, r6
 801bea2:	4620      	mov	r0, r4
 801bea4:	cb0c      	ldmia	r3, {r2, r3}
 801bea6:	f7fe f837 	bl	8019f18 <rcutils_strndup>
 801beaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801beac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801beae:	4798      	blx	r3
 801beb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801beb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801beb4:	4650      	mov	r0, sl
 801beb6:	4798      	blx	r3
 801beb8:	e777      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801beba:	46b9      	mov	r9, r7
 801bebc:	e7b8      	b.n	801be30 <rcl_expand_topic_name+0x128>
 801bebe:	25ca      	movs	r5, #202	@ 0xca
 801bec0:	e773      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801bec2:	9e07      	ldr	r6, [sp, #28]
 801bec4:	4630      	mov	r0, r6
 801bec6:	f7e4 fa15 	bl	80002f4 <strlen>
 801beca:	4a3b      	ldr	r2, [pc, #236]	@ (801bfb8 <rcl_expand_topic_name+0x2b0>)
 801becc:	4b3b      	ldr	r3, [pc, #236]	@ (801bfbc <rcl_expand_topic_name+0x2b4>)
 801bece:	9603      	str	r6, [sp, #12]
 801bed0:	2801      	cmp	r0, #1
 801bed2:	bf18      	it	ne
 801bed4:	4613      	movne	r3, r2
 801bed6:	9704      	str	r7, [sp, #16]
 801bed8:	9302      	str	r3, [sp, #8]
 801beda:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801bedc:	9300      	str	r3, [sp, #0]
 801bede:	1c63      	adds	r3, r4, #1
 801bee0:	9305      	str	r3, [sp, #20]
 801bee2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bee6:	9301      	str	r3, [sp, #4]
 801bee8:	ab16      	add	r3, sp, #88	@ 0x58
 801beea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801beec:	f7fd feb8 	bl	8019c60 <rcutils_format_string_limit>
 801bef0:	4606      	mov	r6, r0
 801bef2:	b350      	cbz	r0, 801bf4a <rcl_expand_topic_name+0x242>
 801bef4:	f1b9 0f00 	cmp.w	r9, #0
 801bef8:	d005      	beq.n	801bf06 <rcl_expand_topic_name+0x1fe>
 801befa:	217b      	movs	r1, #123	@ 0x7b
 801befc:	46b2      	mov	sl, r6
 801befe:	f000 ffc3 	bl	801ce88 <strchr>
 801bf02:	4681      	mov	r9, r0
 801bf04:	e76e      	b.n	801bde4 <rcl_expand_topic_name+0xdc>
 801bf06:	7833      	ldrb	r3, [r6, #0]
 801bf08:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf0a:	d01b      	beq.n	801bf44 <rcl_expand_topic_name+0x23c>
 801bf0c:	9c07      	ldr	r4, [sp, #28]
 801bf0e:	4620      	mov	r0, r4
 801bf10:	f7e4 f9f0 	bl	80002f4 <strlen>
 801bf14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf18:	4a29      	ldr	r2, [pc, #164]	@ (801bfc0 <rcl_expand_topic_name+0x2b8>)
 801bf1a:	9301      	str	r3, [sp, #4]
 801bf1c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801bf1e:	9604      	str	r6, [sp, #16]
 801bf20:	9300      	str	r3, [sp, #0]
 801bf22:	4b28      	ldr	r3, [pc, #160]	@ (801bfc4 <rcl_expand_topic_name+0x2bc>)
 801bf24:	9403      	str	r4, [sp, #12]
 801bf26:	2801      	cmp	r0, #1
 801bf28:	bf18      	it	ne
 801bf2a:	4613      	movne	r3, r2
 801bf2c:	9302      	str	r3, [sp, #8]
 801bf2e:	ab16      	add	r3, sp, #88	@ 0x58
 801bf30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf32:	f7fd fe95 	bl	8019c60 <rcutils_format_string_limit>
 801bf36:	4603      	mov	r3, r0
 801bf38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801bf3a:	4630      	mov	r0, r6
 801bf3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bf3e:	461e      	mov	r6, r3
 801bf40:	4790      	blx	r2
 801bf42:	b116      	cbz	r6, 801bf4a <rcl_expand_topic_name+0x242>
 801bf44:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bf46:	601e      	str	r6, [r3, #0]
 801bf48:	e72f      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bf4e:	250a      	movs	r5, #10
 801bf50:	6013      	str	r3, [r2, #0]
 801bf52:	e72a      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801bf54:	4653      	mov	r3, sl
 801bf56:	4656      	mov	r6, sl
 801bf58:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d1d2      	bne.n	801bf06 <rcl_expand_topic_name+0x1fe>
 801bf60:	7823      	ldrb	r3, [r4, #0]
 801bf62:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf64:	d01e      	beq.n	801bfa4 <rcl_expand_topic_name+0x29c>
 801bf66:	9e07      	ldr	r6, [sp, #28]
 801bf68:	4630      	mov	r0, r6
 801bf6a:	f7e4 f9c3 	bl	80002f4 <strlen>
 801bf6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bf70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf74:	9603      	str	r6, [sp, #12]
 801bf76:	9404      	str	r4, [sp, #16]
 801bf78:	e9cd 2300 	strd	r2, r3, [sp]
 801bf7c:	4a10      	ldr	r2, [pc, #64]	@ (801bfc0 <rcl_expand_topic_name+0x2b8>)
 801bf7e:	4b11      	ldr	r3, [pc, #68]	@ (801bfc4 <rcl_expand_topic_name+0x2bc>)
 801bf80:	2801      	cmp	r0, #1
 801bf82:	bf18      	it	ne
 801bf84:	4613      	movne	r3, r2
 801bf86:	9302      	str	r3, [sp, #8]
 801bf88:	ab16      	add	r3, sp, #88	@ 0x58
 801bf8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf8c:	f7fd fe68 	bl	8019c60 <rcutils_format_string_limit>
 801bf90:	4606      	mov	r6, r0
 801bf92:	e7d6      	b.n	801bf42 <rcl_expand_topic_name+0x23a>
 801bf94:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801bf98:	4650      	mov	r0, sl
 801bf9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bf9c:	6014      	str	r4, [r2, #0]
 801bf9e:	250a      	movs	r5, #10
 801bfa0:	4798      	blx	r3
 801bfa2:	e702      	b.n	801bdaa <rcl_expand_topic_name+0xa2>
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	461e      	mov	r6, r3
 801bfa8:	e7cc      	b.n	801bf44 <rcl_expand_topic_name+0x23c>
 801bfaa:	bf00      	nop
 801bfac:	0801eb48 	.word	0x0801eb48
 801bfb0:	0801eb50 	.word	0x0801eb50
 801bfb4:	0801eb58 	.word	0x0801eb58
 801bfb8:	0801eb40 	.word	0x0801eb40
 801bfbc:	0801df38 	.word	0x0801df38
 801bfc0:	0801df00 	.word	0x0801df00
 801bfc4:	0801df48 	.word	0x0801df48

0801bfc8 <rcl_get_default_topic_name_substitutions>:
 801bfc8:	2800      	cmp	r0, #0
 801bfca:	bf0c      	ite	eq
 801bfcc:	200b      	moveq	r0, #11
 801bfce:	2000      	movne	r0, #0
 801bfd0:	4770      	bx	lr
 801bfd2:	bf00      	nop

0801bfd4 <rcl_get_zero_initialized_guard_condition>:
 801bfd4:	4a03      	ldr	r2, [pc, #12]	@ (801bfe4 <rcl_get_zero_initialized_guard_condition+0x10>)
 801bfd6:	4603      	mov	r3, r0
 801bfd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bfdc:	e883 0003 	stmia.w	r3, {r0, r1}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	4770      	bx	lr
 801bfe4:	0801eb64 	.word	0x0801eb64

0801bfe8 <rcl_guard_condition_init>:
 801bfe8:	b082      	sub	sp, #8
 801bfea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfec:	b087      	sub	sp, #28
 801bfee:	4604      	mov	r4, r0
 801bff0:	460d      	mov	r5, r1
 801bff2:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801bff6:	f10d 0c04 	add.w	ip, sp, #4
 801bffa:	e9ce 2300 	strd	r2, r3, [lr]
 801bffe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c002:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c006:	f8de 3000 	ldr.w	r3, [lr]
 801c00a:	a801      	add	r0, sp, #4
 801c00c:	f8cc 3000 	str.w	r3, [ip]
 801c010:	f7f3 fec2 	bl	800fd98 <rcutils_allocator_is_valid>
 801c014:	b354      	cbz	r4, 801c06c <rcl_guard_condition_init+0x84>
 801c016:	f080 0301 	eor.w	r3, r0, #1
 801c01a:	b2db      	uxtb	r3, r3
 801c01c:	bb33      	cbnz	r3, 801c06c <rcl_guard_condition_init+0x84>
 801c01e:	6866      	ldr	r6, [r4, #4]
 801c020:	b9ee      	cbnz	r6, 801c05e <rcl_guard_condition_init+0x76>
 801c022:	b31d      	cbz	r5, 801c06c <rcl_guard_condition_init+0x84>
 801c024:	4628      	mov	r0, r5
 801c026:	f7fa ffcb 	bl	8016fc0 <rcl_context_is_valid>
 801c02a:	b308      	cbz	r0, 801c070 <rcl_guard_condition_init+0x88>
 801c02c:	9b01      	ldr	r3, [sp, #4]
 801c02e:	201c      	movs	r0, #28
 801c030:	9905      	ldr	r1, [sp, #20]
 801c032:	4798      	blx	r3
 801c034:	4607      	mov	r7, r0
 801c036:	6060      	str	r0, [r4, #4]
 801c038:	b310      	cbz	r0, 801c080 <rcl_guard_condition_init+0x98>
 801c03a:	6828      	ldr	r0, [r5, #0]
 801c03c:	3028      	adds	r0, #40	@ 0x28
 801c03e:	f000 f999 	bl	801c374 <rmw_create_guard_condition>
 801c042:	6038      	str	r0, [r7, #0]
 801c044:	6860      	ldr	r0, [r4, #4]
 801c046:	6807      	ldr	r7, [r0, #0]
 801c048:	b1a7      	cbz	r7, 801c074 <rcl_guard_condition_init+0x8c>
 801c04a:	2301      	movs	r3, #1
 801c04c:	ac01      	add	r4, sp, #4
 801c04e:	f100 0708 	add.w	r7, r0, #8
 801c052:	7103      	strb	r3, [r0, #4]
 801c054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c056:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c058:	6823      	ldr	r3, [r4, #0]
 801c05a:	603b      	str	r3, [r7, #0]
 801c05c:	e000      	b.n	801c060 <rcl_guard_condition_init+0x78>
 801c05e:	2664      	movs	r6, #100	@ 0x64
 801c060:	4630      	mov	r0, r6
 801c062:	b007      	add	sp, #28
 801c064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c068:	b002      	add	sp, #8
 801c06a:	4770      	bx	lr
 801c06c:	260b      	movs	r6, #11
 801c06e:	e7f7      	b.n	801c060 <rcl_guard_condition_init+0x78>
 801c070:	2665      	movs	r6, #101	@ 0x65
 801c072:	e7f5      	b.n	801c060 <rcl_guard_condition_init+0x78>
 801c074:	9b02      	ldr	r3, [sp, #8]
 801c076:	2601      	movs	r6, #1
 801c078:	9905      	ldr	r1, [sp, #20]
 801c07a:	4798      	blx	r3
 801c07c:	6067      	str	r7, [r4, #4]
 801c07e:	e7ef      	b.n	801c060 <rcl_guard_condition_init+0x78>
 801c080:	260a      	movs	r6, #10
 801c082:	e7ed      	b.n	801c060 <rcl_guard_condition_init+0x78>

0801c084 <rcl_guard_condition_init_from_rmw>:
 801c084:	b082      	sub	sp, #8
 801c086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c08a:	b086      	sub	sp, #24
 801c08c:	4604      	mov	r4, r0
 801c08e:	460e      	mov	r6, r1
 801c090:	4615      	mov	r5, r2
 801c092:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c096:	f10d 0e04 	add.w	lr, sp, #4
 801c09a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801c09e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c0a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c0a6:	f8dc 3000 	ldr.w	r3, [ip]
 801c0aa:	a801      	add	r0, sp, #4
 801c0ac:	f8ce 3000 	str.w	r3, [lr]
 801c0b0:	f7f3 fe72 	bl	800fd98 <rcutils_allocator_is_valid>
 801c0b4:	f080 0301 	eor.w	r3, r0, #1
 801c0b8:	b2db      	uxtb	r3, r3
 801c0ba:	bb3b      	cbnz	r3, 801c10c <rcl_guard_condition_init_from_rmw+0x88>
 801c0bc:	b334      	cbz	r4, 801c10c <rcl_guard_condition_init_from_rmw+0x88>
 801c0be:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801c0c2:	f1b8 0f00 	cmp.w	r8, #0
 801c0c6:	d11a      	bne.n	801c0fe <rcl_guard_condition_init_from_rmw+0x7a>
 801c0c8:	b305      	cbz	r5, 801c10c <rcl_guard_condition_init_from_rmw+0x88>
 801c0ca:	4628      	mov	r0, r5
 801c0cc:	f7fa ff78 	bl	8016fc0 <rcl_context_is_valid>
 801c0d0:	b1f0      	cbz	r0, 801c110 <rcl_guard_condition_init_from_rmw+0x8c>
 801c0d2:	9b01      	ldr	r3, [sp, #4]
 801c0d4:	201c      	movs	r0, #28
 801c0d6:	9905      	ldr	r1, [sp, #20]
 801c0d8:	4798      	blx	r3
 801c0da:	4607      	mov	r7, r0
 801c0dc:	6060      	str	r0, [r4, #4]
 801c0de:	b320      	cbz	r0, 801c12a <rcl_guard_condition_init_from_rmw+0xa6>
 801c0e0:	b1c6      	cbz	r6, 801c114 <rcl_guard_condition_init_from_rmw+0x90>
 801c0e2:	6006      	str	r6, [r0, #0]
 801c0e4:	f880 8004 	strb.w	r8, [r0, #4]
 801c0e8:	ac01      	add	r4, sp, #4
 801c0ea:	f107 0c08 	add.w	ip, r7, #8
 801c0ee:	2500      	movs	r5, #0
 801c0f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0f6:	6823      	ldr	r3, [r4, #0]
 801c0f8:	f8cc 3000 	str.w	r3, [ip]
 801c0fc:	e000      	b.n	801c100 <rcl_guard_condition_init_from_rmw+0x7c>
 801c0fe:	2564      	movs	r5, #100	@ 0x64
 801c100:	4628      	mov	r0, r5
 801c102:	b006      	add	sp, #24
 801c104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c108:	b002      	add	sp, #8
 801c10a:	4770      	bx	lr
 801c10c:	250b      	movs	r5, #11
 801c10e:	e7f7      	b.n	801c100 <rcl_guard_condition_init_from_rmw+0x7c>
 801c110:	2565      	movs	r5, #101	@ 0x65
 801c112:	e7f5      	b.n	801c100 <rcl_guard_condition_init_from_rmw+0x7c>
 801c114:	6828      	ldr	r0, [r5, #0]
 801c116:	3028      	adds	r0, #40	@ 0x28
 801c118:	f000 f92c 	bl	801c374 <rmw_create_guard_condition>
 801c11c:	6038      	str	r0, [r7, #0]
 801c11e:	6867      	ldr	r7, [r4, #4]
 801c120:	683e      	ldr	r6, [r7, #0]
 801c122:	b126      	cbz	r6, 801c12e <rcl_guard_condition_init_from_rmw+0xaa>
 801c124:	2301      	movs	r3, #1
 801c126:	713b      	strb	r3, [r7, #4]
 801c128:	e7de      	b.n	801c0e8 <rcl_guard_condition_init_from_rmw+0x64>
 801c12a:	250a      	movs	r5, #10
 801c12c:	e7e8      	b.n	801c100 <rcl_guard_condition_init_from_rmw+0x7c>
 801c12e:	9b02      	ldr	r3, [sp, #8]
 801c130:	4638      	mov	r0, r7
 801c132:	9905      	ldr	r1, [sp, #20]
 801c134:	2501      	movs	r5, #1
 801c136:	4798      	blx	r3
 801c138:	6066      	str	r6, [r4, #4]
 801c13a:	e7e1      	b.n	801c100 <rcl_guard_condition_init_from_rmw+0x7c>

0801c13c <rcl_guard_condition_fini>:
 801c13c:	b570      	push	{r4, r5, r6, lr}
 801c13e:	b082      	sub	sp, #8
 801c140:	b1f0      	cbz	r0, 801c180 <rcl_guard_condition_fini+0x44>
 801c142:	6843      	ldr	r3, [r0, #4]
 801c144:	4604      	mov	r4, r0
 801c146:	b163      	cbz	r3, 801c162 <rcl_guard_condition_fini+0x26>
 801c148:	6818      	ldr	r0, [r3, #0]
 801c14a:	68de      	ldr	r6, [r3, #12]
 801c14c:	6999      	ldr	r1, [r3, #24]
 801c14e:	b160      	cbz	r0, 801c16a <rcl_guard_condition_fini+0x2e>
 801c150:	791d      	ldrb	r5, [r3, #4]
 801c152:	b965      	cbnz	r5, 801c16e <rcl_guard_condition_fini+0x32>
 801c154:	4618      	mov	r0, r3
 801c156:	47b0      	blx	r6
 801c158:	2300      	movs	r3, #0
 801c15a:	4628      	mov	r0, r5
 801c15c:	6063      	str	r3, [r4, #4]
 801c15e:	b002      	add	sp, #8
 801c160:	bd70      	pop	{r4, r5, r6, pc}
 801c162:	461d      	mov	r5, r3
 801c164:	4628      	mov	r0, r5
 801c166:	b002      	add	sp, #8
 801c168:	bd70      	pop	{r4, r5, r6, pc}
 801c16a:	4605      	mov	r5, r0
 801c16c:	e7f2      	b.n	801c154 <rcl_guard_condition_fini+0x18>
 801c16e:	9101      	str	r1, [sp, #4]
 801c170:	f000 f916 	bl	801c3a0 <rmw_destroy_guard_condition>
 801c174:	1e05      	subs	r5, r0, #0
 801c176:	6863      	ldr	r3, [r4, #4]
 801c178:	9901      	ldr	r1, [sp, #4]
 801c17a:	bf18      	it	ne
 801c17c:	2501      	movne	r5, #1
 801c17e:	e7e9      	b.n	801c154 <rcl_guard_condition_fini+0x18>
 801c180:	250b      	movs	r5, #11
 801c182:	4628      	mov	r0, r5
 801c184:	b002      	add	sp, #8
 801c186:	bd70      	pop	{r4, r5, r6, pc}

0801c188 <rcl_guard_condition_get_default_options>:
 801c188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c18a:	b087      	sub	sp, #28
 801c18c:	4606      	mov	r6, r0
 801c18e:	4c0b      	ldr	r4, [pc, #44]	@ (801c1bc <rcl_guard_condition_get_default_options+0x34>)
 801c190:	4668      	mov	r0, sp
 801c192:	f7f3 fdf3 	bl	800fd7c <rcutils_get_default_allocator>
 801c196:	46ee      	mov	lr, sp
 801c198:	46a4      	mov	ip, r4
 801c19a:	4625      	mov	r5, r4
 801c19c:	4634      	mov	r4, r6
 801c19e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c1a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1a8:	f8de 7000 	ldr.w	r7, [lr]
 801c1ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1ae:	4630      	mov	r0, r6
 801c1b0:	f8cc 7000 	str.w	r7, [ip]
 801c1b4:	6027      	str	r7, [r4, #0]
 801c1b6:	b007      	add	sp, #28
 801c1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1ba:	bf00      	nop
 801c1bc:	24013960 	.word	0x24013960

0801c1c0 <rcl_trigger_guard_condition>:
 801c1c0:	b148      	cbz	r0, 801c1d6 <rcl_trigger_guard_condition+0x16>
 801c1c2:	b508      	push	{r3, lr}
 801c1c4:	6843      	ldr	r3, [r0, #4]
 801c1c6:	b143      	cbz	r3, 801c1da <rcl_trigger_guard_condition+0x1a>
 801c1c8:	6818      	ldr	r0, [r3, #0]
 801c1ca:	f000 f8fd 	bl	801c3c8 <rmw_trigger_guard_condition>
 801c1ce:	3800      	subs	r0, #0
 801c1d0:	bf18      	it	ne
 801c1d2:	2001      	movne	r0, #1
 801c1d4:	bd08      	pop	{r3, pc}
 801c1d6:	200b      	movs	r0, #11
 801c1d8:	4770      	bx	lr
 801c1da:	200b      	movs	r0, #11
 801c1dc:	bd08      	pop	{r3, pc}
 801c1de:	bf00      	nop

0801c1e0 <rcl_guard_condition_get_rmw_handle>:
 801c1e0:	b110      	cbz	r0, 801c1e8 <rcl_guard_condition_get_rmw_handle+0x8>
 801c1e2:	6840      	ldr	r0, [r0, #4]
 801c1e4:	b100      	cbz	r0, 801c1e8 <rcl_guard_condition_get_rmw_handle+0x8>
 801c1e6:	6800      	ldr	r0, [r0, #0]
 801c1e8:	4770      	bx	lr
 801c1ea:	bf00      	nop

0801c1ec <rcl_validate_topic_name>:
 801c1ec:	2800      	cmp	r0, #0
 801c1ee:	f000 8089 	beq.w	801c304 <rcl_validate_topic_name+0x118>
 801c1f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1f6:	460e      	mov	r6, r1
 801c1f8:	2900      	cmp	r1, #0
 801c1fa:	f000 8085 	beq.w	801c308 <rcl_validate_topic_name+0x11c>
 801c1fe:	4604      	mov	r4, r0
 801c200:	4617      	mov	r7, r2
 801c202:	f7e4 f877 	bl	80002f4 <strlen>
 801c206:	b1b0      	cbz	r0, 801c236 <rcl_validate_topic_name+0x4a>
 801c208:	f894 e000 	ldrb.w	lr, [r4]
 801c20c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801c370 <rcl_validate_topic_name+0x184>
 801c210:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801c214:	f013 0304 	ands.w	r3, r3, #4
 801c218:	d139      	bne.n	801c28e <rcl_validate_topic_name+0xa2>
 801c21a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801c21e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801c222:	2a2f      	cmp	r2, #47	@ 0x2f
 801c224:	d10f      	bne.n	801c246 <rcl_validate_topic_name+0x5a>
 801c226:	2202      	movs	r2, #2
 801c228:	6032      	str	r2, [r6, #0]
 801c22a:	b3a7      	cbz	r7, 801c296 <rcl_validate_topic_name+0xaa>
 801c22c:	4618      	mov	r0, r3
 801c22e:	f8c7 8000 	str.w	r8, [r7]
 801c232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c236:	2301      	movs	r3, #1
 801c238:	6033      	str	r3, [r6, #0]
 801c23a:	b367      	cbz	r7, 801c296 <rcl_validate_topic_name+0xaa>
 801c23c:	2300      	movs	r3, #0
 801c23e:	4618      	mov	r0, r3
 801c240:	603b      	str	r3, [r7, #0]
 801c242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c246:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801c24a:	461d      	mov	r5, r3
 801c24c:	4619      	mov	r1, r3
 801c24e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801c252:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801c256:	f1b9 0f09 	cmp.w	r9, #9
 801c25a:	d91f      	bls.n	801c29c <rcl_validate_topic_name+0xb0>
 801c25c:	f022 0920 	bic.w	r9, r2, #32
 801c260:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801c264:	f1b9 0f19 	cmp.w	r9, #25
 801c268:	d918      	bls.n	801c29c <rcl_validate_topic_name+0xb0>
 801c26a:	2a5f      	cmp	r2, #95	@ 0x5f
 801c26c:	d024      	beq.n	801c2b8 <rcl_validate_topic_name+0xcc>
 801c26e:	2a2f      	cmp	r2, #47	@ 0x2f
 801c270:	d058      	beq.n	801c324 <rcl_validate_topic_name+0x138>
 801c272:	2a7e      	cmp	r2, #126	@ 0x7e
 801c274:	d04a      	beq.n	801c30c <rcl_validate_topic_name+0x120>
 801c276:	2a7b      	cmp	r2, #123	@ 0x7b
 801c278:	d05b      	beq.n	801c332 <rcl_validate_topic_name+0x146>
 801c27a:	2a7d      	cmp	r2, #125	@ 0x7d
 801c27c:	d169      	bne.n	801c352 <rcl_validate_topic_name+0x166>
 801c27e:	2d00      	cmp	r5, #0
 801c280:	d15c      	bne.n	801c33c <rcl_validate_topic_name+0x150>
 801c282:	2305      	movs	r3, #5
 801c284:	6033      	str	r3, [r6, #0]
 801c286:	b137      	cbz	r7, 801c296 <rcl_validate_topic_name+0xaa>
 801c288:	2000      	movs	r0, #0
 801c28a:	6039      	str	r1, [r7, #0]
 801c28c:	e7d9      	b.n	801c242 <rcl_validate_topic_name+0x56>
 801c28e:	2304      	movs	r3, #4
 801c290:	6033      	str	r3, [r6, #0]
 801c292:	2f00      	cmp	r7, #0
 801c294:	d1d2      	bne.n	801c23c <rcl_validate_topic_name+0x50>
 801c296:	2000      	movs	r0, #0
 801c298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c29c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c2a0:	0752      	lsls	r2, r2, #29
 801c2a2:	d509      	bpl.n	801c2b8 <rcl_validate_topic_name+0xcc>
 801c2a4:	2900      	cmp	r1, #0
 801c2a6:	bf0c      	ite	eq
 801c2a8:	2200      	moveq	r2, #0
 801c2aa:	f005 0201 	andne.w	r2, r5, #1
 801c2ae:	b11a      	cbz	r2, 801c2b8 <rcl_validate_topic_name+0xcc>
 801c2b0:	1e4d      	subs	r5, r1, #1
 801c2b2:	429d      	cmp	r5, r3
 801c2b4:	d031      	beq.n	801c31a <rcl_validate_topic_name+0x12e>
 801c2b6:	4615      	mov	r5, r2
 801c2b8:	3101      	adds	r1, #1
 801c2ba:	4288      	cmp	r0, r1
 801c2bc:	d1c7      	bne.n	801c24e <rcl_validate_topic_name+0x62>
 801c2be:	2d00      	cmp	r5, #0
 801c2c0:	d142      	bne.n	801c348 <rcl_validate_topic_name+0x15c>
 801c2c2:	4628      	mov	r0, r5
 801c2c4:	2301      	movs	r3, #1
 801c2c6:	e00c      	b.n	801c2e2 <rcl_validate_topic_name+0xf6>
 801c2c8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801c2cc:	d101      	bne.n	801c2d2 <rcl_validate_topic_name+0xe6>
 801c2ce:	2801      	cmp	r0, #1
 801c2d0:	d047      	beq.n	801c362 <rcl_validate_topic_name+0x176>
 801c2d2:	1c5a      	adds	r2, r3, #1
 801c2d4:	428b      	cmp	r3, r1
 801c2d6:	f100 0001 	add.w	r0, r0, #1
 801c2da:	f104 0401 	add.w	r4, r4, #1
 801c2de:	4613      	mov	r3, r2
 801c2e0:	d22e      	bcs.n	801c340 <rcl_validate_topic_name+0x154>
 801c2e2:	4580      	cmp	r8, r0
 801c2e4:	d0f5      	beq.n	801c2d2 <rcl_validate_topic_name+0xe6>
 801c2e6:	7822      	ldrb	r2, [r4, #0]
 801c2e8:	2a2f      	cmp	r2, #47	@ 0x2f
 801c2ea:	d1ed      	bne.n	801c2c8 <rcl_validate_topic_name+0xdc>
 801c2ec:	7862      	ldrb	r2, [r4, #1]
 801c2ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c2f2:	0752      	lsls	r2, r2, #29
 801c2f4:	d5ed      	bpl.n	801c2d2 <rcl_validate_topic_name+0xe6>
 801c2f6:	2204      	movs	r2, #4
 801c2f8:	6032      	str	r2, [r6, #0]
 801c2fa:	2f00      	cmp	r7, #0
 801c2fc:	d0cb      	beq.n	801c296 <rcl_validate_topic_name+0xaa>
 801c2fe:	2000      	movs	r0, #0
 801c300:	603b      	str	r3, [r7, #0]
 801c302:	e79e      	b.n	801c242 <rcl_validate_topic_name+0x56>
 801c304:	200b      	movs	r0, #11
 801c306:	4770      	bx	lr
 801c308:	200b      	movs	r0, #11
 801c30a:	e79a      	b.n	801c242 <rcl_validate_topic_name+0x56>
 801c30c:	2900      	cmp	r1, #0
 801c30e:	d0d3      	beq.n	801c2b8 <rcl_validate_topic_name+0xcc>
 801c310:	2306      	movs	r3, #6
 801c312:	6033      	str	r3, [r6, #0]
 801c314:	2f00      	cmp	r7, #0
 801c316:	d1b7      	bne.n	801c288 <rcl_validate_topic_name+0x9c>
 801c318:	e7bd      	b.n	801c296 <rcl_validate_topic_name+0xaa>
 801c31a:	2309      	movs	r3, #9
 801c31c:	6033      	str	r3, [r6, #0]
 801c31e:	2f00      	cmp	r7, #0
 801c320:	d1b2      	bne.n	801c288 <rcl_validate_topic_name+0x9c>
 801c322:	e7b8      	b.n	801c296 <rcl_validate_topic_name+0xaa>
 801c324:	2d00      	cmp	r5, #0
 801c326:	d0c7      	beq.n	801c2b8 <rcl_validate_topic_name+0xcc>
 801c328:	2308      	movs	r3, #8
 801c32a:	6033      	str	r3, [r6, #0]
 801c32c:	2f00      	cmp	r7, #0
 801c32e:	d1ab      	bne.n	801c288 <rcl_validate_topic_name+0x9c>
 801c330:	e7b1      	b.n	801c296 <rcl_validate_topic_name+0xaa>
 801c332:	2d00      	cmp	r5, #0
 801c334:	d1f8      	bne.n	801c328 <rcl_validate_topic_name+0x13c>
 801c336:	460b      	mov	r3, r1
 801c338:	2501      	movs	r5, #1
 801c33a:	e7bd      	b.n	801c2b8 <rcl_validate_topic_name+0xcc>
 801c33c:	2500      	movs	r5, #0
 801c33e:	e7bb      	b.n	801c2b8 <rcl_validate_topic_name+0xcc>
 801c340:	2300      	movs	r3, #0
 801c342:	4618      	mov	r0, r3
 801c344:	6033      	str	r3, [r6, #0]
 801c346:	e77c      	b.n	801c242 <rcl_validate_topic_name+0x56>
 801c348:	2205      	movs	r2, #5
 801c34a:	6032      	str	r2, [r6, #0]
 801c34c:	2f00      	cmp	r7, #0
 801c34e:	d1d6      	bne.n	801c2fe <rcl_validate_topic_name+0x112>
 801c350:	e7a1      	b.n	801c296 <rcl_validate_topic_name+0xaa>
 801c352:	2d00      	cmp	r5, #0
 801c354:	bf14      	ite	ne
 801c356:	2308      	movne	r3, #8
 801c358:	2303      	moveq	r3, #3
 801c35a:	6033      	str	r3, [r6, #0]
 801c35c:	2f00      	cmp	r7, #0
 801c35e:	d193      	bne.n	801c288 <rcl_validate_topic_name+0x9c>
 801c360:	e799      	b.n	801c296 <rcl_validate_topic_name+0xaa>
 801c362:	2307      	movs	r3, #7
 801c364:	6033      	str	r3, [r6, #0]
 801c366:	2f00      	cmp	r7, #0
 801c368:	d095      	beq.n	801c296 <rcl_validate_topic_name+0xaa>
 801c36a:	2301      	movs	r3, #1
 801c36c:	e7c7      	b.n	801c2fe <rcl_validate_topic_name+0x112>
 801c36e:	bf00      	nop
 801c370:	0801ecce 	.word	0x0801ecce

0801c374 <rmw_create_guard_condition>:
 801c374:	b538      	push	{r3, r4, r5, lr}
 801c376:	4605      	mov	r5, r0
 801c378:	4808      	ldr	r0, [pc, #32]	@ (801c39c <rmw_create_guard_condition+0x28>)
 801c37a:	f7fe f9f3 	bl	801a764 <get_memory>
 801c37e:	4603      	mov	r3, r0
 801c380:	b148      	cbz	r0, 801c396 <rmw_create_guard_condition+0x22>
 801c382:	6884      	ldr	r4, [r0, #8]
 801c384:	2300      	movs	r3, #0
 801c386:	61e5      	str	r5, [r4, #28]
 801c388:	7423      	strb	r3, [r4, #16]
 801c38a:	f7fe fa53 	bl	801a834 <rmw_get_implementation_identifier>
 801c38e:	f104 0314 	add.w	r3, r4, #20
 801c392:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c396:	4618      	mov	r0, r3
 801c398:	bd38      	pop	{r3, r4, r5, pc}
 801c39a:	bf00      	nop
 801c39c:	240137fc 	.word	0x240137fc

0801c3a0 <rmw_destroy_guard_condition>:
 801c3a0:	b508      	push	{r3, lr}
 801c3a2:	4b08      	ldr	r3, [pc, #32]	@ (801c3c4 <rmw_destroy_guard_condition+0x24>)
 801c3a4:	6819      	ldr	r1, [r3, #0]
 801c3a6:	b911      	cbnz	r1, 801c3ae <rmw_destroy_guard_condition+0xe>
 801c3a8:	e00a      	b.n	801c3c0 <rmw_destroy_guard_condition+0x20>
 801c3aa:	6849      	ldr	r1, [r1, #4]
 801c3ac:	b141      	cbz	r1, 801c3c0 <rmw_destroy_guard_condition+0x20>
 801c3ae:	688b      	ldr	r3, [r1, #8]
 801c3b0:	3314      	adds	r3, #20
 801c3b2:	4298      	cmp	r0, r3
 801c3b4:	d1f9      	bne.n	801c3aa <rmw_destroy_guard_condition+0xa>
 801c3b6:	4803      	ldr	r0, [pc, #12]	@ (801c3c4 <rmw_destroy_guard_condition+0x24>)
 801c3b8:	f7fe f9e4 	bl	801a784 <put_memory>
 801c3bc:	2000      	movs	r0, #0
 801c3be:	bd08      	pop	{r3, pc}
 801c3c0:	2001      	movs	r0, #1
 801c3c2:	bd08      	pop	{r3, pc}
 801c3c4:	240137fc 	.word	0x240137fc

0801c3c8 <rmw_trigger_guard_condition>:
 801c3c8:	b160      	cbz	r0, 801c3e4 <rmw_trigger_guard_condition+0x1c>
 801c3ca:	b510      	push	{r4, lr}
 801c3cc:	4604      	mov	r4, r0
 801c3ce:	6800      	ldr	r0, [r0, #0]
 801c3d0:	f7f4 ff02 	bl	80111d8 <is_uxrce_rmw_identifier_valid>
 801c3d4:	b908      	cbnz	r0, 801c3da <rmw_trigger_guard_condition+0x12>
 801c3d6:	2001      	movs	r0, #1
 801c3d8:	bd10      	pop	{r4, pc}
 801c3da:	6863      	ldr	r3, [r4, #4]
 801c3dc:	2201      	movs	r2, #1
 801c3de:	2000      	movs	r0, #0
 801c3e0:	741a      	strb	r2, [r3, #16]
 801c3e2:	bd10      	pop	{r4, pc}
 801c3e4:	2001      	movs	r0, #1
 801c3e6:	4770      	bx	lr

0801c3e8 <rosidl_runtime_c__String__init>:
 801c3e8:	b510      	push	{r4, lr}
 801c3ea:	4604      	mov	r4, r0
 801c3ec:	b086      	sub	sp, #24
 801c3ee:	b170      	cbz	r0, 801c40e <rosidl_runtime_c__String__init+0x26>
 801c3f0:	a801      	add	r0, sp, #4
 801c3f2:	f7f3 fcc3 	bl	800fd7c <rcutils_get_default_allocator>
 801c3f6:	9b01      	ldr	r3, [sp, #4]
 801c3f8:	9905      	ldr	r1, [sp, #20]
 801c3fa:	2001      	movs	r0, #1
 801c3fc:	4798      	blx	r3
 801c3fe:	6020      	str	r0, [r4, #0]
 801c400:	b128      	cbz	r0, 801c40e <rosidl_runtime_c__String__init+0x26>
 801c402:	2100      	movs	r1, #0
 801c404:	2201      	movs	r2, #1
 801c406:	7001      	strb	r1, [r0, #0]
 801c408:	4610      	mov	r0, r2
 801c40a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801c40e:	b006      	add	sp, #24
 801c410:	bd10      	pop	{r4, pc}
 801c412:	bf00      	nop

0801c414 <rosidl_runtime_c__String__fini>:
 801c414:	b320      	cbz	r0, 801c460 <rosidl_runtime_c__String__fini+0x4c>
 801c416:	6803      	ldr	r3, [r0, #0]
 801c418:	b510      	push	{r4, lr}
 801c41a:	4604      	mov	r4, r0
 801c41c:	b086      	sub	sp, #24
 801c41e:	b173      	cbz	r3, 801c43e <rosidl_runtime_c__String__fini+0x2a>
 801c420:	6883      	ldr	r3, [r0, #8]
 801c422:	b1f3      	cbz	r3, 801c462 <rosidl_runtime_c__String__fini+0x4e>
 801c424:	a801      	add	r0, sp, #4
 801c426:	f7f3 fca9 	bl	800fd7c <rcutils_get_default_allocator>
 801c42a:	9b02      	ldr	r3, [sp, #8]
 801c42c:	9905      	ldr	r1, [sp, #20]
 801c42e:	6820      	ldr	r0, [r4, #0]
 801c430:	4798      	blx	r3
 801c432:	2300      	movs	r3, #0
 801c434:	e9c4 3300 	strd	r3, r3, [r4]
 801c438:	60a3      	str	r3, [r4, #8]
 801c43a:	b006      	add	sp, #24
 801c43c:	bd10      	pop	{r4, pc}
 801c43e:	6843      	ldr	r3, [r0, #4]
 801c440:	b9db      	cbnz	r3, 801c47a <rosidl_runtime_c__String__fini+0x66>
 801c442:	6883      	ldr	r3, [r0, #8]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d0f8      	beq.n	801c43a <rosidl_runtime_c__String__fini+0x26>
 801c448:	4b12      	ldr	r3, [pc, #72]	@ (801c494 <rosidl_runtime_c__String__fini+0x80>)
 801c44a:	2251      	movs	r2, #81	@ 0x51
 801c44c:	2101      	movs	r1, #1
 801c44e:	4812      	ldr	r0, [pc, #72]	@ (801c498 <rosidl_runtime_c__String__fini+0x84>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	68db      	ldr	r3, [r3, #12]
 801c454:	f000 fb82 	bl	801cb5c <fwrite>
 801c458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c45c:	f000 f83e 	bl	801c4dc <exit>
 801c460:	4770      	bx	lr
 801c462:	4b0c      	ldr	r3, [pc, #48]	@ (801c494 <rosidl_runtime_c__String__fini+0x80>)
 801c464:	224c      	movs	r2, #76	@ 0x4c
 801c466:	2101      	movs	r1, #1
 801c468:	480c      	ldr	r0, [pc, #48]	@ (801c49c <rosidl_runtime_c__String__fini+0x88>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	68db      	ldr	r3, [r3, #12]
 801c46e:	f000 fb75 	bl	801cb5c <fwrite>
 801c472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c476:	f000 f831 	bl	801c4dc <exit>
 801c47a:	4b06      	ldr	r3, [pc, #24]	@ (801c494 <rosidl_runtime_c__String__fini+0x80>)
 801c47c:	224e      	movs	r2, #78	@ 0x4e
 801c47e:	2101      	movs	r1, #1
 801c480:	4807      	ldr	r0, [pc, #28]	@ (801c4a0 <rosidl_runtime_c__String__fini+0x8c>)
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	68db      	ldr	r3, [r3, #12]
 801c486:	f000 fb69 	bl	801cb5c <fwrite>
 801c48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c48e:	f000 f825 	bl	801c4dc <exit>
 801c492:	bf00      	nop
 801c494:	2400068c 	.word	0x2400068c
 801c498:	0801ec0c 	.word	0x0801ec0c
 801c49c:	0801eb6c 	.word	0x0801eb6c
 801c4a0:	0801ebbc 	.word	0x0801ebbc

0801c4a4 <calloc>:
 801c4a4:	4b02      	ldr	r3, [pc, #8]	@ (801c4b0 <calloc+0xc>)
 801c4a6:	460a      	mov	r2, r1
 801c4a8:	4601      	mov	r1, r0
 801c4aa:	6818      	ldr	r0, [r3, #0]
 801c4ac:	f000 b802 	b.w	801c4b4 <_calloc_r>
 801c4b0:	2400068c 	.word	0x2400068c

0801c4b4 <_calloc_r>:
 801c4b4:	b570      	push	{r4, r5, r6, lr}
 801c4b6:	fba1 5402 	umull	r5, r4, r1, r2
 801c4ba:	b93c      	cbnz	r4, 801c4cc <_calloc_r+0x18>
 801c4bc:	4629      	mov	r1, r5
 801c4be:	f000 f899 	bl	801c5f4 <_malloc_r>
 801c4c2:	4606      	mov	r6, r0
 801c4c4:	b928      	cbnz	r0, 801c4d2 <_calloc_r+0x1e>
 801c4c6:	2600      	movs	r6, #0
 801c4c8:	4630      	mov	r0, r6
 801c4ca:	bd70      	pop	{r4, r5, r6, pc}
 801c4cc:	220c      	movs	r2, #12
 801c4ce:	6002      	str	r2, [r0, #0]
 801c4d0:	e7f9      	b.n	801c4c6 <_calloc_r+0x12>
 801c4d2:	462a      	mov	r2, r5
 801c4d4:	4621      	mov	r1, r4
 801c4d6:	f000 fccf 	bl	801ce78 <memset>
 801c4da:	e7f5      	b.n	801c4c8 <_calloc_r+0x14>

0801c4dc <exit>:
 801c4dc:	b508      	push	{r3, lr}
 801c4de:	4b06      	ldr	r3, [pc, #24]	@ (801c4f8 <exit+0x1c>)
 801c4e0:	4604      	mov	r4, r0
 801c4e2:	b113      	cbz	r3, 801c4ea <exit+0xe>
 801c4e4:	2100      	movs	r1, #0
 801c4e6:	f3af 8000 	nop.w
 801c4ea:	4b04      	ldr	r3, [pc, #16]	@ (801c4fc <exit+0x20>)
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	b103      	cbz	r3, 801c4f2 <exit+0x16>
 801c4f0:	4798      	blx	r3
 801c4f2:	4620      	mov	r0, r4
 801c4f4:	f7e5 fcbe 	bl	8001e74 <_exit>
 801c4f8:	00000000 	.word	0x00000000
 801c4fc:	24013ab4 	.word	0x24013ab4

0801c500 <getenv>:
 801c500:	b507      	push	{r0, r1, r2, lr}
 801c502:	4b04      	ldr	r3, [pc, #16]	@ (801c514 <getenv+0x14>)
 801c504:	4601      	mov	r1, r0
 801c506:	aa01      	add	r2, sp, #4
 801c508:	6818      	ldr	r0, [r3, #0]
 801c50a:	f000 f805 	bl	801c518 <_findenv_r>
 801c50e:	b003      	add	sp, #12
 801c510:	f85d fb04 	ldr.w	pc, [sp], #4
 801c514:	2400068c 	.word	0x2400068c

0801c518 <_findenv_r>:
 801c518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c51c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c58c <_findenv_r+0x74>
 801c520:	4606      	mov	r6, r0
 801c522:	4689      	mov	r9, r1
 801c524:	4617      	mov	r7, r2
 801c526:	f000 fd9d 	bl	801d064 <__env_lock>
 801c52a:	f8da 4000 	ldr.w	r4, [sl]
 801c52e:	b134      	cbz	r4, 801c53e <_findenv_r+0x26>
 801c530:	464b      	mov	r3, r9
 801c532:	4698      	mov	r8, r3
 801c534:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c538:	b13a      	cbz	r2, 801c54a <_findenv_r+0x32>
 801c53a:	2a3d      	cmp	r2, #61	@ 0x3d
 801c53c:	d1f9      	bne.n	801c532 <_findenv_r+0x1a>
 801c53e:	4630      	mov	r0, r6
 801c540:	f000 fd96 	bl	801d070 <__env_unlock>
 801c544:	2000      	movs	r0, #0
 801c546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c54a:	eba8 0809 	sub.w	r8, r8, r9
 801c54e:	46a3      	mov	fp, r4
 801c550:	f854 0b04 	ldr.w	r0, [r4], #4
 801c554:	2800      	cmp	r0, #0
 801c556:	d0f2      	beq.n	801c53e <_findenv_r+0x26>
 801c558:	4642      	mov	r2, r8
 801c55a:	4649      	mov	r1, r9
 801c55c:	f000 fca1 	bl	801cea2 <strncmp>
 801c560:	2800      	cmp	r0, #0
 801c562:	d1f4      	bne.n	801c54e <_findenv_r+0x36>
 801c564:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c568:	eb03 0508 	add.w	r5, r3, r8
 801c56c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c570:	2b3d      	cmp	r3, #61	@ 0x3d
 801c572:	d1ec      	bne.n	801c54e <_findenv_r+0x36>
 801c574:	f8da 3000 	ldr.w	r3, [sl]
 801c578:	ebab 0303 	sub.w	r3, fp, r3
 801c57c:	109b      	asrs	r3, r3, #2
 801c57e:	4630      	mov	r0, r6
 801c580:	603b      	str	r3, [r7, #0]
 801c582:	f000 fd75 	bl	801d070 <__env_unlock>
 801c586:	1c68      	adds	r0, r5, #1
 801c588:	e7dd      	b.n	801c546 <_findenv_r+0x2e>
 801c58a:	bf00      	nop
 801c58c:	24000008 	.word	0x24000008

0801c590 <malloc>:
 801c590:	4b02      	ldr	r3, [pc, #8]	@ (801c59c <malloc+0xc>)
 801c592:	4601      	mov	r1, r0
 801c594:	6818      	ldr	r0, [r3, #0]
 801c596:	f000 b82d 	b.w	801c5f4 <_malloc_r>
 801c59a:	bf00      	nop
 801c59c:	2400068c 	.word	0x2400068c

0801c5a0 <free>:
 801c5a0:	4b02      	ldr	r3, [pc, #8]	@ (801c5ac <free+0xc>)
 801c5a2:	4601      	mov	r1, r0
 801c5a4:	6818      	ldr	r0, [r3, #0]
 801c5a6:	f000 bd69 	b.w	801d07c <_free_r>
 801c5aa:	bf00      	nop
 801c5ac:	2400068c 	.word	0x2400068c

0801c5b0 <sbrk_aligned>:
 801c5b0:	b570      	push	{r4, r5, r6, lr}
 801c5b2:	4e0f      	ldr	r6, [pc, #60]	@ (801c5f0 <sbrk_aligned+0x40>)
 801c5b4:	460c      	mov	r4, r1
 801c5b6:	6831      	ldr	r1, [r6, #0]
 801c5b8:	4605      	mov	r5, r0
 801c5ba:	b911      	cbnz	r1, 801c5c2 <sbrk_aligned+0x12>
 801c5bc:	f000 fcce 	bl	801cf5c <_sbrk_r>
 801c5c0:	6030      	str	r0, [r6, #0]
 801c5c2:	4621      	mov	r1, r4
 801c5c4:	4628      	mov	r0, r5
 801c5c6:	f000 fcc9 	bl	801cf5c <_sbrk_r>
 801c5ca:	1c43      	adds	r3, r0, #1
 801c5cc:	d103      	bne.n	801c5d6 <sbrk_aligned+0x26>
 801c5ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c5d2:	4620      	mov	r0, r4
 801c5d4:	bd70      	pop	{r4, r5, r6, pc}
 801c5d6:	1cc4      	adds	r4, r0, #3
 801c5d8:	f024 0403 	bic.w	r4, r4, #3
 801c5dc:	42a0      	cmp	r0, r4
 801c5de:	d0f8      	beq.n	801c5d2 <sbrk_aligned+0x22>
 801c5e0:	1a21      	subs	r1, r4, r0
 801c5e2:	4628      	mov	r0, r5
 801c5e4:	f000 fcba 	bl	801cf5c <_sbrk_r>
 801c5e8:	3001      	adds	r0, #1
 801c5ea:	d1f2      	bne.n	801c5d2 <sbrk_aligned+0x22>
 801c5ec:	e7ef      	b.n	801c5ce <sbrk_aligned+0x1e>
 801c5ee:	bf00      	nop
 801c5f0:	24013974 	.word	0x24013974

0801c5f4 <_malloc_r>:
 801c5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5f8:	1ccd      	adds	r5, r1, #3
 801c5fa:	f025 0503 	bic.w	r5, r5, #3
 801c5fe:	3508      	adds	r5, #8
 801c600:	2d0c      	cmp	r5, #12
 801c602:	bf38      	it	cc
 801c604:	250c      	movcc	r5, #12
 801c606:	2d00      	cmp	r5, #0
 801c608:	4606      	mov	r6, r0
 801c60a:	db01      	blt.n	801c610 <_malloc_r+0x1c>
 801c60c:	42a9      	cmp	r1, r5
 801c60e:	d904      	bls.n	801c61a <_malloc_r+0x26>
 801c610:	230c      	movs	r3, #12
 801c612:	6033      	str	r3, [r6, #0]
 801c614:	2000      	movs	r0, #0
 801c616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c61a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c6f0 <_malloc_r+0xfc>
 801c61e:	f000 f869 	bl	801c6f4 <__malloc_lock>
 801c622:	f8d8 3000 	ldr.w	r3, [r8]
 801c626:	461c      	mov	r4, r3
 801c628:	bb44      	cbnz	r4, 801c67c <_malloc_r+0x88>
 801c62a:	4629      	mov	r1, r5
 801c62c:	4630      	mov	r0, r6
 801c62e:	f7ff ffbf 	bl	801c5b0 <sbrk_aligned>
 801c632:	1c43      	adds	r3, r0, #1
 801c634:	4604      	mov	r4, r0
 801c636:	d158      	bne.n	801c6ea <_malloc_r+0xf6>
 801c638:	f8d8 4000 	ldr.w	r4, [r8]
 801c63c:	4627      	mov	r7, r4
 801c63e:	2f00      	cmp	r7, #0
 801c640:	d143      	bne.n	801c6ca <_malloc_r+0xd6>
 801c642:	2c00      	cmp	r4, #0
 801c644:	d04b      	beq.n	801c6de <_malloc_r+0xea>
 801c646:	6823      	ldr	r3, [r4, #0]
 801c648:	4639      	mov	r1, r7
 801c64a:	4630      	mov	r0, r6
 801c64c:	eb04 0903 	add.w	r9, r4, r3
 801c650:	f000 fc84 	bl	801cf5c <_sbrk_r>
 801c654:	4581      	cmp	r9, r0
 801c656:	d142      	bne.n	801c6de <_malloc_r+0xea>
 801c658:	6821      	ldr	r1, [r4, #0]
 801c65a:	1a6d      	subs	r5, r5, r1
 801c65c:	4629      	mov	r1, r5
 801c65e:	4630      	mov	r0, r6
 801c660:	f7ff ffa6 	bl	801c5b0 <sbrk_aligned>
 801c664:	3001      	adds	r0, #1
 801c666:	d03a      	beq.n	801c6de <_malloc_r+0xea>
 801c668:	6823      	ldr	r3, [r4, #0]
 801c66a:	442b      	add	r3, r5
 801c66c:	6023      	str	r3, [r4, #0]
 801c66e:	f8d8 3000 	ldr.w	r3, [r8]
 801c672:	685a      	ldr	r2, [r3, #4]
 801c674:	bb62      	cbnz	r2, 801c6d0 <_malloc_r+0xdc>
 801c676:	f8c8 7000 	str.w	r7, [r8]
 801c67a:	e00f      	b.n	801c69c <_malloc_r+0xa8>
 801c67c:	6822      	ldr	r2, [r4, #0]
 801c67e:	1b52      	subs	r2, r2, r5
 801c680:	d420      	bmi.n	801c6c4 <_malloc_r+0xd0>
 801c682:	2a0b      	cmp	r2, #11
 801c684:	d917      	bls.n	801c6b6 <_malloc_r+0xc2>
 801c686:	1961      	adds	r1, r4, r5
 801c688:	42a3      	cmp	r3, r4
 801c68a:	6025      	str	r5, [r4, #0]
 801c68c:	bf18      	it	ne
 801c68e:	6059      	strne	r1, [r3, #4]
 801c690:	6863      	ldr	r3, [r4, #4]
 801c692:	bf08      	it	eq
 801c694:	f8c8 1000 	streq.w	r1, [r8]
 801c698:	5162      	str	r2, [r4, r5]
 801c69a:	604b      	str	r3, [r1, #4]
 801c69c:	4630      	mov	r0, r6
 801c69e:	f000 f82f 	bl	801c700 <__malloc_unlock>
 801c6a2:	f104 000b 	add.w	r0, r4, #11
 801c6a6:	1d23      	adds	r3, r4, #4
 801c6a8:	f020 0007 	bic.w	r0, r0, #7
 801c6ac:	1ac2      	subs	r2, r0, r3
 801c6ae:	bf1c      	itt	ne
 801c6b0:	1a1b      	subne	r3, r3, r0
 801c6b2:	50a3      	strne	r3, [r4, r2]
 801c6b4:	e7af      	b.n	801c616 <_malloc_r+0x22>
 801c6b6:	6862      	ldr	r2, [r4, #4]
 801c6b8:	42a3      	cmp	r3, r4
 801c6ba:	bf0c      	ite	eq
 801c6bc:	f8c8 2000 	streq.w	r2, [r8]
 801c6c0:	605a      	strne	r2, [r3, #4]
 801c6c2:	e7eb      	b.n	801c69c <_malloc_r+0xa8>
 801c6c4:	4623      	mov	r3, r4
 801c6c6:	6864      	ldr	r4, [r4, #4]
 801c6c8:	e7ae      	b.n	801c628 <_malloc_r+0x34>
 801c6ca:	463c      	mov	r4, r7
 801c6cc:	687f      	ldr	r7, [r7, #4]
 801c6ce:	e7b6      	b.n	801c63e <_malloc_r+0x4a>
 801c6d0:	461a      	mov	r2, r3
 801c6d2:	685b      	ldr	r3, [r3, #4]
 801c6d4:	42a3      	cmp	r3, r4
 801c6d6:	d1fb      	bne.n	801c6d0 <_malloc_r+0xdc>
 801c6d8:	2300      	movs	r3, #0
 801c6da:	6053      	str	r3, [r2, #4]
 801c6dc:	e7de      	b.n	801c69c <_malloc_r+0xa8>
 801c6de:	230c      	movs	r3, #12
 801c6e0:	6033      	str	r3, [r6, #0]
 801c6e2:	4630      	mov	r0, r6
 801c6e4:	f000 f80c 	bl	801c700 <__malloc_unlock>
 801c6e8:	e794      	b.n	801c614 <_malloc_r+0x20>
 801c6ea:	6005      	str	r5, [r0, #0]
 801c6ec:	e7d6      	b.n	801c69c <_malloc_r+0xa8>
 801c6ee:	bf00      	nop
 801c6f0:	24013978 	.word	0x24013978

0801c6f4 <__malloc_lock>:
 801c6f4:	4801      	ldr	r0, [pc, #4]	@ (801c6fc <__malloc_lock+0x8>)
 801c6f6:	f000 bc7e 	b.w	801cff6 <__retarget_lock_acquire_recursive>
 801c6fa:	bf00      	nop
 801c6fc:	24013abd 	.word	0x24013abd

0801c700 <__malloc_unlock>:
 801c700:	4801      	ldr	r0, [pc, #4]	@ (801c708 <__malloc_unlock+0x8>)
 801c702:	f000 bc79 	b.w	801cff8 <__retarget_lock_release_recursive>
 801c706:	bf00      	nop
 801c708:	24013abd 	.word	0x24013abd

0801c70c <srand>:
 801c70c:	b538      	push	{r3, r4, r5, lr}
 801c70e:	4b10      	ldr	r3, [pc, #64]	@ (801c750 <srand+0x44>)
 801c710:	681d      	ldr	r5, [r3, #0]
 801c712:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c714:	4604      	mov	r4, r0
 801c716:	b9b3      	cbnz	r3, 801c746 <srand+0x3a>
 801c718:	2018      	movs	r0, #24
 801c71a:	f7ff ff39 	bl	801c590 <malloc>
 801c71e:	4602      	mov	r2, r0
 801c720:	6328      	str	r0, [r5, #48]	@ 0x30
 801c722:	b920      	cbnz	r0, 801c72e <srand+0x22>
 801c724:	4b0b      	ldr	r3, [pc, #44]	@ (801c754 <srand+0x48>)
 801c726:	480c      	ldr	r0, [pc, #48]	@ (801c758 <srand+0x4c>)
 801c728:	2146      	movs	r1, #70	@ 0x46
 801c72a:	f000 fc7d 	bl	801d028 <__assert_func>
 801c72e:	490b      	ldr	r1, [pc, #44]	@ (801c75c <srand+0x50>)
 801c730:	4b0b      	ldr	r3, [pc, #44]	@ (801c760 <srand+0x54>)
 801c732:	e9c0 1300 	strd	r1, r3, [r0]
 801c736:	4b0b      	ldr	r3, [pc, #44]	@ (801c764 <srand+0x58>)
 801c738:	6083      	str	r3, [r0, #8]
 801c73a:	230b      	movs	r3, #11
 801c73c:	8183      	strh	r3, [r0, #12]
 801c73e:	2100      	movs	r1, #0
 801c740:	2001      	movs	r0, #1
 801c742:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c746:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c748:	2200      	movs	r2, #0
 801c74a:	611c      	str	r4, [r3, #16]
 801c74c:	615a      	str	r2, [r3, #20]
 801c74e:	bd38      	pop	{r3, r4, r5, pc}
 801c750:	2400068c 	.word	0x2400068c
 801c754:	0801ec5e 	.word	0x0801ec5e
 801c758:	0801ec75 	.word	0x0801ec75
 801c75c:	abcd330e 	.word	0xabcd330e
 801c760:	e66d1234 	.word	0xe66d1234
 801c764:	0005deec 	.word	0x0005deec

0801c768 <rand>:
 801c768:	4b16      	ldr	r3, [pc, #88]	@ (801c7c4 <rand+0x5c>)
 801c76a:	b510      	push	{r4, lr}
 801c76c:	681c      	ldr	r4, [r3, #0]
 801c76e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c770:	b9b3      	cbnz	r3, 801c7a0 <rand+0x38>
 801c772:	2018      	movs	r0, #24
 801c774:	f7ff ff0c 	bl	801c590 <malloc>
 801c778:	4602      	mov	r2, r0
 801c77a:	6320      	str	r0, [r4, #48]	@ 0x30
 801c77c:	b920      	cbnz	r0, 801c788 <rand+0x20>
 801c77e:	4b12      	ldr	r3, [pc, #72]	@ (801c7c8 <rand+0x60>)
 801c780:	4812      	ldr	r0, [pc, #72]	@ (801c7cc <rand+0x64>)
 801c782:	2152      	movs	r1, #82	@ 0x52
 801c784:	f000 fc50 	bl	801d028 <__assert_func>
 801c788:	4911      	ldr	r1, [pc, #68]	@ (801c7d0 <rand+0x68>)
 801c78a:	4b12      	ldr	r3, [pc, #72]	@ (801c7d4 <rand+0x6c>)
 801c78c:	e9c0 1300 	strd	r1, r3, [r0]
 801c790:	4b11      	ldr	r3, [pc, #68]	@ (801c7d8 <rand+0x70>)
 801c792:	6083      	str	r3, [r0, #8]
 801c794:	230b      	movs	r3, #11
 801c796:	8183      	strh	r3, [r0, #12]
 801c798:	2100      	movs	r1, #0
 801c79a:	2001      	movs	r0, #1
 801c79c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c7a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c7a2:	480e      	ldr	r0, [pc, #56]	@ (801c7dc <rand+0x74>)
 801c7a4:	690b      	ldr	r3, [r1, #16]
 801c7a6:	694c      	ldr	r4, [r1, #20]
 801c7a8:	4a0d      	ldr	r2, [pc, #52]	@ (801c7e0 <rand+0x78>)
 801c7aa:	4358      	muls	r0, r3
 801c7ac:	fb02 0004 	mla	r0, r2, r4, r0
 801c7b0:	fba3 3202 	umull	r3, r2, r3, r2
 801c7b4:	3301      	adds	r3, #1
 801c7b6:	eb40 0002 	adc.w	r0, r0, r2
 801c7ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c7be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c7c2:	bd10      	pop	{r4, pc}
 801c7c4:	2400068c 	.word	0x2400068c
 801c7c8:	0801ec5e 	.word	0x0801ec5e
 801c7cc:	0801ec75 	.word	0x0801ec75
 801c7d0:	abcd330e 	.word	0xabcd330e
 801c7d4:	e66d1234 	.word	0xe66d1234
 801c7d8:	0005deec 	.word	0x0005deec
 801c7dc:	5851f42d 	.word	0x5851f42d
 801c7e0:	4c957f2d 	.word	0x4c957f2d

0801c7e4 <realloc>:
 801c7e4:	4b02      	ldr	r3, [pc, #8]	@ (801c7f0 <realloc+0xc>)
 801c7e6:	460a      	mov	r2, r1
 801c7e8:	4601      	mov	r1, r0
 801c7ea:	6818      	ldr	r0, [r3, #0]
 801c7ec:	f000 b802 	b.w	801c7f4 <_realloc_r>
 801c7f0:	2400068c 	.word	0x2400068c

0801c7f4 <_realloc_r>:
 801c7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7f8:	4680      	mov	r8, r0
 801c7fa:	4615      	mov	r5, r2
 801c7fc:	460c      	mov	r4, r1
 801c7fe:	b921      	cbnz	r1, 801c80a <_realloc_r+0x16>
 801c800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c804:	4611      	mov	r1, r2
 801c806:	f7ff bef5 	b.w	801c5f4 <_malloc_r>
 801c80a:	b92a      	cbnz	r2, 801c818 <_realloc_r+0x24>
 801c80c:	f000 fc36 	bl	801d07c <_free_r>
 801c810:	2400      	movs	r4, #0
 801c812:	4620      	mov	r0, r4
 801c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c818:	f000 fc7a 	bl	801d110 <_malloc_usable_size_r>
 801c81c:	4285      	cmp	r5, r0
 801c81e:	4606      	mov	r6, r0
 801c820:	d802      	bhi.n	801c828 <_realloc_r+0x34>
 801c822:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c826:	d8f4      	bhi.n	801c812 <_realloc_r+0x1e>
 801c828:	4629      	mov	r1, r5
 801c82a:	4640      	mov	r0, r8
 801c82c:	f7ff fee2 	bl	801c5f4 <_malloc_r>
 801c830:	4607      	mov	r7, r0
 801c832:	2800      	cmp	r0, #0
 801c834:	d0ec      	beq.n	801c810 <_realloc_r+0x1c>
 801c836:	42b5      	cmp	r5, r6
 801c838:	462a      	mov	r2, r5
 801c83a:	4621      	mov	r1, r4
 801c83c:	bf28      	it	cs
 801c83e:	4632      	movcs	r2, r6
 801c840:	f000 fbe3 	bl	801d00a <memcpy>
 801c844:	4621      	mov	r1, r4
 801c846:	4640      	mov	r0, r8
 801c848:	f000 fc18 	bl	801d07c <_free_r>
 801c84c:	463c      	mov	r4, r7
 801c84e:	e7e0      	b.n	801c812 <_realloc_r+0x1e>

0801c850 <_strtoul_l.constprop.0>:
 801c850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c854:	4e34      	ldr	r6, [pc, #208]	@ (801c928 <_strtoul_l.constprop.0+0xd8>)
 801c856:	4686      	mov	lr, r0
 801c858:	460d      	mov	r5, r1
 801c85a:	4628      	mov	r0, r5
 801c85c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c860:	5d37      	ldrb	r7, [r6, r4]
 801c862:	f017 0708 	ands.w	r7, r7, #8
 801c866:	d1f8      	bne.n	801c85a <_strtoul_l.constprop.0+0xa>
 801c868:	2c2d      	cmp	r4, #45	@ 0x2d
 801c86a:	d12f      	bne.n	801c8cc <_strtoul_l.constprop.0+0x7c>
 801c86c:	782c      	ldrb	r4, [r5, #0]
 801c86e:	2701      	movs	r7, #1
 801c870:	1c85      	adds	r5, r0, #2
 801c872:	f033 0010 	bics.w	r0, r3, #16
 801c876:	d109      	bne.n	801c88c <_strtoul_l.constprop.0+0x3c>
 801c878:	2c30      	cmp	r4, #48	@ 0x30
 801c87a:	d12c      	bne.n	801c8d6 <_strtoul_l.constprop.0+0x86>
 801c87c:	7828      	ldrb	r0, [r5, #0]
 801c87e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c882:	2858      	cmp	r0, #88	@ 0x58
 801c884:	d127      	bne.n	801c8d6 <_strtoul_l.constprop.0+0x86>
 801c886:	786c      	ldrb	r4, [r5, #1]
 801c888:	2310      	movs	r3, #16
 801c88a:	3502      	adds	r5, #2
 801c88c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801c890:	2600      	movs	r6, #0
 801c892:	fbb8 f8f3 	udiv	r8, r8, r3
 801c896:	fb03 f908 	mul.w	r9, r3, r8
 801c89a:	ea6f 0909 	mvn.w	r9, r9
 801c89e:	4630      	mov	r0, r6
 801c8a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c8a4:	f1bc 0f09 	cmp.w	ip, #9
 801c8a8:	d81c      	bhi.n	801c8e4 <_strtoul_l.constprop.0+0x94>
 801c8aa:	4664      	mov	r4, ip
 801c8ac:	42a3      	cmp	r3, r4
 801c8ae:	dd2a      	ble.n	801c906 <_strtoul_l.constprop.0+0xb6>
 801c8b0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801c8b4:	d007      	beq.n	801c8c6 <_strtoul_l.constprop.0+0x76>
 801c8b6:	4580      	cmp	r8, r0
 801c8b8:	d322      	bcc.n	801c900 <_strtoul_l.constprop.0+0xb0>
 801c8ba:	d101      	bne.n	801c8c0 <_strtoul_l.constprop.0+0x70>
 801c8bc:	45a1      	cmp	r9, r4
 801c8be:	db1f      	blt.n	801c900 <_strtoul_l.constprop.0+0xb0>
 801c8c0:	fb00 4003 	mla	r0, r0, r3, r4
 801c8c4:	2601      	movs	r6, #1
 801c8c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c8ca:	e7e9      	b.n	801c8a0 <_strtoul_l.constprop.0+0x50>
 801c8cc:	2c2b      	cmp	r4, #43	@ 0x2b
 801c8ce:	bf04      	itt	eq
 801c8d0:	782c      	ldrbeq	r4, [r5, #0]
 801c8d2:	1c85      	addeq	r5, r0, #2
 801c8d4:	e7cd      	b.n	801c872 <_strtoul_l.constprop.0+0x22>
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d1d8      	bne.n	801c88c <_strtoul_l.constprop.0+0x3c>
 801c8da:	2c30      	cmp	r4, #48	@ 0x30
 801c8dc:	bf0c      	ite	eq
 801c8de:	2308      	moveq	r3, #8
 801c8e0:	230a      	movne	r3, #10
 801c8e2:	e7d3      	b.n	801c88c <_strtoul_l.constprop.0+0x3c>
 801c8e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c8e8:	f1bc 0f19 	cmp.w	ip, #25
 801c8ec:	d801      	bhi.n	801c8f2 <_strtoul_l.constprop.0+0xa2>
 801c8ee:	3c37      	subs	r4, #55	@ 0x37
 801c8f0:	e7dc      	b.n	801c8ac <_strtoul_l.constprop.0+0x5c>
 801c8f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c8f6:	f1bc 0f19 	cmp.w	ip, #25
 801c8fa:	d804      	bhi.n	801c906 <_strtoul_l.constprop.0+0xb6>
 801c8fc:	3c57      	subs	r4, #87	@ 0x57
 801c8fe:	e7d5      	b.n	801c8ac <_strtoul_l.constprop.0+0x5c>
 801c900:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c904:	e7df      	b.n	801c8c6 <_strtoul_l.constprop.0+0x76>
 801c906:	1c73      	adds	r3, r6, #1
 801c908:	d106      	bne.n	801c918 <_strtoul_l.constprop.0+0xc8>
 801c90a:	2322      	movs	r3, #34	@ 0x22
 801c90c:	f8ce 3000 	str.w	r3, [lr]
 801c910:	4630      	mov	r0, r6
 801c912:	b932      	cbnz	r2, 801c922 <_strtoul_l.constprop.0+0xd2>
 801c914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c918:	b107      	cbz	r7, 801c91c <_strtoul_l.constprop.0+0xcc>
 801c91a:	4240      	negs	r0, r0
 801c91c:	2a00      	cmp	r2, #0
 801c91e:	d0f9      	beq.n	801c914 <_strtoul_l.constprop.0+0xc4>
 801c920:	b106      	cbz	r6, 801c924 <_strtoul_l.constprop.0+0xd4>
 801c922:	1e69      	subs	r1, r5, #1
 801c924:	6011      	str	r1, [r2, #0]
 801c926:	e7f5      	b.n	801c914 <_strtoul_l.constprop.0+0xc4>
 801c928:	0801ecce 	.word	0x0801ecce

0801c92c <strtoul>:
 801c92c:	4613      	mov	r3, r2
 801c92e:	460a      	mov	r2, r1
 801c930:	4601      	mov	r1, r0
 801c932:	4802      	ldr	r0, [pc, #8]	@ (801c93c <strtoul+0x10>)
 801c934:	6800      	ldr	r0, [r0, #0]
 801c936:	f7ff bf8b 	b.w	801c850 <_strtoul_l.constprop.0>
 801c93a:	bf00      	nop
 801c93c:	2400068c 	.word	0x2400068c

0801c940 <std>:
 801c940:	2300      	movs	r3, #0
 801c942:	b510      	push	{r4, lr}
 801c944:	4604      	mov	r4, r0
 801c946:	e9c0 3300 	strd	r3, r3, [r0]
 801c94a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c94e:	6083      	str	r3, [r0, #8]
 801c950:	8181      	strh	r1, [r0, #12]
 801c952:	6643      	str	r3, [r0, #100]	@ 0x64
 801c954:	81c2      	strh	r2, [r0, #14]
 801c956:	6183      	str	r3, [r0, #24]
 801c958:	4619      	mov	r1, r3
 801c95a:	2208      	movs	r2, #8
 801c95c:	305c      	adds	r0, #92	@ 0x5c
 801c95e:	f000 fa8b 	bl	801ce78 <memset>
 801c962:	4b0d      	ldr	r3, [pc, #52]	@ (801c998 <std+0x58>)
 801c964:	6263      	str	r3, [r4, #36]	@ 0x24
 801c966:	4b0d      	ldr	r3, [pc, #52]	@ (801c99c <std+0x5c>)
 801c968:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c96a:	4b0d      	ldr	r3, [pc, #52]	@ (801c9a0 <std+0x60>)
 801c96c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c96e:	4b0d      	ldr	r3, [pc, #52]	@ (801c9a4 <std+0x64>)
 801c970:	6323      	str	r3, [r4, #48]	@ 0x30
 801c972:	4b0d      	ldr	r3, [pc, #52]	@ (801c9a8 <std+0x68>)
 801c974:	6224      	str	r4, [r4, #32]
 801c976:	429c      	cmp	r4, r3
 801c978:	d006      	beq.n	801c988 <std+0x48>
 801c97a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c97e:	4294      	cmp	r4, r2
 801c980:	d002      	beq.n	801c988 <std+0x48>
 801c982:	33d0      	adds	r3, #208	@ 0xd0
 801c984:	429c      	cmp	r4, r3
 801c986:	d105      	bne.n	801c994 <std+0x54>
 801c988:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c990:	f000 bb30 	b.w	801cff4 <__retarget_lock_init_recursive>
 801c994:	bd10      	pop	{r4, pc}
 801c996:	bf00      	nop
 801c998:	0801cc05 	.word	0x0801cc05
 801c99c:	0801cc27 	.word	0x0801cc27
 801c9a0:	0801cc5f 	.word	0x0801cc5f
 801c9a4:	0801cc83 	.word	0x0801cc83
 801c9a8:	2401397c 	.word	0x2401397c

0801c9ac <stdio_exit_handler>:
 801c9ac:	4a02      	ldr	r2, [pc, #8]	@ (801c9b8 <stdio_exit_handler+0xc>)
 801c9ae:	4903      	ldr	r1, [pc, #12]	@ (801c9bc <stdio_exit_handler+0x10>)
 801c9b0:	4803      	ldr	r0, [pc, #12]	@ (801c9c0 <stdio_exit_handler+0x14>)
 801c9b2:	f000 b869 	b.w	801ca88 <_fwalk_sglue>
 801c9b6:	bf00      	nop
 801c9b8:	24000680 	.word	0x24000680
 801c9bc:	0801da79 	.word	0x0801da79
 801c9c0:	24000690 	.word	0x24000690

0801c9c4 <cleanup_stdio>:
 801c9c4:	6841      	ldr	r1, [r0, #4]
 801c9c6:	4b0c      	ldr	r3, [pc, #48]	@ (801c9f8 <cleanup_stdio+0x34>)
 801c9c8:	4299      	cmp	r1, r3
 801c9ca:	b510      	push	{r4, lr}
 801c9cc:	4604      	mov	r4, r0
 801c9ce:	d001      	beq.n	801c9d4 <cleanup_stdio+0x10>
 801c9d0:	f001 f852 	bl	801da78 <_fflush_r>
 801c9d4:	68a1      	ldr	r1, [r4, #8]
 801c9d6:	4b09      	ldr	r3, [pc, #36]	@ (801c9fc <cleanup_stdio+0x38>)
 801c9d8:	4299      	cmp	r1, r3
 801c9da:	d002      	beq.n	801c9e2 <cleanup_stdio+0x1e>
 801c9dc:	4620      	mov	r0, r4
 801c9de:	f001 f84b 	bl	801da78 <_fflush_r>
 801c9e2:	68e1      	ldr	r1, [r4, #12]
 801c9e4:	4b06      	ldr	r3, [pc, #24]	@ (801ca00 <cleanup_stdio+0x3c>)
 801c9e6:	4299      	cmp	r1, r3
 801c9e8:	d004      	beq.n	801c9f4 <cleanup_stdio+0x30>
 801c9ea:	4620      	mov	r0, r4
 801c9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9f0:	f001 b842 	b.w	801da78 <_fflush_r>
 801c9f4:	bd10      	pop	{r4, pc}
 801c9f6:	bf00      	nop
 801c9f8:	2401397c 	.word	0x2401397c
 801c9fc:	240139e4 	.word	0x240139e4
 801ca00:	24013a4c 	.word	0x24013a4c

0801ca04 <global_stdio_init.part.0>:
 801ca04:	b510      	push	{r4, lr}
 801ca06:	4b0b      	ldr	r3, [pc, #44]	@ (801ca34 <global_stdio_init.part.0+0x30>)
 801ca08:	4c0b      	ldr	r4, [pc, #44]	@ (801ca38 <global_stdio_init.part.0+0x34>)
 801ca0a:	4a0c      	ldr	r2, [pc, #48]	@ (801ca3c <global_stdio_init.part.0+0x38>)
 801ca0c:	601a      	str	r2, [r3, #0]
 801ca0e:	4620      	mov	r0, r4
 801ca10:	2200      	movs	r2, #0
 801ca12:	2104      	movs	r1, #4
 801ca14:	f7ff ff94 	bl	801c940 <std>
 801ca18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ca1c:	2201      	movs	r2, #1
 801ca1e:	2109      	movs	r1, #9
 801ca20:	f7ff ff8e 	bl	801c940 <std>
 801ca24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ca28:	2202      	movs	r2, #2
 801ca2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca2e:	2112      	movs	r1, #18
 801ca30:	f7ff bf86 	b.w	801c940 <std>
 801ca34:	24013ab4 	.word	0x24013ab4
 801ca38:	2401397c 	.word	0x2401397c
 801ca3c:	0801c9ad 	.word	0x0801c9ad

0801ca40 <__sfp_lock_acquire>:
 801ca40:	4801      	ldr	r0, [pc, #4]	@ (801ca48 <__sfp_lock_acquire+0x8>)
 801ca42:	f000 bad8 	b.w	801cff6 <__retarget_lock_acquire_recursive>
 801ca46:	bf00      	nop
 801ca48:	24013abe 	.word	0x24013abe

0801ca4c <__sfp_lock_release>:
 801ca4c:	4801      	ldr	r0, [pc, #4]	@ (801ca54 <__sfp_lock_release+0x8>)
 801ca4e:	f000 bad3 	b.w	801cff8 <__retarget_lock_release_recursive>
 801ca52:	bf00      	nop
 801ca54:	24013abe 	.word	0x24013abe

0801ca58 <__sinit>:
 801ca58:	b510      	push	{r4, lr}
 801ca5a:	4604      	mov	r4, r0
 801ca5c:	f7ff fff0 	bl	801ca40 <__sfp_lock_acquire>
 801ca60:	6a23      	ldr	r3, [r4, #32]
 801ca62:	b11b      	cbz	r3, 801ca6c <__sinit+0x14>
 801ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca68:	f7ff bff0 	b.w	801ca4c <__sfp_lock_release>
 801ca6c:	4b04      	ldr	r3, [pc, #16]	@ (801ca80 <__sinit+0x28>)
 801ca6e:	6223      	str	r3, [r4, #32]
 801ca70:	4b04      	ldr	r3, [pc, #16]	@ (801ca84 <__sinit+0x2c>)
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d1f5      	bne.n	801ca64 <__sinit+0xc>
 801ca78:	f7ff ffc4 	bl	801ca04 <global_stdio_init.part.0>
 801ca7c:	e7f2      	b.n	801ca64 <__sinit+0xc>
 801ca7e:	bf00      	nop
 801ca80:	0801c9c5 	.word	0x0801c9c5
 801ca84:	24013ab4 	.word	0x24013ab4

0801ca88 <_fwalk_sglue>:
 801ca88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca8c:	4607      	mov	r7, r0
 801ca8e:	4688      	mov	r8, r1
 801ca90:	4614      	mov	r4, r2
 801ca92:	2600      	movs	r6, #0
 801ca94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ca98:	f1b9 0901 	subs.w	r9, r9, #1
 801ca9c:	d505      	bpl.n	801caaa <_fwalk_sglue+0x22>
 801ca9e:	6824      	ldr	r4, [r4, #0]
 801caa0:	2c00      	cmp	r4, #0
 801caa2:	d1f7      	bne.n	801ca94 <_fwalk_sglue+0xc>
 801caa4:	4630      	mov	r0, r6
 801caa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801caaa:	89ab      	ldrh	r3, [r5, #12]
 801caac:	2b01      	cmp	r3, #1
 801caae:	d907      	bls.n	801cac0 <_fwalk_sglue+0x38>
 801cab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cab4:	3301      	adds	r3, #1
 801cab6:	d003      	beq.n	801cac0 <_fwalk_sglue+0x38>
 801cab8:	4629      	mov	r1, r5
 801caba:	4638      	mov	r0, r7
 801cabc:	47c0      	blx	r8
 801cabe:	4306      	orrs	r6, r0
 801cac0:	3568      	adds	r5, #104	@ 0x68
 801cac2:	e7e9      	b.n	801ca98 <_fwalk_sglue+0x10>

0801cac4 <_fwrite_r>:
 801cac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cac8:	9c08      	ldr	r4, [sp, #32]
 801caca:	468a      	mov	sl, r1
 801cacc:	4690      	mov	r8, r2
 801cace:	fb02 f903 	mul.w	r9, r2, r3
 801cad2:	4606      	mov	r6, r0
 801cad4:	b118      	cbz	r0, 801cade <_fwrite_r+0x1a>
 801cad6:	6a03      	ldr	r3, [r0, #32]
 801cad8:	b90b      	cbnz	r3, 801cade <_fwrite_r+0x1a>
 801cada:	f7ff ffbd 	bl	801ca58 <__sinit>
 801cade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cae0:	07dd      	lsls	r5, r3, #31
 801cae2:	d405      	bmi.n	801caf0 <_fwrite_r+0x2c>
 801cae4:	89a3      	ldrh	r3, [r4, #12]
 801cae6:	0598      	lsls	r0, r3, #22
 801cae8:	d402      	bmi.n	801caf0 <_fwrite_r+0x2c>
 801caea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801caec:	f000 fa83 	bl	801cff6 <__retarget_lock_acquire_recursive>
 801caf0:	89a3      	ldrh	r3, [r4, #12]
 801caf2:	0719      	lsls	r1, r3, #28
 801caf4:	d516      	bpl.n	801cb24 <_fwrite_r+0x60>
 801caf6:	6923      	ldr	r3, [r4, #16]
 801caf8:	b1a3      	cbz	r3, 801cb24 <_fwrite_r+0x60>
 801cafa:	2500      	movs	r5, #0
 801cafc:	454d      	cmp	r5, r9
 801cafe:	d01f      	beq.n	801cb40 <_fwrite_r+0x7c>
 801cb00:	68a7      	ldr	r7, [r4, #8]
 801cb02:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801cb06:	3f01      	subs	r7, #1
 801cb08:	2f00      	cmp	r7, #0
 801cb0a:	60a7      	str	r7, [r4, #8]
 801cb0c:	da04      	bge.n	801cb18 <_fwrite_r+0x54>
 801cb0e:	69a3      	ldr	r3, [r4, #24]
 801cb10:	429f      	cmp	r7, r3
 801cb12:	db0f      	blt.n	801cb34 <_fwrite_r+0x70>
 801cb14:	290a      	cmp	r1, #10
 801cb16:	d00d      	beq.n	801cb34 <_fwrite_r+0x70>
 801cb18:	6823      	ldr	r3, [r4, #0]
 801cb1a:	1c5a      	adds	r2, r3, #1
 801cb1c:	6022      	str	r2, [r4, #0]
 801cb1e:	7019      	strb	r1, [r3, #0]
 801cb20:	3501      	adds	r5, #1
 801cb22:	e7eb      	b.n	801cafc <_fwrite_r+0x38>
 801cb24:	4621      	mov	r1, r4
 801cb26:	4630      	mov	r0, r6
 801cb28:	f000 f926 	bl	801cd78 <__swsetup_r>
 801cb2c:	2800      	cmp	r0, #0
 801cb2e:	d0e4      	beq.n	801cafa <_fwrite_r+0x36>
 801cb30:	2500      	movs	r5, #0
 801cb32:	e005      	b.n	801cb40 <_fwrite_r+0x7c>
 801cb34:	4622      	mov	r2, r4
 801cb36:	4630      	mov	r0, r6
 801cb38:	f000 f8e0 	bl	801ccfc <__swbuf_r>
 801cb3c:	3001      	adds	r0, #1
 801cb3e:	d1ef      	bne.n	801cb20 <_fwrite_r+0x5c>
 801cb40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb42:	07da      	lsls	r2, r3, #31
 801cb44:	d405      	bmi.n	801cb52 <_fwrite_r+0x8e>
 801cb46:	89a3      	ldrh	r3, [r4, #12]
 801cb48:	059b      	lsls	r3, r3, #22
 801cb4a:	d402      	bmi.n	801cb52 <_fwrite_r+0x8e>
 801cb4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb4e:	f000 fa53 	bl	801cff8 <__retarget_lock_release_recursive>
 801cb52:	fbb5 f0f8 	udiv	r0, r5, r8
 801cb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cb5c <fwrite>:
 801cb5c:	b507      	push	{r0, r1, r2, lr}
 801cb5e:	9300      	str	r3, [sp, #0]
 801cb60:	4613      	mov	r3, r2
 801cb62:	460a      	mov	r2, r1
 801cb64:	4601      	mov	r1, r0
 801cb66:	4803      	ldr	r0, [pc, #12]	@ (801cb74 <fwrite+0x18>)
 801cb68:	6800      	ldr	r0, [r0, #0]
 801cb6a:	f7ff ffab 	bl	801cac4 <_fwrite_r>
 801cb6e:	b003      	add	sp, #12
 801cb70:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb74:	2400068c 	.word	0x2400068c

0801cb78 <iprintf>:
 801cb78:	b40f      	push	{r0, r1, r2, r3}
 801cb7a:	b507      	push	{r0, r1, r2, lr}
 801cb7c:	4906      	ldr	r1, [pc, #24]	@ (801cb98 <iprintf+0x20>)
 801cb7e:	ab04      	add	r3, sp, #16
 801cb80:	6808      	ldr	r0, [r1, #0]
 801cb82:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb86:	6881      	ldr	r1, [r0, #8]
 801cb88:	9301      	str	r3, [sp, #4]
 801cb8a:	f000 fc4b 	bl	801d424 <_vfiprintf_r>
 801cb8e:	b003      	add	sp, #12
 801cb90:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb94:	b004      	add	sp, #16
 801cb96:	4770      	bx	lr
 801cb98:	2400068c 	.word	0x2400068c

0801cb9c <sniprintf>:
 801cb9c:	b40c      	push	{r2, r3}
 801cb9e:	b530      	push	{r4, r5, lr}
 801cba0:	4b17      	ldr	r3, [pc, #92]	@ (801cc00 <sniprintf+0x64>)
 801cba2:	1e0c      	subs	r4, r1, #0
 801cba4:	681d      	ldr	r5, [r3, #0]
 801cba6:	b09d      	sub	sp, #116	@ 0x74
 801cba8:	da08      	bge.n	801cbbc <sniprintf+0x20>
 801cbaa:	238b      	movs	r3, #139	@ 0x8b
 801cbac:	602b      	str	r3, [r5, #0]
 801cbae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cbb2:	b01d      	add	sp, #116	@ 0x74
 801cbb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cbb8:	b002      	add	sp, #8
 801cbba:	4770      	bx	lr
 801cbbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cbc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cbc4:	bf14      	ite	ne
 801cbc6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cbca:	4623      	moveq	r3, r4
 801cbcc:	9304      	str	r3, [sp, #16]
 801cbce:	9307      	str	r3, [sp, #28]
 801cbd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cbd4:	9002      	str	r0, [sp, #8]
 801cbd6:	9006      	str	r0, [sp, #24]
 801cbd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cbdc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cbde:	ab21      	add	r3, sp, #132	@ 0x84
 801cbe0:	a902      	add	r1, sp, #8
 801cbe2:	4628      	mov	r0, r5
 801cbe4:	9301      	str	r3, [sp, #4]
 801cbe6:	f000 faf7 	bl	801d1d8 <_svfiprintf_r>
 801cbea:	1c43      	adds	r3, r0, #1
 801cbec:	bfbc      	itt	lt
 801cbee:	238b      	movlt	r3, #139	@ 0x8b
 801cbf0:	602b      	strlt	r3, [r5, #0]
 801cbf2:	2c00      	cmp	r4, #0
 801cbf4:	d0dd      	beq.n	801cbb2 <sniprintf+0x16>
 801cbf6:	9b02      	ldr	r3, [sp, #8]
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	701a      	strb	r2, [r3, #0]
 801cbfc:	e7d9      	b.n	801cbb2 <sniprintf+0x16>
 801cbfe:	bf00      	nop
 801cc00:	2400068c 	.word	0x2400068c

0801cc04 <__sread>:
 801cc04:	b510      	push	{r4, lr}
 801cc06:	460c      	mov	r4, r1
 801cc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc0c:	f000 f994 	bl	801cf38 <_read_r>
 801cc10:	2800      	cmp	r0, #0
 801cc12:	bfab      	itete	ge
 801cc14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cc16:	89a3      	ldrhlt	r3, [r4, #12]
 801cc18:	181b      	addge	r3, r3, r0
 801cc1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cc1e:	bfac      	ite	ge
 801cc20:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cc22:	81a3      	strhlt	r3, [r4, #12]
 801cc24:	bd10      	pop	{r4, pc}

0801cc26 <__swrite>:
 801cc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc2a:	461f      	mov	r7, r3
 801cc2c:	898b      	ldrh	r3, [r1, #12]
 801cc2e:	05db      	lsls	r3, r3, #23
 801cc30:	4605      	mov	r5, r0
 801cc32:	460c      	mov	r4, r1
 801cc34:	4616      	mov	r6, r2
 801cc36:	d505      	bpl.n	801cc44 <__swrite+0x1e>
 801cc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc3c:	2302      	movs	r3, #2
 801cc3e:	2200      	movs	r2, #0
 801cc40:	f000 f968 	bl	801cf14 <_lseek_r>
 801cc44:	89a3      	ldrh	r3, [r4, #12]
 801cc46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cc4e:	81a3      	strh	r3, [r4, #12]
 801cc50:	4632      	mov	r2, r6
 801cc52:	463b      	mov	r3, r7
 801cc54:	4628      	mov	r0, r5
 801cc56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc5a:	f000 b98f 	b.w	801cf7c <_write_r>

0801cc5e <__sseek>:
 801cc5e:	b510      	push	{r4, lr}
 801cc60:	460c      	mov	r4, r1
 801cc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc66:	f000 f955 	bl	801cf14 <_lseek_r>
 801cc6a:	1c43      	adds	r3, r0, #1
 801cc6c:	89a3      	ldrh	r3, [r4, #12]
 801cc6e:	bf15      	itete	ne
 801cc70:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cc72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cc76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cc7a:	81a3      	strheq	r3, [r4, #12]
 801cc7c:	bf18      	it	ne
 801cc7e:	81a3      	strhne	r3, [r4, #12]
 801cc80:	bd10      	pop	{r4, pc}

0801cc82 <__sclose>:
 801cc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc86:	f000 b935 	b.w	801cef4 <_close_r>

0801cc8a <_vsniprintf_r>:
 801cc8a:	b530      	push	{r4, r5, lr}
 801cc8c:	4614      	mov	r4, r2
 801cc8e:	2c00      	cmp	r4, #0
 801cc90:	b09b      	sub	sp, #108	@ 0x6c
 801cc92:	4605      	mov	r5, r0
 801cc94:	461a      	mov	r2, r3
 801cc96:	da05      	bge.n	801cca4 <_vsniprintf_r+0x1a>
 801cc98:	238b      	movs	r3, #139	@ 0x8b
 801cc9a:	6003      	str	r3, [r0, #0]
 801cc9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cca0:	b01b      	add	sp, #108	@ 0x6c
 801cca2:	bd30      	pop	{r4, r5, pc}
 801cca4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cca8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ccac:	bf14      	ite	ne
 801ccae:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ccb2:	4623      	moveq	r3, r4
 801ccb4:	9302      	str	r3, [sp, #8]
 801ccb6:	9305      	str	r3, [sp, #20]
 801ccb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ccbc:	9100      	str	r1, [sp, #0]
 801ccbe:	9104      	str	r1, [sp, #16]
 801ccc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ccc4:	4669      	mov	r1, sp
 801ccc6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ccc8:	f000 fa86 	bl	801d1d8 <_svfiprintf_r>
 801cccc:	1c43      	adds	r3, r0, #1
 801ccce:	bfbc      	itt	lt
 801ccd0:	238b      	movlt	r3, #139	@ 0x8b
 801ccd2:	602b      	strlt	r3, [r5, #0]
 801ccd4:	2c00      	cmp	r4, #0
 801ccd6:	d0e3      	beq.n	801cca0 <_vsniprintf_r+0x16>
 801ccd8:	9b00      	ldr	r3, [sp, #0]
 801ccda:	2200      	movs	r2, #0
 801ccdc:	701a      	strb	r2, [r3, #0]
 801ccde:	e7df      	b.n	801cca0 <_vsniprintf_r+0x16>

0801cce0 <vsniprintf>:
 801cce0:	b507      	push	{r0, r1, r2, lr}
 801cce2:	9300      	str	r3, [sp, #0]
 801cce4:	4613      	mov	r3, r2
 801cce6:	460a      	mov	r2, r1
 801cce8:	4601      	mov	r1, r0
 801ccea:	4803      	ldr	r0, [pc, #12]	@ (801ccf8 <vsniprintf+0x18>)
 801ccec:	6800      	ldr	r0, [r0, #0]
 801ccee:	f7ff ffcc 	bl	801cc8a <_vsniprintf_r>
 801ccf2:	b003      	add	sp, #12
 801ccf4:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccf8:	2400068c 	.word	0x2400068c

0801ccfc <__swbuf_r>:
 801ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccfe:	460e      	mov	r6, r1
 801cd00:	4614      	mov	r4, r2
 801cd02:	4605      	mov	r5, r0
 801cd04:	b118      	cbz	r0, 801cd0e <__swbuf_r+0x12>
 801cd06:	6a03      	ldr	r3, [r0, #32]
 801cd08:	b90b      	cbnz	r3, 801cd0e <__swbuf_r+0x12>
 801cd0a:	f7ff fea5 	bl	801ca58 <__sinit>
 801cd0e:	69a3      	ldr	r3, [r4, #24]
 801cd10:	60a3      	str	r3, [r4, #8]
 801cd12:	89a3      	ldrh	r3, [r4, #12]
 801cd14:	071a      	lsls	r2, r3, #28
 801cd16:	d501      	bpl.n	801cd1c <__swbuf_r+0x20>
 801cd18:	6923      	ldr	r3, [r4, #16]
 801cd1a:	b943      	cbnz	r3, 801cd2e <__swbuf_r+0x32>
 801cd1c:	4621      	mov	r1, r4
 801cd1e:	4628      	mov	r0, r5
 801cd20:	f000 f82a 	bl	801cd78 <__swsetup_r>
 801cd24:	b118      	cbz	r0, 801cd2e <__swbuf_r+0x32>
 801cd26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801cd2a:	4638      	mov	r0, r7
 801cd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd2e:	6823      	ldr	r3, [r4, #0]
 801cd30:	6922      	ldr	r2, [r4, #16]
 801cd32:	1a98      	subs	r0, r3, r2
 801cd34:	6963      	ldr	r3, [r4, #20]
 801cd36:	b2f6      	uxtb	r6, r6
 801cd38:	4283      	cmp	r3, r0
 801cd3a:	4637      	mov	r7, r6
 801cd3c:	dc05      	bgt.n	801cd4a <__swbuf_r+0x4e>
 801cd3e:	4621      	mov	r1, r4
 801cd40:	4628      	mov	r0, r5
 801cd42:	f000 fe99 	bl	801da78 <_fflush_r>
 801cd46:	2800      	cmp	r0, #0
 801cd48:	d1ed      	bne.n	801cd26 <__swbuf_r+0x2a>
 801cd4a:	68a3      	ldr	r3, [r4, #8]
 801cd4c:	3b01      	subs	r3, #1
 801cd4e:	60a3      	str	r3, [r4, #8]
 801cd50:	6823      	ldr	r3, [r4, #0]
 801cd52:	1c5a      	adds	r2, r3, #1
 801cd54:	6022      	str	r2, [r4, #0]
 801cd56:	701e      	strb	r6, [r3, #0]
 801cd58:	6962      	ldr	r2, [r4, #20]
 801cd5a:	1c43      	adds	r3, r0, #1
 801cd5c:	429a      	cmp	r2, r3
 801cd5e:	d004      	beq.n	801cd6a <__swbuf_r+0x6e>
 801cd60:	89a3      	ldrh	r3, [r4, #12]
 801cd62:	07db      	lsls	r3, r3, #31
 801cd64:	d5e1      	bpl.n	801cd2a <__swbuf_r+0x2e>
 801cd66:	2e0a      	cmp	r6, #10
 801cd68:	d1df      	bne.n	801cd2a <__swbuf_r+0x2e>
 801cd6a:	4621      	mov	r1, r4
 801cd6c:	4628      	mov	r0, r5
 801cd6e:	f000 fe83 	bl	801da78 <_fflush_r>
 801cd72:	2800      	cmp	r0, #0
 801cd74:	d0d9      	beq.n	801cd2a <__swbuf_r+0x2e>
 801cd76:	e7d6      	b.n	801cd26 <__swbuf_r+0x2a>

0801cd78 <__swsetup_r>:
 801cd78:	b538      	push	{r3, r4, r5, lr}
 801cd7a:	4b29      	ldr	r3, [pc, #164]	@ (801ce20 <__swsetup_r+0xa8>)
 801cd7c:	4605      	mov	r5, r0
 801cd7e:	6818      	ldr	r0, [r3, #0]
 801cd80:	460c      	mov	r4, r1
 801cd82:	b118      	cbz	r0, 801cd8c <__swsetup_r+0x14>
 801cd84:	6a03      	ldr	r3, [r0, #32]
 801cd86:	b90b      	cbnz	r3, 801cd8c <__swsetup_r+0x14>
 801cd88:	f7ff fe66 	bl	801ca58 <__sinit>
 801cd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd90:	0719      	lsls	r1, r3, #28
 801cd92:	d422      	bmi.n	801cdda <__swsetup_r+0x62>
 801cd94:	06da      	lsls	r2, r3, #27
 801cd96:	d407      	bmi.n	801cda8 <__swsetup_r+0x30>
 801cd98:	2209      	movs	r2, #9
 801cd9a:	602a      	str	r2, [r5, #0]
 801cd9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cda0:	81a3      	strh	r3, [r4, #12]
 801cda2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cda6:	e033      	b.n	801ce10 <__swsetup_r+0x98>
 801cda8:	0758      	lsls	r0, r3, #29
 801cdaa:	d512      	bpl.n	801cdd2 <__swsetup_r+0x5a>
 801cdac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cdae:	b141      	cbz	r1, 801cdc2 <__swsetup_r+0x4a>
 801cdb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cdb4:	4299      	cmp	r1, r3
 801cdb6:	d002      	beq.n	801cdbe <__swsetup_r+0x46>
 801cdb8:	4628      	mov	r0, r5
 801cdba:	f000 f95f 	bl	801d07c <_free_r>
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	6363      	str	r3, [r4, #52]	@ 0x34
 801cdc2:	89a3      	ldrh	r3, [r4, #12]
 801cdc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cdc8:	81a3      	strh	r3, [r4, #12]
 801cdca:	2300      	movs	r3, #0
 801cdcc:	6063      	str	r3, [r4, #4]
 801cdce:	6923      	ldr	r3, [r4, #16]
 801cdd0:	6023      	str	r3, [r4, #0]
 801cdd2:	89a3      	ldrh	r3, [r4, #12]
 801cdd4:	f043 0308 	orr.w	r3, r3, #8
 801cdd8:	81a3      	strh	r3, [r4, #12]
 801cdda:	6923      	ldr	r3, [r4, #16]
 801cddc:	b94b      	cbnz	r3, 801cdf2 <__swsetup_r+0x7a>
 801cdde:	89a3      	ldrh	r3, [r4, #12]
 801cde0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cde4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cde8:	d003      	beq.n	801cdf2 <__swsetup_r+0x7a>
 801cdea:	4621      	mov	r1, r4
 801cdec:	4628      	mov	r0, r5
 801cdee:	f000 fea3 	bl	801db38 <__smakebuf_r>
 801cdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cdf6:	f013 0201 	ands.w	r2, r3, #1
 801cdfa:	d00a      	beq.n	801ce12 <__swsetup_r+0x9a>
 801cdfc:	2200      	movs	r2, #0
 801cdfe:	60a2      	str	r2, [r4, #8]
 801ce00:	6962      	ldr	r2, [r4, #20]
 801ce02:	4252      	negs	r2, r2
 801ce04:	61a2      	str	r2, [r4, #24]
 801ce06:	6922      	ldr	r2, [r4, #16]
 801ce08:	b942      	cbnz	r2, 801ce1c <__swsetup_r+0xa4>
 801ce0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ce0e:	d1c5      	bne.n	801cd9c <__swsetup_r+0x24>
 801ce10:	bd38      	pop	{r3, r4, r5, pc}
 801ce12:	0799      	lsls	r1, r3, #30
 801ce14:	bf58      	it	pl
 801ce16:	6962      	ldrpl	r2, [r4, #20]
 801ce18:	60a2      	str	r2, [r4, #8]
 801ce1a:	e7f4      	b.n	801ce06 <__swsetup_r+0x8e>
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	e7f7      	b.n	801ce10 <__swsetup_r+0x98>
 801ce20:	2400068c 	.word	0x2400068c

0801ce24 <memcmp>:
 801ce24:	b510      	push	{r4, lr}
 801ce26:	3901      	subs	r1, #1
 801ce28:	4402      	add	r2, r0
 801ce2a:	4290      	cmp	r0, r2
 801ce2c:	d101      	bne.n	801ce32 <memcmp+0xe>
 801ce2e:	2000      	movs	r0, #0
 801ce30:	e005      	b.n	801ce3e <memcmp+0x1a>
 801ce32:	7803      	ldrb	r3, [r0, #0]
 801ce34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ce38:	42a3      	cmp	r3, r4
 801ce3a:	d001      	beq.n	801ce40 <memcmp+0x1c>
 801ce3c:	1b18      	subs	r0, r3, r4
 801ce3e:	bd10      	pop	{r4, pc}
 801ce40:	3001      	adds	r0, #1
 801ce42:	e7f2      	b.n	801ce2a <memcmp+0x6>

0801ce44 <memmove>:
 801ce44:	4288      	cmp	r0, r1
 801ce46:	b510      	push	{r4, lr}
 801ce48:	eb01 0402 	add.w	r4, r1, r2
 801ce4c:	d902      	bls.n	801ce54 <memmove+0x10>
 801ce4e:	4284      	cmp	r4, r0
 801ce50:	4623      	mov	r3, r4
 801ce52:	d807      	bhi.n	801ce64 <memmove+0x20>
 801ce54:	1e43      	subs	r3, r0, #1
 801ce56:	42a1      	cmp	r1, r4
 801ce58:	d008      	beq.n	801ce6c <memmove+0x28>
 801ce5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce62:	e7f8      	b.n	801ce56 <memmove+0x12>
 801ce64:	4402      	add	r2, r0
 801ce66:	4601      	mov	r1, r0
 801ce68:	428a      	cmp	r2, r1
 801ce6a:	d100      	bne.n	801ce6e <memmove+0x2a>
 801ce6c:	bd10      	pop	{r4, pc}
 801ce6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce76:	e7f7      	b.n	801ce68 <memmove+0x24>

0801ce78 <memset>:
 801ce78:	4402      	add	r2, r0
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	4293      	cmp	r3, r2
 801ce7e:	d100      	bne.n	801ce82 <memset+0xa>
 801ce80:	4770      	bx	lr
 801ce82:	f803 1b01 	strb.w	r1, [r3], #1
 801ce86:	e7f9      	b.n	801ce7c <memset+0x4>

0801ce88 <strchr>:
 801ce88:	b2c9      	uxtb	r1, r1
 801ce8a:	4603      	mov	r3, r0
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce92:	b112      	cbz	r2, 801ce9a <strchr+0x12>
 801ce94:	428a      	cmp	r2, r1
 801ce96:	d1f9      	bne.n	801ce8c <strchr+0x4>
 801ce98:	4770      	bx	lr
 801ce9a:	2900      	cmp	r1, #0
 801ce9c:	bf18      	it	ne
 801ce9e:	2000      	movne	r0, #0
 801cea0:	4770      	bx	lr

0801cea2 <strncmp>:
 801cea2:	b510      	push	{r4, lr}
 801cea4:	b16a      	cbz	r2, 801cec2 <strncmp+0x20>
 801cea6:	3901      	subs	r1, #1
 801cea8:	1884      	adds	r4, r0, r2
 801ceaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ceae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ceb2:	429a      	cmp	r2, r3
 801ceb4:	d103      	bne.n	801cebe <strncmp+0x1c>
 801ceb6:	42a0      	cmp	r0, r4
 801ceb8:	d001      	beq.n	801cebe <strncmp+0x1c>
 801ceba:	2a00      	cmp	r2, #0
 801cebc:	d1f5      	bne.n	801ceaa <strncmp+0x8>
 801cebe:	1ad0      	subs	r0, r2, r3
 801cec0:	bd10      	pop	{r4, pc}
 801cec2:	4610      	mov	r0, r2
 801cec4:	e7fc      	b.n	801cec0 <strncmp+0x1e>

0801cec6 <strstr>:
 801cec6:	780a      	ldrb	r2, [r1, #0]
 801cec8:	b570      	push	{r4, r5, r6, lr}
 801ceca:	b96a      	cbnz	r2, 801cee8 <strstr+0x22>
 801cecc:	bd70      	pop	{r4, r5, r6, pc}
 801cece:	429a      	cmp	r2, r3
 801ced0:	d109      	bne.n	801cee6 <strstr+0x20>
 801ced2:	460c      	mov	r4, r1
 801ced4:	4605      	mov	r5, r0
 801ced6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d0f6      	beq.n	801cecc <strstr+0x6>
 801cede:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cee2:	429e      	cmp	r6, r3
 801cee4:	d0f7      	beq.n	801ced6 <strstr+0x10>
 801cee6:	3001      	adds	r0, #1
 801cee8:	7803      	ldrb	r3, [r0, #0]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d1ef      	bne.n	801cece <strstr+0x8>
 801ceee:	4618      	mov	r0, r3
 801cef0:	e7ec      	b.n	801cecc <strstr+0x6>
	...

0801cef4 <_close_r>:
 801cef4:	b538      	push	{r3, r4, r5, lr}
 801cef6:	4d06      	ldr	r5, [pc, #24]	@ (801cf10 <_close_r+0x1c>)
 801cef8:	2300      	movs	r3, #0
 801cefa:	4604      	mov	r4, r0
 801cefc:	4608      	mov	r0, r1
 801cefe:	602b      	str	r3, [r5, #0]
 801cf00:	f7e4 fffc 	bl	8001efc <_close>
 801cf04:	1c43      	adds	r3, r0, #1
 801cf06:	d102      	bne.n	801cf0e <_close_r+0x1a>
 801cf08:	682b      	ldr	r3, [r5, #0]
 801cf0a:	b103      	cbz	r3, 801cf0e <_close_r+0x1a>
 801cf0c:	6023      	str	r3, [r4, #0]
 801cf0e:	bd38      	pop	{r3, r4, r5, pc}
 801cf10:	24013ab8 	.word	0x24013ab8

0801cf14 <_lseek_r>:
 801cf14:	b538      	push	{r3, r4, r5, lr}
 801cf16:	4d07      	ldr	r5, [pc, #28]	@ (801cf34 <_lseek_r+0x20>)
 801cf18:	4604      	mov	r4, r0
 801cf1a:	4608      	mov	r0, r1
 801cf1c:	4611      	mov	r1, r2
 801cf1e:	2200      	movs	r2, #0
 801cf20:	602a      	str	r2, [r5, #0]
 801cf22:	461a      	mov	r2, r3
 801cf24:	f7e5 f811 	bl	8001f4a <_lseek>
 801cf28:	1c43      	adds	r3, r0, #1
 801cf2a:	d102      	bne.n	801cf32 <_lseek_r+0x1e>
 801cf2c:	682b      	ldr	r3, [r5, #0]
 801cf2e:	b103      	cbz	r3, 801cf32 <_lseek_r+0x1e>
 801cf30:	6023      	str	r3, [r4, #0]
 801cf32:	bd38      	pop	{r3, r4, r5, pc}
 801cf34:	24013ab8 	.word	0x24013ab8

0801cf38 <_read_r>:
 801cf38:	b538      	push	{r3, r4, r5, lr}
 801cf3a:	4d07      	ldr	r5, [pc, #28]	@ (801cf58 <_read_r+0x20>)
 801cf3c:	4604      	mov	r4, r0
 801cf3e:	4608      	mov	r0, r1
 801cf40:	4611      	mov	r1, r2
 801cf42:	2200      	movs	r2, #0
 801cf44:	602a      	str	r2, [r5, #0]
 801cf46:	461a      	mov	r2, r3
 801cf48:	f7e4 ff9f 	bl	8001e8a <_read>
 801cf4c:	1c43      	adds	r3, r0, #1
 801cf4e:	d102      	bne.n	801cf56 <_read_r+0x1e>
 801cf50:	682b      	ldr	r3, [r5, #0]
 801cf52:	b103      	cbz	r3, 801cf56 <_read_r+0x1e>
 801cf54:	6023      	str	r3, [r4, #0]
 801cf56:	bd38      	pop	{r3, r4, r5, pc}
 801cf58:	24013ab8 	.word	0x24013ab8

0801cf5c <_sbrk_r>:
 801cf5c:	b538      	push	{r3, r4, r5, lr}
 801cf5e:	4d06      	ldr	r5, [pc, #24]	@ (801cf78 <_sbrk_r+0x1c>)
 801cf60:	2300      	movs	r3, #0
 801cf62:	4604      	mov	r4, r0
 801cf64:	4608      	mov	r0, r1
 801cf66:	602b      	str	r3, [r5, #0]
 801cf68:	f7e4 fffc 	bl	8001f64 <_sbrk>
 801cf6c:	1c43      	adds	r3, r0, #1
 801cf6e:	d102      	bne.n	801cf76 <_sbrk_r+0x1a>
 801cf70:	682b      	ldr	r3, [r5, #0]
 801cf72:	b103      	cbz	r3, 801cf76 <_sbrk_r+0x1a>
 801cf74:	6023      	str	r3, [r4, #0]
 801cf76:	bd38      	pop	{r3, r4, r5, pc}
 801cf78:	24013ab8 	.word	0x24013ab8

0801cf7c <_write_r>:
 801cf7c:	b538      	push	{r3, r4, r5, lr}
 801cf7e:	4d07      	ldr	r5, [pc, #28]	@ (801cf9c <_write_r+0x20>)
 801cf80:	4604      	mov	r4, r0
 801cf82:	4608      	mov	r0, r1
 801cf84:	4611      	mov	r1, r2
 801cf86:	2200      	movs	r2, #0
 801cf88:	602a      	str	r2, [r5, #0]
 801cf8a:	461a      	mov	r2, r3
 801cf8c:	f7e4 ff9a 	bl	8001ec4 <_write>
 801cf90:	1c43      	adds	r3, r0, #1
 801cf92:	d102      	bne.n	801cf9a <_write_r+0x1e>
 801cf94:	682b      	ldr	r3, [r5, #0]
 801cf96:	b103      	cbz	r3, 801cf9a <_write_r+0x1e>
 801cf98:	6023      	str	r3, [r4, #0]
 801cf9a:	bd38      	pop	{r3, r4, r5, pc}
 801cf9c:	24013ab8 	.word	0x24013ab8

0801cfa0 <__errno>:
 801cfa0:	4b01      	ldr	r3, [pc, #4]	@ (801cfa8 <__errno+0x8>)
 801cfa2:	6818      	ldr	r0, [r3, #0]
 801cfa4:	4770      	bx	lr
 801cfa6:	bf00      	nop
 801cfa8:	2400068c 	.word	0x2400068c

0801cfac <__libc_init_array>:
 801cfac:	b570      	push	{r4, r5, r6, lr}
 801cfae:	4d0d      	ldr	r5, [pc, #52]	@ (801cfe4 <__libc_init_array+0x38>)
 801cfb0:	4c0d      	ldr	r4, [pc, #52]	@ (801cfe8 <__libc_init_array+0x3c>)
 801cfb2:	1b64      	subs	r4, r4, r5
 801cfb4:	10a4      	asrs	r4, r4, #2
 801cfb6:	2600      	movs	r6, #0
 801cfb8:	42a6      	cmp	r6, r4
 801cfba:	d109      	bne.n	801cfd0 <__libc_init_array+0x24>
 801cfbc:	4d0b      	ldr	r5, [pc, #44]	@ (801cfec <__libc_init_array+0x40>)
 801cfbe:	4c0c      	ldr	r4, [pc, #48]	@ (801cff0 <__libc_init_array+0x44>)
 801cfc0:	f000 fe64 	bl	801dc8c <_init>
 801cfc4:	1b64      	subs	r4, r4, r5
 801cfc6:	10a4      	asrs	r4, r4, #2
 801cfc8:	2600      	movs	r6, #0
 801cfca:	42a6      	cmp	r6, r4
 801cfcc:	d105      	bne.n	801cfda <__libc_init_array+0x2e>
 801cfce:	bd70      	pop	{r4, r5, r6, pc}
 801cfd0:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfd4:	4798      	blx	r3
 801cfd6:	3601      	adds	r6, #1
 801cfd8:	e7ee      	b.n	801cfb8 <__libc_init_array+0xc>
 801cfda:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfde:	4798      	blx	r3
 801cfe0:	3601      	adds	r6, #1
 801cfe2:	e7f2      	b.n	801cfca <__libc_init_array+0x1e>
 801cfe4:	0801ee48 	.word	0x0801ee48
 801cfe8:	0801ee48 	.word	0x0801ee48
 801cfec:	0801ee48 	.word	0x0801ee48
 801cff0:	0801ee54 	.word	0x0801ee54

0801cff4 <__retarget_lock_init_recursive>:
 801cff4:	4770      	bx	lr

0801cff6 <__retarget_lock_acquire_recursive>:
 801cff6:	4770      	bx	lr

0801cff8 <__retarget_lock_release_recursive>:
 801cff8:	4770      	bx	lr

0801cffa <strcpy>:
 801cffa:	4603      	mov	r3, r0
 801cffc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d000:	f803 2b01 	strb.w	r2, [r3], #1
 801d004:	2a00      	cmp	r2, #0
 801d006:	d1f9      	bne.n	801cffc <strcpy+0x2>
 801d008:	4770      	bx	lr

0801d00a <memcpy>:
 801d00a:	440a      	add	r2, r1
 801d00c:	4291      	cmp	r1, r2
 801d00e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d012:	d100      	bne.n	801d016 <memcpy+0xc>
 801d014:	4770      	bx	lr
 801d016:	b510      	push	{r4, lr}
 801d018:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d020:	4291      	cmp	r1, r2
 801d022:	d1f9      	bne.n	801d018 <memcpy+0xe>
 801d024:	bd10      	pop	{r4, pc}
	...

0801d028 <__assert_func>:
 801d028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d02a:	4614      	mov	r4, r2
 801d02c:	461a      	mov	r2, r3
 801d02e:	4b09      	ldr	r3, [pc, #36]	@ (801d054 <__assert_func+0x2c>)
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	4605      	mov	r5, r0
 801d034:	68d8      	ldr	r0, [r3, #12]
 801d036:	b954      	cbnz	r4, 801d04e <__assert_func+0x26>
 801d038:	4b07      	ldr	r3, [pc, #28]	@ (801d058 <__assert_func+0x30>)
 801d03a:	461c      	mov	r4, r3
 801d03c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d040:	9100      	str	r1, [sp, #0]
 801d042:	462b      	mov	r3, r5
 801d044:	4905      	ldr	r1, [pc, #20]	@ (801d05c <__assert_func+0x34>)
 801d046:	f000 fd3f 	bl	801dac8 <fiprintf>
 801d04a:	f000 fdd3 	bl	801dbf4 <abort>
 801d04e:	4b04      	ldr	r3, [pc, #16]	@ (801d060 <__assert_func+0x38>)
 801d050:	e7f4      	b.n	801d03c <__assert_func+0x14>
 801d052:	bf00      	nop
 801d054:	2400068c 	.word	0x2400068c
 801d058:	0801ee09 	.word	0x0801ee09
 801d05c:	0801eddb 	.word	0x0801eddb
 801d060:	0801edce 	.word	0x0801edce

0801d064 <__env_lock>:
 801d064:	4801      	ldr	r0, [pc, #4]	@ (801d06c <__env_lock+0x8>)
 801d066:	f7ff bfc6 	b.w	801cff6 <__retarget_lock_acquire_recursive>
 801d06a:	bf00      	nop
 801d06c:	24013abc 	.word	0x24013abc

0801d070 <__env_unlock>:
 801d070:	4801      	ldr	r0, [pc, #4]	@ (801d078 <__env_unlock+0x8>)
 801d072:	f7ff bfc1 	b.w	801cff8 <__retarget_lock_release_recursive>
 801d076:	bf00      	nop
 801d078:	24013abc 	.word	0x24013abc

0801d07c <_free_r>:
 801d07c:	b538      	push	{r3, r4, r5, lr}
 801d07e:	4605      	mov	r5, r0
 801d080:	2900      	cmp	r1, #0
 801d082:	d041      	beq.n	801d108 <_free_r+0x8c>
 801d084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d088:	1f0c      	subs	r4, r1, #4
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	bfb8      	it	lt
 801d08e:	18e4      	addlt	r4, r4, r3
 801d090:	f7ff fb30 	bl	801c6f4 <__malloc_lock>
 801d094:	4a1d      	ldr	r2, [pc, #116]	@ (801d10c <_free_r+0x90>)
 801d096:	6813      	ldr	r3, [r2, #0]
 801d098:	b933      	cbnz	r3, 801d0a8 <_free_r+0x2c>
 801d09a:	6063      	str	r3, [r4, #4]
 801d09c:	6014      	str	r4, [r2, #0]
 801d09e:	4628      	mov	r0, r5
 801d0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d0a4:	f7ff bb2c 	b.w	801c700 <__malloc_unlock>
 801d0a8:	42a3      	cmp	r3, r4
 801d0aa:	d908      	bls.n	801d0be <_free_r+0x42>
 801d0ac:	6820      	ldr	r0, [r4, #0]
 801d0ae:	1821      	adds	r1, r4, r0
 801d0b0:	428b      	cmp	r3, r1
 801d0b2:	bf01      	itttt	eq
 801d0b4:	6819      	ldreq	r1, [r3, #0]
 801d0b6:	685b      	ldreq	r3, [r3, #4]
 801d0b8:	1809      	addeq	r1, r1, r0
 801d0ba:	6021      	streq	r1, [r4, #0]
 801d0bc:	e7ed      	b.n	801d09a <_free_r+0x1e>
 801d0be:	461a      	mov	r2, r3
 801d0c0:	685b      	ldr	r3, [r3, #4]
 801d0c2:	b10b      	cbz	r3, 801d0c8 <_free_r+0x4c>
 801d0c4:	42a3      	cmp	r3, r4
 801d0c6:	d9fa      	bls.n	801d0be <_free_r+0x42>
 801d0c8:	6811      	ldr	r1, [r2, #0]
 801d0ca:	1850      	adds	r0, r2, r1
 801d0cc:	42a0      	cmp	r0, r4
 801d0ce:	d10b      	bne.n	801d0e8 <_free_r+0x6c>
 801d0d0:	6820      	ldr	r0, [r4, #0]
 801d0d2:	4401      	add	r1, r0
 801d0d4:	1850      	adds	r0, r2, r1
 801d0d6:	4283      	cmp	r3, r0
 801d0d8:	6011      	str	r1, [r2, #0]
 801d0da:	d1e0      	bne.n	801d09e <_free_r+0x22>
 801d0dc:	6818      	ldr	r0, [r3, #0]
 801d0de:	685b      	ldr	r3, [r3, #4]
 801d0e0:	6053      	str	r3, [r2, #4]
 801d0e2:	4408      	add	r0, r1
 801d0e4:	6010      	str	r0, [r2, #0]
 801d0e6:	e7da      	b.n	801d09e <_free_r+0x22>
 801d0e8:	d902      	bls.n	801d0f0 <_free_r+0x74>
 801d0ea:	230c      	movs	r3, #12
 801d0ec:	602b      	str	r3, [r5, #0]
 801d0ee:	e7d6      	b.n	801d09e <_free_r+0x22>
 801d0f0:	6820      	ldr	r0, [r4, #0]
 801d0f2:	1821      	adds	r1, r4, r0
 801d0f4:	428b      	cmp	r3, r1
 801d0f6:	bf04      	itt	eq
 801d0f8:	6819      	ldreq	r1, [r3, #0]
 801d0fa:	685b      	ldreq	r3, [r3, #4]
 801d0fc:	6063      	str	r3, [r4, #4]
 801d0fe:	bf04      	itt	eq
 801d100:	1809      	addeq	r1, r1, r0
 801d102:	6021      	streq	r1, [r4, #0]
 801d104:	6054      	str	r4, [r2, #4]
 801d106:	e7ca      	b.n	801d09e <_free_r+0x22>
 801d108:	bd38      	pop	{r3, r4, r5, pc}
 801d10a:	bf00      	nop
 801d10c:	24013978 	.word	0x24013978

0801d110 <_malloc_usable_size_r>:
 801d110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d114:	1f18      	subs	r0, r3, #4
 801d116:	2b00      	cmp	r3, #0
 801d118:	bfbc      	itt	lt
 801d11a:	580b      	ldrlt	r3, [r1, r0]
 801d11c:	18c0      	addlt	r0, r0, r3
 801d11e:	4770      	bx	lr

0801d120 <__ssputs_r>:
 801d120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d124:	688e      	ldr	r6, [r1, #8]
 801d126:	461f      	mov	r7, r3
 801d128:	42be      	cmp	r6, r7
 801d12a:	680b      	ldr	r3, [r1, #0]
 801d12c:	4682      	mov	sl, r0
 801d12e:	460c      	mov	r4, r1
 801d130:	4690      	mov	r8, r2
 801d132:	d82d      	bhi.n	801d190 <__ssputs_r+0x70>
 801d134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d138:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d13c:	d026      	beq.n	801d18c <__ssputs_r+0x6c>
 801d13e:	6965      	ldr	r5, [r4, #20]
 801d140:	6909      	ldr	r1, [r1, #16]
 801d142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d146:	eba3 0901 	sub.w	r9, r3, r1
 801d14a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d14e:	1c7b      	adds	r3, r7, #1
 801d150:	444b      	add	r3, r9
 801d152:	106d      	asrs	r5, r5, #1
 801d154:	429d      	cmp	r5, r3
 801d156:	bf38      	it	cc
 801d158:	461d      	movcc	r5, r3
 801d15a:	0553      	lsls	r3, r2, #21
 801d15c:	d527      	bpl.n	801d1ae <__ssputs_r+0x8e>
 801d15e:	4629      	mov	r1, r5
 801d160:	f7ff fa48 	bl	801c5f4 <_malloc_r>
 801d164:	4606      	mov	r6, r0
 801d166:	b360      	cbz	r0, 801d1c2 <__ssputs_r+0xa2>
 801d168:	6921      	ldr	r1, [r4, #16]
 801d16a:	464a      	mov	r2, r9
 801d16c:	f7ff ff4d 	bl	801d00a <memcpy>
 801d170:	89a3      	ldrh	r3, [r4, #12]
 801d172:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d17a:	81a3      	strh	r3, [r4, #12]
 801d17c:	6126      	str	r6, [r4, #16]
 801d17e:	6165      	str	r5, [r4, #20]
 801d180:	444e      	add	r6, r9
 801d182:	eba5 0509 	sub.w	r5, r5, r9
 801d186:	6026      	str	r6, [r4, #0]
 801d188:	60a5      	str	r5, [r4, #8]
 801d18a:	463e      	mov	r6, r7
 801d18c:	42be      	cmp	r6, r7
 801d18e:	d900      	bls.n	801d192 <__ssputs_r+0x72>
 801d190:	463e      	mov	r6, r7
 801d192:	6820      	ldr	r0, [r4, #0]
 801d194:	4632      	mov	r2, r6
 801d196:	4641      	mov	r1, r8
 801d198:	f7ff fe54 	bl	801ce44 <memmove>
 801d19c:	68a3      	ldr	r3, [r4, #8]
 801d19e:	1b9b      	subs	r3, r3, r6
 801d1a0:	60a3      	str	r3, [r4, #8]
 801d1a2:	6823      	ldr	r3, [r4, #0]
 801d1a4:	4433      	add	r3, r6
 801d1a6:	6023      	str	r3, [r4, #0]
 801d1a8:	2000      	movs	r0, #0
 801d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1ae:	462a      	mov	r2, r5
 801d1b0:	f7ff fb20 	bl	801c7f4 <_realloc_r>
 801d1b4:	4606      	mov	r6, r0
 801d1b6:	2800      	cmp	r0, #0
 801d1b8:	d1e0      	bne.n	801d17c <__ssputs_r+0x5c>
 801d1ba:	6921      	ldr	r1, [r4, #16]
 801d1bc:	4650      	mov	r0, sl
 801d1be:	f7ff ff5d 	bl	801d07c <_free_r>
 801d1c2:	230c      	movs	r3, #12
 801d1c4:	f8ca 3000 	str.w	r3, [sl]
 801d1c8:	89a3      	ldrh	r3, [r4, #12]
 801d1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d1ce:	81a3      	strh	r3, [r4, #12]
 801d1d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1d4:	e7e9      	b.n	801d1aa <__ssputs_r+0x8a>
	...

0801d1d8 <_svfiprintf_r>:
 801d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1dc:	4698      	mov	r8, r3
 801d1de:	898b      	ldrh	r3, [r1, #12]
 801d1e0:	061b      	lsls	r3, r3, #24
 801d1e2:	b09d      	sub	sp, #116	@ 0x74
 801d1e4:	4607      	mov	r7, r0
 801d1e6:	460d      	mov	r5, r1
 801d1e8:	4614      	mov	r4, r2
 801d1ea:	d510      	bpl.n	801d20e <_svfiprintf_r+0x36>
 801d1ec:	690b      	ldr	r3, [r1, #16]
 801d1ee:	b973      	cbnz	r3, 801d20e <_svfiprintf_r+0x36>
 801d1f0:	2140      	movs	r1, #64	@ 0x40
 801d1f2:	f7ff f9ff 	bl	801c5f4 <_malloc_r>
 801d1f6:	6028      	str	r0, [r5, #0]
 801d1f8:	6128      	str	r0, [r5, #16]
 801d1fa:	b930      	cbnz	r0, 801d20a <_svfiprintf_r+0x32>
 801d1fc:	230c      	movs	r3, #12
 801d1fe:	603b      	str	r3, [r7, #0]
 801d200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d204:	b01d      	add	sp, #116	@ 0x74
 801d206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d20a:	2340      	movs	r3, #64	@ 0x40
 801d20c:	616b      	str	r3, [r5, #20]
 801d20e:	2300      	movs	r3, #0
 801d210:	9309      	str	r3, [sp, #36]	@ 0x24
 801d212:	2320      	movs	r3, #32
 801d214:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d218:	f8cd 800c 	str.w	r8, [sp, #12]
 801d21c:	2330      	movs	r3, #48	@ 0x30
 801d21e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d3bc <_svfiprintf_r+0x1e4>
 801d222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d226:	f04f 0901 	mov.w	r9, #1
 801d22a:	4623      	mov	r3, r4
 801d22c:	469a      	mov	sl, r3
 801d22e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d232:	b10a      	cbz	r2, 801d238 <_svfiprintf_r+0x60>
 801d234:	2a25      	cmp	r2, #37	@ 0x25
 801d236:	d1f9      	bne.n	801d22c <_svfiprintf_r+0x54>
 801d238:	ebba 0b04 	subs.w	fp, sl, r4
 801d23c:	d00b      	beq.n	801d256 <_svfiprintf_r+0x7e>
 801d23e:	465b      	mov	r3, fp
 801d240:	4622      	mov	r2, r4
 801d242:	4629      	mov	r1, r5
 801d244:	4638      	mov	r0, r7
 801d246:	f7ff ff6b 	bl	801d120 <__ssputs_r>
 801d24a:	3001      	adds	r0, #1
 801d24c:	f000 80a7 	beq.w	801d39e <_svfiprintf_r+0x1c6>
 801d250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d252:	445a      	add	r2, fp
 801d254:	9209      	str	r2, [sp, #36]	@ 0x24
 801d256:	f89a 3000 	ldrb.w	r3, [sl]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	f000 809f 	beq.w	801d39e <_svfiprintf_r+0x1c6>
 801d260:	2300      	movs	r3, #0
 801d262:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d26a:	f10a 0a01 	add.w	sl, sl, #1
 801d26e:	9304      	str	r3, [sp, #16]
 801d270:	9307      	str	r3, [sp, #28]
 801d272:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d276:	931a      	str	r3, [sp, #104]	@ 0x68
 801d278:	4654      	mov	r4, sl
 801d27a:	2205      	movs	r2, #5
 801d27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d280:	484e      	ldr	r0, [pc, #312]	@ (801d3bc <_svfiprintf_r+0x1e4>)
 801d282:	f7e3 f845 	bl	8000310 <memchr>
 801d286:	9a04      	ldr	r2, [sp, #16]
 801d288:	b9d8      	cbnz	r0, 801d2c2 <_svfiprintf_r+0xea>
 801d28a:	06d0      	lsls	r0, r2, #27
 801d28c:	bf44      	itt	mi
 801d28e:	2320      	movmi	r3, #32
 801d290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d294:	0711      	lsls	r1, r2, #28
 801d296:	bf44      	itt	mi
 801d298:	232b      	movmi	r3, #43	@ 0x2b
 801d29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d29e:	f89a 3000 	ldrb.w	r3, [sl]
 801d2a2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d2a4:	d015      	beq.n	801d2d2 <_svfiprintf_r+0xfa>
 801d2a6:	9a07      	ldr	r2, [sp, #28]
 801d2a8:	4654      	mov	r4, sl
 801d2aa:	2000      	movs	r0, #0
 801d2ac:	f04f 0c0a 	mov.w	ip, #10
 801d2b0:	4621      	mov	r1, r4
 801d2b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2b6:	3b30      	subs	r3, #48	@ 0x30
 801d2b8:	2b09      	cmp	r3, #9
 801d2ba:	d94b      	bls.n	801d354 <_svfiprintf_r+0x17c>
 801d2bc:	b1b0      	cbz	r0, 801d2ec <_svfiprintf_r+0x114>
 801d2be:	9207      	str	r2, [sp, #28]
 801d2c0:	e014      	b.n	801d2ec <_svfiprintf_r+0x114>
 801d2c2:	eba0 0308 	sub.w	r3, r0, r8
 801d2c6:	fa09 f303 	lsl.w	r3, r9, r3
 801d2ca:	4313      	orrs	r3, r2
 801d2cc:	9304      	str	r3, [sp, #16]
 801d2ce:	46a2      	mov	sl, r4
 801d2d0:	e7d2      	b.n	801d278 <_svfiprintf_r+0xa0>
 801d2d2:	9b03      	ldr	r3, [sp, #12]
 801d2d4:	1d19      	adds	r1, r3, #4
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	9103      	str	r1, [sp, #12]
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	bfbb      	ittet	lt
 801d2de:	425b      	neglt	r3, r3
 801d2e0:	f042 0202 	orrlt.w	r2, r2, #2
 801d2e4:	9307      	strge	r3, [sp, #28]
 801d2e6:	9307      	strlt	r3, [sp, #28]
 801d2e8:	bfb8      	it	lt
 801d2ea:	9204      	strlt	r2, [sp, #16]
 801d2ec:	7823      	ldrb	r3, [r4, #0]
 801d2ee:	2b2e      	cmp	r3, #46	@ 0x2e
 801d2f0:	d10a      	bne.n	801d308 <_svfiprintf_r+0x130>
 801d2f2:	7863      	ldrb	r3, [r4, #1]
 801d2f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d2f6:	d132      	bne.n	801d35e <_svfiprintf_r+0x186>
 801d2f8:	9b03      	ldr	r3, [sp, #12]
 801d2fa:	1d1a      	adds	r2, r3, #4
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	9203      	str	r2, [sp, #12]
 801d300:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d304:	3402      	adds	r4, #2
 801d306:	9305      	str	r3, [sp, #20]
 801d308:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d3cc <_svfiprintf_r+0x1f4>
 801d30c:	7821      	ldrb	r1, [r4, #0]
 801d30e:	2203      	movs	r2, #3
 801d310:	4650      	mov	r0, sl
 801d312:	f7e2 fffd 	bl	8000310 <memchr>
 801d316:	b138      	cbz	r0, 801d328 <_svfiprintf_r+0x150>
 801d318:	9b04      	ldr	r3, [sp, #16]
 801d31a:	eba0 000a 	sub.w	r0, r0, sl
 801d31e:	2240      	movs	r2, #64	@ 0x40
 801d320:	4082      	lsls	r2, r0
 801d322:	4313      	orrs	r3, r2
 801d324:	3401      	adds	r4, #1
 801d326:	9304      	str	r3, [sp, #16]
 801d328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d32c:	4824      	ldr	r0, [pc, #144]	@ (801d3c0 <_svfiprintf_r+0x1e8>)
 801d32e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d332:	2206      	movs	r2, #6
 801d334:	f7e2 ffec 	bl	8000310 <memchr>
 801d338:	2800      	cmp	r0, #0
 801d33a:	d036      	beq.n	801d3aa <_svfiprintf_r+0x1d2>
 801d33c:	4b21      	ldr	r3, [pc, #132]	@ (801d3c4 <_svfiprintf_r+0x1ec>)
 801d33e:	bb1b      	cbnz	r3, 801d388 <_svfiprintf_r+0x1b0>
 801d340:	9b03      	ldr	r3, [sp, #12]
 801d342:	3307      	adds	r3, #7
 801d344:	f023 0307 	bic.w	r3, r3, #7
 801d348:	3308      	adds	r3, #8
 801d34a:	9303      	str	r3, [sp, #12]
 801d34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d34e:	4433      	add	r3, r6
 801d350:	9309      	str	r3, [sp, #36]	@ 0x24
 801d352:	e76a      	b.n	801d22a <_svfiprintf_r+0x52>
 801d354:	fb0c 3202 	mla	r2, ip, r2, r3
 801d358:	460c      	mov	r4, r1
 801d35a:	2001      	movs	r0, #1
 801d35c:	e7a8      	b.n	801d2b0 <_svfiprintf_r+0xd8>
 801d35e:	2300      	movs	r3, #0
 801d360:	3401      	adds	r4, #1
 801d362:	9305      	str	r3, [sp, #20]
 801d364:	4619      	mov	r1, r3
 801d366:	f04f 0c0a 	mov.w	ip, #10
 801d36a:	4620      	mov	r0, r4
 801d36c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d370:	3a30      	subs	r2, #48	@ 0x30
 801d372:	2a09      	cmp	r2, #9
 801d374:	d903      	bls.n	801d37e <_svfiprintf_r+0x1a6>
 801d376:	2b00      	cmp	r3, #0
 801d378:	d0c6      	beq.n	801d308 <_svfiprintf_r+0x130>
 801d37a:	9105      	str	r1, [sp, #20]
 801d37c:	e7c4      	b.n	801d308 <_svfiprintf_r+0x130>
 801d37e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d382:	4604      	mov	r4, r0
 801d384:	2301      	movs	r3, #1
 801d386:	e7f0      	b.n	801d36a <_svfiprintf_r+0x192>
 801d388:	ab03      	add	r3, sp, #12
 801d38a:	9300      	str	r3, [sp, #0]
 801d38c:	462a      	mov	r2, r5
 801d38e:	4b0e      	ldr	r3, [pc, #56]	@ (801d3c8 <_svfiprintf_r+0x1f0>)
 801d390:	a904      	add	r1, sp, #16
 801d392:	4638      	mov	r0, r7
 801d394:	f3af 8000 	nop.w
 801d398:	1c42      	adds	r2, r0, #1
 801d39a:	4606      	mov	r6, r0
 801d39c:	d1d6      	bne.n	801d34c <_svfiprintf_r+0x174>
 801d39e:	89ab      	ldrh	r3, [r5, #12]
 801d3a0:	065b      	lsls	r3, r3, #25
 801d3a2:	f53f af2d 	bmi.w	801d200 <_svfiprintf_r+0x28>
 801d3a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d3a8:	e72c      	b.n	801d204 <_svfiprintf_r+0x2c>
 801d3aa:	ab03      	add	r3, sp, #12
 801d3ac:	9300      	str	r3, [sp, #0]
 801d3ae:	462a      	mov	r2, r5
 801d3b0:	4b05      	ldr	r3, [pc, #20]	@ (801d3c8 <_svfiprintf_r+0x1f0>)
 801d3b2:	a904      	add	r1, sp, #16
 801d3b4:	4638      	mov	r0, r7
 801d3b6:	f000 f9bb 	bl	801d730 <_printf_i>
 801d3ba:	e7ed      	b.n	801d398 <_svfiprintf_r+0x1c0>
 801d3bc:	0801ee0a 	.word	0x0801ee0a
 801d3c0:	0801ee14 	.word	0x0801ee14
 801d3c4:	00000000 	.word	0x00000000
 801d3c8:	0801d121 	.word	0x0801d121
 801d3cc:	0801ee10 	.word	0x0801ee10

0801d3d0 <__sfputc_r>:
 801d3d0:	6893      	ldr	r3, [r2, #8]
 801d3d2:	3b01      	subs	r3, #1
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	b410      	push	{r4}
 801d3d8:	6093      	str	r3, [r2, #8]
 801d3da:	da08      	bge.n	801d3ee <__sfputc_r+0x1e>
 801d3dc:	6994      	ldr	r4, [r2, #24]
 801d3de:	42a3      	cmp	r3, r4
 801d3e0:	db01      	blt.n	801d3e6 <__sfputc_r+0x16>
 801d3e2:	290a      	cmp	r1, #10
 801d3e4:	d103      	bne.n	801d3ee <__sfputc_r+0x1e>
 801d3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3ea:	f7ff bc87 	b.w	801ccfc <__swbuf_r>
 801d3ee:	6813      	ldr	r3, [r2, #0]
 801d3f0:	1c58      	adds	r0, r3, #1
 801d3f2:	6010      	str	r0, [r2, #0]
 801d3f4:	7019      	strb	r1, [r3, #0]
 801d3f6:	4608      	mov	r0, r1
 801d3f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3fc:	4770      	bx	lr

0801d3fe <__sfputs_r>:
 801d3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d400:	4606      	mov	r6, r0
 801d402:	460f      	mov	r7, r1
 801d404:	4614      	mov	r4, r2
 801d406:	18d5      	adds	r5, r2, r3
 801d408:	42ac      	cmp	r4, r5
 801d40a:	d101      	bne.n	801d410 <__sfputs_r+0x12>
 801d40c:	2000      	movs	r0, #0
 801d40e:	e007      	b.n	801d420 <__sfputs_r+0x22>
 801d410:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d414:	463a      	mov	r2, r7
 801d416:	4630      	mov	r0, r6
 801d418:	f7ff ffda 	bl	801d3d0 <__sfputc_r>
 801d41c:	1c43      	adds	r3, r0, #1
 801d41e:	d1f3      	bne.n	801d408 <__sfputs_r+0xa>
 801d420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d424 <_vfiprintf_r>:
 801d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d428:	460d      	mov	r5, r1
 801d42a:	b09d      	sub	sp, #116	@ 0x74
 801d42c:	4614      	mov	r4, r2
 801d42e:	4698      	mov	r8, r3
 801d430:	4606      	mov	r6, r0
 801d432:	b118      	cbz	r0, 801d43c <_vfiprintf_r+0x18>
 801d434:	6a03      	ldr	r3, [r0, #32]
 801d436:	b90b      	cbnz	r3, 801d43c <_vfiprintf_r+0x18>
 801d438:	f7ff fb0e 	bl	801ca58 <__sinit>
 801d43c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d43e:	07d9      	lsls	r1, r3, #31
 801d440:	d405      	bmi.n	801d44e <_vfiprintf_r+0x2a>
 801d442:	89ab      	ldrh	r3, [r5, #12]
 801d444:	059a      	lsls	r2, r3, #22
 801d446:	d402      	bmi.n	801d44e <_vfiprintf_r+0x2a>
 801d448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d44a:	f7ff fdd4 	bl	801cff6 <__retarget_lock_acquire_recursive>
 801d44e:	89ab      	ldrh	r3, [r5, #12]
 801d450:	071b      	lsls	r3, r3, #28
 801d452:	d501      	bpl.n	801d458 <_vfiprintf_r+0x34>
 801d454:	692b      	ldr	r3, [r5, #16]
 801d456:	b99b      	cbnz	r3, 801d480 <_vfiprintf_r+0x5c>
 801d458:	4629      	mov	r1, r5
 801d45a:	4630      	mov	r0, r6
 801d45c:	f7ff fc8c 	bl	801cd78 <__swsetup_r>
 801d460:	b170      	cbz	r0, 801d480 <_vfiprintf_r+0x5c>
 801d462:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d464:	07dc      	lsls	r4, r3, #31
 801d466:	d504      	bpl.n	801d472 <_vfiprintf_r+0x4e>
 801d468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d46c:	b01d      	add	sp, #116	@ 0x74
 801d46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d472:	89ab      	ldrh	r3, [r5, #12]
 801d474:	0598      	lsls	r0, r3, #22
 801d476:	d4f7      	bmi.n	801d468 <_vfiprintf_r+0x44>
 801d478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d47a:	f7ff fdbd 	bl	801cff8 <__retarget_lock_release_recursive>
 801d47e:	e7f3      	b.n	801d468 <_vfiprintf_r+0x44>
 801d480:	2300      	movs	r3, #0
 801d482:	9309      	str	r3, [sp, #36]	@ 0x24
 801d484:	2320      	movs	r3, #32
 801d486:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d48a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d48e:	2330      	movs	r3, #48	@ 0x30
 801d490:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d640 <_vfiprintf_r+0x21c>
 801d494:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d498:	f04f 0901 	mov.w	r9, #1
 801d49c:	4623      	mov	r3, r4
 801d49e:	469a      	mov	sl, r3
 801d4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4a4:	b10a      	cbz	r2, 801d4aa <_vfiprintf_r+0x86>
 801d4a6:	2a25      	cmp	r2, #37	@ 0x25
 801d4a8:	d1f9      	bne.n	801d49e <_vfiprintf_r+0x7a>
 801d4aa:	ebba 0b04 	subs.w	fp, sl, r4
 801d4ae:	d00b      	beq.n	801d4c8 <_vfiprintf_r+0xa4>
 801d4b0:	465b      	mov	r3, fp
 801d4b2:	4622      	mov	r2, r4
 801d4b4:	4629      	mov	r1, r5
 801d4b6:	4630      	mov	r0, r6
 801d4b8:	f7ff ffa1 	bl	801d3fe <__sfputs_r>
 801d4bc:	3001      	adds	r0, #1
 801d4be:	f000 80a7 	beq.w	801d610 <_vfiprintf_r+0x1ec>
 801d4c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4c4:	445a      	add	r2, fp
 801d4c6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4c8:	f89a 3000 	ldrb.w	r3, [sl]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	f000 809f 	beq.w	801d610 <_vfiprintf_r+0x1ec>
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4dc:	f10a 0a01 	add.w	sl, sl, #1
 801d4e0:	9304      	str	r3, [sp, #16]
 801d4e2:	9307      	str	r3, [sp, #28]
 801d4e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d4e8:	931a      	str	r3, [sp, #104]	@ 0x68
 801d4ea:	4654      	mov	r4, sl
 801d4ec:	2205      	movs	r2, #5
 801d4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4f2:	4853      	ldr	r0, [pc, #332]	@ (801d640 <_vfiprintf_r+0x21c>)
 801d4f4:	f7e2 ff0c 	bl	8000310 <memchr>
 801d4f8:	9a04      	ldr	r2, [sp, #16]
 801d4fa:	b9d8      	cbnz	r0, 801d534 <_vfiprintf_r+0x110>
 801d4fc:	06d1      	lsls	r1, r2, #27
 801d4fe:	bf44      	itt	mi
 801d500:	2320      	movmi	r3, #32
 801d502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d506:	0713      	lsls	r3, r2, #28
 801d508:	bf44      	itt	mi
 801d50a:	232b      	movmi	r3, #43	@ 0x2b
 801d50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d510:	f89a 3000 	ldrb.w	r3, [sl]
 801d514:	2b2a      	cmp	r3, #42	@ 0x2a
 801d516:	d015      	beq.n	801d544 <_vfiprintf_r+0x120>
 801d518:	9a07      	ldr	r2, [sp, #28]
 801d51a:	4654      	mov	r4, sl
 801d51c:	2000      	movs	r0, #0
 801d51e:	f04f 0c0a 	mov.w	ip, #10
 801d522:	4621      	mov	r1, r4
 801d524:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d528:	3b30      	subs	r3, #48	@ 0x30
 801d52a:	2b09      	cmp	r3, #9
 801d52c:	d94b      	bls.n	801d5c6 <_vfiprintf_r+0x1a2>
 801d52e:	b1b0      	cbz	r0, 801d55e <_vfiprintf_r+0x13a>
 801d530:	9207      	str	r2, [sp, #28]
 801d532:	e014      	b.n	801d55e <_vfiprintf_r+0x13a>
 801d534:	eba0 0308 	sub.w	r3, r0, r8
 801d538:	fa09 f303 	lsl.w	r3, r9, r3
 801d53c:	4313      	orrs	r3, r2
 801d53e:	9304      	str	r3, [sp, #16]
 801d540:	46a2      	mov	sl, r4
 801d542:	e7d2      	b.n	801d4ea <_vfiprintf_r+0xc6>
 801d544:	9b03      	ldr	r3, [sp, #12]
 801d546:	1d19      	adds	r1, r3, #4
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	9103      	str	r1, [sp, #12]
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	bfbb      	ittet	lt
 801d550:	425b      	neglt	r3, r3
 801d552:	f042 0202 	orrlt.w	r2, r2, #2
 801d556:	9307      	strge	r3, [sp, #28]
 801d558:	9307      	strlt	r3, [sp, #28]
 801d55a:	bfb8      	it	lt
 801d55c:	9204      	strlt	r2, [sp, #16]
 801d55e:	7823      	ldrb	r3, [r4, #0]
 801d560:	2b2e      	cmp	r3, #46	@ 0x2e
 801d562:	d10a      	bne.n	801d57a <_vfiprintf_r+0x156>
 801d564:	7863      	ldrb	r3, [r4, #1]
 801d566:	2b2a      	cmp	r3, #42	@ 0x2a
 801d568:	d132      	bne.n	801d5d0 <_vfiprintf_r+0x1ac>
 801d56a:	9b03      	ldr	r3, [sp, #12]
 801d56c:	1d1a      	adds	r2, r3, #4
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	9203      	str	r2, [sp, #12]
 801d572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d576:	3402      	adds	r4, #2
 801d578:	9305      	str	r3, [sp, #20]
 801d57a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d650 <_vfiprintf_r+0x22c>
 801d57e:	7821      	ldrb	r1, [r4, #0]
 801d580:	2203      	movs	r2, #3
 801d582:	4650      	mov	r0, sl
 801d584:	f7e2 fec4 	bl	8000310 <memchr>
 801d588:	b138      	cbz	r0, 801d59a <_vfiprintf_r+0x176>
 801d58a:	9b04      	ldr	r3, [sp, #16]
 801d58c:	eba0 000a 	sub.w	r0, r0, sl
 801d590:	2240      	movs	r2, #64	@ 0x40
 801d592:	4082      	lsls	r2, r0
 801d594:	4313      	orrs	r3, r2
 801d596:	3401      	adds	r4, #1
 801d598:	9304      	str	r3, [sp, #16]
 801d59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d59e:	4829      	ldr	r0, [pc, #164]	@ (801d644 <_vfiprintf_r+0x220>)
 801d5a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d5a4:	2206      	movs	r2, #6
 801d5a6:	f7e2 feb3 	bl	8000310 <memchr>
 801d5aa:	2800      	cmp	r0, #0
 801d5ac:	d03f      	beq.n	801d62e <_vfiprintf_r+0x20a>
 801d5ae:	4b26      	ldr	r3, [pc, #152]	@ (801d648 <_vfiprintf_r+0x224>)
 801d5b0:	bb1b      	cbnz	r3, 801d5fa <_vfiprintf_r+0x1d6>
 801d5b2:	9b03      	ldr	r3, [sp, #12]
 801d5b4:	3307      	adds	r3, #7
 801d5b6:	f023 0307 	bic.w	r3, r3, #7
 801d5ba:	3308      	adds	r3, #8
 801d5bc:	9303      	str	r3, [sp, #12]
 801d5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5c0:	443b      	add	r3, r7
 801d5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5c4:	e76a      	b.n	801d49c <_vfiprintf_r+0x78>
 801d5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5ca:	460c      	mov	r4, r1
 801d5cc:	2001      	movs	r0, #1
 801d5ce:	e7a8      	b.n	801d522 <_vfiprintf_r+0xfe>
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	3401      	adds	r4, #1
 801d5d4:	9305      	str	r3, [sp, #20]
 801d5d6:	4619      	mov	r1, r3
 801d5d8:	f04f 0c0a 	mov.w	ip, #10
 801d5dc:	4620      	mov	r0, r4
 801d5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5e2:	3a30      	subs	r2, #48	@ 0x30
 801d5e4:	2a09      	cmp	r2, #9
 801d5e6:	d903      	bls.n	801d5f0 <_vfiprintf_r+0x1cc>
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d0c6      	beq.n	801d57a <_vfiprintf_r+0x156>
 801d5ec:	9105      	str	r1, [sp, #20]
 801d5ee:	e7c4      	b.n	801d57a <_vfiprintf_r+0x156>
 801d5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 801d5f4:	4604      	mov	r4, r0
 801d5f6:	2301      	movs	r3, #1
 801d5f8:	e7f0      	b.n	801d5dc <_vfiprintf_r+0x1b8>
 801d5fa:	ab03      	add	r3, sp, #12
 801d5fc:	9300      	str	r3, [sp, #0]
 801d5fe:	462a      	mov	r2, r5
 801d600:	4b12      	ldr	r3, [pc, #72]	@ (801d64c <_vfiprintf_r+0x228>)
 801d602:	a904      	add	r1, sp, #16
 801d604:	4630      	mov	r0, r6
 801d606:	f3af 8000 	nop.w
 801d60a:	4607      	mov	r7, r0
 801d60c:	1c78      	adds	r0, r7, #1
 801d60e:	d1d6      	bne.n	801d5be <_vfiprintf_r+0x19a>
 801d610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d612:	07d9      	lsls	r1, r3, #31
 801d614:	d405      	bmi.n	801d622 <_vfiprintf_r+0x1fe>
 801d616:	89ab      	ldrh	r3, [r5, #12]
 801d618:	059a      	lsls	r2, r3, #22
 801d61a:	d402      	bmi.n	801d622 <_vfiprintf_r+0x1fe>
 801d61c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d61e:	f7ff fceb 	bl	801cff8 <__retarget_lock_release_recursive>
 801d622:	89ab      	ldrh	r3, [r5, #12]
 801d624:	065b      	lsls	r3, r3, #25
 801d626:	f53f af1f 	bmi.w	801d468 <_vfiprintf_r+0x44>
 801d62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d62c:	e71e      	b.n	801d46c <_vfiprintf_r+0x48>
 801d62e:	ab03      	add	r3, sp, #12
 801d630:	9300      	str	r3, [sp, #0]
 801d632:	462a      	mov	r2, r5
 801d634:	4b05      	ldr	r3, [pc, #20]	@ (801d64c <_vfiprintf_r+0x228>)
 801d636:	a904      	add	r1, sp, #16
 801d638:	4630      	mov	r0, r6
 801d63a:	f000 f879 	bl	801d730 <_printf_i>
 801d63e:	e7e4      	b.n	801d60a <_vfiprintf_r+0x1e6>
 801d640:	0801ee0a 	.word	0x0801ee0a
 801d644:	0801ee14 	.word	0x0801ee14
 801d648:	00000000 	.word	0x00000000
 801d64c:	0801d3ff 	.word	0x0801d3ff
 801d650:	0801ee10 	.word	0x0801ee10

0801d654 <_printf_common>:
 801d654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d658:	4616      	mov	r6, r2
 801d65a:	4698      	mov	r8, r3
 801d65c:	688a      	ldr	r2, [r1, #8]
 801d65e:	690b      	ldr	r3, [r1, #16]
 801d660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d664:	4293      	cmp	r3, r2
 801d666:	bfb8      	it	lt
 801d668:	4613      	movlt	r3, r2
 801d66a:	6033      	str	r3, [r6, #0]
 801d66c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d670:	4607      	mov	r7, r0
 801d672:	460c      	mov	r4, r1
 801d674:	b10a      	cbz	r2, 801d67a <_printf_common+0x26>
 801d676:	3301      	adds	r3, #1
 801d678:	6033      	str	r3, [r6, #0]
 801d67a:	6823      	ldr	r3, [r4, #0]
 801d67c:	0699      	lsls	r1, r3, #26
 801d67e:	bf42      	ittt	mi
 801d680:	6833      	ldrmi	r3, [r6, #0]
 801d682:	3302      	addmi	r3, #2
 801d684:	6033      	strmi	r3, [r6, #0]
 801d686:	6825      	ldr	r5, [r4, #0]
 801d688:	f015 0506 	ands.w	r5, r5, #6
 801d68c:	d106      	bne.n	801d69c <_printf_common+0x48>
 801d68e:	f104 0a19 	add.w	sl, r4, #25
 801d692:	68e3      	ldr	r3, [r4, #12]
 801d694:	6832      	ldr	r2, [r6, #0]
 801d696:	1a9b      	subs	r3, r3, r2
 801d698:	42ab      	cmp	r3, r5
 801d69a:	dc26      	bgt.n	801d6ea <_printf_common+0x96>
 801d69c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d6a0:	6822      	ldr	r2, [r4, #0]
 801d6a2:	3b00      	subs	r3, #0
 801d6a4:	bf18      	it	ne
 801d6a6:	2301      	movne	r3, #1
 801d6a8:	0692      	lsls	r2, r2, #26
 801d6aa:	d42b      	bmi.n	801d704 <_printf_common+0xb0>
 801d6ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d6b0:	4641      	mov	r1, r8
 801d6b2:	4638      	mov	r0, r7
 801d6b4:	47c8      	blx	r9
 801d6b6:	3001      	adds	r0, #1
 801d6b8:	d01e      	beq.n	801d6f8 <_printf_common+0xa4>
 801d6ba:	6823      	ldr	r3, [r4, #0]
 801d6bc:	6922      	ldr	r2, [r4, #16]
 801d6be:	f003 0306 	and.w	r3, r3, #6
 801d6c2:	2b04      	cmp	r3, #4
 801d6c4:	bf02      	ittt	eq
 801d6c6:	68e5      	ldreq	r5, [r4, #12]
 801d6c8:	6833      	ldreq	r3, [r6, #0]
 801d6ca:	1aed      	subeq	r5, r5, r3
 801d6cc:	68a3      	ldr	r3, [r4, #8]
 801d6ce:	bf0c      	ite	eq
 801d6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d6d4:	2500      	movne	r5, #0
 801d6d6:	4293      	cmp	r3, r2
 801d6d8:	bfc4      	itt	gt
 801d6da:	1a9b      	subgt	r3, r3, r2
 801d6dc:	18ed      	addgt	r5, r5, r3
 801d6de:	2600      	movs	r6, #0
 801d6e0:	341a      	adds	r4, #26
 801d6e2:	42b5      	cmp	r5, r6
 801d6e4:	d11a      	bne.n	801d71c <_printf_common+0xc8>
 801d6e6:	2000      	movs	r0, #0
 801d6e8:	e008      	b.n	801d6fc <_printf_common+0xa8>
 801d6ea:	2301      	movs	r3, #1
 801d6ec:	4652      	mov	r2, sl
 801d6ee:	4641      	mov	r1, r8
 801d6f0:	4638      	mov	r0, r7
 801d6f2:	47c8      	blx	r9
 801d6f4:	3001      	adds	r0, #1
 801d6f6:	d103      	bne.n	801d700 <_printf_common+0xac>
 801d6f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d700:	3501      	adds	r5, #1
 801d702:	e7c6      	b.n	801d692 <_printf_common+0x3e>
 801d704:	18e1      	adds	r1, r4, r3
 801d706:	1c5a      	adds	r2, r3, #1
 801d708:	2030      	movs	r0, #48	@ 0x30
 801d70a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d70e:	4422      	add	r2, r4
 801d710:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d718:	3302      	adds	r3, #2
 801d71a:	e7c7      	b.n	801d6ac <_printf_common+0x58>
 801d71c:	2301      	movs	r3, #1
 801d71e:	4622      	mov	r2, r4
 801d720:	4641      	mov	r1, r8
 801d722:	4638      	mov	r0, r7
 801d724:	47c8      	blx	r9
 801d726:	3001      	adds	r0, #1
 801d728:	d0e6      	beq.n	801d6f8 <_printf_common+0xa4>
 801d72a:	3601      	adds	r6, #1
 801d72c:	e7d9      	b.n	801d6e2 <_printf_common+0x8e>
	...

0801d730 <_printf_i>:
 801d730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d734:	7e0f      	ldrb	r7, [r1, #24]
 801d736:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d738:	2f78      	cmp	r7, #120	@ 0x78
 801d73a:	4691      	mov	r9, r2
 801d73c:	4680      	mov	r8, r0
 801d73e:	460c      	mov	r4, r1
 801d740:	469a      	mov	sl, r3
 801d742:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d746:	d807      	bhi.n	801d758 <_printf_i+0x28>
 801d748:	2f62      	cmp	r7, #98	@ 0x62
 801d74a:	d80a      	bhi.n	801d762 <_printf_i+0x32>
 801d74c:	2f00      	cmp	r7, #0
 801d74e:	f000 80d2 	beq.w	801d8f6 <_printf_i+0x1c6>
 801d752:	2f58      	cmp	r7, #88	@ 0x58
 801d754:	f000 80b9 	beq.w	801d8ca <_printf_i+0x19a>
 801d758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d75c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d760:	e03a      	b.n	801d7d8 <_printf_i+0xa8>
 801d762:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d766:	2b15      	cmp	r3, #21
 801d768:	d8f6      	bhi.n	801d758 <_printf_i+0x28>
 801d76a:	a101      	add	r1, pc, #4	@ (adr r1, 801d770 <_printf_i+0x40>)
 801d76c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d770:	0801d7c9 	.word	0x0801d7c9
 801d774:	0801d7dd 	.word	0x0801d7dd
 801d778:	0801d759 	.word	0x0801d759
 801d77c:	0801d759 	.word	0x0801d759
 801d780:	0801d759 	.word	0x0801d759
 801d784:	0801d759 	.word	0x0801d759
 801d788:	0801d7dd 	.word	0x0801d7dd
 801d78c:	0801d759 	.word	0x0801d759
 801d790:	0801d759 	.word	0x0801d759
 801d794:	0801d759 	.word	0x0801d759
 801d798:	0801d759 	.word	0x0801d759
 801d79c:	0801d8dd 	.word	0x0801d8dd
 801d7a0:	0801d807 	.word	0x0801d807
 801d7a4:	0801d897 	.word	0x0801d897
 801d7a8:	0801d759 	.word	0x0801d759
 801d7ac:	0801d759 	.word	0x0801d759
 801d7b0:	0801d8ff 	.word	0x0801d8ff
 801d7b4:	0801d759 	.word	0x0801d759
 801d7b8:	0801d807 	.word	0x0801d807
 801d7bc:	0801d759 	.word	0x0801d759
 801d7c0:	0801d759 	.word	0x0801d759
 801d7c4:	0801d89f 	.word	0x0801d89f
 801d7c8:	6833      	ldr	r3, [r6, #0]
 801d7ca:	1d1a      	adds	r2, r3, #4
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	6032      	str	r2, [r6, #0]
 801d7d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d7d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d7d8:	2301      	movs	r3, #1
 801d7da:	e09d      	b.n	801d918 <_printf_i+0x1e8>
 801d7dc:	6833      	ldr	r3, [r6, #0]
 801d7de:	6820      	ldr	r0, [r4, #0]
 801d7e0:	1d19      	adds	r1, r3, #4
 801d7e2:	6031      	str	r1, [r6, #0]
 801d7e4:	0606      	lsls	r6, r0, #24
 801d7e6:	d501      	bpl.n	801d7ec <_printf_i+0xbc>
 801d7e8:	681d      	ldr	r5, [r3, #0]
 801d7ea:	e003      	b.n	801d7f4 <_printf_i+0xc4>
 801d7ec:	0645      	lsls	r5, r0, #25
 801d7ee:	d5fb      	bpl.n	801d7e8 <_printf_i+0xb8>
 801d7f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d7f4:	2d00      	cmp	r5, #0
 801d7f6:	da03      	bge.n	801d800 <_printf_i+0xd0>
 801d7f8:	232d      	movs	r3, #45	@ 0x2d
 801d7fa:	426d      	negs	r5, r5
 801d7fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d800:	4859      	ldr	r0, [pc, #356]	@ (801d968 <_printf_i+0x238>)
 801d802:	230a      	movs	r3, #10
 801d804:	e011      	b.n	801d82a <_printf_i+0xfa>
 801d806:	6821      	ldr	r1, [r4, #0]
 801d808:	6833      	ldr	r3, [r6, #0]
 801d80a:	0608      	lsls	r0, r1, #24
 801d80c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d810:	d402      	bmi.n	801d818 <_printf_i+0xe8>
 801d812:	0649      	lsls	r1, r1, #25
 801d814:	bf48      	it	mi
 801d816:	b2ad      	uxthmi	r5, r5
 801d818:	2f6f      	cmp	r7, #111	@ 0x6f
 801d81a:	4853      	ldr	r0, [pc, #332]	@ (801d968 <_printf_i+0x238>)
 801d81c:	6033      	str	r3, [r6, #0]
 801d81e:	bf14      	ite	ne
 801d820:	230a      	movne	r3, #10
 801d822:	2308      	moveq	r3, #8
 801d824:	2100      	movs	r1, #0
 801d826:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d82a:	6866      	ldr	r6, [r4, #4]
 801d82c:	60a6      	str	r6, [r4, #8]
 801d82e:	2e00      	cmp	r6, #0
 801d830:	bfa2      	ittt	ge
 801d832:	6821      	ldrge	r1, [r4, #0]
 801d834:	f021 0104 	bicge.w	r1, r1, #4
 801d838:	6021      	strge	r1, [r4, #0]
 801d83a:	b90d      	cbnz	r5, 801d840 <_printf_i+0x110>
 801d83c:	2e00      	cmp	r6, #0
 801d83e:	d04b      	beq.n	801d8d8 <_printf_i+0x1a8>
 801d840:	4616      	mov	r6, r2
 801d842:	fbb5 f1f3 	udiv	r1, r5, r3
 801d846:	fb03 5711 	mls	r7, r3, r1, r5
 801d84a:	5dc7      	ldrb	r7, [r0, r7]
 801d84c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d850:	462f      	mov	r7, r5
 801d852:	42bb      	cmp	r3, r7
 801d854:	460d      	mov	r5, r1
 801d856:	d9f4      	bls.n	801d842 <_printf_i+0x112>
 801d858:	2b08      	cmp	r3, #8
 801d85a:	d10b      	bne.n	801d874 <_printf_i+0x144>
 801d85c:	6823      	ldr	r3, [r4, #0]
 801d85e:	07df      	lsls	r7, r3, #31
 801d860:	d508      	bpl.n	801d874 <_printf_i+0x144>
 801d862:	6923      	ldr	r3, [r4, #16]
 801d864:	6861      	ldr	r1, [r4, #4]
 801d866:	4299      	cmp	r1, r3
 801d868:	bfde      	ittt	le
 801d86a:	2330      	movle	r3, #48	@ 0x30
 801d86c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d870:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d874:	1b92      	subs	r2, r2, r6
 801d876:	6122      	str	r2, [r4, #16]
 801d878:	f8cd a000 	str.w	sl, [sp]
 801d87c:	464b      	mov	r3, r9
 801d87e:	aa03      	add	r2, sp, #12
 801d880:	4621      	mov	r1, r4
 801d882:	4640      	mov	r0, r8
 801d884:	f7ff fee6 	bl	801d654 <_printf_common>
 801d888:	3001      	adds	r0, #1
 801d88a:	d14a      	bne.n	801d922 <_printf_i+0x1f2>
 801d88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d890:	b004      	add	sp, #16
 801d892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d896:	6823      	ldr	r3, [r4, #0]
 801d898:	f043 0320 	orr.w	r3, r3, #32
 801d89c:	6023      	str	r3, [r4, #0]
 801d89e:	4833      	ldr	r0, [pc, #204]	@ (801d96c <_printf_i+0x23c>)
 801d8a0:	2778      	movs	r7, #120	@ 0x78
 801d8a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d8a6:	6823      	ldr	r3, [r4, #0]
 801d8a8:	6831      	ldr	r1, [r6, #0]
 801d8aa:	061f      	lsls	r7, r3, #24
 801d8ac:	f851 5b04 	ldr.w	r5, [r1], #4
 801d8b0:	d402      	bmi.n	801d8b8 <_printf_i+0x188>
 801d8b2:	065f      	lsls	r7, r3, #25
 801d8b4:	bf48      	it	mi
 801d8b6:	b2ad      	uxthmi	r5, r5
 801d8b8:	6031      	str	r1, [r6, #0]
 801d8ba:	07d9      	lsls	r1, r3, #31
 801d8bc:	bf44      	itt	mi
 801d8be:	f043 0320 	orrmi.w	r3, r3, #32
 801d8c2:	6023      	strmi	r3, [r4, #0]
 801d8c4:	b11d      	cbz	r5, 801d8ce <_printf_i+0x19e>
 801d8c6:	2310      	movs	r3, #16
 801d8c8:	e7ac      	b.n	801d824 <_printf_i+0xf4>
 801d8ca:	4827      	ldr	r0, [pc, #156]	@ (801d968 <_printf_i+0x238>)
 801d8cc:	e7e9      	b.n	801d8a2 <_printf_i+0x172>
 801d8ce:	6823      	ldr	r3, [r4, #0]
 801d8d0:	f023 0320 	bic.w	r3, r3, #32
 801d8d4:	6023      	str	r3, [r4, #0]
 801d8d6:	e7f6      	b.n	801d8c6 <_printf_i+0x196>
 801d8d8:	4616      	mov	r6, r2
 801d8da:	e7bd      	b.n	801d858 <_printf_i+0x128>
 801d8dc:	6833      	ldr	r3, [r6, #0]
 801d8de:	6825      	ldr	r5, [r4, #0]
 801d8e0:	6961      	ldr	r1, [r4, #20]
 801d8e2:	1d18      	adds	r0, r3, #4
 801d8e4:	6030      	str	r0, [r6, #0]
 801d8e6:	062e      	lsls	r6, r5, #24
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	d501      	bpl.n	801d8f0 <_printf_i+0x1c0>
 801d8ec:	6019      	str	r1, [r3, #0]
 801d8ee:	e002      	b.n	801d8f6 <_printf_i+0x1c6>
 801d8f0:	0668      	lsls	r0, r5, #25
 801d8f2:	d5fb      	bpl.n	801d8ec <_printf_i+0x1bc>
 801d8f4:	8019      	strh	r1, [r3, #0]
 801d8f6:	2300      	movs	r3, #0
 801d8f8:	6123      	str	r3, [r4, #16]
 801d8fa:	4616      	mov	r6, r2
 801d8fc:	e7bc      	b.n	801d878 <_printf_i+0x148>
 801d8fe:	6833      	ldr	r3, [r6, #0]
 801d900:	1d1a      	adds	r2, r3, #4
 801d902:	6032      	str	r2, [r6, #0]
 801d904:	681e      	ldr	r6, [r3, #0]
 801d906:	6862      	ldr	r2, [r4, #4]
 801d908:	2100      	movs	r1, #0
 801d90a:	4630      	mov	r0, r6
 801d90c:	f7e2 fd00 	bl	8000310 <memchr>
 801d910:	b108      	cbz	r0, 801d916 <_printf_i+0x1e6>
 801d912:	1b80      	subs	r0, r0, r6
 801d914:	6060      	str	r0, [r4, #4]
 801d916:	6863      	ldr	r3, [r4, #4]
 801d918:	6123      	str	r3, [r4, #16]
 801d91a:	2300      	movs	r3, #0
 801d91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d920:	e7aa      	b.n	801d878 <_printf_i+0x148>
 801d922:	6923      	ldr	r3, [r4, #16]
 801d924:	4632      	mov	r2, r6
 801d926:	4649      	mov	r1, r9
 801d928:	4640      	mov	r0, r8
 801d92a:	47d0      	blx	sl
 801d92c:	3001      	adds	r0, #1
 801d92e:	d0ad      	beq.n	801d88c <_printf_i+0x15c>
 801d930:	6823      	ldr	r3, [r4, #0]
 801d932:	079b      	lsls	r3, r3, #30
 801d934:	d413      	bmi.n	801d95e <_printf_i+0x22e>
 801d936:	68e0      	ldr	r0, [r4, #12]
 801d938:	9b03      	ldr	r3, [sp, #12]
 801d93a:	4298      	cmp	r0, r3
 801d93c:	bfb8      	it	lt
 801d93e:	4618      	movlt	r0, r3
 801d940:	e7a6      	b.n	801d890 <_printf_i+0x160>
 801d942:	2301      	movs	r3, #1
 801d944:	4632      	mov	r2, r6
 801d946:	4649      	mov	r1, r9
 801d948:	4640      	mov	r0, r8
 801d94a:	47d0      	blx	sl
 801d94c:	3001      	adds	r0, #1
 801d94e:	d09d      	beq.n	801d88c <_printf_i+0x15c>
 801d950:	3501      	adds	r5, #1
 801d952:	68e3      	ldr	r3, [r4, #12]
 801d954:	9903      	ldr	r1, [sp, #12]
 801d956:	1a5b      	subs	r3, r3, r1
 801d958:	42ab      	cmp	r3, r5
 801d95a:	dcf2      	bgt.n	801d942 <_printf_i+0x212>
 801d95c:	e7eb      	b.n	801d936 <_printf_i+0x206>
 801d95e:	2500      	movs	r5, #0
 801d960:	f104 0619 	add.w	r6, r4, #25
 801d964:	e7f5      	b.n	801d952 <_printf_i+0x222>
 801d966:	bf00      	nop
 801d968:	0801ee1b 	.word	0x0801ee1b
 801d96c:	0801ee2c 	.word	0x0801ee2c

0801d970 <__sflush_r>:
 801d970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d978:	0716      	lsls	r6, r2, #28
 801d97a:	4605      	mov	r5, r0
 801d97c:	460c      	mov	r4, r1
 801d97e:	d454      	bmi.n	801da2a <__sflush_r+0xba>
 801d980:	684b      	ldr	r3, [r1, #4]
 801d982:	2b00      	cmp	r3, #0
 801d984:	dc02      	bgt.n	801d98c <__sflush_r+0x1c>
 801d986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dd48      	ble.n	801da1e <__sflush_r+0xae>
 801d98c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d98e:	2e00      	cmp	r6, #0
 801d990:	d045      	beq.n	801da1e <__sflush_r+0xae>
 801d992:	2300      	movs	r3, #0
 801d994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d998:	682f      	ldr	r7, [r5, #0]
 801d99a:	6a21      	ldr	r1, [r4, #32]
 801d99c:	602b      	str	r3, [r5, #0]
 801d99e:	d030      	beq.n	801da02 <__sflush_r+0x92>
 801d9a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d9a2:	89a3      	ldrh	r3, [r4, #12]
 801d9a4:	0759      	lsls	r1, r3, #29
 801d9a6:	d505      	bpl.n	801d9b4 <__sflush_r+0x44>
 801d9a8:	6863      	ldr	r3, [r4, #4]
 801d9aa:	1ad2      	subs	r2, r2, r3
 801d9ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d9ae:	b10b      	cbz	r3, 801d9b4 <__sflush_r+0x44>
 801d9b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d9b2:	1ad2      	subs	r2, r2, r3
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9b8:	6a21      	ldr	r1, [r4, #32]
 801d9ba:	4628      	mov	r0, r5
 801d9bc:	47b0      	blx	r6
 801d9be:	1c43      	adds	r3, r0, #1
 801d9c0:	89a3      	ldrh	r3, [r4, #12]
 801d9c2:	d106      	bne.n	801d9d2 <__sflush_r+0x62>
 801d9c4:	6829      	ldr	r1, [r5, #0]
 801d9c6:	291d      	cmp	r1, #29
 801d9c8:	d82b      	bhi.n	801da22 <__sflush_r+0xb2>
 801d9ca:	4a2a      	ldr	r2, [pc, #168]	@ (801da74 <__sflush_r+0x104>)
 801d9cc:	410a      	asrs	r2, r1
 801d9ce:	07d6      	lsls	r6, r2, #31
 801d9d0:	d427      	bmi.n	801da22 <__sflush_r+0xb2>
 801d9d2:	2200      	movs	r2, #0
 801d9d4:	6062      	str	r2, [r4, #4]
 801d9d6:	04d9      	lsls	r1, r3, #19
 801d9d8:	6922      	ldr	r2, [r4, #16]
 801d9da:	6022      	str	r2, [r4, #0]
 801d9dc:	d504      	bpl.n	801d9e8 <__sflush_r+0x78>
 801d9de:	1c42      	adds	r2, r0, #1
 801d9e0:	d101      	bne.n	801d9e6 <__sflush_r+0x76>
 801d9e2:	682b      	ldr	r3, [r5, #0]
 801d9e4:	b903      	cbnz	r3, 801d9e8 <__sflush_r+0x78>
 801d9e6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d9e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d9ea:	602f      	str	r7, [r5, #0]
 801d9ec:	b1b9      	cbz	r1, 801da1e <__sflush_r+0xae>
 801d9ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d9f2:	4299      	cmp	r1, r3
 801d9f4:	d002      	beq.n	801d9fc <__sflush_r+0x8c>
 801d9f6:	4628      	mov	r0, r5
 801d9f8:	f7ff fb40 	bl	801d07c <_free_r>
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	6363      	str	r3, [r4, #52]	@ 0x34
 801da00:	e00d      	b.n	801da1e <__sflush_r+0xae>
 801da02:	2301      	movs	r3, #1
 801da04:	4628      	mov	r0, r5
 801da06:	47b0      	blx	r6
 801da08:	4602      	mov	r2, r0
 801da0a:	1c50      	adds	r0, r2, #1
 801da0c:	d1c9      	bne.n	801d9a2 <__sflush_r+0x32>
 801da0e:	682b      	ldr	r3, [r5, #0]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d0c6      	beq.n	801d9a2 <__sflush_r+0x32>
 801da14:	2b1d      	cmp	r3, #29
 801da16:	d001      	beq.n	801da1c <__sflush_r+0xac>
 801da18:	2b16      	cmp	r3, #22
 801da1a:	d11e      	bne.n	801da5a <__sflush_r+0xea>
 801da1c:	602f      	str	r7, [r5, #0]
 801da1e:	2000      	movs	r0, #0
 801da20:	e022      	b.n	801da68 <__sflush_r+0xf8>
 801da22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da26:	b21b      	sxth	r3, r3
 801da28:	e01b      	b.n	801da62 <__sflush_r+0xf2>
 801da2a:	690f      	ldr	r7, [r1, #16]
 801da2c:	2f00      	cmp	r7, #0
 801da2e:	d0f6      	beq.n	801da1e <__sflush_r+0xae>
 801da30:	0793      	lsls	r3, r2, #30
 801da32:	680e      	ldr	r6, [r1, #0]
 801da34:	bf08      	it	eq
 801da36:	694b      	ldreq	r3, [r1, #20]
 801da38:	600f      	str	r7, [r1, #0]
 801da3a:	bf18      	it	ne
 801da3c:	2300      	movne	r3, #0
 801da3e:	eba6 0807 	sub.w	r8, r6, r7
 801da42:	608b      	str	r3, [r1, #8]
 801da44:	f1b8 0f00 	cmp.w	r8, #0
 801da48:	dde9      	ble.n	801da1e <__sflush_r+0xae>
 801da4a:	6a21      	ldr	r1, [r4, #32]
 801da4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801da4e:	4643      	mov	r3, r8
 801da50:	463a      	mov	r2, r7
 801da52:	4628      	mov	r0, r5
 801da54:	47b0      	blx	r6
 801da56:	2800      	cmp	r0, #0
 801da58:	dc08      	bgt.n	801da6c <__sflush_r+0xfc>
 801da5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da62:	81a3      	strh	r3, [r4, #12]
 801da64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da6c:	4407      	add	r7, r0
 801da6e:	eba8 0800 	sub.w	r8, r8, r0
 801da72:	e7e7      	b.n	801da44 <__sflush_r+0xd4>
 801da74:	dfbffffe 	.word	0xdfbffffe

0801da78 <_fflush_r>:
 801da78:	b538      	push	{r3, r4, r5, lr}
 801da7a:	690b      	ldr	r3, [r1, #16]
 801da7c:	4605      	mov	r5, r0
 801da7e:	460c      	mov	r4, r1
 801da80:	b913      	cbnz	r3, 801da88 <_fflush_r+0x10>
 801da82:	2500      	movs	r5, #0
 801da84:	4628      	mov	r0, r5
 801da86:	bd38      	pop	{r3, r4, r5, pc}
 801da88:	b118      	cbz	r0, 801da92 <_fflush_r+0x1a>
 801da8a:	6a03      	ldr	r3, [r0, #32]
 801da8c:	b90b      	cbnz	r3, 801da92 <_fflush_r+0x1a>
 801da8e:	f7fe ffe3 	bl	801ca58 <__sinit>
 801da92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da96:	2b00      	cmp	r3, #0
 801da98:	d0f3      	beq.n	801da82 <_fflush_r+0xa>
 801da9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801da9c:	07d0      	lsls	r0, r2, #31
 801da9e:	d404      	bmi.n	801daaa <_fflush_r+0x32>
 801daa0:	0599      	lsls	r1, r3, #22
 801daa2:	d402      	bmi.n	801daaa <_fflush_r+0x32>
 801daa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801daa6:	f7ff faa6 	bl	801cff6 <__retarget_lock_acquire_recursive>
 801daaa:	4628      	mov	r0, r5
 801daac:	4621      	mov	r1, r4
 801daae:	f7ff ff5f 	bl	801d970 <__sflush_r>
 801dab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dab4:	07da      	lsls	r2, r3, #31
 801dab6:	4605      	mov	r5, r0
 801dab8:	d4e4      	bmi.n	801da84 <_fflush_r+0xc>
 801daba:	89a3      	ldrh	r3, [r4, #12]
 801dabc:	059b      	lsls	r3, r3, #22
 801dabe:	d4e1      	bmi.n	801da84 <_fflush_r+0xc>
 801dac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dac2:	f7ff fa99 	bl	801cff8 <__retarget_lock_release_recursive>
 801dac6:	e7dd      	b.n	801da84 <_fflush_r+0xc>

0801dac8 <fiprintf>:
 801dac8:	b40e      	push	{r1, r2, r3}
 801daca:	b503      	push	{r0, r1, lr}
 801dacc:	4601      	mov	r1, r0
 801dace:	ab03      	add	r3, sp, #12
 801dad0:	4805      	ldr	r0, [pc, #20]	@ (801dae8 <fiprintf+0x20>)
 801dad2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dad6:	6800      	ldr	r0, [r0, #0]
 801dad8:	9301      	str	r3, [sp, #4]
 801dada:	f7ff fca3 	bl	801d424 <_vfiprintf_r>
 801dade:	b002      	add	sp, #8
 801dae0:	f85d eb04 	ldr.w	lr, [sp], #4
 801dae4:	b003      	add	sp, #12
 801dae6:	4770      	bx	lr
 801dae8:	2400068c 	.word	0x2400068c

0801daec <__swhatbuf_r>:
 801daec:	b570      	push	{r4, r5, r6, lr}
 801daee:	460c      	mov	r4, r1
 801daf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801daf4:	2900      	cmp	r1, #0
 801daf6:	b096      	sub	sp, #88	@ 0x58
 801daf8:	4615      	mov	r5, r2
 801dafa:	461e      	mov	r6, r3
 801dafc:	da0d      	bge.n	801db1a <__swhatbuf_r+0x2e>
 801dafe:	89a3      	ldrh	r3, [r4, #12]
 801db00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801db04:	f04f 0100 	mov.w	r1, #0
 801db08:	bf14      	ite	ne
 801db0a:	2340      	movne	r3, #64	@ 0x40
 801db0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db10:	2000      	movs	r0, #0
 801db12:	6031      	str	r1, [r6, #0]
 801db14:	602b      	str	r3, [r5, #0]
 801db16:	b016      	add	sp, #88	@ 0x58
 801db18:	bd70      	pop	{r4, r5, r6, pc}
 801db1a:	466a      	mov	r2, sp
 801db1c:	f000 f848 	bl	801dbb0 <_fstat_r>
 801db20:	2800      	cmp	r0, #0
 801db22:	dbec      	blt.n	801dafe <__swhatbuf_r+0x12>
 801db24:	9901      	ldr	r1, [sp, #4]
 801db26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801db2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801db2e:	4259      	negs	r1, r3
 801db30:	4159      	adcs	r1, r3
 801db32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801db36:	e7eb      	b.n	801db10 <__swhatbuf_r+0x24>

0801db38 <__smakebuf_r>:
 801db38:	898b      	ldrh	r3, [r1, #12]
 801db3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db3c:	079d      	lsls	r5, r3, #30
 801db3e:	4606      	mov	r6, r0
 801db40:	460c      	mov	r4, r1
 801db42:	d507      	bpl.n	801db54 <__smakebuf_r+0x1c>
 801db44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801db48:	6023      	str	r3, [r4, #0]
 801db4a:	6123      	str	r3, [r4, #16]
 801db4c:	2301      	movs	r3, #1
 801db4e:	6163      	str	r3, [r4, #20]
 801db50:	b003      	add	sp, #12
 801db52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db54:	ab01      	add	r3, sp, #4
 801db56:	466a      	mov	r2, sp
 801db58:	f7ff ffc8 	bl	801daec <__swhatbuf_r>
 801db5c:	9f00      	ldr	r7, [sp, #0]
 801db5e:	4605      	mov	r5, r0
 801db60:	4639      	mov	r1, r7
 801db62:	4630      	mov	r0, r6
 801db64:	f7fe fd46 	bl	801c5f4 <_malloc_r>
 801db68:	b948      	cbnz	r0, 801db7e <__smakebuf_r+0x46>
 801db6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db6e:	059a      	lsls	r2, r3, #22
 801db70:	d4ee      	bmi.n	801db50 <__smakebuf_r+0x18>
 801db72:	f023 0303 	bic.w	r3, r3, #3
 801db76:	f043 0302 	orr.w	r3, r3, #2
 801db7a:	81a3      	strh	r3, [r4, #12]
 801db7c:	e7e2      	b.n	801db44 <__smakebuf_r+0xc>
 801db7e:	89a3      	ldrh	r3, [r4, #12]
 801db80:	6020      	str	r0, [r4, #0]
 801db82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801db86:	81a3      	strh	r3, [r4, #12]
 801db88:	9b01      	ldr	r3, [sp, #4]
 801db8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801db8e:	b15b      	cbz	r3, 801dba8 <__smakebuf_r+0x70>
 801db90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db94:	4630      	mov	r0, r6
 801db96:	f000 f81d 	bl	801dbd4 <_isatty_r>
 801db9a:	b128      	cbz	r0, 801dba8 <__smakebuf_r+0x70>
 801db9c:	89a3      	ldrh	r3, [r4, #12]
 801db9e:	f023 0303 	bic.w	r3, r3, #3
 801dba2:	f043 0301 	orr.w	r3, r3, #1
 801dba6:	81a3      	strh	r3, [r4, #12]
 801dba8:	89a3      	ldrh	r3, [r4, #12]
 801dbaa:	431d      	orrs	r5, r3
 801dbac:	81a5      	strh	r5, [r4, #12]
 801dbae:	e7cf      	b.n	801db50 <__smakebuf_r+0x18>

0801dbb0 <_fstat_r>:
 801dbb0:	b538      	push	{r3, r4, r5, lr}
 801dbb2:	4d07      	ldr	r5, [pc, #28]	@ (801dbd0 <_fstat_r+0x20>)
 801dbb4:	2300      	movs	r3, #0
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	4608      	mov	r0, r1
 801dbba:	4611      	mov	r1, r2
 801dbbc:	602b      	str	r3, [r5, #0]
 801dbbe:	f7e4 f9a9 	bl	8001f14 <_fstat>
 801dbc2:	1c43      	adds	r3, r0, #1
 801dbc4:	d102      	bne.n	801dbcc <_fstat_r+0x1c>
 801dbc6:	682b      	ldr	r3, [r5, #0]
 801dbc8:	b103      	cbz	r3, 801dbcc <_fstat_r+0x1c>
 801dbca:	6023      	str	r3, [r4, #0]
 801dbcc:	bd38      	pop	{r3, r4, r5, pc}
 801dbce:	bf00      	nop
 801dbd0:	24013ab8 	.word	0x24013ab8

0801dbd4 <_isatty_r>:
 801dbd4:	b538      	push	{r3, r4, r5, lr}
 801dbd6:	4d06      	ldr	r5, [pc, #24]	@ (801dbf0 <_isatty_r+0x1c>)
 801dbd8:	2300      	movs	r3, #0
 801dbda:	4604      	mov	r4, r0
 801dbdc:	4608      	mov	r0, r1
 801dbde:	602b      	str	r3, [r5, #0]
 801dbe0:	f7e4 f9a8 	bl	8001f34 <_isatty>
 801dbe4:	1c43      	adds	r3, r0, #1
 801dbe6:	d102      	bne.n	801dbee <_isatty_r+0x1a>
 801dbe8:	682b      	ldr	r3, [r5, #0]
 801dbea:	b103      	cbz	r3, 801dbee <_isatty_r+0x1a>
 801dbec:	6023      	str	r3, [r4, #0]
 801dbee:	bd38      	pop	{r3, r4, r5, pc}
 801dbf0:	24013ab8 	.word	0x24013ab8

0801dbf4 <abort>:
 801dbf4:	b508      	push	{r3, lr}
 801dbf6:	2006      	movs	r0, #6
 801dbf8:	f000 f82c 	bl	801dc54 <raise>
 801dbfc:	2001      	movs	r0, #1
 801dbfe:	f7e4 f939 	bl	8001e74 <_exit>

0801dc02 <_raise_r>:
 801dc02:	291f      	cmp	r1, #31
 801dc04:	b538      	push	{r3, r4, r5, lr}
 801dc06:	4605      	mov	r5, r0
 801dc08:	460c      	mov	r4, r1
 801dc0a:	d904      	bls.n	801dc16 <_raise_r+0x14>
 801dc0c:	2316      	movs	r3, #22
 801dc0e:	6003      	str	r3, [r0, #0]
 801dc10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc14:	bd38      	pop	{r3, r4, r5, pc}
 801dc16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dc18:	b112      	cbz	r2, 801dc20 <_raise_r+0x1e>
 801dc1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc1e:	b94b      	cbnz	r3, 801dc34 <_raise_r+0x32>
 801dc20:	4628      	mov	r0, r5
 801dc22:	f000 f831 	bl	801dc88 <_getpid_r>
 801dc26:	4622      	mov	r2, r4
 801dc28:	4601      	mov	r1, r0
 801dc2a:	4628      	mov	r0, r5
 801dc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc30:	f000 b818 	b.w	801dc64 <_kill_r>
 801dc34:	2b01      	cmp	r3, #1
 801dc36:	d00a      	beq.n	801dc4e <_raise_r+0x4c>
 801dc38:	1c59      	adds	r1, r3, #1
 801dc3a:	d103      	bne.n	801dc44 <_raise_r+0x42>
 801dc3c:	2316      	movs	r3, #22
 801dc3e:	6003      	str	r3, [r0, #0]
 801dc40:	2001      	movs	r0, #1
 801dc42:	e7e7      	b.n	801dc14 <_raise_r+0x12>
 801dc44:	2100      	movs	r1, #0
 801dc46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dc4a:	4620      	mov	r0, r4
 801dc4c:	4798      	blx	r3
 801dc4e:	2000      	movs	r0, #0
 801dc50:	e7e0      	b.n	801dc14 <_raise_r+0x12>
	...

0801dc54 <raise>:
 801dc54:	4b02      	ldr	r3, [pc, #8]	@ (801dc60 <raise+0xc>)
 801dc56:	4601      	mov	r1, r0
 801dc58:	6818      	ldr	r0, [r3, #0]
 801dc5a:	f7ff bfd2 	b.w	801dc02 <_raise_r>
 801dc5e:	bf00      	nop
 801dc60:	2400068c 	.word	0x2400068c

0801dc64 <_kill_r>:
 801dc64:	b538      	push	{r3, r4, r5, lr}
 801dc66:	4d07      	ldr	r5, [pc, #28]	@ (801dc84 <_kill_r+0x20>)
 801dc68:	2300      	movs	r3, #0
 801dc6a:	4604      	mov	r4, r0
 801dc6c:	4608      	mov	r0, r1
 801dc6e:	4611      	mov	r1, r2
 801dc70:	602b      	str	r3, [r5, #0]
 801dc72:	f7e4 f8ef 	bl	8001e54 <_kill>
 801dc76:	1c43      	adds	r3, r0, #1
 801dc78:	d102      	bne.n	801dc80 <_kill_r+0x1c>
 801dc7a:	682b      	ldr	r3, [r5, #0]
 801dc7c:	b103      	cbz	r3, 801dc80 <_kill_r+0x1c>
 801dc7e:	6023      	str	r3, [r4, #0]
 801dc80:	bd38      	pop	{r3, r4, r5, pc}
 801dc82:	bf00      	nop
 801dc84:	24013ab8 	.word	0x24013ab8

0801dc88 <_getpid_r>:
 801dc88:	f7e4 b8dc 	b.w	8001e44 <_getpid>

0801dc8c <_init>:
 801dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc8e:	bf00      	nop
 801dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc92:	bc08      	pop	{r3}
 801dc94:	469e      	mov	lr, r3
 801dc96:	4770      	bx	lr

0801dc98 <_fini>:
 801dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc9a:	bf00      	nop
 801dc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc9e:	bc08      	pop	{r3}
 801dca0:	469e      	mov	lr, r3
 801dca2:	4770      	bx	lr
